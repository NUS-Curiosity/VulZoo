
Date: Thu, 7 Apr 2016 10:22:22 +0200
From: Vulnerability Lab <research@...nerability-lab.com>
To: bugtraq@...urityfocus.com, bugs@...uritytracker.com
Subject: Quicksilver HQ VoHo Concept4E CMS v1.0 - Multiple SQL Injection Web
 Vulnerabilities

Document Title:
===============
Quicksilver HQ VoHo Concept4E CMS v1.0 - Multiple SQL Injection Web
Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1816


Release Date:
=============
2016-04-06


Vulnerability Laboratory ID (VL-ID):
====================================
1816


Common Vulnerability Scoring System:
====================================
7.4


Product & Service Introduction:
===============================
Quicksilver VoHo Concept4E CMS v1.0 is a commercial content management
system for Energy, Ecology, Environment or Entertainment. The cms is
produced by the QuicksilverHQ VoHo company in india.

(Copy of the Vendor Homepage:  http://www.quicksilverhq.com/ )


Abstract Advisory Information:
==============================
An independent vulnerability laboratory researcher discovered multiple
sql-injection vulnerabilities in the Quicksilver VoHo Concept4E v1.0
Content Management System.


Vulnerability Disclosure Timeline:
==================================
2016-04-06: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
Quicksilver HQ
Product: Quicksilver VoHo Concept4E - Content Management System 1.0


Exploitation Technique:
=======================
Remote


Severity Level:
===============
High


Technical Details & Description:
================================
A remote sql-injection web vulnerability has been discovered  in the
Quicksilver VoHo Concept4E v1.0 Content Management System.
The web vulnerability allows remote attackers to execute own sql
commands to compromise the web-applicaation or connected dbms.

The sql-injection vulnerability is located in the `contentid and `page`
values of the `members.php`, `news.php`, `index.php`,
`index2.php`, `updates.php` or `contacts.php` files. Remote attackers
are able to execute sql commands by injection of malicious
statements via GET method request. The vulnerability is located on the
application-side of the online service. The injection points
are the page and contentid values in the vulnerable marked *.php files.
The security vulnerability is a classic order by sql injection
bug in the page and id parameter.

The security risk of the sql-injection vulnerability is estimated as
high with a cvss (common vulnerability scoring system) count of 7.4.
Exploitation of the remote sql injection web vulnerability requires no
user interaction or privileged web-application user accounts.
Successful exploitation of the remote sql injection results in database
management system, web-server and web-application compromise.

Request Method(s):
                [+] GET

Vulnerable File(s):
                [+] members.php
                [+] news.php
                [+] index.php
                [+] updates.php
                [+] contacts.php
                [+] index2.php

Vulnerable Parameter(s):
                [+] contentid
                [+] page


Proof of Concept (PoC):
=======================
The remote sql-injection web vulnerability can be exploited by remote
attackers without user interaction or privileged web-application user
accounts.
For security demonstration or to reproduce the vulnerability follow the
provided information and steps below to continue.


Dork(s):
intext:Powered by Quicksilver VoHo inurl:.php?contentid=


PoC: Exploitation
http://localhost:8080/members.php?contentid=login'[SQL-INJECTION
VULNERABILITY!]*--
http://localhost:8080/news.php?contentid=news_full_display'[SQL-INJECTION VULNERABILITY!]*--
http://localhost:8080/index.php?page=resources&contentid=faq'[SQL-INJECTION
VULNERABILITY!]*--
http://localhost:8080/index.php?contentid=rssintro'[SQL-INJECTION
VULNERABILITY!]*--
http://localhost:8080/updates.php?contentid=clsevents_view'[SQL-INJECTION VULNERABILITY!]*--
http://localhost:8080/contacts.php?contentid=contacts'[SQL-INJECTION
VULNERABILITY!]*--
http://localhost:8080/index2.php?page=newsupdates&contentid=faqlist'[SQL-INJECTION
VULNERABILITY!]*--


Solution - Fix & Patch:
=======================
The vulnerability can be patched by usage of a secure prepared statement
and entities in the vulnerable marked files GET method request.
Filter and restrict the input by disallowing the usage of special chars
or escape the entries.
Encode and parse the vulnerable contentid and page parameters context to
finally prevent exploitation of the vulnerability.


Security Risk:
==============
The security risk of the remote sql-injection web vulnerabilities in the
content management system are estimated as high. (CVSS 7.4)


Credits & Authors:
==================
Iran Cyber Security Group - 0x3a (ICG SEC) [Iran-Cyber.Net]
[http://www.vulnerability-lab.com/show.php?user=Iran%20Cyber%20Security]
THX: MOHAMAD-NOFOZI , root3r , sir.h4m1d , m0hamad.black , whitewolf ,
mr.s4jj4d , mr.turk , 0day , pi.hack , l3gi0n , nazanin_wild and 0xdevil


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without
any warranty. Vulnerability Lab disclaims all warranties, either
expressed or implied,
including the warranties of merchantability and capability for a
particular purpose. Vulnerability-Lab or its suppliers are not liable in
any case of damage,
including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers
have been advised
of the possibility of such damages. Some states do not allow the
exclusion or limitation of liability for consequential or incidental
damages so the foregoing
limitation may not apply. We do not approve or encourage anybody to
break any licenses, policies, deface websites, hack into databases or
trade with stolen data.

Domains:    www.vulnerability-lab.com         - www.vuln-lab.com        
                - www.evolution-sec.com
Contact:    admin@...nerability-lab.com     -
research@...nerability-lab.com                 - admin@...lution-sec.com
Section:    magazine.vulnerability-lab.com     -
vulnerability-lab.com/contact.php                 -
evolution-sec.com/contact
Social:        twitter.com/vuln_lab        -
facebook.com/VulnerabilityLab                 -
youtube.com/user/vulnerability0lab
Feeds:        vulnerability-lab.com/rss/rss.php     -
vulnerability-lab.com/rss/rss_upcoming.php             -
vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php     -
vulnerability-lab.com/list-of-bug-bounty-programs.php     -
vulnerability-lab.com/register.php

Any modified copy or reproduction, including partially usages, of this
file requires authorization from Vulnerability Laboratory. Permission to
electronically
redistribute this alert in its unmodified form is granted. All other
rights, including the use of other media, are reserved by
Vulnerability-Lab Research Team or
its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team
& the specific
authors or managers. To record, list, modify, use or edit our material
contact (admin@ or research@...nerability-lab.com) to get a ask permission.

                    Copyright © 2016 | Vulnerability Laboratory -
[Evolution Security GmbH]™

-- 
VULNERABILITY LABORATORY - RESEARCH TEAM
SERVICE: www.vulnerability-lab.com
CONTACT: research@...nerability-lab.com


