#!/usr/bin/env python3

import os
import pandas as pd
from collections import OrderedDict
import re
import json


src_dir = "../../raw-data/exploit-db-database"
dst_dir = "../../processed/exploit-db-database"
exploit_dir = f"{src_dir}/exploits"
exploit_manifest_csv = f"{src_dir}/files_exploits.csv"
cve_exp_link_file = f"{dst_dir}/cve-exploit-links.json"


def ensure_dir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)


if __name__ == "__main__":
    ensure_dir(dst_dir)
    os.system(f"cp -r {exploit_dir} {dst_dir}")
    # convert the csv to json
    df = pd.read_csv(exploit_manifest_csv)
    res = df.to_json(orient="records", indent=4)
    with open(f"{dst_dir}/files_exploits.json", "w") as f:
        f.write(res)

    # convert res to a dictionary
    res = json.loads(res)
    # use ordered dict to store the cve-exploit links
    cve_exp_links = OrderedDict()
    for record in res:
        try:
            # find all CVE ID in record["codes"]
            if not record["codes"]:
                continue
            cves = re.findall(r"CVE-\d{4}-\d{4,7}", record["codes"])
            for cve in cves:
                if cve not in cve_exp_links:
                    cve_exp_links[cve] = []
                cve_exp_links[cve].append(record["file"])
        except KeyError:
            continue
    
    # sort the cve-exploit links by CVE ID
    cve_exp_links = OrderedDict(sorted(cve_exp_links.items()))
    with open(cve_exp_link_file, "w") as f:
        json.dump(cve_exp_links, f, indent=4)
