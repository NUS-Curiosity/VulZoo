
Date: Wed, 20 May 2015 18:32:58 +0200
From: us3r777 <us3r777@...0.so>
To: fulldisclosure@...lists.org
Subject: [FD] CVE ID assignment - eZPublish vulnerability

Hi,

I'm trying to get a CVE-ID attributed to the issue discribed bellow.

I tried to contact cve-assign@...re.org two times, on March 31 and on
May 11, but I did not get any answer.

The issue is now public and described here :
http://share.ez.no/community-project/security-advisories/ezsa-2015-001-potential-vulnerability-in-ez-publish-password-recovery

May someone attribute a CVE-ID to this vulnerability please ?

Description
-----------
The vulnerability is a token prediction vulnerability in the password
recovery process. It allows to reset the password of any user. It
requires a valid account (no specific privileges required) and the
knowledge of the user email address and ID.

The problem reside in the way eZ Publish processes a password recovery
request. Indeed, when a user makes a request to renew his password using
the page kernel/user/forgotpassword.php, a token is generated using the
following code:

$user   = $users[0];
$time   = time();
$userID = $user->id();
$hashKey = md5( $userID . ':' . $time . ':' . mt_rand() );

The problem relies in the randomness of the generated hashKey (the
token). In order to try to predict the value of the next hashKey, a
malicious user has to know the following values :
  - $userID (if he's trying to break the admin token it's often 14 as
far as i can see)
  - $time (The value of $time is equal to the timestamp, which is given
in the webserver response in the header Date)
  - mt_rand(): he has to predict this value. mt_rand has a 31 bits output.


Once the attacker has successfuly cracked the mt_rand seed he will be
able  to recover the seed used to initialize the mersenne twister PRNG,
predict the next throws of mt_rand and therefore predict the hashKey of
any targeted user.

Moreover, once he has generated the required link to reset the password,
he is also able to predict the password which will be sent to the user.
Indeed, the function responsible to create this password is
eZUser::createPassword, which also relies on mt_rand() and time() to
create the password.

I also created a PoC working for this in most of the cases so this is
not a potential vulnerability.

Affected versions
-----------------
4.5.0, 4.6.0, 4.7.0, 5.0, 5.1, 5.2, 2015.01, 5.3.4, 5.4.1.1

Fixed versions
--------------
4.5 Maintenance, 4.6 Maintenance, 4.7 Maintenance, 5.0 Maintenance, 5.1
Maintenance, 5.2 Maintenance, 5.3.5, 5.4.2, 2015.03

Best regards,
Vincent Herbulot
@us3r777


_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/
