
Date: Sun, 3 May 2020 13:44:20 +0200
From: Vulnerability Lab <research@...nerability-lab.com>
To: fulldisclosure@...lists.org
Subject: [FD] Joomla com_content v1.5 - Blind SQL-Injection Vulnerability

Document Title:
===============
Joomla com_content v1.5 - Blind SQL-Injection Vulnerability


References (Source):
====================
https://www.vulnerability-lab.com/get_content.php?id=2246


Release Date:
=============
2020-05-03


Vulnerability Laboratory ID (VL-ID):
====================================
2246


Common Vulnerability Scoring System:
====================================
7.5


Vulnerability Class:
====================
SQL Injection


Current Estimated Price:
========================
1.000€ - 2.000€


Abstract Advisory Information:
==============================
An independent vulnerability laboratory researcher discovered a remote
sql injection vulnerability  in the official Joomla com_content v1.5 CMS
web-application.


Vulnerability Disclosure Timeline:
==================================
2020-05-03: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Exploitation Technique:
=======================
Remote


Severity Level:
===============
High


Authentication Type:
====================
Restricted authentication (user/moderator) - User privileges


User Interaction:
=================
No User Interaction


Disclosure Type:
================
Independent Security Research


Technical Details & Description:
================================
A remote sql-injection web vulnerability has been discovered in the
official Joomla com_content v1.5 CMS web-application.
The vulnerability allows remote attackers to inject or execute own sql
commands to compromise the dbms or file system of the
application and web-server system.

The sql injection vulnerability is located in the `year` parameter of
the `option=com_content` module. The request method to
inject or execute commands is GET and the attack vector is located on
the client-side. Attackers with low privileged accounts
are able to inject own sql queries via insecure transmitted
`status_select` parameter to compromise the dbms.

Exploitation of the remote sql injection vulnerability requires no user
interaction and only a low privileged web-application user account.
Successful exploitation of the remote sql injection results in database
management system, web-server and web-application compromise.

Request Method(s):
[+] GET

Vulnerable Module(s):
[+] option=com_content

Vulnerable Parameter(s):
[+] year


Proof of Concept (PoC):
=======================
The remote sql injection web vulnerability can be exploited by remote
attackers without user interaction and with privileged user account.
For security demonstration or to reproduce the sql-injection
vulnerability follow the provided informationa and steps below to continue.


Dork: index.php?option=com_content&view=archive&year=1 [BSQLI]


PoC: Vulnerable Parameters
https://localhost:8080/index.php?option=com_content&view=archive&year='[BLIND
SQL-INJECTION]--


PoC: Exploitation
https://localhost:8080/index.php?option=com_content&view=archive&year=-1
or 1=1--
https://localhost:8080/index.php?option=com_content&view=archive&year=-1
or 1=0--


Credits & Authors:
==================
Milad Karimi -
https://www.vulnerability-lab.com/show.php?user=Milad%20Karimi


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without
any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability
and capability for a particular purpose. Vulnerability-Lab
or its suppliers are not liable in any case of damage, including direct,
indirect, incidental, consequential loss of business profits
or special damages, even if Vulnerability-Lab or its suppliers have been
advised of the possibility of such damages. Some states do
not allow the exclusion or limitation of liability for consequential or
incidental damages so the foregoing limitation may not apply.
We do not approve or encourage anybody to break any licenses, policies,
deface websites, hack into databases or trade with stolen data.

Domains:    www.vulnerability-lab.com		www.vuln-lab.com			
www.vulnerability-db.com
Services:   magazine.vulnerability-lab.com
paste.vulnerability-db.com 			infosec.vulnerability-db.com
Social:	    twitter.com/vuln_lab		facebook.com/VulnerabilityLab 		
youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php
vulnerability-lab.com/rss/rss_upcoming.php
vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php
vulnerability-lab.com/register.php
vulnerability-lab.com/list-of-bug-bounty-programs.php

Any modified copy or reproduction, including partially usages, of this
file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified
form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers.
All pictures, texts, advisories, source code, videos and other
information on this website is trademark of vulnerability-lab team & the
specific authors or managers. To record, list, modify, use or
edit our material contact (admin@ or research@) to get a ask permission.

				    Copyright © 2020 | Vulnerability Laboratory - [Evolution
Security GmbH]™




-- 
VULNERABILITY LABORATORY - RESEARCH TEAM
SERVICE: www.vulnerability-lab.com

_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/