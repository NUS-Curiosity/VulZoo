
Date: Fri, 17 Apr 2020 20:40:07 +0200
From: Vulnerability Lab <research@...nerability-lab.com>
To: fulldisclosure@...lists.org
Subject: [FD] Swift File Transfer Mobile - Multiple Web Vulnerabilities

Document Title:
===============
Swift File Transfer Mobile - Multiple Web Vulnerabilities


References (Source):
====================
https://www.vulnerability-lab.com/get_content.php?id=2205


Release Date:
=============
2020-04-17


Vulnerability Laboratory ID (VL-ID):
====================================
2205


Common Vulnerability Scoring System:
====================================
5


Vulnerability Class:
====================
Multiple


Current Estimated Price:
========================
500€ - 1.000€


Product & Service Introduction:
===============================
Swift File Transfer is World’s fastest app to share installed apps,
photos, files, folders and videos at with high speed of upto
8mbps with your friends and family without using intenet, data cable,
mobile data, Wi-Fi, nfc etc. Now transfer GB's of data in
the blink of an eye. SFT - Swift File Transfer - Easier Faster & Safer.

(Copy of the Homepage:
https://apps.apple.com/in/app/sft-swift-file-transfer/id1162606088)
(Copy of the Homepage:
https://play.google.com/store/apps/details?id=com.sft.fileshare)
(Copy of the Homepage:
https://appworld.blackberry.com/webstore/content/59986064/)


Abstract Advisory Information:
==============================
The vulnerability laboratory core research team discovered multiple web
vulnerabilities in the official Swift File Transfer mobile application
for ios, blackberry and android.


Affected Product(s):
====================
Product: SFT - Swift File Transfer  (Android v1.1.2) (iOS v1.1.2)
(Blackberry v1.0.19)


Vulnerability Disclosure Timeline:
==================================
2020-04-17: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Exploitation Technique:
=======================
Remote


Severity Level:
===============
Medium


Authentication Type:
====================
No authentication (guest)


User Interaction:
=================
Low User Interaction


Disclosure Type:
================
Independent Security Research


Technical Details & Description:
================================
1.1
The information disclosure issue is located in the list or download
function with the path parameter. The exception-handling
does not cut of the native application path. Thus allows an attacker to
directly insert the information for the list or download
function with the path request. The issue becomes quick visible after
triggering an unexpected error by including non existing
path environemnt variables. The default setup to make only the native
app path visible is not secure configured to stay invisible.
In other applications with the same functionalities the full native path
is not delivered by the secure configuration of the wifi
web-server service.


1.2
The xss web vulnerabilities are located in the `path` parameter of the
`list` and `download` exception-handling. Remote attackers
are able to inject own malicious script code to the path parameter to
manipulate the error message output context of the ui. The
request method to inject is GET and the attack vector is located on the
client-side of the mobile ios web-application.
Successful exploitation of the vulnerability results in session
hijacking, non-persistent phishing attacks, non-persistent
external redirects to malicious source and non-persistent manipulation
of affected or connected application modules.


1.3
The persistent input validation web vulnerability is located in the
devicename that is displayed in the front panel on each request
for send / receive files via wifi (default port: 22222). Remote
attackers with local idevice user account are able to inject own
malicious script code as devicename to provoke an execution of the code
in the wifi sharing ui when listing the item. The devicename
is insecure transmitted into the wifi ui interface which results in a
persistent script code execution to compromise the application.
Successful exploitation of the vulnerability results in session
hijacking, persistent phishing attacks, persistent external redirects
to malicious source and persistent manipulation of affected or connected
application modules.


Proof of Concept (PoC):
=======================
1.1
The information disclosure vulnerability can be exploited by remote
attackers with networks access only and without user interaction.
For security demonstration or to reproduce the security web
vulnerability follow the provided information and steps below to continue.


PoC: Exploitation
http://localhost:22222/download?path=-_-*


PoC: Payload (Path)
/var/mobile/Containers/Data/Application/E0DF0179-AC43-41F2-9488-2F733B784BCB/Documents/Server/-_-*



1.2
The client-side cross site web vulnerabilities can be exploited by
remote attackers with networks access only and low user interaction.
For security demonstration or to reproduce the security web
vulnerability follow the provided information and steps below to continue.


PoC: Vulnerable Source
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>HTTP
Error 404</title></head><body><h1>
HTTP Error 404:
&quot;/var/mobile/Containers/Data/Application/E0DF0179-AC43-41F2-9488-2F733B784BCB/Documents/Server/>
&quot;>"><img src="evil.source" onload=alert(document.domain)>&quot;
[MALICIOUS SCRIPT CODE INJECT]does not exist</h1><h3></h3></body></html>


PoC: Exploitation
http://localhost:22222/download?path=>"><img src="evil.source"
onload=alert(document.domain)>
http://localhost:22222/list?path=>"><img src="evil.source"
onload=alert(document.domain)>



1.3
The local script code injection web vulnerability can be exploited by
local attackers with idevice user account and low user interaction.
For security demonstration or to reproduce the security web
vulnerability follow the provided information and steps below to continue.

Manual steps to reproduce the vulnerability ...
1. Open your local idevice settings in the configs
2. Change the local devicename to a script code payload
3. Save the settings
4. Open the vulnerable mobile application
5. Execution occurs on open of the ui on port 22222
6. Successful reproduce of the vulnerability!


PoC: Vulnerable Source
  <div class="panel panel-default" id="toobar">
        <p>[MALICIOUS SCRIPT CODE INJECT VIA DEVICENAME - EXECUTION
POINT!]</p>
        <div id="toobar-button">
          <button type="button" class="btn btn-primary fileinput-button"
id="upload-file" style="">
            <span class="glyphicon glyphicon-upload"></span> Upload Files
            <input id="fileupload" name="files[]" multiple="" type="file">
          </button>
          <button type="button" class="btn btn-default" id="download-all">
            <span class="glyphicon glyphicon-download"></span> Download All
          </button>
        </div>
        <div class="clear"></div>
      </div>


Security Risk:
==============
The security risk of the multiple web vulnerabilities in the mobile
web-application is estimated as medium.


Credits & Authors:
==================
Vulnerability-Lab -
https://www.vulnerability-lab.com/show.php?user=Vulnerability-Lab
Benjamin Kunz Mejri -
https://www.vulnerability-lab.com/show.php?user=Benjamin%20K.M.


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without
any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability
and capability for a particular purpose. Vulnerability-Lab
or its suppliers are not liable in any case of damage, including direct,
indirect, incidental, consequential loss of business profits
or special damages, even if Vulnerability-Lab or its suppliers have been
advised of the possibility of such damages. Some states do
not allow the exclusion or limitation of liability for consequential or
incidental damages so the foregoing limitation may not apply.
We do not approve or encourage anybody to break any licenses, policies,
deface websites, hack into databases or trade with stolen data.

Domains:    www.vulnerability-lab.com		www.vuln-lab.com			
www.vulnerability-db.com
Services:   magazine.vulnerability-lab.com
paste.vulnerability-db.com 			infosec.vulnerability-db.com
Social:	    twitter.com/vuln_lab		facebook.com/VulnerabilityLab 		
youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php
vulnerability-lab.com/rss/rss_upcoming.php
vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php
vulnerability-lab.com/register.php
vulnerability-lab.com/list-of-bug-bounty-programs.php

Any modified copy or reproduction, including partially usages, of this
file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified
form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers.
All pictures, texts, advisories, source code, videos and other
information on this website is trademark of vulnerability-lab team & the
specific authors or managers. To record, list, modify, use or
edit our material contact (admin@ or research@) to get a ask permission.

				    Copyright © 2020 | Vulnerability Laboratory - [Evolution
Security GmbH]™


-- 
VULNERABILITY LABORATORY - RESEARCH TEAM
SERVICE: www.vulnerability-lab.com

_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/