
Date: Fri, 27 May 2011 03:48:59 +0200
From: Cristina Pascual<cris.pascual.gonzalez@...il.com>
To: full-disclosure@...ts.grok.org.uk
CC: 
Subject: CfP: ICSEA 2011 || October 23-28, 2011 - Barcelona,
	Spain


INVITATION:

=================
Please consider to contribute to and/or forward to the appropriate
groups the following opportunity to submit and publish original
scientific results.
Note that the submission deadline of June 1st, 2011 is approaching.
In addition, authors of selected papers will be invited to submit
extended article versions to one of the IARIA Journals:
http://www.iariajournals.org
=================


============== ICSEA 2011 | Call for Papers ===============

CALL FOR PAPERS, TUTORIALS, PANELS

ICSEA 2011: The Sixth International Conference on Software Engineering
Advances

October 23-28, 2011 - Barcelona, Spain


General page: http://www.iaria.org/conferences2011/ICSEA11.html

Call for Papers: http://www.iaria.org/conferences2011/CfPICSEA11.html

- regular papers
- short papers (work in progress)
- posters

Submission page: http://www.iaria.org/conferences2011/SubmitICSEA11.html

Submission deadline: June 1st, 2011

Sponsored by IARIA, www.iaria.org

Extended versions of selected papers will be published in IARIA
Journals: http://www.iariajournals.org

Please note the Poster Forum and Work in Progress options.

The topics suggested by the conference can be discussed in term of
concepts, state of the art, research, standards, implementations,
running experiments, applications, and industrial case studies. Authors
are invited to submit complete unpublished papers, which are not under
review in any other conference or journal in the following, but not
limited to, topic areas.

All tracks are open to both research and industry contributions, in
terms of Regular papers, Posters, Work in progress,
Technical/marketing/business presentations, Demos, Tutorials, and Panels.

Before submission, please check and comply with the Editorial rules:
http://www.iaria.org/editorialrules.html

ICSEA 2011 Topics (topics and submission details: see CfP on the site)

Advances in fundamentals for software development
Fundamentals in software development; Software architecture, patterns,
frameworks; Software analysis and model checking; Software architectural
scalability; Requirements engineering and design; Software design
(methodologies, patterns, experiences, views, design by contract, design
by responsibilities, etc.); Software modeling (OO, non-OO, MDA, SOA,
patterns, UML, etc.); Software process and workflow; Software validation
and verification; Software testing and testing tools; Software
implementation; Software project management (risk analysis,
dependencies, etc.)

Advanced mechanisms for software development
Software composition; Process composition and refactoring; Co-design and
codeplay; Software dependencies; Plug&play software; Adaptive software;
Context-sensitive software; Policy-driven software design; Software
rejuvenation; Feature interaction detection and resolution; Embedded
software; Parallel and distributed software

Advanced design tools for developing software
Formal specifications in software; Programming mechanisms (real-time,
multi-threads, etc.); Programming techniques (feature-oriented,
aspects-oriented, generative programming, agents-oriented,
contextual-oriented, incremental, stratified, etc.); Requirement
specification languages; Programming languages; Automation of software
design and implementation; Software design with highly distributed
resources (GRID); Web service based software; Scenario-based model
synthesis; Merging partial behavioral models; Partial goal/requirement
satisfaction

Advanced facilities for accessing software
Information modeling; GUI related software; Computer-aided software
design; Hierarchical APIs; APIs roles in software development; Ontology
support for Web Services; Rapid prototyping tools; Embedded software
quality; Thread modeling; Flexible Objects; Use cases; Visual Modeling

Software performance
Software performance modeling; Software performance engineering (UML
diagrams, Process algebra, Petri nets, etc.); Software performance
requirements; Performance forecast for specific applications;
Performance testing; Web-service based software performance; Performance
of rule-based software; Methods for performance improvements; Software
performance experience reports; Program failures experiences; Error
ranking via correlation; Empirical evaluation of defects

Software security, privacy, safeness
Security requirements, design, and engineering; Software safety and
security; Security, privacy and safeness in software; Software
vulnerabilities; Assessing risks in software; Software for online
banking and transactions; Software trace analysis; Software
uncertainties; Dynamic detection of likely invariants; Human trust in
interactive software; Memory safety; Safety software reuse; High
confidence software; Trusted computing; Next generation secure computing

Advances in software testing
Formal approaches for test specifications; Advanced testing
methodologies; Static and dynamic analysis; Strategies for testing
nondeterministic systems; Testing software releases; Generating tests
suites; Evolutionary testing of embedded systems; Algorithmic testing;
Exhaustive testing; Black-box testing; Testing at the design level;
Testing reactive software; Empirical evaluation

Specialized software advanced applications
Database related software; Software for disaster recovery applications;
Software for mobile vehicles; Biomedical-related software; Biometrics
related software; Mission critical software; Real-time software;
E-health related software; Military software; Crisis-situation software;
Software for Bluetooth and mobile phones; Multimedia software applications

Open source software
Open source software (OSS) methodologies; OSS development and debugging;
Security in OSS; Performance of OSS; OSS roles and responsibilities; OSS
incremental development; Division of labor and coordination mechanisms;
Distribution of decision-making; Operational boundaries; Experience
reports and lessons learned; Versioning management; Towards generalizing
the OSS methodologies and practices; Open source licensing; Industrial
movement towards open source

Agile software techniques
Agile software methodologies and practices (extreme programming, scrum,
feature-driven, etc.); Agile modeling (serial in the large, iterative in
the small); Agile model driven design; Agile methodologies for embedded
software; Software metrics for agile projects; Lifecycle for agile
software development; Agile user experience design; Agility via program
automation; Testing into an agile environment; Agile project planning;
Agile unified process

Software deployment and maintenance
Software in small and large organizations; Deploying and maintaining
open source software; Software maintenance; Software assurance;
Patching; Run-time vulnerability checking; Software rejuvenation;
Software updates; Partial or temporary feature deprecation; Multi-point
software deployment and configuration; On-line software updates

Software engineering techniques, metrics, and formalisms
Software reuse; Software quality metrics (complexity, empiric metrics,
etc.); Software re-engineering (reverse engineering); Software
composition; Software integration; Consistency checking; Real-time
software development; Temporal specification; Model checking; Theorem
provers; Modular reasoning; Petri Nets; Formalisms for behavior
specification; Advanced techniques for autonomic components and systems

Business technology
Enterprise Content Managements (ECMs); Business Intelligence (BI);
Enterprise Portals; Business Process Management (BPM); Corporate
Performance Management (CPM); Enterprise Data Warehouse; Web Publishing;
Cloud Computing; Virtualisation; Data Mining; Workflows; Business Rules
Management (BRM); Data Capturing

Software economics, adoption, and education
Patenting software; Software licensing; Software economics; Software
engineering education; Academic and industrial views on software
adoption and education; Good-to-great in software adoption and
improvement; Software knowledge management

Improving productivity in research on software engineering
Developing frameworks to support research; Methods and tools to
improving the research environment; Supporting domain specific research
needs; Teaching research skills in Computer Science; Experience reports
on well developed research processes; Experience reports on empirical
approaches to software engineering research; Approaches to supporting
higher degree students in their research; Approaches to enlarge the
research / teaching nexus to improve academics productivity; Approaches
to integration between university research and industry research; Tools
to support the research process


Committee: http://www.iaria.org/conferences2011/ComICSEA11.html
====================

_______________________________________________
Full-Disclosure - We believe in it.
Charter: http://lists.grok.org.uk/full-disclosure-charter.html
Hosted and sponsored by Secunia - http://secunia.com/
