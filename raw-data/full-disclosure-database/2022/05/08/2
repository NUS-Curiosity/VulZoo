
Date: Fri, 6 May 2022 23:31:29 -0400
From: malvuln <malvuln13@...il.com>
To: fulldisclosure@...lists.org
Subject: [FD] Ransom.Cryakl / Code Execution

Discovery / credits: Malvuln (John Page aka hyp3rlinx) (c) 2022
Original source:
https://malvuln.com/advisory/2aea3b217e6a3d08ef684594192cafc8.txt
Contact: malvuln13@...il.com
Media: twitter.com/malvuln

Threat: Ransom.Cryakl
Vulnerability: Code Execution
Description: Cryakl looks for and loads a DLL named "wow64log.dll" in
Windows\System32. Therefore, we can drop our own DLL to intercept and
terminate the malware pre-encryption. The exploit dll will simply display a
Win32API message box and call exit(). The exploit DLL must export
"InterlockedExchange" function or it fails with error. We do not need to
rely on hash signature or third-party product, the malware will do the work
for us. Endpoint protection systems and or antivirus can potentially be
killed prior to executing malware, but this method cannot as theres nothing
to kill the DLL just lives on disk waiting. From defensive perspective you
can add the DLLs to a specific network share containing important data as a
layered approach. All basic tests were conducted successfully in a virtual
machine environment.
Family: Cryakl
Type: PE32
MD5: 2aea3b217e6a3d08ef684594192cafc8
Vuln ID: MVID-2022-0590
Disclosure: 05/06/2022
Video PoC URL: https://www.youtube.com/watch?v=uI7kr8gFTP4

Exploit/PoC:
1) Compile the following C code as "wow64log.dll" as x64
2) Place the DLL in Windows\System32
3) Run the malware

#include "windows.h"

//By malvuln
//Purpose: Exploit Ransom.Cryakl
//MD5: 2aea3b217e6a3d08ef684594192cafc8
/** DISCLAIMER:
Author is NOT responsible for any damages whatsoever by using this software
or improper malware
handling. By using this code you assume and accept all risk implied or
otherwise.
**/

//compile as x64
//gcc -c wow64log.c
//gcc -shared -o wow64log.dll wow64log.o
//DLL must live under Windows\System32 dir

BOOL APIENTRY DllMain(HINSTANCE hInst, DWORD reason, LPVOID reserved){
  switch (reason) {
  case DLL_PROCESS_ATTACH:
   MessageBox(NULL, "Code Exec", "by malvuln", MB_OK);
   exit(0);
    break;
  }
  return TRUE;
}

extern __declspec(dllexport) WINBASEAPI LONG WINAPI InterlockedExchange
(LONG volatile *Target, LONG Value){
    exit(1);
}


Disclaimer: The information contained within this advisory is supplied
"as-is" with no warranties or guarantees of fitness of use or otherwise.
Permission is hereby granted for the redistribution of this advisory,
provided that it is not altered except by reformatting it, and that due
credit is given. Permission is explicitly given for insertion in
vulnerability databases and similar, provided that due credit is given to
the author. The author is not responsible for any misuse of the information
contained herein and accepts no responsibility for any damage caused by the
use or misuse of this information. The author prohibits any malicious use
of security related information or exploits by the author or elsewhere. Do
not attempt to download Malware samples. The author of this website takes
no responsibility for any kind of damages occurring from improper Malware
handling or the downloading of ANY Malware mentioned on this website or
elsewhere. All content Copyright (c) Malvuln.com (TM).
_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: https://seclists.org/fulldisclosure/
