
Date: Wed, 13 Dec 2017 12:41:44 +0200
From: Maor Shwartz <maors@...ondsecurity.com>
To: fulldisclosure@...lists.org
Cc: SecuriTeam Secure Disclosure <ssd@...ondsecurity.com>
Subject: [FD] SSD Advisory – vBulletin cacheTemplates Unauthenticated Remote Arbitrary File Deletion

SSD Advisory – vBulletin cacheTemplates Unauthenticated Remote Arbitrary
File Deletion

Full report: https://blogs.securiteam.com/index.php/archives/3569
Twitter: @SecuriTeam_SSD
Weibo: SecuriTeam_SSD

Vulnerability Summary
The following advisory describes a unauthenticated deserialization
vulnerability that leads to arbitrary delete files and, under certain
circumstances, code execution found in vBulletin version 5.

vBulletin, also known as vB, is “a widespread proprietary Internet forum
software package developed by vBulletin Solutions, Inc., based on PHP and
MySQL database server. vBulletin powers many of the largest social sites on
the web, with over 100,000 sites built on it, including Fortune 500 and
Alexa Top 1M companies websites and forums. According to the latest
W3Techs1 statistics, vBulletin version 4 holds more than 55% of the
vBulletin market share, while version 3 and 5 divide the remaining
percentage”.

Credit
A security researcher from, TRUEL IT ( @truel_it ), has reported this
vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program.

Vendor response
We tried to contact vBulletin since November 21 2017, repeated attempts to
establish contact went unanswered. At this time there is no solution or
workaround for these vulnerabilities.

Vulnerability details
Unsafe usage of PHP’s unserialize() on user-supplied input allows an
unauthenticated attacker to delete arbitrary files and, under certain
circumstances, execute arbitrary code on a vBulletin installation.

vB_Library_Template’s cacheTemplates() function, which is an publicly
exposed API which allows to fetch information on a set of given templates
from the database in order to store them inside a cache variable.

File core/vb/api/template.php – function cacheTemplates():

===

public function cacheTemplates($templates, $templateidlist,
$skip_bbcode_style = false,

$force_set = false)

{

 return vB_Library::instance('template')->cacheTemplates($templates,
$templateidlist, $skip_bbcode_style, $for

===

Let’s take a look at $templateidlist – core/vb/library/template.php –
function cacheTemplates():

===

public function cacheTemplates($templates, $templateidlist,
$skip_bbcode_style = false,

$force_set = false)

{

 $vboptions = vB::getDatastore()

 // vB_Library_Style::switchCssStyle() may pass us a templateidlist that's
already unserialized.

 if (!is_array($templateidlist))

 {

  $templateidlist = unserialize($templateidlist);

 }

 foreach ($templates AS $template)

 {

  if (isset($templateidlist[$template]))

  {

   $templateids[] = intval($templateidlist[$template]);

  }

 }

 if (!empty($templateids))

 {

  $temps = vB::getDbAssertor(array('title', 'textonly', 'template_un',
'template'));

  // cache templates

  foreach ($temps as $temp)

  {

   if (empty(self::$templatecache["$temp[title]"]) OR $force_set)

   {

    self::$templatecache["$temp[title]"] = $this;

   }

  }

 }

 if (!$skip_bbcode_style)

 {

  self::$bbcode_style = array(

   'code' => &$templateassoc['bbcode_code_styleid'],

   'html' => &$templateassoc['bbcode_html_styleid'],

   'php' => &$templateassoc['bbcode_php_styleid'],

   'quote' => &$templateassoc['bbcode_quote_styleid']

  );

 }

}

===

$temnplateidlist variable, which can come directly from user-input, is
directly supplied to unserialize(), resulting in an arbitrary
deserialization primitive.

--
Thanks
Maor Shwartz
Beyond Security
GPG Key ID: 6D273779F52A9FC2

Download attachment "SSD Advisory – vBulletin cacheTemplates Unauthenticated Remote Arbitrary File Deletion.pdf" of type "application/pdf" (139636 bytes)


_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/
