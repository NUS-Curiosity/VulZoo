
Date: Mon, 26 May 2008 14:51:38 +0100
From: "A. R." <r00t@...thernfortress.net>
To: full-disclosure@...ts.grok.org.uk
Subject: sqlninja 0.2.3 released

Hello fellow security enthusiasts,

Fancy going from a SQL Injection to a full GUI access on the DB server?
What about extracting password hashes on the fly? Take a few SQL
Injection tricks, add a couple of remote shots in the registry to
disable Data Execution Prevention, mix with a little Perl that
automatically generates a debug script, put all this in a shaker with a
Metasploit wrapper, shake well and you have the latest release of
sqlninja! See it in action here:
http://sqlninja.sourceforge.net/sqlninjademo.html

Introduction
============
Sqlninja is a tool to exploit SQL Injection vulnerabilities on a web
application that uses Microsoft SQL Server as its back-end. Its main
goal is to provide a remote access on the vulnerable DB server, even in
a very hostile environment. It should be used by penetration testers to
help and automate the process of taking over a DB Server when a SQL
Injection vulnerability has been discovered. It is written in Perl, it
is released under the GPLv2 and so far has been successfully tested on:
- Linux
- FreeBSD
- Mac OS X
You can find it, together with two flash demos of its features, at the
address http://sqlninja.sourceforge.net

What's new
==========
# A Metasploit3 wrapper, which allows the user to use SQL Injection to
execute Metasploit payloads on the remote DB server
# Several other minor improvements

What's not so new
=================
# Fingerprint of the remote SQL Server (version, user performing the
queries, user privileges, xp_cmdshell availability, authentication mode)
# Bruteforce of 'sa' password, both dictionary-based and incremental
# Privilege escalation to 'sa' if its password has been found
# Creation of a custom xp_cmdshell if the original one has been disabled
# Upload of netcat.exe (or any other executable) using only 100% ASCII
GET/POST requests, so no need for FTP connections
# TCP/UDP portscan from the target SQL Server to the attacking machine,
in order to find a port that is allowed by the firewall of the target
network and use it for a reverse shell
# Direct and reverse bindshell, both TCP and UDP
# DNS-tunneled pseudo-shell, when no TCP/UDP ports are available for a
direct/reverse shell, but the DB server can resolve external hostnames
# Evasion techniques, in order to obfuscate the injected code and
confuse/bypass signature-based IPS and application firewalls

Credits
=======
Angelo Dell'Aera and the Metasploit Development Team deserve special
credit for this release

Happy hacking !

-- 
icesurfer

_______________________________________________
Full-Disclosure - We believe in it.
Charter: http://lists.grok.org.uk/full-disclosure-charter.html
Hosted and sponsored by Secunia - http://secunia.com/
