
Date: Wed, 15 Oct 2014 00:29:18 +0200
From: Vulnerability Lab <research@...nerability-lab.com>
To: fulldisclosure@...lists.org
Subject: [FD] Paypal Inc MultiOrderShipping API - Filter Bypass & Persistent
 XML Vulnerability

Document Title:
===============
Paypal Inc MultiOrderShipping API - Filter Bypass & Persistent XML Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1129

PayPal Security UID: TM13a2uL


Release Date:
=============
2014-10-14


Vulnerability Laboratory ID (VL-ID):
====================================
1129


Common Vulnerability Scoring System:
====================================
4.1


Product & Service Introduction:
===============================
PayPal is a global e-commerce business allowing payments and money transfers to be made through the Internet. Online money 
transfers serve as electronic alternatives to paying with traditional paper methods, such as checks and money orders. Originally, 
a PayPal account could be funded with an electronic debit from a bank account or by a credit card at the payer s choice. But some 
time in 2010 or early 2011, PayPal began to require a verified bank account after the account holder exceeded a predetermined 
spending limit. After that point, PayPal will attempt to take funds for a purchase from funding sources according to a specified 
funding hierarchy. If you set one of the funding sources as Primary, it will default to that, within that level of the hierarchy 
(for example, if your credit card ending in 4567 is set as the Primary over 1234, it will still attempt to pay money out of your 
PayPal balance, before it attempts to charge your credit card). The funding hierarchy is a balance in the PayPal account; a 
PayPal credit account, PayPal Extras, PayPal SmartConnect, PayPal Extras Master Card or Bill Me Later (if selected as primary 
funding source) (It can bypass the Balance); a verified bank account; other funding sources, such as non-PayPal credit cards.
The recipient of a PayPal transfer can either request a check from PayPal, establish their own PayPal deposit account or request 
a transfer to their bank account.

PayPal is an acquirer, performing payment processing for online vendors, auction sites, and other commercial users, for which it 
charges a fee. It may also charge a fee for receiving money, proportional to the amount received. The fees depend on the currency 
used, the payment option used, the country of the sender, the country of the recipient, the amount sent and the recipient s account 
type. In addition, eBay purchases made by credit card through PayPal may incur extra fees if the buyer and seller use different currencies.

On October 3, 2002, PayPal became a wholly owned subsidiary of eBay. Its corporate headquarters are in San Jose, California, United 
States at eBay s North First Street satellite office campus. The company also has significant operations in Omaha, Nebraska, Scottsdale, 
Arizona, and Austin, Texas, in the United States, Chennai, Dublin, Kleinmachnow (near Berlin) and Tel Aviv. As of July 2007, across 
Europe, PayPal also operates as a Luxembourg-based bank.

On March 17, 2010, PayPal entered into an agreement with China UnionPay (CUP), China s bankcard association, to allow Chinese consumers 
to use PayPal to shop online.PayPal is planning to expand its workforce in Asia to 2,000 by the end of the year 2010.
Between December 4Ã±9, 2010, PayPal services were attacked in a series of denial-of-service attacks organized by Anonymous in retaliation 
for PayPal s decision to freeze the account of WikiLeaks citing terms of use violations over the publication of leaked US diplomatic cables.

(Copy of the Homepage: www.paypal.com) [http://en.wikipedia.org/wiki/PayPal]


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team has discovered a filter bypass & web validation vulnerability in PayPal Inc Mail Order Shipping web application.


Vulnerability Disclosure Timeline:
==================================
2014-10-14: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
PayPal Inc
Product: Shipping & MOS Application - API 2013 Q3


Exploitation Technique:
=======================
Remote


Severity Level:
===============
Medium


Technical Details & Description:
================================
An input validation vulnerability has been discovered in the official Paypal MultiOrder Shipping web application (api).
The issue allows remote attackers to inject own malicious script codes on the application-side of the affected module.

The issue can be exploited by usage of a XML payload in the vulnerable module to exploit the issue on the application-side.
The script code gets execution takes place in the login procedure in the application error exception-handling. During the 
testing, it was discovered that HTML is being processed without any validation using XML CDATA tags in the shipping web 
application. The `Import from Paypal/Ebay`  module of the MultiOrder Shipping Application is directly affected with this 
vulnerability. Exploitation of the issue executes code against people you interaction with on paypal/ebay. The issue can 
be exploited by a paypal shipping multi user account or by remote interaction.The exception Source code is given below 
in the poc for your reference.

The security risk of the persistent vulnerability is estimated as medium with a cvss (common vulnerability scoring system) count of 4.1.
Exploitation of the persistent web vulnerability requires a low privileged paypal application user account and only low user interaction. 
Successful exploitation of the vulnerability results in persistent session hijacking, persistent phishing, persistent external redirects 
to malicious source and persistent manipulation of affected or connected module context.

Request Method(s):
				[+] POST

Vulnerable Application(s):
				[+] Paypal MultiOrder Shipping - (https://ship.paypal.com)

Vulnerable Module(s):
				[+] Mark Order As Shipped 

Vulnerable Parameter(s):
				[+] Tracking#

Affected Module(s):
				[+] Exception-Handling


Proof of Concept (PoC):
=======================
The persistent input validation web vulnerability can be exploited by remote attackers with low privileged web-application user 
account and low user interaction (click!). For security demonstration or to reproduce the security vulnerability follow the 
provided information and steps below to continue.

PoC: Payload
<![CDATA[<[PERSISTENT INJECTED ENCODED SCRIPT CODE!]')>]]>

Manual steps to reproduce the security vulnerability ...
1. Login to the Paypal MultiOrder Shipping application as a Low Priviledged user.
2. Before clicking on "Import" intercept the POST Request using Tamper Data or any Proxy Intercepting Utility / tool
3. Modify the XML field values of <ShipmentsToImport> and inject the Payload directly 
4. You should get a javascript popup will proving the existence of this vulnerability
5. Successful reproduce of the local issue in the multi user account
Note: Now, we explain how the exploit the issue remotly in combination with an user user account
6. Interact after the manipulation as seller or buyer
Note: Use the already manipulated tracking information thats lead to the execution in the exception context
7. After interaction the code executes in both tracking information fields of the shipping item listings through the exception-handling
Note: The issue can be exploited by usage of the buyer or seller ability in both ways.
8. Successful exploitation of the remote vulnerability!


PoC: Exception Handling - PayPal Inc Shipping (API)

<!-- ERROR: GENERAL -->
<div id=` ` ErrorGeneral` `  style=` ` display: block;` ` >
<table>
<tbody><tr height=` ` 30` ` >
<td>
<img src=` ` images/icon_error.gif` ` >
</td>
<td id=` ` ErrorGeneralText` ` >Invalid value for: ShipmentsToImport: ` <[PERSISTENT INJECTED SCRIPT CODE!])`` >` Correct Input</iframe></td>
</tr>
</tbody></table>
</div>

Note: The vulnerable XML parameter in this case is  <ShipmentsToImport>


---PoC HTTP XML Request Logs ---
Information: Post Request Injecting the Payload
POST /cgi-bin/shipweb?cmd=import-shipments HTTP/1.1
Host: ship.paypal.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Content-Type: text/xml; charset=UTF-8
Referer: https://ship.paypal.com/powership/shipping/dialogs/import/import.html?version=1_0_4
Content-Length: 268
Cookie: [Hidden]
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
<ImportShipments>
<AccountNumber>MBYAX9TQRRXHL</AccountNumber>
<ImportFromPayPal>true</ImportFromPayPal>
<ImportFromeBay>false</ImportFromeBay>
<ShipmentsToImport><![CDATA[<[PERSISTENT INJECTED SCRIPT CODE!]')>]]>''</ShipmentsToImport>
</ImportShipments>

- Response
HTTP/1.1 200 OK
Server: Apache
X-Frame-Options: SAMEORIGIN
Set-Cookie: RouxWyWiKm3aD3COV0dah-P3yUq=8zJb4FgOQ3QyTDBISYSIBB3kefJQ7mO1Q0dXMVfxNNH9O_jCvA44VtGZbUS_auLgEe8KVS-2osf_9WopL2Dx0NqZaGPDLX0TWNd3oSNQ0RKnhZYW; 

domain=.paypal.com; path=/; Secure; HttpOnly
Connection: close
Content-Type: text/xml
Content-Length: 333

<?xml version="1.0" encoding="UTF-8"?>
<ImportShipmentsOutput>
	<OperationStatus>
		<StatusCode>4</StatusCode>
		<ErrorMessage>Invalid value for: ShipmentsToImport: '<[PERSISTENT INJECTED SCRIPT CODE!]>'</ErrorMessage>
		<RequiredAction>Correct input</RequiredAction>
	</OperationStatus>
</ImportShipmentsOutput>


Reference(s):
https://ship.paypal.com/
/cgi-bin/shipweb?cmd=import-shipments
https://ship.paypal.com/powership/shipping/dialogs/import/import.html
https://ship.paypal.com/powership/shipping/


Solution - Fix & Patch:
=======================
Input validation should be performed in CDATA requests of the application to parse all malicious requests in order to mitigate any 
further risks associated with this vulnerability.


Security Risk:
==============
The security risk of the persistent script code inject web vulnerability in the shipping api module is estimated as medium.


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Ateeq ur Rehman Khan (ateeq@...lution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either 
expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers 
are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even 
if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation 
of liability for consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break 
any vendor licenses, policies, deface websites, hack into databases or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com
Contact:    admin@...nerability-lab.com 	- research@...nerability-lab.com 	       		- admin@...lution-sec.com
Section:    dev.vulnerability-db.com	 	- forum.vulnerability-db.com 		       		- magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to 
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by 
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website 
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact 
(admin@...nerability-lab.com or research@...nerability-lab.com) to get a permission.

				Copyright Â© 2014 | Vulnerability Laboratory [Evolution Security]



-- 
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@...nerability-lab.com



_______________________________________________
Sent through the Full Disclosure mailing list
http://nmap.org/mailman/listinfo/fulldisclosure
Web Archives & RSS: http://seclists.org/fulldisclosure/
