
Date: Fri, 24 May 2013 23:57:06 -0600
From: Kurt Seifried <kseifried@...hat.com>
To: coley@...us.mitre.org, oss-security@...ts.openwall.com,
        security@...ntu.com
Subject: Re: CVE Request: pwgen

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 05/24/2013 03:43 PM, Seth Arnold wrote:
> Hello Kurt, Steve, all,
> 
> Do these issues deserve CVE numbers?
> 
> A user reported to launchpad [1] that pwgen will use /dev/urandom
> or /dev/random if it can, but will silently fall back to using
> drand48() or random() if the device files fail to open. The report
> also mentions that when the device files are available, the output
> is biased by too-simple use of the modulo operator to scale the
> output to 0 <= n < max. There are further complaints about the poor
> use of available entropy when seeding the weaker algorithms.
> 
> A potentially related complaint is in Debian's BTS [2]: in this
> bug report, the user wanted a way to force use of /dev/random even
> if /dev/urandom is available.
> 
> I've pasted the relevant source to pastebin.ubuntu.com [3].
> 
> Are any of these worthy of a CVE number?
> 
> - silent fall-back to weak algorithms - biased output due to poor
> use of modulo operations - poor seeding of weak algorithms

Is any of this behaviour documented, or is it only "documented" in the
source code (I'm guessing source code only)? Also I'm trying to think
of situations where /dev/random and urandom are not available, AND the
system is otherwise working ok and nothing comes to mind. The fall
back is definitely sub-optimal, but can it be triggered in any
meaningful way.

> 
> Thank you
> 
> 1: https://bugs.launchpad.net/ubuntu/+source/pwgen/+bug/1183213 2:
> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=672241 3:
> http://pastebin.ubuntu.com/5698361/
> 


- -- 
Kurt Seifried Red Hat Security Response Team (SRT)
PGP: 0x5E267993 A90B F995 7350 148F 66BF 7554 160D 4553 5E26 7993
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.13 (GNU/Linux)

iQIcBAEBAgAGBQJRoFKyAAoJEBYNRVNeJnmTiHgP/3PO8f3HSuQvmRHEuhsyaLYN
QjwpBnCdOf4BOeNHW3tI4TmcJoKGk0KAB6yUOx0z2dFcLd1Nnwrn1x3zXEVz7cio
uXx4dNqEcwiBszVmMufPQsuCHuU5V7f64PKFdD1IQMWXSB9jybtLLdOcoFNcF+pj
3dWp3aQwU5kmldA+JjhrlVoChbCs2q35cqgUYlP6cUj+mTkhuP8p7Zp/AVKmRZHL
sgidqjL/ZZ82DqsXmdLKCDMB/jxxz012/DmBXeyhNuyMno3flDsn490dAxnliKO5
oPhP906KRRP6rSBVGEEKmS9RJonddUlThYctiHebJEFQ+EF2m6d6woaGQBXVkU67
DCylfKzjfGkJB6nhL8NeHdqm1Qv55ke3rG8TivscDIrUGSD1948cFg2TruFJnzaM
4F11EbyFn+vzt/pqAOZWb1t49n5PT9V+w8XaHSZzTNrYisHJNy6lX2PnFHnSXsUU
oJkSiyw/8MP0jYktNDUSM7q/U+0CXRvxA6FjJii22/9sQSyKripN+qJxISTarlFi
TiJQ1emFnsw80G0+so/s6dqZZeqgs2az9v/R3Ho+YZfr4N9SDDovJKn6pTWHCP9M
lwz8lWrRQ5JB4FEJcsfw5bqvgqzO4EDNAjsVDWIiZ9lky8fXhcji5LMH87I4HS67
Rqf2QdwWJ3382akFX7rg
=TmgN
-----END PGP SIGNATURE-----
