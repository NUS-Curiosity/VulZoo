
Date: Wed, 20 Oct 2004 01:19:42 -0200
From: Carlos Barros <barros@...rossecurity.com>
To: Bugtraq <bugtraq@...urityfocus.com>,
	PacketStorm <submissions@...ketstormsecurity.org>,
	Securiteam <news@...uriteam.com>,
	SecurityFocus <webmaster@...urityfocus.com>
Subject: mpg123 "getauthfromurl" buffer overflow


                      *******************************
                      * Security Advisory #01, 2004 *
                      *******************************
             Carlos Barros <barros [at] barrossecurity d0t com>
                          www.barrossecurity.com
******************************************************************************

Title: mpg123 buffer overflows

Vulnerable package(s): 
 * mpg123-pre0.59s;
 * mpg123-0.59r.

Date: 08/10/2004

Legal notice:

This Advisory is Copyright (c) 2004 Carlos Barros.
Permission is granted for the redistribution of this alert electronically. It
may not be edited in any way without the express written consent of the 
author.

Disclaimer:

The information in the advisory is believed to be accurate at the time of 
publishing based on currently available information. Use of the information 
constitutes acceptance for use in an AS IS condition. There are no warranties 
with regard to this information. Neither the author nor the publisher accepts 
any liability for any direct, indirect, or consequential loss or damage 
arising from use of, or reliance on, this information.

Introduction:

mpg123 is a real time MPEG Audio Player for Layer 1,2 and Layer3. It can be
downloaded at: www.mpg123.de

Vulnerability details:

mpg123 is prone to a buffer overflow in the function getauthfromURL.

// httpget.c, line 114
int getauthfromURL(char *url,char *auth)
{
  char *pos;

  *auth = 0;

  if (!(strncmp(url, "http://", 7)))
    url += 7;

  if( (pos = strchr(url,'@')) ) {
    int i;
    for(i=0;i<pos-url;i++) {
      if( url[i] == '/' )
         return 0;
    }
    strncpy(auth,url,pos-url);  <-- HERE
    auth[pos-url] = 0;
    strcpy(url,pos+1);
    return 1;
  }
  return 0;
}

This function is called by http_open(), line 225 from httpget.c, and passes
"purl" and "httpauth1" as parameters. purl is a dinamic allocated variable
and httpauth1 is a static (global) var with a fixed length of 256. As you
can see, getauthfromURL function copies the purl string, until a @, into
httpauth1 without checking the length. I was not able to exploit this vuln
successfull to execute arbitraty code (too lazy), but I think it is not
impossible. httpauth1 can overwrite some useful address and it is appended
into a dinamic allocated variable (request) after a base64 encoding, 
overflowing this var too. 

if (strlen(httpauth1) || httpauth) {
  char buf[1023];
  strcat (request,"Authorization: Basic ");
  if(strlen(httpauth1))
    encode64(httpauth1,buf);
  else
    encode64(httpauth,buf);
  strcat (request,buf); <-- HERE
  strcat (request,"\r\n");
}

This vulnerability can be trigged locally via
 mpg123 -@ http://AAAAAAAAAAAAAA...AAAAA@....somesite.com/somefile.xxx,
or remotely via crafted playlist with some file formatted as shown above.

There is another buffer overflow in the function http_open. At line 245 of
httpget.c,the prgName variable (mpg123 filename) is appended into the request 
variable. 

  sprintf (request + strlen(request),
     " HTTP/1.0\r\nUser-Agent: %s/%s\r\n",
     prgName, prgVersion);

The length of this variable is not checked, so, one can create a 
specially crafted symlink to overflow the request variable. It is not a 
serious bug cause it can be only exploited locally and mpg123 is not SUID by 
default.

Timeline:

02/10/2004: Vulnerability detected.
10/10/2004: Vendor contacted. No response.
20/10/2004: Public available

******************************************************************************


