
Date: Thu, 14 Jun 2012 05:41:58 +0200
From: Research <research@...nerability-lab.com>
To: bugs@...uritytracker.com, bugtraq@...urityfocus.com
Subject: QuickBlog v0.8 CMS - Multiple Web Vulnerabilities

Title:
======
QuickBlog v0.8 CMS - Multiple Web Vulnerabilities


Date:
=====
2012-05-12


References:
===========
http://www.vulnerability-lab.com/get_content.php?id=567


VL-ID:
=====
567


Common Vulnerability Scoring System:
====================================
6.5


Introduction:
=============
QuickBlog est un gestionnaire de weblog ecrit en PHP4 compatible PHP5 et MySQL compatible MySQLi multi utilisateur multi 
langue multi theme Il est tres simple et tres lege Il utilise un editeur WYSIWYG TinyMCE avec possibilite d annexe 

(Copy of the Vendor Homepage:  http://www.comscripts.com/scripts/php.quickblog.2256.html )


Abstract:
=========
The Vulnerability Laboratory Research Team discovered Multiple Web Vulnerabilities in QuickBlog v0.8 CMS.


Report-Timeline:
================
2012-05-12:	Public or Non-Public Disclosure


Status:
========
Published


Exploitation-Technique:
=======================
Remote


Severity:
=========
High


Details:
========
1.1
Multiple remote SQL Injection vulnerabilities are detected in the QuickBlog v0.8 Content Management System. 
The vulnerability allows an attacker (remote) or local low privileged user account to inject/execute own 
sql commands on the affected application dbms. The vulnerabilities are located on the application post 
requests of gestionpost or fct_affiche.inc & the bound vulnerable parameter page. Successful exploitation 
of the vulnerability results in dbms & application compromise.

Vulnerable File(s): 
			[+] admin/gestionpost.php
 			[+] include/fct_affiche.inc.php

Vulnerable Parameter(s):
			[+] page


1.2
Multiple persistent input validation vulnerabilities are detected in the QuickBlog v0.8 Content Management System.
The bugs allow remote attackers to implement/inject malicious script code on the application side (persistent). 
Successful exploitation of the vulnerability can lead to session hijacking (manager/admin) or stable (persistent) 
context manipulation. Exploitation requires low user inter action & a privileged user account. 

Vulnerable File(s): 
			[+] recherche.php
			[+] commentaire/form.php
			[+] admin/samplemodifieddata.php
			[+] admin/sampleposteddata.php

Vulnerable Parameter(s):
			[+] name
			[+] title
			[+] nom & search


Proof of Concept:
=================
1.1
The sql injection vulnerabilities can be exploited by remote attackers with privileged user account or with medium 
required user inter action. For demonstration or reproduce ...

PoC:
http://127.0.0.1:8080/quickblog/admin/gestionpost.php?page=[SQL-INJECTION]


1.2
The persistent input validation vulnerabilities can be exploited by remote attackers with low privileged user account 
& low required user inter action. For demonstration or reproduce ...

Review: recherche.php

<form action="http://127.0.0.1/quickblog/recherche.php" method="post">
<input type="hidden"  name="search" value="[PERSISTENT SCRIPT CODE!]" />
<input type="submit" value="[BUG]"/>
</form>

Review: commentaire/form.php

<form method="post" action="http://127.0.0.1:8080/quickblog/commentaire/form.php" name="form_mess"/>
<input type="hidden" name="ajout" value="true"/>
<input type="hidden" name="idpost" value="1"/>
<input type="hidden" name="nom" value="[PERSISTENT SCRIPT CODE!]"/>
<input type="hidden" name="mail" value="asd@....asd"/>
<input type="hidden" name="msg" value="12345"/>
<img src="http://127.0.0.1:8080/quickblog/commentaire/captcha/captcha.php" alt="captcha"/>          
<br>To validate your comment, please enter code below.<br> 
<input type="text" name="captcha" size="20" class="com" />
<br>
<input type="submit" value="[PERSISTENT SCRIPT CODE!]" >
</form>


Solution:
=========
In file: admin/gestionpost.php
In lines 85 - 89:

                if(isset($_GET[`page`]))
                {
                    $page = $_GET[`page`];
                    $page = $page - 1;
                }

edit:

                if(isset($_GET[`page`]))
                {
                    $page = (int)$_GET[`page`];
                }

In file: include/fct_affiche.inc.php
In lines 56 - 59:

                if(isset($_GET[`page`]))
                {
                    $page = $_GET[`page`];
                    $page = $page - 1;
                }

edit:

                if(isset($_GET[`page`]))
                {
                    $page = (int)$_GET[`page`];
                }

In file: recherche.php
In lines 52 - 55:

                if (isset($_POST[``search``]))
                {
                    $mot = $_POST[``search``];
                }

edit:

                if (isset($_POST[``search``]))
                {
                    $mot = htmlspecialchars(strip_tags($_POST[``search``]));
                }

In file: commentaire/form.php
In lines 41:

               $nom=$_POST[``nom``];

edit:

               $nom= htmlspecialchars(strip_tags($_POST[``nom``]));

In file: admin/samplemodifieddata.php
In lines 47:

               $titre = $_POST[``title``];

edit:

               $titre = htmlspecialchars(strip_tags($_POST[``title``]));

In file: admin/sampleposteddata.php
In lines 38:

              $titre = $_POST[``title``];

edit:

              $titre = htmlspecialchars(strip_tags($_POST[``title``]));


... &  2x 

   if(isset($_GET[`page`]))
                {
                    $page = (int)$_GET[`page`];
                    if($page<0) $page = 0;
                }


Risk:
=====
1.1
The security risk of the sql injection vulnerabilities are estimated as high(-).

1.2 
The security risk of the persistent input validation vulnerabilities are estimated as medium(+).


Credits:
========
Vulnerability Laboratory [Research Team]  - snup (snup@...nerability-lab.com)



Disclaimer:
===========
The information provided in this advisory is provided as it is without any warranty. Vulnerability-Lab disclaims all warranties, 
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business 
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some 
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation 
may not apply. 

Domains:	www.vulnerability-lab.com   	- www.vuln-lab.com
Contact:	admin@...nerability-lab.com 	- support@...nerability-lab.com 	- research@...nerability-lab.com
Section:	video.vulnerability-lab.com 	- forum.vulnerability-lab.com 		- news.vulnerability-lab.com
Social:		twitter.com/#!/vuln_lab 	- facebook.com/VulnerabilityLab 	- youtube.com/user/vulnerability0lab

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. 
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other 
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, sourcecode, videos and 
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), 
modify, use or edit our material contact (admin@...nerability-lab.com or support@...nerability-lab.com) to get a permission.

    						Copyright Â© 2012 Vulnerability-Lab




-- 
VULNERABILITY RESEARCH LABORATORY TEAM
Website: www.vulnerability-lab.com
Mail: research@...nerability-lab.com


