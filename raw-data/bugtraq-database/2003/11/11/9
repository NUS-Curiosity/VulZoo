
Date: Tue, 11 Nov 2003 12:43:27 -0800
From: Michael Wojcik <Michael.Wojcik@...rofocus.com>
To: bugtraq@...urityfocus.com
Cc: Alun Jones <alun@...is.com>
Subject: RE: Six Step IE Remote Compromise Cache Attack


> From: Alun Jones [mailto:alun@...is.com] 
> Sent: Tuesday, November 11, 2003 12:13 PM

> > From: Goetz Babin-Ebell [mailto:babin-ebell@...stcenter.de] 
> > Sent: Monday, November 10, 2003 11:25 AM
> > 
> > But wrongly rejecting good input has no security implications.
> > But wrongly accepting bad input has.

> Wrongly rejecting good input has a very strong implication - 
> your program fails to do what it is tasked with.  You can call that a
> security implication, in that security's task is not just to prevent 
> access by the unwashed, but also to allow, provide and facilitate
> access to those that are approved.

Right.  Who was it who defined security as "ensuring that a system does what
it is supposed to do, and only what it is supposed to do"?  (I thought it
was Russell and Gangemi in the O'Reilly _Computer Security Basics_, but I
can't find that line in there now.  But it's similar in sentiment to their
"broader definition of computer security".)  Sometimes people concentrate on
the latter and neglect the former.

For that matter, correctly rejecting bad input and accepting good input has
security implications - an attacker can potentially use it to filter input
of unknown quality (eg to test for valid user accounts).  That doesn't mean
it shouldn't be done, of course, only that it, too, needs to be analyzed for
its security implications.

Or to put it another way: *everything* has security implications.

-- 
Michael Wojcik
Principal Software Systems Developer, Micro Focus


