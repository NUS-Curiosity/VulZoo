
Date: Fri, 24 Jan 2014 16:11:34 GMT
From: mgeorgiev@...xas.edu
To: bugtraq@...urityfocus.com
Subject: Security Vulnerabilities in Apache Cordova / PhoneGap

The following email was sent to Apache Cordova/PhoneGap on 12/13/2013, and again on 1/17/2014. 
As there has been no response, we are re-posting it here to alert the general public 
of the inherent vulnerabilities in Apache Cordova/PhoneGap.

##############################################################################################
Dear PhoneGap contributors,


PhoneGap�s domain whitelisting for accessing native resources is
broken and can be bypassed. These vulnerabilities can be exploited by
any third-party domain loaded inside an iframe (e.g., malicious ad
scripts). Below, we give a brief summary of the vulnerabilities. You
can find more details in the paper <http://www.cs.utexas.edu/~shmat/shmat_ndss14nofrak.pdf>.


1. Domain whitelisting on Android (before API 11) and Windows Phone 7
and 8 relies on the URL interception call that does not intercept
iframe and XMLHttpRequest URLs. Consequently, it does not restrict
which domains can be loaded in iframes. Any script inside an iframe
can directly use PhoneGap�s internal JavaScript interfaces to the Java
objects and access native resources: for example, by calling execute =
cordova.require('cordova/exec'); var opts = cordova.require
('cordova/plugin/ ContactFindOptions' ); and directly operating on
these objects.


2. A malicious script running in an iframe can dynamically choose any
of PhoneGap�s vulnerable bridge mechanisms at runtime (e.g.
addJavascriptInterface or loadUrl on Android) and use it to bypass the
domain whitelist. We call this the chosen-bridge attack.


3. PhoneGap�s whitelisting check on Android is incorrect - it misses
an anchor at the end of the regular expression:
this.whiteList.add(Pattern.compile("�https?://(.*\\.)?" + origin));

For example, if foo.com is whitelisted, foo.com.evil.com will pass the check.

4. PhoneGap�s domain whitelisting on Android (API 11 or highler) and
iOS does not adhere to the same-origin policy.  Third-party scripts
included using <script> tags are blocked unless their source domain is
whitelisted, even though these scripts execute in the origin of the
hosting page, not their source origin.


5. Instead of just blocking access to bridges from non-whitelisted
domains, PhoneGap completely blocks these domains from being loaded in
the browser. This prevents ad-supported apps from displaying
third-party ads and destroys the look-and-feel of many Web pages.


We have a proof-of-concept implementation (a 400-line patch for
PhoneGap 2.9.0 on Android) called NoFrak
[https://github.com/georgiev-martin/NoFrak] which fixes these
vulnerabilities. NoFrak does not allow Web content from
non-whitelisted domains to access native resources but still displays
it correctly in the browser. If you are interested in discussing how
to merge NoFrak or some parts of NoFrak to PhoneGap�s main branch,
please let us know.


Thanks,

Martin, Suman, and Vitaly

##############################################################################################
