From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2025-21864: tcp: drop secpath at the same time as we currently drop dst

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

tcp: drop secpath at the same time as we currently drop dst

Xiumei reported hitting the WARN in xfrm6_tunnel_net_exit while
running tests that boil down to:
 - create a pair of netns
 - run a basic TCP test over ipcomp6
 - delete the pair of netns

The xfrm_state found on spi_byaddr was not deleted at the time we
delete the netns, because we still have a reference on it. This
lingering reference comes from a secpath (which holds a ref on the
xfrm_state), which is still attached to an skb. This skb is not
leaked, it ends up on sk_receive_queue and then gets defer-free'd by
skb_attempt_defer_free.

The problem happens when we defer freeing an skb (push it on one CPU's
defer_list), and don't flush that list before the netns is deleted. In
that case, we still have a reference on the xfrm_state that we don't
expect at this point.

We already drop the skb's dst in the TCP receive path when it's no
longer needed, so let's also drop the secpath. At this point,
tcp_filter has already called into the LSM hooks that may require the
secpath, so it should not be needed anymore. However, in some of those
places, the MPTCP extension has just been attached to the skb, so we
cannot simply drop all extensions.

The Linux kernel CVE team has assigned CVE-2025-21864 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.19 with commit 68822bdf76f10c3dc80609d4e2cdc1e847429086 and fixed in 6.1.130 with commit 87858bbf21da239ace300d61dd209907995c0491
	Issue introduced in 5.19 with commit 68822bdf76f10c3dc80609d4e2cdc1e847429086 and fixed in 6.6.80 with commit f1d5e6a5e468308af7759cf5276779d3155c5e98
	Issue introduced in 5.19 with commit 68822bdf76f10c3dc80609d4e2cdc1e847429086 and fixed in 6.12.17 with commit cd34a07f744451e2ecf9005bb7d24d0b2fb83656
	Issue introduced in 5.19 with commit 68822bdf76f10c3dc80609d4e2cdc1e847429086 and fixed in 6.13.5 with commit 69cafd9413084cd5012cf5d7c7ec6f3d493726d9
	Issue introduced in 5.19 with commit 68822bdf76f10c3dc80609d4e2cdc1e847429086 and fixed in 6.14-rc4 with commit 9b6412e6979f6f9e0632075f8f008937b5cd4efd

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2025-21864
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	include/net/tcp.h
	net/ipv4/tcp_fastopen.c
	net/ipv4/tcp_input.c
	net/ipv4/tcp_ipv4.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/87858bbf21da239ace300d61dd209907995c0491
	https://git.kernel.org/stable/c/f1d5e6a5e468308af7759cf5276779d3155c5e98
	https://git.kernel.org/stable/c/cd34a07f744451e2ecf9005bb7d24d0b2fb83656
	https://git.kernel.org/stable/c/69cafd9413084cd5012cf5d7c7ec6f3d493726d9
	https://git.kernel.org/stable/c/9b6412e6979f6f9e0632075f8f008937b5cd4efd
