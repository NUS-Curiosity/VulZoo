From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2021-47044: sched/fair: Fix shift-out-of-bounds in load_balance()

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

sched/fair: Fix shift-out-of-bounds in load_balance()

Syzbot reported a handful of occurrences where an sd->nr_balance_failed can
grow to much higher values than one would expect.

A successful load_balance() resets it to 0; a failed one increments
it. Once it gets to sd->cache_nice_tries + 3, this *should* trigger an
active balance, which will either set it to sd->cache_nice_tries+1 or reset
it to 0. However, in case the to-be-active-balanced task is not allowed to
run on env->dst_cpu, then the increment is done without any further
modification.

This could then be repeated ad nauseam, and would explain the absurdly high
values reported by syzbot (86, 149). VincentG noted there is value in
letting sd->cache_nice_tries grow, so the shift itself should be
fixed. That means preventing:

  """
  If the value of the right operand is negative or is greater than or equal
  to the width of the promoted left operand, the behavior is undefined.
  """

Thus we need to cap the shift exponent to
  BITS_PER_TYPE(typeof(lefthand)) - 1.

I had a look around for other similar cases via coccinelle:

  @expr@
  position pos;
  expression E1;
  expression E2;
  @@
  (
  E1 >> E2@pos
  |
  E1 >> E2@pos
  )

  @cst depends on expr@
  position pos;
  expression expr.E1;
  constant cst;
  @@
  (
  E1 >> cst@pos
  |
  E1 << cst@pos
  )

  @script:python depends on !cst@
  pos << expr.pos;
  exp << expr.E2;
  @@
  # Dirty hack to ignore constexpr
  if exp.upper() != exp:
     coccilib.report.print_report(pos[0], "Possible UB shift here")

The only other match in kernel/sched is rq_clock_thermal() which employs
sched_thermal_decay_shift, and that exponent is already capped to 10, so
that one is fine.

The Linux kernel CVE team has assigned CVE-2021-47044 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.10 with commit 5a7f555904671c0737819fe4d19bd6143de3f6c0 and fixed in 5.10.37 with commit 80862cbf76c2646f709a57c4517aefe0b094c774
	Issue introduced in 5.10 with commit 5a7f555904671c0737819fe4d19bd6143de3f6c0 and fixed in 5.11.21 with commit 2f3eab368e313dba35fc2f51ede778bf7b030b54
	Issue introduced in 5.10 with commit 5a7f555904671c0737819fe4d19bd6143de3f6c0 and fixed in 5.12.4 with commit 805cea93e66ca7deaaf6ad3b67224ce47c104c2f
	Issue introduced in 5.10 with commit 5a7f555904671c0737819fe4d19bd6143de3f6c0 and fixed in 5.13 with commit 39a2a6eb5c9b66ea7c8055026303b3aa681b49a5

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2021-47044
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/sched/fair.c
	kernel/sched/sched.h


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/80862cbf76c2646f709a57c4517aefe0b094c774
	https://git.kernel.org/stable/c/2f3eab368e313dba35fc2f51ede778bf7b030b54
	https://git.kernel.org/stable/c/805cea93e66ca7deaaf6ad3b67224ce47c104c2f
	https://git.kernel.org/stable/c/39a2a6eb5c9b66ea7c8055026303b3aa681b49a5
