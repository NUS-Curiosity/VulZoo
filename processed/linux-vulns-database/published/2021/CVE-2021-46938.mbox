From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2021-46938: dm rq: fix double free of blk_mq_tag_set in dev remove after table load fails

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

dm rq: fix double free of blk_mq_tag_set in dev remove after table load fails

When loading a device-mapper table for a request-based mapped device,
and the allocation/initialization of the blk_mq_tag_set for the device
fails, a following device remove will cause a double free.

E.g. (dmesg):
  device-mapper: core: Cannot initialize queue for request-based dm-mq mapped device
  device-mapper: ioctl: unable to set up device queue for new table.
  Unable to handle kernel pointer dereference in virtual kernel address space
  Failing address: 0305e098835de000 TEID: 0305e098835de803
  Fault in home space mode while using kernel ASCE.
  AS:000000025efe0007 R3:0000000000000024
  Oops: 0038 ilc:3 [#1] SMP
  Modules linked in: ... lots of modules ...
  Supported: Yes, External
  CPU: 0 PID: 7348 Comm: multipathd Kdump: loaded Tainted: G        W      X    5.3.18-53-default #1 SLE15-SP3
  Hardware name: IBM 8561 T01 7I2 (LPAR)
  Krnl PSW : 0704e00180000000 000000025e368eca (kfree+0x42/0x330)
             R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:3 CC:2 PM:0 RI:0 EA:3
  Krnl GPRS: 000000000000004a 000000025efe5230 c1773200d779968d 0000000000000000
             000000025e520270 000000025e8d1b40 0000000000000003 00000007aae10000
             000000025e5202a2 0000000000000001 c1773200d779968d 0305e098835de640
             00000007a8170000 000003ff80138650 000000025e5202a2 000003e00396faa8
  Krnl Code: 000000025e368eb8: c4180041e100       lgrl    %r1,25eba50b8
             000000025e368ebe: ecba06b93a55       risbg   %r11,%r10,6,185,58
            #000000025e368ec4: e3b010000008       ag      %r11,0(%r1)
            >000000025e368eca: e310b0080004       lg      %r1,8(%r11)
             000000025e368ed0: a7110001           tmll    %r1,1
             000000025e368ed4: a7740129           brc     7,25e369126
             000000025e368ed8: e320b0080004       lg      %r2,8(%r11)
             000000025e368ede: b904001b           lgr     %r1,%r11
  Call Trace:
   [<000000025e368eca>] kfree+0x42/0x330
   [<000000025e5202a2>] blk_mq_free_tag_set+0x72/0xb8
   [<000003ff801316a8>] dm_mq_cleanup_mapped_device+0x38/0x50 [dm_mod]
   [<000003ff80120082>] free_dev+0x52/0xd0 [dm_mod]
   [<000003ff801233f0>] __dm_destroy+0x150/0x1d0 [dm_mod]
   [<000003ff8012bb9a>] dev_remove+0x162/0x1c0 [dm_mod]
   [<000003ff8012a988>] ctl_ioctl+0x198/0x478 [dm_mod]
   [<000003ff8012ac8a>] dm_ctl_ioctl+0x22/0x38 [dm_mod]
   [<000000025e3b11ee>] ksys_ioctl+0xbe/0xe0
   [<000000025e3b127a>] __s390x_sys_ioctl+0x2a/0x40
   [<000000025e8c15ac>] system_call+0xd8/0x2c8
  Last Breaking-Event-Address:
   [<000000025e52029c>] blk_mq_free_tag_set+0x6c/0xb8
  Kernel panic - not syncing: Fatal exception: panic_on_oops

When allocation/initialization of the blk_mq_tag_set fails in
dm_mq_init_request_queue(), it is uninitialized/freed, but the pointer
is not reset to NULL; so when dev_remove() later gets into
dm_mq_cleanup_mapped_device() it sees the pointer and tries to
uninitialize and free it again.

Fix this by setting the pointer to NULL in dm_mq_init_request_queue()
error-handling. Also set it to NULL in dm_mq_cleanup_mapped_device().

The Linux kernel CVE team has assigned CVE-2021-46938 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 4.9.269 with commit 8ae0185255eaf05bd66f4215c81e99bf01140fd9
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 4.14.233 with commit b42c0a33dfdd451d9be62dd5de58c39f2750b6e3
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 4.19.191 with commit 772b9f59657665af3b68d24d12b9d172d31f0dfb
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 5.4.118 with commit a992a283c0b77d0a7c2c348add0e6a21fb1dab67
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 5.10.36 with commit 1cb02dc76f4c0a2749a02b26469512d6984252e9
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 5.11.20 with commit 6086f957416a6e87236c06079fcaba7a3998aeca
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 5.12.3 with commit d757bf4c69cda3c3ab7f775dfabbf5a80e2f6f9d
	Issue introduced in 4.6 with commit 1c357a1e86a4227a6b6059f2de118ae47659cebc and fixed in 5.13 with commit 8e947c8f4a5620df77e43c9c75310dc510250166

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2021-46938
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/md/dm-rq.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/8ae0185255eaf05bd66f4215c81e99bf01140fd9
	https://git.kernel.org/stable/c/b42c0a33dfdd451d9be62dd5de58c39f2750b6e3
	https://git.kernel.org/stable/c/772b9f59657665af3b68d24d12b9d172d31f0dfb
	https://git.kernel.org/stable/c/a992a283c0b77d0a7c2c348add0e6a21fb1dab67
	https://git.kernel.org/stable/c/1cb02dc76f4c0a2749a02b26469512d6984252e9
	https://git.kernel.org/stable/c/6086f957416a6e87236c06079fcaba7a3998aeca
	https://git.kernel.org/stable/c/d757bf4c69cda3c3ab7f775dfabbf5a80e2f6f9d
	https://git.kernel.org/stable/c/8e947c8f4a5620df77e43c9c75310dc510250166
