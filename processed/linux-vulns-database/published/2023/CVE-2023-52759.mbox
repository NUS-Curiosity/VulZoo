From bippy-d175d3acf727 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-52759: gfs2: ignore negated quota changes

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

gfs2: ignore negated quota changes

When lots of quota changes are made, there may be cases in which an
inode's quota information is increased and then decreased, such as when
blocks are added to a file, then deleted from it. If the timing is
right, function do_qc can add pending quota changes to a transaction,
then later, another call to do_qc can negate those changes, resulting
in a net gain of 0. The quota_change information is recorded in the qc
buffer (and qd element of the inode as well). The buffer is added to the
transaction by the first call to do_qc, but a subsequent call changes
the value from non-zero back to zero. At that point it's too late to
remove the buffer_head from the transaction. Later, when the quota sync
code is called, the zero-change qd element is discovered and flagged as
an assert warning. If the fs is mounted with errors=panic, the kernel
will panic.

This is usually seen when files are truncated and the quota changes are
negated by punch_hole/truncate which uses gfs2_quota_hold and
gfs2_quota_unhold rather than block allocations that use gfs2_quota_lock
and gfs2_quota_unlock which automatically do quota sync.

This patch solves the problem by adding a check to qd_check_sync such
that net-zero quota changes already added to the transaction are no
longer deemed necessary to be synced, and skipped.

In this case references are taken for the qd and the slot from do_qc
so those need to be put. The normal sequence of events for a normal
non-zero quota change is as follows:

gfs2_quota_change
   do_qc
      qd_hold
      slot_hold

Later, when the changes are to be synced:

gfs2_quota_sync
   qd_fish
      qd_check_sync
         gets qd ref via lockref_get_not_dead
   do_sync
      do_qc(QC_SYNC)
         qd_put
	    lockref_put_or_lock
   qd_unlock
      qd_put
         lockref_put_or_lock

In the net-zero change case, we add a check to qd_check_sync so it puts
the qd and slot references acquired in gfs2_quota_change and skip the
unneeded sync.

The Linux kernel CVE team has assigned CVE-2023-52759 to this issue.


Affected and fixed versions
===========================

	Fixed in 4.14.331 with commit 1c28dace6601
	Fixed in 4.19.300 with commit b4deec69fe32
	Fixed in 5.4.262 with commit 2bb42a27a92f
	Fixed in 5.10.202 with commit 2a054b87a1b7
	Fixed in 5.15.140 with commit 5bfda356e903
	Fixed in 6.1.64 with commit 53fc16c1ad84
	Fixed in 6.5.13 with commit 212f112fe5e9
	Fixed in 6.6.3 with commit 119565e566f9
	Fixed in 6.7 with commit 4c6a08125f22

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-52759
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	fs/gfs2/quota.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/1c28dace66015b675a343b89b0c87abbfda05ff4
	https://git.kernel.org/stable/c/b4deec69fe32b58dc5fb4ace52456ece85b75561
	https://git.kernel.org/stable/c/2bb42a27a92ff3984c9fa5fbe128eced3ea693f2
	https://git.kernel.org/stable/c/2a054b87a1b799b391e578597a42ee6e57a987ae
	https://git.kernel.org/stable/c/5bfda356e903633d16ae1bac1ee38364e12628a3
	https://git.kernel.org/stable/c/53fc16c1ad84f5467ec24341670b63aa759335d3
	https://git.kernel.org/stable/c/212f112fe5e90e98eb8d48585682880dae139f4c
	https://git.kernel.org/stable/c/119565e566f91ff3588ffcd5812f0c8061586c6b
	https://git.kernel.org/stable/c/4c6a08125f2249531ec01783a5f4317d7342add5
