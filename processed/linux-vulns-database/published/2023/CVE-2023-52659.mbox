From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-52659: x86/mm: Ensure input to pfn_to_kaddr() is treated as a 64-bit type

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

x86/mm: Ensure input to pfn_to_kaddr() is treated as a 64-bit type

On 64-bit platforms, the pfn_to_kaddr() macro requires that the input
value is 64 bits in order to ensure that valid address bits don't get
lost when shifting that input by PAGE_SHIFT to calculate the physical
address to provide a virtual address for.

One such example is in pvalidate_pages() (used by SEV-SNP guests), where
the GFN in the struct used for page-state change requests is a 40-bit
bit-field, so attempts to pass this GFN field directly into
pfn_to_kaddr() ends up causing guest crashes when dealing with addresses
above the 1TB range due to the above.

Fix this issue with SEV-SNP guests, as well as any similar cases that
might cause issues in current/future code, by using an inline function,
instead of a macro, so that the input is implicitly cast to the
expected 64-bit input type prior to performing the shift operation.

While it might be argued that the issue is on the caller side, other
archs/macros have taken similar approaches to deal with instances like
this, such as ARM explicitly casting the input to phys_addr_t:

  e48866647b48 ("ARM: 8396/1: use phys_addr_t in pfn_to_kaddr()")

A C inline function is even better though.

[ mingo: Refined the changelog some more & added __always_inline. ]

The Linux kernel CVE team has assigned CVE-2023-52659 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.5 with commit 6c3211796326a9d35618b866826ca556c8f008a8 and fixed in 6.6.23 with commit 325956b0173f11e98f90462be4829a8b8b0682ce
	Issue introduced in 6.5 with commit 6c3211796326a9d35618b866826ca556c8f008a8 and fixed in 6.7.11 with commit 7e1471888a5e6e846e9b4d306e5327db2b58e64e
	Issue introduced in 6.5 with commit 6c3211796326a9d35618b866826ca556c8f008a8 and fixed in 6.8.2 with commit 814305b5c23cb815ada68d43019f39050472b25f
	Issue introduced in 6.5 with commit 6c3211796326a9d35618b866826ca556c8f008a8 and fixed in 6.9 with commit 8e5647a723c49d73b9f108a8bb38e8c29d3948ea

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-52659
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	arch/x86/include/asm/page.h


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/325956b0173f11e98f90462be4829a8b8b0682ce
	https://git.kernel.org/stable/c/7e1471888a5e6e846e9b4d306e5327db2b58e64e
	https://git.kernel.org/stable/c/814305b5c23cb815ada68d43019f39050472b25f
	https://git.kernel.org/stable/c/8e5647a723c49d73b9f108a8bb38e8c29d3948ea
