From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2023-52739: Fix page corruption caused by racy check in __free_pages

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

Fix page corruption caused by racy check in __free_pages

When we upgraded our kernel, we started seeing some page corruption like
the following consistently:

  BUG: Bad page state in process ganesha.nfsd  pfn:1304ca
  page:0000000022261c55 refcount:0 mapcount:-128 mapping:0000000000000000 index:0x0 pfn:0x1304ca
  flags: 0x17ffffc0000000()
  raw: 0017ffffc0000000 ffff8a513ffd4c98 ffffeee24b35ec08 0000000000000000
  raw: 0000000000000000 0000000000000001 00000000ffffff7f 0000000000000000
  page dumped because: nonzero mapcount
  CPU: 0 PID: 15567 Comm: ganesha.nfsd Kdump: loaded Tainted: P    B      O      5.10.158-1.nutanix.20221209.el7.x86_64 #1
  Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 04/05/2016
  Call Trace:
   dump_stack+0x74/0x96
   bad_page.cold+0x63/0x94
   check_new_page_bad+0x6d/0x80
   rmqueue+0x46e/0x970
   get_page_from_freelist+0xcb/0x3f0
   ? _cond_resched+0x19/0x40
   __alloc_pages_nodemask+0x164/0x300
   alloc_pages_current+0x87/0xf0
   skb_page_frag_refill+0x84/0x110
   ...

Sometimes, it would also show up as corruption in the free list pointer
and cause crashes.

After bisecting the issue, we found the issue started from commit
e320d3012d25 ("mm/page_alloc.c: fix freeing non-compound pages"):

	if (put_page_testzero(page))
		free_the_page(page, order);
	else if (!PageHead(page))
		while (order-- > 0)
			free_the_page(page + (1 << order), order);

So the problem is the check PageHead is racy because at this point we
already dropped our reference to the page.  So even if we came in with
compound page, the page can already be freed and PageHead can return
false and we will end up freeing all the tail pages causing double free.

The Linux kernel CVE team has assigned CVE-2023-52739 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.10 with commit e320d3012d25b1fb5f3df4edb7bd44a1c362ec10 and fixed in 5.10.168 with commit 0a626e27f984dfbe96bd8e4fd08f20a2ede3ea23
	Issue introduced in 5.10 with commit e320d3012d25b1fb5f3df4edb7bd44a1c362ec10 and fixed in 5.15.94 with commit 3af734f3eac6f70ef8e272a80da40544b9d0f2b5
	Issue introduced in 5.10 with commit e320d3012d25b1fb5f3df4edb7bd44a1c362ec10 and fixed in 6.1.12 with commit 3b4c045a98f53a8890a94bb5846a390c8e39e673
	Issue introduced in 5.10 with commit e320d3012d25b1fb5f3df4edb7bd44a1c362ec10 and fixed in 6.2 with commit 462a8e08e0e6287e5ce13187257edbf24213ed03
	Issue introduced in 5.9.2 with commit 830b103831a924a23af48562c4d274696e75ab4f

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2023-52739
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	mm/page_alloc.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/0a626e27f984dfbe96bd8e4fd08f20a2ede3ea23
	https://git.kernel.org/stable/c/3af734f3eac6f70ef8e272a80da40544b9d0f2b5
	https://git.kernel.org/stable/c/3b4c045a98f53a8890a94bb5846a390c8e39e673
	https://git.kernel.org/stable/c/462a8e08e0e6287e5ce13187257edbf24213ed03
