From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-50250: fsdax: dax_unshare_iter needs to copy entire blocks

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

fsdax: dax_unshare_iter needs to copy entire blocks

The code that copies data from srcmap to iomap in dax_unshare_iter is
very very broken, which bfoster's recent fsx changes have exposed.

If the pos and len passed to dax_file_unshare are not aligned to an
fsblock boundary, the iter pos and length in the _iter function will
reflect this unalignment.

dax_iomap_direct_access always returns a pointer to the start of the
kmapped fsdax page, even if its pos argument is in the middle of that
page.  This is catastrophic for data integrity when iter->pos is not
aligned to a page, because daddr/saddr do not point to the same byte in
the file as iter->pos.  Hence we corrupt user data by copying it to the
wrong place.

If iter->pos + iomap_length() in the _iter function not aligned to a
page, then we fail to copy a full block, and only partially populate the
destination block.  This is catastrophic for data confidentiality
because we expose stale pmem contents.

Fix both of these issues by aligning copy_pos/copy_len to a page
boundary (remember, this is fsdax so 1 fsblock == 1 base page) so that
we always copy full blocks.

We're not done yet -- there's no call to invalidate_inode_pages2_range,
so programs that have the file range mmap'd will continue accessing the
old memory mapping after the file metadata updates have completed.

Be careful with the return value -- if the unshare succeeds, we still
need to return the number of bytes that the iomap iter thinks we're
operating on.

The Linux kernel CVE team has assigned CVE-2024-50250 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.1.113 with commit 1bec6782a25c9b92c203ea7a1b3e3dc6a468cbc4 and fixed in 6.1.116 with commit bdbc96c23197d773a7d1bf03e4f11de593b0ff28
	Issue introduced in 6.2 with commit d984648e428bf88cbd94ebe346c73632cb92fffb and fixed in 6.6.60 with commit 9bc18bb476e50e32e5d08f2734d63d63e0fa528c
	Issue introduced in 6.2 with commit d984648e428bf88cbd94ebe346c73632cb92fffb and fixed in 6.11.7 with commit 8e9c0f500b42216ef930f5c0d1703989a451913d
	Issue introduced in 6.2 with commit d984648e428bf88cbd94ebe346c73632cb92fffb and fixed in 6.12 with commit 50793801fc7f6d08def48754fb0f0706b0cfc394

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-50250
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	fs/dax.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/bdbc96c23197d773a7d1bf03e4f11de593b0ff28
	https://git.kernel.org/stable/c/9bc18bb476e50e32e5d08f2734d63d63e0fa528c
	https://git.kernel.org/stable/c/8e9c0f500b42216ef930f5c0d1703989a451913d
	https://git.kernel.org/stable/c/50793801fc7f6d08def48754fb0f0706b0cfc394
