From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-43870: perf: Fix event leak upon exit

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

perf: Fix event leak upon exit

When a task is scheduled out, pending sigtrap deliveries are deferred
to the target task upon resume to userspace via task_work.

However failures while adding an event's callback to the task_work
engine are ignored. And since the last call for events exit happen
after task work is eventually closed, there is a small window during
which pending sigtrap can be queued though ignored, leaking the event
refcount addition such as in the following scenario:

    TASK A
    -----

    do_exit()
       exit_task_work(tsk);

       <IRQ>
       perf_event_overflow()
          event->pending_sigtrap = pending_id;
          irq_work_queue(&event->pending_irq);
       </IRQ>
    =========> PREEMPTION: TASK A -> TASK B
       event_sched_out()
          event->pending_sigtrap = 0;
          atomic_long_inc_not_zero(&event->refcount)
          // FAILS: task work has exited
          task_work_add(&event->pending_task)
       [...]
       <IRQ WORK>
       perf_pending_irq()
          // early return: event->oncpu = -1
       </IRQ WORK>
       [...]
    =========> TASK B -> TASK A
       perf_event_exit_task(tsk)
          perf_event_exit_event()
             free_event()
                WARN(atomic_long_cmpxchg(&event->refcount, 1, 0) != 1)
                // leak event due to unexpected refcount == 2

As a result the event is never released while the task exits.

Fix this with appropriate task_work_add()'s error handling.

The Linux kernel CVE team has assigned CVE-2024-43870 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.15.84 with commit 8bffa95ac19ff27c8261904f89d36c7fcf215d59 and fixed in 5.15.165 with commit 67fad724f1b568b356c1065d50df46e6b30eb2f7
	Issue introduced in 6.1 with commit 517e6a301f34613bff24a8e35b5455884f2d83d8 and fixed in 6.1.103 with commit 70882d7fa74f0731492a0d493e8515a4f7131831
	Issue introduced in 6.1 with commit 517e6a301f34613bff24a8e35b5455884f2d83d8 and fixed in 6.6.44 with commit 05d3fd599594abf79aad4484bccb2b26e1cb0b51
	Issue introduced in 6.1 with commit 517e6a301f34613bff24a8e35b5455884f2d83d8 and fixed in 6.10.3 with commit 3d7a63352a93bdb8a1cdf29606bf617d3ac1c22a
	Issue introduced in 6.1 with commit 517e6a301f34613bff24a8e35b5455884f2d83d8 and fixed in 6.11 with commit 2fd5ad3f310de22836cdacae919dd99d758a1f1b
	Issue introduced in 6.0.14 with commit 78e1317a174edbfd1182599bf76c092a2877672c

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-43870
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/events/core.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/67fad724f1b568b356c1065d50df46e6b30eb2f7
	https://git.kernel.org/stable/c/70882d7fa74f0731492a0d493e8515a4f7131831
	https://git.kernel.org/stable/c/05d3fd599594abf79aad4484bccb2b26e1cb0b51
	https://git.kernel.org/stable/c/3d7a63352a93bdb8a1cdf29606bf617d3ac1c22a
	https://git.kernel.org/stable/c/2fd5ad3f310de22836cdacae919dd99d758a1f1b
