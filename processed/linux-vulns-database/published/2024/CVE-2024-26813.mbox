From bippy-d175d3acf727 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-26813: vfio/platform: Create persistent IRQ handlers

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

vfio/platform: Create persistent IRQ handlers

The vfio-platform SET_IRQS ioctl currently allows loopback triggering of
an interrupt before a signaling eventfd has been configured by the user,
which thereby allows a NULL pointer dereference.

Rather than register the IRQ relative to a valid trigger, register all
IRQs in a disabled state in the device open path.  This allows mask
operations on the IRQ to nest within the overall enable state governed
by a valid eventfd signal.  This decouples @masked, protected by the
@locked spinlock from @trigger, protected via the @igate mutex.

In doing so, it's guaranteed that changes to @trigger cannot race the
IRQ handlers because the IRQ handler is synchronously disabled before
modifying the trigger, and loopback triggering of the IRQ via ioctl is
safe due to serialization with trigger changes via igate.

For compatibility, request_irq() failures are maintained to be local to
the SET_IRQS ioctl rather than a fatal error in the open device path.
This allows, for example, a userspace driver with polling mode support
to continue to work regardless of moving the request_irq() call site.
This necessarily blocks all SET_IRQS access to the failed index.

The Linux kernel CVE team has assigned CVE-2024-26813 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 5.4.274 with commit 07afdfd8a68f
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 5.10.215 with commit 09452c8fcbd7
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 5.15.154 with commit cc5838f19d39
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 6.1.84 with commit 7932db06c82c
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 6.6.24 with commit 62d4e43a569b
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 6.7.12 with commit d6bedd6acc0b
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 6.8.3 with commit 0f8d8f9c2173
	Issue introduced in 4.1 with commit 57f972e2b341 and fixed in 6.9 with commit 675daf435e9f

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-26813
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/vfio/platform/vfio_platform_irq.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/07afdfd8a68f9eea8db0ddc4626c874f29d2ac5e
	https://git.kernel.org/stable/c/09452c8fcbd7817c06e8e3212d99b45917e603a5
	https://git.kernel.org/stable/c/cc5838f19d39a5fef04c468199699d2a4578be3a
	https://git.kernel.org/stable/c/7932db06c82c5b2f42a4d1a849d97dba9ce4a362
	https://git.kernel.org/stable/c/62d4e43a569b67929eb3319780be5359694c8086
	https://git.kernel.org/stable/c/d6bedd6acc0bcb1e7e010bc046032e47f08d379f
	https://git.kernel.org/stable/c/0f8d8f9c2173a541812dd750529f4a415117eb29
	https://git.kernel.org/stable/c/675daf435e9f8e5a5eab140a9864dfad6668b375
