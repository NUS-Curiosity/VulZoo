From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-50019: kthread: unpark only parked kthread

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

kthread: unpark only parked kthread

Calling into kthread unparking unconditionally is mostly harmless when
the kthread is already unparked. The wake up is then simply ignored
because the target is not in TASK_PARKED state.

However if the kthread is per CPU, the wake up is preceded by a call
to kthread_bind() which expects the task to be inactive and in
TASK_PARKED state, which obviously isn't the case if it is unparked.

As a result, calling kthread_stop() on an unparked per-cpu kthread
triggers such a warning:

	WARNING: CPU: 0 PID: 11 at kernel/kthread.c:525 __kthread_bind_mask kernel/kthread.c:525
	 <TASK>
	 kthread_stop+0x17a/0x630 kernel/kthread.c:707
	 destroy_workqueue+0x136/0xc40 kernel/workqueue.c:5810
	 wg_destruct+0x1e2/0x2e0 drivers/net/wireguard/device.c:257
	 netdev_run_todo+0xe1a/0x1000 net/core/dev.c:10693
	 default_device_exit_batch+0xa14/0xa90 net/core/dev.c:11769
	 ops_exit_list net/core/net_namespace.c:178 [inline]
	 cleanup_net+0x89d/0xcc0 net/core/net_namespace.c:640
	 process_one_work kernel/workqueue.c:3231 [inline]
	 process_scheduled_works+0xa2c/0x1830 kernel/workqueue.c:3312
	 worker_thread+0x86d/0xd70 kernel/workqueue.c:3393
	 kthread+0x2f0/0x390 kernel/kthread.c:389
	 ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147
	 ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244
	 </TASK>

Fix this with skipping unecessary unparking while stopping a kthread.

The Linux kernel CVE team has assigned CVE-2024-50019 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.11 with commit 5c25b5ff89f004c30b04759dc34ace8585a4085f and fixed in 5.15.168 with commit 40a6e660d2a3a7a5cb99f0b8ff4fb41bad039f68
	Issue introduced in 5.11 with commit 5c25b5ff89f004c30b04759dc34ace8585a4085f and fixed in 6.1.113 with commit 8608196a155cb6cfae04d96b10a2652d0327e33f
	Issue introduced in 5.11 with commit 5c25b5ff89f004c30b04759dc34ace8585a4085f and fixed in 6.6.57 with commit 19a5029981c87c2ad0845e713837faa88f5d8e2b
	Issue introduced in 5.11 with commit 5c25b5ff89f004c30b04759dc34ace8585a4085f and fixed in 6.11.4 with commit cda5423c1a1c906062ef235c940f249b97d9d135
	Issue introduced in 5.11 with commit 5c25b5ff89f004c30b04759dc34ace8585a4085f and fixed in 6.12 with commit 214e01ad4ed7158cab66498810094fac5d09b218

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-50019
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/kthread.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/40a6e660d2a3a7a5cb99f0b8ff4fb41bad039f68
	https://git.kernel.org/stable/c/8608196a155cb6cfae04d96b10a2652d0327e33f
	https://git.kernel.org/stable/c/19a5029981c87c2ad0845e713837faa88f5d8e2b
	https://git.kernel.org/stable/c/cda5423c1a1c906062ef235c940f249b97d9d135
	https://git.kernel.org/stable/c/214e01ad4ed7158cab66498810094fac5d09b218
