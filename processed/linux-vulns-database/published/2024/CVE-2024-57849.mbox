From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-57849: s390/cpum_sf: Handle CPU hotplug remove during sampling

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

s390/cpum_sf: Handle CPU hotplug remove during sampling

CPU hotplug remove handling triggers the following function
call sequence:

   CPUHP_AP_PERF_S390_SF_ONLINE  --> s390_pmu_sf_offline_cpu()
   ...
   CPUHP_AP_PERF_ONLINE          --> perf_event_exit_cpu()

The s390 CPUMF sampling CPU hotplug handler invokes:

 s390_pmu_sf_offline_cpu()
 +-->  cpusf_pmu_setup()
       +--> setup_pmc_cpu()
            +--> deallocate_buffers()

This function de-allocates all sampling data buffers (SDBs) allocated
for that CPU at event initialization. It also clears the
PMU_F_RESERVED bit. The CPU is gone and can not be sampled.

With the event still being active on the removed CPU, the CPU event
hotplug support in kernel performance subsystem triggers the
following function calls on the removed CPU:

  perf_event_exit_cpu()
  +--> perf_event_exit_cpu_context()
       +--> __perf_event_exit_context()
	    +--> __perf_remove_from_context()
	         +--> event_sched_out()
	              +--> cpumsf_pmu_del()
	                   +--> cpumsf_pmu_stop()
                                +--> hw_perf_event_update()

to stop and remove the event. During removal of the event, the
sampling device driver tries to read out the remaining samples from
the sample data buffers (SDBs). But they have already been freed
(and may have been re-assigned). This may lead to a use after free
situation in which case the samples are most likely invalid. In the
best case the memory has not been reassigned and still contains
valid data.

Remedy this situation and check if the CPU is still in reserved
state (bit PMU_F_RESERVED set). In this case the SDBs have not been
released an contain valid data. This is always the case when
the event is removed (and no CPU hotplug off occured).
If the PMU_F_RESERVED bit is not set, the SDB buffers are gone.

The Linux kernel CVE team has assigned CVE-2024-57849 to this issue.


Affected and fixed versions
===========================

	Fixed in 5.4.287 with commit 238e3af849dfdcb1faed544349f7025e533f9aab
	Fixed in 5.10.231 with commit 99192c735ed4bfdff0d215ec85c8a87a677cb898
	Fixed in 5.15.174 with commit 06a92f810df8037ca36157282ddcbefdcaf049b8
	Fixed in 6.1.120 with commit b5be6a0bb639d165c8418d8dddd8f322587be8be
	Fixed in 6.6.66 with commit a69752f1e5de817941a2ea0609254f6f25acd274
	Fixed in 6.12.5 with commit be54e6e0f93a39a9c00478d70d12956a5f3d5b9b
	Fixed in 6.13 with commit a0bd7dacbd51c632b8e2c0500b479af564afadf3

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-57849
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	arch/s390/kernel/perf_cpum_sf.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/238e3af849dfdcb1faed544349f7025e533f9aab
	https://git.kernel.org/stable/c/99192c735ed4bfdff0d215ec85c8a87a677cb898
	https://git.kernel.org/stable/c/06a92f810df8037ca36157282ddcbefdcaf049b8
	https://git.kernel.org/stable/c/b5be6a0bb639d165c8418d8dddd8f322587be8be
	https://git.kernel.org/stable/c/a69752f1e5de817941a2ea0609254f6f25acd274
	https://git.kernel.org/stable/c/be54e6e0f93a39a9c00478d70d12956a5f3d5b9b
	https://git.kernel.org/stable/c/a0bd7dacbd51c632b8e2c0500b479af564afadf3
