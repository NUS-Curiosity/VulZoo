From bippy-d175d3acf727 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-26874: drm/mediatek: Fix a null pointer crash in mtk_drm_crtc_finish_page_flip

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

drm/mediatek: Fix a null pointer crash in mtk_drm_crtc_finish_page_flip

It's possible that mtk_crtc->event is NULL in
mtk_drm_crtc_finish_page_flip().

pending_needs_vblank value is set by mtk_crtc->event, but in
mtk_drm_crtc_atomic_flush(), it's is not guarded by the same
lock in mtk_drm_finish_page_flip(), thus a race condition happens.

Consider the following case:

CPU1                              CPU2
step 1:
mtk_drm_crtc_atomic_begin()
mtk_crtc->event is not null,
                                  step 1:
                                  mtk_drm_crtc_atomic_flush:
                                  mtk_drm_crtc_update_config(
                                      !!mtk_crtc->event)
step 2:
mtk_crtc_ddp_irq ->
mtk_drm_finish_page_flip:
lock
mtk_crtc->event set to null,
pending_needs_vblank set to false
unlock
                                  pending_needs_vblank set to true,

                                  step 2:
                                  mtk_crtc_ddp_irq ->
                                  mtk_drm_finish_page_flip called again,
                                  pending_needs_vblank is still true
                                  //null pointer

Instead of guarding the entire mtk_drm_crtc_atomic_flush(), it's more
efficient to just check if mtk_crtc->event is null before use.

The Linux kernel CVE team has assigned CVE-2024-26874 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.7 with commit 119f5173628a and fixed in 4.19.311 with commit accdac6b71d5
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 5.4.273 with commit dfde84cc6c58
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 5.10.214 with commit 4688be96d20f
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 5.15.153 with commit 9beec711a172
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 6.1.83 with commit d2bd30c71047
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 6.6.23 with commit a3dd12b64ae8
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 6.7.11 with commit 9acee29a38b4
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 6.8.2 with commit 3fc88b246a2f
	Issue introduced in 4.7 with commit 119f5173628a and fixed in 6.9 with commit c958e86e9cc1

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-26874
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/gpu/drm/mediatek/mtk_drm_crtc.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/accdac6b71d5a2b84040c3d2234f53a60edc398e
	https://git.kernel.org/stable/c/dfde84cc6c589f2a9f820f12426d97365670b731
	https://git.kernel.org/stable/c/4688be96d20ffa49d2186523ee84f475f316fd49
	https://git.kernel.org/stable/c/9beec711a17245b853d64488fd5b739031612340
	https://git.kernel.org/stable/c/d2bd30c710475b2e29288827d2c91f9e6e2b91d7
	https://git.kernel.org/stable/c/a3dd12b64ae8373a41a216a0b621df224210860a
	https://git.kernel.org/stable/c/9acee29a38b4d4b70f1f583e5ef9a245db4db710
	https://git.kernel.org/stable/c/3fc88b246a2fc16014e374040fc15af1d3752535
	https://git.kernel.org/stable/c/c958e86e9cc1b48cac004a6e245154dfba8e163b
