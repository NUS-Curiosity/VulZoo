From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2024-53153: PCI: qcom-ep: Move controller cleanups to qcom_pcie_perst_deassert()

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

PCI: qcom-ep: Move controller cleanups to qcom_pcie_perst_deassert()

Currently, the endpoint cleanup function dw_pcie_ep_cleanup() and EPF
deinit notify function pci_epc_deinit_notify() are called during the
execution of qcom_pcie_perst_assert() i.e., when the host has asserted
PERST#. But quickly after this step, refclk will also be disabled by the
host.

All of the Qcom endpoint SoCs supported as of now depend on the refclk from
the host for keeping the controller operational. Due to this limitation,
any access to the hardware registers in the absence of refclk will result
in a whole endpoint crash. Unfortunately, most of the controller cleanups
require accessing the hardware registers (like eDMA cleanup performed in
dw_pcie_ep_cleanup(), powering down MHI EPF etc...). So these cleanup
functions are currently causing the crash in the endpoint SoC once host
asserts PERST#.

One way to address this issue is by generating the refclk in the endpoint
itself and not depending on the host. But that is not always possible as
some of the endpoint designs do require the endpoint to consume refclk from
the host (as I was told by the Qcom engineers).

Thus, fix this crash by moving the controller cleanups to the start of
the qcom_pcie_perst_deassert() function. qcom_pcie_perst_deassert() is
called whenever the host has deasserted PERST# and it is guaranteed that
the refclk would be active at this point. So at the start of this function
(after enabling resources), the controller cleanup can be performed. Once
finished, rest of the code execution for PERST# deassert can continue as
usual.

The Linux kernel CVE team has assigned CVE-2024-53153 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 6.10 with commit 570d7715eed8a29ac5bd96c7694f060a991e5a31 and fixed in 6.11.11 with commit e03b5f1615c84f4139cb53ef8659f4cdb8d6a563
	Issue introduced in 6.10 with commit 570d7715eed8a29ac5bd96c7694f060a991e5a31 and fixed in 6.12.2 with commit 516969d5765e2302d33b4f251496eedb757d55ea
	Issue introduced in 6.10 with commit 570d7715eed8a29ac5bd96c7694f060a991e5a31 and fixed in 6.13 with commit 7d7cf89b119af433354f865fc01017b9f8aa411a

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2024-53153
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/pci/controller/dwc/pcie-qcom-ep.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/e03b5f1615c84f4139cb53ef8659f4cdb8d6a563
	https://git.kernel.org/stable/c/516969d5765e2302d33b4f251496eedb757d55ea
	https://git.kernel.org/stable/c/7d7cf89b119af433354f865fc01017b9f8aa411a
