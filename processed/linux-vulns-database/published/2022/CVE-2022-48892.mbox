From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-48892: sched/core: Fix use-after-free bug in dup_user_cpus_ptr()

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

sched/core: Fix use-after-free bug in dup_user_cpus_ptr()

Since commit 07ec77a1d4e8 ("sched: Allow task CPU affinity to be
restricted on asymmetric systems"), the setting and clearing of
user_cpus_ptr are done under pi_lock for arm64 architecture. However,
dup_user_cpus_ptr() accesses user_cpus_ptr without any lock
protection. Since sched_setaffinity() can be invoked from another
process, the process being modified may be undergoing fork() at
the same time.  When racing with the clearing of user_cpus_ptr in
__set_cpus_allowed_ptr_locked(), it can lead to user-after-free and
possibly double-free in arm64 kernel.

Commit 8f9ea86fdf99 ("sched: Always preserve the user requested
cpumask") fixes this problem as user_cpus_ptr, once set, will never
be cleared in a task's lifetime. However, this bug was re-introduced
in commit 851a723e45d1 ("sched: Always clear user_cpus_ptr in
do_set_cpus_allowed()") which allows the clearing of user_cpus_ptr in
do_set_cpus_allowed(). This time, it will affect all arches.

Fix this bug by always clearing the user_cpus_ptr of the newly
cloned/forked task before the copying process starts and check the
user_cpus_ptr state of the source task under pi_lock.

Note to stable, this patch won't be applicable to stable releases.
Just copy the new dup_user_cpus_ptr() function over.

The Linux kernel CVE team has assigned CVE-2022-48892 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.15 with commit 07ec77a1d4e82526e1588979fff2f024f8e96df2 and fixed in 5.15.89 with commit b22faa21b6230d5eccd233e1b7e0026a5002b287
	Issue introduced in 5.15 with commit 07ec77a1d4e82526e1588979fff2f024f8e96df2 and fixed in 6.1.7 with commit 7b5cc7fd1789ea5dbb942c9f8207b076d365badc
	Issue introduced in 5.15 with commit 07ec77a1d4e82526e1588979fff2f024f8e96df2 and fixed in 6.2 with commit 87ca4f9efbd7cc649ff43b87970888f2812945b8

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-48892
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	kernel/sched/core.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/b22faa21b6230d5eccd233e1b7e0026a5002b287
	https://git.kernel.org/stable/c/7b5cc7fd1789ea5dbb942c9f8207b076d365badc
	https://git.kernel.org/stable/c/87ca4f9efbd7cc649ff43b87970888f2812945b8
