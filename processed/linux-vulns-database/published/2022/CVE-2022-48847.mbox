From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-48847: watch_queue: Fix filter limit check

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

watch_queue: Fix filter limit check

In watch_queue_set_filter(), there are a couple of places where we check
that the filter type value does not exceed what the type_filter bitmap
can hold.  One place calculates the number of bits by:

   if (tf[i].type >= sizeof(wfilter->type_filter) * 8)

which is fine, but the second does:

   if (tf[i].type >= sizeof(wfilter->type_filter) * BITS_PER_LONG)

which is not.  This can lead to a couple of out-of-bounds writes due to
a too-large type:

 (1) __set_bit() on wfilter->type_filter
 (2) Writing more elements in wfilter->filters[] than we allocated.

Fix this by just using the proper WATCH_TYPE__NR instead, which is the
number of types we actually know about.

The bug may cause an oops looking something like:

  BUG: KASAN: slab-out-of-bounds in watch_queue_set_filter+0x659/0x740
  Write of size 4 at addr ffff88800d2c66bc by task watch_queue_oob/611
  ...
  Call Trace:
   <TASK>
   dump_stack_lvl+0x45/0x59
   print_address_description.constprop.0+0x1f/0x150
   ...
   kasan_report.cold+0x7f/0x11b
   ...
   watch_queue_set_filter+0x659/0x740
   ...
   __x64_sys_ioctl+0x127/0x190
   do_syscall_64+0x43/0x90
   entry_SYSCALL_64_after_hwframe+0x44/0xae

  Allocated by task 611:
   kasan_save_stack+0x1e/0x40
   __kasan_kmalloc+0x81/0xa0
   watch_queue_set_filter+0x23a/0x740
   __x64_sys_ioctl+0x127/0x190
   do_syscall_64+0x43/0x90
   entry_SYSCALL_64_after_hwframe+0x44/0xae

  The buggy address belongs to the object at ffff88800d2c66a0
   which belongs to the cache kmalloc-32 of size 32
  The buggy address is located 28 bytes inside of
   32-byte region [ffff88800d2c66a0, ffff88800d2c66c0)

The Linux kernel CVE team has assigned CVE-2022-48847 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 5.8 with commit c73be61cede5882f9605a852414db559c0ebedfd and fixed in 5.10.106 with commit 648895da69ced90ca770fd941c3d9479a9d72c16
	Issue introduced in 5.8 with commit c73be61cede5882f9605a852414db559c0ebedfd and fixed in 5.15.29 with commit 1b09f28f70a5046acd64138075ae3f095238b045
	Issue introduced in 5.8 with commit c73be61cede5882f9605a852414db559c0ebedfd and fixed in 5.16.15 with commit b36588ebbcef74583824c08352e75838d6fb4ff2
	Issue introduced in 5.8 with commit c73be61cede5882f9605a852414db559c0ebedfd and fixed in 5.17 with commit c993ee0f9f81caf5767a50d1faeba39a0dc82af2

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-48847
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	include/linux/watch_queue.h
	kernel/watch_queue.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/648895da69ced90ca770fd941c3d9479a9d72c16
	https://git.kernel.org/stable/c/1b09f28f70a5046acd64138075ae3f095238b045
	https://git.kernel.org/stable/c/b36588ebbcef74583824c08352e75838d6fb4ff2
	https://git.kernel.org/stable/c/c993ee0f9f81caf5767a50d1faeba39a0dc82af2
