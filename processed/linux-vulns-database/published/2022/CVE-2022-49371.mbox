From bippy-5f407fcff5a0 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
To: <linux-cve-announce@vger.kernel.org>
Reply-to: <cve@kernel.org>, <linux-kernel@vger.kernel.org>
Subject: CVE-2022-49371: driver core: fix deadlock in __device_attach

Description
===========

In the Linux kernel, the following vulnerability has been resolved:

driver core: fix deadlock in __device_attach

In __device_attach function, The lock holding logic is as follows:
...
__device_attach
device_lock(dev)      // get lock dev
  async_schedule_dev(__device_attach_async_helper, dev); // func
    async_schedule_node
      async_schedule_node_domain(func)
        entry = kzalloc(sizeof(struct async_entry), GFP_ATOMIC);
	/* when fail or work limit, sync to execute func, but
	   __device_attach_async_helper will get lock dev as
	   well, which will lead to A-A deadlock.  */
	if (!entry || atomic_read(&entry_count) > MAX_WORK) {
	  func;
	else
	  queue_work_node(node, system_unbound_wq, &entry->work)
  device_unlock(dev)

As shown above, when it is allowed to do async probes, because of
out of memory or work limit, async work is not allowed, to do
sync execute instead. it will lead to A-A deadlock because of
__device_attach_async_helper getting lock dev.

To fix the deadlock, move the async_schedule_dev outside device_lock,
as we can see, in async_schedule_node_domain, the parameter of
queue_work_node is system_unbound_wq, so it can accept concurrent
operations. which will also not change the code logic, and will
not lead to deadlock.

The Linux kernel CVE team has assigned CVE-2022-49371 to this issue.


Affected and fixed versions
===========================

	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.4.198 with commit 593b595332bd2d65e1a5c1ae7897996c157f5468
	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.10.122 with commit 36ee9ffca8ef56c302f2855c4a5fccf61c0c1ada
	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.15.47 with commit df6de52b80aa3b46f5ac804412355ffe2e1df93e
	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.17.15 with commit d53a227bfcd5160ce1b61d9954901968a20651e7
	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.18.4 with commit 34fdd9b7def9d2fcb71bb7b0bc4848dd7313767e
	Issue introduced in 4.2 with commit 765230b5f084863183aa8adb3405ab3f32c0b16e and fixed in 5.19 with commit b232b02bf3c205b13a26dcec08e53baddd8e59ed

Please see https://www.kernel.org for a full list of currently supported
kernel versions by the kernel community.

Unaffected versions might change over time as fixes are backported to
older supported kernel versions.  The official CVE entry at
	https://cve.org/CVERecord/?id=CVE-2022-49371
will be updated if fixes are backported, please check that for the most
up to date information about this issue.


Affected files
==============

The file(s) affected by this issue are:
	drivers/base/dd.c


Mitigation
==========

The Linux kernel CVE team recommends that you update to the latest
stable kernel version for this, and many other bugfixes.  Individual
changes are never tested alone, but rather are part of a larger kernel
release.  Cherry-picking individual commits is not recommended or
supported by the Linux kernel community at all.  If however, updating to
the latest release is impossible, the individual changes to resolve this
issue can be found at these commits:
	https://git.kernel.org/stable/c/593b595332bd2d65e1a5c1ae7897996c157f5468
	https://git.kernel.org/stable/c/36ee9ffca8ef56c302f2855c4a5fccf61c0c1ada
	https://git.kernel.org/stable/c/df6de52b80aa3b46f5ac804412355ffe2e1df93e
	https://git.kernel.org/stable/c/d53a227bfcd5160ce1b61d9954901968a20651e7
	https://git.kernel.org/stable/c/34fdd9b7def9d2fcb71bb7b0bc4848dd7313767e
	https://git.kernel.org/stable/c/b232b02bf3c205b13a26dcec08e53baddd8e59ed
