
Message-ID: <d3b30d6d7a45424886f6ecc62ee96a41@sba-research.org>
Date: Mon, 10 Mar 2025 10:32:06 +0000
From: SBA Research Security Advisory <advisory@...-research.org>
To: "oss-security@...ts.openwall.com" <oss-security@...ts.openwall.com>
Subject: [SBA-ADV-20241209-01] CVE-2024-13918: Laravel 11.9.0-11.35.1
 Reflected XSS via Request Parameter in Debug-Mode Error Page

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

# Laravel Reflected XSS via Request Parameter in Debug-Mode Error Page #

Link: https://github.com/sbaresearch/advisories/tree/public/2024/SBA-ADV-20241209-01_Laravel_Reflected_XSS_via_Request_Parameter_in_Debug-Mode_Error_Page

## Vulnerability Overview ##

The Laravel framework versions between 11.9.0 and 11.35.1 are susceptible
to reflected cross-site scripting due to an improper encoding of request
parameters in the debug-mode error page.

* **Identifier**            : SBA-ADV-20241209-01
* **Type of Vulnerability** : Cross-Site Scripting
* **Software/Product Name** : [Laravel Framework](https://github.com/laravel/framework)
* **Vendor**                : [Laravel Holdings Inc.](https://laravel.com/)
* **Affected Versions**     : between 11.9.0 and 11.35.1
* **Fixed in Version**      : 11.36.0
* **CVE ID**                : CVE-2024-13918
* **CVSS Vector**           : CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N
* **CVSS Base Score**       : 8.0 (High)

## Vendor Description ##

> Laravel is a web application framework with expressive, elegant syntax.

Source: <https://github.com/laravel/framework/blob/11.x/README.md>

## Impact ##

This vulnerability allows attackers to execute JavaScript code in a user's
browser within the origin of the affected web application. The user needs to
access the attacker provided link and the web application needs to be in
debug-mode (`APP_DEBUG=true`).

## Vulnerability Description ##

When the debug mode is active via `APP_DEBUG=true` and the web application
returns an error (HTTP status 5XX), an error page is returned. This page
contains information about the request that triggered the error. The values
in the URL parameters and in the request body are embedded in the error page
without proper encoding.

The following code snippet shows the sink. The templating engine deactivates
HTML-encoding for data passed via `{!! !!}`.

```html
<div class="mt-1 rounded border dark:border-gray-800">
    <div class="flex items-center">
        <span
            class="min-w-0 flex-grow"
            style="[…]"
        >
            <pre class="scrollbar-hidden mx-5 my-3 overflow-y-hidden text-xs lg:text-sm"><code class="overflow-y-hidden scrollbar-hidden overflow-x-scroll scrollbar-hidden-x">{!! $exception->requestBody() ?: 'No body data' !!}</code></pre>
        </span>
    </div>
</div>
```

## Proof of Concept ##

### Prerequisites ###

First, let us make sure that the debug mode is activated ensuring that
`APP_DEBUG=true` is set in the `.env` file. Second, add an endpoint that
produces an error, e.g., division by zero.

```php
<?php

use Illuminate\Support\Facades\Route;

Route::get('/poc-url', function () {
    return 0/0;
});
```

### Exploitation ###

In this case the application is available under the origin
`http://localhost:8000`.

By clicking the link
`http://localhost:8000/poc-url?payload=<script>alert(1)</script>` the
`poc-url` function is executed, a division by zero exception is thrown,
causing the webserver to respond with a `500 Internal Server Error`. An
error page is generated containing the following HTML code.

```html
<div class="flex items-center">
  <span class="min-w-0 flex-grow" style="[…]">
    <pre class="[…]">
      <code class="[…] ">{
"payload": "<script>alert(1)</script>"
}</code>
    </pre>
  </span>
</div>
```

As the `payload` value is not embedded with proper encoding, the browser
interprets it as HTML, executes the injected JavaScript code and, therefore,
opens an alert.

## Recommended Countermeasures ##

If possible upgrade to the fixed version 11.36.0 or above.
If you are unable to upgrade, ensure that the application does not run in
debug-mode by setting `APP_DEBUG=false` in your configuration.

## Timeline ##

* `2024-11-28` Identified the vulnerability in version 11.34.1
* `2024-12-09` Initial contact attempt and disclosure of vulnerability to
               Laravel's security contact
* `2024-12-13` Security patch was merged
* `2024-12-14` Contacted Jeremy Angele (@angelej) who independently
               discovered the vulnerability and submitted the patch to fix it
* `2024-12-17` Laravel project releases fixed version 11.36.0
* `2025-02-05` Second attempt to contact Laravel's security contact
* `2025-03-10` No reaction from Laravel's security contact to all previous
               contact attempts
* `2025-03-10` SBA Research assigned CVE-2024-13918
* `2025-03-10` Public disclosure

## References ##

* Security Patch: <https://github.com/laravel/framework/pull/53869>

## Credits ##

* Fabian Funder ([SBA Research](https://www.sba-research.org/))
* Philipp Adelsberger ([SBA Research](https://www.sba-research.org/))
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEL9Wp/yZWFD9OpIt6+7iGL1j3dbIFAmfOv6AACgkQ+7iGL1j3
dbJqDRAAkxaaCCN+JRJmp2yKha46ScIYQX/Hrh3Ycymrbva3LA3U9I4vxqb2QqSG
KhKFPpWNLmhc7VmfIo0kdkgzXwbdtrgomQLASdZij1WFuZTg0tVF7nHOS0Dx5JQO
0RkaJk2A7/Yfp6teuGOscxuDtnUO/XouCcYDv0j+mA39CDxaW0zuh8tKV64J7zcX
0QJVsoDfyIwEbx8IA44O8UCkoGVK0TABcXsh0CXwZKJI0HYK5/SNzg1/bRrfuCgC
tjQlEpfB3VU9Gyyxdt1gIUIXUrEp1yTF6rF/2B3bi+zNyeRpp3pka8TvgkeQP8gF
b4mLfyWHNoukiXTYW2wr5+0eKEeYOfKu53iRI/n6PK4lC7Rrn4QlCTuVeH7couR7
OIZlYUwPU1HZ+sphqdG7gNdrVFhXA9rsnKpKgCZi9rQNI2zAPP+pxlIVsCYUjreb
NKu18bfErUFKHmrCth3NxDeRhHSMXuhkvt+EyUkKaXbRYyRbQaF0H6ODSQboeMXM
TkzPR0nySkoQkW26o+vPVcwkKG9VRsVx+gmdF7tnVnd3BcnQXM+JH00SMK+xHs3f
Th2zg6NyVfP9+FPjZbm0ajQomJL3mR3CqRd7NHJjH+qup15je5FLmRkhSVnmwu/z
AAPB6ZM1IjwkBqtQa8CiQm7x/HNZEkiq3NCIY4hLXPYB82yHALE=
=1J2Z
-----END PGP SIGNATURE-----
