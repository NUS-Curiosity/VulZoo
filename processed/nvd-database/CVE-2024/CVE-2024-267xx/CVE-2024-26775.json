{
  "id": "CVE-2024-26775",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-04-03T17:15:53.187",
  "lastModified": "2024-04-03T17:24:18.150",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\naoe: avoid potential deadlock at set_capacity\n\nMove set_capacity() outside of the section procected by (&d->lock).\nTo avoid possible interrupt unsafe locking scenario:\n\n        CPU0                    CPU1\n        ----                    ----\n[1] lock(&bdev->bd_size_lock);\n                                local_irq_disable();\n                            [2] lock(&d->lock);\n                            [3] lock(&bdev->bd_size_lock);\n   <Interrupt>\n[4]  lock(&d->lock);\n\n  *** DEADLOCK ***\n\nWhere [1](&bdev->bd_size_lock) hold by zram_add()->set_capacity().\n[2]lock(&d->lock) hold by aoeblk_gdalloc(). And aoeblk_gdalloc()\nis trying to acquire [3](&bdev->bd_size_lock) at set_capacity() call.\nIn this situation an attempt to acquire [4]lock(&d->lock) from\naoecmd_cfg_rsp() will lead to deadlock.\n\nSo the simplest solution is breaking lock dependency\n[2](&d->lock) -> [3](&bdev->bd_size_lock) by moving set_capacity()\noutside."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: aoe: evita un posible punto muerto en set_capacity Mueve set_capacity() fuera de la secci\u00f3n procesada por (&amp;d-&gt;lock). Para evitar una posible interrupci\u00f3n en un escenario de bloqueo inseguro: CPU0 CPU1 ---- ---- [1] lock(&amp;bdev-&gt;bd_size_lock); local_irq_disable(); [2] bloquear(&amp;d-&gt;bloquear); [3] bloquear(&amp;bdev-&gt;bd_size_lock);  [4] bloqueo(&amp;d-&gt;bloqueo); *** DEADLOCK *** Donde [1](&amp;bdev-&gt;bd_size_lock) mantenido por zram_add()-&gt;set_capacity(). [2]bloqueo(&amp;d-&gt;bloqueo) retenido por aoeblk_gdalloc(). Y aoeblk_gdalloc() est\u00e1 intentando adquirir [3](&amp;bdev-&gt;bd_size_lock) en la llamada set_capacity(). En esta situaci\u00f3n, un intento de adquirir [4]lock(&amp;d-&gt;lock) de aoecmd_cfg_rsp() provocar\u00e1 un punto muerto. Entonces, la soluci\u00f3n m\u00e1s simple es romper la dependencia del bloqueo [2](&amp;d-&gt;lock) -&gt; [3](&amp;bdev-&gt;bd_size_lock) moviendo set_capacity() afuera."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/19a77b27163820f793b4d022979ffdca8f659b77",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/2d623c94fbba3554f4446ba6f3c764994e8b0d26",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/673629018ba04906899dcb631beec34d871f709c",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/e169bd4fb2b36c4b2bee63c35c740c85daeb2e86",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}