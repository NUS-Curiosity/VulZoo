{
  "id": "CVE-2024-41080",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-07-29T15:15:15.523",
  "lastModified": "2024-07-29T16:21:52.517",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nio_uring: fix possible deadlock in io_register_iowq_max_workers()\n\nThe io_register_iowq_max_workers() function calls io_put_sq_data(),\nwhich acquires the sqd->lock without releasing the uring_lock.\nSimilar to the commit 009ad9f0c6ee (\"io_uring: drop ctx->uring_lock\nbefore acquiring sqd->lock\"), this can lead to a potential deadlock\nsituation.\n\nTo resolve this issue, the uring_lock is released before calling\nio_put_sq_data(), and then it is re-acquired after the function call.\n\nThis change ensures that the locks are acquired in the correct\norder, preventing the possibility of a deadlock."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux se ha resuelto la siguiente vulnerabilidad: io_uring: soluciona posible punto muerto en io_register_iowq_max_workers() La funci\u00f3n io_register_iowq_max_workers() llama a io_put_sq_data(), que adquiere el sqd-&gt;lock sin liberar uring_lock. De manera similar a la confirmaci\u00f3n 009ad9f0c6ee (\"io_uring: drop ctx-&gt;uring_lock before adquiring sqd-&gt;lock\"), esto puede conducir a una posible situaci\u00f3n de punto muerto. Para resolver este problema, uring_lock se libera antes de llamar a io_put_sq_data() y luego se vuelve a adquirir despu\u00e9s de la llamada a la funci\u00f3n. Este cambio garantiza que los bloqueos se adquieran en el orden correcto, evitando la posibilidad de un punto muerto."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/73254a297c2dd094abec7c9efee32455ae875bdf",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/b571a367502c7ef94c688ef9c7f7d69a2ce3bcca",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}