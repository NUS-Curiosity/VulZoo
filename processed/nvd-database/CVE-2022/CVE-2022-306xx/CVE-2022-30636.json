{
  "id": "CVE-2022-30636",
  "sourceIdentifier": "security@golang.org",
  "published": "2024-07-02T20:15:05.173",
  "lastModified": "2024-07-03T12:53:24.977",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "httpTokenCacheKey uses path.Base to extract the expected HTTP-01 token value to lookup in the DirCache implementation. On Windows, path.Base acts differently to filepath.Base, since Windows uses a different path separator (\\ vs. /), allowing a user to provide a relative path, i.e. .well-known/acme-challenge/..\\..\\asd becomes ..\\..\\asd. The extracted path is then suffixed with +http-01, joined with the cache directory, and opened. Since the controlled path is suffixed with +http-01 before opening, the impact of this is significantly limited, since it only allows reading arbitrary files on the system if and only if they have this suffix."
    },
    {
      "lang": "es",
      "value": "httpTokenCacheKey usa path.Base para extraer el valor del token HTTP-01 esperado para buscarlo en la implementaci\u00f3n de DirCache. En Windows, path.Base act\u00faa de manera diferente a filepath.Base, ya que Windows usa un separador de ruta diferente (\\ vs. /), lo que permite al usuario proporcionar una ruta relativa, es decir, .well-known/acme-challenge/..\\. .\\asd se convierte en ..\\..\\asd. Luego, la ruta extra\u00edda tiene el sufijo +http-01, se une al directorio de cach\u00e9 y se abre. Dado que la ruta controlada tiene el sufijo +http-01 antes de abrirse, el impacto de esto es significativamente limitado, ya que solo permite leer archivos arbitrarios en el sistema si y solo si tienen este sufijo."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://go.dev/cl/408694",
      "source": "security@golang.org"
    },
    {
      "url": "https://go.dev/issue/53082",
      "source": "security@golang.org"
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2024-2961",
      "source": "security@golang.org"
    }
  ]
}