{
  "id": "CVE-2022-48805",
  "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
  "published": "2024-07-16T12:15:04.907",
  "lastModified": "2024-07-16T13:43:58.773",
  "vulnStatus": "Awaiting Analysis",
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: usb: ax88179_178a: Fix out-of-bounds accesses in RX fixup\n\nax88179_rx_fixup() contains several out-of-bounds accesses that can be\ntriggered by a malicious (or defective) USB device, in particular:\n\n - The metadata array (hdr_off..hdr_off+2*pkt_cnt) can be out of bounds,\n   causing OOB reads and (on big-endian systems) OOB endianness flips.\n - A packet can overlap the metadata array, causing a later OOB\n   endianness flip to corrupt data used by a cloned SKB that has already\n   been handed off into the network stack.\n - A packet SKB can be constructed whose tail is far beyond its end,\n   causing out-of-bounds heap data to be considered part of the SKB's\n   data.\n\nI have tested that this can be used by a malicious USB device to send a\nbogus ICMPv6 Echo Request and receive an ICMPv6 Echo Reply in response\nthat contains random kernel heap data.\nIt's probably also possible to get OOB writes from this on a\nlittle-endian system somehow - maybe by triggering skb_cow() via IP\noptions processing -, but I haven't tested that."
    },
    {
      "lang": "es",
      "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: net: usb: ax88179_178a: Reparar accesos fuera de los l\u00edmites en RX fixup ax88179_rx_fixup() contiene varios accesos fuera de los l\u00edmites que pueden ser activados por un archivo malicioso (o defectuoso). Dispositivo USB, en particular: - La matriz de metadatos (hdr_off..hdr_off+2*pkt_cnt) puede estar fuera de los l\u00edmites, provocando lecturas OOB y (en sistemas big-endian) cambios de endianidad OOB. - Un paquete puede superponerse a la matriz de metadatos, lo que provoca un cambio de endianidad OOB posterior que corrompe los datos utilizados por un SKB clonado que ya se ha transferido a la pila de red. - Se puede construir un paquete SKB cuya cola est\u00e9 mucho m\u00e1s all\u00e1 de su extremo, lo que hace que los datos del mont\u00f3n fuera de los l\u00edmites se consideren parte de los datos del SKB. He probado que esto puede ser utilizado por un dispositivo USB malicioso para enviar una solicitud de eco ICMPv6 falsa y recibir una respuesta de eco ICMPv6 en respuesta que contiene datos aleatorios del mont\u00f3n del kernel. Probablemente tambi\u00e9n sea posible obtener escrituras OOB a partir de esto en un sistema little-endian de alguna manera, tal vez activando skb_cow() a trav\u00e9s del procesamiento de opciones de IP, pero no lo he probado."
    }
  ],
  "metrics": {},
  "references": [
    {
      "url": "https://git.kernel.org/stable/c/1668781ed24da43498799aa4f65714a7de201930",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/57bc3d3ae8c14df3ceb4e17d26ddf9eeab304581",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/63f0cfb36c1f1964a59ce544156677601e2d8740",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/711b6bf3fb052f0a6b5b3205d50e30c0c2980382",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/758290defe93a865a2880d10c5d5abd288b64b5d",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/9681823f96a811268265f35307072ad80713c274",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/a0fd5492ee769029a636f1fb521716b022b1423d",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    },
    {
      "url": "https://git.kernel.org/stable/c/ffd0393adcdcefab7e131488e10dcfde5e02d6eb",
      "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"
    }
  ]
}