diff --git a/hphp/runtime/base/zend-string.cpp b/hphp/runtime/base/zend-string.cpp
index 8a5ec8933691b..7caef317c51fd 100644
--- a/hphp/runtime/base/zend-string.cpp
+++ b/hphp/runtime/base/zend-string.cpp
@@ -1618,11 +1618,15 @@ String string_number_format(double d, int dec,
   d = php_math_round(d, dec);
 
   // departure from PHP: we got rid of dependencies on spprintf() here.
+  // This actually means 63 bytes for characters + 1 byte for '\0'
   String tmpstr(63, ReserveString);
   tmpbuf = tmpstr.mutableData();
   tmplen = snprintf(tmpbuf, 64, "%.*F", dec, d);
+  // From the man page of snprintf, the return value is:
+  // The number of characters that would have been written if n had been
+  // sufficiently large, not counting the terminating null character.
   if (tmplen < 0) return empty_string();
-  if (tmpbuf == nullptr || !isdigit((int)tmpbuf[0])) {
+  if (tmplen < 64 && (tmpbuf == nullptr || !isdigit((int)tmpbuf[0]))) {
     tmpstr.setSize(tmplen);
     return tmpstr;
   }
diff --git a/hphp/test/slow/string/number_format_t53795309.php b/hphp/test/slow/string/number_format_t53795309.php
new file mode 100644
index 0000000000000..c6fee71a722f0
--- /dev/null
+++ b/hphp/test/slow/string/number_format_t53795309.php
@@ -0,0 +1,9 @@
+<?hh
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+<<__EntryPoint>>
+function main() {
+  $bin_repr = "\x00\x00\x00\x00\x00\x00\x00\x80";
+  $double_num = unpack("dnum", $bin_repr)['num'];
+  var_dump(number_format($double_num, 100));
+}
diff --git a/hphp/test/slow/string/number_format_t53795309.php.expect b/hphp/test/slow/string/number_format_t53795309.php.expect
new file mode 100644
index 0000000000000..f4417f7682bb5
--- /dev/null
+++ b/hphp/test/slow/string/number_format_t53795309.php.expect
@@ -0,0 +1 @@
+string(103) "-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
