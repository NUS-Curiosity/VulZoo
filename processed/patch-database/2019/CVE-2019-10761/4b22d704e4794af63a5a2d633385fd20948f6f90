diff --git a/lib/contextify.js b/lib/contextify.js
index 361fb8a..97acccf 100644
--- a/lib/contextify.js
+++ b/lib/contextify.js
@@ -327,15 +327,15 @@ Decontextify.object = (object, traps, deepTraps, flags, mock) => {
 	return proxy;
 };
 Decontextify.value = (value, traps, deepTraps, flags, mock) => {
-	if (Contextified.has(value)) {
-		// Contextified object has returned back from vm
-		return Contextified.get(value);
-	} else if (Decontextify.proxies.has(value)) {
-		// Decontextified proxy already exists, reuse
-		return Decontextify.proxies.get(value);
-	}
-
 	try {
+		if (Contextified.has(value)) {
+			// Contextified object has returned back from vm
+			return Contextified.get(value);
+		} else if (Decontextify.proxies.has(value)) {
+			// Decontextified proxy already exists, reuse
+			return Decontextify.proxies.get(value);
+		}
+
 		switch (typeof value) {
 			case 'object':
 				if (value === null) {
@@ -621,15 +621,15 @@ Contextify.object = (object, traps, deepTraps, flags, mock) => {
 	return proxy;
 };
 Contextify.value = (value, traps, deepTraps, flags, mock) => {
-	if (Decontextified.has(value)) {
-		// Decontextified object has returned back to vm
-		return Decontextified.get(value);
-	} else if (Contextify.proxies.has(value)) {
-		// Contextified proxy already exists, reuse
-		return Contextify.proxies.get(value);
-	}
-
 	try {
+		if (Decontextified.has(value)) {
+			// Decontextified object has returned back to vm
+			return Decontextified.get(value);
+		} else if (Contextify.proxies.has(value)) {
+			// Contextified proxy already exists, reuse
+			return Contextify.proxies.get(value);
+		}
+
 		switch (typeof value) {
 			case 'object':
 				if (value === null) {
