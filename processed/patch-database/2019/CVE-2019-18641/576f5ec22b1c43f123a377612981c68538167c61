diff --git a/Rock.Rest/Controllers/PeopleController.Partial.cs b/Rock.Rest/Controllers/PeopleController.Partial.cs
index 45e9988c058..79a19a19761 100644
--- a/Rock.Rest/Controllers/PeopleController.Partial.cs
+++ b/Rock.Rest/Controllers/PeopleController.Partial.cs
@@ -21,6 +21,7 @@
 using System.Net;
 using System.Net.Http;
 using System.Text;
+using System.Text.RegularExpressions;
 using System.Web;
 using System.Web.Http;
 using System.Web.Http.OData;
@@ -876,6 +877,49 @@ public override void Delete( int id )
         }
 
         #endregion
+
+        #region VCard
+
+        /// <summary>
+        /// Returns VCard for person.
+        /// </summary>
+        /// <param name="personGuid">The person Guid.</param>
+        /// <returns></returns>
+        [HttpGet]
+        [Authenticate, Secured]
+        [System.Web.Http.Route( "api/People/VCard/{personGuid}" )]
+        public HttpResponseMessage GetVCard( Guid personGuid )
+        {
+            var rockContext = ( Rock.Data.RockContext ) Service.Context;
+
+            var person = new PersonService( rockContext ).Get( personGuid );
+            if ( person == null )
+            {
+                throw new HttpResponseException( new System.Net.Http.HttpResponseMessage( HttpStatusCode.NotFound ) );
+            }
+
+            string fileName = person.FullName + ".vcf";
+            HttpResponseMessage result = new HttpResponseMessage( HttpStatusCode.OK );
+
+            var mergeFields = Rock.Lava.LavaHelper.GetCommonMergeFields( null, GetPerson() );
+            mergeFields.Add( "Person", person );
+            string vCard = GlobalAttributesCache.Value( "VCardFormat" ).ResolveMergeFields( mergeFields ).Trim();
+
+            // remove empty lines (the vcard spec is very picky)
+            vCard = Regex.Replace( vCard, @"^\s+$[\r\n]*", "", RegexOptions.Multiline );
+
+            var inputEncoding = Encoding.Default;
+            var outputEncoding = Encoding.GetEncoding( 28591 );
+            var cardBytes = inputEncoding.GetBytes( vCard );
+            var outputBytes = Encoding.Convert( inputEncoding, outputEncoding, cardBytes );
+            result.Content = new ByteArrayContent( outputBytes );
+            result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue( "text/vcard" );
+            result.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue( "attachment" );
+            result.Content.Headers.ContentDisposition.FileName = fileName;
+            return result;
+        }
+
+        #endregion
     }
 
     /// <summary>
diff --git a/RockWeb/App_Code/GetVCard.ashx.cs b/RockWeb/App_Code/GetVCard.ashx.cs
deleted file mode 100644
index 2f094610136..00000000000
--- a/RockWeb/App_Code/GetVCard.ashx.cs
+++ /dev/null
@@ -1,156 +0,0 @@
-ï»¿// <copyright>
-// Copyright by the Spark Development Network
-//
-// Licensed under the Rock Community License (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.rockrms.com/license
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-// </copyright>
-//
-using System;
-using System.IO;
-using System.Text;
-using System.Text.RegularExpressions;
-using System.Threading.Tasks;
-using System.Web;
-using Rock;
-using Rock.Data;
-using Rock.Model;
-using Rock.Security;
-using Rock.Web.Cache;
-
-namespace RockWeb
-{
-    /// <summary>
-    /// Handles retrieving file data from storage
-    /// </summary>
-    public class GetVCard : IHttpHandler
-    {
-        /// <summary>
-        /// Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
-        /// </summary>
-        /// <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
-        public void ProcessRequest( HttpContext context )
-        {
-            var rockContext = new RockContext();
-
-            var currentUser = new UserLoginService( rockContext ).GetByUserName( UserLogin.GetCurrentUserName() );
-            Person currentPerson = currentUser != null ? currentUser.Person : null;
-
-            Person person = GetPerson( context, rockContext );
-            if ( person == null )
-            {
-                SendNotFound( context );
-                return;
-            }
-            else
-            {
-                if ( !person.IsAuthorized( Authorization.VIEW, currentPerson ) )
-                {
-                    SendNotAuthorized( context );
-                    return;
-                }
-            }
-
-            var response = context.Response;
-            response.ContentType = "text/vcard";
-
-            // http://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http
-            string contentDisposition;
-            string fileName = person.FullName + ".vcf";
-            if ( context.Request.Browser.Browser == "IE" )
-            {
-                contentDisposition = "attachment; filename=" + Uri.EscapeDataString( fileName );
-            }
-            else if ( context.Request.Browser.Browser == "Safari" )
-            {
-                contentDisposition = "attachment; filename=" + fileName;
-            }
-            else
-            {
-                contentDisposition = "attachment; filename*=UTF-8''" + Uri.EscapeDataString( fileName );
-            }
-            response.AddHeader( "Content-Disposition", contentDisposition );
-
-            var mergeFields = Rock.Lava.LavaHelper.GetCommonMergeFields( null, currentPerson );
-            mergeFields.Add( "Person", person );
-            string vCard = GlobalAttributesCache.Value( "VCardFormat" ).ResolveMergeFields( mergeFields ).Trim();
-
-            // remove empty lines (the vcard spec is very picky)
-            vCard = Regex.Replace( vCard, @"^\s+$[\r\n]*", "", RegexOptions.Multiline );
-
-            var inputEncoding = Encoding.Default;
-            var outputEncoding = Encoding.GetEncoding( 28591 );
-            var cardBytes = inputEncoding.GetBytes( vCard );
-            var outputBytes = Encoding.Convert( inputEncoding, outputEncoding, cardBytes );
-
-            response.OutputStream.Write( outputBytes, 0, outputBytes.Length );
-        }
-
-        /// <summary>
-        /// Gets the person.
-        /// </summary>
-        /// <param name="context">The context.</param>
-        /// <param name="rockContext">The rock context.</param>
-        /// <returns></returns>
-        private Person GetPerson( HttpContext context, RockContext rockContext )
-        {
-            string personParam = context.Request.QueryString["Person"];
-
-            int? personId = personParam.AsIntegerOrNull();
-            if ( personId.HasValue )
-            {
-                return new PersonService( rockContext ).Get( personId.Value );
-            }
-
-            Guid? personGuid = personParam.AsGuidOrNull();
-            if ( personGuid.HasValue )
-            {
-                return new PersonService( rockContext ).Get( personGuid.Value );
-            }
-
-            return null;
-        }
-
-        /// <summary>
-        /// Sends 404 status.
-        /// </summary>
-        /// <param name="context">The context.</param>
-        private void SendNotFound( HttpContext context )
-        {
-            context.Response.StatusCode = System.Net.HttpStatusCode.NotFound.ConvertToInt();
-            context.Response.StatusDescription = "The requested person could not be found.";
-            context.ApplicationInstance.CompleteRequest();
-        }
-
-        /// <summary>
-        /// Sends a 403 (forbidden)
-        /// </summary>
-        /// <param name="context">The context.</param>
-        private void SendNotAuthorized( HttpContext context )
-        {
-            context.Response.StatusCode = System.Net.HttpStatusCode.Forbidden.ConvertToInt();
-            context.Response.StatusDescription = "Not authorized to view person";
-            context.ApplicationInstance.CompleteRequest();
-        }
-
-        /// <summary>
-        /// Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
-        /// </summary>
-        /// <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
-        public bool IsReusable
-        {
-            get
-            {
-                return false;
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/RockWeb/Blocks/Crm/PersonDetail/Bio.ascx.cs b/RockWeb/Blocks/Crm/PersonDetail/Bio.ascx.cs
index 2cdeb19a8c6..f90657e9e9b 100644
--- a/RockWeb/Blocks/Crm/PersonDetail/Bio.ascx.cs
+++ b/RockWeb/Blocks/Crm/PersonDetail/Bio.ascx.cs
@@ -175,7 +175,7 @@ protected override void OnLoad( EventArgs e )
                         FollowingsHelper.SetFollowing( Person.PrimaryAlias, pnlFollow, this.CurrentPerson );
                     }
 
-                    hlVCard.NavigateUrl = ResolveRockUrl( string.Format( "~/GetVCard.ashx?Person={0}", Person.Id ) );
+                    hlVCard.NavigateUrl = ResolveUrl( string.Format( "~/api/People/VCard/{0}", Person.Guid ) );
 
                     var socialCategoryGuid = GetAttributeValue( "SocialMediaCategory" ).AsGuidOrNull();
                     if ( socialCategoryGuid.HasValue )
diff --git a/RockWeb/GetVCard.ashx b/RockWeb/GetVCard.ashx
deleted file mode 100644
index fa0326bcada..00000000000
--- a/RockWeb/GetVCard.ashx
+++ /dev/null
@@ -1 +0,0 @@
-ï»¿<%@ WebHandler Language="C#" CodeBehind="~/App_Code/GetVCard.ashx.cs" Class="RockWeb.GetVCard" %>
