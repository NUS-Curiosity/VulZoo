diff --git a/app/controllers/discourse_jira/issues_controller.rb b/app/controllers/discourse_jira/issues_controller.rb
index 4f0ed02..a29b4e1 100644
--- a/app/controllers/discourse_jira/issues_controller.rb
+++ b/app/controllers/discourse_jira/issues_controller.rb
@@ -130,11 +130,15 @@ def create
     def attach
       raise Discourse::InvalidAccess if !SiteSetting.discourse_jira_enabled
 
+      params.require(:issue_key)
+      issue_key = params[:issue_key]
+      raise Discourse::InvalidParameters.new(:issue_key) if issue_key.include?("/")
+
       hijack(
         info:
           "attaching Jira issue for topic #{params[:topic_id]} and post_number #{params[:post_number]}",
       ) do
-        response = Api.get("issue/#{params[:issue_key]}")
+        response = Api.get("issue/#{issue_key}")
 
         if response.code != "200"
           log("Bad Jira response: #{response.body}")
@@ -150,12 +154,12 @@ def attach
         result =
           success_json.merge(
             {
-              issue_key: json[:key],
-              issue_url: URI.join(SiteSetting.discourse_jira_url, "browse/#{json[:key]}").to_s,
+              issue_key: issue_key,
+              issue_url: URI.join(SiteSetting.discourse_jira_url, "browse/#{issue_key}").to_s,
             },
           )
 
-        post.jira_issue_key = result[:issue_key]
+        post.jira_issue_key = issue_key
 
         if topic = Topic.find_by(id: params[:topic_id])
           if current_user.guardian.can_create_post_on_topic?(topic)
diff --git a/lib/discourse_jira/api.rb b/lib/discourse_jira/api.rb
index 9b3661b..9ba2769 100644
--- a/lib/discourse_jira/api.rb
+++ b/lib/discourse_jira/api.rb
@@ -3,6 +3,8 @@
 module DiscourseJira
   class InvalidApiResponse < ::StandardError
   end
+  class InvalidURI < StandardError
+  end
 
   class Api
     INVALID_RESPONSE = "Invalid response from Jira API server"
@@ -29,7 +31,7 @@ def self.make_request(endpoint)
         uri = URI.join(SiteSetting.discourse_jira_url, endpoint)
       end
 
-      Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == "https") do |http|
+      FinalDestination::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == "https") do |http|
         headers = {
           "Content-Type" => "application/json",
           "Accept" => "application/json",
@@ -43,10 +45,15 @@ def self.make_request(endpoint)
         request = yield(uri, headers)
         http.request(request)
       end
+    rescue FinalDestination::SSRFDetector::DisallowedIpError => e
+      Discourse.warn_exception(e, message: "SSRF detected", env: { url: uri.to_s })
+      raise InvalidURI
+    rescue SocketError, Timeout::Error
+      raise InvalidURI
     end
 
     def self.get(endpoint)
-      make_request(endpoint) { |uri, headers| Net::HTTP::Get.new(uri, headers) }
+      make_request(endpoint) { |uri, headers| FinalDestination::HTTP::Get.new(uri, headers) }
     end
 
     def self.getJSON(endpoint)
@@ -64,7 +71,7 @@ def self.getJSON(endpoint)
 
     def self.post(endpoint, body)
       make_request(endpoint) do |uri, headers|
-        request = Net::HTTP::Post.new(uri, headers)
+        request = FinalDestination::HTTP::Post.new(uri, headers)
         request.body = body.to_json
 
         request
diff --git a/spec/lib/api_spec.rb b/spec/lib/api_spec.rb
index bbfcbfe..fb1763c 100644
--- a/spec/lib/api_spec.rb
+++ b/spec/lib/api_spec.rb
@@ -11,7 +11,23 @@
   end
 
   describe ".get_version!" do
+    it "raises error for internal hosts" do
+      WebMock.enable!(except: [:final_destination])
+      FinalDestination::SSRFDetector.stubs(:lookup_ips).returns(["192.168.1.1"])
+      Discourse.expects(:warn_exception).with(
+        instance_of(FinalDestination::SSRFDetector::DisallowedIpError),
+        message: "SSRF detected",
+        env: {
+          url: "https://jira.example.com/rest/api/2/serverInfo",
+        },
+      )
+      expect { described_class.get_version! }.to raise_error(DiscourseJira::InvalidURI)
+    ensure
+      WebMock.enable!
+    end
+
     it "returns the API version" do
+      FinalDestination::SSRFDetector.stubs(:lookup_ips).returns(["1.2.3.4"])
       stub_request(:get, "https://jira.example.com/rest/api/2/serverInfo").to_return(
         status: 200,
         body: {
diff --git a/spec/requests/issues_controller_spec.rb b/spec/requests/issues_controller_spec.rb
index 6596a8c..731f280 100644
--- a/spec/requests/issues_controller_spec.rb
+++ b/spec/requests/issues_controller_spec.rb
@@ -223,6 +223,23 @@
       expect(response.status).to eq(404)
     end
 
+    it "requires issue key in correct format" do
+      sign_in(admin)
+      post = Fabricate(:post)
+
+      post "/jira/issues/attach.json",
+           params: {
+             issue_key: "../DIS/42",
+             topic_id: post.topic_id,
+             post_number: post.post_number,
+           }
+
+      expect(response.status).to eq(400)
+      expect(response.parsed_body["errors"][0]).to eq(
+        I18n.t("invalid_params", message: "issue_key"),
+      )
+    end
+
     it "attach an existing Jira issue to post" do
       sign_in(admin)
       post = Fabricate(:post)
