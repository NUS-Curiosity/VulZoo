diff --git a/news/1.bugfix b/news/1.bugfix
new file mode 100644
index 0000000..019268d
--- /dev/null
+++ b/news/1.bugfix
@@ -0,0 +1,5 @@
+When ``++api++`` is in the url multiple times, redirect to the proper url.
+When the url is badly formed, for example ``++api++/something/++api++``, give a 404 NotFound.
+Fixes a denial of service.
+See `security advisory <https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq>`_.
+[maurits]
diff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py
index 963d1c4..5d5389d 100644
--- a/src/plone/rest/tests/test_traversal.py
+++ b/src/plone/rest/tests/test_traversal.py
@@ -10,6 +10,8 @@
 from plone.app.testing import TEST_USER_ID
 from plone.rest.service import Service
 from plone.rest.testing import PLONE_REST_INTEGRATION_TESTING
+from zExceptions import NotFound
+from zExceptions import Redirect
 from zope.event import notify
 from zope.interface import alsoProvides
 from zope.publisher.interfaces.browser import IBrowserView
@@ -106,6 +108,34 @@ def test_html_request_on_existing_view_returns_view(self):
         obj = self.traverse(path="/plone/folder1/search", accept="text/html")
         self.assertFalse(isinstance(obj, Service), "Got a service")
 
+    def test_html_request_via_api_returns_service(self):
+        obj = self.traverse(path="/plone/++api++", accept="text/html")
+        self.assertTrue(isinstance(obj, Service), "Not a service")
+
+    def test_html_request_via_double_apis_raises_redirect(self):
+        portal_url = self.portal.absolute_url()
+        with self.assertRaises(Redirect) as exc:
+            self.traverse(path="/plone/++api++/++api++", accept="text/html")
+        self.assertEqual(
+            exc.exception.headers["Location"],
+            f"{portal_url}/++api++",
+        )
+
+    def test_html_request_via_multiple_apis_raises_redirect(self):
+        portal_url = self.portal.absolute_url()
+        with self.assertRaises(Redirect) as exc:
+            self.traverse(
+                path="/plone/++api++/++api++/++api++/search", accept="text/html"
+            )
+        self.assertEqual(
+            exc.exception.headers["Location"],
+            f"{portal_url}/++api++/search",
+        )
+
+    def test_html_request_via_multiple_bad_apis_raises_not_found(self):
+        with self.assertRaises(NotFound):
+            self.traverse(path="/plone/++api++/search/++api++", accept="text/html")
+
     def test_virtual_hosting(self):
         app = self.layer["app"]
         vhm = VirtualHostMonster()
diff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py
index f8d4a23..0a151c8 100644
--- a/src/plone/rest/traverse.py
+++ b/src/plone/rest/traverse.py
@@ -5,6 +5,7 @@
 from plone.rest.interfaces import IAPIRequest
 from plone.rest.interfaces import IService
 from plone.rest.events import mark_as_api_request
+from zExceptions import Redirect
 from zope.component import adapter
 from zope.component import queryMultiAdapter
 from zope.interface import implementer
@@ -64,6 +65,18 @@ def __init__(self, context, request):
         self.request = request
 
     def traverse(self, name_ignored, subpath_ignored):
+        name = "/++api++"
+        url = self.request.ACTUAL_URL
+        if url.count(name) > 1:
+            # Redirect to proper url.
+            while f"{name}{name}" in url:
+                url = url.replace(f"{name}{name}", name)
+            if url.count(name) > 1:
+                # Something like: .../++api++/something/++api++
+                # Return nothing, so a NotFound is raised.
+                return
+            # Raise a redirect exception to stop execution of the current request.
+            raise Redirect(url)
         mark_as_api_request(self.request, "application/json")
         return self.context
 
