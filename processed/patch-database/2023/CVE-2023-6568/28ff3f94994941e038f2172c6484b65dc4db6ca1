diff --git a/docs/source/auth/rest-api.rst b/docs/source/auth/rest-api.rst
index baf6d2779c1bb..2bbba4b7dbd5b 100644
--- a/docs/source/auth/rest-api.rst
+++ b/docs/source/auth/rest-api.rst
@@ -12,6 +12,8 @@ The API is hosted under the ``/api`` route on the MLflow tracking server. For ex
 experiments on a tracking server hosted at ``http://localhost:5000``, access
 ``http://localhost:5000/api/2.0/mlflow/users/create``.
 
+.. important::
+    The MLflow REST API requires content type ``application/json`` for all POST requests.
 
 .. contents:: Table of Contents
     :local:
diff --git a/docs/source/rest-api.rst b/docs/source/rest-api.rst
index bbf97c4acef81..5989a6c73a7b8 100755
--- a/docs/source/rest-api.rst
+++ b/docs/source/rest-api.rst
@@ -11,6 +11,9 @@ The API is hosted under the ``/api`` route on the MLflow tracking server. For ex
 experiments on a tracking server hosted at ``http://localhost:5000``, make a POST request to
 ``http://localhost:5000/api/2.0/mlflow/experiments/search``.
 
+.. important::
+    The MLflow REST API requires content type ``application/json`` for all POST requests.
+
 .. contents:: Table of Contents
     :local:
     :depth: 1
@@ -18,7 +21,6 @@ experiments on a tracking server hosted at ``http://localhost:5000``, make a POS
 ===========================
 
 
-
 .. _mlflowMlflowServicecreateExperiment:
 
 Create Experiment
diff --git a/mlflow/server/auth/__init__.py b/mlflow/server/auth/__init__.py
index e281ad7506e2b..6c46569f9eda6 100644
--- a/mlflow/server/auth/__init__.py
+++ b/mlflow/server/auth/__init__.py
@@ -762,7 +762,11 @@ def create_user():
         user = store.create_user(username, password)
         return make_response({"user": user.to_json()})
     else:
-        return make_response(f"Invalid content type: '{content_type}'", 400)
+        message = (
+            "Invalid content type. Must be one of: "
+            "application/x-www-form-urlencoded, application/json"
+        )
+        return make_response(message, 400)
 
 
 @catch_mlflow_exception
diff --git a/mlflow/server/handlers.py b/mlflow/server/handlers.py
index e15ee3653810e..cb2961c36e4a0 100644
--- a/mlflow/server/handlers.py
+++ b/mlflow/server/handlers.py
@@ -91,6 +91,7 @@
     UpdateExperiment,
     UpdateRun,
 )
+from mlflow.server.validation import _validate_content_type
 from mlflow.store.artifact.artifact_repo import MultipartUploadMixin
 from mlflow.store.artifact.artifact_repository_registry import get_artifact_repository
 from mlflow.store.db.db_types import DATABASE_ENGINES
@@ -403,6 +404,7 @@ def _validate_param_against_schema(schema, param, value, proto_parsing_succeeded
 
 
 def _get_request_json(flask_request=request):
+    _validate_content_type(flask_request, ["application/json"])
     return flask_request.get_json(force=True, silent=True)
 
 
@@ -1112,6 +1114,7 @@ def _default_history_bulk_impl():
 @_disable_if_artifacts_only
 def search_datasets_handler():
     MAX_EXPERIMENT_IDS_PER_REQUEST = 20
+    _validate_content_type(request, ["application/json"])
     experiment_ids = request.json.get("experiment_ids", [])
     if not experiment_ids:
         raise MlflowException(
@@ -1179,6 +1182,8 @@ def assert_arg_exists(arg_name, arg):
                 error_code=INVALID_PARAMETER_VALUE,
             )
 
+    _validate_content_type(request, ["application/json"])
+
     args = request.json
     experiment_id = args.get("experiment_id")
     assert_arg_exists("experiment_id", experiment_id)
diff --git a/mlflow/server/validation.py b/mlflow/server/validation.py
new file mode 100644
index 0000000000000..4c9f6462825ae
--- /dev/null
+++ b/mlflow/server/validation.py
@@ -0,0 +1,31 @@
+from typing import List
+
+from mlflow.exceptions import MlflowException
+from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE
+
+
+def _validate_content_type(flask_request, allowed_content_types: List[str]):
+    """
+    Validates that the request content type is one of the allowed content types.
+
+    :param flask_request: Flask request object (flask.request)
+    :param allowed_content_types: A list of allowed content types
+    """
+    if flask_request.method not in ["POST", "PUT"]:
+        return
+
+    if flask_request.content_type is None:
+        raise MlflowException(
+            message="Bad Request. Content-Type header is missing.",
+            error_code=INVALID_PARAMETER_VALUE,
+        )
+
+    # Remove any parameters e.g. "application/json; charset=utf-8" -> "application/json"
+    content_type = flask_request.content_type.split(";")[0]
+    if content_type not in allowed_content_types:
+        message = f"Bad Request. Content-Type must be one of {allowed_content_types}."
+
+        raise MlflowException(
+            message=message,
+            error_code=INVALID_PARAMETER_VALUE,
+        )
diff --git a/tests/server/test_handlers.py b/tests/server/test_handlers.py
index 3b7632387d259..1bc5bd0474600 100644
--- a/tests/server/test_handlers.py
+++ b/tests/server/test_handlers.py
@@ -156,6 +156,7 @@ def test_all_model_registry_endpoints_available():
 def test_can_parse_json():
     request = mock.MagicMock()
     request.method = "POST"
+    request.content_type = "application/json"
     request.get_json = mock.MagicMock()
     request.get_json.return_value = {"name": "hello"}
     msg = _get_request_message(CreateExperiment(), flask_request=request)
@@ -165,12 +166,23 @@ def test_can_parse_json():
 def test_can_parse_post_json_with_unknown_fields():
     request = mock.MagicMock()
     request.method = "POST"
+    request.content_type = "application/json"
     request.get_json = mock.MagicMock()
     request.get_json.return_value = {"name": "hello", "WHAT IS THIS FIELD EVEN": "DOING"}
     msg = _get_request_message(CreateExperiment(), flask_request=request)
     assert msg.name == "hello"
 
 
+def test_can_parse_post_json_with_content_type_params():
+    request = mock.MagicMock()
+    request.method = "POST"
+    request.content_type = "application/json; charset=utf-8"
+    request.get_json = mock.MagicMock()
+    request.get_json.return_value = {"name": "hello"}
+    msg = _get_request_message(CreateExperiment(), flask_request=request)
+    assert msg.name == "hello"
+
+
 def test_can_parse_get_json_with_unknown_fields():
     request = mock.MagicMock()
     request.method = "GET"
@@ -184,12 +196,33 @@ def test_can_parse_get_json_with_unknown_fields():
 def test_can_parse_json_string():
     request = mock.MagicMock()
     request.method = "POST"
+    request.content_type = "application/json"
     request.get_json = mock.MagicMock()
     request.get_json.return_value = '{"name": "hello2"}'
     msg = _get_request_message(CreateExperiment(), flask_request=request)
     assert msg.name == "hello2"
 
 
+def test_can_block_post_request_with_invalid_content_type():
+    request = mock.MagicMock()
+    request.method = "POST"
+    request.content_type = "text/plain"
+    request.get_json = mock.MagicMock()
+    request.get_json.return_value = {"name": "hello"}
+    with pytest.raises(MlflowException, match=r"Bad Request. Content-Type"):
+        _get_request_message(CreateExperiment(), flask_request=request)
+
+
+def test_can_block_post_request_with_missing_content_type():
+    request = mock.MagicMock()
+    request.method = "POST"
+    request.content_type = None
+    request.get_json = mock.MagicMock()
+    request.get_json.return_value = {"name": "hello"}
+    with pytest.raises(MlflowException, match=r"Bad Request. Content-Type"):
+        _get_request_message(CreateExperiment(), flask_request=request)
+
+
 def test_search_runs_default_view_type(mock_get_request_message, mock_tracking_store):
     """
     Search Runs default view type is filled in as ViewType.ACTIVE_ONLY
