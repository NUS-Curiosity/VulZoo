diff --git a/RELEASES.md b/RELEASES.md
index 2ada87ca8ed0..de377e1243cc 100644
--- a/RELEASES.md
+++ b/RELEASES.md
@@ -137,6 +137,19 @@ Unreleased.
 
 --------------------------------------------------------------------------------
 
+## 12.0.2
+
+Released 2023-09-14.
+
+### Fixed
+
+* [CVE-2023-41880] - Miscompilation of wasm `i64x2.shr_s` instruction with
+  constant input on x86\_64
+
+[CVE-2023-41880]: https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh
+
+--------------------------------------------------------------------------------
+
 ## 12.0.1
 
 Released 2023-08-24
@@ -211,6 +224,31 @@ Released 2023-08-21
 
 --------------------------------------------------------------------------------
 
+## 11.0.2
+
+Released 2023-09-14.
+
+### Fixed
+
+* [CVE-2023-41880] - Miscompilation of wasm `i64x2.shr_s` instruction with
+  constant input on x86\_64
+
+[CVE-2023-41880]: https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh
+
+--------------------------------------------------------------------------------
+
+## 11.0.1
+
+Released 2023-07-24.
+
+### Fixed
+
+* Update some minimum version requirements for Wasmtime's dependencies to fix
+  building Wasmtime with historical versions of these dependencies.
+  [#6758](https://github.com/bytecodealliance/wasmtime/pull/6758)
+
+--------------------------------------------------------------------------------
+
 ## 11.0.0
 
 Released 2023-07-20
@@ -271,6 +309,19 @@ Released 2023-07-20
 
 --------------------------------------------------------------------------------
 
+## 10.0.2
+
+Released 2023-09-14.
+
+### Fixed
+
+* [CVE-2023-41880] - Miscompilation of wasm `i64x2.shr_s` instruction with
+  constant input on x86\_64
+
+[CVE-2023-41880]: https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh
+
+--------------------------------------------------------------------------------
+
 ## 10.0.1
 
 Released 2023-06-21
diff --git a/cranelift/codegen/src/isa/x64/lower.isle b/cranelift/codegen/src/isa/x64/lower.isle
index 76a97eb8e2d5..69e9f229f15c 100644
--- a/cranelift/codegen/src/isa/x64/lower.isle
+++ b/cranelift/codegen/src/isa/x64/lower.isle
@@ -860,7 +860,7 @@
           (high32 Xmm (x64_psrad vec (xmi_imm 31)))
           (high32 Xmm (x64_pshufd high32 0b11_10_11_01))
           (low32  Xmm (x64_psrad vec (xmi_imm (u32_sub imm 32))))
-          (low32  Xmm (x64_pshufd low32 0b11_10_10_01))
+          (low32  Xmm (x64_pshufd low32 0b11_10_11_01))
         )
         (x64_punpckldq low32 high32)))
 
diff --git a/cranelift/filetests/filetests/runtests/simd-sshr.clif b/cranelift/filetests/filetests/runtests/simd-sshr.clif
index 29d3a8c51cfb..8f2781dfe6db 100644
--- a/cranelift/filetests/filetests/runtests/simd-sshr.clif
+++ b/cranelift/filetests/filetests/runtests/simd-sshr.clif
@@ -121,4 +121,6 @@ block0(v0: i64x2):
 ; run: %i64x2_sshr_const3([0x10000000000 0]) == [1 0]
 ; run: %i64x2_sshr_const3([-1 -1]) == [-1 -1]
 ; run: %i64x2_sshr_const3([0x8000000080000000 0x8000000080000000]) == [0xffffffffff800000 0xffffffffff800000]
+; run: %i64x2_sshr_const3([0x2424242424244424 0x8b1b1b1bffffff24]) == [0x242424 0xffffffffff8b1b1b]
+; run: %i64x2_sshr_const3([0x2424242424244424 0x1b1b1b1bffffff24]) == [0x242424 0x1b1b1b]
 
