diff --git a/CHANGELOG.md b/CHANGELOG.md
index 012cc85f0..2a9dda841 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,10 @@
 
 All notable changes to this project will be documented in this file.
 
+## [0.20.6] - 2023-06-19
+
+- Fixed an issue when apiPrefilter was an arrow function, it did not affect get of a specific resource
+
 ## [0.20.5] - 2023-06-11
 
 - fixed issue #200 transactions on mongo db
diff --git a/misc/dts-compare/remult-mongo.d.ts b/misc/dts-compare/remult-mongo.d.ts
index 135a8318e..de658cd91 100644
--- a/misc/dts-compare/remult-mongo.d.ts
+++ b/misc/dts-compare/remult-mongo.d.ts
@@ -1,11 +1,19 @@
-import type { MongoClient, Db } from 'mongodb';
+import type { MongoClient, Db, ClientSession } from 'mongodb';
 import { DataProvider, EntityDataProvider, EntityFilter, EntityMetadata, Remult } from '.';
 import { RepositoryOverloads } from './src/remult3';
 export declare class MongoDataProvider implements DataProvider {
     private db;
     private client;
-    constructor(db: Db, client: MongoClient);
-    static getDb(remult?: Remult): Db;
+    constructor(db: Db, client: MongoClient, options?: {
+        session?: ClientSession;
+        disableTransactions?: boolean;
+    });
+    session?: ClientSession;
+    disableTransactions: boolean;
+    static getDb(remult?: Remult): {
+        db: Db;
+        session: ClientSession;
+    };
     getEntityDataProvider(entity: EntityMetadata<any>): EntityDataProvider;
     transaction(action: (dataProvider: DataProvider) => Promise<void>): Promise<void>;
     static filterToRaw<entityType>(entity: RepositoryOverloads<entityType>, condition: EntityFilter<entityType>): Promise<{
diff --git a/misc/dts-compare/src/shared-tests/db-tests-setup.d.ts b/misc/dts-compare/src/shared-tests/db-tests-setup.d.ts
index 2f2db96d7..789e6b165 100644
--- a/misc/dts-compare/src/shared-tests/db-tests-setup.d.ts
+++ b/misc/dts-compare/src/shared-tests/db-tests-setup.d.ts
@@ -13,6 +13,7 @@ export declare function testInMemory(key: string, what: dbTestWhatSignature, foc
 export declare const TestDbs: {
     restDataProvider: string;
     mongo: string;
+    inMemory: string;
 };
 export declare type dbTestWhatSignature = ((db: {
     db: DataProvider;
diff --git a/projects/core/src/data-api.ts b/projects/core/src/data-api.ts
index 7782ba40a..633cd952e 100644
--- a/projects/core/src/data-api.ts
+++ b/projects/core/src/data-api.ts
@@ -195,10 +195,16 @@ export class DataApi<T = any> {
   private async doOnId(response: DataApiResponse, id: any, what: (row: T) => Promise<void>) {
     try {
 
-
+      var where: EntityFilter<any>[] = [this.repository.metadata.idMetadata.getIdFilter(id)];
+      if (this.repository.metadata.options.apiPrefilter) {
+        if (typeof this.repository.metadata.options.apiPrefilter === "function")
+          where.push(await this.repository.metadata.options.apiPrefilter());
+        else
+          where.push(this.repository.metadata.options.apiPrefilter);
+      }
 
       await this.repository.find({
-        where: { $and: [this.repository.metadata.options.apiPrefilter, this.repository.metadata.idMetadata.getIdFilter(id)] } as EntityFilter<any>
+        where: { $and: where } as EntityFilter<any>
       })
         .then(async r => {
           if (r.length == 0)
diff --git a/projects/core/src/tests/test-data-api/predefined-filter.spec.ts b/projects/core/src/tests/test-data-api/predefined-filter.spec.ts
index fa54dc63b..39a69828e 100644
--- a/projects/core/src/tests/test-data-api/predefined-filter.spec.ts
+++ b/projects/core/src/tests/test-data-api/predefined-filter.spec.ts
@@ -131,6 +131,21 @@ describe("data api", () => {
     await api.put(t, 1, { name: 'YAEL' });
     d.test();
   });
+  it("put id 1 works with predefined filterand shouldnt return anything", async () => {
+    let [c, remult] = await createData(async (i) => {
+      await i(1, 'noam', 'a');
+      await i(2, 'yael', 'b');
+      await i(3, 'yoni', 'a');
+    }, CategoriesForThisTest2);
+    var api = new DataApi(c, remult);
+    let t = new TestDataApiResponse();
+    let d = new Done();
+    t.notFound = () => {
+      d.ok();
+    };
+    await api.put(t, 1, { name: 'YAEL' });
+    d.test();
+  });
   it("getArray works with predefined filter", async () => {
     let [c, remult] = await createData(async (i) => {
       await i(1, 'noam', 'a');
diff --git a/projects/test-angular/src/app/products-test/products.component.ts b/projects/test-angular/src/app/products-test/products.component.ts
index 9fdc7ce0a..ce271f103 100644
--- a/projects/test-angular/src/app/products-test/products.component.ts
+++ b/projects/test-angular/src/app/products-test/products.component.ts
@@ -42,7 +42,11 @@ export class ProductsComponent {
 
 }
 
-@Entity("categories", { allowApiRead: false })
+@Entity<Category>("categories", {
+  allowApiCrud: true, apiPrefilter: () => ({
+    id: { $ne: "clj30u9o500000kr3956ph9ep" }
+  })
+})
 export class Category {
   @Fields.cuid()
   id = ''
