diff --git a/ckan-2.10/base/Dockerfile b/ckan-2.10/base/Dockerfile
index 01619c8..ef0ea13 100644
--- a/ckan-2.10/base/Dockerfile
+++ b/ckan-2.10/base/Dockerfile
@@ -1,4 +1,5 @@
-FROM alpine:3.16
+FROM alpine:3.17
+ARG CKAN_VERSION=ckan-2.10.0
 
 # Internals, you probably don't need to change these
 ENV APP_DIR=/srv/app
@@ -8,8 +9,7 @@ ENV PIP_SRC=${SRC_DIR}
 ENV CKAN_STORAGE_PATH=/var/lib/ckan
 ENV GIT_URL=https://github.com/ckan/ckan.git
 # CKAN version to build
-#ENV GIT_BRANCH=dev-v2.10
-ENV GIT_BRANCH=ckan-2.10.0
+ENV GIT_BRANCH=${CKAN_VERSION}
 # Customize these on the .env file if needed
 ENV CKAN_SITE_URL=http://localhost:5000
 ENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars
@@ -37,7 +37,7 @@ RUN apk add --no-cache tzdata \
         libmagic \
         curl \
         patch \
-        sudo && \
+        bash && \
     # Packages to build CKAN requirements and plugins
     apk add --no-cache --virtual .build-deps \
         postgresql-dev \
@@ -61,7 +61,6 @@ RUN apk add --no-cache tzdata \
     python3 ${SRC_DIR}/get-pip.py && \
     pip3 install supervisor && \
     mkdir /etc/supervisord.d && \
-    #pip wheel --wheel-dir=/wheels uwsgi gevent && \
     rm -rf ${SRC_DIR}/get-pip.py
 
 COPY setup/supervisord.conf /etc
@@ -80,7 +79,7 @@ RUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \
 
 # Create a local user and group to run the app
 RUN addgroup -g 92 -S ckan && \
-    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan
+    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan
 
 # Create local storage folder
 RUN mkdir -p ${CKAN_STORAGE_PATH} && \
@@ -89,15 +88,11 @@ RUN mkdir -p ${CKAN_STORAGE_PATH} && \
 COPY setup/prerun.py ${APP_DIR}
 COPY setup/start_ckan.sh ${APP_DIR}
 ADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}
+RUN chmod 644 ${APP_DIR}/wsgi.py
 
 # Create entrypoint directory for children image scripts
 ONBUILD RUN mkdir /docker-entrypoint.d
 
-RUN chown ckan -R /srv/app
-
-RUN addgroup sudo && \
-    adduser ckan sudo
-
 EXPOSE 5000
 
 HEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit CMD ["/srv/app/start_ckan.sh"]
diff --git a/ckan-2.10/base/Makefile b/ckan-2.10/base/Makefile
index a8d8e15..796bf6c 100644
--- a/ckan-2.10/base/Makefile
+++ b/ckan-2.10/base/Makefile
@@ -1,18 +1,14 @@
 .PHONY: all help build build-all push
 SHELL := /bin/bash
-CKAN_VERSION=ckan-2.10.0
+CKAN_VERSION=2.10.0
 TAG_NAME="ckan/ckan-base:$(CKAN_VERSION)"
 
 all: help
 help:
 	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
 
-build:	## Build a CKAN 2.10.0 image , `make build`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))
-	docker build -t $(TAG_NAME) .
-endif
+build:	## Build a CKAN 2.x.x image , `make build`
+	docker build --build-arg="CKAN_VERSION=ckan-$(CKAN_VERSION)" -t $(TAG_NAME) .
 
-push: ## Push a CKAN 2.10.0 image to the DockerHub registry, `make push`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))
+push: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`
 	docker push $(TAG_NAME)
-endif
diff --git a/ckan-2.10/base/setup/prerun.py b/ckan-2.10/base/setup/prerun.py
index 3d68696..d8b7921 100644
--- a/ckan-2.10/base/setup/prerun.py
+++ b/ckan-2.10/base/setup/prerun.py
@@ -194,6 +194,13 @@ def create_sysadmin():
         subprocess.call(command)
         print("[prerun] Made user {0} a sysadmin".format(name))
 
+        # cleanup permissions
+        # We're running as root before pivoting to uwsgi and dropping privs
+        data_dir = "%s/storage" % os.environ['CKAN_STORAGE_PATH']
+
+        command = ["chown", "-R", "ckan:ckan", data_dir]
+        subprocess.call(command)
+        print("[prerun] Ensured storage directory is owned by ckan")
 
 if __name__ == "__main__":
 
diff --git a/ckan-2.10/base/setup/start_ckan.sh b/ckan-2.10/base/setup/start_ckan.sh
index 0c8409c..5927dea 100755
--- a/ckan-2.10/base/setup/start_ckan.sh
+++ b/ckan-2.10/base/setup/start_ckan.sh
@@ -16,7 +16,7 @@ then
 fi
 
 # Run the prerun script to init CKAN and create the default admin user
-sudo -u ckan -EH python3 prerun.py
+python3 prerun.py
 
 echo "Set up ckan.datapusher.api_token in the CKAN config file"
 ckan config-tool $CKAN_INI "ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\t')"
@@ -51,7 +51,7 @@ then
     # Start supervisord
     supervisord --configuration /etc/supervisord.conf &
     # Start uwsgi
-    sudo -u ckan -EH uwsgi $UWSGI_OPTS
+    uwsgi $UWSGI_OPTS
 else
   echo "[prerun] failed...not starting CKAN."
 fi
diff --git a/ckan-2.10/dev/Dockerfile b/ckan-2.10/dev/Dockerfile
index 383673f..bba7d14 100644
--- a/ckan-2.10/dev/Dockerfile
+++ b/ckan-2.10/dev/Dockerfile
@@ -1,4 +1,4 @@
-FROM ckan/ckan-base:ckan-2.10.0
+FROM ckan/ckan-base:2.10.0
 
 
 ENV APP_DIR=/srv/app
@@ -11,10 +11,8 @@ RUN apk add --no-cache libffi-dev
 RUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt
 
 # Create folder for local extensions sources
-RUN mkdir ${SRC_EXTENSIONS_DIR}
+RUN mkdir -p ${SRC_EXTENSIONS_DIR}
 
 COPY setup/start_ckan_development.sh ${APP_DIR}
 
-RUN chown ckan -R /srv/app
-
 CMD ["/srv/app/start_ckan_development.sh"]
\ No newline at end of file
diff --git a/ckan-2.10/dev/Makefile b/ckan-2.10/dev/Makefile
index 50efd50..66d6305 100644
--- a/ckan-2.10/dev/Makefile
+++ b/ckan-2.10/dev/Makefile
@@ -1,18 +1,14 @@
 .PHONY: all help build build-all push
 SHELL := /bin/bash
-CKAN_VERSION=ckan-2.10.0-dev
+CKAN_VERSION=2.10.0-dev
 TAG_NAME="ckan/ckan-base:$(CKAN_VERSION)"
 
 all: help
 help:
 	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
 
-build:	## Build a CKAN ckan-2.10.0-dev image , `make build`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))
-	docker build -t $(TAG_NAME) .
-endif
+build:	## Build a CKAN 2.x-dev image , `make build`
+	docker build --build-arg="CKAN_VERSION=ckan-$(CKAN_VERSION)" -t $(TAG_NAME) .
 
-push: ## Push a CKAN ckan-2.10.0-dev image to the DockerHub registry, `make push`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))
+push: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`
 	docker push $(TAG_NAME)
-endif
\ No newline at end of file
diff --git a/ckan-2.10/dev/setup/start_ckan_development.sh b/ckan-2.10/dev/setup/start_ckan_development.sh
index 93ce814..1224822 100755
--- a/ckan-2.10/dev/setup/start_ckan_development.sh
+++ b/ckan-2.10/dev/setup/start_ckan_development.sh
@@ -74,7 +74,7 @@ ckan config-tool $SRC_DIR/ckan/test-core.ini \
     "ckan.redis.url = $TEST_CKAN_REDIS_URL"
 
 # Run the prerun script to init CKAN and create the default admin user
-sudo -u ckan -EH python3 prerun.py
+python3 prerun.py
 
 echo "Set up ckan.datapusher.api_token in the CKAN config file"
 ckan config-tool $CKAN_INI "ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\t')"
@@ -95,5 +95,5 @@ fi
 # Start supervisord
 supervisord --configuration /etc/supervisord.conf &
 
-# Start the development server with automatic reload
-sudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0
\ No newline at end of file
+# Start the development server as the ckan user with automatic reload
+su ckan -c "/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0"
\ No newline at end of file
diff --git a/ckan-2.9/base/Dockerfile b/ckan-2.9/base/Dockerfile
index e5de0a3..828af0c 100644
--- a/ckan-2.9/base/Dockerfile
+++ b/ckan-2.9/base/Dockerfile
@@ -1,4 +1,5 @@
-FROM alpine:3.13
+FROM alpine:3.15
+ARG CKAN_VERSION=2.9.8
 
 # Internals, you probably don't need to change these
 ENV APP_DIR=/srv/app
@@ -8,7 +9,7 @@ ENV PIP_SRC=${SRC_DIR}
 ENV CKAN_STORAGE_PATH=/var/lib/ckan
 ENV GIT_URL=https://github.com/ckan/ckan.git
 # CKAN version to build
-ENV GIT_BRANCH=ckan-2.9.8
+ENV GIT_BRANCH=${CKAN_VERSION}
 # Customize these on the .env file if needed
 ENV CKAN_SITE_URL=http://localhost:5000
 ENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars
@@ -35,8 +36,7 @@ RUN apk add --no-cache tzdata \
         uwsgi-gevent \
         libmagic \
         curl \
-        patch \
-        sudo && \
+        patch && \
     # Packages to build CKAN requirements and plugins
     apk add --no-cache --virtual .build-deps \
         postgresql-dev \
@@ -80,7 +80,7 @@ RUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \
 
 # Create a local user and group to run the app
 RUN addgroup -g 92 -S ckan && \
-    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan
+    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan
 
 # Create local storage folder
 RUN mkdir -p ${CKAN_STORAGE_PATH} && \
@@ -89,15 +89,11 @@ RUN mkdir -p ${CKAN_STORAGE_PATH} && \
 COPY setup/prerun.py ${APP_DIR}
 COPY setup/start_ckan.sh ${APP_DIR}
 ADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}
+RUN chmod 644 ${APP_DIR}/wsgi.py
 
 # Create entrypoint directory for children image scripts
 ONBUILD RUN mkdir /docker-entrypoint.d
 
-RUN chown ckan -R /srv/app
-
-RUN addgroup sudo && \
-    adduser ckan sudo
-
 EXPOSE 5000
 
 HEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1
diff --git a/ckan-2.9/base/Makefile b/ckan-2.9/base/Makefile
index 58c5040..e87673c 100644
--- a/ckan-2.9/base/Makefile
+++ b/ckan-2.9/base/Makefile
@@ -1,18 +1,17 @@
 .PHONY: all help build build-all push
 SHELL := /bin/bash
-CKAN_VERSION=ckan-2.9.8
+
+CKAN_VERSION=2.9.8
+
 TAG_NAME="ckan/ckan-base:$(CKAN_VERSION)"
 
 all: help
 help:
 	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
 
-build:	## Build a CKAN 2.9.8 image , `make build`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))
-	docker build -t $(TAG_NAME) .
-endif
 
-push: ## Push a CKAN 2.9.8 image to the DockerHub registry, `make push`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))
-	docker push $(TAG_NAME)
-endif
\ No newline at end of file
+build:	## Build a CKAN 2.x.x image , `make build`
+	docker build --build-arg="CKAN_VERSION=ckan-$(CKAN_VERSION)" -t $(TAG_NAME) .
+
+push: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`
+	docker push $(TAG_NAME)
\ No newline at end of file
diff --git a/ckan-2.9/base/setup/prerun.py b/ckan-2.9/base/setup/prerun.py
index 3d68696..d8b7921 100644
--- a/ckan-2.9/base/setup/prerun.py
+++ b/ckan-2.9/base/setup/prerun.py
@@ -194,6 +194,13 @@ def create_sysadmin():
         subprocess.call(command)
         print("[prerun] Made user {0} a sysadmin".format(name))
 
+        # cleanup permissions
+        # We're running as root before pivoting to uwsgi and dropping privs
+        data_dir = "%s/storage" % os.environ['CKAN_STORAGE_PATH']
+
+        command = ["chown", "-R", "ckan:ckan", data_dir]
+        subprocess.call(command)
+        print("[prerun] Ensured storage directory is owned by ckan")
 
 if __name__ == "__main__":
 
diff --git a/ckan-2.9/base/setup/start_ckan.sh b/ckan-2.9/base/setup/start_ckan.sh
index d6d437d..d44f564 100755
--- a/ckan-2.9/base/setup/start_ckan.sh
+++ b/ckan-2.9/base/setup/start_ckan.sh
@@ -12,7 +12,7 @@ then
 fi
 
 # Run the prerun script to init CKAN and create the default admin user
-sudo -u ckan -EH python3 prerun.py
+python3 prerun.py
 
 # Run any startup scripts provided by images extending this one
 if [[ -d "/docker-entrypoint.d" ]]
@@ -44,7 +44,7 @@ then
     # Start supervisord
     supervisord --configuration /etc/supervisord.conf &
     # Start uwsgi
-    sudo -u ckan -EH uwsgi $UWSGI_OPTS
+    uwsgi $UWSGI_OPTS
 else
   echo "[prerun] failed...not starting CKAN."
 fi
diff --git a/ckan-2.9/dev/Dockerfile b/ckan-2.9/dev/Dockerfile
index 569e0c3..4b053d2 100644
--- a/ckan-2.9/dev/Dockerfile
+++ b/ckan-2.9/dev/Dockerfile
@@ -11,10 +11,8 @@ RUN apk add --no-cache libffi-dev
 RUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt
 
 # Create folder for local extensions sources
-RUN mkdir ${SRC_EXTENSIONS_DIR}
+RUN mkdir -p ${SRC_EXTENSIONS_DIR}
 
 COPY setup/start_ckan_development.sh ${APP_DIR}
 
-RUN chown ckan -R /srv/app
-
 CMD ["/srv/app/start_ckan_development.sh"]
\ No newline at end of file
diff --git a/ckan-2.9/dev/Makefile b/ckan-2.9/dev/Makefile
index 6005f44..16c9746 100644
--- a/ckan-2.9/dev/Makefile
+++ b/ckan-2.9/dev/Makefile
@@ -1,18 +1,14 @@
 .PHONY: all help build build-all push
 SHELL := /bin/bash
-CKAN_VERSION=ckan-2.9.8-dev
+CKAN_VERSION=2.9.8-dev
 TAG_NAME="ckan/ckan-base:$(CKAN_VERSION)"
 
 all: help
 help:
 	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
 
-build:	## Build a CKAN 2.9.8-dev image , `make build`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))
-	docker build -t $(TAG_NAME) .
-endif
+build:	## Build a CKAN 2.x-dev image , `make build`
+	docker build --build-arg="CKAN_VERSION=ckan-$(CKAN_VERSION)" -t $(TAG_NAME) .
 
-push: ## Push a CKAN 2.9.8-dev image to the DockerHub registry, `make push`
-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))
+push: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`
 	docker push $(TAG_NAME)
-endif
\ No newline at end of file
diff --git a/ckan-2.9/dev/setup/start_ckan_development.sh b/ckan-2.9/dev/setup/start_ckan_development.sh
index 9485dd5..0544804 100755
--- a/ckan-2.9/dev/setup/start_ckan_development.sh
+++ b/ckan-2.9/dev/setup/start_ckan_development.sh
@@ -70,7 +70,7 @@ ckan config-tool $SRC_DIR/ckan/test-core.ini \
     "ckan.redis.url = $TEST_CKAN_REDIS_URL"
 
 # Run the prerun script to init CKAN and create the default admin user
-sudo -u ckan -EH python3 prerun.py
+python3 prerun.py
 
 # Run any startup scripts provided by images extending this one
 if [[ -d "/docker-entrypoint.d" ]]
@@ -88,5 +88,5 @@ fi
 # Start supervisord
 supervisord --configuration /etc/supervisord.conf &
 
-# Start the development server with automatic reload
-sudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0
\ No newline at end of file
+# Start the development server as the ckan user with automatic reload
+su ckan -c "/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0"
\ No newline at end of file
