diff --git a/server/services/rtsp-camera/api/rtspCamera.controller.js b/server/services/rtsp-camera/api/rtspCamera.controller.js
index 8c5a0b493b..c190392d06 100644
--- a/server/services/rtsp-camera/api/rtspCamera.controller.js
+++ b/server/services/rtsp-camera/api/rtspCamera.controller.js
@@ -2,7 +2,8 @@ const fs = require('fs');
 const path = require('path');
 
 const logger = require('../../../utils/logger');
-const { Error404 } = require('../../../utils/httpErrors');
+const { Error404, Error400 } = require('../../../utils/httpErrors');
+const { validateFilename, validateSessionId } = require('../utils/validateStreamParams');
 const asyncMiddleware = require('../../../api/middlewares/asyncMiddleware');
 
 module.exports = function RtspCameraController(gladys, rtspCameraHandler) {
@@ -57,6 +58,8 @@ module.exports = function RtspCameraController(gladys, rtspCameraHandler) {
    */
   async function getStreamingFile(req, res) {
     try {
+      validateSessionId(req.params.folder);
+      validateFilename(req.params.file);
       const filePath = path.join(gladys.config.tempFolder, req.params.folder, req.params.file);
       const filestream = fs.createReadStream(filePath);
       filestream.on('error', (err) => {
@@ -64,6 +67,9 @@ module.exports = function RtspCameraController(gladys, rtspCameraHandler) {
       });
       filestream.pipe(res);
     } catch (e) {
+      if (e instanceof Error400) {
+        throw e;
+      }
       logger.warn(e);
       throw new Error404('FILE_NOT_FOUND');
     }
diff --git a/server/services/rtsp-camera/utils/validateStreamParams.js b/server/services/rtsp-camera/utils/validateStreamParams.js
new file mode 100644
index 0000000000..6585341516
--- /dev/null
+++ b/server/services/rtsp-camera/utils/validateStreamParams.js
@@ -0,0 +1,28 @@
+const { Error400 } = require('../../../utils/httpErrors');
+
+const SESSION_ID_REGEX = /^camera-[a-zA-Z0-9-_]+$/;
+
+// Session_id usually looks like "camera-7835d25d-b8ce-4824-a235-23637f778f83-39-50-13"
+const validateSessionId = (sessionId) => {
+  if (!SESSION_ID_REGEX.test(sessionId)) {
+    throw new Error400('Invalid session id');
+  }
+};
+
+const AUTHORIZED_FILENAMES = ['index.m3u8', 'index.m3u8.key', 'key_info_file.txt'];
+const HLS_CHUNK_REGEX = /index[0-9]+.ts/;
+
+const validateFilename = (filename) => {
+  if (AUTHORIZED_FILENAMES.includes(filename)) {
+    return;
+  }
+
+  if (!HLS_CHUNK_REGEX.test(filename)) {
+    throw new Error400('Invalid filename');
+  }
+};
+
+module.exports = {
+  validateSessionId,
+  validateFilename,
+};
diff --git a/server/test/services/rtsp-camera/controllers/rtspCamera.controller.test.js b/server/test/services/rtsp-camera/controllers/rtspCamera.controller.test.js
index 41650a2a93..84fb92f842 100644
--- a/server/test/services/rtsp-camera/controllers/rtspCamera.controller.test.js
+++ b/server/test/services/rtsp-camera/controllers/rtspCamera.controller.test.js
@@ -99,7 +99,7 @@ describe('camera controller test', () => {
     );
     assert.calledWith(rtspCameraService.liveActivePing, 'my-camera');
   });
-  it('should get streaming file', async () => {
+  it('should get index.m3u8 file', async () => {
     const rtspCameraController = RtspCameraController(gladys, rtspCameraService);
     const req = {
       params: {
@@ -115,12 +115,28 @@ describe('camera controller test', () => {
       resWriteStream,
     );
   });
+  it('should get index1.ts file', async () => {
+    const rtspCameraController = RtspCameraController(gladys, rtspCameraService);
+    const req = {
+      params: {
+        folder: 'camera-1',
+        file: 'index1.ts',
+      },
+    };
+    await fse.ensureDir(path.join(gladys.config.tempFolder, 'camera-1'));
+    await fse.writeFile(path.join(gladys.config.tempFolder, 'camera-1', 'index1.ts'), 'test-toto-content');
+    const resWriteStream = fse.createWriteStream(path.join(gladys.config.tempFolder, 'camera-1', 'result.txt'));
+    await rtspCameraController['get /api/v1/service/rtsp-camera/camera/streaming/:folder/:file'].controller(
+      req,
+      resWriteStream,
+    );
+  });
   it('should return 404, file not found (res.status) ', async () => {
     const rtspCameraController = RtspCameraControllerWithFsMocked(gladys, rtspCameraService);
     const req = {
       params: {
         folder: 'camera-1',
-        file: 'FILE_NOT_FOUND',
+        file: 'index12212.ts',
       },
     };
     const resWriteStream = fse.createWriteStream(path.join(gladys.config.tempFolder, 'camera-1', 'result.txt'));
@@ -147,4 +163,34 @@ describe('camera controller test', () => {
     );
     await chaiAssert.isRejected(promise, 'FILE_NOT_FOUND');
   });
+  it('should return 400, bad request, invalid filename', async () => {
+    const rtspCameraController = RtspCameraController(gladys, rtspCameraService);
+    const req = {
+      params: {
+        folder: 'camera-1',
+        file: 'lalalalala',
+      },
+    };
+    const resWriteStream = {};
+    const promise = rtspCameraController['get /api/v1/service/rtsp-camera/camera/streaming/:folder/:file'].controller(
+      req,
+      resWriteStream,
+    );
+    await chaiAssert.isRejected(promise, 'Invalid filename');
+  });
+  it('should return 400, bad request, invalid session id', async () => {
+    const rtspCameraController = RtspCameraController(gladys, rtspCameraService);
+    const req = {
+      params: {
+        folder: '.....',
+        file: 'lalalalala',
+      },
+    };
+    const resWriteStream = {};
+    const promise = rtspCameraController['get /api/v1/service/rtsp-camera/camera/streaming/:folder/:file'].controller(
+      req,
+      resWriteStream,
+    );
+    await chaiAssert.isRejected(promise, 'Invalid session id');
+  });
 });
