diff --git a/bbb-common-web/build.sbt b/bbb-common-web/build.sbt
index b0d487da2241..4260548646fd 100755
--- a/bbb-common-web/build.sbt
+++ b/bbb-common-web/build.sbt
@@ -109,5 +109,6 @@ libraryDependencies ++= Seq(
   "org.postgresql" % "postgresql" % "42.4.3",
   "org.hibernate" % "hibernate-core" % "5.6.1.Final",
   "org.flywaydb" % "flyway-core" % "7.8.2",
-  "com.zaxxer" % "HikariCP" % "4.0.3"
+  "com.zaxxer" % "HikariCP" % "4.0.3",
+  "commons-validator" % "commons-validator" % "1.7"
 )
diff --git a/bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java b/bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java
index 6d446c320197..9638bdc65c26 100755
--- a/bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java
+++ b/bbb-common-web/src/main/java/org/bigbluebutton/presentation/PresentationUrlDownloadService.java
@@ -3,15 +3,16 @@
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.*;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
+import java.util.stream.Stream;
 
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.io.FileUtils;
@@ -24,6 +25,7 @@
 import org.apache.http.impl.nio.client.HttpAsyncClients;
 import org.apache.http.nio.client.methods.HttpAsyncMethods;
 import org.apache.http.nio.client.methods.ZeroCopyConsumer;
+import org.apache.commons.validator.routines.InetAddressValidator;
 import org.bigbluebutton.api.Util;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -38,6 +40,8 @@ public class PresentationUrlDownloadService {
     private String presentationBaseURL;
     private String presentationDir;
     private String BLANK_PRESENTATION;
+    private List<String> insertDocumentSupportedProtocols;
+    private List<String> insertDocumentBlockedHosts;
 
     private ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);
 
@@ -176,6 +180,8 @@ private String followRedirect(String meetingId, String redirectUrl,
             return null;
         }
 
+        if(!isValidRedirectUrl(redirectUrl)) return null;
+
         URL presUrl;
         try {
             presUrl = new URL(redirectUrl);
@@ -215,6 +221,64 @@ private String followRedirect(String meetingId, String redirectUrl,
         }
     }
 
+    private boolean isValidRedirectUrl(String redirectUrl) {
+        URL url;
+
+        try {
+            url = new URL(redirectUrl);
+            String protocol = url.getProtocol();
+            String host = url.getHost();
+
+            if(insertDocumentSupportedProtocols.stream().noneMatch(p -> p.equalsIgnoreCase(protocol))) {
+                if(insertDocumentSupportedProtocols.size() == 1 && insertDocumentSupportedProtocols.get(0).equalsIgnoreCase("all")) {
+                    log.warn("Warning: All protocols are supported for presentation download. It is recommended to only allow HTTPS.");
+                } else {
+                    log.error("Invalid protocol [{}]", protocol);
+                    return false;
+                }
+            }
+
+            if(insertDocumentBlockedHosts.stream().anyMatch(h -> h.equalsIgnoreCase(host))) {
+                log.error("Attempted to download from blocked host [{}]", host);
+                return false;
+            }
+        } catch(MalformedURLException e) {
+            log.error("Malformed URL [{}]", redirectUrl);
+            return false;
+        }
+
+        try {
+            InetAddress[] addresses = InetAddress.getAllByName(url.getHost());
+            InetAddressValidator validator = InetAddressValidator.getInstance();
+
+            boolean localhostBlocked = insertDocumentBlockedHosts.stream().anyMatch(h -> h.equalsIgnoreCase("localhost"));
+
+            for(InetAddress address: addresses) {
+                if(!validator.isValid(address.getHostAddress())) {
+                    log.error("Invalid address [{}]", address.getHostAddress());
+                    return false;
+                }
+
+                if(localhostBlocked) {
+                    if(address.isAnyLocalAddress()) {
+                        log.error("Address [{}] is a local address", address.getHostAddress());
+                        return false;
+                    }
+
+                    if(address.isLoopbackAddress()) {
+                        log.error("Address [{}] is a loopback address", address.getHostAddress());
+                        return false;
+                    }
+                }
+            }
+        } catch(UnknownHostException e) {
+            log.error("Unknown host [{}]", url.getHost());
+            return false;
+        }
+
+        return true;
+    }
+
     public boolean savePresentation(final String meetingId,
             final String filename, final String urlString) {
 
@@ -282,4 +346,12 @@ public void setBlankPresentation(String blankPresentation) {
         this.BLANK_PRESENTATION = blankPresentation;
     }
 
+    public void setInsertDocumentSupportedProtocols(String insertDocumentSupportedProtocols) {
+        this.insertDocumentSupportedProtocols = new ArrayList<>(Arrays.asList(insertDocumentSupportedProtocols.split(",")));
+    }
+
+    public void setInsertDocumentBlockedHosts(String insertDocumentBlockedHosts) {
+        this.insertDocumentBlockedHosts = new ArrayList<>(Arrays.asList(insertDocumentBlockedHosts.split(",")));
+    }
+
 }
diff --git a/bbb-common-web/src/main/java/org/bigbluebutton/web/services/callback/CallbackUrlService.java b/bbb-common-web/src/main/java/org/bigbluebutton/web/services/callback/CallbackUrlService.java
index 1ed0822b444c..c32ca636043b 100755
--- a/bbb-common-web/src/main/java/org/bigbluebutton/web/services/callback/CallbackUrlService.java
+++ b/bbb-common-web/src/main/java/org/bigbluebutton/web/services/callback/CallbackUrlService.java
@@ -150,55 +150,7 @@ public void handleMessage(ICallbackEvent message) {
 		receivedMessages.add(dc);
 	}
 
-	private String followRedirect(String redirectUrl, int redirectCount, String origUrl) {
-
-		if (redirectCount > MAX_REDIRECTS) {
-			log.error("Max redirect reached for callback url=[{}]", origUrl);
-			return null;
-		}
-
-		URL presUrl;
-		try {
-			presUrl = new URL(redirectUrl);
-		} catch (MalformedURLException e) {
-			log.error("Malformed callback url=[{}]", redirectUrl);
-			return null;
-		}
-
-		HttpURLConnection conn;
-		try {
-			conn = (HttpURLConnection) presUrl.openConnection();
-			conn.setReadTimeout(5000);
-			conn.addRequestProperty("Accept-Language", "en-US,en;q=0.8");
-			conn.addRequestProperty("User-Agent", "Mozilla");
-
-			// normally, 3xx is redirect
-			int status = conn.getResponseCode();
-			if (status != HttpURLConnection.HTTP_OK) {
-				if (status == HttpURLConnection.HTTP_MOVED_TEMP
-								|| status == HttpURLConnection.HTTP_MOVED_PERM
-								|| status == HttpURLConnection.HTTP_SEE_OTHER) {
-					String newUrl = conn.getHeaderField("Location");
-					return followRedirect(newUrl, redirectCount + 1, origUrl);
-				} else {
-					log.error("Invalid HTTP response=[{}] for callback url=[{}]", status, redirectUrl);
-					return null;
-				}
-			} else {
-				return redirectUrl;
-			}
-		} catch (IOException e) {
-			log.error("IOException for callback url=[{}]", redirectUrl);
-			return null;
-		}
-	}
-
 	private boolean fetchCallbackUrl(final String callbackUrl) {
-		// Do not handle redirects as we must expect that the passed
-		// in callback url on meeting create must be working.
-		//String finalUrl = followRedirect(callbackUrl, 0, callbackUrl);
-		//log.info("Calling callback url {}", finalUrl);
-		//if (finalUrl == null) return false;
 
 		boolean success = false;
 
diff --git a/bigbluebutton-web/grails-app/conf/bigbluebutton.properties b/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
index 395b80b3f531..3118079c6ad1 100644
--- a/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
+++ b/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
@@ -377,6 +377,14 @@ beans.presentationService.preUploadedPresentationOverrideDefault=true
 
 presentationBaseURL=${bigbluebutton.web.serverURL}/bigbluebutton/presentation
 
+# Comma separated list of supported protocols for hosts to download presentations from
+# By default only HTTPS is supported. To enable support for all protocols (NOT RECOMMENDED) use 'all' instead
+insertDocumentSupportedProtocols=https
+
+# Comma separated list of hosts that presentations CANNOT be downloaded from
+# By default localhost is blocked (i.e. all IPs related to localhost will be blocked and cannot be used for presentation download)
+insertDocumentBlockedHosts=localhost
+
 #----------------------------------------------------
 # The URL where the presentations will be loaded from.
 #----------------------------------------------------
diff --git a/bigbluebutton-web/grails-app/conf/spring/resources.xml b/bigbluebutton-web/grails-app/conf/spring/resources.xml
index e8a7adb58455..9ea01f1ec83a 100755
--- a/bigbluebutton-web/grails-app/conf/spring/resources.xml
+++ b/bigbluebutton-web/grails-app/conf/spring/resources.xml
@@ -93,6 +93,8 @@ with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
         <property name="pageExtractor" ref="pageExtractor"/>
         <property name="documentConversionService" ref="documentConversionService"/>
         <property name="blankPresentation" value="${BLANK_PRESENTATION}"/>
+        <property name="insertDocumentSupportedProtocols" value="${insertDocumentSupportedProtocols}" />
+        <property name="insertDocumentBlockedHosts" value="${insertDocumentBlockedHosts}" />
     </bean>
 
     <bean id="xmlService" class="org.bigbluebutton.api.service.impl.XmlServiceImpl"/>
