diff --git a/server/handlers/database_handlers.go b/server/handlers/database_handlers.go
index 7a386179bcb..cb8764db6a2 100644
--- a/server/handlers/database_handlers.go
+++ b/server/handlers/database_handlers.go
@@ -73,6 +73,7 @@ func (h *Handler) GetSystemDatabase(w http.ResponseWriter, r *http.Request, _ *m
 	if offset != 0 {
 		tableFinder = tableFinder.Offset(offset)
 	}
+	order = models.SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 	if order != "" {
 		if sort == "desc" {
 			tableFinder = tableFinder.Order(clause.OrderByColumn{Column: clause.Column{Name: order}, Desc: true})
diff --git a/server/models/meshery_application_persister.go b/server/models/meshery_application_persister.go
index fe2f8f7f6bc..61d2fd57313 100644
--- a/server/models/meshery_application_persister.go
+++ b/server/models/meshery_application_persister.go
@@ -24,7 +24,7 @@ type MesheryApplicationPage struct {
 
 // GetMesheryApplications returns all of the applications
 func (maap *MesheryApplicationPersister) GetMesheryApplications(search, order string, page, pageSize uint64, updatedAfter string) ([]byte, error) {
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
diff --git a/server/models/meshery_filter_persister.go b/server/models/meshery_filter_persister.go
index 7469fa19c94..738f4ff5ae1 100644
--- a/server/models/meshery_filter_persister.go
+++ b/server/models/meshery_filter_persister.go
@@ -28,7 +28,7 @@ type MesheryFilterPage struct {
 // GetMesheryFilters returns all of the 'private' filters. Though private has no meaning here since there is only
 // one local user. We make this distinction to be consistent with the remote provider
 func (mfp *MesheryFilterPersister) GetMesheryFilters(search, order string, page, pageSize uint64, visibility []string) ([]byte, error) {
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
@@ -65,7 +65,7 @@ func (mfp *MesheryFilterPersister) GetMesheryFilters(search, order string, page,
 // GetMesheryCatalogFilters returns all of the published filters
 func (mfp *MesheryFilterPersister) GetMesheryCatalogFilters(page, pageSize, search, order string) ([]byte, error) {
 	var err error
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
diff --git a/server/models/meshery_k8scontext_persister.go b/server/models/meshery_k8scontext_persister.go
index 17b2a0288c5..83c3acf1b09 100644
--- a/server/models/meshery_k8scontext_persister.go
+++ b/server/models/meshery_k8scontext_persister.go
@@ -25,7 +25,7 @@ type MesheryK8sContextPage struct {
 
 // GetMesheryK8sContexts returns all of the contexts
 func (mkcp *MesheryK8sContextPersister) GetMesheryK8sContexts(search, order string, page, pageSize uint64) ([]byte, error) {
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
diff --git a/server/models/meshery_pattern_persister.go b/server/models/meshery_pattern_persister.go
index 0e8e963db97..36c0d002cb0 100644
--- a/server/models/meshery_pattern_persister.go
+++ b/server/models/meshery_pattern_persister.go
@@ -29,7 +29,7 @@ type MesheryPatternPage struct {
 // GetMesheryPatterns returns all of the 'private' patterns. Though private has no meaning here since there is only
 // one local user. We make this distinction to be consistent with the remote provider
 func (mpp *MesheryPatternPersister) GetMesheryPatterns(search, order string, page, pageSize uint64, updatedAfter string, visibility []string) ([]byte, error) {
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
@@ -65,7 +65,7 @@ func (mpp *MesheryPatternPersister) GetMesheryPatterns(search, order string, pag
 // GetMesheryCatalogPatterns returns all of the published patterns
 func (mpp *MesheryPatternPersister) GetMesheryCatalogPatterns(page, pageSize, search, order string) ([]byte, error) {
 	var err error
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
diff --git a/server/models/pattern_resource_persister.go b/server/models/pattern_resource_persister.go
index e4f7d20b621..cb0fdab93f7 100644
--- a/server/models/pattern_resource_persister.go
+++ b/server/models/pattern_resource_persister.go
@@ -57,7 +57,7 @@ func (prp *PatternResourcePersister) GetPatternResourceByAttributes(name, namesp
 }
 
 func (prp *PatternResourcePersister) GetPatternResources(search, order, name, namespace, typ, oamType string, page, pageSize uint64) (*PatternResourcePage, error) {
-	order = sanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
+	order = SanitizeOrderInput(order, []string{"created_at", "updated_at", "name"})
 
 	if order == "" {
 		order = "updated_at desc"
@@ -106,7 +106,7 @@ func (prp *PatternResourcePersister) Exists(name, namespace, typ, oamType string
 
 	prp.DB.
 		Raw(`
-	SELECT 
+	SELECT
 		EXISTS(SELECT 1 FROM pattern_resources WHERE name = ? AND namespace = ? AND type = ? AND oam_type = ? AND deleted = false) AS "found"`,
 			name,
 			namespace,
diff --git a/server/models/performance_profile_persister.go b/server/models/performance_profile_persister.go
index 7baabb387eb..64dcdf33dc3 100644
--- a/server/models/performance_profile_persister.go
+++ b/server/models/performance_profile_persister.go
@@ -24,7 +24,7 @@ type PerformanceProfilePage struct {
 
 // GetPerformanceProfiles returns all of the performance profiles
 func (ppp *PerformanceProfilePersister) GetPerformanceProfiles(_, search, order string, page, pageSize uint64) ([]byte, error) {
-	order = sanitizeOrderInput(order, []string{"updated_at", "created_at", "name", "last_run"})
+	order = SanitizeOrderInput(order, []string{"updated_at", "created_at", "name", "last_run"})
 	if order == "" {
 		order = "updated_at desc"
 	}
diff --git a/server/models/sql-utils.go b/server/models/sql-utils.go
index 56ad813cfdd..b8870dd0888 100644
--- a/server/models/sql-utils.go
+++ b/server/models/sql-utils.go
@@ -12,16 +12,16 @@ import (
 	"github.com/spf13/viper"
 )
 
-// sanitizeOrderInput takes in the "order by" query, a validColums
+// SanitizeOrderInput takes in the "order by" query, a validColums
 // string slice and returns a sanitized query
 //
 // it will allow to run order by query only on the columns that are present
 // in the validColumns string slice, if any other column is requested in the
 // query then it will be IGNORED and an empty query would be returned instead
 //
-// sanitizeOrderInput also expects the query to be no longer than two words, that is
+// SanitizeOrderInput also expects the query to be no longer than two words, that is
 // the query may look like "updated_at DESC" or "name ASC"
-func sanitizeOrderInput(order string, validColumns []string) string {
+func SanitizeOrderInput(order string, validColumns []string) string {
 	parsedOrderStr := strings.Split(order, " ")
 	if len(parsedOrderStr) != 2 {
 		return ""
