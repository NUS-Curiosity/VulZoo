diff --git a/hamt/shardeddir.go b/hamt/shardeddir.go
index 97a833f..44af383 100644
--- a/hamt/shardeddir.go
+++ b/hamt/shardeddir.go
@@ -42,7 +42,10 @@ func NewUnixFSHAMTShard(ctx context.Context, substrate dagpb.PBNode, data data.U
 		return nil, err
 	}
 	shardCache := make(map[ipld.Link]*_UnixFSHAMTShard, substrate.FieldLinks().Length())
-	bf := bitField(data)
+	bf, err := bitField(data)
+	if err != nil {
+		return nil, err
+	}
 	return &_UnixFSHAMTShard{
 		ctx:          ctx,
 		_substrate:   substrate,
diff --git a/hamt/util.go b/hamt/util.go
index bd72382..7132e03 100644
--- a/hamt/util.go
+++ b/hamt/util.go
@@ -88,10 +88,16 @@ func maxPadLength(nd data.UnixFSData) int {
 	return len(fmt.Sprintf("%X", nd.FieldFanout().Must().Int()-1))
 }
 
-func bitField(nd data.UnixFSData) bitfield.Bitfield {
-	bf := bitfield.NewBitfield(int(nd.FieldFanout().Must().Int()))
+const maximumHamtWidth = 1 << 10
+
+func bitField(nd data.UnixFSData) (bitfield.Bitfield, error) {
+	fanout := int(nd.FieldFanout().Must().Int())
+	if fanout > maximumHamtWidth {
+		return nil, fmt.Errorf("hamt witdh (%d) exceed maximum allowed (%d)", fanout, maximumHamtWidth)
+	}
+	bf := bitfield.NewBitfield(fanout)
 	bf.SetBytes(nd.FieldData().Must().Bytes())
-	return bf
+	return bf, nil
 }
 
 func checkLogTwo(v int) error {
