diff --git a/crates/mysten-network/src/codec.rs b/crates/mysten-network/src/codec.rs
index aff2a7116ba33..180cd2d9e1145 100644
--- a/crates/mysten-network/src/codec.rs
+++ b/crates/mysten-network/src/codec.rs
@@ -166,7 +166,7 @@ pub mod anemo {
 
         fn decode(&mut self, buf: bytes::Bytes) -> Result<Self::Item, Self::Error> {
             let compressed_size = buf.len();
-            let mut snappy_decoder = snap::read::FrameDecoder::new(buf.reader());
+            let mut snappy_decoder = snap::read::FrameDecoder::new(buf.reader()).take(1 << 30);
             let mut bytes = Vec::with_capacity(compressed_size);
             snappy_decoder.read_to_end(&mut bytes)?;
             bcs::from_bytes(bytes.as_slice())
diff --git a/crates/sui-node/src/lib.rs b/crates/sui-node/src/lib.rs
index 25567e4de57f7..2edb9431576a9 100644
--- a/crates/sui-node/src/lib.rs
+++ b/crates/sui-node/src/lib.rs
@@ -797,9 +797,9 @@ impl SuiNode {
                 .into_inner();
 
             let mut anemo_config = config.p2p_config.anemo_config.clone().unwrap_or_default();
-            // Set the max_frame_size to be 2 GB to work around the issue of there being too many
+            // Set the max_frame_size to be 1 GB to work around the issue of there being too many
             // staking events in the epoch change txn.
-            anemo_config.max_frame_size = Some(2 << 30);
+            anemo_config.max_frame_size = Some(1 << 30);
 
             // Set a higher default value for socket send/receive buffers if not already
             // configured.
diff --git a/narwhal/primary/src/primary.rs b/narwhal/primary/src/primary.rs
index ced452d050548..fa5617566bbcc 100644
--- a/narwhal/primary/src/primary.rs
+++ b/narwhal/primary/src/primary.rs
@@ -318,9 +318,9 @@ impl Primary {
             quic_config.keep_alive_interval_ms = Some(5_000);
             let mut config = anemo::Config::default();
             config.quic = Some(quic_config);
-            // Set the max_frame_size to be 2 GB to work around the issue of there being too many
+            // Set the max_frame_size to be 1 GB to work around the issue of there being too many
             // delegation events in the epoch change txn.
-            config.max_frame_size = Some(2 << 30);
+            config.max_frame_size = Some(1 << 30);
             // Set a default timeout of 300s for all RPC requests
             config.inbound_request_timeout_ms = Some(300_000);
             config.outbound_request_timeout_ms = Some(300_000);
diff --git a/narwhal/worker/src/worker.rs b/narwhal/worker/src/worker.rs
index 7b16914dce9a1..4cc67bca5d45a 100644
--- a/narwhal/worker/src/worker.rs
+++ b/narwhal/worker/src/worker.rs
@@ -242,9 +242,9 @@ impl Worker {
             quic_config.keep_alive_interval_ms = Some(5_000);
             let mut config = anemo::Config::default();
             config.quic = Some(quic_config);
-            // Set the max_frame_size to be 2 GB to work around the issue of there being too many
+            // Set the max_frame_size to be 1 GB to work around the issue of there being too many
             // delegation events in the epoch change txn.
-            config.max_frame_size = Some(2 << 30);
+            config.max_frame_size = Some(1 << 30);
             // Set a default timeout of 300s for all RPC requests
             config.inbound_request_timeout_ms = Some(300_000);
             config.outbound_request_timeout_ms = Some(300_000);
