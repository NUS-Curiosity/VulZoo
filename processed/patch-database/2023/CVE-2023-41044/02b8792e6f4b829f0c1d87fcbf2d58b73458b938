diff --git a/changelog/unreleased/ghsa-2q4p-f6gf-mqr5.toml b/changelog/unreleased/ghsa-2q4p-f6gf-mqr5.toml
new file mode 100644
index 000000000000..c5e0e9f0dde1
--- /dev/null
+++ b/changelog/unreleased/ghsa-2q4p-f6gf-mqr5.toml
@@ -0,0 +1,2 @@
+type = "security"
+message = "Fix partial path traversal vulnerability in Support Bundle feature. [GHSA-2q4p-f6gf-mqr5](https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-2q4p-f6gf-mqr5)"
diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleService.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleService.java
index cf0fa372a5ca..853d5ef7de32 100644
--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleService.java
+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleService.java
@@ -500,7 +500,7 @@ public List<BundleFile> listBundles() {
     }
 
     public void downloadBundle(String filename, OutputStream outputStream) throws IOException {
-        ensureFileWithinBundleDir(filename);
+        ensureFileWithinBundleDir(bundleDir, filename);
 
         try {
             final Path filePath = bundleDir.resolve(filename);
@@ -512,14 +512,15 @@ public void downloadBundle(String filename, OutputStream outputStream) throws IO
         }
     }
 
-    private void ensureFileWithinBundleDir(String filename) throws IOException {
-        if (!bundleDir.resolve(filename).toFile().getCanonicalPath().startsWith(bundleDir.toFile().getCanonicalPath())) {
+    @VisibleForTesting
+    void ensureFileWithinBundleDir(Path bundleDir, String filename) {
+        if (!bundleDir.resolve(filename).toAbsolutePath().normalize().startsWith(bundleDir.toAbsolutePath().normalize())) {
             throw new NotFoundException();
         }
     }
 
     public void deleteBundle(String filename) throws IOException {
-        ensureFileWithinBundleDir(filename);
+        ensureFileWithinBundleDir(bundleDir, filename);
         final Path filePath = bundleDir.resolve(filename);
         Files.delete(filePath);
     }
diff --git a/graylog2-server/src/test/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleServiceTest.java b/graylog2-server/src/test/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleServiceTest.java
index 8ba801ad5536..08ade09957a2 100644
--- a/graylog2-server/src/test/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleServiceTest.java
+++ b/graylog2-server/src/test/java/org/graylog2/rest/resources/system/debug/bundle/SupportBundleServiceTest.java
@@ -21,10 +21,13 @@
 import org.graylog2.shared.bindings.providers.ObjectMapperProvider;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+import javax.ws.rs.NotFoundException;
 import java.nio.file.Path;
 import java.time.Instant;
 import java.time.temporal.ChronoUnit;
@@ -32,6 +35,8 @@
 import java.util.concurrent.ExecutorService;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatCode;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 @ExtendWith(MockitoExtension.class)
 public class SupportBundleServiceTest {
@@ -95,4 +100,32 @@ public void testLogSizeLimiterWithSpaceForOneZippedFile() {
         assertThat(shrinkedList).hasSize(3);
         assertThat(shrinkedList).extracting(LogFile::id).contains("memory", "0", "1");
     }
+
+    @ParameterizedTest
+    @ValueSource(strings = {"/tmp/safe_dir", "safe_dir", "../safe_dir"})
+    void ensureWithinBundleDir(String bundleDirString) throws Exception {
+        final var bundleDir = Path.of(bundleDirString);
+
+        assertThatCode(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "file.zip"))
+                .doesNotThrowAnyException();
+        assertThatCode(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "hello/file.zip"))
+                .doesNotThrowAnyException();
+        assertThatCode(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "hello/world/file.zip"))
+                .doesNotThrowAnyException();
+        assertThatCode(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "..file.zip"))
+                .doesNotThrowAnyException();
+
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "/etc/file.zip"))
+                .isInstanceOf(NotFoundException.class);
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "/etc/hello/../world/../file.zip"))
+                .isInstanceOf(NotFoundException.class);
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "../file.zip"))
+                .isInstanceOf(NotFoundException.class);
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "../../file.zip"))
+                .isInstanceOf(NotFoundException.class);
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "../safe_dir_insecure/file.zip"))
+                .isInstanceOf(NotFoundException.class);
+        assertThatThrownBy(() -> supportBundleService.ensureFileWithinBundleDir(bundleDir, "/safe_dir_insecure/file.zip"))
+                .isInstanceOf(NotFoundException.class);
+    }
 }
