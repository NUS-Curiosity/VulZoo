diff --git a/src/l10n/en.json b/src/l10n/en.json
index 0a8e3bc9..ae076f4a 100644
--- a/src/l10n/en.json
+++ b/src/l10n/en.json
@@ -15,6 +15,8 @@
   "settings.no-devices-detected": "No devices detected",
   "settings.background-throttling": "Sleep hidden windows",
   "settings.background-throttling-disabled": "Allowing hidden windows to remain active will result in higher CPU usage and lower battery life.",
+  "settings.bypass-cors": "Allow extensions to bypass CORS",
+  "settings.bypass-cors-enabled": "Disabling CORS could allow malicious projects or extensions to access any website or device on your network.",
   "menu.new-window": "New Window",
   "menu.learn-more": "Learn more",
   "unload.stay": "Stay",
diff --git a/src/main/bypass-cors.js b/src/main/bypass-cors.js
new file mode 100644
index 00000000..6324b4cc
--- /dev/null
+++ b/src/main/bypass-cors.js
@@ -0,0 +1,18 @@
+import {ipcMain} from 'electron';
+import {get, set} from './store';
+
+const BYPASS_CORS_KEY = 'bypass_cors';
+
+const canBypassCORS = () => !!get(BYPASS_CORS_KEY);
+
+ipcMain.on('bypass-cors/get-is-enabled', (e) => {
+  e.returnValue = canBypassCORS();
+});
+
+ipcMain.handle('bypass-cors/set-is-enabled', (e, enabled) => {
+  set(BYPASS_CORS_KEY, enabled);
+});
+
+export {
+  canBypassCORS
+};
diff --git a/src/main/extensions.js b/src/main/extensions.js
index dc61557a..8005092d 100644
--- a/src/main/extensions.js
+++ b/src/main/extensions.js
@@ -1,17 +1,59 @@
 import {app, protocol} from 'electron';
 import pathUtil from 'path';
 import {staticDir} from './environment';
+import {canBypassCORS} from './bypass-cors';
 
 const extensionDirectory = pathUtil.join(staticDir, 'extensions.turbowarp.org', '/');
 
 app.on('session-created', (session) => {
+  const rootFileURL = new URL(`file://${__dirname}/`).href;
+
+  // We can only use one onBeforeRequest -- calling it again removes the previous listener.
   session.webRequest.onBeforeRequest({
-    urls: ['https://extensions.turbowarp.org/*']
+    urls: ['file://*', 'https://extensions.turbowarp.org/*']
   }, (details, callback) => {
-    const path = new URL(details.url).pathname;
-    callback({
-      redirectURL: `tw-extensions://${path}`
-    });
+    const url = new URL(details.url);
+
+    if (url.protocol === 'file:') {
+      // Prevent file:// URLs from fetching other file:// URLs from outside the app.
+      callback({
+        cancel: !url.href.startsWith(rootFileURL)
+      });
+    } else if (url.origin === 'https://extensions.turbowarp.org') {
+      // Rewrite extensions.turbowarp.org to the offline cache.
+      callback({
+        redirectURL: `tw-extensions://${url.pathname}`
+      });
+    } else {
+      // This should never happen.
+      callback({});
+    }
+  });
+
+  // By default in Electron, file:// URLs bypass CORS. We enforce it ourselves here.
+  session.webRequest.onHeadersReceived((details, callback) => {
+    if (details.resourceType === 'xhr') {
+      const sourceURL = new URL(details.frame.url);
+      const destinationURL = new URL(details.url);
+      if ((destinationURL.protocol === 'http:' || destinationURL.protocol === 'https:') && sourceURL.protocol === 'file:') {
+        if (canBypassCORS()) {
+          callback({
+            responseHeaders: {
+              ...(details.responseHeaders || {}),
+              'access-control-allow-origin': '*'
+            }
+          });
+        } else {
+          const corsHeaders = details.responseHeaders?.['access-control-allow-origin'] || [];
+          const corsHeader = corsHeaders.join(',');
+          callback({
+            cancel: corsHeader !== '*'
+          });
+        }
+        return;
+      }
+    }
+    callback({});
   });
 });
 
diff --git a/src/main/index.js b/src/main/index.js
index 1e178263..86487edf 100644
--- a/src/main/index.js
+++ b/src/main/index.js
@@ -652,37 +652,6 @@ app.on('session-created', (session) => {
       });
     }
   });
-
-  const rootFileURL = new URL(`file://${__dirname}/`).href;
-
-  // Enforce additional restrictions when fetching file:// URIs
-  session.webRequest.onBeforeRequest((details, callback) => {
-    const destinationURL = new URL(details.url);
-    if (destinationURL.protocol === 'file:' && !destinationURL.href.startsWith(rootFileURL)) {
-      return callback({
-        cancel: true
-      });
-    }
-    callback({});
-  });
-
-  // Enforce CORS when a file:// URI fetches something from the broader internet
-  session.webRequest.onHeadersReceived((details, callback) => {
-    if (details.resourceType === 'xhr') {
-      const sourceURL = new URL(details.frame.url);
-      const destinationURL = new URL(details.url);
-      if ((destinationURL.protocol === 'http:' || destinationURL.protocol === 'https:') && sourceURL.protocol === 'file:') {
-        const corsHeaders = details.responseHeaders?.['access-control-allow-origin'] || [];
-        const corsHeader = corsHeaders.join(',');
-        if (corsHeader !== '*') {
-          return callback({
-            cancel: true
-          });
-        }
-      }
-    }
-    callback({});
-  });
 });
 
 app.on('web-contents-created', (event, webContents) => {
diff --git a/src/renderer/desktop-settings/desktop-settings.jsx b/src/renderer/desktop-settings/desktop-settings.jsx
index 22d54f80..5e96cdba 100644
--- a/src/renderer/desktop-settings/desktop-settings.jsx
+++ b/src/renderer/desktop-settings/desktop-settings.jsx
@@ -55,8 +55,8 @@ class DesktopSettings extends React.Component {
       mediaDevicesNeedRestart: false,
 
       isHardwareAccelerationEnabled: ipcRenderer.sendSync('hardware-acceleration/get-is-enabled'),
-
-      isBackgroundThrottlingEnabled: ipcRenderer.sendSync('background-throttling/get-is-enabled')
+      isBackgroundThrottlingEnabled: ipcRenderer.sendSync('background-throttling/get-is-enabled'),
+      canBypassCORS: ipcRenderer.sendSync('bypass-cors/get-is-enabled')
     };
 
     this.handleChangeUpdateCheckerEnabled = this.handleChangeUpdateCheckerEnabled.bind(this);
@@ -65,6 +65,7 @@ class DesktopSettings extends React.Component {
     this.handleSelectedVideoDeviceChanged = this.handleSelectedVideoDeviceChanged.bind(this);
     this.handleChangeHardwareAccelerationEnabled = this.handleChangeHardwareAccelerationEnabled.bind(this);
     this.handleBackgroundThrottlingChanged = this.handleBackgroundThrottlingChanged.bind(this);
+    this.handleBypassCORSChanged = this.handleBypassCORSChanged.bind(this);
     this.handleOpenUserData = this.handleOpenUserData.bind(this);
   }
 
@@ -134,6 +135,14 @@ class DesktopSettings extends React.Component {
     });
   }
 
+  handleBypassCORSChanged (e) {
+    const enabled = e.target.checked;
+    ipcRenderer.invoke('bypass-cors/set-is-enabled', enabled);
+    this.setState({
+      canBypassCORS: enabled
+    });
+  }
+
   handleOpenUserData () {
     ipcRenderer.send('open-user-data');
   }
@@ -231,6 +240,22 @@ class DesktopSettings extends React.Component {
           )}
         </div>
 
+        <div className={styles.option}>
+          <label className={styles.label}>
+            <input
+              type="checkbox"
+              checked={this.state.canBypassCORS}
+              onChange={this.handleBypassCORSChanged}
+            />
+            {getTranslation('settings.bypass-cors')}
+          </label>
+          {this.state.canBypassCORS && (
+            <div className={styles.warning}>
+              {getTranslation('settings.bypass-cors-enabled')}
+            </div>
+          )}
+        </div>
+
         <div className={styles.option}>
           <button onClick={this.handleOpenUserData}>
             {getTranslation('settings.open-user-data')}
