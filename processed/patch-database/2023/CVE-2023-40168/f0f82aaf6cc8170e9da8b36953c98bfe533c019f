diff --git a/src/main/extensions.js b/src/main/extensions.js
index be8dd432..dc61557a 100644
--- a/src/main/extensions.js
+++ b/src/main/extensions.js
@@ -15,15 +15,6 @@ app.on('session-created', (session) => {
   });
 });
 
-protocol.registerSchemesAsPrivileged([
-  {
-    scheme: 'tw-extensions',
-    privileges: {
-      supportFetchAPI: true
-    }
-  }
-]);
-
 app.whenReady().then(() => {
   protocol.registerFileProtocol('tw-extensions', (request, callback) => {
     const pathAndQuery = request.url.substring('tw-extensions://'.length);
diff --git a/src/main/index.js b/src/main/index.js
index e1d66a9a..ea20705b 100644
--- a/src/main/index.js
+++ b/src/main/index.js
@@ -21,6 +21,8 @@ import './detect-arm-translation';
 import {isBackgroundThrottlingEnabled, whenBackgroundThrottlingChanged} from './background-throttling';
 import './extensions';
 import {createAtomicWriteStream} from './atomic-file-write-stream';
+import './protocols';
+import './request-security';
 
 const readFile = util.promisify(fs.readFile);
 const brotliDecompress = util.promisify(zlib.brotliDecompress);
@@ -883,7 +885,7 @@ if (acquiredLock) {
     }
   });
 
-  app.on('ready', () => {
+  app.whenReady().then(() => {
     checkForUpdate();
     autoCreateEditorWindows();
   });
diff --git a/src/main/library-files.js b/src/main/library-files.js
index 5d007950..dcb45fe5 100644
--- a/src/main/library-files.js
+++ b/src/main/library-files.js
@@ -8,15 +8,6 @@ import {staticDir} from './environment';
 const readFile = promisify(fs.readFile);
 const decompress = promisify(brotliDecompress);
 
-protocol.registerSchemesAsPrivileged([
-  {
-    scheme: 'tw-library-files',
-    privileges: {
-      supportFetchAPI: true
-    }
-  }
-]);
-
 const mimeTypes = new Map();
 mimeTypes.set('wav', 'audio/wav');
 mimeTypes.set('svg', 'image/svg+xml');
diff --git a/src/main/protocols.js b/src/main/protocols.js
new file mode 100644
index 00000000..23ede193
--- /dev/null
+++ b/src/main/protocols.js
@@ -0,0 +1,16 @@
+import {protocol} from 'electron';
+
+protocol.registerSchemesAsPrivileged([
+  {
+    scheme: 'tw-extensions',
+    privileges: {
+      supportFetchAPI: true
+    }
+  },
+  {
+    scheme: 'tw-library-files',
+    privileges: {
+      supportFetchAPI: true
+    }
+  }
+]);
diff --git a/src/main/request-security.js b/src/main/request-security.js
new file mode 100644
index 00000000..0471f77c
--- /dev/null
+++ b/src/main/request-security.js
@@ -0,0 +1,37 @@
+import {app} from 'electron';
+
+const isRequestAllowed = (details) => {
+  const url = new URL(details.url);
+  if (url.protocol === 'file:') {
+    // Requests to files must be inside the application
+    return url.pathname.startsWith(__dirname);
+  }
+
+  if (details.resourceType !== 'xhr') {
+    // Immune to CORS even in standard browsers
+    return true;
+  }
+
+  if (url.protocol !== 'http:' && url.protocol !== 'https:') {
+    // Special protocols are immune to CORS
+    return true;
+  }
+
+  const allowOriginHeader = details.responseHeaders['access-control-allow-origin'];
+  if (!Array.isArray(allowOriginHeader)) {
+    // No header, not allowed
+    return false;
+  }
+
+  // Header must be set to "*"
+  // We don't have a real Origin that we can check
+  return allowOriginHeader.join(',') === '*';
+};
+
+app.on('session-created', (session) => {
+  session.webRequest.onHeadersReceived((details, callback) => {
+    callback({
+      cancel: !isRequestAllowed(details)
+    });
+  });
+});
