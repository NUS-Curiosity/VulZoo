diff --git a/lib/Support/BigIntSupport.cpp b/lib/Support/BigIntSupport.cpp
index b4fac6586fd..2741a145998 100644
--- a/lib/Support/BigIntSupport.cpp
+++ b/lib/Support/BigIntSupport.cpp
@@ -192,7 +192,11 @@ double toDouble(ImmutableBigIntRef src) {
   const uint32_t numBits = src.numDigits * BigIntDigitSizeInBits;
   llvh::APInt tmp(numBits, llvh::makeArrayRef(src.digits, src.numDigits));
   constexpr bool kSigned = true;
-  return tmp.roundToDouble(kSigned);
+  double val = tmp.roundToDouble(kSigned);
+  // TODO(T142034196): APInt::roundToDouble doesn't implement proper conversion
+  // when the number has more than 2 digits; we need to implement this
+  // conversion.
+  return std::isnan(val) ? std::numeric_limits<double>::quiet_NaN() : val;
 }
 
 namespace {
diff --git a/lib/VM/JSLib/Array.cpp b/lib/VM/JSLib/Array.cpp
index 2c6676d5abf..c3433160206 100644
--- a/lib/VM/JSLib/Array.cpp
+++ b/lib/VM/JSLib/Array.cpp
@@ -1093,10 +1093,6 @@ class StandardSortModel : public SortModel {
     JSObject::getComputedPrimitiveDescriptor(
         obj_, runtime_, aHandle_, aDescObjHandle_, aTmpNameStorage_, aDesc);
 
-    ComputedPropertyDescriptor bDesc;
-    JSObject::getComputedPrimitiveDescriptor(
-        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);
-
     if (aDescObjHandle_) {
       if (LLVM_LIKELY(!aDesc.flags.proxyObject)) {
         auto res = JSObject::getComputedPropertyValue_RJS(
@@ -1135,6 +1131,11 @@ class StandardSortModel : public SortModel {
         }
       }
     }
+
+    ComputedPropertyDescriptor bDesc;
+    JSObject::getComputedPrimitiveDescriptor(
+        obj_, runtime_, bHandle_, bDescObjHandle_, bTmpNameStorage_, bDesc);
+
     if (bDescObjHandle_) {
       if (LLVM_LIKELY(!bDesc.flags.proxyObject)) {
         auto res = JSObject::getComputedPropertyValue_RJS(
diff --git a/lib/VM/Operations.cpp b/lib/VM/Operations.cpp
index 21b422e3fa9..a9e5f780062 100644
--- a/lib/VM/Operations.cpp
+++ b/lib/VM/Operations.cpp
@@ -1272,8 +1272,8 @@ addOp_RJS(Runtime &runtime, Handle<> xHandle, Handle<> yHandle) {
 
   return BigIntPrimitive::add(
       runtime,
-      runtime.makeHandle(resX->getBigInt()),
-      runtime.makeHandle(resY->getBigInt()));
+      runtime.makeHandle(xPrim->getBigInt()),
+      runtime.makeHandle(yPrim->getBigInt()));
 }
 
 static const size_t MIN_RADIX = 2;
diff --git a/test/hermes/regress-bigint-add-gc.js b/test/hermes/regress-bigint-add-gc.js
new file mode 100644
index 00000000000..5e9588b3a3f
--- /dev/null
+++ b/test/hermes/regress-bigint-add-gc.js
@@ -0,0 +1,21 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+// RUN: %hermes -non-strict -O %s | %FileCheck %s
+// RUN: %hermes -non-strict -O0 %s | %FileCheck %s
+
+const obj = {
+    toString: () => {
+        gc();
+        return 0n;
+    }
+};
+// trigger after obj.toString called and before addOp complete
+let trigger_point = 1n + obj;
+print(trigger_point);
+
+// CHECK: 1
diff --git a/test/hermes/regress-bigint-to-double-nan.js b/test/hermes/regress-bigint-to-double-nan.js
new file mode 100644
index 00000000000..d306b8d8e91
--- /dev/null
+++ b/test/hermes/regress-bigint-to-double-nan.js
@@ -0,0 +1,13 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+// RUN: %hermes -non-strict -O %s | %FileCheck %s
+// RUN: %hermes -non-strict -O0 %s | %FileCheck %s
+
+// TODO: fix BigInt to number conversion (it should never result in NaN).
+print(Number(0xffffffffffffffffffffffffffffffffn));
+// CHECK: NaN
diff --git a/test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js b/test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js
new file mode 100644
index 00000000000..1f6dfee9d38
--- /dev/null
+++ b/test/hermes/regress-invalidated-descriptor-std-sort-model-swap.js
@@ -0,0 +1,20 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+// RUN: %hermes -O %s
+
+var a = [0,1]
+a.sort(function(x,y){
+  a.__defineGetter__(1, function(){
+    delete a[0];
+    return 1;
+  });
+  a.__defineGetter__(0, function(){
+    return 1;
+  });
+  return -1;
+})
