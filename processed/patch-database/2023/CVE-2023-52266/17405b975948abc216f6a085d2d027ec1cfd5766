diff --git a/Makefile b/Makefile
index 9a312f5..79116e0 100644
--- a/Makefile
+++ b/Makefile
@@ -5,8 +5,8 @@ CXXFLAGS += -g -Wall
 LDFLAGS += -pthread
 
 ifdef ACOV
-	CXXFLAGS += -fprofile-arcs -ftest-coverage
-	LDFLAGS += -lgcov --coverage
+	CXXFLAGS += -fprofile-arcs -ftest-coverage -fsanitize=address
+	LDFLAGS += -lgcov --coverage -fsanitize=address
 endif
 
 MULTIPART_PARSER_INC_PATH=-I deps/multipart-parser-c/
diff --git a/src/epoll_socket.cpp b/src/epoll_socket.cpp
index 635067c..0c75897 100644
--- a/src/epoll_socket.cpp
+++ b/src/epoll_socket.cpp
@@ -228,11 +228,6 @@ int EpollSocket::handle_accept_event(int &epollfd, epoll_event &event, EpollSock
 void read_func(void *data) {
     TaskData *td = (TaskData *) data;
     td->es->handle_readable_event(td->event);
-
-    EpollContext *hc = (EpollContext *) td->event.data.ptr;
-    if (hc != NULL) {
-        hc->_ctx_status = CONTEXT_READ_OVER;
-    }
     delete td;
 }
 
@@ -248,6 +243,9 @@ int EpollSocket::handle_readable_event(epoll_event &event) {
     if (ret == READ_CLOSE) {
         return close_and_release(event);
     }
+    if (epoll_context != NULL) {
+        epoll_context->_ctx_status = CONTEXT_READ_OVER;
+    }
 
     if (ret == READ_CONTINUE) {
         event.events = EPOLLIN | EPOLLONESHOT;
diff --git a/src/sim_parser.cpp b/src/sim_parser.cpp
index 105db3a..faeba33 100644
--- a/src/sim_parser.cpp
+++ b/src/sim_parser.cpp
@@ -577,7 +577,7 @@ int Request::parse_request(const char *read_buffer, int read_size) {
         LOG_INFO("TOO BIG REQUEST WE WILL REFUSE IT! MAX_REQ_SIZE:%d", MAX_REQ_SIZE);
         return -1;
     }
-    LOG_DEBUG("read from client: size:%d, content:%s", read_size, read_buffer);
+    LOG_DEBUG("read from client: size:%d, content:%.4096s", read_size, read_buffer);
     ssize_t nparsed = http_parser_execute(&_parser, &_settings, read_buffer, read_size);
     if (nparsed != read_size) {
         std::string err_msg = "unkonw";
diff --git a/test/issue38/poc.py b/test/issue38/poc.py
new file mode 100644
index 0000000..b299268
--- /dev/null
+++ b/test/issue38/poc.py
@@ -0,0 +1,9 @@
+#!/usr/bin/env python3
+
+import socket
+
+sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+sock.connect(("localhost", 8080))
+sock.send(b"GET"*5000+b" /hello"*5000+b" HTTP/1.1\r\nHost:localhost:8080\r\n\r\n")
+response = sock.recv(4096)
+sock.close()
