diff --git a/packages/qwik/src/core/render/ssr/render-ssr.ts b/packages/qwik/src/core/render/ssr/render-ssr.ts
index 2234d12a31d..bca29775968 100644
--- a/packages/qwik/src/core/render/ssr/render-ssr.ts
+++ b/packages/qwik/src/core/render/ssr/render-ssr.ts
@@ -544,6 +544,10 @@ const renderNode = (
           classStr = attrValue;
         } else if (attrName === 'value' && tagName === 'textarea') {
           htmlStr = escapeHtml(attrValue);
+        } else if (isSSRUnsafeAttr(attrName)) {
+          if (qDev) {
+            logError('Attribute value is unsafe for SSR');
+          }
         } else {
           openingElement +=
             ' ' + (value === '' ? attrName : attrName + '="' + escapeAttr(attrValue) + '"');
@@ -631,7 +635,7 @@ This goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html
     }
 
     if (classStr) {
-      openingElement += ' class="' + classStr + '"';
+      openingElement += ' class="' + escapeAttr(classStr) + '"';
     }
 
     if (listeners.length > 0) {
@@ -1073,6 +1077,12 @@ const escapeAttr = (s: string) => {
   });
 };
 
+// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
+const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/; // eslint-disable-line no-control-regex
+export const isSSRUnsafeAttr = (name: string): boolean => {
+  return unsafeAttrCharRE.test(name);
+};
+
 const listenersNeedId = (listeners: Listener[]) => {
   return listeners.some((l) => l[1].$captureRef$ && l[1].$captureRef$.length > 0);
 };
diff --git a/packages/qwik/src/core/render/ssr/render-ssr.unit.tsx b/packages/qwik/src/core/render/ssr/render-ssr.unit.tsx
index 622e8dc5be9..62105eb20f8 100644
--- a/packages/qwik/src/core/render/ssr/render-ssr.unit.tsx
+++ b/packages/qwik/src/core/render/ssr/render-ssr.unit.tsx
@@ -1262,6 +1262,37 @@ renderSSRSuite('null component', async () => {
     `<html q:container="paused" q:version="dev" q:render="ssr-dev"><!--qv q:id=0 q:key=sX:--><!--/qv--></html>`
   );
 });
+
+renderSSRSuite('cleanse attribute name', async () => {
+  const o = {
+    '"><script>alert("à² ~à² ")</script>': 'xss',
+  };
+  await testSSR(
+    <body {...o}></body>,
+    '<html q:container="paused" q:version="dev" q:render="ssr-dev"><body></body></html>'
+  );
+});
+
+renderSSRSuite('cleanse class attribute', async () => {
+  const o = {
+    class: '"><script>alert("à² ~à² ")</script>',
+  };
+  await testSSR(
+    <body {...o}></body>,
+    '<html q:container="paused" q:version="dev" q:render="ssr-dev"><body class="&quot;><script>alert(&quot;à² ~à² &quot;)</script>"></body></html>'
+  );
+});
+
+renderSSRSuite('class emoji valid', async () => {
+  const o = {
+    class: 'packageðŸ“¦',
+  };
+  await testSSR(
+    <body {...o}></body>,
+    '<html q:container="paused" q:version="dev" q:render="ssr-dev"><body class="packageðŸ“¦"></body></html>'
+  );
+});
+
 // TODO
 // Merge props on host
 // - host events
