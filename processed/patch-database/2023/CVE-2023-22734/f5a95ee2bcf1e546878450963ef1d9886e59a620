diff --git a/changelog/_unreleased/2022-09-01-fix-newsletter-route-does-not-handle-double-optin-setting-correctly.md b/changelog/_unreleased/2022-09-01-fix-newsletter-route-does-not-handle-double-optin-setting-correctly.md
new file mode 100644
index 00000000000..7517fa12149
--- /dev/null
+++ b/changelog/_unreleased/2022-09-01-fix-newsletter-route-does-not-handle-double-optin-setting-correctly.md
@@ -0,0 +1,12 @@
+---
+title: Fix newsletter route does not handle double optin setting correctly
+issue: NEXT-22891
+author: Michel Bade
+author_email: m.bade@shopware.com
+---
+# API
+* Changed option selection behavior in `src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php` to remove client side decision on newsletter double opt-in
+___
+# Storefront
+* Added missing snippets for newsletter double opt-in in `src/Storefront/Controller/NewsletterController.php`
+* Changed client side decision on newsletter double opt-in in `src/Storefront/Controller/NewsletterController.php`
diff --git a/phpstan-baseline.neon b/phpstan-baseline.neon
index f560aa0e257..825adef34a9 100644
--- a/phpstan-baseline.neon
+++ b/phpstan-baseline.neon
@@ -25361,16 +25361,6 @@ parameters:
 			count: 1
 			path: src/Storefront/Controller/FormController.php
 
-		-
-			message: "#^Cannot call method getCity\\(\\) on Shopware\\\\Core\\\\Checkout\\\\Customer\\\\Aggregate\\\\CustomerAddress\\\\CustomerAddressEntity\\|null\\.$#"
-			count: 1
-			path: src/Storefront/Controller/NewsletterController.php
-
-		-
-			message: "#^Cannot call method getZipCode\\(\\) on Shopware\\\\Core\\\\Checkout\\\\Customer\\\\Aggregate\\\\CustomerAddress\\\\CustomerAddressEntity\\|null\\.$#"
-			count: 1
-			path: src/Storefront/Controller/NewsletterController.php
-
 		-
 			message: "#^Method Shopware\\\\Storefront\\\\Controller\\\\ScriptController\\:\\:renderStorefront\\(\\) has parameter \\$parameters with no value type specified in iterable type array\\.$#"
 			count: 1
@@ -25971,26 +25961,6 @@ parameters:
 			count: 1
 			path: src/Storefront/Test/Controller/CookieControllerTest.php
 
-		-
-			message: "#^Cannot call method getCustomer\\(\\) on Shopware\\\\Core\\\\System\\\\SalesChannel\\\\SalesChannelContext\\|null\\.$#"
-			count: 1
-			path: src/Storefront/Test/Controller/NewsletterControllerTest.php
-
-		-
-			message: "#^Parameter \\#3 \\$message of static method PHPUnit\\\\Framework\\\\Assert\\:\\:assertEquals\\(\\) expects string, string\\|null given\\.$#"
-			count: 2
-			path: src/Storefront/Test/Controller/NewsletterControllerTest.php
-
-		-
-			message: "#^Parameter \\#3 \\$message of static method PHPUnit\\\\Framework\\\\Assert\\:\\:assertSame\\(\\) expects string, string\\|false given\\.$#"
-			count: 4
-			path: src/Storefront/Test/Controller/NewsletterControllerTest.php
-
-		-
-			message: "#^Property Shopware\\\\Storefront\\\\Test\\\\Controller\\\\NewsletterControllerTest\\:\\:\\$customerData type has no value type specified in iterable type array\\.$#"
-			count: 1
-			path: src/Storefront/Test/Controller/NewsletterControllerTest.php
-
 		-
 			message: "#^Cannot call method getCustomer\\(\\) on Shopware\\\\Core\\\\System\\\\SalesChannel\\\\SalesChannelContext\\|null\\.$#"
 			count: 1
diff --git a/src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php b/src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php
index 034c1094571..34e76227f6e 100644
--- a/src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php
+++ b/src/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php
@@ -175,7 +175,7 @@ public function subscribe(RequestDataBag $dataBag, SalesChannelContext $context,
 
         $recipient = $this->getNewsletterRecipient('email', $data['email'], $context->getContext());
 
-        if ($data['status'] === self::STATUS_DIRECT) {
+        if (!$this->systemConfigService->getBool('core.newsletter.doubleOptIn')) {
             $event = new NewsletterConfirmEvent($context->getContext(), $recipient, $context->getSalesChannel()->getId());
             $this->eventDispatcher->dispatch($event);
 
@@ -262,8 +262,8 @@ private function getNewsletterRecipientId(string $email, SalesChannelContext $co
     private function getOptionSelection(): array
     {
         return [
-            self::OPTION_DIRECT => self::STATUS_DIRECT,
-            self::OPTION_SUBSCRIBE => self::STATUS_NOT_SET,
+            self::OPTION_DIRECT => $this->systemConfigService->getBool('core.newsletter.doubleOptIn') ? self::STATUS_NOT_SET : self::STATUS_DIRECT,
+            self::OPTION_SUBSCRIBE => $this->systemConfigService->getBool('core.newsletter.doubleOptIn') ? self::STATUS_NOT_SET : self::STATUS_DIRECT,
             self::OPTION_CONFIRM_SUBSCRIBE => self::STATUS_OPT_IN,
             self::OPTION_UNSUBSCRIBE => self::STATUS_OPT_OUT,
         ];
diff --git a/src/Storefront/Controller/NewsletterController.php b/src/Storefront/Controller/NewsletterController.php
index 46ccfc5f79a..194ba1f7609 100644
--- a/src/Storefront/Controller/NewsletterController.php
+++ b/src/Storefront/Controller/NewsletterController.php
@@ -14,6 +14,7 @@
 use Shopware\Core\Framework\Validation\DataBag\QueryDataBag;
 use Shopware\Core\Framework\Validation\DataBag\RequestDataBag;
 use Shopware\Core\System\SalesChannel\SalesChannelContext;
+use Shopware\Core\System\SystemConfig\SystemConfigService;
 use Shopware\Storefront\Framework\Routing\RequestTransformer;
 use Shopware\Storefront\Page\Newsletter\Subscribe\NewsletterSubscribePageLoader;
 use Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader;
@@ -61,6 +62,8 @@ class NewsletterController extends StorefrontController
 
     private NewsletterAccountPageletLoader $newsletterAccountPageletLoader;
 
+    private SystemConfigService $systemConfigService;
+
     /**
      * @internal
      */
@@ -70,7 +73,8 @@ public function __construct(
         AbstractNewsletterSubscribeRoute $newsletterSubscribeRoute,
         AbstractNewsletterConfirmRoute $newsletterConfirmRoute,
         AbstractNewsletterUnsubscribeRoute $newsletterUnsubscribeRoute,
-        NewsletterAccountPageletLoader $newsletterAccountPageletLoader
+        NewsletterAccountPageletLoader $newsletterAccountPageletLoader,
+        SystemConfigService $systemConfigService
     ) {
         $this->newsletterConfirmRegisterPageLoader = $newsletterConfirmRegisterPageLoader;
         /* @deprecated tag:v6.5.0 - remove next line */
@@ -81,6 +85,7 @@ public function __construct(
         /* @deprecated tag:v6.5.0 - remove next line */
         $this->newsletterUnsubscribeRoute = $newsletterUnsubscribeRoute;
         $this->newsletterAccountPageletLoader = $newsletterAccountPageletLoader;
+        $this->systemConfigService = $systemConfigService;
     }
 
     /**
@@ -118,7 +123,7 @@ public function subscribeCustomer(Request $request, RequestDataBag $dataBag, Sal
                 'newsletterAccountPagelet' => $pagelet,
             ]);
         }
-        $subscribed = $request->get('option', false) === 'direct';
+        $subscribed = $request->get('option', false) === 'subscribe' || $request->get('option', false) === 'direct';
 
         if (!$subscribed) {
             $dataBag->set('option', 'unsubscribe');
@@ -139,7 +144,11 @@ public function subscribeCustomer(Request $request, RequestDataBag $dataBag, Sal
                 $this->setNewsletterFlag($customer, true, $context);
 
                 $success = true;
-                $messages[] = ['type' => 'success', 'text' => $this->trans('newsletter.subscriptionConfirmationSuccess')];
+                if ($this->systemConfigService->getBool('core.newsletter.doubleOptIn')) {
+                    $messages[] = ['type' => 'info', 'text' => $this->trans('newsletter.subscriptionConfirmationNeeded')];
+                } else {
+                    $messages[] = ['type' => 'success', 'text' => $this->trans('newsletter.subscriptionConfirmationSuccess')];
+                }
             } catch (\Exception $exception) {
                 $success = false;
                 $messages[] = ['type' => 'danger', 'text' => $this->trans('newsletter.subscriptionConfirmationFailed')];
@@ -183,8 +192,14 @@ private function hydrateFromCustomer(RequestDataBag $dataBag, CustomerEntity $cu
         $dataBag->set('title', $customer->getTitle());
         $dataBag->set('firstName', $customer->getFirstName());
         $dataBag->set('lastName', $customer->getLastName());
-        $dataBag->set('zipCode', $customer->getDefaultShippingAddress()->getZipCode());
-        $dataBag->set('city', $customer->getDefaultShippingAddress()->getCity());
+        $dataBag->set(
+            'zipCode',
+            ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getZipCode() : null)
+        );
+        $dataBag->set(
+            'city',
+            ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getCity() : null)
+        );
         $dataBag->set(
             'street',
             ($customer->getDefaultShippingAddress() ? $customer->getDefaultShippingAddress()->getStreet() : null)
diff --git a/src/Storefront/DependencyInjection/controller.xml b/src/Storefront/DependencyInjection/controller.xml
index c5935cf9742..42cfa64a4be 100644
--- a/src/Storefront/DependencyInjection/controller.xml
+++ b/src/Storefront/DependencyInjection/controller.xml
@@ -231,6 +231,7 @@
             <argument type="service" id="Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute"/>
             <argument type="service" id="Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute"/>
             <argument type="service" id="Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader"/>
+            <argument type="service" id="Shopware\Core\System\SystemConfig\SystemConfigService"/>
 
             <call method="setContainer">
                 <argument type="service" id="service_container"/>
diff --git a/src/Storefront/Resources/snippet/de_DE/storefront.de-DE.json b/src/Storefront/Resources/snippet/de_DE/storefront.de-DE.json
index 0640ff5be15..6e640d15a3b 100644
--- a/src/Storefront/Resources/snippet/de_DE/storefront.de-DE.json
+++ b/src/Storefront/Resources/snippet/de_DE/storefront.de-DE.json
@@ -470,6 +470,7 @@
     "subscriptionPersistedInfo": "Sollten Sie keine Mail erhalten haben, wiederholen Sie den Vorgang oder wenden Sie sich an den Support.",
     "subscriptionRevokeSuccess": "Sie haben sich erfolgreich vom Newsletter abgemeldet.",
     "subscriptionConfirmationSuccess": "Ihr Newsletter-Abonnement wurde erfolgreich registriert.",
+    "subscriptionConfirmationNeeded": "Wir haben Ihnen eine Bestätigungsmail geschickt. Bitte prüfen Sie Ihr E-Mail-Postfach und klicken Sie auf den enthaltenen Link, um ihr Newsletter-Abonnement abzuschließen.",
     "subscriptionConfirmationFailed": "Bei Ihrer Newsletter-Anmeldung ist etwas schief gelaufen. Bitte wenden Sie sich an den Support.",
     "subscriptionCompleted": "Vielen Dank. Wir haben Ihre E-Mail-Adresse eingetragen.",
     "labelActionSelect": "Aktion",
diff --git a/src/Storefront/Resources/snippet/en_GB/storefront.en-GB.json b/src/Storefront/Resources/snippet/en_GB/storefront.en-GB.json
index f0b232facfb..7d8e712903b 100644
--- a/src/Storefront/Resources/snippet/en_GB/storefront.en-GB.json
+++ b/src/Storefront/Resources/snippet/en_GB/storefront.en-GB.json
@@ -470,6 +470,7 @@
     "subscriptionPersistedInfo": "If you did not received an email, please repeat the process or contact our support team.",
     "subscriptionRevokeSuccess": "You have unsubscribed from the newsletter.",
     "subscriptionConfirmationSuccess": "You have subscribed to the newsletter.",
+    "subscriptionConfirmationNeeded": "We have sent a confirmation email containing an activation link. Please check your inbox and click the link to complete your newsletter subscription.",
     "subscriptionConfirmationFailed": "Newsletter subscription did not work properly, please contact our support team.",
     "subscriptionCompleted": "Thank you! We have registered your address.",
     "labelActionSelect": "Action",
diff --git a/src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig b/src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig
index 544afb6e720..525de518203 100644
--- a/src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig
+++ b/src/Storefront/Resources/views/storefront/page/account/newsletter.html.twig
@@ -65,7 +65,7 @@
                                id="newsletterRegister"
                                name="option"
                                autocomplete="off"
-                               value="{% if newsletterAccountPagelet.newsletterDoi %}{{ subscribe }}{% else %}{{ direct }}{% endif %}"
+                               value="subscribe"
                                {% if status %}checked="checked"{% endif %}>
                     {% endblock %}
 
diff --git a/tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js b/tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js
index c77226457f6..c23d4e0aed1 100644
--- a/tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js
+++ b/tests/e2e/cypress/e2e/scenarios/39.newsletter-subscription.cy.js
@@ -42,7 +42,7 @@ describe('Storefront profile settings', () => {
         });
         cy.get('label[for="newsletterRegister"]').click();
         cy.wait('@checkNewsletter').its('response.statusCode').should('equal', 200);
-        cy.contains('You have subscribed to the newsletter.').should('exist');
+        cy.contains('We have sent a confirmation email containing an activation link. Please check your inbox and click the link to complete your newsletter subscription.').should('exist');
 
         // Verify the subscription from the newsletter recipients
         cy.visit(`${Cypress.env('admin')}#/sw/newsletter/recipient/index`);
diff --git a/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php b/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php
index 6ca7786a6ff..3107aab766d 100644
--- a/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php
+++ b/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeEmailRouteTest.php
@@ -9,8 +9,8 @@
 use Shopware\Core\Defaults;
 use Shopware\Core\Framework\Context;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryInterface;
+use Shopware\Core\Framework\Test\IdsCollection;
 use Shopware\Core\Framework\Test\TestCaseBase\IntegrationTestBehaviour;
-use Shopware\Core\Framework\Test\TestDataCollection;
 use Shopware\Core\Framework\Uuid\Uuid;
 use Shopware\Core\System\SystemConfig\SystemConfigService;
 use Shopware\Core\Test\TestDefaults;
@@ -18,6 +18,8 @@
 
 /**
  * @internal
+ *
+ * @covers \Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute
  */
 class ChangeEmailRouteTest extends TestCase
 {
@@ -26,13 +28,13 @@ class ChangeEmailRouteTest extends TestCase
 
     private KernelBrowser $browser;
 
-    private TestDataCollection $ids;
+    private IdsCollection $ids;
 
     private EntityRepositoryInterface $customerRepository;
 
     protected function setUp(): void
     {
-        $this->ids = new TestDataCollection();
+        $this->ids = new IdsCollection();
 
         $this->browser = $this->createCustomSalesChannelBrowser([
             'id' => $this->ids->create('sales-channel'),
@@ -56,6 +58,10 @@ protected function setUp(): void
         $response = json_decode((string) $this->browser->getResponse()->getContent(), true);
 
         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);
+
+        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        static::assertNotNull($systemConfig);
+        $systemConfig->set('core.newsletter.doubleOptIn', false);
     }
 
     public function testEmptyRequest(): void
diff --git a/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php b/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php
index 87e525b0d57..cc531889902 100644
--- a/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php
+++ b/tests/integration/php/Core/Checkout/Customer/SalesChannel/ChangeProfileRouteTest.php
@@ -15,6 +15,7 @@
 use Shopware\Core\Framework\Test\TestCaseBase\IntegrationTestBehaviour;
 use Shopware\Core\Framework\Test\TestDataCollection;
 use Shopware\Core\Framework\Uuid\Uuid;
+use Shopware\Core\System\SystemConfig\SystemConfigService;
 use Shopware\Core\Test\TestDefaults;
 
 /**
@@ -73,6 +74,10 @@ protected function setUp(): void
         $response = json_decode((string) $this->browser->getResponse()->getContent(), true);
 
         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);
+
+        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        static::assertNotNull($systemConfig);
+        $systemConfig->set('core.newsletter.doubleOptIn', false);
     }
 
     public function testEmptyRequest(): void
diff --git a/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php b/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
index 6d8928421a9..c902f648ff8 100644
--- a/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
+++ b/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
@@ -21,6 +21,7 @@
 /**
  * @internal
  * @group store-api
+ * @covers \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute
  */
 class NewsletterSubscribeRouteTest extends TestCase
 {
@@ -33,6 +34,8 @@ class NewsletterSubscribeRouteTest extends TestCase
 
     private string $salesChannelId;
 
+    private SystemConfigService $systemConfig;
+
     protected function setUp(): void
     {
         $this->ids = new TestDataCollection();
@@ -42,6 +45,10 @@ protected function setUp(): void
         $this->browser = $this->createCustomSalesChannelBrowser([
             'id' => $this->ids->create('sales-channel'),
         ]);
+
+        $this->systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        static::assertNotNull($this->systemConfig);
+        $this->systemConfig->set('core.newsletter.doubleOptIn', false);
     }
 
     public function testSubscribeWithoutFields(): void
@@ -90,6 +97,8 @@ public function testSubscribeWithInvalidStorefrontUrl(): void
 
     public function testResubscribeAfterUnsubscribe(): void
     {
+        $this->systemConfig->set('core.newsletter.doubleOptIn', true);
+
         $connection = $this->getContainer()->get(Connection::class);
         $newsletterRecipientRepository = $this->getContainer()->get('newsletter_recipient.repository');
 
@@ -205,11 +214,10 @@ public function testSubscribeIfAlreadyRegistered(): void
 
     public function testSubscribeChangedConfirmUrl(): void
     {
-        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        $this->systemConfig->set('core.newsletter.doubleOptIn', true);
 
         try {
-            $systemConfig->set('core.newsletter.doubleOptIn', true);
-            $systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');
+            $this->systemConfig->set('core.newsletter.subscribeUrl', '/custom-newsletter/confirm/%%HASHEDEMAIL%%/%%SUBSCRIBEHASH%%');
 
             /** @var EventDispatcherInterface $dispatcher */
             $dispatcher = $this->getContainer()->get('event_dispatcher');
@@ -248,19 +256,17 @@ static function (NewsletterRegisterEvent $event) use (&$caughtEvent): void {
             static::assertStringStartsWith('http://localhost/custom-newsletter/confirm/', $caughtEvent->getUrl());
             static::assertStringEndsWith('?specialParam=false', $caughtEvent->getUrl());
         } finally {
-            $systemConfig->set('core.newsletter.doubleOptIn', false);
-            $systemConfig->set('core.newsletter.subscribeUrl', null);
+            $this->systemConfig->set('core.newsletter.subscribeUrl', null);
         }
     }
 
     public function testSubscribeChangedConfirmDomain(): void
     {
         Feature::skipTestIfInActive('FEATURE_NEXT_16200', $this);
-
-        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        $this->systemConfig->set('core.newsletter.doubleOptIn', true);
 
         try {
-            $systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');
+            $this->systemConfig->set('core.newsletter.doubleOptInDomain', 'http://test.test');
 
             /** @var EventDispatcherInterface $dispatcher */
             $dispatcher = $this->getContainer()->get('event_dispatcher');
@@ -289,7 +295,7 @@ static function (NewsletterRegisterEvent $event) use (&$caughtEvent): void {
             static::assertInstanceOf(NewsletterRegisterEvent::class, $caughtEvent);
             static::assertStringStartsWith('http://test.test/newsletter-subscribe?em=', $caughtEvent->getUrl());
         } finally {
-            $systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);
+            $this->systemConfig->set('core.newsletter.doubleOptInDomain', null, $this->salesChannelId);
         }
     }
 
diff --git a/src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php b/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php
similarity index 80%
rename from src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php
rename to tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php
index 6c7dded17d9..eb6194ce116 100644
--- a/src/Core/Content/Test/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php
+++ b/tests/integration/php/Core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRouteTest.php
@@ -1,19 +1,21 @@
 <?php declare(strict_types=1);
 
-namespace Shopware\Core\Content\Test\Newsletter\SalesChannel;
+namespace Shopware\Tests\Integration\Core\Content\Newsletter\SalesChannel;
 
 use Doctrine\DBAL\Connection;
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Content\Newsletter\Event\NewsletterUnsubscribeEvent;
+use Shopware\Core\Framework\Test\IdsCollection;
 use Shopware\Core\Framework\Test\TestCaseBase\IntegrationTestBehaviour;
 use Shopware\Core\Framework\Test\TestCaseBase\SalesChannelApiTestBehaviour;
 use Shopware\Core\Framework\Test\TestCaseHelper\CallableClass;
-use Shopware\Core\Framework\Test\TestDataCollection;
+use Shopware\Core\System\SystemConfig\SystemConfigService;
 use Symfony\Bundle\FrameworkBundle\KernelBrowser;
 
 /**
  * @internal
  * @group store-api
+ * @covers \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute
  */
 class NewsletterUnsubscribeRouteTest extends TestCase
 {
@@ -22,15 +24,19 @@ class NewsletterUnsubscribeRouteTest extends TestCase
 
     private KernelBrowser $browser;
 
-    private TestDataCollection $ids;
+    private IdsCollection $ids;
 
     protected function setUp(): void
     {
-        $this->ids = new TestDataCollection();
+        $this->ids = new IdsCollection();
 
         $this->browser = $this->createCustomSalesChannelBrowser([
             'id' => $this->ids->create('sales-channel'),
         ]);
+
+        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        static::assertNotNull($systemConfig);
+        $systemConfig->set('core.newsletter.doubleOptIn', false);
     }
 
     public function testUnsubscribe(): void
diff --git a/src/Storefront/Test/Controller/NewsletterControllerTest.php b/tests/integration/php/Storefront/Controller/NewsletterControllerTest.php
similarity index 80%
rename from src/Storefront/Test/Controller/NewsletterControllerTest.php
rename to tests/integration/php/Storefront/Controller/NewsletterControllerTest.php
index 7b1f567c519..b11ce4a8837 100644
--- a/src/Storefront/Test/Controller/NewsletterControllerTest.php
+++ b/tests/integration/php/Storefront/Controller/NewsletterControllerTest.php
@@ -1,6 +1,6 @@
 <?php declare(strict_types=1);
 
-namespace Shopware\Storefront\Test\Controller;
+namespace Shopware\Tests\Integration\Storefront\Controller;
 
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Checkout\Customer\CustomerEntity;
@@ -8,28 +8,41 @@
 use Shopware\Core\Framework\Context;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\EqualsFilter;
-use Shopware\Core\Framework\Feature;
 use Shopware\Core\Framework\Test\TestCaseBase\KernelLifecycleManager;
 use Shopware\Core\Framework\Test\TestCaseBase\SalesChannelFunctionalTestBehaviour;
 use Shopware\Core\Framework\Uuid\Uuid;
+use Shopware\Core\System\SystemConfig\SystemConfigService;
 use Shopware\Core\Test\TestDefaults;
 use Shopware\Storefront\Framework\Routing\StorefrontResponse;
+use Shopware\Storefront\Test\Controller\StorefrontControllerTestBehaviour;
 use Symfony\Bundle\FrameworkBundle\KernelBrowser;
 use Symfony\Component\HttpFoundation\Response;
 
 /**
  * @internal
+ * @covers \Shopware\Storefront\Controller\NewsletterController
  */
 class NewsletterControllerTest extends TestCase
 {
     use SalesChannelFunctionalTestBehaviour;
     use StorefrontControllerTestBehaviour;
 
+    /**
+     * @var array<mixed>
+     */
     private array $customerData = [];
 
+    private SystemConfigService $systemConfig;
+
+    public function setUp(): void
+    {
+        $this->systemConfig = $this->getContainer()->get(SystemConfigService::class);
+        static::assertNotNull($this->systemConfig);
+        $this->systemConfig->set('core.newsletter.doubleOptIn', false);
+    }
+
     public function testRegisterNewsletterForCustomerDirect(): void
     {
-        Feature::skipTestIfInActive('FEATURE_NEXT_14001', $this);
         $browser = $this->login();
         $data = [
             'option' => 'direct',
@@ -43,7 +56,9 @@ public function testRegisterNewsletterForCustomerDirect(): void
 
         $response = $browser->getResponse();
 
-        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());
+        $content = $response->getContent();
+        static::assertIsString($content);
+        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);
 
         static::assertInstanceOf(StorefrontResponse::class, $response);
         static::assertSame(200, $response->getStatusCode());
@@ -54,14 +69,17 @@ public function testRegisterNewsletterForCustomerDirect(): void
         $criteria->addFilter(new EqualsFilter('email', 'nltest@example.com'));
         /** @var NewsletterRecipientEntity $recipientEntry */
         $recipientEntry = $repo->search($criteria, Context::createDefaultContext())->first();
+        $status = $recipientEntry->getStatus();
 
-        static::assertEquals('direct', $recipientEntry->getStatus(), $recipientEntry->getStatus());
+        static::assertIsString($status);
+        static::assertEquals('direct', $status);
         $this->validateRecipientData($recipientEntry);
     }
 
     public function testRegisterNewsletterForCustomerDoi(): void
     {
-        Feature::skipTestIfInActive('FEATURE_NEXT_14001', $this);
+        $this->systemConfig->set('core.newsletter.doubleOptIn', true);
+
         $browser = $this->login();
         $data = [
             'option' => 'subscribe',
@@ -74,8 +92,10 @@ public function testRegisterNewsletterForCustomerDoi(): void
         );
 
         $response = $browser->getResponse();
+        $content = $response->getContent();
 
-        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());
+        static::assertIsString($content);
+        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);
 
         static::assertInstanceOf(StorefrontResponse::class, $response);
         static::assertSame(200, $response->getStatusCode());
@@ -93,8 +113,10 @@ public function testRegisterNewsletterForCustomerDoi(): void
         );
 
         $response = $browser->getResponse();
+        $content = $response->getContent();
 
-        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $response->getContent());
+        static::assertIsString($content);
+        static::assertSame(Response::HTTP_OK, $response->getStatusCode(), $content);
 
         static::assertInstanceOf(StorefrontResponse::class, $response);
         static::assertSame(200, $response->getStatusCode());
@@ -103,8 +125,10 @@ public function testRegisterNewsletterForCustomerDoi(): void
         $criteria->addFilter(new EqualsFilter('email', 'nltest@example.com'));
         /** @var NewsletterRecipientEntity $recipientEntry */
         $recipientEntry = $repo->search($criteria, Context::createDefaultContext())->first();
+        $status = $recipientEntry->getStatus();
 
-        static::assertEquals('optIn', $recipientEntry->getStatus(), $recipientEntry->getStatus());
+        static::assertIsString($status);
+        static::assertEquals('optIn', $status);
         $this->validateRecipientData($recipientEntry);
     }
 
@@ -122,12 +146,18 @@ private function login(): KernelBrowser
             ])
         );
         $response = $browser->getResponse();
-        static::assertSame(200, $response->getStatusCode(), $response->getContent());
+        $content = $response->getContent();
+
+        static::assertIsString($content);
+        static::assertSame(200, $response->getStatusCode(), $content);
 
         $browser->request('GET', '/');
         /** @var StorefrontResponse $response */
         $response = $browser->getResponse();
-        static::assertNotNull($response->getContext()->getCustomer());
+        $context = $response->getContext();
+
+        static::assertNotNull($context);
+        static::assertNotNull($context->getCustomer());
 
         return $browser;
     }
diff --git a/tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php b/tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
index f0d10a5dddf..eaca7a9f125 100644
--- a/tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
+++ b/tests/unit/php/Core/Content/Newsletter/SalesChannel/NewsletterSubscribeRouteTest.php
@@ -5,6 +5,9 @@
 use PHPUnit\Framework\TestCase;
 use Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientCollection;
 use Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientEntity;
+use Shopware\Core\Content\Newsletter\Event\NewsletterConfirmEvent;
+use Shopware\Core\Content\Newsletter\Event\NewsletterRegisterEvent;
+use Shopware\Core\Content\Newsletter\Event\NewsletterSubscribeUrlEvent;
 use Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityRepository;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryInterface;
@@ -13,6 +16,7 @@
 use Shopware\Core\Framework\DataAbstractionLayer\Search\IdSearchResult;
 use Shopware\Core\Framework\RateLimiter\RateLimiter;
 use Shopware\Core\Framework\Uuid\Uuid;
+use Shopware\Core\Framework\Validation\BuildValidationEvent;
 use Shopware\Core\Framework\Validation\DataBag\RequestDataBag;
 use Shopware\Core\Framework\Validation\DataValidationDefinition;
 use Shopware\Core\Framework\Validation\DataValidator;
@@ -37,6 +41,110 @@ public function setUp(): void
         $this->salesChannelContext = $this->createMock(SalesChannelContext::class);
     }
 
+    public function testSubscribeWithDOIEnabled(): void
+    {
+        $requestData = new RequestDataBag();
+        $requestData->add([
+            'email' => 'test@example.com',
+            'option' => 'direct',
+            'firstName' => 'Y',
+            'lastName' => 'Tran',
+        ]);
+
+        $newsletterRecipientEntity = new NewsletterRecipientEntity();
+        $newsletterRecipientEntity->setId(Uuid::randomHex());
+        $newsletterRecipientEntity->setConfirmedAt(new \DateTime());
+
+        $idSearchResult = $this->createMock(IdSearchResult::class);
+        $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());
+
+        $entityRepository = $this->createMock(EntityRepository::class);
+        $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);
+        $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(
+            new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),
+        );
+
+        $systemConfig = $this->createMock(SystemConfigService::class);
+        $systemConfig
+            ->expects(static::exactly(2))
+            ->method('getBool')
+            ->with('core.newsletter.doubleOptIn')
+            ->willReturn(true);
+
+        $eventDispatcher = $this->createMock(EventDispatcherInterface::class);
+        $eventDispatcher
+            ->expects(static::once())
+            ->method('dispatch')
+            ->willReturnOnConsecutiveCalls(
+                static::isInstanceOf(BuildValidationEvent::class),
+                static::isInstanceOf(NewsletterSubscribeUrlEvent::class),
+                static::isInstanceOf(NewsletterRegisterEvent::class),
+            );
+
+        $newsletterSubscribeRoute = new NewsletterSubscribeRoute(
+            $entityRepository,
+            $this->createMock(DataValidator::class),
+            $eventDispatcher,
+            $systemConfig,
+            $this->createMock(RateLimiter::class),
+            $this->createMock(RequestStack::class),
+        );
+
+        $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);
+    }
+
+    public function testSubscribeWithDOIDisabled(): void
+    {
+        $requestData = new RequestDataBag();
+        $requestData->add([
+            'email' => 'test@example.com',
+            'option' => 'subscribe',
+            'firstName' => 'Y',
+            'lastName' => 'Tran',
+        ]);
+
+        $newsletterRecipientEntity = new NewsletterRecipientEntity();
+        $newsletterRecipientEntity->setId(Uuid::randomHex());
+        $newsletterRecipientEntity->setConfirmedAt(new \DateTime());
+
+        $idSearchResult = $this->createMock(IdSearchResult::class);
+        $idSearchResult->expects(static::once())->method('firstId')->willReturn($newsletterRecipientEntity->getId());
+
+        $entityRepository = $this->createMock(EntityRepository::class);
+        $entityRepository->expects(static::once())->method('searchIds')->willReturn($idSearchResult);
+        $entityRepository->expects(static::once())->method('search')->willReturnOnConsecutiveCalls(
+            new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),
+        );
+
+        $systemConfig = $this->createMock(SystemConfigService::class);
+        $systemConfig
+            ->expects(static::exactly(2))
+            ->method('getBool')
+            ->with('core.newsletter.doubleOptIn')
+            ->willReturn(false);
+
+        $eventDispatcher = $this->createMock(EventDispatcherInterface::class);
+        $eventDispatcher
+            ->expects(static::once())
+            ->method('dispatch')
+            ->willReturnOnConsecutiveCalls(
+                static::isInstanceOf(BuildValidationEvent::class),
+                static::isInstanceOf(NewsletterSubscribeUrlEvent::class),
+                static::isInstanceOf(NewsletterConfirmEvent::class),
+            );
+
+        $newsletterSubscribeRoute = new NewsletterSubscribeRoute(
+            $entityRepository,
+            $this->createMock(DataValidator::class),
+            $eventDispatcher,
+            $systemConfig,
+            $this->createMock(RateLimiter::class),
+            $this->createMock(RequestStack::class),
+        );
+
+        $newsletterSubscribeRoute->subscribe($requestData, $this->salesChannelContext, false);
+    }
+
     /**
      * @param array<string, string> $data
      * @param array<string, string> $properties
@@ -140,8 +248,6 @@ public function testRateLimitation(): void
             new EntitySearchResult('newsletter_recipient', 1, new NewsletterRecipientCollection([$newsletterRecipientEntity]), null, new Criteria(), $this->salesChannelContext->getContext()),
         );
 
-        $raleLimiterMock = $this->createMock(RateLimiter::class);
-
         $request = $this->createMock(Request::class);
         $request->method('getClientIp')->willReturn('127.0.0.1');
 
@@ -151,7 +257,8 @@ public function testRateLimitation(): void
             ->method('getMainRequest')
             ->willReturn($request);
 
-        $raleLimiterMock
+        $rateLimiterMock = $this->createMock(RateLimiter::class);
+        $rateLimiterMock
             ->expects(static::once())
             ->method('ensureAccepted')
             ->willReturnCallback(function (string $route, string $key): void {
@@ -164,7 +271,7 @@ public function testRateLimitation(): void
             $this->createMock(DataValidator::class),
             $this->createMock(EventDispatcherInterface::class),
             $this->createMock(SystemConfigService::class),
-            $raleLimiterMock,
+            $rateLimiterMock,
             $requestStackMock,
         );
 
