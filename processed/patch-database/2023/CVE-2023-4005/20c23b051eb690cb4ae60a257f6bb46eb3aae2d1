diff --git a/src/modules/Client/Api/Admin.php b/src/modules/Client/Api/Admin.php
index 4ec352efee..2d83add826 100644
--- a/src/modules/Client/Api/Admin.php
+++ b/src/modules/Client/Api/Admin.php
@@ -354,6 +354,9 @@ public function change_password($data)
         $client->updated_at = date('Y-m-d H:i:s');
         $this->di['db']->store($client);
 
+        $profileService = $this->di['mod_service']('profile');
+        $profileService->invalidateSessions('client', $data['id']);
+
         $this->di['events_manager']->fire(['event' => 'onAfterAdminClientPasswordChange', 'params' => ['id' => $client->id, 'password' => $data['password']]]);
 
         $this->di['logger']->info('Changed client #%s password', $client->id);
diff --git a/src/modules/Profile/Api/Admin.php b/src/modules/Profile/Api/Admin.php
index 257624da4b..af347e9657 100644
--- a/src/modules/Profile/Api/Admin.php
+++ b/src/modules/Profile/Api/Admin.php
@@ -116,10 +116,26 @@ public function change_password($data)
 
         $staff = $this->getIdentity();
 
-        if(!$this->di['password']->verify($data['current_password'], $staff->pass)) {
+        if (!$this->di['password']->verify($data['current_password'], $staff->pass)) {
             throw new \Exception('Current password incorrect');
         }
 
+        $this->getService()->invalidateSessions();
         return $this->getService()->changeAdminPassword($staff, $data['new_password']);
     }
+
+    /**
+     * Used to destroy / invalidate all existing sessions for a given user
+     * @param array $data An array with the options.
+     *                    The array can contain the following sub-keys:
+     *                    - string|null $data['type'] The user type (admin or staff) (optional).
+     *                    - id|null $data['id'] The session ID (optional).
+     * @return bool 
+     */
+    public function destroy_sessions(array $data): bool
+    {
+        $data['type'] ??= null;
+        $data['id'] ??= null;
+        return $this->getService()->invalidateSessions($data['type'], $data['id']);
+    }
 }
diff --git a/src/modules/Profile/Api/Client.php b/src/modules/Profile/Api/Client.php
index 0c355d192d..f731f95d7d 100644
--- a/src/modules/Profile/Api/Client.php
+++ b/src/modules/Profile/Api/Client.php
@@ -120,10 +120,11 @@ public function change_password($data)
 
         $client = $this->getIdentity();
 
-        if(!$this->di['password']->verify($data['current_password'], $client->pass)) {
+        if (!$this->di['password']->verify($data['current_password'], $client->pass)) {
             throw new \Exception('Current password incorrect');
         }
 
+        $this->getService()->invalidateSessions();
         return $this->getService()->changeClientPassword($client, $data['new_password']);
     }
 
@@ -136,4 +137,13 @@ public function logout()
     {
         return $this->getService()->logoutClient();
     }
+
+    /**
+     * Used to destroy / invalidate all existing sessions for the current client
+     * @return bool 
+     */
+    public function destroy_sessions(array $data): bool
+    {
+        return $this->getService()->invalidateSessions();
+    }
 }
diff --git a/src/modules/Profile/Service.php b/src/modules/Profile/Service.php
index 2eb2077c31..3af6f3a630 100644
--- a/src/modules/Profile/Service.php
+++ b/src/modules/Profile/Service.php
@@ -222,4 +222,80 @@ public function logoutClient()
 
         return true;
     }
+
+    public function invalidateSessions(?string $type = null, ?int $id = null): bool
+    {
+        if (empty($type)) {
+            $auth = new \Box_Authorization($this->di);
+            if ($auth->isAdminLoggedIn()) {
+                $type = 'admin';
+            } elseif ($auth->isClientLoggedIn()) {
+                $type = 'client';
+            } else {
+                throw new \Box_Exception("Unable to invalidate sessions, nobody is logged in");
+            }
+        }
+
+        if (empty($id)) {
+            switch ($type) {
+                case 'admin':
+                    $admin = $this->di['session']->get('admin');
+                    $id = $admin['id'];
+                    break;
+                case 'client':
+                    $id = $this->di['session']->get('client_id');
+                    break;
+            }
+        }
+
+        if ($type !== 'admin' && $type !== 'client') {
+            throw new \Box_Exception("Unable to invalidate sessions, an invalid type was used");
+        }
+
+        $sessions = $this->getSessions();
+        foreach ($sessions as $session) {
+            $this->deleteSessionIfMatching($session, $type, $id);
+        }
+
+        return true;
+    }
+
+    private function getSessions(): array
+    {
+        $query = 'SELECT * FROM session WHERE content IS NOT NULL AND content <> ""';
+        $sessions = $this->di['db']->getAll($query);
+        return $sessions;
+    }
+
+    private function deleteSessionIfMatching(array $session, string $type, int $id): void
+    {
+        // Decode the data for the current session and then verify it is for the selected type
+        $data = base64_decode($session['content']);
+        $stringStart = ($type === 'admin') ? 'admin|' : 'client_id|';
+        if (!str_starts_with($data, $stringStart)) {
+            return;
+        }
+
+        // Now we strip off the starting portion so we can unserialize the data
+        $data = str_replace($stringStart, '', $data);
+
+        // Finally, perform the check depending on what type of session we are looking for and trash it if it's a match
+        if ($type === 'admin') {
+            $dataArray = unserialize($data);
+            if ($dataArray['id'] === $id) {
+                $this->trashSessionByArray($session);
+            }
+        } else {
+            if (unserialize($data) === $id) {
+                $this->trashSessionByArray($session);
+            }
+        }
+    }
+
+    private function trashSessionByArray(array $session): void
+    {
+        $bean = $this->di['db']->dispense('session');
+        $bean->import($session);
+        $this->di['db']->trash($bean);
+    }
 }
diff --git a/src/modules/Staff/Service.php b/src/modules/Staff/Service.php
index d22aea5cf4..0faf9129f8 100644
--- a/src/modules/Staff/Service.php
+++ b/src/modules/Staff/Service.php
@@ -443,6 +443,9 @@ public function changePassword(\Model_Admin $model, $password)
         $model->updated_at = date('Y-m-d H:i:s');
         $this->di['db']->store($model);
 
+        $profileService = $this->di['mod_service']('profile');
+        $profileService->invalidateSessions('admin', $model->id);
+
         $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffPasswordChange', 'params' => ['id' => $model->id]]);
 
         $this->di['logger']->info('Changed staff member %s password', $model->id);
diff --git a/tests/modules/Client/Api/AdminTest.php b/tests/modules/Client/Api/AdminTest.php
index 3975ede721..572aec48a8 100644
--- a/tests/modules/Client/Api/AdminTest.php
+++ b/tests/modules/Client/Api/AdminTest.php
@@ -449,6 +449,8 @@ public function testchange_password()
             ->method('hashIt')
             ->with($data['password']);
 
+        $profileService = $this->getMockBuilder('\Box\Mod\Profile\Service')->getMock();
+
         $di                   = new \Pimple\Container();
         $di['db']             = $dbMock;
         $di['events_manager'] = $eventMock;
@@ -459,7 +461,9 @@ public function testchange_password()
             ->method('checkRequiredParamsForArray')
             ->will($this->returnValue(null));
         $di['validator'] = $validatorMock;
-
+        $di['mod_service'] = $di->protect(function () use ($profileService) {
+            return $profileService;
+        });
 
         $admin_Client = new \Box\Mod\Client\Api\Admin();
         $admin_Client->setDi($di);
diff --git a/tests/modules/Staff/ServiceTest.php b/tests/modules/Staff/ServiceTest.php
index 8de72682b4..3daf88ef70 100644
--- a/tests/modules/Staff/ServiceTest.php
+++ b/tests/modules/Staff/ServiceTest.php
@@ -1027,12 +1027,17 @@ public function testchangePassword()
         $passwordMock->expects($this->atLeastOnce())
             ->method('hashIt')
             ->with($plainTextPassword);
+        
+        $profileService = $this->getMockBuilder('\Box\Mod\Profile\Service')->getMock();
 
         $di                   = new \Pimple\Container();
         $di['events_manager'] = $eventsMock;
         $di['logger']         = $logMock;
         $di['db']             = $dbMock;
         $di['password']       = $passwordMock;
+        $di['mod_service'] = $di->protect(function () use ($profileService) {
+            return $profileService;
+        });
 
         $service = new \Box\Mod\Staff\Service();
         $service->setDi($di);
