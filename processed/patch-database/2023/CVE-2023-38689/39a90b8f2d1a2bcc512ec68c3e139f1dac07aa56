diff --git a/common/logisticspipes/blocks/stats/TrackingTask.java b/common/logisticspipes/blocks/stats/TrackingTask.java
index 9e700a13f8..30f897c3b2 100644
--- a/common/logisticspipes/blocks/stats/TrackingTask.java
+++ b/common/logisticspipes/blocks/stats/TrackingTask.java
@@ -1,7 +1,5 @@
 package logisticspipes.blocks.stats;
 
-import java.io.IOException;
-
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 
@@ -59,13 +57,13 @@ public void writeToNBT(NBTTagCompound nbt) {
 		item.makeNormalStack(1).writeToNBT(nbt);
 	}
 
-	public void writeToLPData(LPDataOutput output) throws IOException {
+	public void writeToLPData(LPDataOutput output) {
 		output.writeLongArray(amountRecorded);
 		output.writeInt(arrayPos);
 		output.writeItemIdentifier(item);
 	}
 
-	public void readFromLPData(LPDataInput input) throws IOException {
+	public void readFromLPData(LPDataInput input) {
 		amountRecorded = input.readLongArray();
 		arrayPos = input.readInt();
 		item = input.readItemIdentifier();
diff --git a/common/logisticspipes/config/PlayerConfig.java b/common/logisticspipes/config/PlayerConfig.java
index b2da934b1c..9ab657fc17 100644
--- a/common/logisticspipes/config/PlayerConfig.java
+++ b/common/logisticspipes/config/PlayerConfig.java
@@ -55,10 +55,6 @@ public PlayerConfig(boolean uninitialised, PlayerIdentifier ident) {
 		playerIdent = ident;
 	}
 
-	public void setUseNewRenderer(boolean flag) {
-		useNewRenderer = flag;
-	}
-
 	public void setUseFallbackRenderer(boolean flag) {
 		useFallbackRenderer = flag;
 	}
@@ -75,14 +71,14 @@ public void sendUpdate() {
 		MainProxy.sendPacketToServer(PacketHandler.getPacket(PlayerConfigToServerPacket.class).setConfig(this));
 	}
 
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeBoolean(useNewRenderer);
 		output.writeBoolean(useFallbackRenderer);
 		output.writeInt(renderPipeDistance);
 		output.writeInt(renderPipeContentDistance);
 	}
 
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		useNewRenderer = input.readBoolean();
 		useFallbackRenderer = input.readBoolean();
 		renderPipeDistance = input.readInt();
@@ -218,4 +214,8 @@ public void applyTo(PlayerConfig playerConfig) {
 	public boolean isUseNewRenderer() {
 		return useNewRenderer && SimpleServiceLocator.cclProxy.isActivated();
 	}
+
+	public void setUseNewRenderer(boolean flag) {
+		useNewRenderer = flag;
+	}
 }
diff --git a/common/logisticspipes/interfaces/IClientState.java b/common/logisticspipes/interfaces/IClientState.java
index a89a68a1ed..d041c01222 100644
--- a/common/logisticspipes/interfaces/IClientState.java
+++ b/common/logisticspipes/interfaces/IClientState.java
@@ -1,13 +1,11 @@
 package logisticspipes.interfaces;
 
-import java.io.IOException;
-
 import network.rs485.logisticspipes.util.LPDataInput;
 import network.rs485.logisticspipes.util.LPDataOutput;
 
 public interface IClientState {
 
-	void writeData(LPDataOutput output) throws IOException;
+	void writeData(LPDataOutput output);
 
-	void readData(LPDataInput input) throws IOException;
+	void readData(LPDataInput input);
 }
diff --git a/common/logisticspipes/network/IReadListObject.java b/common/logisticspipes/network/IReadListObject.java
index dd73290ee2..43d83d7a81 100644
--- a/common/logisticspipes/network/IReadListObject.java
+++ b/common/logisticspipes/network/IReadListObject.java
@@ -1,10 +1,8 @@
 package logisticspipes.network;
 
-import java.io.IOException;
-
 import network.rs485.logisticspipes.util.LPDataInput;
 
 public interface IReadListObject<T> {
 
-	T readObject(LPDataInput input) throws IOException;
+	T readObject(LPDataInput input);
 }
diff --git a/common/logisticspipes/network/IWriteListObject.java b/common/logisticspipes/network/IWriteListObject.java
index c56be5322a..f4b9c65dfd 100644
--- a/common/logisticspipes/network/IWriteListObject.java
+++ b/common/logisticspipes/network/IWriteListObject.java
@@ -1,10 +1,8 @@
 package logisticspipes.network;
 
-import java.io.IOException;
-
 import network.rs485.logisticspipes.util.LPDataOutput;
 
 public interface IWriteListObject<T> {
 
-	void writeObject(LPDataOutput output, T object) throws IOException;
+	void writeObject(LPDataOutput output, T object);
 }
diff --git a/common/logisticspipes/network/NewGuiHandler.java b/common/logisticspipes/network/NewGuiHandler.java
index 0a8643cfcd..c85e72e799 100644
--- a/common/logisticspipes/network/NewGuiHandler.java
+++ b/common/logisticspipes/network/NewGuiHandler.java
@@ -36,6 +36,8 @@ public class NewGuiHandler {
 	public static List<GuiProvider> guilist;
 	public static Map<Class<? extends GuiProvider>, GuiProvider> guimap;
 
+	private NewGuiHandler() { }
+
 	@SuppressWarnings("unchecked")
 	// Suppressed because this cast should never fail.
 	public static <T extends GuiProvider> T getGui(Class<T> clazz) {
@@ -64,7 +66,6 @@ public static final void initialize() {
 		}
 	}
 
-	@SneakyThrows(IOException.class)
 	public static void openGui(GuiProvider guiProvider, EntityPlayer oPlayer) {
 		if (!(oPlayer instanceof EntityPlayerMP)) {
 			throw new UnsupportedOperationException("Gui can only be opened on the server side");
@@ -96,7 +97,6 @@ public static void openGui(GuiProvider guiProvider, EntityPlayer oPlayer) {
 		player.openContainer.addCraftingToCrafters(player);
 	}
 
-	@SneakyThrows(IOException.class)
 	@SideOnly(Side.CLIENT)
 	public static void openGui(GUIPacket packet, EntityPlayer player) {
 		int guiID = packet.getGuiID();
diff --git a/common/logisticspipes/network/PacketHandler.java b/common/logisticspipes/network/PacketHandler.java
index 6bae39b307..dcea2b6603 100644
--- a/common/logisticspipes/network/PacketHandler.java
+++ b/common/logisticspipes/network/PacketHandler.java
@@ -39,11 +39,12 @@
 @Sharable
 public class PacketHandler extends MessageToMessageCodec<FMLProxyPacket, ModernPacket> {
 
+	public static final Map<Integer, StackTraceElement[]> debugMap = new HashMap<>();
+	//TODO correct to work with WeakReference (See FML original)
+	protected static final AttributeKey<ThreadLocal<FMLProxyPacket>> INBOUNDPACKETTRACKER = new AttributeKey<>("lp:inboundpacket");
 	public static List<ModernPacket> packetlist;
 	public static Map<Class<? extends ModernPacket>, ModernPacket> packetmap;
-
 	private static int packetDebugID = 1;
-	public static final Map<Integer, StackTraceElement[]> debugMap = new HashMap<>();
 
 	@SuppressWarnings("unchecked")
 	// Suppressed because this cast should never fail.
@@ -60,18 +61,6 @@ public static <T extends ModernPacket> T getPacket(Class<T> clazz) {
 		return packet;
 	}
 
-	//horrible hack to carry the proper player for the side along...
-	static class InboundModernPacketWrapper {
-
-		final ModernPacket packet;
-		final EntityPlayer player;
-
-		InboundModernPacketWrapper(ModernPacket p, EntityPlayer e) {
-			packet = p;
-			player = e;
-		}
-	}
-
 	/*
 	 * enumerates all ModernPackets, sets their IDs and populate packetlist/packetmap
 	 */
@@ -97,15 +86,6 @@ public static final void initialize() {
 		}
 	}
 
-	//TODO correct to work with WeakReference (See FML original)
-	protected static final AttributeKey<ThreadLocal<FMLProxyPacket>> INBOUNDPACKETTRACKER = new AttributeKey<>("lp:inboundpacket");
-
-	@Override
-	public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
-		super.handlerAdded(ctx);
-		ctx.attr(PacketHandler.INBOUNDPACKETTRACKER).set(new ThreadLocal<>());
-	}
-
 	//Used to provide the Description packet
 	public static FMLProxyPacket toFMLPacket(ModernPacket msg) throws Exception {
 		return PacketHandler.toFMLPacket(msg, MainProxy.networkChannelName);
@@ -121,6 +101,44 @@ private static FMLProxyPacket toFMLPacket(ModernPacket msg, String channel) thro
 		return new FMLProxyPacket(buffer, channel);
 	}
 
+	//hacky callback to process packets coming from by the packetbufferhandler decompressors
+	//TODO replace with proper netty implementation
+	public static void onPacketData(final LPDataInput data, final EntityPlayer player) {
+		if (player == null) {
+			return;
+		}
+		final int packetID = data.readShort();
+		final ModernPacket packet = PacketHandler.packetlist.get(packetID).template();
+		packet.setDebugId(data.readInt());
+		packet.readData(data);
+		PacketHandler.onPacketData(packet, player);
+	}
+
+	private static void onPacketData(ModernPacket packet, final EntityPlayer player) {
+		try {
+			packet.processPacket(player);
+			if (LPConstants.DEBUG) {
+				PacketHandler.debugMap.remove(packet.getDebugId());
+			}
+		} catch (DelayPacketException e) {
+			if (packet.retry() && MainProxy.isClient(player.getEntityWorld())) {
+				SimpleServiceLocator.clientBufferHandler.queueFailedPacket(packet, player);
+			} else if (LPConstants.DEBUG) {
+				LogisticsPipes.log.error(packet.getClass().getName());
+				LogisticsPipes.log.error(packet.toString());
+				e.printStackTrace();
+			}
+		} catch (Exception e) {
+			throw new RuntimeException(e);
+		}
+	}
+
+	@Override
+	public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
+		super.handlerAdded(ctx);
+		ctx.attr(PacketHandler.INBOUNDPACKETTRACKER).set(new ThreadLocal<>());
+	}
+
 	@Override
 	protected final void encode(ChannelHandlerContext ctx, ModernPacket msg, List<Object> out) throws Exception {
 		FMLProxyPacket proxy = PacketHandler.toFMLPacket(msg, ctx.channel().attr(NetworkRegistry.FML_CHANNEL).get());
@@ -150,35 +168,15 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
 		super.exceptionCaught(ctx, cause);
 	}
 
-	//hacky callback to process packets coming from by the packetbufferhandler decompressors
-	//TODO replace with proper netty implementation
-	public static void onPacketData(final LPDataInput data, final EntityPlayer player) throws IOException {
-		if (player == null) {
-			return;
-		}
-		final int packetID = data.readShort();
-		final ModernPacket packet = PacketHandler.packetlist.get(packetID).template();
-		packet.setDebugId(data.readInt());
-		packet.readData(data);
-		PacketHandler.onPacketData(packet, player);
-	}
+	//horrible hack to carry the proper player for the side along...
+	static class InboundModernPacketWrapper {
 
-	private static void onPacketData(ModernPacket packet, final EntityPlayer player) {
-		try {
-			packet.processPacket(player);
-			if (LPConstants.DEBUG) {
-				PacketHandler.debugMap.remove(packet.getDebugId());
-			}
-		} catch (DelayPacketException e) {
-			if (packet.retry() && MainProxy.isClient(player.getEntityWorld())) {
-				SimpleServiceLocator.clientBufferHandler.queueFailedPacket(packet, player);
-			} else if (LPConstants.DEBUG) {
-				LogisticsPipes.log.error(packet.getClass().getName());
-				LogisticsPipes.log.error(packet.toString());
-				e.printStackTrace();
-			}
-		} catch (Exception e) {
-			throw new RuntimeException(e);
+		final ModernPacket packet;
+		final EntityPlayer player;
+
+		InboundModernPacketWrapper(ModernPacket p, EntityPlayer e) {
+			packet = p;
+			player = e;
 		}
 	}
 }
diff --git a/common/logisticspipes/network/abstractguis/BooleanModuleCoordinatesGuiProvider.java b/common/logisticspipes/network/abstractguis/BooleanModuleCoordinatesGuiProvider.java
index cc70c7b554..56dc58f38b 100644
--- a/common/logisticspipes/network/abstractguis/BooleanModuleCoordinatesGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/BooleanModuleCoordinatesGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -10,22 +8,22 @@
 
 public abstract class BooleanModuleCoordinatesGuiProvider extends ModuleCoordinatesGuiProvider {
 
-	public BooleanModuleCoordinatesGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private boolean flag;
 
+	public BooleanModuleCoordinatesGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(flag);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		flag = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/abstractguis/CoordinatesGuiProvider.java b/common/logisticspipes/network/abstractguis/CoordinatesGuiProvider.java
index 51ec4cda4d..01aace5e92 100644
--- a/common/logisticspipes/network/abstractguis/CoordinatesGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/CoordinatesGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 
@@ -18,10 +16,6 @@
 @ToString
 public abstract class CoordinatesGuiProvider extends GuiProvider {
 
-	public CoordinatesGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private int posX;
@@ -32,8 +26,12 @@ public CoordinatesGuiProvider(int id) {
 	@Setter
 	private int posZ;
 
+	public CoordinatesGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 
 		output.writeInt(posX);
 		output.writeInt(posY);
@@ -41,7 +39,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 
 		posX = input.readInt();
 		posY = input.readInt();
diff --git a/common/logisticspipes/network/abstractguis/CoordinatesPopupGuiProvider.java b/common/logisticspipes/network/abstractguis/CoordinatesPopupGuiProvider.java
index 2067595b87..0b2de68f7a 100644
--- a/common/logisticspipes/network/abstractguis/CoordinatesPopupGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/CoordinatesPopupGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 
@@ -19,10 +17,6 @@
 @ToString
 public abstract class CoordinatesPopupGuiProvider extends PopupGuiProvider {
 
-	public CoordinatesPopupGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private int posX;
@@ -33,8 +27,12 @@ public CoordinatesPopupGuiProvider(int id) {
 	@Setter
 	private int posZ;
 
+	public CoordinatesPopupGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 
 		output.writeInt(posX);
 		output.writeInt(posY);
@@ -42,7 +40,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 
 		posX = input.readInt();
 		posY = input.readInt();
diff --git a/common/logisticspipes/network/abstractguis/GuiProvider.java b/common/logisticspipes/network/abstractguis/GuiProvider.java
index 52cc6c9e9b..39c1d96c8f 100644
--- a/common/logisticspipes/network/abstractguis/GuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/GuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Container;
 import net.minecraftforge.common.util.FakePlayer;
@@ -21,9 +19,9 @@ public GuiProvider(int id) {
 		this.id = id;
 	}
 
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	/**
 	 * @return LogisticsBaseGuiScreen
diff --git a/common/logisticspipes/network/abstractguis/ModuleCoordinatesGuiProvider.java b/common/logisticspipes/network/abstractguis/ModuleCoordinatesGuiProvider.java
index 3c1cd328ea..bb33aee147 100644
--- a/common/logisticspipes/network/abstractguis/ModuleCoordinatesGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/ModuleCoordinatesGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.world.World;
 
 import lombok.Getter;
@@ -19,27 +17,26 @@
 
 public abstract class ModuleCoordinatesGuiProvider extends CoordinatesGuiProvider {
 
-	public ModuleCoordinatesGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private ModulePositionType slot;
-
 	@Getter
 	@Setter
 	private int positionInt;
 
+	public ModuleCoordinatesGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeEnum(slot);
 		output.writeInt(positionInt);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		slot = input.readEnum(ModulePositionType.class);
 		positionInt = input.readInt();
diff --git a/common/logisticspipes/network/abstractguis/ModuleInHandGuiProvider.java b/common/logisticspipes/network/abstractguis/ModuleInHandGuiProvider.java
index fbef54e3fe..af65cd696c 100644
--- a/common/logisticspipes/network/abstractguis/ModuleInHandGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/ModuleInHandGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 
@@ -18,22 +16,22 @@
 
 public abstract class ModuleInHandGuiProvider extends GuiProvider {
 
-	public ModuleInHandGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private int invSlot;
 
+	public ModuleInHandGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(invSlot);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		invSlot = input.readInt();
 	}
diff --git a/common/logisticspipes/network/abstractguis/NBTModuleCoordinatesGuiProvider.java b/common/logisticspipes/network/abstractguis/NBTModuleCoordinatesGuiProvider.java
index e3c98d5535..f5ce8dfdb6 100644
--- a/common/logisticspipes/network/abstractguis/NBTModuleCoordinatesGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/NBTModuleCoordinatesGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.nbt.NBTTagCompound;
 
 import lombok.Getter;
@@ -21,13 +19,13 @@ public NBTModuleCoordinatesGuiProvider(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeNBTTagCompound(nbt);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		nbt = input.readNBTTagCompound();
 	}
diff --git a/common/logisticspipes/network/abstractguis/UpgradeCoordinatesGuiProvider.java b/common/logisticspipes/network/abstractguis/UpgradeCoordinatesGuiProvider.java
index 777954faac..8a3ce74af9 100644
--- a/common/logisticspipes/network/abstractguis/UpgradeCoordinatesGuiProvider.java
+++ b/common/logisticspipes/network/abstractguis/UpgradeCoordinatesGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractguis;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Slot;
 
@@ -16,22 +14,22 @@
 
 public abstract class UpgradeCoordinatesGuiProvider extends CoordinatesPopupGuiProvider {
 
-	public UpgradeCoordinatesGuiProvider(int id) {
-		super(id);
-	}
-
 	@Getter(AccessLevel.PROTECTED)
 	@Setter(AccessLevel.PRIVATE)
 	private int positionInt;
 
+	public UpgradeCoordinatesGuiProvider(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(positionInt);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		positionInt = input.readInt();
 	}
diff --git a/common/logisticspipes/network/abstractpackets/BitSetCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/BitSetCoordinatesPacket.java
index d68c5df76b..735a240381 100644
--- a/common/logisticspipes/network/abstractpackets/BitSetCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/BitSetCoordinatesPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import lombok.Getter;
@@ -20,13 +19,13 @@ public BitSetCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBitSet(getFlags());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setFlags(input.readBitSet());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/BooleanModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/BooleanModuleCoordinatesPacket.java
index 70e94d690d..3301e13407 100644
--- a/common/logisticspipes/network/abstractpackets/BooleanModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/BooleanModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public BooleanModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(flag);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		flag = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/abstractpackets/CoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/CoordinatesPacket.java
index 7856ef1731..e31fb3d92c 100644
--- a/common/logisticspipes/network/abstractpackets/CoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/CoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 
@@ -18,16 +16,6 @@
 @ToString
 public abstract class CoordinatesPacket extends ModernPacket {
 
-	public enum LTGPCompletionCheck {
-		NONE,
-		PIPE,
-		TRANSPORT
-	}
-
-	public CoordinatesPacket(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private int posX;
@@ -38,8 +26,12 @@ public CoordinatesPacket(int id) {
 	@Setter
 	private int posZ;
 
+	public CoordinatesPacket(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 
 		output.writeInt(posX);
 		output.writeInt(posY);
@@ -47,7 +39,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 
 		posX = input.readInt();
 		posY = input.readInt();
@@ -173,4 +165,10 @@ public LogisticsTileGenericPipe getPipe(World world, LTGPCompletionCheck check)
 	protected void targetNotFound(String message) {
 		throw new TargetNotFoundException(message, this);
 	}
+
+	public enum LTGPCompletionCheck {
+		NONE,
+		PIPE,
+		TRANSPORT
+	}
 }
diff --git a/common/logisticspipes/network/abstractpackets/DirectionModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/DirectionModuleCoordinatesPacket.java
index 76b2fc9e61..caf8ff0e62 100644
--- a/common/logisticspipes/network/abstractpackets/DirectionModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/DirectionModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraftforge.common.util.ForgeDirection;
 
 import lombok.Getter;
@@ -21,13 +19,13 @@ public DirectionModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeForgeDirection(direction);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		direction = input.readForgeDirection();
 	}
diff --git a/common/logisticspipes/network/abstractpackets/GenericPacket.java b/common/logisticspipes/network/abstractpackets/GenericPacket.java
deleted file mode 100644
index e19a519002..0000000000
--- a/common/logisticspipes/network/abstractpackets/GenericPacket.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package logisticspipes.network.abstractpackets;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutput;
-import java.io.ObjectOutputStream;
-
-import lombok.Getter;
-
-import network.rs485.logisticspipes.util.LPDataInput;
-import network.rs485.logisticspipes.util.LPDataOutput;
-
-public abstract class GenericPacket extends ModernPacket {
-
-	@Getter
-	private Object[] args;
-
-	public GenericPacket(int id) {
-		super(id);
-	}
-
-	@Override
-	public void readData(LPDataInput input) throws IOException {
-		int size = input.readInt();
-		args = new Object[size];
-		for (int i = 0; i < size; i++) {
-			byte[] bytes = input.readByteArray();
-			ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
-			ObjectInput in = new ObjectInputStream(bis);
-			try {
-				Object o = in.readObject();
-				args[i] = o;
-			} catch (ClassNotFoundException e) {
-				throw new UnsupportedOperationException(e);
-			}
-		}
-	}
-
-	@Override
-	public void writeData(LPDataOutput output) throws IOException {
-		output.writeInt(args.length);
-		for (Object arg : args) {
-			ByteArrayOutputStream bos = new ByteArrayOutputStream();
-			ObjectOutput out = new ObjectOutputStream(bos);
-			out.writeObject(arg);
-			output.writeByteArray(bos.toByteArray());
-		}
-	}
-
-	public GenericPacket setArgs(Object... input) {
-		args = input;
-		return this;
-	}
-}
diff --git a/common/logisticspipes/network/abstractpackets/Integer2CoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/Integer2CoordinatesPacket.java
index 12d719510e..f39808c8da 100644
--- a/common/logisticspipes/network/abstractpackets/Integer2CoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/Integer2CoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public Integer2CoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setInteger2(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(getInteger2());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/Integer2ModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/Integer2ModuleCoordinatesPacket.java
index 1dbc578908..7ca7c6cdac 100644
--- a/common/logisticspipes/network/abstractpackets/Integer2ModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/Integer2ModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public Integer2ModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setInteger2(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(getInteger2());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/IntegerCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/IntegerCoordinatesPacket.java
index 3662d124da..6f7181ffbd 100644
--- a/common/logisticspipes/network/abstractpackets/IntegerCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/IntegerCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public IntegerCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setInteger(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(getInteger());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/IntegerModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/IntegerModuleCoordinatesPacket.java
index ae2dcefdc6..5501217d6b 100644
--- a/common/logisticspipes/network/abstractpackets/IntegerModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/IntegerModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public IntegerModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setInteger(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(getInteger());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/IntegerPacket.java b/common/logisticspipes/network/abstractpackets/IntegerPacket.java
index 9ba23a8f36..9468fa83d5 100644
--- a/common/logisticspipes/network/abstractpackets/IntegerPacket.java
+++ b/common/logisticspipes/network/abstractpackets/IntegerPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,12 +17,12 @@ public IntegerPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		setInteger(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(getInteger());
 	}
 }
diff --git a/common/logisticspipes/network/abstractpackets/InventoryModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/InventoryModuleCoordinatesPacket.java
index 1d5a7440d6..9873da4fa0 100644
--- a/common/logisticspipes/network/abstractpackets/InventoryModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/InventoryModuleCoordinatesPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
 import java.util.List;
 import java.util.Set;
 
@@ -38,7 +37,7 @@ public InventoryModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 
 		if (inventory != null) {
@@ -62,7 +61,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 
 		byte marker = input.readByte();
diff --git a/common/logisticspipes/network/abstractpackets/ItemPacket.java b/common/logisticspipes/network/abstractpackets/ItemPacket.java
index f2d812a6b5..601dfc3d5b 100644
--- a/common/logisticspipes/network/abstractpackets/ItemPacket.java
+++ b/common/logisticspipes/network/abstractpackets/ItemPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 
@@ -22,7 +20,7 @@ public ItemPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		if (getStack() != null) {
 			output.writeInt(Item.getIdFromItem(getStack().getItem()));
@@ -35,7 +33,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 
 		final int itemID = input.readInt();
diff --git a/common/logisticspipes/network/abstractpackets/ListSyncPacket.java b/common/logisticspipes/network/abstractpackets/ListSyncPacket.java
index 5067f7ade2..8d9099a5b2 100644
--- a/common/logisticspipes/network/abstractpackets/ListSyncPacket.java
+++ b/common/logisticspipes/network/abstractpackets/ListSyncPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
 import java.util.List;
 
 import lombok.AccessLevel;
@@ -30,13 +29,13 @@ public ListSyncPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeCollection(list, this);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		list = input.readArrayList(this);
 	}
diff --git a/common/logisticspipes/network/abstractpackets/ModernPacket.java b/common/logisticspipes/network/abstractpackets/ModernPacket.java
index 4eb601d05a..b62ce601e7 100644
--- a/common/logisticspipes/network/abstractpackets/ModernPacket.java
+++ b/common/logisticspipes/network/abstractpackets/ModernPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -12,29 +10,25 @@
 
 public abstract class ModernPacket {
 
-	@Getter
-	@Setter
-	private boolean isChunkDataPacket;
-
-	@Getter
-	@Setter
-	private boolean compressable;
 	/*
 	@Getter
 	protected String channel;
 	 */
 	@Getter
 	private final int id;
-
+	protected int leftRetries = 5;
+	@Getter
+	@Setter
+	private boolean isChunkDataPacket;
+	@Getter
+	@Setter
+	private boolean compressable;
 	@Getter
 	private byte[] data = null;
-
 	@Getter
 	@Setter
 	private int debugId = 0;
 
-	protected int leftRetries = 5;
-
 	public ModernPacket(int id) {
 		//this.channel = LogisticsPipes.LOGISTICS_PIPES_CHANNEL_NAME;
 		this.id = id;
@@ -65,11 +59,11 @@ public void create() {
 		}
 	 */
 
-	public abstract void readData(LPDataInput input) throws IOException;
+	public abstract void readData(LPDataInput input);
 
 	public abstract void processPacket(EntityPlayer player);
 
-	public abstract void writeData(LPDataOutput output) throws IOException;
+	public abstract void writeData(LPDataOutput output);
 
 	public abstract ModernPacket template();
 
diff --git a/common/logisticspipes/network/abstractpackets/ModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/ModuleCoordinatesPacket.java
index aaa6c3d882..ad1d415e4c 100644
--- a/common/logisticspipes/network/abstractpackets/ModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/ModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.world.World;
 
@@ -28,13 +26,14 @@ public abstract class ModuleCoordinatesPacket extends CoordinatesPacket {
 	@Getter
 	@Setter
 	private int positionInt;
+	private boolean moduleBased = false;
 
 	public ModuleCoordinatesPacket(int id) {
 		super(id);
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(type != null);
 		if (type != null) {
@@ -44,7 +43,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		if (input.readBoolean()) {
 			type = input.readEnum(ModulePositionType.class);
@@ -68,8 +67,6 @@ public ModuleCoordinatesPacket setPacketPos(ModuleCoordinatesPacket packet) {
 		return this;
 	}
 
-	private boolean moduleBased = false;
-
 	@SuppressWarnings("unchecked")
 	public <T> T getLogisticsModule(EntityPlayer player, Class<T> clazz) {
 		LogisticsModule module = null;
diff --git a/common/logisticspipes/network/abstractpackets/NBTCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/NBTCoordinatesPacket.java
index e39d449c66..a27684a4e2 100644
--- a/common/logisticspipes/network/abstractpackets/NBTCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/NBTCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.nbt.NBTTagCompound;
 
 import lombok.Getter;
@@ -21,13 +19,13 @@ public NBTCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeNBTTagCompound(tag);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		tag = input.readNBTTagCompound();
 	}
diff --git a/common/logisticspipes/network/abstractpackets/NBTModuleCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/NBTModuleCoordinatesPacket.java
index 5667926498..c4e196558e 100644
--- a/common/logisticspipes/network/abstractpackets/NBTModuleCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/NBTModuleCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.nbt.NBTTagCompound;
 
 import lombok.Getter;
@@ -21,13 +19,13 @@ public NBTModuleCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeNBTTagCompound(tag);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		tag = input.readNBTTagCompound();
 	}
diff --git a/common/logisticspipes/network/abstractpackets/RequestPacket.java b/common/logisticspipes/network/abstractpackets/RequestPacket.java
index 774b70445d..8bda56fe65 100644
--- a/common/logisticspipes/network/abstractpackets/RequestPacket.java
+++ b/common/logisticspipes/network/abstractpackets/RequestPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -30,14 +28,14 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeItemIdentifierStack(stack);
 		output.writeInt(dimension);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		stack = input.readItemIdentifierStack();
 		dimension = input.readInt();
diff --git a/common/logisticspipes/network/abstractpackets/SlotPacket.java b/common/logisticspipes/network/abstractpackets/SlotPacket.java
index e0d668a30c..d00db04c2b 100644
--- a/common/logisticspipes/network/abstractpackets/SlotPacket.java
+++ b/common/logisticspipes/network/abstractpackets/SlotPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Slot;
 
@@ -48,12 +46,12 @@ public SlotPacket setSlot(Slot slot) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		setInteger(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(getInteger());
 	}
 
diff --git a/common/logisticspipes/network/abstractpackets/StringCoordinatesPacket.java b/common/logisticspipes/network/abstractpackets/StringCoordinatesPacket.java
index b36e4ebf2d..57c8b9a2d5 100644
--- a/common/logisticspipes/network/abstractpackets/StringCoordinatesPacket.java
+++ b/common/logisticspipes/network/abstractpackets/StringCoordinatesPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
-
 import lombok.Getter;
 import lombok.Setter;
 
@@ -19,13 +17,13 @@ public StringCoordinatesPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeUTF(getString());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setString(input.readUTF());
 	}
diff --git a/common/logisticspipes/network/abstractpackets/StringListPacket.java b/common/logisticspipes/network/abstractpackets/StringListPacket.java
index 88ebd02d32..a15b63f9a3 100644
--- a/common/logisticspipes/network/abstractpackets/StringListPacket.java
+++ b/common/logisticspipes/network/abstractpackets/StringListPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.abstractpackets;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -21,7 +20,7 @@ public StringListPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		int size = input.readInt();
 		for (int i = 0; i < size; i++) {
 			getStringList().add(input.readUTF());
@@ -29,7 +28,7 @@ public void readData(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(getStringList().size());
 		for (int i = 0; i < getStringList().size(); i++) {
 			output.writeUTF(getStringList().get(i));
diff --git a/common/logisticspipes/network/guis/block/AutoCraftingGui.java b/common/logisticspipes/network/guis/block/AutoCraftingGui.java
index ddef46ecd2..09562024be 100644
--- a/common/logisticspipes/network/guis/block/AutoCraftingGui.java
+++ b/common/logisticspipes/network/guis/block/AutoCraftingGui.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.blocks.crafting.LogisticsCraftingTableTileEntity;
@@ -68,7 +66,7 @@ public DummyContainer getContainer(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeItemIdentifier(targetType);
 		output.writeBoolean(isFuzzy);
@@ -83,7 +81,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		targetType = input.readItemIdentifier();
 		if (input.readBoolean()) {
diff --git a/common/logisticspipes/network/guis/block/StatisticsGui.java b/common/logisticspipes/network/guis/block/StatisticsGui.java
index c5afd5b281..c599093ccb 100644
--- a/common/logisticspipes/network/guis/block/StatisticsGui.java
+++ b/common/logisticspipes/network/guis/block/StatisticsGui.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.guis.block;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -58,14 +57,14 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeCollection(trackingList, (output1, object) -> object.writeToLPData(output1));
 
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		trackingList = input.readArrayList(data1 -> {
 			TrackingTask object = new TrackingTask();
diff --git a/common/logisticspipes/network/guis/item/ItemAmountSignGui.java b/common/logisticspipes/network/guis/item/ItemAmountSignGui.java
index c244430a0c..4c33fa00e6 100644
--- a/common/logisticspipes/network/guis/item/ItemAmountSignGui.java
+++ b/common/logisticspipes/network/guis/item/ItemAmountSignGui.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.item;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -51,13 +49,13 @@ public DummyContainer getContainer(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeForgeDirection(dir);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		dir = input.readForgeDirection();
 	}
diff --git a/common/logisticspipes/network/guis/module/inhand/CraftingModuleInHand.java b/common/logisticspipes/network/guis/module/inhand/CraftingModuleInHand.java
index e80441fb98..18794b0f4f 100644
--- a/common/logisticspipes/network/guis/module/inhand/CraftingModuleInHand.java
+++ b/common/logisticspipes/network/guis/module/inhand/CraftingModuleInHand.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inhand;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -67,14 +65,14 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeIntArray(amount);
 		output.writeBoolean(cleanupExclude);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		amount = input.readIntArray();
 		cleanupExclude = input.readBoolean();
diff --git a/common/logisticspipes/network/guis/module/inpipe/ActiveSupplierSlot.java b/common/logisticspipes/network/guis/module/inpipe/ActiveSupplierSlot.java
index f8249b3265..1dc00e11ee 100644
--- a/common/logisticspipes/network/guis/module/inpipe/ActiveSupplierSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/ActiveSupplierSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -40,7 +38,7 @@ public ActiveSupplierSlot(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(patternUpgarde);
 		output.writeIntArray(slotArray);
@@ -49,7 +47,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		patternUpgarde = input.readBoolean();
 		slotArray = input.readIntArray();
diff --git a/common/logisticspipes/network/guis/module/inpipe/AdvancedExtractorModuleSlot.java b/common/logisticspipes/network/guis/module/inpipe/AdvancedExtractorModuleSlot.java
index bfc1bde4da..e4983f8d5c 100644
--- a/common/logisticspipes/network/guis/module/inpipe/AdvancedExtractorModuleSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/AdvancedExtractorModuleSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -56,13 +54,13 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(areItemsIncluded);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		areItemsIncluded = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/guis/module/inpipe/ApiaristAnalyzerModuleSlot.java b/common/logisticspipes/network/guis/module/inpipe/ApiaristAnalyzerModuleSlot.java
index 6c398dd88f..beaa65cbf8 100644
--- a/common/logisticspipes/network/guis/module/inpipe/ApiaristAnalyzerModuleSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/ApiaristAnalyzerModuleSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -50,13 +48,13 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(extractorMode);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		extractorMode = input.readInt();
 	}
diff --git a/common/logisticspipes/network/guis/module/inpipe/CCBasedQuickSortSlot.java b/common/logisticspipes/network/guis/module/inpipe/CCBasedQuickSortSlot.java
index b8448b9ddc..d556a2425b 100644
--- a/common/logisticspipes/network/guis/module/inpipe/CCBasedQuickSortSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/CCBasedQuickSortSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -50,13 +48,13 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(timeOut);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		timeOut = input.readInt();
 	}
diff --git a/common/logisticspipes/network/guis/module/inpipe/CraftingModuleSlot.java b/common/logisticspipes/network/guis/module/inpipe/CraftingModuleSlot.java
index fe3b0fa5a0..e438353c6b 100644
--- a/common/logisticspipes/network/guis/module/inpipe/CraftingModuleSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/CraftingModuleSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -101,7 +99,7 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(isAdvancedSat);
 		output.writeInt(liquidCrafter);
@@ -113,7 +111,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		isAdvancedSat = input.readBoolean();
 		liquidCrafter = input.readInt();
diff --git a/common/logisticspipes/network/guis/module/inpipe/ExtractorModuleSlot.java b/common/logisticspipes/network/guis/module/inpipe/ExtractorModuleSlot.java
index 6b582d9b3c..7883f403a9 100644
--- a/common/logisticspipes/network/guis/module/inpipe/ExtractorModuleSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/ExtractorModuleSlot.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -27,13 +25,13 @@ public ExtractorModuleSlot(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeForgeDirection(sneakyOrientation);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		sneakyOrientation = input.readForgeDirection();
 	}
diff --git a/common/logisticspipes/network/guis/module/inpipe/ItemSinkSlot.java b/common/logisticspipes/network/guis/module/inpipe/ItemSinkSlot.java
index 76b381312a..4b0924006c 100644
--- a/common/logisticspipes/network/guis/module/inpipe/ItemSinkSlot.java
+++ b/common/logisticspipes/network/guis/module/inpipe/ItemSinkSlot.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -39,7 +38,7 @@ public ItemSinkSlot(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(isDefaultRoute);
 		output.writeBoolean(hasFuzzyUpgrade);
@@ -48,7 +47,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		isDefaultRoute = input.readBoolean();
 		hasFuzzyUpgrade = input.readBoolean();
diff --git a/common/logisticspipes/network/guis/module/inpipe/ProviderModuleGuiProvider.java b/common/logisticspipes/network/guis/module/inpipe/ProviderModuleGuiProvider.java
index efb4143f6e..ad11d39527 100644
--- a/common/logisticspipes/network/guis/module/inpipe/ProviderModuleGuiProvider.java
+++ b/common/logisticspipes/network/guis/module/inpipe/ProviderModuleGuiProvider.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.guis.module.inpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -76,7 +74,7 @@ public GuiProvider template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(exclude);
 		output.writeInt(extractorMode);
@@ -85,7 +83,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		exclude = input.readBoolean();
 		extractorMode = input.readInt();
diff --git a/common/logisticspipes/network/packets/ActivateNBTDebug.java b/common/logisticspipes/network/packets/ActivateNBTDebug.java
index 29b9cfdd22..22ea74bd6b 100644
--- a/common/logisticspipes/network/packets/ActivateNBTDebug.java
+++ b/common/logisticspipes/network/packets/ActivateNBTDebug.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.LPConstants;
@@ -18,7 +16,7 @@ public ActivateNBTDebug(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -36,7 +34,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/BufferTransfer.java b/common/logisticspipes/network/packets/BufferTransfer.java
index 812c731a22..26a3775fec 100644
--- a/common/logisticspipes/network/packets/BufferTransfer.java
+++ b/common/logisticspipes/network/packets/BufferTransfer.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,12 +36,12 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		content = input.readByteArray();
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeByteArray(content);
 	}
 }
diff --git a/common/logisticspipes/network/packets/CraftingPermissionPacket.java b/common/logisticspipes/network/packets/CraftingPermissionPacket.java
index 46242cc40d..faeb7a773a 100644
--- a/common/logisticspipes/network/packets/CraftingPermissionPacket.java
+++ b/common/logisticspipes/network/packets/CraftingPermissionPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
 import java.util.EnumSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -25,7 +24,7 @@ public CraftingPermissionPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		enumSet = EnumSet.noneOf(CraftingDependency.class);
 		for (CraftingDependency type : CraftingDependency.values()) {
 			if (input.readBoolean()) {
@@ -40,7 +39,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		for (CraftingDependency type : CraftingDependency.values()) {
 			output.writeBoolean(enumSet.contains(type));
 		}
diff --git a/common/logisticspipes/network/packets/DummyPacket.java b/common/logisticspipes/network/packets/DummyPacket.java
index e69e9b47bd..3ace145178 100644
--- a/common/logisticspipes/network/packets/DummyPacket.java
+++ b/common/logisticspipes/network/packets/DummyPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ModernPacket;
@@ -15,7 +13,7 @@ public DummyPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		throw new RuntimeException("This packet should never be used");
 	}
 
@@ -25,7 +23,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		throw new RuntimeException("This packet should never be used");
 	}
 
diff --git a/common/logisticspipes/network/packets/NEISetCraftingRecipe.java b/common/logisticspipes/network/packets/NEISetCraftingRecipe.java
index 56425d0cff..c2241e18ea 100644
--- a/common/logisticspipes/network/packets/NEISetCraftingRecipe.java
+++ b/common/logisticspipes/network/packets/NEISetCraftingRecipe.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
@@ -44,7 +42,7 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 
 		output.writeInt(content.length);
@@ -64,7 +62,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 
 		content = new ItemStack[input.readInt()];
diff --git a/common/logisticspipes/network/packets/PlayerConfigToClientPacket.java b/common/logisticspipes/network/packets/PlayerConfigToClientPacket.java
index 55970f66b7..4bb99cf071 100644
--- a/common/logisticspipes/network/packets/PlayerConfigToClientPacket.java
+++ b/common/logisticspipes/network/packets/PlayerConfigToClientPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -24,7 +22,7 @@ public PlayerConfigToClientPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		LogisticsPipes.getClientPlayerConfig().readData(input);
 	}
 
@@ -32,7 +30,7 @@ public void readData(LPDataInput input) throws IOException {
 	public void processPacket(EntityPlayer player) {}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		config.writeData(output);
 	}
 
diff --git a/common/logisticspipes/network/packets/PlayerConfigToServerPacket.java b/common/logisticspipes/network/packets/PlayerConfigToServerPacket.java
index 6c5b7f7479..d842089d55 100644
--- a/common/logisticspipes/network/packets/PlayerConfigToServerPacket.java
+++ b/common/logisticspipes/network/packets/PlayerConfigToServerPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -25,7 +23,7 @@ public PlayerConfigToServerPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		config = new PlayerConfig(null);
 		config.readData(input);
 	}
@@ -36,7 +34,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		config.writeData(output);
 	}
 
diff --git a/common/logisticspipes/network/packets/PlayerListRequest.java b/common/logisticspipes/network/packets/PlayerListRequest.java
index 557ecde77d..bdb52f53ab 100644
--- a/common/logisticspipes/network/packets/PlayerListRequest.java
+++ b/common/logisticspipes/network/packets/PlayerListRequest.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -35,8 +34,8 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 }
diff --git a/common/logisticspipes/network/packets/RequestUpdateNamesPacket.java b/common/logisticspipes/network/packets/RequestUpdateNamesPacket.java
index 98f61d84d7..54af23874f 100644
--- a/common/logisticspipes/network/packets/RequestUpdateNamesPacket.java
+++ b/common/logisticspipes/network/packets/RequestUpdateNamesPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -27,7 +26,7 @@ public RequestUpdateNamesPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -57,7 +56,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/UpdateName.java b/common/logisticspipes/network/packets/UpdateName.java
index 250a539f63..1ddb54771a 100644
--- a/common/logisticspipes/network/packets/UpdateName.java
+++ b/common/logisticspipes/network/packets/UpdateName.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		ident = input.readItemIdentifierStack().getItem();
 		name = input.readUTF();
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeItemIdentifierStack(ident.makeStack(0));
 		output.writeUTF(name);
 	}
diff --git a/common/logisticspipes/network/packets/block/AddItemToTrackPacket.java b/common/logisticspipes/network/packets/block/AddItemToTrackPacket.java
index 803fa3b94d..1f41079310 100644
--- a/common/logisticspipes/network/packets/block/AddItemToTrackPacket.java
+++ b/common/logisticspipes/network/packets/block/AddItemToTrackPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeItemIdentifier(item);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		item = input.readItemIdentifier();
 	}
diff --git a/common/logisticspipes/network/packets/block/CraftingCycleRecipe.java b/common/logisticspipes/network/packets/block/CraftingCycleRecipe.java
index d55c2516bc..90707d99db 100644
--- a/common/logisticspipes/network/packets/block/CraftingCycleRecipe.java
+++ b/common/logisticspipes/network/packets/block/CraftingCycleRecipe.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.tileentity.TileEntity;
 
@@ -18,14 +16,14 @@
 
 public class CraftingCycleRecipe extends CoordinatesPacket {
 
-	public CraftingCycleRecipe(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private boolean down;
 
+	public CraftingCycleRecipe(int id) {
+		super(id);
+	}
+
 	@Override
 	public void processPacket(EntityPlayer player) {
 		TileEntity table = this.getTile(player.getEntityWorld(), TileEntity.class);
@@ -42,13 +40,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(down);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		down = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/packets/block/CraftingSetType.java b/common/logisticspipes/network/packets/block/CraftingSetType.java
index 96dee2e859..4f122648fd 100644
--- a/common/logisticspipes/network/packets/block/CraftingSetType.java
+++ b/common/logisticspipes/network/packets/block/CraftingSetType.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.tileentity.TileEntity;
 
@@ -19,14 +17,14 @@
 
 public class CraftingSetType extends CoordinatesPacket {
 
-	public CraftingSetType(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private ItemIdentifier targetType;
 
+	public CraftingSetType(int id) {
+		super(id);
+	}
+
 	@Override
 	public void processPacket(EntityPlayer player) {
 		TileEntity table = this.getTile(player.getEntityWorld(), TileEntity.class);
@@ -45,13 +43,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeItemIdentifier(targetType);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		targetType = input.readItemIdentifier();
 	}
diff --git a/common/logisticspipes/network/packets/block/PowerPacketLaser.java b/common/logisticspipes/network/packets/block/PowerPacketLaser.java
index 537fa8d97e..0d0048d83d 100644
--- a/common/logisticspipes/network/packets/block/PowerPacketLaser.java
+++ b/common/logisticspipes/network/packets/block/PowerPacketLaser.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -16,36 +14,31 @@
 
 public class PowerPacketLaser extends CoordinatesPacket {
 
-	public PowerPacketLaser(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private ForgeDirection dir;
-
 	@Getter
 	@Setter
 	private int color;
-
 	@Getter
 	@Setter
 	private boolean reverse;
-
 	@Getter
 	@Setter
 	private boolean renderBall;
-
 	@Getter
 	@Setter
 	private float length;
-
 	@Getter
 	@Setter
 	private boolean remove = false;
 
+	public PowerPacketLaser(int id) {
+		super(id);
+	}
+
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		length = input.readFloat();
 		dir = input.readForgeDirection();
@@ -66,7 +59,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeFloat(length);
 		output.writeForgeDirection(dir);
diff --git a/common/logisticspipes/network/packets/block/PowerProviderLevel.java b/common/logisticspipes/network/packets/block/PowerProviderLevel.java
index a3667cac83..1b00dd65cb 100644
--- a/common/logisticspipes/network/packets/block/PowerProviderLevel.java
+++ b/common/logisticspipes/network/packets/block/PowerProviderLevel.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.blocks.powertile.LogisticsPowerProviderTileEntity;
@@ -28,13 +26,13 @@ public PowerProviderLevel setDouble(double d) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		setDouble(input.readDouble());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeDouble(getDouble());
 	}
diff --git a/common/logisticspipes/network/packets/block/RemoveAmoundTask.java b/common/logisticspipes/network/packets/block/RemoveAmoundTask.java
index b5b7a096fb..d316830cd0 100644
--- a/common/logisticspipes/network/packets/block/RemoveAmoundTask.java
+++ b/common/logisticspipes/network/packets/block/RemoveAmoundTask.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
 import java.util.Iterator;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -40,13 +39,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeItemIdentifier(item);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		item = input.readItemIdentifier();
 	}
diff --git a/common/logisticspipes/network/packets/block/RunningCraftingTasks.java b/common/logisticspipes/network/packets/block/RunningCraftingTasks.java
index f513d23914..a7d86f69ab 100644
--- a/common/logisticspipes/network/packets/block/RunningCraftingTasks.java
+++ b/common/logisticspipes/network/packets/block/RunningCraftingTasks.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -33,12 +32,12 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeCollection(identList, LPDataOutput::writeItemIdentifierStack);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		identList = input.readArrayList(LPDataInput::readItemIdentifierStack);
 	}
 
diff --git a/common/logisticspipes/network/packets/block/SecurityStationId.java b/common/logisticspipes/network/packets/block/SecurityStationId.java
index 05967b09aa..413b35548d 100644
--- a/common/logisticspipes/network/packets/block/SecurityStationId.java
+++ b/common/logisticspipes/network/packets/block/SecurityStationId.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.block;
 
-import java.io.IOException;
 import java.util.UUID;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -38,14 +37,14 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeLong(uuid.getMostSignificantBits());
 		output.writeLong(uuid.getLeastSignificantBits());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		uuid = new UUID(input.readLong(), input.readLong());
 	}
diff --git a/common/logisticspipes/network/packets/chassis/ChassisGUI.java b/common/logisticspipes/network/packets/chassis/ChassisGUI.java
index db4673bf77..840cd529ae 100644
--- a/common/logisticspipes/network/packets/chassis/ChassisGUI.java
+++ b/common/logisticspipes/network/packets/chassis/ChassisGUI.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.chassis;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -26,13 +24,13 @@ public ChassisGUI(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(buttonID);
 		super.writeData(output);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		buttonID = input.readInt();
 		super.readData(input);
 	}
diff --git a/common/logisticspipes/network/packets/chassis/ChestGuiClosed.java b/common/logisticspipes/network/packets/chassis/ChestGuiClosed.java
index 1f16026339..e64b4bf16e 100644
--- a/common/logisticspipes/network/packets/chassis/ChestGuiClosed.java
+++ b/common/logisticspipes/network/packets/chassis/ChestGuiClosed.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.chassis;
 
-import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.List;
 
@@ -19,7 +18,7 @@ public ChestGuiClosed(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -38,7 +37,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/chassis/ChestGuiOpened.java b/common/logisticspipes/network/packets/chassis/ChestGuiOpened.java
index d4d47caea2..969de01cc5 100644
--- a/common/logisticspipes/network/packets/chassis/ChestGuiOpened.java
+++ b/common/logisticspipes/network/packets/chassis/ChestGuiOpened.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.chassis;
 
-import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.List;
 
@@ -21,7 +20,7 @@ public ChestGuiOpened(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -40,7 +39,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/chassis/EnableQuickSortMarker.java b/common/logisticspipes/network/packets/chassis/EnableQuickSortMarker.java
index 3676a32145..30c87b5cc8 100644
--- a/common/logisticspipes/network/packets/chassis/EnableQuickSortMarker.java
+++ b/common/logisticspipes/network/packets/chassis/EnableQuickSortMarker.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.chassis;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ModernPacket;
@@ -16,7 +14,7 @@ public EnableQuickSortMarker(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -24,7 +22,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/cpipe/CPipeCleanupStatus.java b/common/logisticspipes/network/packets/cpipe/CPipeCleanupStatus.java
index 16bfbb3af6..6842bc3b85 100644
--- a/common/logisticspipes/network/packets/cpipe/CPipeCleanupStatus.java
+++ b/common/logisticspipes/network/packets/cpipe/CPipeCleanupStatus.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.cpipe;
 
-import java.io.IOException;
-
 import net.minecraft.client.Minecraft;
 import net.minecraft.entity.player.EntityPlayer;
 
@@ -45,13 +43,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(mode);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		mode = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/packets/cpipe/CPipeSatelliteId.java b/common/logisticspipes/network/packets/cpipe/CPipeSatelliteId.java
index 59d51ebf15..14368b287f 100644
--- a/common/logisticspipes/network/packets/cpipe/CPipeSatelliteId.java
+++ b/common/logisticspipes/network/packets/cpipe/CPipeSatelliteId.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.cpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -29,13 +27,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(pipeId);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		pipeId = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/debug/PipeDebugLogAskForTarget.java b/common/logisticspipes/network/packets/debug/PipeDebugLogAskForTarget.java
index e7a46a0eee..08c66ae13f 100644
--- a/common/logisticspipes/network/packets/debug/PipeDebugLogAskForTarget.java
+++ b/common/logisticspipes/network/packets/debug/PipeDebugLogAskForTarget.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.MovingObjectPosition.MovingObjectType;
@@ -20,7 +18,7 @@ public PipeDebugLogAskForTarget(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -31,7 +29,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/debug/SendNewLogLine.java b/common/logisticspipes/network/packets/debug/SendNewLogLine.java
index 98041a2fb1..82ac1e4bc7 100644
--- a/common/logisticspipes/network/packets/debug/SendNewLogLine.java
+++ b/common/logisticspipes/network/packets/debug/SendNewLogLine.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -27,7 +25,7 @@ public SendNewLogLine(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		windowID = input.readInt();
 		line = input.readUTF();
 	}
@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(windowID);
 		output.writeUTF(line);
 	}
diff --git a/common/logisticspipes/network/packets/debug/SendNewLogWindow.java b/common/logisticspipes/network/packets/debug/SendNewLogWindow.java
index 5dba058ae7..32b2a02b47 100644
--- a/common/logisticspipes/network/packets/debug/SendNewLogWindow.java
+++ b/common/logisticspipes/network/packets/debug/SendNewLogWindow.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -27,7 +25,7 @@ public SendNewLogWindow(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		windowID = input.readInt();
 		title = input.readUTF();
 	}
@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(windowID);
 		output.writeUTF(title);
 	}
diff --git a/common/logisticspipes/network/packets/debug/UpdateStatusEntries.java b/common/logisticspipes/network/packets/debug/UpdateStatusEntries.java
index 46c92031cb..8f6aaa1f59 100644
--- a/common/logisticspipes/network/packets/debug/UpdateStatusEntries.java
+++ b/common/logisticspipes/network/packets/debug/UpdateStatusEntries.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.debug;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -31,12 +30,12 @@ public UpdateStatusEntries(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		windowID = input.readInt();
 		status = input.readArrayList(new IReadListObject<StatusEntry>() {
 
 			@Override
-			public StatusEntry readObject(LPDataInput input) throws IOException {
+			public StatusEntry readObject(LPDataInput input) {
 				StatusEntry status = new StatusEntry();
 				status.name = input.readUTF();
 				if (input.readBoolean()) {
@@ -53,12 +52,12 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(windowID);
 		output.writeCollection(status, new IWriteListObject<StatusEntry>() {
 
 			@Override
-			public void writeObject(LPDataOutput output, StatusEntry entry) throws IOException {
+			public void writeObject(LPDataOutput output, StatusEntry entry) {
 				output.writeUTF(entry.name);
 				output.writeBoolean(entry.subEntry != null);
 				if (entry.subEntry != null) {
diff --git a/common/logisticspipes/network/packets/debuggui/DebugAskForTarget.java b/common/logisticspipes/network/packets/debuggui/DebugAskForTarget.java
index 82934b1bd8..342a8b19af 100644
--- a/common/logisticspipes/network/packets/debuggui/DebugAskForTarget.java
+++ b/common/logisticspipes/network/packets/debuggui/DebugAskForTarget.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debuggui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.MovingObjectPosition;
 import cpw.mods.fml.client.FMLClientHandler;
@@ -19,7 +17,7 @@ public DebugAskForTarget(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -28,15 +26,15 @@ public void processPacket(EntityPlayer player) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.None));
 		} else if (box.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.Block)
-					.setAdditions(new Object[] { box.blockX, box.blockY, box.blockZ }));
+					.setAdditions(new int[] { box.blockX, box.blockY, box.blockZ }));
 		} else if (box.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.Entity)
-					.setAdditions(new Object[] { box.entityHit.getEntityId() }));
+					.setAdditions(new int[] { box.entityHit.getEntityId() }));
 		}
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/debuggui/DebugDataPacket.java b/common/logisticspipes/network/packets/debuggui/DebugDataPacket.java
index f6b37265c5..519d814a77 100644
--- a/common/logisticspipes/network/packets/debuggui/DebugDataPacket.java
+++ b/common/logisticspipes/network/packets/debuggui/DebugDataPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debuggui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -27,7 +25,7 @@ public DebugDataPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		payload = input.readByteArray();
 		identifier = input.readInt();
 	}
@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeByteArray(payload);
 		output.writeInt(identifier);
 	}
diff --git a/common/logisticspipes/network/packets/debuggui/DebugPanelOpen.java b/common/logisticspipes/network/packets/debuggui/DebugPanelOpen.java
index e32cca6976..86ca17b917 100644
--- a/common/logisticspipes/network/packets/debuggui/DebugPanelOpen.java
+++ b/common/logisticspipes/network/packets/debuggui/DebugPanelOpen.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.debuggui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -32,13 +30,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		setName(input.readUTF());
 		setIdentification(input.readInt());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeUTF(getName());
 		output.writeInt(getIdentification());
 	}
diff --git a/common/logisticspipes/network/packets/debuggui/DebugTargetResponse.java b/common/logisticspipes/network/packets/debuggui/DebugTargetResponse.java
index 7b94505a2f..8f50f71a64 100644
--- a/common/logisticspipes/network/packets/debuggui/DebugTargetResponse.java
+++ b/common/logisticspipes/network/packets/debuggui/DebugTargetResponse.java
@@ -1,13 +1,5 @@
 package logisticspipes.network.packets.debuggui;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutput;
-import java.io.ObjectOutputStream;
-
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
@@ -29,40 +21,21 @@
 
 public class DebugTargetResponse extends ModernPacket {
 
-	public DebugTargetResponse(int id) {
-		super(id);
-	}
-
-	public enum TargetMode {
-		Block,
-		Entity,
-		None
-	}
-
 	@Getter
 	@Setter
 	private TargetMode mode;
-
 	@Getter
 	@Setter
-	private Object[] additions = new Object[0];
+	private int[] additions = new int[0];
+
+	public DebugTargetResponse(int id) {
+		super(id);
+	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		mode = TargetMode.values()[input.readByte()];
-		int size = input.readInt();
-		additions = new Object[size];
-		for (int i = 0; i < size; i++) {
-			byte[] bytes = input.readByteArray();
-			ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
-			ObjectInput in = new ObjectInputStream(bis);
-			try {
-				Object o = in.readObject();
-				additions[i] = o;
-			} catch (ClassNotFoundException e) {
-				throw new UnsupportedOperationException(e);
-			}
-		}
+		additions = input.readIntArray();
 	}
 
 	@Override
@@ -70,9 +43,9 @@ public void processPacket(final EntityPlayer player) {
 		if (mode == TargetMode.None) {
 			player.addChatComponentMessage(new ChatComponentText(ChatColor.RED + "No Target Found"));
 		} else if (mode == TargetMode.Block) {
-			int x = (Integer) additions[0];
-			int y = (Integer) additions[1];
-			int z = (Integer) additions[2];
+			int x = additions[0];
+			int y = additions[1];
+			int z = additions[2];
 			player.addChatComponentMessage(new ChatComponentText("Checking Block at: x:" + x + " y:" + y + " z:" + z));
 			Block id = player.worldObj.getBlock(x, y, z);
 			player.addChatComponentMessage(new ChatComponentText("Found Block with Id: " + id.getClass()));
@@ -94,7 +67,7 @@ public void processPacket(final EntityPlayer player) {
 				MainProxy.sendPacketToPlayer(PacketHandler.getPacket(OpenChatGui.class), player);
 			}
 		} else if (mode == TargetMode.Entity) {
-			int entityId = (Integer) additions[0];
+			int entityId = additions[0];
 			final Entity entity = player.worldObj.getEntityByID(entityId);
 			if (entity == null) {
 				player.addChatComponentMessage(new ChatComponentText(ChatColor.RED + "No Entity found"));
@@ -116,16 +89,9 @@ public void processPacket(final EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeByte(mode.ordinal());
-		output.writeInt(additions.length);
-		for (Object addition : additions) {
-			ByteArrayOutputStream bos = new ByteArrayOutputStream();
-			ObjectOutput out = null;
-			out = new ObjectOutputStream(bos);
-			out.writeObject(addition);
-			output.writeByteArray(bos.toByteArray());
-		}
+		output.writeIntArray(additions);
 	}
 
 	@Override
@@ -137,4 +103,10 @@ public ModernPacket template() {
 	public boolean isCompressable() {
 		return true;
 	}
+
+	public enum TargetMode {
+		Block,
+		Entity,
+		None
+	}
 }
diff --git a/common/logisticspipes/network/packets/gui/DummyContainerSlotClick.java b/common/logisticspipes/network/packets/gui/DummyContainerSlotClick.java
index 264504d3b5..1db98db366 100644
--- a/common/logisticspipes/network/packets/gui/DummyContainerSlotClick.java
+++ b/common/logisticspipes/network/packets/gui/DummyContainerSlotClick.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.gui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.inventory.Slot;
@@ -38,7 +36,7 @@ public DummyContainerSlotClick(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		slotId = input.readInt();
 		stack = input.readItemIdentifierStack().makeNormalStack();
 		button = input.readInt();
@@ -56,7 +54,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(slotId);
 		output.writeItemIdentifierStack(ItemIdentifierStack.getFromStack(stack));
 		output.writeInt(button);
diff --git a/common/logisticspipes/network/packets/gui/FuzzySlotSettingsPacket.java b/common/logisticspipes/network/packets/gui/FuzzySlotSettingsPacket.java
index 8b0f61a57c..61fdc9f673 100644
--- a/common/logisticspipes/network/packets/gui/FuzzySlotSettingsPacket.java
+++ b/common/logisticspipes/network/packets/gui/FuzzySlotSettingsPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.gui;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -28,7 +27,7 @@ public FuzzySlotSettingsPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		slotNumber = input.readInt();
 		flags = input.readBitSet();
 	}
@@ -41,7 +40,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(slotNumber);
 		output.writeBitSet(flags);
 	}
diff --git a/common/logisticspipes/network/packets/gui/GUIPacket.java b/common/logisticspipes/network/packets/gui/GUIPacket.java
index 195f3aad85..b54dddb9d0 100644
--- a/common/logisticspipes/network/packets/gui/GUIPacket.java
+++ b/common/logisticspipes/network/packets/gui/GUIPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.gui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -41,7 +39,7 @@ public GUIPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		guiID = input.readInt();
 		windowID = input.readInt();
 		guiData = input.readByteArray();
@@ -54,7 +52,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(guiID);
 		output.writeInt(windowID);
 		output.writeByteArray(guiData);
diff --git a/common/logisticspipes/network/packets/gui/GuiReopenPacket.java b/common/logisticspipes/network/packets/gui/GuiReopenPacket.java
index f134409a8a..9d5402bba5 100644
--- a/common/logisticspipes/network/packets/gui/GuiReopenPacket.java
+++ b/common/logisticspipes/network/packets/gui/GuiReopenPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.gui;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -19,22 +17,22 @@ public class GuiReopenPacket extends CoordinatesPacket {
 	@Setter
 	private int guiID;
 
+	public GuiReopenPacket(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(getGuiID());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		guiID = input.readInt();
 	}
 
-	public GuiReopenPacket(int id) {
-		super(id);
-	}
-
 	@Override
 	public void processPacket(EntityPlayer player) {
 		player.openGui(LogisticsPipes.instance, getGuiID(), player.worldObj, getPosX(), getPosY(), getPosZ());
diff --git a/common/logisticspipes/network/packets/gui/OpenChatGui.java b/common/logisticspipes/network/packets/gui/OpenChatGui.java
index 0bcb115bd7..0eeef65705 100644
--- a/common/logisticspipes/network/packets/gui/OpenChatGui.java
+++ b/common/logisticspipes/network/packets/gui/OpenChatGui.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.gui;
 
-import java.io.IOException;
-
 import net.minecraft.client.gui.GuiChat;
 import net.minecraft.entity.player.EntityPlayer;
 import cpw.mods.fml.client.FMLClientHandler;
@@ -18,7 +16,7 @@ public OpenChatGui(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	@ClientSideOnlyMethodContent
@@ -27,7 +25,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/hud/HUDSettingsPacket.java b/common/logisticspipes/network/packets/hud/HUDSettingsPacket.java
index 40a6e50dd0..65e9155343 100644
--- a/common/logisticspipes/network/packets/hud/HUDSettingsPacket.java
+++ b/common/logisticspipes/network/packets/hud/HUDSettingsPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.hud;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.ChatComponentTranslation;
 
@@ -99,14 +97,14 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		buttonId = input.readInt();
 		state = input.readBoolean();
 		slot = input.readInt();
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(buttonId);
 		output.writeBoolean(state);
 		output.writeInt(slot);
diff --git a/common/logisticspipes/network/packets/module/ApiaristAnalyserMode.java b/common/logisticspipes/network/packets/module/ApiaristAnalyserMode.java
index 1e3440be74..b87c136c4f 100644
--- a/common/logisticspipes/network/packets/module/ApiaristAnalyserMode.java
+++ b/common/logisticspipes/network/packets/module/ApiaristAnalyserMode.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.module;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,13 +36,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(mode);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		mode = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/module/BeeModuleSetBeePacket.java b/common/logisticspipes/network/packets/module/BeeModuleSetBeePacket.java
index 4dd36d7883..d0afda52d6 100644
--- a/common/logisticspipes/network/packets/module/BeeModuleSetBeePacket.java
+++ b/common/logisticspipes/network/packets/module/BeeModuleSetBeePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.module;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -67,7 +65,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(integer2);
 		output.writeInt(integer3);
@@ -79,7 +77,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		integer2 = input.readInt();
 		integer3 = input.readInt();
diff --git a/common/logisticspipes/network/packets/module/ItemSinkDefaultPacket.java b/common/logisticspipes/network/packets/module/ItemSinkDefaultPacket.java
index 71f4f58e98..2b002d85e1 100644
--- a/common/logisticspipes/network/packets/module/ItemSinkDefaultPacket.java
+++ b/common/logisticspipes/network/packets/module/ItemSinkDefaultPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.module;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -24,13 +22,13 @@ public ItemSinkDefaultPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(isDefault);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		isDefault = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/packets/module/ModuleBasedItemSinkList.java b/common/logisticspipes/network/packets/module/ModuleBasedItemSinkList.java
index 6f482a1baf..a01a5f25bd 100644
--- a/common/logisticspipes/network/packets/module/ModuleBasedItemSinkList.java
+++ b/common/logisticspipes/network/packets/module/ModuleBasedItemSinkList.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.module;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
 
@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeNBTTagCompound(nbt);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		nbt = input.readNBTTagCompound();
 	}
diff --git a/common/logisticspipes/network/packets/module/SupplierPipeLimitedPacket.java b/common/logisticspipes/network/packets/module/SupplierPipeLimitedPacket.java
index af1c9db6d0..e1a2219124 100644
--- a/common/logisticspipes/network/packets/module/SupplierPipeLimitedPacket.java
+++ b/common/logisticspipes/network/packets/module/SupplierPipeLimitedPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.module;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import cpw.mods.fml.client.FMLClientHandler;
 
@@ -55,13 +53,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(isLimited);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		isLimited = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/packets/modules/CCBasedQuickSortMode.java b/common/logisticspipes/network/packets/modules/CCBasedQuickSortMode.java
index 020b6361c7..dff182d23a 100644
--- a/common/logisticspipes/network/packets/modules/CCBasedQuickSortMode.java
+++ b/common/logisticspipes/network/packets/modules/CCBasedQuickSortMode.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.modules;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,13 +36,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(timeOut);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		timeOut = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/modules/CCBasedQuickSortSinkSize.java b/common/logisticspipes/network/packets/modules/CCBasedQuickSortSinkSize.java
index 514beedee0..78c1824e28 100644
--- a/common/logisticspipes/network/packets/modules/CCBasedQuickSortSinkSize.java
+++ b/common/logisticspipes/network/packets/modules/CCBasedQuickSortSinkSize.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.modules;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,13 +36,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(sinkSize);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		sinkSize = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/modules/ItemSinkFuzzy.java b/common/logisticspipes/network/packets/modules/ItemSinkFuzzy.java
index 94cc94dfa6..0347f86853 100644
--- a/common/logisticspipes/network/packets/modules/ItemSinkFuzzy.java
+++ b/common/logisticspipes/network/packets/modules/ItemSinkFuzzy.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.modules;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -55,7 +54,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(pos);
 		if (pos != -1) {
@@ -67,7 +66,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		pos = input.readInt();
 		if (pos != -1) {
diff --git a/common/logisticspipes/network/packets/modules/ProviderModuleMode.java b/common/logisticspipes/network/packets/modules/ProviderModuleMode.java
index 35a617568f..a536e75478 100644
--- a/common/logisticspipes/network/packets/modules/ProviderModuleMode.java
+++ b/common/logisticspipes/network/packets/modules/ProviderModuleMode.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.modules;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,13 +36,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(mode);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		mode = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/modules/SupplierPipeMode.java b/common/logisticspipes/network/packets/modules/SupplierPipeMode.java
index 93d3545f90..5a7f433b25 100644
--- a/common/logisticspipes/network/packets/modules/SupplierPipeMode.java
+++ b/common/logisticspipes/network/packets/modules/SupplierPipeMode.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.modules;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import cpw.mods.fml.client.FMLClientHandler;
 
@@ -49,13 +47,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		hasPatternUpgrade = input.readBoolean();
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(hasPatternUpgrade);
 	}
diff --git a/common/logisticspipes/network/packets/multiblock/MultiBlockCoordinatesPacket.java b/common/logisticspipes/network/packets/multiblock/MultiBlockCoordinatesPacket.java
index 0d2092360a..c67ce1c3fc 100644
--- a/common/logisticspipes/network/packets/multiblock/MultiBlockCoordinatesPacket.java
+++ b/common/logisticspipes/network/packets/multiblock/MultiBlockCoordinatesPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.multiblock;
 
-import java.io.IOException;
 import java.util.List;
 import java.util.Set;
 
@@ -27,24 +26,24 @@ public class MultiBlockCoordinatesPacket extends CoordinatesPacket {
 	@Setter
 	private List<CoreMultiBlockPipe.SubBlockTypeForShare> subTypes;
 
+	public MultiBlockCoordinatesPacket(int id) {
+		super(id);
+	}
+
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeCollection(targetPos, LPDataOutput::writeLPPosition);
 		output.writeCollection(subTypes, LPDataOutput::writeEnum);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		targetPos = input.readSet(LPDataInput::readLPPosition);
 		subTypes = input.readArrayList(data1 -> data1.readEnum(CoreMultiBlockPipe.SubBlockTypeForShare.class));
 	}
 
-	public MultiBlockCoordinatesPacket(int id) {
-		super(id);
-	}
-
 	@Override
 	public void processPacket(EntityPlayer player) {
 		LogisticsTileGenericSubMultiBlock block = this.getTile(player.getEntityWorld(), LogisticsTileGenericSubMultiBlock.class);
diff --git a/common/logisticspipes/network/packets/orderer/ComponentList.java b/common/logisticspipes/network/packets/orderer/ComponentList.java
index 95ccfebaf4..b0095c11ef 100644
--- a/common/logisticspipes/network/packets/orderer/ComponentList.java
+++ b/common/logisticspipes/network/packets/orderer/ComponentList.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.orderer;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 
@@ -60,7 +59,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeCollection(used, LPDataOutput::writeResource);
 		output.writeCollection(missing, LPDataOutput::writeResource);
 		// ToDo: ???
@@ -68,7 +67,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		used = input.readArrayList(LPDataInput::readResource);
 		missing = input.readArrayList(LPDataInput::readResource);
 	}
diff --git a/common/logisticspipes/network/packets/orderer/MissingItems.java b/common/logisticspipes/network/packets/orderer/MissingItems.java
index 5104d02150..314fdcdd59 100644
--- a/common/logisticspipes/network/packets/orderer/MissingItems.java
+++ b/common/logisticspipes/network/packets/orderer/MissingItems.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.orderer;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 
@@ -63,13 +62,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeCollection(items, LPDataOutput::writeResource);
 		output.writeBoolean(isFlag());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		items = input.readArrayList(LPDataInput::readResource);
 		setFlag(input.readBoolean());
 	}
diff --git a/common/logisticspipes/network/packets/orderer/OrdererWatchPacket.java b/common/logisticspipes/network/packets/orderer/OrdererWatchPacket.java
index 8c9d89c7a6..267e9c88f7 100644
--- a/common/logisticspipes/network/packets/orderer/OrdererWatchPacket.java
+++ b/common/logisticspipes/network/packets/orderer/OrdererWatchPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.orderer;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -31,14 +29,14 @@ public OrdererWatchPacket(int id) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeResource(stack);
 		output.writeLinkedLogisticsOrderList(orders);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		stack = input.readResource();
 		orders = input.readLinkedLogisticsOrderList();
diff --git a/common/logisticspipes/network/packets/pipe/AskForOpenTarget.java b/common/logisticspipes/network/packets/pipe/AskForOpenTarget.java
index ba04ee7079..bdaa45c8a9 100644
--- a/common/logisticspipes/network/packets/pipe/AskForOpenTarget.java
+++ b/common/logisticspipes/network/packets/pipe/AskForOpenTarget.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.MovingObjectPosition.MovingObjectType;
@@ -20,7 +18,7 @@ public AskForOpenTarget(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -32,7 +30,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/pipe/CraftingPipeUpdatePacket.java b/common/logisticspipes/network/packets/pipe/CraftingPipeUpdatePacket.java
index 6227e2ecb3..1575261340 100644
--- a/common/logisticspipes/network/packets/pipe/CraftingPipeUpdatePacket.java
+++ b/common/logisticspipes/network/packets/pipe/CraftingPipeUpdatePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -54,7 +52,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeIntArray(amount);
 		output.writeIntArray(liquidSatelliteIdArray);
@@ -65,7 +63,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		amount = input.readIntArray();
 		liquidSatelliteIdArray = input.readIntArray();
diff --git a/common/logisticspipes/network/packets/pipe/FindMostLikelyRecipeComponents.java b/common/logisticspipes/network/packets/pipe/FindMostLikelyRecipeComponents.java
index 4f2dbbf61c..71b1c9fe65 100644
--- a/common/logisticspipes/network/packets/pipe/FindMostLikelyRecipeComponents.java
+++ b/common/logisticspipes/network/packets/pipe/FindMostLikelyRecipeComponents.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -98,7 +97,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		content = input.readArrayList(input1 -> {
 			GuiRecipeImport.Canidates can = new GuiRecipeImport.Canidates(new TreeSet<>());
@@ -108,7 +107,7 @@ public void readData(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeCollection(content, (data, object) -> data.writeCollection(object.order,
 				(IWriteListObject<ItemIdentifierStack>) LPDataOutput::writeItemIdentifierStack));
diff --git a/common/logisticspipes/network/packets/pipe/ItemAmountSignUpdatePacket.java b/common/logisticspipes/network/packets/pipe/ItemAmountSignUpdatePacket.java
index 5038c2fe4c..b404e42218 100644
--- a/common/logisticspipes/network/packets/pipe/ItemAmountSignUpdatePacket.java
+++ b/common/logisticspipes/network/packets/pipe/ItemAmountSignUpdatePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -44,7 +42,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		if (input.readBoolean()) {
 			stack = input.readItemIdentifierStack();
@@ -52,7 +50,7 @@ public void readData(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		if (stack == null) {
 			output.writeBoolean(false);
diff --git a/common/logisticspipes/network/packets/pipe/ItemBufferSyncPacket.java b/common/logisticspipes/network/packets/pipe/ItemBufferSyncPacket.java
index a20e9e1f47..5367b99c08 100644
--- a/common/logisticspipes/network/packets/pipe/ItemBufferSyncPacket.java
+++ b/common/logisticspipes/network/packets/pipe/ItemBufferSyncPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ListSyncPacket;
@@ -26,13 +24,12 @@ public ItemBufferSyncPacket(int id) {
 
 	@Override
 	public void writeObject(LPDataOutput output,
-			Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> object) throws IOException {
+			Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> object) {
 		output.writeItemIdentifierStack(object.getValue1());
 	}
 
 	@Override
-	public Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> readObject(LPDataInput input)
-			throws IOException {
+	public Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> readObject(LPDataInput input) {
 		return new Triplet<>(input.readItemIdentifierStack(), null, null);
 	}
 
diff --git a/common/logisticspipes/network/packets/pipe/MostLikelyRecipeComponentsResponse.java b/common/logisticspipes/network/packets/pipe/MostLikelyRecipeComponentsResponse.java
index b6be103188..08af5592b2 100644
--- a/common/logisticspipes/network/packets/pipe/MostLikelyRecipeComponentsResponse.java
+++ b/common/logisticspipes/network/packets/pipe/MostLikelyRecipeComponentsResponse.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.client.Minecraft;
@@ -31,7 +30,7 @@ public MostLikelyRecipeComponentsResponse(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		response = input.readArrayList(LPDataInput::readInt);
 	}
 
@@ -61,7 +60,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeCollection(response, LPDataOutput::writeInt);
 	}
 
diff --git a/common/logisticspipes/network/packets/pipe/ParticleFX.java b/common/logisticspipes/network/packets/pipe/ParticleFX.java
index 0b34cbed6b..ad2d87b86c 100644
--- a/common/logisticspipes/network/packets/pipe/ParticleFX.java
+++ b/common/logisticspipes/network/packets/pipe/ParticleFX.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 
@@ -21,22 +20,22 @@
 
 public class ParticleFX extends CoordinatesPacket {
 
-	public ParticleFX(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	@NonNull
 	private Collection<ParticleCount> particles;
 
+	public ParticleFX(int id) {
+		super(id);
+	}
+
 	@Override
 	public ModernPacket template() {
 		return new ParticleFX(getId());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		int nparticles = input.readInt();
 		particles = new ArrayList<>(nparticles);
@@ -48,7 +47,7 @@ public void readData(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(particles.size());
 		for (ParticleCount pc : particles) {
diff --git a/common/logisticspipes/network/packets/pipe/PipeContentPacket.java b/common/logisticspipes/network/packets/pipe/PipeContentPacket.java
index db17380d15..85f14a26fc 100644
--- a/common/logisticspipes/network/packets/pipe/PipeContentPacket.java
+++ b/common/logisticspipes/network/packets/pipe/PipeContentPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.lang.ref.WeakReference;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -18,10 +17,6 @@
 
 public class PipeContentPacket extends ModernPacket {
 
-	public PipeContentPacket(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private ItemIdentifierStack item;
@@ -29,8 +24,12 @@ public PipeContentPacket(int id) {
 	@Setter
 	private int travelId;
 
+	public PipeContentPacket(int id) {
+		super(id);
+	}
+
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		item = input.readItemIdentifierStack();
 		travelId = input.readInt();
 	}
@@ -54,7 +53,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeItemIdentifierStack(item);
 		output.writeInt(travelId);
 	}
diff --git a/common/logisticspipes/network/packets/pipe/PipeDebugAskForTarget.java b/common/logisticspipes/network/packets/pipe/PipeDebugAskForTarget.java
index c24e880334..2826034e35 100644
--- a/common/logisticspipes/network/packets/pipe/PipeDebugAskForTarget.java
+++ b/common/logisticspipes/network/packets/pipe/PipeDebugAskForTarget.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ChatComponentText;
@@ -31,7 +29,7 @@ public PipeDebugAskForTarget(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		isServer = input.readBoolean();
 	}
 
@@ -56,7 +54,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeBoolean(isServer);
 	}
 
diff --git a/common/logisticspipes/network/packets/pipe/PipeFluidUpdate.java b/common/logisticspipes/network/packets/pipe/PipeFluidUpdate.java
index f12a0c27df..8d8c02859e 100644
--- a/common/logisticspipes/network/packets/pipe/PipeFluidUpdate.java
+++ b/common/logisticspipes/network/packets/pipe/PipeFluidUpdate.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -21,18 +20,17 @@
 
 public class PipeFluidUpdate extends CoordinatesPacket {
 
-	public PipeFluidUpdate(int id) {
-		super(id);
-	}
-
 	@Getter(value = AccessLevel.PRIVATE)
 	@Setter
 	private FluidStack[] renderCache = new FluidStack[ForgeDirection.values().length];
-
 	private BitSet bits = new BitSet();
 
+	public PipeFluidUpdate(int id) {
+		super(id);
+	}
+
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		bits = input.readBitSet();
 		for (int i = 0; i < renderCache.length; i++) {
@@ -43,7 +41,7 @@ public void readData(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		for (int i = 0; i < renderCache.length; i++) {
 			bits.set(i, renderCache[i] != null);
diff --git a/common/logisticspipes/network/packets/pipe/PipeManagerContentPacket.java b/common/logisticspipes/network/packets/pipe/PipeManagerContentPacket.java
index df2d8df137..1d894877d2 100644
--- a/common/logisticspipes/network/packets/pipe/PipeManagerContentPacket.java
+++ b/common/logisticspipes/network/packets/pipe/PipeManagerContentPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -49,7 +48,7 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		for (LogisticsOrder order : manager) {
 			output.writeByte(1);
@@ -59,7 +58,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		clientOrder = new LinkedList<>();
 		while (input.readByte() == 1) {
diff --git a/common/logisticspipes/network/packets/pipe/PipeManagerWatchingPacket.java b/common/logisticspipes/network/packets/pipe/PipeManagerWatchingPacket.java
index ecd0011557..5e2c313da4 100644
--- a/common/logisticspipes/network/packets/pipe/PipeManagerWatchingPacket.java
+++ b/common/logisticspipes/network/packets/pipe/PipeManagerWatchingPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -44,13 +42,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeBoolean(start);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		start = input.readBoolean();
 	}
diff --git a/common/logisticspipes/network/packets/pipe/PipePositionPacket.java b/common/logisticspipes/network/packets/pipe/PipePositionPacket.java
index 005d9a2139..b38b7053c4 100644
--- a/common/logisticspipes/network/packets/pipe/PipePositionPacket.java
+++ b/common/logisticspipes/network/packets/pipe/PipePositionPacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -49,7 +47,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(travelId);
 		output.writeFloat(speed);
@@ -60,7 +58,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		travelId = input.readInt();
 		speed = input.readFloat();
diff --git a/common/logisticspipes/network/packets/pipe/PipeSignTypes.java b/common/logisticspipes/network/packets/pipe/PipeSignTypes.java
index cb4e31a4b5..6dde2d477c 100644
--- a/common/logisticspipes/network/packets/pipe/PipeSignTypes.java
+++ b/common/logisticspipes/network/packets/pipe/PipeSignTypes.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -17,14 +16,14 @@
 
 public class PipeSignTypes extends CoordinatesPacket {
 
-	public PipeSignTypes(int id) {
-		super(id);
-	}
-
 	@Getter
 	@Setter
 	private List<Integer> types;
 
+	public PipeSignTypes(int id) {
+		super(id);
+	}
+
 	@Override
 	public void processPacket(EntityPlayer player) {
 		LogisticsTileGenericPipe pipe = this.getPipe(player.getEntityWorld(), LTGPCompletionCheck.PIPE);
@@ -35,13 +34,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeCollection(types, LPDataOutput::writeInt);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		types = input.readArrayList(LPDataInput::readInt);
 	}
diff --git a/common/logisticspipes/network/packets/pipe/PipeTileStatePacket.java b/common/logisticspipes/network/packets/pipe/PipeTileStatePacket.java
index 5688cc17fb..3424570574 100644
--- a/common/logisticspipes/network/packets/pipe/PipeTileStatePacket.java
+++ b/common/logisticspipes/network/packets/pipe/PipeTileStatePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -51,15 +49,11 @@ public void processPacket(EntityPlayer player) {
 		if (pipe == null) {
 			return;
 		}
-		try {
-			LPDataIOWrapper.provideData(bytesRenderState, pipe.renderState::readData);
-			LPDataIOWrapper.provideData(bytesCoreState, pipe.coreState::readData);
-			LPDataIOWrapper.provideData(bytesBCPluggableState, pipe.bcPlugableState::readData);
-			pipe.afterStateUpdated();
-			LPDataIOWrapper.provideData(bytesPipe, pipe.pipe::readData);
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
+		LPDataIOWrapper.provideData(bytesRenderState, pipe.renderState::readData);
+		LPDataIOWrapper.provideData(bytesCoreState, pipe.coreState::readData);
+		LPDataIOWrapper.provideData(bytesBCPluggableState, pipe.bcPlugableState::readData);
+		pipe.afterStateUpdated();
+		LPDataIOWrapper.provideData(bytesPipe, pipe.pipe::readData);
 	}
 
 	@Override
@@ -68,7 +62,7 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 
 		IClientState[] clientStates = new IClientState[] { renderState, coreState, bcPluggableState, pipe };
@@ -80,7 +74,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 
 		bytesRenderState = input.readByteArray();
diff --git a/common/logisticspipes/network/packets/pipe/RoutingLaserPacket.java b/common/logisticspipes/network/packets/pipe/RoutingLaserPacket.java
index 4561cb36fa..b1e741fd3e 100644
--- a/common/logisticspipes/network/packets/pipe/RoutingLaserPacket.java
+++ b/common/logisticspipes/network/packets/pipe/RoutingLaserPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -26,7 +25,7 @@ public RoutingLaserPacket(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		while (input.readBoolean()) {
 			lasers.add(new LaserData().readData(input));
 		}
@@ -38,7 +37,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		for (LaserData laser : lasers) {
 			output.writeBoolean(true);
 			laser.writeData(output);
diff --git a/common/logisticspipes/network/packets/pipe/SlotFinderActivatePacket.java b/common/logisticspipes/network/packets/pipe/SlotFinderActivatePacket.java
index b26428d9f1..0f571cc903 100644
--- a/common/logisticspipes/network/packets/pipe/SlotFinderActivatePacket.java
+++ b/common/logisticspipes/network/packets/pipe/SlotFinderActivatePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -38,7 +36,7 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(tagetPosX);
 		output.writeInt(tagetPosY);
@@ -47,7 +45,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		tagetPosX = input.readInt();
 		tagetPosY = input.readInt();
diff --git a/common/logisticspipes/network/packets/pipe/SlotFinderNumberPacket.java b/common/logisticspipes/network/packets/pipe/SlotFinderNumberPacket.java
index 8239c8ace1..3ebc1f1add 100644
--- a/common/logisticspipes/network/packets/pipe/SlotFinderNumberPacket.java
+++ b/common/logisticspipes/network/packets/pipe/SlotFinderNumberPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -127,7 +126,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(inventorySlot);
 		output.writeInt(slot);
@@ -137,7 +136,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		inventorySlot = input.readInt();
 		slot = input.readInt();
diff --git a/common/logisticspipes/network/packets/pipe/SlotFinderOpenGuiPacket.java b/common/logisticspipes/network/packets/pipe/SlotFinderOpenGuiPacket.java
index 8101fa586b..fcbfbc5597 100644
--- a/common/logisticspipes/network/packets/pipe/SlotFinderOpenGuiPacket.java
+++ b/common/logisticspipes/network/packets/pipe/SlotFinderOpenGuiPacket.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.Iterator;
 
 import net.minecraft.block.Block;
@@ -122,13 +121,13 @@ public ModernPacket template() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeInt(slot);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		slot = input.readInt();
 	}
diff --git a/common/logisticspipes/network/packets/pipe/StatUpdate.java b/common/logisticspipes/network/packets/pipe/StatUpdate.java
index 3e4101b0a9..76a5bdc317 100644
--- a/common/logisticspipes/network/packets/pipe/StatUpdate.java
+++ b/common/logisticspipes/network/packets/pipe/StatUpdate.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.pipe;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -75,7 +74,7 @@ private void initData() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		initData();
 		super.writeData(output);
 		output.writeInt(stat_session_sent);
@@ -88,7 +87,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		stat_session_sent = input.readInt();
 		stat_session_recieved = input.readInt();
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateAskForTarget.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateAskForTarget.java
index 62c8010779..c596b4688e 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateAskForTarget.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateAskForTarget.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.MovingObjectPosition.MovingObjectType;
@@ -22,7 +20,7 @@ public RoutingUpdateAskForTarget(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	@ClientSideOnlyMethodContent
@@ -32,15 +30,15 @@ public void processPacket(EntityPlayer player) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.None));
 		} else if (box.typeOfHit == MovingObjectType.BLOCK) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.Block)
-					.setAdditions(new Object[] { box.blockX, box.blockY, box.blockZ }));
+					.setAdditions(new int[] { box.blockX, box.blockY, box.blockZ }));
 		} else if (box.typeOfHit == MovingObjectType.ENTITY) {
 			MainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.Entity)
-					.setAdditions(new Object[] { box.entityHit.getEntityId() }));
+					.setAdditions(new int[] { box.entityHit.getEntityId() }));
 		}
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateCanidatePipe.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateCanidatePipe.java
index 5c2958d3f1..a5d084c4a3 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateCanidatePipe.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateCanidatePipe.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -40,12 +38,12 @@ public boolean isCompressable() {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		exitRoute = input.readExitRoute(MainProxy.getClientMainWorld());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeExitRoute(exitRoute);
 	}
 }
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateClearClient.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateClearClient.java
index 491df04a5a..4c7683c1ab 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateClearClient.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateClearClient.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ModernPacket;
@@ -16,7 +14,7 @@ public RoutingUpdateClearClient(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -24,7 +22,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugCanidateList.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugCanidateList.java
index ccf7084e81..a98cc2e3ec 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugCanidateList.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugCanidateList.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -25,7 +23,7 @@ public RoutingUpdateDebugCanidateList(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		msg = new ExitRoute[input.readInt()];
 		for (int i = 0; i < msg.length; i++) {
 			msg[i] = input.readExitRoute(MainProxy.getClientMainWorld());
@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(msg.length);
 		for (ExitRoute element : msg) {
 			output.writeExitRoute(element);
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugClosedSet.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugClosedSet.java
index 60fdce5201..2c5fbc6320 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugClosedSet.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugClosedSet.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
 import java.util.EnumSet;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -30,7 +29,7 @@ public RoutingUpdateDebugClosedSet(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		set = input.readEnumSet(PipeRoutingConnectionType.class);
 		pos = input.readLPPosition();
 	}
@@ -41,7 +40,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeEnumSet(set, PipeRoutingConnectionType.class);
 		output.writeLPPosition(pos);
 	}
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugFilters.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugFilters.java
index a854bcb1a6..aaab746886 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugFilters.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugFilters.java
@@ -1,6 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.EnumMap;
 import java.util.List;
@@ -35,7 +34,7 @@ public RoutingUpdateDebugFilters(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		pos = input.readLPPosition();
 		filterPositions = new EnumMap<>(PipeRoutingConnectionType.class);
 		short id;
@@ -60,7 +59,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeLPPosition(pos);
 		for (PipeRoutingConnectionType type : filters.keySet()) {
 			output.writeShort(type.ordinal());
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDoneDebug.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDoneDebug.java
index 391b4876a3..516aaa92a8 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDoneDebug.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateDoneDebug.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ModernPacket;
@@ -16,7 +14,7 @@ public RoutingUpdateDoneDebug(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -24,7 +22,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateInitDebug.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateInitDebug.java
index 0a28ca712e..8dc7c42d54 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateInitDebug.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateInitDebug.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import logisticspipes.network.abstractpackets.ModernPacket;
@@ -16,7 +14,7 @@ public RoutingUpdateInitDebug(int id) {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public void processPacket(EntityPlayer player) {
@@ -24,7 +22,7 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
 	public ModernPacket template() {
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateSourcePipe.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateSourcePipe.java
index 531220208a..833230dc70 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateSourcePipe.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateSourcePipe.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -40,12 +38,12 @@ public boolean isCompressable() {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		exitRoute = input.readExitRoute(MainProxy.getClientMainWorld());
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeExitRoute(exitRoute);
 	}
 }
diff --git a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateTargetResponse.java b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateTargetResponse.java
index 756f9940c9..e5c1aa8eca 100644
--- a/common/logisticspipes/network/packets/routingdebug/RoutingUpdateTargetResponse.java
+++ b/common/logisticspipes/network/packets/routingdebug/RoutingUpdateTargetResponse.java
@@ -1,13 +1,5 @@
 package logisticspipes.network.packets.routingdebug;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutput;
-import java.io.ObjectOutputStream;
-
 import net.minecraft.block.Block;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.tileentity.TileEntity;
@@ -31,40 +23,21 @@
 
 public class RoutingUpdateTargetResponse extends ModernPacket {
 
-	public RoutingUpdateTargetResponse(int id) {
-		super(id);
-	}
-
-	public enum TargetMode {
-		Block,
-		Entity,
-		None
-	}
-
 	@Getter
 	@Setter
 	private TargetMode mode;
-
 	@Getter
 	@Setter
-	private Object[] additions = new Object[0];
+	private int[] additions = new int[0];
+
+	public RoutingUpdateTargetResponse(int id) {
+		super(id);
+	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		mode = TargetMode.values()[input.readByte()];
-		int size = input.readInt();
-		additions = new Object[size];
-		for (int i = 0; i < size; i++) {
-			byte[] bytes = input.readByteArray();
-			ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
-			ObjectInput in = new ObjectInputStream(bis);
-			try {
-				Object o = in.readObject();
-				additions[i] = o;
-			} catch (ClassNotFoundException e) {
-				throw new UnsupportedOperationException(e);
-			}
-		}
+		additions = input.readIntArray();
 	}
 
 	@Override
@@ -72,9 +45,9 @@ public void processPacket(final EntityPlayer player) {
 		if (mode == TargetMode.None) {
 			player.addChatMessage(new ChatComponentText(ChatColor.RED + "No Target Found"));
 		} else if (mode == TargetMode.Block) {
-			int x = (Integer) additions[0];
-			int y = (Integer) additions[1];
-			int z = (Integer) additions[2];
+			int x = additions[0];
+			int y = additions[1];
+			int z = additions[2];
 			player.addChatMessage(new ChatComponentText("Checking Block at: x:" + x + " y:" + y + " z:" + z));
 			Block id = player.worldObj.getBlock(x, y, z);
 			player.addChatMessage(new ChatComponentText("Found Block with Id: " + Block.getIdFromBlock(id)));
@@ -103,15 +76,9 @@ public void processPacket(final EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeByte(mode.ordinal());
-		output.writeInt(additions.length);
-		for (Object addition : additions) {
-			ByteArrayOutputStream bos = new ByteArrayOutputStream();
-			ObjectOutput out = new ObjectOutputStream(bos);
-			out.writeObject(addition);
-			output.writeByteArray(bos.toByteArray());
-		}
+		output.writeIntArray(additions);
 	}
 
 	@Override
@@ -123,4 +90,10 @@ public ModernPacket template() {
 	public boolean isCompressable() {
 		return true;
 	}
+
+	public enum TargetMode {
+		Block,
+		Entity,
+		None
+	}
 }
diff --git a/common/logisticspipes/network/packets/satpipe/SatPipeSetID.java b/common/logisticspipes/network/packets/satpipe/SatPipeSetID.java
index 301593bdca..ada4fb57da 100644
--- a/common/logisticspipes/network/packets/satpipe/SatPipeSetID.java
+++ b/common/logisticspipes/network/packets/satpipe/SatPipeSetID.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.satpipe;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 
 import lombok.Getter;
@@ -17,6 +15,10 @@
 
 public class SatPipeSetID extends CoordinatesPacket {
 
+	@Getter
+	@Setter
+	private int satID;
+
 	public SatPipeSetID(int id) {
 		super(id);
 	}
@@ -26,18 +28,14 @@ public ModernPacket template() {
 		return new SatPipeSetID(getId());
 	}
 
-	@Getter
-	@Setter
-	private int satID;
-
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(satID);
 		super.writeData(output);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		satID = input.readInt();
 		super.readData(input);
 	}
diff --git a/common/logisticspipes/network/packets/upgrade/SneakyUpgradeSidePacket.java b/common/logisticspipes/network/packets/upgrade/SneakyUpgradeSidePacket.java
index e961fe8f2d..ab0ffdae78 100644
--- a/common/logisticspipes/network/packets/upgrade/SneakyUpgradeSidePacket.java
+++ b/common/logisticspipes/network/packets/upgrade/SneakyUpgradeSidePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.upgrade;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
@@ -39,13 +37,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeForgeDirection(side);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		side = input.readForgeDirection();
 	}
diff --git a/common/logisticspipes/network/packets/upgrade/ToogleDisconnectionUpgradeSidePacket.java b/common/logisticspipes/network/packets/upgrade/ToogleDisconnectionUpgradeSidePacket.java
index 6da5b1e3b9..15c8362358 100644
--- a/common/logisticspipes/network/packets/upgrade/ToogleDisconnectionUpgradeSidePacket.java
+++ b/common/logisticspipes/network/packets/upgrade/ToogleDisconnectionUpgradeSidePacket.java
@@ -1,7 +1,5 @@
 package logisticspipes.network.packets.upgrade;
 
-import java.io.IOException;
-
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
@@ -46,13 +44,13 @@ public void processPacket(EntityPlayer player) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		super.writeData(output);
 		output.writeForgeDirection(side);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		super.readData(input);
 		side = input.readForgeDirection();
 	}
diff --git a/common/logisticspipes/pipes/basic/CoreRoutedPipe.java b/common/logisticspipes/pipes/basic/CoreRoutedPipe.java
index 17d9a34839..cc3714f5ce 100644
--- a/common/logisticspipes/pipes/basic/CoreRoutedPipe.java
+++ b/common/logisticspipes/pipes/basic/CoreRoutedPipe.java
@@ -7,7 +7,6 @@
 
 package logisticspipes.pipes.basic;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -132,71 +131,49 @@
 public abstract class CoreRoutedPipe extends CoreUnroutedPipe
 		implements IClientState, IRequestItems, ITrackStatistics, IWorldProvider, IWatchingHandler, IPipeServiceProvider, IQueueCCEvent, ILPPositionProvider {
 
-	public enum ItemSendMode {
-		Normal,
-		Fast
-	}
-
-	protected boolean stillNeedReplace = true;
-	private boolean recheckConnections = false;
-
-	protected IRouter router;
-	protected String routerId;
-	protected Object routerIdLock = new Object();
 	private static int pipecount = 0;
-	protected int _delayOffset = 0;
-
+	public final PlayerCollectionList watchers = new PlayerCollectionList();
+	protected final PriorityBlockingQueue<ItemRoutingInformation> _inTransitToMe = new PriorityBlockingQueue<>(10,
+			new ItemRoutingInformation.DelayComparator());
+	protected final LinkedList<Triplet<IRoutedItem, ForgeDirection, ItemSendMode>> _sendQueue = new LinkedList<>();
+	protected final Map<ItemIdentifier, Queue<Pair<Integer, ItemRoutingInformation>>> queuedDataForUnroutedItems = Collections.synchronizedMap(new TreeMap<>());
 	public boolean _textureBufferPowered;
-
-	protected boolean _initialInit = true;
-
-	private boolean enabled = true;
-	private boolean preventRemove = false;
-	private boolean destroyByPlayer = false;
-	private PowerSupplierHandler powerHandler = new PowerSupplierHandler(this);
-
 	public long delayTo = 0;
 	public int repeatFor = 0;
-
-	protected RouteLayer _routeLayer;
-	protected TransportLayer _transportLayer;
-	protected final PriorityBlockingQueue<ItemRoutingInformation> _inTransitToMe = new PriorityBlockingQueue<>(10,
-			new ItemRoutingInformation.DelayComparator());
-
-	protected UpgradeManager upgradeManager = new UpgradeManager(this);
-	protected LogisticsItemOrderManager _orderItemManager = null;
-
-	@Getter
-	private List<IOrderInfoProvider> clientSideOrderManager = new ArrayList<>();
-
 	public int stat_session_sent;
 	public int stat_session_recieved;
 	public int stat_session_relayed;
-
 	public long stat_lifetime_sent;
 	public long stat_lifetime_recieved;
 	public long stat_lifetime_relayed;
-
 	public int server_routing_table_size = 0;
-
-	protected final LinkedList<Triplet<IRoutedItem, ForgeDirection, ItemSendMode>> _sendQueue = new LinkedList<>();
-
-	protected final Map<ItemIdentifier, Queue<Pair<Integer, ItemRoutingInformation>>> queuedDataForUnroutedItems = Collections.synchronizedMap(new TreeMap<>());
-
-	public final PlayerCollectionList watchers = new PlayerCollectionList();
-
+	public boolean globalIgnoreConnectionDisconnection = false;
+	protected boolean stillNeedReplace = true;
+	protected IRouter router;
+	protected String routerId;
+	protected Object routerIdLock = new Object();
+	protected int _delayOffset = 0;
+	protected boolean _initialInit = true;
+	protected RouteLayer _routeLayer;
+	protected TransportLayer _transportLayer;
+	protected UpgradeManager upgradeManager = new UpgradeManager(this);
+	protected LogisticsItemOrderManager _orderItemManager = null;
 	protected List<IInventory> _cachedAdjacentInventories;
-
 	protected ForgeDirection pointedDirection = ForgeDirection.UNKNOWN;
 	//public BaseRoutingLogic logic;
 	// from BaseRoutingLogic
 	protected int throttleTime = 20;
+	protected IPipeSign[] signItem = new IPipeSign[6];
+	private boolean recheckConnections = false;
+	private boolean enabled = true;
+	private boolean preventRemove = false;
+	private boolean destroyByPlayer = false;
+	private PowerSupplierHandler powerHandler = new PowerSupplierHandler(this);
+	@Getter
+	private List<IOrderInfoProvider> clientSideOrderManager = new ArrayList<>();
 	private int throttleTimeLeft = 20 + new Random().nextInt(Configs.LOGISTICS_DETECTION_FREQUENCY);
-
 	private int[] queuedParticles = new int[Particles.values().length];
 	private boolean hasQueuedParticles = false;
-
-	protected IPipeSign[] signItem = new IPipeSign[6];
 	private boolean isOpaqueClientSide = false;
 
 	private CacheHolder cacheHolder;
@@ -1030,8 +1007,6 @@ public final boolean canPipeConnect(TileEntity tile, ForgeDirection dir) {
 		return canPipeConnect(tile, dir, false);
 	}
 
-	public boolean globalIgnoreConnectionDisconnection = false;
-
 	@Override
 	public final boolean canPipeConnect(TileEntity tile, ForgeDirection dir, boolean ignoreSystemDisconnection) {
 		ForgeDirection side = OrientationsUtil.getOrientationOfTilewithTile(container, tile);
@@ -1072,8 +1047,6 @@ public void insetSecurityID(UUID id) {
 		getOriginalUpgradeManager().insetSecurityID(id);
 	}
 
-	/* Power System */
-
 	public List<Pair<ILogisticsPowerProvider, List<IFilter>>> getRoutedPowerProviders() {
 		if (MainProxy.isClient(getWorld())) {
 			return null;
@@ -1084,6 +1057,8 @@ public List<Pair<ILogisticsPowerProvider, List<IFilter>>> getRoutedPowerProvider
 		return getRouter().getPowerProvider();
 	}
 
+	/* Power System */
+
 	@Override
 	public boolean useEnergy(int amount) {
 		return useEnergy(amount, null, true);
@@ -1378,21 +1353,21 @@ public String getRouterUUID(Double id) {
 		return router.getId().toString();
 	}
 
-	@CCCommand(description = "Sets the TurtleConnect flag for this Turtle on this LogisticsPipe")
+	@CCCommand(description = "Returns the TurtleConnect flag for this Turtle on this LogisticsPipe")
 	@CCDirectCall
-	public void setTurtleConnect(Boolean flag) {
+	public boolean getTurtleConnect() {
 		if (container instanceof LogisticsTileGenericPipe) {
-			container.setTurtleConnect(flag);
+			return container.getTurtleConnect();
 		}
+		return false;
 	}
 
-	@CCCommand(description = "Returns the TurtleConnect flag for this Turtle on this LogisticsPipe")
+	@CCCommand(description = "Sets the TurtleConnect flag for this Turtle on this LogisticsPipe")
 	@CCDirectCall
-	public boolean getTurtleConnect() {
+	public void setTurtleConnect(Boolean flag) {
 		if (container instanceof LogisticsTileGenericPipe) {
-			return container.getTurtleConnect();
+			container.setTurtleConnect(flag);
 		}
-		return false;
 	}
 
 	@CCCommand(description = "Returns true if the computer is allowed to interact with the connected pipe.", needPermission = false)
@@ -1743,12 +1718,12 @@ public IPipeSign getPipeSign(ForgeDirection dir) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeBoolean(isOpaque());
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		isOpaqueClientSide = input.readBoolean();
 	}
 
@@ -1841,4 +1816,9 @@ public CacheHolder getCacheHolder() {
 	public IHighlightPlacementRenderer getHighlightRenderer() {
 		return LogisticsRenderPipe.secondRenderer;
 	}
+
+	public enum ItemSendMode {
+		Normal,
+		Fast
+	}
 }
diff --git a/common/logisticspipes/pipes/basic/LogisticsTileGenericPipe.java b/common/logisticspipes/pipes/basic/LogisticsTileGenericPipe.java
index e83d8a1495..43d39b8747 100644
--- a/common/logisticspipes/pipes/basic/LogisticsTileGenericPipe.java
+++ b/common/logisticspipes/pipes/basic/LogisticsTileGenericPipe.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.basic;
 
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -94,33 +93,38 @@ public class LogisticsTileGenericPipe extends TileEntity
 		implements IOCTile, ILPPipeTile, IPipeInformationProvider, IItemDuct, ManagedPeripheral, Environment, SidedEnvironment, IFluidHandler, IPipeTile,
 		ILogicControllerTile, IPipeConnection {
 
+	public final PipeRenderState renderState;
+	public final CoreState coreState = new CoreState();
+	public final IBCTilePart tilePart;
+	public final IBCPluggableState bcPlugableState;
+	public final ITDPart tdPart;
 	public Object OPENPERIPHERAL_IGNORE; //Tell OpenPeripheral to ignore this class
-
 	public Set<DoubleCoordinates> subMultiBlock = new HashSet<>();
-
 	public boolean[] turtleConnect = new boolean[7];
-
-	private LogisticsTileRenderController renderController;
-
 	@ModDependentField(modId = LPConstants.computerCraftModID)
 	public HashMap<IComputerAccess, ForgeDirection> connections;
-
 	@ModDependentField(modId = LPConstants.computerCraftModID)
 	public IComputerAccess currentPC;
-
 	@ModDependentField(modId = LPConstants.openComputersModID)
 	public Node node;
+	public LogicController logicController = new LogicController();
+	public boolean[] pipeConnectionsBuffer = new boolean[6];
+	public boolean[] pipeBCConnectionsBuffer = new boolean[6];
+	public boolean[] pipeTDConnectionsBuffer = new boolean[6];
+	public CoreUnroutedPipe pipe;
+	private LogisticsTileRenderController renderController;
 	private boolean addedToNetwork = false;
-
 	private boolean sendInitPacket = true;
-
-	public LogicController logicController = new LogicController();
-
-	public final PipeRenderState renderState;
-	public final CoreState coreState = new CoreState();
-	public final IBCTilePart tilePart;
-	public final IBCPluggableState bcPlugableState;
-	public final ITDPart tdPart;
+	@Getter
+	private boolean initialized = false;
+	private boolean deletePipe = false;
+	private TileBuffer[] tileBuffer;
+	private boolean sendClientUpdate = false;
+	private boolean blockNeighborChange = false;
+	private boolean refreshRenderState = false;
+	private boolean pipeBound = false;
+	@SideOnly(Side.CLIENT)
+	private AxisAlignedBB renderBox;
 
 	public LogisticsTileGenericPipe() {
 		if (SimpleServiceLocator.ccProxy.isCC()) {
@@ -314,6 +318,8 @@ public void scheduleNeighborChange() {
 		}
 	}
 
+	/* IPipeInformationProvider */
+
 	@Override
 	public void writeToNBT(NBTTagCompound nbt) {
 		super.writeToNBT(nbt);
@@ -439,14 +445,14 @@ public void handleMesssage(int computerId, Object message, int sourceId) {
 		SimpleServiceLocator.ccProxy.handleMesssage(computerId, message, this, sourceId);
 	}
 
-	public void setTurtleConnect(boolean flag) {
-		SimpleServiceLocator.ccProxy.setTurtleConnect(flag, this);
-	}
-
 	public boolean getTurtleConnect() {
 		return SimpleServiceLocator.ccProxy.getTurtleConnect(this);
 	}
 
+	public void setTurtleConnect(boolean flag) {
+		SimpleServiceLocator.ccProxy.setTurtleConnect(flag, this);
+	}
+
 	public int getLastCCID() {
 		return SimpleServiceLocator.ccProxy.getLastCCID(this);
 	}
@@ -478,8 +484,6 @@ public LogisticsTileRenderController getRenderController() {
 		return renderController;
 	}
 
-	/* IPipeInformationProvider */
-
 	@Override
 	public boolean isCorrect(ConnectionPipeType type) {
 		return true;
@@ -632,6 +636,8 @@ public Node node() {
 	@Override
 	@ModDependentMethod(modId = LPConstants.openComputersModID)
 	public void onConnect(Node node1) {}
+	//public int redstoneInput = 0;
+	//public int[] redstoneInputSide = new int[ForgeDirection.VALID_DIRECTIONS.length];
 
 	@Override
 	@ModDependentMethod(modId = LPConstants.openComputersModID)
@@ -677,41 +683,6 @@ public Object getOCNode() {
 		return node();
 	}
 
-	@Getter
-	private boolean initialized = false;
-
-	public boolean[] pipeConnectionsBuffer = new boolean[6];
-	public boolean[] pipeBCConnectionsBuffer = new boolean[6];
-	public boolean[] pipeTDConnectionsBuffer = new boolean[6];
-
-	public CoreUnroutedPipe pipe;
-	//public int redstoneInput = 0;
-	//public int[] redstoneInputSide = new int[ForgeDirection.VALID_DIRECTIONS.length];
-
-	private boolean deletePipe = false;
-	private TileBuffer[] tileBuffer;
-	private boolean sendClientUpdate = false;
-	private boolean blockNeighborChange = false;
-	private boolean refreshRenderState = false;
-	private boolean pipeBound = false;
-
-	public class CoreState implements IClientState {
-
-		public int pipeId = -1;
-
-		@Override
-		public void writeData(LPDataOutput output) throws IOException {
-			output.writeInt(pipeId);
-
-		}
-
-		@Override
-		public void readData(LPDataInput input) throws IOException {
-			pipeId = input.readInt();
-
-		}
-	}
-
 	public void initialize(CoreUnroutedPipe pipe) {
 		blockType = getBlockType();
 
@@ -1091,9 +1062,6 @@ public void setWorldObj(World world) {
 		tdPart.setWorldObj_LP(world);
 	}
 
-	@SideOnly(Side.CLIENT)
-	private AxisAlignedBB renderBox;
-
 	@SideOnly(Side.CLIENT)
 	@Override
 	public AxisAlignedBB getRenderBoundingBox() {
@@ -1155,4 +1123,21 @@ public boolean isMultiBlock() {
 	public Stream<TileEntity> getPartsOfPipe() {
 		return this.subMultiBlock.stream().map(pos -> pos.getTileEntity(worldObj));
 	}
+
+	public class CoreState implements IClientState {
+
+		public int pipeId = -1;
+
+		@Override
+		public void writeData(LPDataOutput output) {
+			output.writeInt(pipeId);
+
+		}
+
+		@Override
+		public void readData(LPDataInput input) {
+			pipeId = input.readInt();
+
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/tubes/HSTubeCurve.java b/common/logisticspipes/pipes/tubes/HSTubeCurve.java
index fa6495d582..f25d67f046 100644
--- a/common/logisticspipes/pipes/tubes/HSTubeCurve.java
+++ b/common/logisticspipes/pipes/tubes/HSTubeCurve.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.tubes;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -34,65 +33,6 @@
 
 public class HSTubeCurve extends CoreMultiBlockPipe {
 
-	@AllArgsConstructor
-	public enum CurveOrientation implements ITubeOrientation {
-		//@formatter:off
-		// Name: Placement from  _ TurnDirection
-		NORTH_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(2, 0, 2), ForgeDirection.NORTH, ForgeDirection.EAST),
-		NORTH_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),
-		WEST_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(2, 0, -2), ForgeDirection.WEST, ForgeDirection.NORTH),
-		WEST_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST, ForgeDirection.SOUTH),
-		SOUTH_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(-2, 0, -2), ForgeDirection.SOUTH, ForgeDirection.WEST),
-		SOUTH_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH, ForgeDirection.EAST),
-		EAST_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(-2, 0, 2), ForgeDirection.EAST, ForgeDirection.SOUTH),
-		EAST_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH);
-		//@formatter:on
-		@Getter
-		TurnDirection renderOrientation;
-		@Getter
-		DoubleCoordinates offset;
-		@Getter
-		ForgeDirection from;
-		@Getter
-		ForgeDirection looking;
-
-		@Override
-		public void rotatePositions(IPositionRotateble set) {
-			renderOrientation.rotatePositions(set);
-		}
-
-		@Override
-		public void setOnPipe(CoreMultiBlockPipe pipe) {
-			((HSTubeCurve) pipe).orientation = this;
-		}
-	}
-
-	@AllArgsConstructor
-	public enum TurnDirection implements ITubeRenderOrientation {
-		//@formatter:off
-		NORTH_EAST(ForgeDirection.NORTH, ForgeDirection.EAST),
-		EAST_SOUTH(ForgeDirection.EAST, ForgeDirection.SOUTH),
-		SOUTH_WEST(ForgeDirection.SOUTH, ForgeDirection.WEST),
-		WEST_NORTH(ForgeDirection.WEST, ForgeDirection.NORTH);
-		//@formatter:on
-		@Getter
-		ForgeDirection dir1;
-		ForgeDirection dir2;
-
-		public void rotatePositions(IPositionRotateble set) {
-			if (this == WEST_NORTH) {
-				return;
-			} else if (this == NORTH_EAST) {
-				set.rotateRight();
-			} else if (this == EAST_SOUTH) {
-				set.rotateLeft();
-				set.rotateLeft();
-			} else if (this == SOUTH_WEST) {
-				set.rotateLeft();
-			}
-		}
-	}
-
 	@Getter
 	private CurveOrientation orientation;
 
@@ -101,7 +41,7 @@ public HSTubeCurve(Item item) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		if (orientation == null) {
 			output.writeBoolean(false);
 		} else {
@@ -111,7 +51,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		if (input.readBoolean()) {
 			orientation = input.readEnum(CurveOrientation.class);
 		}
@@ -399,4 +339,63 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {
 	public boolean isHSTube() {
 		return true;
 	}
+
+	@AllArgsConstructor
+	public enum CurveOrientation implements ITubeOrientation {
+		//@formatter:off
+		// Name: Placement from  _ TurnDirection
+		NORTH_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(2, 0, 2), ForgeDirection.NORTH, ForgeDirection.EAST),
+		NORTH_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),
+		WEST_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(2, 0, -2), ForgeDirection.WEST, ForgeDirection.NORTH),
+		WEST_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST, ForgeDirection.SOUTH),
+		SOUTH_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(-2, 0, -2), ForgeDirection.SOUTH, ForgeDirection.WEST),
+		SOUTH_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH, ForgeDirection.EAST),
+		EAST_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(-2, 0, 2), ForgeDirection.EAST, ForgeDirection.SOUTH),
+		EAST_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH);
+		//@formatter:on
+		@Getter
+		TurnDirection renderOrientation;
+		@Getter
+		DoubleCoordinates offset;
+		@Getter
+		ForgeDirection from;
+		@Getter
+		ForgeDirection looking;
+
+		@Override
+		public void rotatePositions(IPositionRotateble set) {
+			renderOrientation.rotatePositions(set);
+		}
+
+		@Override
+		public void setOnPipe(CoreMultiBlockPipe pipe) {
+			((HSTubeCurve) pipe).orientation = this;
+		}
+	}
+
+	@AllArgsConstructor
+	public enum TurnDirection implements ITubeRenderOrientation {
+		//@formatter:off
+		NORTH_EAST(ForgeDirection.NORTH, ForgeDirection.EAST),
+		EAST_SOUTH(ForgeDirection.EAST, ForgeDirection.SOUTH),
+		SOUTH_WEST(ForgeDirection.SOUTH, ForgeDirection.WEST),
+		WEST_NORTH(ForgeDirection.WEST, ForgeDirection.NORTH);
+		//@formatter:on
+		@Getter
+		ForgeDirection dir1;
+		ForgeDirection dir2;
+
+		public void rotatePositions(IPositionRotateble set) {
+			if (this == WEST_NORTH) {
+				return;
+			} else if (this == NORTH_EAST) {
+				set.rotateRight();
+			} else if (this == EAST_SOUTH) {
+				set.rotateLeft();
+				set.rotateLeft();
+			} else if (this == SOUTH_WEST) {
+				set.rotateLeft();
+			}
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/tubes/HSTubeGain.java b/common/logisticspipes/pipes/tubes/HSTubeGain.java
index 0703967fed..a6ce211460 100644
--- a/common/logisticspipes/pipes/tubes/HSTubeGain.java
+++ b/common/logisticspipes/pipes/tubes/HSTubeGain.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.tubes;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -32,64 +31,8 @@
 
 public class HSTubeGain extends CoreMultiBlockPipe {
 
-	public enum TubeGainOrientation implements ITubeOrientation {
-		NORTH(TubeGainRenderOrientation.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),
-		SOUTH(TubeGainRenderOrientation.SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),
-		EAST(TubeGainRenderOrientation.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),
-		WEST(TubeGainRenderOrientation.WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);
-
-		@Getter
-		TubeGainRenderOrientation renderOrientation;
-		@Getter
-		DoubleCoordinates offset;
-		@Getter
-		ForgeDirection dir;
-
-		TubeGainOrientation(TubeGainRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {
-			renderOrientation = render;
-			offset = off;
-			this.dir = dir;
-		}
-
-		@Override
-		public void rotatePositions(IPositionRotateble set) {
-			renderOrientation.rotateOrientation(set);
-		}
-
-		@Override
-		public void setOnPipe(CoreMultiBlockPipe pipe) {
-			((HSTubeGain) pipe).orientation = this;
-		}
-	}
-
-	public enum TubeGainRenderOrientation implements ITubeRenderOrientation {
-		NORTH(ForgeDirection.NORTH),
-		SOUTH(ForgeDirection.SOUTH),
-		WEST(ForgeDirection.WEST),
-		EAST(ForgeDirection.EAST);
-
-		@Getter
-		private ForgeDirection dir;
-
-		TubeGainRenderOrientation(ForgeDirection dir) {
-			this.dir = dir;
-		}
-
-		public void rotateOrientation(IPositionRotateble set) {
-			if (this == EAST) {
-				set.rotateRight();
-			} else if (this == WEST) {
-				set.rotateLeft();
-			} else if (this == SOUTH) {
-				set.rotateLeft();
-				set.rotateLeft();
-			}
-		}
-	}
-
 	@Getter
 	private TubeGainOrientation orientation;
-
 	private List<AxisAlignedBB> boxes = null;
 
 	public HSTubeGain(Item item) {
@@ -97,7 +40,7 @@ public HSTubeGain(Item item) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		if (orientation == null) {
 			output.writeBoolean(false);
 		} else {
@@ -107,7 +50,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		if (input.readBoolean()) {
 			orientation = input.readEnum(TubeGainOrientation.class);
 		}
@@ -414,4 +357,59 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {
 	public boolean isHSTube() {
 		return true;
 	}
+
+	public enum TubeGainOrientation implements ITubeOrientation {
+		NORTH(TubeGainRenderOrientation.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),
+		SOUTH(TubeGainRenderOrientation.SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),
+		EAST(TubeGainRenderOrientation.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),
+		WEST(TubeGainRenderOrientation.WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);
+
+		@Getter
+		TubeGainRenderOrientation renderOrientation;
+		@Getter
+		DoubleCoordinates offset;
+		@Getter
+		ForgeDirection dir;
+
+		TubeGainOrientation(TubeGainRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {
+			renderOrientation = render;
+			offset = off;
+			this.dir = dir;
+		}
+
+		@Override
+		public void rotatePositions(IPositionRotateble set) {
+			renderOrientation.rotateOrientation(set);
+		}
+
+		@Override
+		public void setOnPipe(CoreMultiBlockPipe pipe) {
+			((HSTubeGain) pipe).orientation = this;
+		}
+	}
+
+	public enum TubeGainRenderOrientation implements ITubeRenderOrientation {
+		NORTH(ForgeDirection.NORTH),
+		SOUTH(ForgeDirection.SOUTH),
+		WEST(ForgeDirection.WEST),
+		EAST(ForgeDirection.EAST);
+
+		@Getter
+		private ForgeDirection dir;
+
+		TubeGainRenderOrientation(ForgeDirection dir) {
+			this.dir = dir;
+		}
+
+		public void rotateOrientation(IPositionRotateble set) {
+			if (this == EAST) {
+				set.rotateRight();
+			} else if (this == WEST) {
+				set.rotateLeft();
+			} else if (this == SOUTH) {
+				set.rotateLeft();
+				set.rotateLeft();
+			}
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/tubes/HSTubeLine.java b/common/logisticspipes/pipes/tubes/HSTubeLine.java
index 3e95d338a7..a20d42d42c 100644
--- a/common/logisticspipes/pipes/tubes/HSTubeLine.java
+++ b/common/logisticspipes/pipes/tubes/HSTubeLine.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.tubes;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -28,54 +27,6 @@
 
 public class HSTubeLine extends CoreMultiBlockPipe {
 
-	public enum TubeLineOrientation implements ITubeOrientation {
-		NORTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),
-		SOUTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),
-		EAST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),
-		WEST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);
-
-		@Getter
-		TubeLineRenderOrientation renderOrientation;
-		@Getter
-		DoubleCoordinates offset;
-		@Getter
-		ForgeDirection dir;
-
-		TubeLineOrientation(TubeLineRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {
-			renderOrientation = render;
-			offset = off;
-			this.dir = dir;
-		}
-
-		@Override
-		public void rotatePositions(IPositionRotateble set) {
-			renderOrientation.rotateOrientation(set);
-		}
-
-		@Override
-		public void setOnPipe(CoreMultiBlockPipe pipe) {
-			((HSTubeLine) pipe).orientation = this;
-		}
-	}
-
-	public enum TubeLineRenderOrientation implements ITubeRenderOrientation {
-		NORTH_SOUTH(ForgeDirection.NORTH),
-		EAST_WEST(ForgeDirection.EAST);
-
-		@Getter
-		private ForgeDirection dir;
-
-		TubeLineRenderOrientation(ForgeDirection dir) {
-			this.dir = dir;
-		}
-
-		public void rotateOrientation(IPositionRotateble set) {
-			if (this == EAST_WEST) {
-				set.rotateLeft();
-			}
-		}
-	}
-
 	@Getter
 	private TubeLineOrientation orientation;
 
@@ -84,7 +35,7 @@ public HSTubeLine(Item item) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		if (orientation == null) {
 			output.writeBoolean(false);
 		} else {
@@ -94,7 +45,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		if (input.readBoolean()) {
 			orientation = input.readEnum(TubeLineOrientation.class);
 		}
@@ -217,4 +168,52 @@ public IHighlightPlacementRenderer getHighlightRenderer() {
 	public boolean isHSTube() {
 		return true;
 	}
+
+	public enum TubeLineOrientation implements ITubeOrientation {
+		NORTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),
+		SOUTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),
+		EAST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),
+		WEST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);
+
+		@Getter
+		TubeLineRenderOrientation renderOrientation;
+		@Getter
+		DoubleCoordinates offset;
+		@Getter
+		ForgeDirection dir;
+
+		TubeLineOrientation(TubeLineRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {
+			renderOrientation = render;
+			offset = off;
+			this.dir = dir;
+		}
+
+		@Override
+		public void rotatePositions(IPositionRotateble set) {
+			renderOrientation.rotateOrientation(set);
+		}
+
+		@Override
+		public void setOnPipe(CoreMultiBlockPipe pipe) {
+			((HSTubeLine) pipe).orientation = this;
+		}
+	}
+
+	public enum TubeLineRenderOrientation implements ITubeRenderOrientation {
+		NORTH_SOUTH(ForgeDirection.NORTH),
+		EAST_WEST(ForgeDirection.EAST);
+
+		@Getter
+		private ForgeDirection dir;
+
+		TubeLineRenderOrientation(ForgeDirection dir) {
+			this.dir = dir;
+		}
+
+		public void rotateOrientation(IPositionRotateble set) {
+			if (this == EAST_WEST) {
+				set.rotateLeft();
+			}
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/tubes/HSTubeSCurve.java b/common/logisticspipes/pipes/tubes/HSTubeSCurve.java
index 29362523db..7b2008d5c1 100644
--- a/common/logisticspipes/pipes/tubes/HSTubeSCurve.java
+++ b/common/logisticspipes/pipes/tubes/HSTubeSCurve.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.tubes;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -35,67 +34,8 @@
 
 public class HSTubeSCurve extends CoreMultiBlockPipe {
 
-	@AllArgsConstructor
-	public enum CurveSOrientation implements ITubeOrientation {
-		//@formatter:off
-		// Name: Placement from  _ TurnDirection
-		NORTH_EAST(TurnSDirection.NORTH_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.EAST),
-		NORTH_WEST(TurnSDirection.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),
-		EAST_SOUTH(TurnSDirection.EAST_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.SOUTH),
-		EAST_NORTH(TurnSDirection.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH),
-		SOUTH_WEST(TurnSDirection.NORTH_INV, new DoubleCoordinates(-1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.WEST),
-		SOUTH_EAST(TurnSDirection.NORTH, new DoubleCoordinates(1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.EAST),
-		WEST_NORTH(TurnSDirection.EAST_INV, new DoubleCoordinates(-3, 0, -1), ForgeDirection.WEST, ForgeDirection.NORTH),
-		WEST_SOUTH(TurnSDirection.EAST, new DoubleCoordinates(-3, 0, 1), ForgeDirection.WEST, ForgeDirection.SOUTH);
-		//@formatter:on
-
-		@Getter
-		TurnSDirection renderOrientation;
-		@Getter
-		DoubleCoordinates offset;
-		@Getter
-		ForgeDirection dir;
-		@Getter
-		ForgeDirection looking;
-
-		@Override
-		public void rotatePositions(IPositionRotateble set) {
-			renderOrientation.rotatePositions(set);
-		}
-
-		@Override
-		public void setOnPipe(CoreMultiBlockPipe pipe) {
-			((HSTubeSCurve) pipe).orientation = this;
-		}
-	}
-
-	@AllArgsConstructor
-	public enum TurnSDirection implements ITubeRenderOrientation {
-		//@formatter:off
-		NORTH(ForgeDirection.NORTH),
-		EAST(ForgeDirection.EAST),
-		NORTH_INV(ForgeDirection.SOUTH),
-		EAST_INV(ForgeDirection.WEST);
-		//@formatter:on
-
-		@Getter
-		private ForgeDirection dir1;
-
-		public void rotatePositions(IPositionRotateble set) {
-			if (this == NORTH) {
-				set.mirrorX();
-			} else if (this == EAST) {
-				set.mirrorX();
-				set.rotateRight();
-			} else if (this == EAST_INV) {
-				set.rotateRight();
-			}
-		}
-	}
-
 	@Getter
 	private CurveSOrientation orientation;
-
 	private List<AxisAlignedBB> boxes = null;
 
 	public HSTubeSCurve(Item item) {
@@ -103,7 +43,7 @@ public HSTubeSCurve(Item item) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		if (orientation == null) {
 			output.writeBoolean(false);
 		} else {
@@ -113,7 +53,7 @@ public void writeData(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		if (input.readBoolean()) {
 			orientation = input.readEnum(CurveSOrientation.class);
 		}
@@ -456,4 +396,62 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {
 	public boolean isHSTube() {
 		return true;
 	}
+
+	@AllArgsConstructor
+	public enum CurveSOrientation implements ITubeOrientation {
+		//@formatter:off
+		// Name: Placement from  _ TurnDirection
+		NORTH_EAST(TurnSDirection.NORTH_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.EAST),
+		NORTH_WEST(TurnSDirection.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),
+		EAST_SOUTH(TurnSDirection.EAST_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.SOUTH),
+		EAST_NORTH(TurnSDirection.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH),
+		SOUTH_WEST(TurnSDirection.NORTH_INV, new DoubleCoordinates(-1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.WEST),
+		SOUTH_EAST(TurnSDirection.NORTH, new DoubleCoordinates(1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.EAST),
+		WEST_NORTH(TurnSDirection.EAST_INV, new DoubleCoordinates(-3, 0, -1), ForgeDirection.WEST, ForgeDirection.NORTH),
+		WEST_SOUTH(TurnSDirection.EAST, new DoubleCoordinates(-3, 0, 1), ForgeDirection.WEST, ForgeDirection.SOUTH);
+		//@formatter:on
+
+		@Getter
+		TurnSDirection renderOrientation;
+		@Getter
+		DoubleCoordinates offset;
+		@Getter
+		ForgeDirection dir;
+		@Getter
+		ForgeDirection looking;
+
+		@Override
+		public void rotatePositions(IPositionRotateble set) {
+			renderOrientation.rotatePositions(set);
+		}
+
+		@Override
+		public void setOnPipe(CoreMultiBlockPipe pipe) {
+			((HSTubeSCurve) pipe).orientation = this;
+		}
+	}
+
+	@AllArgsConstructor
+	public enum TurnSDirection implements ITubeRenderOrientation {
+		//@formatter:off
+		NORTH(ForgeDirection.NORTH),
+		EAST(ForgeDirection.EAST),
+		NORTH_INV(ForgeDirection.SOUTH),
+		EAST_INV(ForgeDirection.WEST);
+		//@formatter:on
+
+		@Getter
+		private ForgeDirection dir1;
+
+		public void rotatePositions(IPositionRotateble set) {
+			if (this == NORTH) {
+				set.mirrorX();
+			} else if (this == EAST) {
+				set.mirrorX();
+				set.rotateRight();
+			} else if (this == EAST_INV) {
+				set.rotateRight();
+			}
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/tubes/HSTubeSpeedup.java b/common/logisticspipes/pipes/tubes/HSTubeSpeedup.java
index 1dd2200787..678b28194a 100644
--- a/common/logisticspipes/pipes/tubes/HSTubeSpeedup.java
+++ b/common/logisticspipes/pipes/tubes/HSTubeSpeedup.java
@@ -1,6 +1,5 @@
 package logisticspipes.pipes.tubes;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.entity.player.EntityPlayer;
@@ -36,45 +35,6 @@
 
 public class HSTubeSpeedup extends CoreMultiBlockPipe {
 
-	@AllArgsConstructor
-	public enum SpeedupDirection implements ITubeRenderOrientation, ITubeOrientation {
-		//@formatter:off
-		NORTH(ForgeDirection.NORTH),
-		SOUTH(ForgeDirection.SOUTH),
-		EAST(ForgeDirection.EAST),
-		WEST(ForgeDirection.WEST);
-		//@formatter:on
-		@Getter
-		ForgeDirection dir1;
-
-		@Override
-		public void rotatePositions(IPositionRotateble set) {
-			if (this == SOUTH) {
-				set.rotateLeft();
-				set.rotateLeft();
-			} else if (this == EAST) {
-				set.rotateRight();
-			} else if (this == WEST) {
-				set.rotateLeft();
-			}
-		}
-
-		@Override
-		public ITubeRenderOrientation getRenderOrientation() {
-			return this;
-		}
-
-		@Override
-		public DoubleCoordinates getOffset() {
-			return new DoubleCoordinates(0, 0, 0);
-		}
-
-		@Override
-		public void setOnPipe(CoreMultiBlockPipe pipe) {
-			((HSTubeSpeedup) pipe).orientation = this;
-		}
-	}
-
 	@Getter
 	private SpeedupDirection orientation;
 
@@ -115,12 +75,12 @@ protected void handleTileReachedClient(LPTravelingItemClient arrivingItem, TileE
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeEnum(orientation);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		orientation = input.readEnum(SpeedupDirection.class);
 	}
 
@@ -309,4 +269,43 @@ public boolean canPipeConnect(TileEntity tile, ForgeDirection side) {
 	public boolean isHSTube() {
 		return true;
 	}
+
+	@AllArgsConstructor
+	public enum SpeedupDirection implements ITubeRenderOrientation, ITubeOrientation {
+		//@formatter:off
+		NORTH(ForgeDirection.NORTH),
+		SOUTH(ForgeDirection.SOUTH),
+		EAST(ForgeDirection.EAST),
+		WEST(ForgeDirection.WEST);
+		//@formatter:on
+		@Getter
+		ForgeDirection dir1;
+
+		@Override
+		public void rotatePositions(IPositionRotateble set) {
+			if (this == SOUTH) {
+				set.rotateLeft();
+				set.rotateLeft();
+			} else if (this == EAST) {
+				set.rotateRight();
+			} else if (this == WEST) {
+				set.rotateLeft();
+			}
+		}
+
+		@Override
+		public ITubeRenderOrientation getRenderOrientation() {
+			return this;
+		}
+
+		@Override
+		public DoubleCoordinates getOffset() {
+			return new DoubleCoordinates(0, 0, 0);
+		}
+
+		@Override
+		public void setOnPipe(CoreMultiBlockPipe pipe) {
+			((HSTubeSpeedup) pipe).orientation = this;
+		}
+	}
 }
diff --git a/common/logisticspipes/pipes/unrouted/PipeItemsBasicTransport.java b/common/logisticspipes/pipes/unrouted/PipeItemsBasicTransport.java
index d64a94c8db..f3b83cbb2d 100644
--- a/common/logisticspipes/pipes/unrouted/PipeItemsBasicTransport.java
+++ b/common/logisticspipes/pipes/unrouted/PipeItemsBasicTransport.java
@@ -1,7 +1,5 @@
 package logisticspipes.pipes.unrouted;
 
-import java.io.IOException;
-
 import net.minecraft.item.Item;
 import net.minecraftforge.common.util.ForgeDirection;
 
@@ -20,10 +18,10 @@ public PipeItemsBasicTransport(Item item) {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {}
+	public void writeData(LPDataOutput output) {}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {}
+	public void readData(LPDataInput input) {}
 
 	@Override
 	public int getIconIndex(ForgeDirection direction) {
diff --git a/common/logisticspipes/proxy/ProxyManager.java b/common/logisticspipes/proxy/ProxyManager.java
index dc4f2aafe8..722f6f6d27 100644
--- a/common/logisticspipes/proxy/ProxyManager.java
+++ b/common/logisticspipes/proxy/ProxyManager.java
@@ -1,6 +1,5 @@
 package logisticspipes.proxy;
 
-import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -154,7 +153,7 @@ public static void load() {
 						return new IBCRenderState() {
 							@Override public boolean needsRenderUpdate() {return false;}
 							@Override public boolean isDirty() {return false;}
-							@Override public void writeData_LP(LPDataOutput output) throws IOException {
+							@Override public void writeData_LP(LPDataOutput output)  {
 								output.writeBoolean(false);
 							}
 							@Override public void readData_LP(LPDataInput input) {}
@@ -174,8 +173,8 @@ public static void load() {
 					}
 					@Override public IBCPluggableState getBCPlugableState() {
 						return new IBCPluggableState() {
-							@Override public void writeData(LPDataOutput output) throws IOException {}
-							@Override public void readData(LPDataInput input) throws IOException {}
+							@Override public void writeData(LPDataOutput output)  {}
+							@Override public void readData(LPDataInput input)  {}
 							@Override public boolean isDirty(boolean clean) {return false;}
 						};
 					}
diff --git a/common/logisticspipes/proxy/buildcraft/subproxies/IBCPluggableState.java b/common/logisticspipes/proxy/buildcraft/subproxies/IBCPluggableState.java
index 05f02c65bb..c60b675a6e 100644
--- a/common/logisticspipes/proxy/buildcraft/subproxies/IBCPluggableState.java
+++ b/common/logisticspipes/proxy/buildcraft/subproxies/IBCPluggableState.java
@@ -1,7 +1,5 @@
 package logisticspipes.proxy.buildcraft.subproxies;
 
-import java.io.IOException;
-
 import logisticspipes.interfaces.IClientState;
 import network.rs485.logisticspipes.util.LPDataInput;
 import network.rs485.logisticspipes.util.LPDataOutput;
@@ -9,10 +7,10 @@
 public interface IBCPluggableState extends IClientState {
 
 	@Override
-	void writeData(LPDataOutput output) throws IOException;
+	void writeData(LPDataOutput output);
 
 	@Override
-	void readData(LPDataInput input) throws IOException;
+	void readData(LPDataInput input);
 
 	boolean isDirty(boolean clean);
 }
diff --git a/common/logisticspipes/proxy/buildcraft/subproxies/IBCRenderState.java b/common/logisticspipes/proxy/buildcraft/subproxies/IBCRenderState.java
index c656826cf1..be4dec0c9d 100644
--- a/common/logisticspipes/proxy/buildcraft/subproxies/IBCRenderState.java
+++ b/common/logisticspipes/proxy/buildcraft/subproxies/IBCRenderState.java
@@ -1,7 +1,5 @@
 package logisticspipes.proxy.buildcraft.subproxies;
 
-import java.io.IOException;
-
 import network.rs485.logisticspipes.util.LPDataInput;
 import network.rs485.logisticspipes.util.LPDataOutput;
 
@@ -11,9 +9,9 @@ public interface IBCRenderState {
 
 	boolean isDirty();
 
-	void writeData_LP(LPDataOutput output) throws IOException;
+	void writeData_LP(LPDataOutput output);
 
-	void readData_LP(LPDataInput input) throws IOException;
+	void readData_LP(LPDataInput input);
 
 	void clean();
 
diff --git a/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPipeRenderState.java b/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPipeRenderState.java
index cf2d76b12d..4c6cd227dd 100644
--- a/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPipeRenderState.java
+++ b/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPipeRenderState.java
@@ -1,7 +1,5 @@
 package logisticspipes.proxy.buildcraft.subproxies;
 
-import java.io.IOException;
-
 import buildcraft.transport.PipeRenderState;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -12,7 +10,7 @@
 public class LPBCPipeRenderState extends PipeRenderState implements IBCRenderState {
 
 	@Override
-	public void writeData_LP(LPDataOutput output) throws IOException {
+	public void writeData_LP(LPDataOutput output) {
 		output.writeBoolean(true);
 		ByteBuf buf = Unpooled.buffer(128);
 		writeData(buf);
@@ -20,7 +18,7 @@ public void writeData_LP(LPDataOutput output) throws IOException {
 	}
 
 	@Override
-	public void readData_LP(LPDataInput input) throws IOException {
+	public void readData_LP(LPDataInput input) {
 		if (input.readBoolean()) {
 			ByteBuf buf = input.readByteBuf();
 			readData(buf);
diff --git a/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPluggableState.java b/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPluggableState.java
index 9fc79cf66a..1381d07bdc 100644
--- a/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPluggableState.java
+++ b/common/logisticspipes/proxy/buildcraft/subproxies/LPBCPluggableState.java
@@ -1,12 +1,10 @@
 package logisticspipes.proxy.buildcraft.subproxies;
 
-import java.io.IOException;
 import java.util.Arrays;
 
 import buildcraft.transport.PipePluggableState;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
-import lombok.SneakyThrows;
 
 import network.rs485.logisticspipes.util.LPDataIOWrapper;
 import network.rs485.logisticspipes.util.LPDataInput;
@@ -17,20 +15,19 @@ public class LPBCPluggableState extends PipePluggableState implements IBCPluggab
 	private byte[] oldBuffer;
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		ByteBuf buf = Unpooled.buffer(128);
 		this.writeData(buf);
 		output.writeByteBuf(buf);
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		ByteBuf buf = input.readByteBuf();
 		this.readData(buf);
 	}
 
 	@Override
-	@SneakyThrows({ IOException.class })
 	public boolean isDirty(boolean clean) {
 		byte[] newBytes = LPDataIOWrapper.collectData(this::writeData);
 		boolean result = !Arrays.equals(newBytes, oldBuffer);
diff --git a/common/logisticspipes/renderer/state/ConnectionMatrix.java b/common/logisticspipes/renderer/state/ConnectionMatrix.java
index cedd27e46b..dab6e19b3f 100644
--- a/common/logisticspipes/renderer/state/ConnectionMatrix.java
+++ b/common/logisticspipes/renderer/state/ConnectionMatrix.java
@@ -1,7 +1,5 @@
 package logisticspipes.renderer.state;
 
-import java.io.IOException;
-
 import net.minecraftforge.common.util.ForgeDirection;
 
 import network.rs485.logisticspipes.util.LPDataInput;
@@ -74,13 +72,13 @@ public void clean() {
 		dirty = false;
 	}
 
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeByte(mask);
 		output.writeByte(isBCPipeMask);
 		output.writeByte(isTDPipeMask);
 	}
 
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		byte newMask = input.readByte();
 
 		if (newMask != mask) {
diff --git a/common/logisticspipes/renderer/state/PipeRenderState.java b/common/logisticspipes/renderer/state/PipeRenderState.java
index 375a19015c..0797c1f672 100644
--- a/common/logisticspipes/renderer/state/PipeRenderState.java
+++ b/common/logisticspipes/renderer/state/PipeRenderState.java
@@ -1,6 +1,5 @@
 package logisticspipes.renderer.state;
 
-import java.io.IOException;
 import java.util.List;
 
 import net.minecraft.util.IIcon;
@@ -58,14 +57,14 @@ public boolean needsRenderUpdate() {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		pipeConnectionMatrix.writeData(output);
 		textureMatrix.writeData(output);
 		bcRenderState.writeData_LP(output); //Always needs to be last. Different length depending on proxy loading state.
 	}
 
 	@Override
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		pipeConnectionMatrix.readData(input);
 		textureMatrix.readData(input);
 		bcRenderState.readData_LP(input); //Always needs to be last. Different length depending on proxy loading state.
diff --git a/common/logisticspipes/renderer/state/TextureMatrix.java b/common/logisticspipes/renderer/state/TextureMatrix.java
index 4f89e6f176..bb3c50901d 100644
--- a/common/logisticspipes/renderer/state/TextureMatrix.java
+++ b/common/logisticspipes/renderer/state/TextureMatrix.java
@@ -1,7 +1,5 @@
 package logisticspipes.renderer.state;
 
-import java.io.IOException;
-
 import net.minecraftforge.common.util.ForgeDirection;
 
 import lombok.Getter;
@@ -112,7 +110,7 @@ public void clean() {
 		dirty = false;
 	}
 
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		for (int iconIndexe : iconIndexes) {
 			output.writeByte(iconIndexe);
 		}
@@ -126,7 +124,7 @@ public void writeData(LPDataOutput output) throws IOException {
 		output.writeForgeDirection(pointedOrientation);
 	}
 
-	public void readData(LPDataInput input) throws IOException {
+	public void readData(LPDataInput input) {
 		for (int i = 0; i < iconIndexes.length; i++) {
 			int icon = input.readByte();
 			if (iconIndexes[i] != icon) {
diff --git a/common/logisticspipes/request/resources/DictResource.java b/common/logisticspipes/request/resources/DictResource.java
index b62b81186c..560228c7d2 100644
--- a/common/logisticspipes/request/resources/DictResource.java
+++ b/common/logisticspipes/request/resources/DictResource.java
@@ -1,6 +1,5 @@
 package logisticspipes.request.resources;
 
-import java.io.IOException;
 import java.util.BitSet;
 
 import net.minecraft.item.ItemStack;
@@ -17,9 +16,8 @@
 
 public class DictResource implements IResource {
 
-	public ItemIdentifierStack stack;
 	private final IRequestItems requester;
-
+	public ItemIdentifierStack stack;
 	//match all items with same oredict name
 	public boolean use_od = false;
 	//match all items with same id
@@ -28,13 +26,14 @@ public class DictResource implements IResource {
 	public boolean ignore_nbt = false;
 	//match all items with same oredict prefix
 	public boolean use_category = false;
+	private Object ccObject;
 
 	public DictResource(ItemIdentifierStack stack, IRequestItems requester) {
 		this.stack = stack;
 		this.requester = requester;
 	}
 
-	public DictResource(LPDataInput input) throws IOException {
+	public DictResource(LPDataInput input) {
 		stack = input.readItemIdentifierStack();
 		requester = null;
 		BitSet bits = input.readBitSet();
@@ -45,7 +44,7 @@ public DictResource(LPDataInput input) throws IOException {
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeItemIdentifierStack(stack);
 		BitSet bits = new BitSet();
 		bits.set(0, use_od);
@@ -161,16 +160,14 @@ public IResource copyForDisplayWith(int amount) {
 		return clone;
 	}
 
-	private Object ccObject;
-
 	@Override
-	public void setCCType(Object type) {
-		ccObject = type;
+	public Object getCCType() {
+		return ccObject;
 	}
 
 	@Override
-	public Object getCCType() {
-		return ccObject;
+	public void setCCType(Object type) {
+		ccObject = type;
 	}
 
 	@Override
diff --git a/common/logisticspipes/request/resources/FluidResource.java b/common/logisticspipes/request/resources/FluidResource.java
index c149335021..f4aea0cece 100644
--- a/common/logisticspipes/request/resources/FluidResource.java
+++ b/common/logisticspipes/request/resources/FluidResource.java
@@ -1,7 +1,5 @@
 package logisticspipes.request.resources;
 
-import java.io.IOException;
-
 import logisticspipes.interfaces.routing.IRequestFluid;
 import logisticspipes.routing.IRouter;
 import logisticspipes.utils.FluidIdentifier;
@@ -14,8 +12,9 @@
 public class FluidResource implements IResource {
 
 	private final FluidIdentifier liquid;
-	private int amount;
 	private final IRequestFluid target;
+	private int amount;
+	private Object ccObject;
 
 	public FluidResource(FluidIdentifier liquid, int amount, IRequestFluid target) {
 		this.liquid = liquid;
@@ -23,14 +22,14 @@ public FluidResource(FluidIdentifier liquid, int amount, IRequestFluid target) {
 		this.target = target;
 	}
 
-	public FluidResource(LPDataInput input) throws IOException {
+	public FluidResource(LPDataInput input) {
 		liquid = FluidIdentifier.get(input.readItemIdentifier());
 		amount = input.readInt();
 		target = null;
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeItemIdentifier(liquid.getItemIdentifier());
 		output.writeInt(amount);
 	}
@@ -88,16 +87,14 @@ public IResource copyForDisplayWith(int amount) {
 		return new FluidResource(liquid, amount, null);
 	}
 
-	private Object ccObject;
-
 	@Override
-	public void setCCType(Object type) {
-		ccObject = type;
+	public Object getCCType() {
+		return ccObject;
 	}
 
 	@Override
-	public Object getCCType() {
-		return ccObject;
+	public void setCCType(Object type) {
+		ccObject = type;
 	}
 
 	@Override
diff --git a/common/logisticspipes/request/resources/IResource.java b/common/logisticspipes/request/resources/IResource.java
index bd32163dd8..ed65cc0e76 100644
--- a/common/logisticspipes/request/resources/IResource.java
+++ b/common/logisticspipes/request/resources/IResource.java
@@ -1,7 +1,5 @@
 package logisticspipes.request.resources;
 
-import java.io.IOException;
-
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 
@@ -18,14 +16,6 @@ public interface IResource extends ILPCCTypeHolder {
 
 	ItemIdentifier getAsItem();
 
-	/**
-	 * Settings only apply for the normal Item Implementation.
-	 */
-	enum MatchSettings {
-		NORMAL,
-		WITHOUT_NBT
-	}
-
 	int getRequestedAmount();
 
 	IRouter getRouter();
@@ -34,7 +24,7 @@ enum MatchSettings {
 
 	IResource clone(int multiplier);
 
-	void writeData(LPDataOutput output) throws IOException;
+	void writeData(LPDataOutput output);
 
 	boolean mergeForDisplay(IResource resource, int withAmount); //Amount overrides existing amount inside the resource
 
@@ -45,6 +35,14 @@ enum MatchSettings {
 
 	ItemIdentifierStack getDisplayItem();
 
+	/**
+	 * Settings only apply for the normal Item Implementation.
+	 */
+	enum MatchSettings {
+		NORMAL,
+		WITHOUT_NBT
+	}
+
 	enum ColorCode {
 		NONE,
 		MISSING,
diff --git a/common/logisticspipes/request/resources/ItemResource.java b/common/logisticspipes/request/resources/ItemResource.java
index ff50d520d6..047432e55e 100644
--- a/common/logisticspipes/request/resources/ItemResource.java
+++ b/common/logisticspipes/request/resources/ItemResource.java
@@ -1,7 +1,5 @@
 package logisticspipes.request.resources;
 
-import java.io.IOException;
-
 import logisticspipes.interfaces.routing.IRequestItems;
 import logisticspipes.routing.IRouter;
 import logisticspipes.utils.item.ItemIdentifier;
@@ -14,19 +12,20 @@ public class ItemResource implements IResource {
 
 	private final ItemIdentifierStack stack;
 	private final IRequestItems requester;
+	private Object ccObject;
 
 	public ItemResource(ItemIdentifierStack stack, IRequestItems requester) {
 		this.stack = stack;
 		this.requester = requester;
 	}
 
-	public ItemResource(LPDataInput input) throws IOException {
+	public ItemResource(LPDataInput input) {
 		stack = input.readItemIdentifierStack();
 		requester = null;
 	}
 
 	@Override
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeItemIdentifierStack(stack);
 	}
 
@@ -93,16 +92,14 @@ public IResource copyForDisplayWith(int amount) {
 		return new ItemResource(stack, requester);
 	}
 
-	private Object ccObject;
-
 	@Override
-	public void setCCType(Object type) {
-		ccObject = type;
+	public Object getCCType() {
+		return ccObject;
 	}
 
 	@Override
-	public Object getCCType() {
-		return ccObject;
+	public void setCCType(Object type) {
+		ccObject = type;
 	}
 
 	@Override
diff --git a/common/logisticspipes/request/resources/ResourceNetwork.java b/common/logisticspipes/request/resources/ResourceNetwork.java
index 0dc23dcbc8..b1a93c28ac 100644
--- a/common/logisticspipes/request/resources/ResourceNetwork.java
+++ b/common/logisticspipes/request/resources/ResourceNetwork.java
@@ -1,26 +1,24 @@
 package logisticspipes.request.resources;
 
-import java.io.IOException;
-
 import network.rs485.logisticspipes.util.LPDataInput;
 import network.rs485.logisticspipes.util.LPDataOutput;
 
 public enum ResourceNetwork {
 	DictResource(DictResource.class) {
 		@Override
-		protected IResource readData(LPDataInput input) throws IOException {
+		protected IResource readData(LPDataInput input) {
 			return new DictResource(input);
 		}
 	},
 	ItemResource(ItemResource.class) {
 		@Override
-		protected IResource readData(LPDataInput input) throws IOException {
+		protected IResource readData(LPDataInput input) {
 			return new ItemResource(input);
 		}
 	},
 	FluidResource(FluidResource.class) {
 		@Override
-		protected IResource readData(LPDataInput input) throws IOException {
+		protected IResource readData(LPDataInput input) {
 			return new FluidResource(input);
 		}
 	};
@@ -31,7 +29,7 @@ protected IResource readData(LPDataInput input) throws IOException {
 		this.clazz = clazz;
 	}
 
-	public static void writeResource(LPDataOutput output, IResource resource) throws IOException {
+	public static void writeResource(LPDataOutput output, IResource resource) {
 		if (resource == null) {
 			output.writeInt(-1);
 			return;
@@ -47,7 +45,7 @@ public static void writeResource(LPDataOutput output, IResource resource) throws
 		throw new UnsupportedOperationException(resource.getClass().toString());
 	}
 
-	public static IResource readResource(LPDataInput input) throws IOException {
+	public static IResource readResource(LPDataInput input) {
 		int id = input.readInt();
 		if (id == -1) {
 			return null;
@@ -55,5 +53,5 @@ public static IResource readResource(LPDataInput input) throws IOException {
 		return ResourceNetwork.values()[id].readData(input);
 	}
 
-	protected abstract IResource readData(LPDataInput input) throws IOException;
+	protected abstract IResource readData(LPDataInput input);
 }
diff --git a/common/logisticspipes/routing/LaserData.java b/common/logisticspipes/routing/LaserData.java
index eaeec23379..59639f96c9 100644
--- a/common/logisticspipes/routing/LaserData.java
+++ b/common/logisticspipes/routing/LaserData.java
@@ -1,6 +1,5 @@
 package logisticspipes.routing;
 
-import java.io.IOException;
 import java.util.EnumSet;
 
 import net.minecraftforge.common.util.ForgeDirection;
@@ -34,7 +33,7 @@ public class LaserData {
 	private boolean startPipe = false;
 	private int length = 1;
 
-	public void writeData(LPDataOutput output) throws IOException {
+	public void writeData(LPDataOutput output) {
 		output.writeInt(posX);
 		output.writeInt(posY);
 		output.writeInt(posZ);
@@ -47,7 +46,7 @@ public void writeData(LPDataOutput output) throws IOException {
 		}
 	}
 
-	public LaserData readData(LPDataInput input) throws IOException {
+	public LaserData readData(LPDataInput input) {
 		posX = input.readInt();
 		posY = input.readInt();
 		posZ = input.readInt();
diff --git a/common/logisticspipes/ticks/ClientPacketBufferHandlerThread.java b/common/logisticspipes/ticks/ClientPacketBufferHandlerThread.java
index c089ab34db..baa1fdc693 100644
--- a/common/logisticspipes/ticks/ClientPacketBufferHandlerThread.java
+++ b/common/logisticspipes/ticks/ClientPacketBufferHandlerThread.java
@@ -23,6 +23,65 @@
 
 public class ClientPacketBufferHandlerThread {
 
+	private final ClientCompressorThread clientCompressorThread = new ClientCompressorThread();
+	private final ClientDecompressorThread clientDecompressorThread = new ClientDecompressorThread();
+
+	public ClientPacketBufferHandlerThread() {}
+
+	private static byte[] compress(byte[] content) {
+		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+		try {
+			GZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);
+			gzipOutputStream.write(content);
+			gzipOutputStream.close();
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+		return byteArrayOutputStream.toByteArray();
+	}
+
+	private static byte[] decompress(byte[] contentBytes) {
+		ByteArrayOutputStream out = new ByteArrayOutputStream();
+		try {
+			GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));
+			int buffer = 0;
+			while ((buffer = gzip.read()) != -1) {
+				out.write(buffer);
+			}
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+		return out.toByteArray();
+	}
+
+	public void clientTick(ClientTickEvent event) {
+		if (event.phase != Phase.END) {
+			return;
+		}
+		clientDecompressorThread.clientTickEnd();
+	}
+
+	public void setPause(boolean flag) {
+		clientCompressorThread.setPause(flag);
+	}
+
+	public void addPacketToCompressor(ModernPacket packet) {
+		clientCompressorThread.addPacketToCompressor(packet);
+	}
+
+	public void handlePacket(byte[] content) {
+		clientDecompressorThread.handlePacket(content);
+	}
+
+	public void clear() {
+		clientCompressorThread.clear();
+		clientDecompressorThread.clear();
+	}
+
+	public void queueFailedPacket(ModernPacket packet, EntityPlayer player) {
+		clientDecompressorThread.queueFailedPacket(packet, player);
+	}
+
 	private class ClientCompressorThread extends Thread {
 
 		//list of C->S packets to be serialized and compressed
@@ -45,46 +104,42 @@ public ClientCompressorThread() {
 		@Override
 		public void run() {
 			while (true) {
-				try {
-					synchronized (clientList) {
-						if (!pause && clientList.size() > 0) {
-							clientBuffer = LPDataIOWrapper.collectData(output -> {
-								output.writeBytes(clientBuffer);
-								clearLock.lock();
-								try {
-									for (ModernPacket packet : clientList) {
-										output.writeShort(packet.getId());
-										output.writeInt(packet.getDebugId());
-										packet.writeData(output);
-									}
-								} finally {
-									clientList.clear();
-									clearLock.unlock();
+				synchronized (clientList) {
+					if (!pause && clientList.size() > 0) {
+						clientBuffer = LPDataIOWrapper.collectData(output -> {
+							output.writeBytes(clientBuffer);
+							clearLock.lock();
+							try {
+								for (ModernPacket packet : clientList) {
+									output.writeShort(packet.getId());
+									output.writeInt(packet.getDebugId());
+									packet.writeData(output);
 								}
-							});
-						}
+							} finally {
+								clientList.clear();
+								clearLock.unlock();
+							}
+						});
 					}
-					//Send Content
-					if (clientBuffer.length > 0) {
-						while (clientBuffer.length > 1024 * 32) {
-							byte[] sendbuffer = Arrays.copyOf(clientBuffer, 1024 * 32);
-							clientBuffer = Arrays.copyOfRange(clientBuffer, 1024 * 32, clientBuffer.length);
-							byte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);
-							MainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));
-						}
-						byte[] sendbuffer = clientBuffer;
-						clientBuffer = new byte[] {};
+				}
+				//Send Content
+				if (clientBuffer.length > 0) {
+					while (clientBuffer.length > 1024 * 32) {
+						byte[] sendbuffer = Arrays.copyOf(clientBuffer, 1024 * 32);
+						clientBuffer = Arrays.copyOfRange(clientBuffer, 1024 * 32, clientBuffer.length);
 						byte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);
 						MainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));
 					}
-				} catch (IOException e) {
-					e.printStackTrace();
+					byte[] sendbuffer = clientBuffer;
+					clientBuffer = new byte[] {};
+					byte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);
+					MainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));
 				}
 				synchronized (clientList) {
 					while (pause || clientList.size() == 0) {
 						try {
 							clientList.wait();
-						} catch (InterruptedException e) {}
+						} catch (InterruptedException ignored) { }
 					}
 				}
 				if (clear) {
@@ -126,19 +181,17 @@ public void run() {
 		}
 	}
 
-	private final ClientCompressorThread clientCompressorThread = new ClientCompressorThread();
-
 	private class ClientDecompressorThread extends Thread {
 
 		//Received compressed S->C data
 		private final LinkedList<byte[]> queue = new LinkedList<>();
-		//decompressed serialized S->C data
-		private byte[] ByteBuffer = new byte[] {};
 		//FIFO for deserialized S->C packets, decompressor adds, tickEnd removes
 		private final LinkedList<Pair<EntityPlayer, byte[]>> PacketBuffer = new LinkedList<>();
 		private final ReentrantLock packetBufferLock = new ReentrantLock();
 		//List of packets that that should be reattempted to apply in the next tick
 		private final LinkedList<Pair<EntityPlayer, ModernPacket>> retryPackets = new LinkedList<>();
+		//decompressed serialized S->C data
+		private byte[] ByteBuffer = new byte[] {};
 		//Clear content on next tick
 		private boolean clear = false;
 
@@ -149,14 +202,9 @@ public ClientDecompressorThread() {
 		}
 
 		private void handlePacketData(final Pair<EntityPlayer, byte[]> playerDataPair) {
-			try {
-				LPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {
-					PacketHandler.onPacketData(input, playerDataPair.getValue1());
-				});
-			} catch (IOException e) {
-				System.err.println("IO Error in handlePacketData for player " + playerDataPair.getValue1().getCommandSenderName());
-				e.printStackTrace();
-			}
+			LPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {
+				PacketHandler.onPacketData(input, playerDataPair.getValue1());
+			});
 		}
 
 		public void clientTickEnd() {
@@ -220,7 +268,7 @@ public void run() {
 					while (queue.size() == 0) {
 						try {
 							queue.wait();
-						} catch (InterruptedException e) { }
+						} catch (InterruptedException ignored) { }
 					}
 				}
 				if (clear) {
@@ -247,62 +295,4 @@ public void queueFailedPacket(ModernPacket packet, EntityPlayer player) {
 			retryPackets.add(new Pair<>(player, packet));
 		}
 	}
-
-	private final ClientDecompressorThread clientDecompressorThread = new ClientDecompressorThread();
-
-	public ClientPacketBufferHandlerThread() {}
-
-	public void clientTick(ClientTickEvent event) {
-		if (event.phase != Phase.END) {
-			return;
-		}
-		clientDecompressorThread.clientTickEnd();
-	}
-
-	public void setPause(boolean flag) {
-		clientCompressorThread.setPause(flag);
-	}
-
-	public void addPacketToCompressor(ModernPacket packet) {
-		clientCompressorThread.addPacketToCompressor(packet);
-	}
-
-	public void handlePacket(byte[] content) {
-		clientDecompressorThread.handlePacket(content);
-	}
-
-	private static byte[] compress(byte[] content) {
-		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-		try {
-			GZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);
-			gzipOutputStream.write(content);
-			gzipOutputStream.close();
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-		return byteArrayOutputStream.toByteArray();
-	}
-
-	private static byte[] decompress(byte[] contentBytes) {
-		ByteArrayOutputStream out = new ByteArrayOutputStream();
-		try {
-			GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));
-			int buffer = 0;
-			while ((buffer = gzip.read()) != -1) {
-				out.write(buffer);
-			}
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-		return out.toByteArray();
-	}
-
-	public void clear() {
-		clientCompressorThread.clear();
-		clientDecompressorThread.clear();
-	}
-
-	public void queueFailedPacket(ModernPacket packet, EntityPlayer player) {
-		clientDecompressorThread.queueFailedPacket(packet, player);
-	}
 }
diff --git a/common/logisticspipes/ticks/ServerPacketBufferHandlerThread.java b/common/logisticspipes/ticks/ServerPacketBufferHandlerThread.java
index 3bda77d247..a38d70b9c7 100644
--- a/common/logisticspipes/ticks/ServerPacketBufferHandlerThread.java
+++ b/common/logisticspipes/ticks/ServerPacketBufferHandlerThread.java
@@ -26,6 +26,67 @@
 
 public class ServerPacketBufferHandlerThread {
 
+	private final ServerCompressorThread serverCompressorThread = new ServerCompressorThread();
+	private final ServerDecompressorThread serverDecompressorThread = new ServerDecompressorThread();
+
+	public ServerPacketBufferHandlerThread() {}
+
+	private static byte[] compress(byte[] content) {
+		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+		try {
+			GZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);
+			gzipOutputStream.write(content);
+			gzipOutputStream.close();
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+		return byteArrayOutputStream.toByteArray();
+	}
+
+	private static byte[] decompress(byte[] contentBytes) {
+		ByteArrayOutputStream out = new ByteArrayOutputStream();
+		try {
+			GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));
+			int buffer = 0;
+			while ((buffer = gzip.read()) != -1) {
+				out.write(buffer);
+			}
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+		return out.toByteArray();
+	}
+
+	public void serverTick(ServerTickEvent event) {
+		if (event.phase != Phase.END) {
+			return;
+		}
+		serverDecompressorThread.serverTickEnd();
+	}
+
+	public void setPause(boolean flag) {
+		serverCompressorThread.setPause(flag);
+	}
+
+	public void addPacketToCompressor(ModernPacket packet, EntityPlayer player) {
+		serverCompressorThread.addPacketToCompressor(packet, player);
+	}
+
+	public void handlePacket(byte[] content, EntityPlayer player) {
+		serverDecompressorThread.handlePacket(content, player);
+	}
+
+	public void clear(final EntityPlayer player) {
+		new Thread() {
+
+			@Override
+			public void run() {
+				serverCompressorThread.clear(player);
+				serverDecompressorThread.clear(player);
+			}
+		}.start();
+	}
+
 	private class ServerCompressorThread extends Thread {
 
 		//Map of Players to lists of S->C packets to be serialized and compressed
@@ -46,53 +107,49 @@ public ServerCompressorThread() {
 		@Override
 		public void run() {
 			while (true) {
-				try {
-					synchronized (serverList) {
-						if (!pause) {
-							for (Entry<EntityPlayer, LinkedList<ModernPacket>> playerPacketEntry : serverList.entrySet()) {
-								EntityPlayer player = playerPacketEntry.getKey();
-								serverBuffer.put(player, LPDataIOWrapper.collectData(output -> {
-									if (serverBuffer.containsKey(player)) {
-										output.writeBytes(serverBuffer.get(player));
-									}
+				synchronized (serverList) {
+					if (!pause) {
+						for (Entry<EntityPlayer, LinkedList<ModernPacket>> playerPacketEntry : serverList.entrySet()) {
+							EntityPlayer player = playerPacketEntry.getKey();
+							serverBuffer.put(player, LPDataIOWrapper.collectData(output -> {
+								if (serverBuffer.containsKey(player)) {
+									output.writeBytes(serverBuffer.get(player));
+								}
 
-									LinkedList<ModernPacket> packets = playerPacketEntry.getValue();
-									try {
-										for (ModernPacket packet : packets) {
-											output.writeShort(packet.getId());
-											output.writeInt(packet.getDebugId());
-											packet.writeData(output);
-										}
-									} finally {
-										packets.clear();
+								LinkedList<ModernPacket> packets = playerPacketEntry.getValue();
+								try {
+									for (ModernPacket packet : packets) {
+										output.writeShort(packet.getId());
+										output.writeInt(packet.getDebugId());
+										packet.writeData(output);
 									}
-								}));
-							}
-							serverList.clear();
+								} finally {
+									packets.clear();
+								}
+							}));
 						}
+						serverList.clear();
 					}
-					//Send Content
-					for (Entry<EntityPlayer, byte[]> player : serverBuffer.entrySet()) {
-						while (player.getValue().length > 32 * 1024) {
-							byte[] sendbuffer = Arrays.copyOf(player.getValue(), 1024 * 32);
-							byte[] newbuffer = Arrays.copyOfRange(player.getValue(), 1024 * 32, player.getValue().length);
-							player.setValue(newbuffer);
-							byte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);
-							MainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());
-						}
-						byte[] sendbuffer = player.getValue();
+				}
+				//Send Content
+				for (Entry<EntityPlayer, byte[]> player : serverBuffer.entrySet()) {
+					while (player.getValue().length > 32 * 1024) {
+						byte[] sendbuffer = Arrays.copyOf(player.getValue(), 1024 * 32);
+						byte[] newbuffer = Arrays.copyOfRange(player.getValue(), 1024 * 32, player.getValue().length);
+						player.setValue(newbuffer);
 						byte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);
 						MainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());
 					}
-				} catch (IOException e) {
-					e.printStackTrace();
+					byte[] sendbuffer = player.getValue();
+					byte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);
+					MainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());
 				}
 				serverBuffer.clear();
 				synchronized (serverList) {
 					while (pause || serverList.size() == 0) {
 						try {
 							serverList.wait();
-						} catch (InterruptedException e) {}
+						} catch (InterruptedException ignored) { }
 					}
 				}
 				synchronized (playersToClear) {
@@ -140,8 +197,6 @@ public void clear(EntityPlayer player) {
 		}
 	}
 
-	private final ServerCompressorThread serverCompressorThread = new ServerCompressorThread();
-
 	private class ServerDecompressorThread extends Thread {
 
 		//Map of Player to received compressed C->S data
@@ -161,14 +216,9 @@ public ServerDecompressorThread() {
 		}
 
 		private void handlePacketData(final Pair<EntityPlayer, byte[]> playerDataPair) {
-			try {
-				LPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {
-					PacketHandler.onPacketData(input, playerDataPair.getValue1());
-				});
-			} catch (IOException e) {
-				System.err.println("IO Error in handlePacketData for player " + playerDataPair.getValue1().getCommandSenderName());
-				e.printStackTrace();
-			}
+			LPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {
+				PacketHandler.onPacketData(input, playerDataPair.getValue1());
+			});
 		}
 
 		public void serverTickEnd() {
@@ -262,7 +312,7 @@ public void run() {
 					while (queue.size() == 0) {
 						try {
 							queue.wait();
-						} catch (InterruptedException e) {}
+						} catch (InterruptedException ignored) { }
 					}
 				}
 				synchronized (playersToClear) {
@@ -298,64 +348,4 @@ public void clear(EntityPlayer player) {
 			}
 		}
 	}
-
-	private final ServerDecompressorThread serverDecompressorThread = new ServerDecompressorThread();
-
-	public ServerPacketBufferHandlerThread() {}
-
-	public void serverTick(ServerTickEvent event) {
-		if (event.phase != Phase.END) {
-			return;
-		}
-		serverDecompressorThread.serverTickEnd();
-	}
-
-	public void setPause(boolean flag) {
-		serverCompressorThread.setPause(flag);
-	}
-
-	public void addPacketToCompressor(ModernPacket packet, EntityPlayer player) {
-		serverCompressorThread.addPacketToCompressor(packet, player);
-	}
-
-	public void handlePacket(byte[] content, EntityPlayer player) {
-		serverDecompressorThread.handlePacket(content, player);
-	}
-
-	private static byte[] compress(byte[] content) {
-		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-		try {
-			GZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);
-			gzipOutputStream.write(content);
-			gzipOutputStream.close();
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-		return byteArrayOutputStream.toByteArray();
-	}
-
-	private static byte[] decompress(byte[] contentBytes) {
-		ByteArrayOutputStream out = new ByteArrayOutputStream();
-		try {
-			GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));
-			int buffer = 0;
-			while ((buffer = gzip.read()) != -1) {
-				out.write(buffer);
-			}
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-		return out.toByteArray();
-	}
-
-	public void clear(final EntityPlayer player) {
-		new Thread() {
-
-			@Override
-			public void run() {
-				serverCompressorThread.clear(player);
-				serverDecompressorThread.clear(player);
-			}
-		}.start();
-	}
 }
diff --git a/common/network/rs485/logisticspipes/util/LPDataIOWrapper.java b/common/network/rs485/logisticspipes/util/LPDataIOWrapper.java
index 353af4c094..71ffc948a7 100644
--- a/common/network/rs485/logisticspipes/util/LPDataIOWrapper.java
+++ b/common/network/rs485/logisticspipes/util/LPDataIOWrapper.java
@@ -89,16 +89,7 @@ private static LPDataIOWrapper getInstance(ByteBuf buffer) {
 		}
 	}
 
-	private void unsetBuffer() {
-		if (localBuffer.hasMemoryAddress()) {
-			if (--reference < 1) {
-				BUFFER_WRAPPER_MAP.remove(localBuffer.memoryAddress());
-			}
-		}
-		localBuffer = null;
-	}
-
-	public static void provideData(byte[] data, LPDataInputConsumer dataInputConsumer) throws IOException {
+	public static void provideData(byte[] data, LPDataInputConsumer dataInputConsumer) {
 		ByteBuf dataBuffer = wrappedBuffer(data);
 		LPDataIOWrapper lpData = getInstance(dataBuffer);
 
@@ -108,7 +99,7 @@ public static void provideData(byte[] data, LPDataInputConsumer dataInputConsume
 		dataBuffer.release();
 	}
 
-	public static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) throws IOException {
+	public static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) {
 		ByteBuf dataBuffer = buffer();
 		LPDataIOWrapper lpData = getInstance(dataBuffer);
 
@@ -123,7 +114,7 @@ public static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) throws
 		return data;
 	}
 
-	public static void provideData(ByteBuf dataBuffer, LPDataInputConsumer dataInputConsumer) throws IOException {
+	public static void provideData(ByteBuf dataBuffer, LPDataInputConsumer dataInputConsumer) {
 		LPDataIOWrapper lpData = getInstance(dataBuffer);
 
 		dataInputConsumer.accept(lpData);
@@ -131,7 +122,7 @@ public static void provideData(ByteBuf dataBuffer, LPDataInputConsumer dataInput
 		lpData.unsetBuffer();
 	}
 
-	public static void writeData(ByteBuf dataBuffer, LPDataOutputConsumer dataOutputConsumer) throws IOException {
+	public static void writeData(ByteBuf dataBuffer, LPDataOutputConsumer dataOutputConsumer) {
 		LPDataIOWrapper lpData = getInstance(dataBuffer);
 
 		dataOutputConsumer.accept(lpData);
@@ -139,8 +130,17 @@ public static void writeData(ByteBuf dataBuffer, LPDataOutputConsumer dataOutput
 		lpData.unsetBuffer();
 	}
 
+	private void unsetBuffer() {
+		if (localBuffer.hasMemoryAddress()) {
+			if (--reference < 1) {
+				BUFFER_WRAPPER_MAP.remove(localBuffer.memoryAddress());
+			}
+		}
+		localBuffer = null;
+	}
+
 	@Override
-	public void writeByteArray(byte[] arr) throws IOException {
+	public void writeByteArray(byte[] arr) {
 		if (arr == null) {
 			writeInt(-1);
 		} else {
@@ -150,7 +150,7 @@ public void writeByteArray(byte[] arr) throws IOException {
 	}
 
 	@Override
-	public byte[] readByteArray() throws IOException {
+	public byte[] readByteArray() {
 		final int length = readInt();
 		if (length == -1) {
 			return null;
@@ -205,7 +205,7 @@ public void writeBoolean(boolean b) {
 	}
 
 	@Override
-	public void writeUTF(String s) throws IOException {
+	public void writeUTF(String s) {
 		if (s == null) {
 			writeInt(-1);
 		} else {
@@ -223,7 +223,7 @@ public void writeForgeDirection(ForgeDirection direction) {
 	}
 
 	@Override
-	public void writeExitRoute(ExitRoute route) throws IOException {
+	public void writeExitRoute(ExitRoute route) {
 		writeIRouter(route.destination);
 		writeIRouter(route.root);
 		writeForgeDirection(route.exitOrientation);
@@ -257,7 +257,7 @@ public void writeLPPosition(DoubleCoordinates pos) {
 	}
 
 	@Override
-	public <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) throws IOException {
+	public <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) {
 		T[] parts = clazz.getEnumConstants();
 		final int length = parts.length / 8 + (parts.length % 8 == 0 ? 0 : 1);
 		byte[] set = new byte[length];
@@ -272,7 +272,7 @@ public <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) t
 	}
 
 	@Override
-	public void writeBitSet(BitSet bits) throws IOException {
+	public void writeBitSet(BitSet bits) {
 		if (bits == null) {
 			throw new NullPointerException("BitSet may not be null");
 		}
@@ -280,17 +280,22 @@ public void writeBitSet(BitSet bits) throws IOException {
 	}
 
 	@Override
-	public void writeNBTTagCompound(NBTTagCompound tag) throws IOException {
+	public void writeNBTTagCompound(NBTTagCompound tag) {
 		if (tag == null) {
 			writeByte(0);
 		} else {
 			writeByte(1);
-			CompressedStreamTools.write(tag, new ByteBufOutputStream(localBuffer));
+			try {
+				CompressedStreamTools.write(tag, new ByteBufOutputStream(localBuffer));
+			} catch (IOException e) {
+
+				e.printStackTrace();
+			}
 		}
 	}
 
 	@Override
-	public void writeBooleanArray(boolean[] arr) throws IOException {
+	public void writeBooleanArray(boolean[] arr) {
 		if (arr == null) {
 			writeInt(-1);
 		} else if (arr.length == 0) {
@@ -319,7 +324,7 @@ public void writeIntArray(int[] arr) {
 	}
 
 	@Override
-	public void writeItemStack(ItemStack itemstack) throws IOException {
+	public void writeItemStack(ItemStack itemstack) {
 		if (itemstack == null) {
 			writeInt(0);
 		} else {
@@ -331,7 +336,7 @@ public void writeItemStack(ItemStack itemstack) throws IOException {
 	}
 
 	@Override
-	public void writeItemIdentifier(ItemIdentifier item) throws IOException {
+	public void writeItemIdentifier(ItemIdentifier item) {
 		if (item == null) {
 			writeInt(0);
 		} else {
@@ -342,7 +347,7 @@ public void writeItemIdentifier(ItemIdentifier item) throws IOException {
 	}
 
 	@Override
-	public void writeItemIdentifierStack(ItemIdentifierStack stack) throws IOException {
+	public void writeItemIdentifierStack(ItemIdentifierStack stack) {
 		if (stack == null) {
 			writeInt(-1);
 		} else {
@@ -352,7 +357,7 @@ public void writeItemIdentifierStack(ItemIdentifierStack stack) throws IOExcepti
 	}
 
 	@Override
-	public <T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) throws IOException {
+	public <T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) {
 		if (collection == null) {
 			writeInt(-1);
 		} else {
@@ -364,7 +369,7 @@ public <T> void writeCollection(Collection<T> collection, IWriteListObject<T> ha
 	}
 
 	@Override
-	public void writeOrderInfo(IOrderInfoProvider order) throws IOException {
+	public void writeOrderInfo(IOrderInfoProvider order) {
 		writeItemIdentifierStack(order.getAsDisplayItem());
 		writeInt(order.getRouterId());
 		writeBoolean(order.isFinished());
@@ -382,7 +387,7 @@ public <T extends Enum<T>> void writeEnum(T obj) {
 	}
 
 	@Override
-	public void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) throws IOException {
+	public void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) {
 		writeCollection(orderList, LPDataOutput::writeOrderInfo);
 		writeCollection(orderList.getSubOrders(), LPDataOutput::writeLinkedLogisticsOrderList);
 	}
@@ -410,12 +415,12 @@ public void writeLongArray(long[] arr) {
 	}
 
 	@Override
-	public void writeResource(IResource res) throws IOException {
+	public void writeResource(IResource res) {
 		ResourceNetwork.writeResource(this, res);
 	}
 
 	@Override
-	public void writeBytes(byte[] arr) throws IOException {
+	public void writeBytes(byte[] arr) {
 		localBuffer.writeBytes(arr);
 	}
 
@@ -455,7 +460,7 @@ public boolean readBoolean() {
 	}
 
 	@Override
-	public String readUTF() throws IOException {
+	public String readUTF() {
 		byte[] arr = readByteArray();
 		if (arr == null) {
 			return null;
@@ -475,7 +480,7 @@ public ForgeDirection readForgeDirection() {
 	}
 
 	@Override
-	public ExitRoute readExitRoute(World world) throws IOException {
+	public ExitRoute readExitRoute(World world) {
 		IRouter destination = readIRouter(world);
 		IRouter root = readIRouter(world);
 		ForgeDirection exitOri = readForgeDirection();
@@ -513,7 +518,7 @@ public DoubleCoordinates readLPPosition() {
 	}
 
 	@Override
-	public <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOException {
+	public <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) {
 		EnumSet<T> types = EnumSet.noneOf(clazz);
 		byte[] arr = readByteArray();
 		if (arr != null) {
@@ -528,7 +533,7 @@ public <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOExcep
 	}
 
 	@Override
-	public BitSet readBitSet() throws IOException {
+	public BitSet readBitSet() {
 		byte[] arr = readByteArray();
 		if (arr == null) {
 			return new BitSet();
@@ -538,17 +543,22 @@ public BitSet readBitSet() throws IOException {
 	}
 
 	@Override
-	public NBTTagCompound readNBTTagCompound() throws IOException {
+	public NBTTagCompound readNBTTagCompound() {
 		boolean isEmpty = (readByte() == 0);
 		if (isEmpty) {
 			return null;
 		}
 
-		return CompressedStreamTools.func_152456_a(new ByteBufInputStream(localBuffer), NBTSizeTracker.field_152451_a);
+		try {
+			return CompressedStreamTools.func_152456_a(new ByteBufInputStream(localBuffer), NBTSizeTracker.field_152451_a);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		return null;
 	}
 
 	@Override
-	public boolean[] readBooleanArray() throws IOException {
+	public boolean[] readBooleanArray() {
 		final int bitCount = localBuffer.readInt();
 		if (bitCount == -1) {
 			return null;
@@ -581,14 +591,14 @@ public int[] readIntArray() {
 	}
 
 	@Override
-	public byte[] readBytes(int length) throws IOException {
+	public byte[] readBytes(int length) {
 		byte[] arr = new byte[length];
 		localBuffer.readBytes(arr, 0, length);
 		return arr;
 	}
 
 	@Override
-	public ItemStack readItemStack() throws IOException {
+	public ItemStack readItemStack() {
 		final int itemId = readInt();
 		if (itemId == 0) {
 			return null;
@@ -602,7 +612,7 @@ public ItemStack readItemStack() throws IOException {
 	}
 
 	@Override
-	public ItemIdentifier readItemIdentifier() throws IOException {
+	public ItemIdentifier readItemIdentifier() {
 		final int itemId = readInt();
 		if (itemId == 0) {
 			return null;
@@ -614,7 +624,7 @@ public ItemIdentifier readItemIdentifier() throws IOException {
 	}
 
 	@Override
-	public ItemIdentifierStack readItemIdentifierStack() throws IOException {
+	public ItemIdentifierStack readItemIdentifierStack() {
 		int stacksize = readInt();
 		if (stacksize == -1) {
 			return null;
@@ -625,7 +635,7 @@ public ItemIdentifierStack readItemIdentifierStack() throws IOException {
 	}
 
 	@Override
-	public <T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOException {
+	public <T> ArrayList<T> readArrayList(IReadListObject<T> reader) {
 		int size = readInt();
 		if (size == -1) {
 			return null;
@@ -639,7 +649,7 @@ public <T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOExcept
 	}
 
 	@Override
-	public <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOException {
+	public <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) {
 		int size = readInt();
 		if (size == -1) {
 			return null;
@@ -653,7 +663,7 @@ public <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOExce
 	}
 
 	@Override
-	public <T> Set<T> readSet(IReadListObject<T> handler) throws IOException {
+	public <T> Set<T> readSet(IReadListObject<T> handler) {
 		int size = readInt();
 		if (size == -1) {
 			return null;
@@ -667,7 +677,7 @@ public <T> Set<T> readSet(IReadListObject<T> handler) throws IOException {
 	}
 
 	@Override
-	public IOrderInfoProvider readOrderInfo() throws IOException {
+	public IOrderInfoProvider readOrderInfo() {
 		ItemIdentifierStack stack = readItemIdentifierStack();
 		int routerId = localBuffer.readInt();
 		boolean isFinished = localBuffer.readBoolean();
@@ -686,18 +696,18 @@ public <T extends Enum<T>> T readEnum(Class<T> clazz) {
 	}
 
 	@Override
-	public LinkedLogisticsOrderList readLinkedLogisticsOrderList() throws IOException {
+	public LinkedLogisticsOrderList readLinkedLogisticsOrderList() {
 		LinkedLogisticsOrderList list = new LinkedLogisticsOrderList();
 
 		List<IOrderInfoProvider> orderInfoProviders = readArrayList(LPDataInput::readOrderInfo);
 		if (orderInfoProviders == null) {
-			throw new IOException("Expected order info provider list");
+			throw new NullPointerException("Expected order info provider list");
 		}
 		list.addAll(orderInfoProviders);
 
 		List<LinkedLogisticsOrderList> orderLists = readArrayList(LPDataInput::readLinkedLogisticsOrderList);
 		if (orderLists == null) {
-			throw new IOException("Expected logistics order list");
+			throw new NullPointerException("Expected logistics order list");
 		}
 		list.getSubOrders().addAll(orderLists);
 
@@ -705,7 +715,7 @@ public LinkedLogisticsOrderList readLinkedLogisticsOrderList() throws IOExceptio
 	}
 
 	@Override
-	public ByteBuf readByteBuf() throws IOException {
+	public ByteBuf readByteBuf() {
 		byte[] arr = readByteArray();
 		if (arr == null) {
 			throw new NullPointerException("Buffer may not be null, but read null");
@@ -727,7 +737,7 @@ public long[] readLongArray() {
 	}
 
 	@Override
-	public IResource readResource() throws IOException {
+	public IResource readResource() {
 		return ResourceNetwork.readResource(this);
 	}
 }
diff --git a/common/network/rs485/logisticspipes/util/LPDataInput.java b/common/network/rs485/logisticspipes/util/LPDataInput.java
index c114653d02..b6a8507039 100644
--- a/common/network/rs485/logisticspipes/util/LPDataInput.java
+++ b/common/network/rs485/logisticspipes/util/LPDataInput.java
@@ -20,7 +20,6 @@
 
 package network.rs485.logisticspipes.util;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.EnumSet;
@@ -46,97 +45,97 @@
 
 public interface LPDataInput {
 
-	byte[] readByteArray() throws IOException;
+	byte[] readByteArray();
 
 	/**
 	 * @see java.io.DataInput#readByte()
 	 */
-	byte readByte() throws IOException;
+	byte readByte();
 
 	/**
 	 * @see java.io.DataInput#readShort()
 	 */
-	short readShort() throws IOException;
+	short readShort();
 
 	/**
 	 * @see java.io.DataInput#readInt()
 	 */
-	int readInt() throws IOException;
+	int readInt();
 
 	/**
 	 * @see java.io.DataInput#readLong()
 	 */
-	long readLong() throws IOException;
+	long readLong();
 
 	/**
 	 * @see java.io.DataInput#readFloat()
 	 */
-	float readFloat() throws IOException;
+	float readFloat();
 
 	/**
 	 * @see java.io.DataInput#readDouble()
 	 */
-	double readDouble() throws IOException;
+	double readDouble();
 
 	/**
 	 * @see java.io.DataInput#readBoolean()
 	 */
-	boolean readBoolean() throws IOException;
+	boolean readBoolean();
 
 	/**
 	 * @see java.io.DataInput#readUTF()
 	 */
-	String readUTF() throws IOException;
+	String readUTF();
 
-	ForgeDirection readForgeDirection() throws IOException;
+	ForgeDirection readForgeDirection();
 
-	ExitRoute readExitRoute(World world) throws IOException;
+	ExitRoute readExitRoute(World world);
 
 	/**
 	 * @return ServerRouter or ClientRouter depending where we are
 	 */
-	IRouter readIRouter(World world) throws IOException;
+	IRouter readIRouter(World world);
 
-	DoubleCoordinates readLPPosition() throws IOException;
+	DoubleCoordinates readLPPosition();
 
-	<T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOException;
+	<T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz);
 
-	BitSet readBitSet() throws IOException;
+	BitSet readBitSet();
 
-	NBTTagCompound readNBTTagCompound() throws IOException;
+	NBTTagCompound readNBTTagCompound();
 
-	boolean[] readBooleanArray() throws IOException;
+	boolean[] readBooleanArray();
 
-	int[] readIntArray() throws IOException;
+	int[] readIntArray();
 
-	byte[] readBytes(int length) throws IOException;
+	byte[] readBytes(int length);
 
-	ItemIdentifier readItemIdentifier() throws IOException;
+	ItemIdentifier readItemIdentifier();
 
-	ItemIdentifierStack readItemIdentifierStack() throws IOException;
+	ItemIdentifierStack readItemIdentifierStack();
 
-	ItemStack readItemStack() throws IOException;
+	ItemStack readItemStack();
 
-	<T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOException;
+	<T> ArrayList<T> readArrayList(IReadListObject<T> reader);
 
-	<T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOException;
+	<T> LinkedList<T> readLinkedList(IReadListObject<T> reader);
 
-	<T> Set<T> readSet(IReadListObject<T> handler) throws IOException;
+	<T> Set<T> readSet(IReadListObject<T> handler);
 
-	IOrderInfoProvider readOrderInfo() throws IOException;
+	IOrderInfoProvider readOrderInfo();
 
-	<T extends Enum<T>> T readEnum(Class<T> clazz) throws IOException;
+	<T extends Enum<T>> T readEnum(Class<T> clazz);
 
-	LinkedLogisticsOrderList readLinkedLogisticsOrderList() throws IOException;
+	LinkedLogisticsOrderList readLinkedLogisticsOrderList();
 
-	ByteBuf readByteBuf() throws IOException;
+	ByteBuf readByteBuf();
 
-	long[] readLongArray() throws IOException;
+	long[] readLongArray();
 
-	IResource readResource() throws IOException;
+	IResource readResource();
 
 	interface LPDataInputConsumer {
 
-		void accept(LPDataInput dataInput) throws IOException;
+		void accept(LPDataInput dataInput);
 	}
 }
diff --git a/common/network/rs485/logisticspipes/util/LPDataOutput.java b/common/network/rs485/logisticspipes/util/LPDataOutput.java
index f1ff815362..08ab44543d 100644
--- a/common/network/rs485/logisticspipes/util/LPDataOutput.java
+++ b/common/network/rs485/logisticspipes/util/LPDataOutput.java
@@ -20,7 +20,6 @@
 
 package network.rs485.logisticspipes.util;
 
-import java.io.IOException;
 import java.util.BitSet;
 import java.util.Collection;
 import java.util.EnumSet;
@@ -46,93 +45,93 @@ public interface LPDataOutput {
 	/**
 	 * @see java.io.DataOutput#writeByte(int)
 	 */
-	void writeByte(int b) throws IOException;
+	void writeByte(int b);
 
-	void writeByte(byte b) throws IOException;
+	void writeByte(byte b);
 
 	/**
 	 * @see java.io.DataOutput#writeShort(int)
 	 */
-	void writeShort(int s) throws IOException;
+	void writeShort(int s);
 
-	void writeShort(short s) throws IOException;
+	void writeShort(short s);
 
 	/**
 	 * @see java.io.DataOutput#writeInt(int)
 	 */
-	void writeInt(int i) throws IOException;
+	void writeInt(int i);
 
 	/**
 	 * @see java.io.DataOutput#writeLong(long)
 	 */
-	void writeLong(long l) throws IOException;
+	void writeLong(long l);
 
 	/**
 	 * @see java.io.DataOutput#writeFloat(float)
 	 */
-	void writeFloat(float f) throws IOException;
+	void writeFloat(float f);
 
 	/**
 	 * @see java.io.DataOutput#writeDouble(double)
 	 */
-	void writeDouble(double d) throws IOException;
+	void writeDouble(double d);
 
 	/**
 	 * @see java.io.DataOutput#writeBoolean(boolean)
 	 */
-	void writeBoolean(boolean b) throws IOException;
+	void writeBoolean(boolean b);
 
 	/**
 	 * Uses UTF-8 and not UTF-16.
 	 *
 	 * @see java.io.DataOutput#writeUTF(String)
 	 */
-	void writeUTF(String s) throws IOException;
+	void writeUTF(String s);
 
-	void writeByteArray(byte[] arr) throws IOException;
+	void writeByteArray(byte[] arr);
 
-	void writeByteBuf(ByteBuf buffer) throws IOException;
+	void writeByteBuf(ByteBuf buffer);
 
-	void writeIntArray(int[] arr) throws IOException;
+	void writeIntArray(int[] arr);
 
-	void writeLongArray(long[] arr) throws IOException;
+	void writeLongArray(long[] arr);
 
-	void writeBooleanArray(boolean[] arr) throws IOException;
+	void writeBooleanArray(boolean[] arr);
 
-	void writeForgeDirection(ForgeDirection direction) throws IOException;
+	void writeForgeDirection(ForgeDirection direction);
 
-	void writeExitRoute(ExitRoute route) throws IOException;
+	void writeExitRoute(ExitRoute route);
 
-	void writeIRouter(IRouter router) throws IOException;
+	void writeIRouter(IRouter router);
 
-	void writeLPPosition(DoubleCoordinates pos) throws IOException;
+	void writeLPPosition(DoubleCoordinates pos);
 
-	<T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) throws IOException;
+	<T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz);
 
-	void writeBitSet(BitSet bits) throws IOException;
+	void writeBitSet(BitSet bits);
 
-	void writeNBTTagCompound(NBTTagCompound tag) throws IOException;
+	void writeNBTTagCompound(NBTTagCompound tag);
 
-	void writeItemStack(ItemStack itemstack) throws IOException;
+	void writeItemStack(ItemStack itemstack);
 
-	void writeItemIdentifier(ItemIdentifier item) throws IOException;
+	void writeItemIdentifier(ItemIdentifier item);
 
-	void writeItemIdentifierStack(ItemIdentifierStack stack) throws IOException;
+	void writeItemIdentifierStack(ItemIdentifierStack stack);
 
-	<T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) throws IOException;
+	<T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler);
 
-	void writeOrderInfo(IOrderInfoProvider order) throws IOException;
+	void writeOrderInfo(IOrderInfoProvider order);
 
-	<T extends Enum<T>> void writeEnum(T obj) throws IOException;
+	<T extends Enum<T>> void writeEnum(T obj);
 
-	void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) throws IOException;
+	void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList);
 
-	void writeResource(IResource res) throws IOException;
+	void writeResource(IResource res);
 
-	void writeBytes(byte[] arr) throws IOException;
+	void writeBytes(byte[] arr);
 
 	interface LPDataOutputConsumer {
 
-		void accept(LPDataOutput dataOutput) throws IOException;
+		void accept(LPDataOutput dataOutput);
 	}
 }
diff --git a/test/network/rs485/logisticspipes/util/LPDataIOWrapperTest.java b/test/network/rs485/logisticspipes/util/LPDataIOWrapperTest.java
index 5ad246493f..c4d208c679 100644
--- a/test/network/rs485/logisticspipes/util/LPDataIOWrapperTest.java
+++ b/test/network/rs485/logisticspipes/util/LPDataIOWrapperTest.java
@@ -618,7 +618,8 @@ public void testArrayList() throws Exception {
 		arrayList.add("drölf");
 		arrayList.add("text");
 
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(arrayList, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(arrayList,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(arrayList, input.readArrayList(LPDataInput::readUTF));
@@ -629,7 +630,8 @@ public void testArrayList() throws Exception {
 
 	@Test
 	public void testNullArrayList() throws Exception {
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(null, input.readArrayList(LPDataInput::readUTF));
@@ -644,7 +646,8 @@ public void testLinkedList() throws Exception {
 		linkedList.add("drölf");
 		linkedList.add("text");
 
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(linkedList, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(linkedList,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(linkedList, input.readLinkedList(LPDataInput::readUTF));
@@ -655,7 +658,8 @@ public void testLinkedList() throws Exception {
 
 	@Test
 	public void testNullLinkedList() throws Exception {
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(null, input.readLinkedList(LPDataInput::readUTF));
@@ -670,7 +674,8 @@ public void testSet() throws Exception {
 		set.add("drölf");
 		set.add("text");
 
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(set, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(set,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(set, input.readSet(LPDataInput::readUTF));
@@ -681,7 +686,8 @@ public void testSet() throws Exception {
 
 	@Test
 	public void testNullSet() throws Exception {
-		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));
+		byte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,
+				(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));
 
 		LPDataIOWrapper.provideData(data, input -> {
 			assertEquals(null, input.readSet(LPDataInput::readUTF));
