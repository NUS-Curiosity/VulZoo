diff --git a/subprojects/build-cache-packaging/build.gradle.kts b/subprojects/build-cache-packaging/build.gradle.kts
index 61591b457600..ca589b530ce0 100644
--- a/subprojects/build-cache-packaging/build.gradle.kts
+++ b/subprojects/build-cache-packaging/build.gradle.kts
@@ -12,7 +12,9 @@ dependencies {
     api(project(":files"))
 
     implementation(project(":base-annotations"))
-
+    implementation(project(":wrapper-shared")) {
+        because("We need to access the ZipSlip helper class")
+    }
     implementation(libs.guava)
     implementation(libs.commonsCompress)
     implementation(libs.commonsIo)
diff --git a/subprojects/build-cache-packaging/src/main/java/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPacker.java b/subprojects/build-cache-packaging/src/main/java/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPacker.java
index 92610f63d167..e48d4a1ef9bb 100644
--- a/subprojects/build-cache-packaging/src/main/java/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPacker.java
+++ b/subprojects/build-cache-packaging/src/main/java/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPacker.java
@@ -49,6 +49,7 @@
 import org.gradle.internal.snapshot.RelativePathTracker;
 import org.gradle.internal.snapshot.RelativePathTrackingFileSystemSnapshotHierarchyVisitor;
 import org.gradle.internal.snapshot.SnapshotVisitResult;
+import org.gradle.util.internal.ZipSlip;
 
 import javax.annotation.Nullable;
 import java.io.BufferedOutputStream;
@@ -185,7 +186,7 @@ private UnpackResult unpack(CacheableEntity entity, TarArchiveInputStream tarInp
         AtomicLong entries = new AtomicLong();
         while (tarEntry != null) {
             entries.incrementAndGet();
-            String path = tarEntry.getName();
+            String path = safeEntryName(tarEntry);
 
             if (path.equals(METADATA_PATH)) {
                 // handle origin metadata
@@ -277,7 +278,7 @@ private RegularFileSnapshot unpackFile(TarArchiveInputStream input, TarArchiveEn
 
     @Nullable
     private TarArchiveEntry unpackDirectoryTree(TarArchiveInputStream input, TarArchiveEntry rootEntry, Map<String, FileSystemLocationSnapshot> snapshots, AtomicLong entries, File treeRoot, String treeName) throws IOException {
-        RelativePathParser parser = new RelativePathParser(rootEntry.getName());
+        RelativePathParser parser = new RelativePathParser(safeEntryName(rootEntry));
 
         DirectorySnapshotBuilder builder = MerkleDirectorySnapshotBuilder.noSortingRequired();
         builder.enterDirectory(DIRECT, stringInterner.intern(treeRoot.getAbsolutePath()), stringInterner.intern(treeRoot.getName()), INCLUDE_EMPTY_DIRS);
@@ -286,7 +287,7 @@ private TarArchiveEntry unpackDirectoryTree(TarArchiveInputStream input, TarArch
 
         while ((entry = input.getNextTarEntry()) != null) {
             boolean isDir = entry.isDirectory();
-            boolean outsideOfRoot = parser.nextPath(entry.getName(), isDir, builder::leaveDirectory);
+            boolean outsideOfRoot = parser.nextPath(safeEntryName(entry), isDir, builder::leaveDirectory);
             if (outsideOfRoot) {
                 break;
             }
@@ -312,6 +313,15 @@ private TarArchiveEntry unpackDirectoryTree(TarArchiveInputStream input, TarArch
         return entry;
     }
 
+    /**
+     * Returns a safe name for the name of a tar archive entry.
+     *
+     * @see ZipSlip#safeZipEntryName(String)
+     */
+    private static String safeEntryName(TarArchiveEntry tarEntry) {
+        return ZipSlip.safeZipEntryName(tarEntry.getName());
+    }
+
     private void chmodUnpackedFile(TarArchiveEntry entry, File file) {
         filePermissionAccess.chmod(file, entry.getMode() & UnixPermissions.PERM_MASK);
     }
diff --git a/subprojects/build-cache-packaging/src/test/groovy/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPackerTest.groovy b/subprojects/build-cache-packaging/src/test/groovy/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPackerTest.groovy
index 57a8d0d9f422..b727b08bb04c 100644
--- a/subprojects/build-cache-packaging/src/test/groovy/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPackerTest.groovy
+++ b/subprojects/build-cache-packaging/src/test/groovy/org/gradle/caching/internal/packaging/impl/TarBuildCacheEntryPackerTest.groovy
@@ -16,6 +16,8 @@
 
 package org.gradle.caching.internal.packaging.impl
 
+import org.apache.commons.compress.archivers.tar.TarArchiveEntry
+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
 import org.gradle.api.internal.file.TestFiles
 import org.gradle.internal.file.Deleter
 import org.gradle.internal.nativeintegration.filesystem.FileSystem
@@ -237,4 +239,38 @@ class TarBuildCacheEntryPackerTest extends AbstractTarBuildCacheEntryPackerSpec
         then:
         targetDir.assertIsEmptyDir()
     }
+
+    def "catch escaping path in tar archive entry during unpacking"() {
+        given:
+        def targetDir = temporaryFolder.file("target")
+        def output = new ByteArrayOutputStream()
+
+        new TarArchiveOutputStream(output).withCloseable { tar ->
+            def metadataBytes = "".bytes
+            def metadataEntry = new TarArchiveEntry("METADATA")
+            metadataEntry.size = metadataBytes.length
+            tar.putArchiveEntry(metadataEntry)
+            tar.write(metadataBytes)
+            tar.closeArchiveEntry()
+
+            tar.putArchiveEntry(new TarArchiveEntry("tree-destinationDir/"))
+            tar.closeArchiveEntry()
+
+            def evilBytes = "evil".bytes
+            def evilEntry = new TarArchiveEntry("tree-destinationDir/../evil.txt")
+            evilEntry.size = evilBytes.length
+            tar.putArchiveEntry(evilEntry)
+            tar.write(evilBytes)
+            tar.closeArchiveEntry()
+        }
+
+        when:
+        def input = new ByteArrayInputStream(output.toByteArray())
+        unpack input, prop("destinationDir", DIRECTORY, targetDir)
+
+        then:
+        def iae = thrown(IllegalArgumentException)
+        iae.message == "'tree-destinationDir/../evil.txt' is not a safe zip entry name."
+        !temporaryFolder.file("evil.txt").exists()
+    }
 }
diff --git a/subprojects/wrapper-shared/build.gradle.kts b/subprojects/wrapper-shared/build.gradle.kts
index 71bfb69e27fe..007ebeb9c441 100644
--- a/subprojects/wrapper-shared/build.gradle.kts
+++ b/subprojects/wrapper-shared/build.gradle.kts
@@ -1,5 +1,7 @@
 plugins {
     id("gradlebuild.distribution.api-java")
+    // TODO: Need to publish the ZipSlip helper class
+    id("gradlebuild.publish-public-libraries")
 }
 
 description = "Utility code shared between the wrapper and the Gradle distribution"
