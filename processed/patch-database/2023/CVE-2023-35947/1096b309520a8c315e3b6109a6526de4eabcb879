diff --git a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/AbstractArchiveFileTreeElement.java b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/AbstractArchiveFileTreeElement.java
index 1691f562ac25..192a1383383a 100644
--- a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/AbstractArchiveFileTreeElement.java
+++ b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/AbstractArchiveFileTreeElement.java
@@ -22,6 +22,7 @@
 import org.gradle.api.internal.file.AbstractFileTreeElement;
 import org.gradle.internal.file.Chmod;
 import org.gradle.util.internal.GFileUtils;
+import org.gradle.util.internal.ZipSlip;
 
 import java.io.File;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -60,9 +61,19 @@ protected AbstractArchiveFileTreeElement(Chmod chmod, File expandedDir, AtomicBo
 
     /**
      * Returns a safe name for the name of a file contained in the archive.
-     * @see org.gradle.util.internal.ZipSlip#safeZipEntryName(String)
+     *
+     * @see ZipSlip#safeZipEntryName(String)
+     */
+    protected String safeEntryName() {
+        return ZipSlip.safeZipEntryName(getEntryName());
+    }
+
+    /**
+     * Returns unsafe name for the name of a file contained in the archive.
+     *
+     * @see AbstractArchiveFileTreeElement#safeEntryName
      */
-    protected abstract String safeEntryName();
+    protected abstract String getEntryName();
 
     @Override
     public File getFile() {
diff --git a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/TarFileTree.java b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/TarFileTree.java
index add1d1cb5c09..27c401122ce4 100644
--- a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/TarFileTree.java
+++ b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/TarFileTree.java
@@ -216,7 +216,7 @@ public int getMode() {
         }
 
         @Override
-        protected String safeEntryName() {
+        protected String getEntryName() {
             return entry.getName();
         }
 
diff --git a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java
index 8b1c6f559089..dace0b47a64e 100644
--- a/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java
+++ b/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java
@@ -39,7 +39,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static java.lang.String.format;
-import static org.gradle.util.internal.ZipSlip.safeZipEntryName;
 
 public class ZipFileTree extends AbstractArchiveFileTree {
     private final Provider<File> fileProvider;
@@ -147,8 +146,8 @@ public String getDisplayName() {
         }
 
         @Override
-        protected String safeEntryName() {
-            return safeZipEntryName(entry.getName());
+        protected String getEntryName() {
+            return entry.getName();
         }
 
         @Override
diff --git a/subprojects/wrapper-shared/src/integTest/groovy/org/gradle/integtests/TarSlipIntegrationTest.groovy b/subprojects/wrapper-shared/src/integTest/groovy/org/gradle/integtests/TarSlipIntegrationTest.groovy
new file mode 100644
index 000000000000..6a17d925b8ba
--- /dev/null
+++ b/subprojects/wrapper-shared/src/integTest/groovy/org/gradle/integtests/TarSlipIntegrationTest.groovy
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.integtests
+
+import org.apache.commons.compress.archivers.tar.TarFile
+import org.apache.tools.tar.TarEntry
+import org.apache.tools.tar.TarOutputStream
+import org.gradle.integtests.fixtures.AbstractIntegrationSpec
+import org.gradle.test.fixtures.file.TestFile
+
+class TarSlipIntegrationTest extends AbstractIntegrationSpec {
+
+    private TestFile getEvilTar() {
+        file("evil.tar.bz")
+    }
+
+    def setup() {
+        evilTar.withOutputStream {
+            new TarOutputStream(it).withCloseable { TarOutputStream tos ->
+                TarEntry entry = new TarEntry('../../tmp/evil.sh')
+                byte[] bytes = 'evil'.getBytes('utf-8')
+                entry.size = bytes.length
+                tos.putNextEntry(entry)
+                tos.write(bytes)
+                tos.closeEntry()
+            }
+        }
+    }
+
+    def "evil tar has path traversal"() {
+        given:
+        def entryNames = new TarFile(evilTar).withCloseable {
+            it.entries.collect { it.name }
+        }
+
+        expect:
+        entryNames == ['../../tmp/evil.sh']
+    }
+
+    def "Copy task refuses to unpack evil tar"() {
+        executer.withStacktraceEnabled()
+
+        given:
+        buildFile << '''
+            task copyEvilTar(type: Copy) {
+                from(tarTree('evil.tar.bz'))
+                into('.')
+            }
+        '''
+
+        when:
+        fails 'copyEvilTar'
+
+        then:
+        failureDescriptionContains "Execution failed for task ':copyEvilTar'"
+        failure.assertHasErrorOutput "'../../tmp/evil.sh' is not a safe zip entry name"
+    }
+}
