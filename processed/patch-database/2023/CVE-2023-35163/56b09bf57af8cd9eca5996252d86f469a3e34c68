diff --git a/core/banking/asset_action.go b/core/banking/asset_action.go
index 3eaf85b830..074ac6be92 100644
--- a/core/banking/asset_action.go
+++ b/core/banking/asset_action.go
@@ -154,29 +154,29 @@ func (t *assetAction) checkBuiltinAssetDeposit() error {
 
 func (t *assetAction) checkERC20BridgeStopped() error {
 	return t.bridgeView.FindBridgeStopped(
-		t.erc20BridgeStopped, t.blockHeight, t.logIndex)
+		t.erc20BridgeStopped, t.blockHeight, t.logIndex, t.txHash)
 }
 
 func (t *assetAction) checkERC20BridgeResumed() error {
 	return t.bridgeView.FindBridgeResumed(
-		t.erc20BridgeResumed, t.blockHeight, t.logIndex)
+		t.erc20BridgeResumed, t.blockHeight, t.logIndex, t.txHash)
 }
 
 func (t *assetAction) checkERC20Deposit() error {
 	asset, _ := t.asset.ERC20()
 	return t.bridgeView.FindDeposit(
-		t.erc20D, t.blockHeight, t.logIndex, asset.Address(),
+		t.erc20D, t.blockHeight, t.logIndex, asset.Address(), t.txHash,
 	)
 }
 
 func (t *assetAction) checkERC20AssetList() error {
-	return t.bridgeView.FindAssetList(t.erc20AL, t.blockHeight, t.logIndex)
+	return t.bridgeView.FindAssetList(t.erc20AL, t.blockHeight, t.logIndex, t.txHash)
 }
 
 func (t *assetAction) checkERC20AssetLimitsUpdated() error {
 	asset, _ := t.asset.ERC20()
 	return t.bridgeView.FindAssetLimitsUpdated(
-		t.erc20AssetLimitsUpdated, t.blockHeight, t.logIndex, asset.Address(),
+		t.erc20AssetLimitsUpdated, t.blockHeight, t.logIndex, asset.Address(), t.txHash,
 	)
 }
 
diff --git a/core/banking/erc20.go b/core/banking/erc20.go
index 7dc1353261..e793a585bf 100644
--- a/core/banking/erc20.go
+++ b/core/banking/erc20.go
@@ -34,11 +34,11 @@ var (
 )
 
 type ERC20BridgeView interface {
-	FindAssetList(al *types.ERC20AssetList, blockNumber, logIndex uint64) error
-	FindBridgeStopped(al *types.ERC20EventBridgeStopped, blockNumber, logIndex uint64) error
-	FindBridgeResumed(al *types.ERC20EventBridgeResumed, blockNumber, logIndex uint64) error
-	FindDeposit(d *types.ERC20Deposit, blockNumber, logIndex uint64, ethAssetAddress string) error
-	FindAssetLimitsUpdated(update *types.ERC20AssetLimitsUpdated, blockNumber uint64, logIndex uint64, ethAssetAddress string) error
+	FindAssetList(al *types.ERC20AssetList, blockNumber, logIndex uint64, txHash string) error
+	FindBridgeStopped(al *types.ERC20EventBridgeStopped, blockNumber, logIndex uint64, txHash string) error
+	FindBridgeResumed(al *types.ERC20EventBridgeResumed, blockNumber, logIndex uint64, txHash string) error
+	FindDeposit(d *types.ERC20Deposit, blockNumber, logIndex uint64, ethAssetAddress string, txHash string) error
+	FindAssetLimitsUpdated(update *types.ERC20AssetLimitsUpdated, blockNumber uint64, logIndex uint64, ethAssetAddress string, txHash string) error
 }
 
 func (e *Engine) EnableERC20(
diff --git a/core/banking/mocks/mocks.go b/core/banking/mocks/mocks.go
index dfb48105a1..414314d97e 100644
--- a/core/banking/mocks/mocks.go
+++ b/core/banking/mocks/mocks.go
@@ -504,73 +504,73 @@ func (m *MockERC20BridgeView) EXPECT() *MockERC20BridgeViewMockRecorder {
 }
 
 // FindAssetLimitsUpdated mocks base method.
-func (m *MockERC20BridgeView) FindAssetLimitsUpdated(arg0 *types.ERC20AssetLimitsUpdated, arg1, arg2 uint64, arg3 string) error {
+func (m *MockERC20BridgeView) FindAssetLimitsUpdated(arg0 *types.ERC20AssetLimitsUpdated, arg1, arg2 uint64, arg3, arg4 string) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "FindAssetLimitsUpdated", arg0, arg1, arg2, arg3)
+	ret := m.ctrl.Call(m, "FindAssetLimitsUpdated", arg0, arg1, arg2, arg3, arg4)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // FindAssetLimitsUpdated indicates an expected call of FindAssetLimitsUpdated.
-func (mr *MockERC20BridgeViewMockRecorder) FindAssetLimitsUpdated(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
+func (mr *MockERC20BridgeViewMockRecorder) FindAssetLimitsUpdated(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssetLimitsUpdated", reflect.TypeOf((*MockERC20BridgeView)(nil).FindAssetLimitsUpdated), arg0, arg1, arg2, arg3)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssetLimitsUpdated", reflect.TypeOf((*MockERC20BridgeView)(nil).FindAssetLimitsUpdated), arg0, arg1, arg2, arg3, arg4)
 }
 
 // FindAssetList mocks base method.
-func (m *MockERC20BridgeView) FindAssetList(arg0 *types.ERC20AssetList, arg1, arg2 uint64) error {
+func (m *MockERC20BridgeView) FindAssetList(arg0 *types.ERC20AssetList, arg1, arg2 uint64, arg3 string) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "FindAssetList", arg0, arg1, arg2)
+	ret := m.ctrl.Call(m, "FindAssetList", arg0, arg1, arg2, arg3)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // FindAssetList indicates an expected call of FindAssetList.
-func (mr *MockERC20BridgeViewMockRecorder) FindAssetList(arg0, arg1, arg2 interface{}) *gomock.Call {
+func (mr *MockERC20BridgeViewMockRecorder) FindAssetList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssetList", reflect.TypeOf((*MockERC20BridgeView)(nil).FindAssetList), arg0, arg1, arg2)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssetList", reflect.TypeOf((*MockERC20BridgeView)(nil).FindAssetList), arg0, arg1, arg2, arg3)
 }
 
 // FindBridgeResumed mocks base method.
-func (m *MockERC20BridgeView) FindBridgeResumed(arg0 *types.ERC20EventBridgeResumed, arg1, arg2 uint64) error {
+func (m *MockERC20BridgeView) FindBridgeResumed(arg0 *types.ERC20EventBridgeResumed, arg1, arg2 uint64, arg3 string) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "FindBridgeResumed", arg0, arg1, arg2)
+	ret := m.ctrl.Call(m, "FindBridgeResumed", arg0, arg1, arg2, arg3)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // FindBridgeResumed indicates an expected call of FindBridgeResumed.
-func (mr *MockERC20BridgeViewMockRecorder) FindBridgeResumed(arg0, arg1, arg2 interface{}) *gomock.Call {
+func (mr *MockERC20BridgeViewMockRecorder) FindBridgeResumed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBridgeResumed", reflect.TypeOf((*MockERC20BridgeView)(nil).FindBridgeResumed), arg0, arg1, arg2)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBridgeResumed", reflect.TypeOf((*MockERC20BridgeView)(nil).FindBridgeResumed), arg0, arg1, arg2, arg3)
 }
 
 // FindBridgeStopped mocks base method.
-func (m *MockERC20BridgeView) FindBridgeStopped(arg0 *types.ERC20EventBridgeStopped, arg1, arg2 uint64) error {
+func (m *MockERC20BridgeView) FindBridgeStopped(arg0 *types.ERC20EventBridgeStopped, arg1, arg2 uint64, arg3 string) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "FindBridgeStopped", arg0, arg1, arg2)
+	ret := m.ctrl.Call(m, "FindBridgeStopped", arg0, arg1, arg2, arg3)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // FindBridgeStopped indicates an expected call of FindBridgeStopped.
-func (mr *MockERC20BridgeViewMockRecorder) FindBridgeStopped(arg0, arg1, arg2 interface{}) *gomock.Call {
+func (mr *MockERC20BridgeViewMockRecorder) FindBridgeStopped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBridgeStopped", reflect.TypeOf((*MockERC20BridgeView)(nil).FindBridgeStopped), arg0, arg1, arg2)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBridgeStopped", reflect.TypeOf((*MockERC20BridgeView)(nil).FindBridgeStopped), arg0, arg1, arg2, arg3)
 }
 
 // FindDeposit mocks base method.
-func (m *MockERC20BridgeView) FindDeposit(arg0 *types.ERC20Deposit, arg1, arg2 uint64, arg3 string) error {
+func (m *MockERC20BridgeView) FindDeposit(arg0 *types.ERC20Deposit, arg1, arg2 uint64, arg3, arg4 string) error {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "FindDeposit", arg0, arg1, arg2, arg3)
+	ret := m.ctrl.Call(m, "FindDeposit", arg0, arg1, arg2, arg3, arg4)
 	ret0, _ := ret[0].(error)
 	return ret0
 }
 
 // FindDeposit indicates an expected call of FindDeposit.
-func (mr *MockERC20BridgeViewMockRecorder) FindDeposit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
+func (mr *MockERC20BridgeViewMockRecorder) FindDeposit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeposit", reflect.TypeOf((*MockERC20BridgeView)(nil).FindDeposit), arg0, arg1, arg2, arg3)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeposit", reflect.TypeOf((*MockERC20BridgeView)(nil).FindDeposit), arg0, arg1, arg2, arg3, arg4)
 }
 
 // MockEthereumEventSource is a mock of EthereumEventSource interface.
diff --git a/core/bridges/erc20_logic_view.go b/core/bridges/erc20_logic_view.go
index 0242fa3596..942ab7ed2d 100644
--- a/core/bridges/erc20_logic_view.go
+++ b/core/bridges/erc20_logic_view.go
@@ -111,6 +111,7 @@ func (e *ERC20LogicView) FindAssetList(
 	al *types.ERC20AssetList,
 	blockNumber,
 	logIndex uint64,
+	txHash string,
 ) error {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -145,7 +146,8 @@ func (e *ERC20LogicView) FindAssetList(
 	for iter.Next() {
 		if hex.EncodeToString(iter.Event.VegaAssetId[:]) == assetID &&
 			iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 
 			break
@@ -170,6 +172,7 @@ func (e *ERC20LogicView) FindBridgeStopped(
 	al *types.ERC20EventBridgeStopped,
 	blockNumber,
 	logIndex uint64,
+	txHash string,
 ) error {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -200,7 +203,8 @@ func (e *ERC20LogicView) FindBridgeStopped(
 
 	for iter.Next() {
 		if iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 
 			break
@@ -225,6 +229,7 @@ func (e *ERC20LogicView) FindBridgeResumed(
 	al *types.ERC20EventBridgeResumed,
 	blockNumber,
 	logIndex uint64,
+	txHash string,
 ) error {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -255,7 +260,8 @@ func (e *ERC20LogicView) FindBridgeResumed(
 
 	for iter.Next() {
 		if iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 
 			break
@@ -278,6 +284,7 @@ func (e *ERC20LogicView) FindDeposit(
 	d *types.ERC20Deposit,
 	blockNumber, logIndex uint64,
 	ethAssetAddress string,
+	txHash string,
 ) error {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -315,7 +322,8 @@ func (e *ERC20LogicView) FindDeposit(
 		if hex.EncodeToString(iter.Event.VegaPublicKey[:]) == targetPartyID &&
 			iter.Event.Amount.Cmp(depamount) == 0 &&
 			iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 			break
 		}
@@ -337,6 +345,7 @@ func (e *ERC20LogicView) FindWithdrawal(
 	w *types.ERC20Withdrawal,
 	blockNumber, logIndex uint64,
 	ethAssetAddress string,
+	txHash string,
 ) (*big.Int, string, uint, error) {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -376,7 +385,8 @@ func (e *ERC20LogicView) FindWithdrawal(
 	for iter.Next() {
 		if nonce.Cmp(iter.Event.Nonce) == 0 &&
 			iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 
 			break
@@ -399,6 +409,7 @@ func (e *ERC20LogicView) FindAssetLimitsUpdated(
 	update *types.ERC20AssetLimitsUpdated,
 	blockNumber uint64, logIndex uint64,
 	ethAssetAddress string,
+	txHash string,
 ) error {
 	bf, err := bridgecontract.NewErc20BridgeLogicRestrictedFilterer(
 		e.clt.CollateralBridgeAddress(), e.clt)
@@ -434,7 +445,8 @@ func (e *ERC20LogicView) FindAssetLimitsUpdated(
 		if update.LifetimeLimits.EQ(eventLifetimeLimit) &&
 			update.WithdrawThreshold.EQ(eventWithdrawThreshold) &&
 			iter.Event.Raw.BlockNumber == blockNumber &&
-			uint64(iter.Event.Raw.Index) == logIndex {
+			uint64(iter.Event.Raw.Index) == logIndex &&
+			iter.Event.Raw.TxHash.Hex() == txHash {
 			event = iter.Event
 			break
 		}
diff --git a/core/integration/stubs/bridge_view_stub.go b/core/integration/stubs/bridge_view_stub.go
index 4f762385ce..3958f57554 100644
--- a/core/integration/stubs/bridge_view_stub.go
+++ b/core/integration/stubs/bridge_view_stub.go
@@ -22,22 +22,22 @@ func NewBridgeViewStub() *BridgeViewStub {
 	return &BridgeViewStub{}
 }
 
-func (*BridgeViewStub) FindAssetList(al *types.ERC20AssetList, blockNumber, logIndex uint64) error {
+func (*BridgeViewStub) FindAssetList(al *types.ERC20AssetList, blockNumber, logIndex uint64, txHash string) error {
 	return nil
 }
 
-func (*BridgeViewStub) FindBridgeStopped(al *types.ERC20EventBridgeStopped, blockNumber, logIndex uint64) error {
+func (*BridgeViewStub) FindBridgeStopped(al *types.ERC20EventBridgeStopped, blockNumber, logIndex uint64, txHash string) error {
 	return nil
 }
 
-func (*BridgeViewStub) FindBridgeResumed(al *types.ERC20EventBridgeResumed, blockNumber, logIndex uint64) error {
+func (*BridgeViewStub) FindBridgeResumed(al *types.ERC20EventBridgeResumed, blockNumber, logIndex uint64, txHash string) error {
 	return nil
 }
 
-func (*BridgeViewStub) FindDeposit(d *types.ERC20Deposit, blockNumber, logIndex uint64, ethAssetAddress string) error {
+func (*BridgeViewStub) FindDeposit(d *types.ERC20Deposit, blockNumber, logIndex uint64, ethAssetAddress string, txHash string) error {
 	return nil
 }
 
-func (*BridgeViewStub) FindAssetLimitsUpdated(w *types.ERC20AssetLimitsUpdated, blockNumber, logIndex uint64, ethAssetAddress string) error {
+func (*BridgeViewStub) FindAssetLimitsUpdated(w *types.ERC20AssetLimitsUpdated, blockNumber, logIndex uint64, ethAssetAddress string, txHash string) error {
 	return nil
 }
diff --git a/core/staking/on_chain_verifier.go b/core/staking/on_chain_verifier.go
index 99788c2ab5..949017d01d 100644
--- a/core/staking/on_chain_verifier.go
+++ b/core/staking/on_chain_verifier.go
@@ -138,7 +138,8 @@ func (o *OnChainVerifier) CheckStakeDeposited(
 			if hex.EncodeToString(iter.Event.VegaPublicKey[:]) == vegaPubKey &&
 				iter.Event.Amount.Cmp(amountDeposited) == 0 &&
 				iter.Event.Raw.BlockNumber == event.BlockNumber &&
-				uint64(iter.Event.Raw.Index) == event.LogIndex {
+				uint64(iter.Event.Raw.Index) == event.LogIndex &&
+				iter.Event.Raw.TxHash.Hex() == event.TxID {
 				// now we know the event is OK,
 				// just need to check for confirmations
 				return o.ethConfirmations.Check(event.BlockNumber)
@@ -216,7 +217,8 @@ func (o *OnChainVerifier) CheckStakeRemoved(event *types.StakeRemoved) error {
 			if hex.EncodeToString(iter.Event.VegaPublicKey[:]) == vegaPubKey &&
 				iter.Event.Amount.Cmp(amountDeposited) == 0 &&
 				iter.Event.Raw.BlockNumber == event.BlockNumber &&
-				uint64(iter.Event.Raw.Index) == event.LogIndex {
+				uint64(iter.Event.Raw.Index) == event.LogIndex &&
+				iter.Event.Raw.TxHash.Hex() == event.TxID {
 				// now we know the event is OK,
 				// just need to check for confirmations
 				return o.ethConfirmations.Check(event.BlockNumber)
diff --git a/core/validators/erc20multisig/on_chain_verifier.go b/core/validators/erc20multisig/on_chain_verifier.go
index 228d1fc057..a0c77a09b3 100644
--- a/core/validators/erc20multisig/on_chain_verifier.go
+++ b/core/validators/erc20multisig/on_chain_verifier.go
@@ -165,7 +165,8 @@ func (o *OnChainVerifier) CheckThresholdSetEvent(
 		if iter.Event.Raw.BlockNumber == event.BlockNumber &&
 			uint64(iter.Event.Raw.Index) == event.LogIndex &&
 			iter.Event.NewThreshold == uint16(event.Threshold) &&
-			nonce.Cmp(iter.Event.Nonce) == 0 {
+			nonce.Cmp(iter.Event.Nonce) == 0 &&
+			iter.Event.Raw.TxHash.Hex() == event.TxHash {
 			// now we know the event is OK,
 			// just need to check for confirmations
 			return o.ethConfirmations.Check(event.BlockNumber)
@@ -205,7 +206,8 @@ func (o *OnChainVerifier) filterSignerAdded(
 		if iter.Event.Raw.BlockNumber == event.BlockNumber &&
 			uint64(iter.Event.Raw.Index) == event.LogIndex &&
 			iter.Event.NewSigner.Hex() == event.Address &&
-			nonce.Cmp(iter.Event.Nonce) == 0 {
+			nonce.Cmp(iter.Event.Nonce) == 0 &&
+			iter.Event.Raw.TxHash.Hex() == event.TxHash {
 			// now we know the event is OK,
 			// just need to check for confirmations
 			return o.ethConfirmations.Check(event.BlockNumber)
@@ -245,7 +247,8 @@ func (o *OnChainVerifier) filterSignerRemoved(
 		if iter.Event.Raw.BlockNumber == event.BlockNumber &&
 			uint64(iter.Event.Raw.Index) == event.LogIndex &&
 			iter.Event.OldSigner.Hex() == event.Address &&
-			nonce.Cmp(iter.Event.Nonce) == 0 {
+			nonce.Cmp(iter.Event.Nonce) == 0 &&
+			iter.Event.Raw.TxHash.Hex() == event.TxHash {
 			// now we know the event is OK,
 			// just need to check for confirmations
 			return o.ethConfirmations.Check(event.BlockNumber)
