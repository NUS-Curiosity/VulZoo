diff --git a/plugins/tracker/include/Tracker/Artifact/Artifact.php b/plugins/tracker/include/Tracker/Artifact/Artifact.php
index 111d51e306b..4e4d5c46bd1 100644
--- a/plugins/tracker/include/Tracker/Artifact/Artifact.php
+++ b/plugins/tracker/include/Tracker/Artifact/Artifact.php
@@ -456,6 +456,7 @@ public function fetchTooltip(PFUser $user): Tuleap\Option\Option
     {
         $progress_dao    = new SemanticProgressDao();
         $tooltip_fetcher = new Tuleap\Tracker\Semantic\Tooltip\TooltipFetcher(
+            TemplateRendererFactory::build(),
             new Tuleap\Tracker\Semantic\Tooltip\OtherSemantic\ProgressTooltipEntry(
                 new SemanticProgressBuilder(
                     $progress_dao,
diff --git a/plugins/tracker/include/Tracker/Semantic/Tooltip/TooltipFetcher.php b/plugins/tracker/include/Tracker/Semantic/Tooltip/TooltipFetcher.php
index 81c65e54f12..bf3885f5035 100644
--- a/plugins/tracker/include/Tracker/Semantic/Tooltip/TooltipFetcher.php
+++ b/plugins/tracker/include/Tracker/Semantic/Tooltip/TooltipFetcher.php
@@ -33,8 +33,10 @@ final class TooltipFetcher
      */
     private readonly array $other_semantic_tooltip_entry_fetchers;
 
-    public function __construct(OtherSemanticTooltipEntryFetcher ...$other_semantic_tooltip_entry_fetchers)
-    {
+    public function __construct(
+        private readonly \TemplateRendererFactory $renderer_factory,
+        OtherSemanticTooltipEntryFetcher ...$other_semantic_tooltip_entry_fetchers,
+    ) {
         $this->other_semantic_tooltip_entry_fetchers = $other_semantic_tooltip_entry_fetchers;
     }
 
@@ -58,8 +60,12 @@ public function fetchArtifactTooltip(Artifact $artifact, TooltipFields $tooltip,
         $html .= '</table>';
 
         return Option::fromValue(
-            TooltipJSON::fromHtmlTitleAndHtmlBody((string) $artifact->getTitle(), $html)
-                ->withAccentColor($artifact->getTracker()->getColor()->getName())
+            TooltipJSON::fromHtmlTitleAndHtmlBody(
+                $this->renderer_factory
+                    ->getRenderer(__DIR__ . '/../../../../templates/tooltip/')
+                    ->renderToString('artifact-tooltip-title', ['title' => $artifact->getTitle()]),
+                $html
+            )->withAccentColor($artifact->getTracker()->getColor()->getName())
         );
     }
 
diff --git a/plugins/tracker/templates/tooltip/artifact-tooltip-title.mustache b/plugins/tracker/templates/tooltip/artifact-tooltip-title.mustache
new file mode 100644
index 00000000000..6d5a89f8a7f
--- /dev/null
+++ b/plugins/tracker/templates/tooltip/artifact-tooltip-title.mustache
@@ -0,0 +1 @@
+{{ title }}
diff --git a/plugins/tracker/tests/unit/Tracker/Semantic/Tooltip/TooltipFetcherTest.php b/plugins/tracker/tests/unit/Tracker/Semantic/Tooltip/TooltipFetcherTest.php
index d0ec5ee5874..050d628ee87 100644
--- a/plugins/tracker/tests/unit/Tracker/Semantic/Tooltip/TooltipFetcherTest.php
+++ b/plugins/tracker/tests/unit/Tracker/Semantic/Tooltip/TooltipFetcherTest.php
@@ -22,6 +22,8 @@
 
 namespace Tuleap\Tracker\Semantic\Tooltip;
 
+use TemplateRendererFactory;
+use Tuleap\Templating\TemplateCache;
 use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Artifact\Artifact;
@@ -42,8 +44,12 @@ public function testNothingWhenArtifactIsNotReadable(): void
 
         $user = UserTestBuilder::buildWithDefaults();
 
+        $template_cache = $this->createMock(TemplateCache::class);
+        $template_cache->method('getPath')->willReturn(null);
+        $template_factory = new TemplateRendererFactory($template_cache);
+
         self::assertTrue(
-            (new TooltipFetcher())
+            (new TooltipFetcher($template_factory))
                 ->fetchArtifactTooltip($artifact, $tooltip, $user)
                 ->isNothing()
         );
@@ -58,8 +64,12 @@ public function testNothingWhenThereIsNoFields(): void
 
         $user = UserTestBuilder::buildWithDefaults();
 
+        $template_cache = $this->createMock(TemplateCache::class);
+        $template_cache->method('getPath')->willReturn(null);
+        $template_factory = new TemplateRendererFactory($template_cache);
+
         self::assertTrue(
-            (new TooltipFetcher())
+            (new TooltipFetcher($template_factory))
                 ->fetchArtifactTooltip($artifact, $tooltip, $user)
                 ->isNothing()
         );
@@ -91,8 +101,12 @@ public function testReturnTheTooltipValueOfEachFields(): void
 
         $user = UserTestBuilder::buildWithDefaults();
 
-        $tooltip = (new TooltipFetcher())->fetchArtifactTooltip($artifact, $tooltip, $user);
-        self::assertEquals('The title', $tooltip->unwrapOr('')->title_as_html);
+        $template_cache = $this->createMock(TemplateCache::class);
+        $template_cache->method('getPath')->willReturn(null);
+        $template_factory = new TemplateRendererFactory($template_cache);
+
+        $tooltip = (new TooltipFetcher($template_factory))->fetchArtifactTooltip($artifact, $tooltip, $user);
+        self::assertStringContainsString('The title', $tooltip->unwrapOr('')->title_as_html);
         self::assertStringContainsString('avada', $tooltip->unwrapOr('')->body_as_html);
         self::assertStringContainsString('kedavra', $tooltip->unwrapOr('')->body_as_html);
         self::assertEquals('fiesta-red', $tooltip->unwrapOr('')->accent_color);
@@ -124,7 +138,12 @@ public function testIncludesOtherSemanticsEntries(): void
 
         $user = UserTestBuilder::buildWithDefaults();
 
+        $template_cache = $this->createMock(TemplateCache::class);
+        $template_cache->method('getPath')->willReturn(null);
+        $template_factory = new TemplateRendererFactory($template_cache);
+
         $tooltip = (new TooltipFetcher(
+            $template_factory,
             new class implements OtherSemanticTooltipEntryFetcher {
                 public function fetchTooltipEntry(Artifact $artifact, \PFUser $user): string
                 {
@@ -138,7 +157,7 @@ public function fetchTooltipEntry(Artifact $artifact, \PFUser $user): string
                 }
             },
         ))->fetchArtifactTooltip($artifact, $tooltip, $user);
-        self::assertEquals('The title', $tooltip->unwrapOr('')->title_as_html);
+        self::assertStringContainsString('The title', $tooltip->unwrapOr('')->title_as_html);
         self::assertStringContainsString('Susan', $tooltip->unwrapOr('')->body_as_html);
         self::assertStringContainsString('Dennis', $tooltip->unwrapOr('')->body_as_html);
         self::assertStringContainsString('avada', $tooltip->unwrapOr('')->body_as_html);
@@ -168,8 +187,12 @@ public function testExcludeUnreadableFields(): void
 
         $user = UserTestBuilder::buildWithDefaults();
 
-        $tooltip = (new TooltipFetcher())->fetchArtifactTooltip($artifact, $tooltip, $user);
-        self::assertEquals('', $tooltip->unwrapOr('')->title_as_html);
+        $template_cache = $this->createMock(TemplateCache::class);
+        $template_cache->method('getPath')->willReturn(null);
+        $template_factory = new TemplateRendererFactory($template_cache);
+
+        $tooltip = (new TooltipFetcher($template_factory))->fetchArtifactTooltip($artifact, $tooltip, $user);
+        self::assertEquals('', trim($tooltip->unwrapOr('')->title_as_html));
         self::assertStringContainsString('avada', $tooltip->unwrapOr('')->body_as_html);
         self::assertStringNotContainsString('kedavra', $tooltip->unwrapOr('')->body_as_html);
     }
