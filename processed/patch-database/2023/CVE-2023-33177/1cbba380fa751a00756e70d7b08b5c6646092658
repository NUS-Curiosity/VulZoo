diff --git a/lib/Controller/Base.php b/lib/Controller/Base.php
index 1478895c1e..e3496cc700 100644
--- a/lib/Controller/Base.php
+++ b/lib/Controller/Base.php
@@ -1,6 +1,6 @@
 <?php
 /*
- * Copyright (c) 2022 Xibo Signage Ltd
+ * Copyright (C) 2023 Xibo Signage Ltd
  *
  * Xibo - Digital Signage - http://www.xibo.org.uk
  *
@@ -319,7 +319,8 @@ public function render(Request $request, Response $response)
             try {
                 $response = $this->getView()->render($response, $state->template . '.twig', $data);
             } catch (LoaderError | RuntimeError | SyntaxError $e) {
-                throw new GeneralException(__('Twig Error ') . $e->getMessage());
+                $this->getLog()->error('Twig Error' . $e->getMessage());
+                throw new GeneralException(__('Unable to view this page'));
             }
         }
         $this->rendered = true;
@@ -345,7 +346,8 @@ public function renderTwigAjaxReturn(Request $request, Response $response)
         try {
             $view = $this->getView()->render($response, $state->template . '.twig', $data);
         } catch (LoaderError | RuntimeError | SyntaxError $e) {
-            throw new GeneralException(__('Twig Error ') . $e->getMessage());
+            $this->getLog()->error('Twig Error' . $e->getMessage());
+            throw new GeneralException(__('Unable to view this page'));
         }
 
         $view = $view->getBody();
diff --git a/lib/Entity/DataSet.php b/lib/Entity/DataSet.php
index 50b9f4739b..30e923bf85 100644
--- a/lib/Entity/DataSet.php
+++ b/lib/Entity/DataSet.php
@@ -525,7 +525,7 @@ public function getData($filterBy = [], $options = [])
                     continue;
                 }
 
-                $formula = str_replace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES));
+                $formula = str_ireplace($this->blackList, '', htmlspecialchars_decode($column->formula, ENT_QUOTES));
                 $formula = str_replace('[DisplayId]', $displayId, $formula);
 
                 $heading = str_replace('[DisplayGeoLocation]', $displayGeoLocation, $formula) . ' AS `' . $column->heading . '`';
@@ -544,7 +544,7 @@ public function getData($filterBy = [], $options = [])
         if ($filter != '') {
             // Support display filtering.
             $filter = str_replace('[DisplayId]', $displayId, $filter);
-            $filter = str_replace($this->blackList, '', $filter);
+            $filter = str_ireplace($this->blackList, '', $filter);
 
             $body .= ' AND ' . $filter;
         }
diff --git a/lib/Factory/BaseFactory.php b/lib/Factory/BaseFactory.php
index 3845764fba..f9aaf442b4 100644
--- a/lib/Factory/BaseFactory.php
+++ b/lib/Factory/BaseFactory.php
@@ -1,6 +1,6 @@
 <?php
 /*
- * Copyright (c) 2022 Xibo Signage Ltd
+ * Copyright (C) 2023 Xibo Signage Ltd
  *
  * Xibo - Digital Signage - http://www.xibo.org.uk
  *
@@ -389,6 +389,12 @@ public function nameFilter($tableName, $tableColumn, $terms, &$body, &$params, $
                 continue;
             }
 
+            // Validate the logical operator
+            if (!in_array($logicalOperator, ['AND', 'OR'])) {
+                $this->getLog()->error('Invalid logical operator ' . $logicalOperator);
+                return;
+            }
+
             // Not like, or like?
             if (substr($searchName, 0, 1) == '-') {
                 if ($i === 1) {
diff --git a/lib/Factory/DisplayFactory.php b/lib/Factory/DisplayFactory.php
index 6c8df91b60..e289e8a2db 100644
--- a/lib/Factory/DisplayFactory.php
+++ b/lib/Factory/DisplayFactory.php
@@ -1,6 +1,6 @@
 <?php
 /*
- * Copyright (C) 2022 Xibo Signage Ltd
+ * Copyright (C) 2023 Xibo Signage Ltd
  *
  * Xibo - Digital Signage - http://www.xibo.org.uk
  *
@@ -357,8 +357,18 @@ public function query($sortOrder = null, $filterBy = [])
         // Filter by map bound?
         if ($parsedBody->getString('bounds') !== null) {
             $coordinates = explode(',', $parsedBody->getString('bounds'));
-            $body .= ' AND IFNULL( ' . $functionPrefix . 'X(display.GeoLocation), ' . $this->config->getSetting('DEFAULT_LAT'). ')  BETWEEN ' . $coordinates['1'] . ' AND ' . $coordinates['3'] .
-                ' AND IFNULL( ' . $functionPrefix . 'Y(display.GeoLocation), ' . $this->config->getSetting('DEFAULT_LONG'). ')  BETWEEN  ' . $coordinates['0'] . ' AND ' . $coordinates['2'] . ' ';
+            $defaultLat = $this->config->getSetting('DEFAULT_LAT');
+            $defaultLng = $this->config->getSetting('DEFAULT_LONG');
+
+            $body .= ' AND IFNULL( ' . $functionPrefix . 'X(display.GeoLocation), ' . $defaultLat
+                . ')  BETWEEN :coordinates_1 AND :coordinates_3 '
+                . ' AND IFNULL( ' . $functionPrefix . 'Y(display.GeoLocation), ' . $defaultLng
+                . ')  BETWEEN :coordinates_0 AND :coordinates_2 ';
+
+            $params['coordinates_0'] = $coordinates[0];
+            $params['coordinates_1'] = $coordinates[1];
+            $params['coordinates_2'] = $coordinates[2];
+            $params['coordinates_3'] = $coordinates[3];
         }
 
         // Filter by Display ID?
diff --git a/lib/Factory/LayoutFactory.php b/lib/Factory/LayoutFactory.php
index dc4e1954e9..85bea71440 100644
--- a/lib/Factory/LayoutFactory.php
+++ b/lib/Factory/LayoutFactory.php
@@ -1016,7 +1016,7 @@ public function loadByJson($layoutJson, $playlistJson, $nestedPlaylistJson, Fold
                             }
                         }
                     }
-                    
+
                     $combined = array_combine($oldIds, $newIds);
 
                     $playlists = $this->createNestedPlaylistWidgets($widgets, $combined, $playlists);
@@ -1241,14 +1241,22 @@ public function createFromZip($zipFile, $layoutName, $userId, $template, $replac
         foreach ($mappings as $file) {
             // Import the Media File
             $intendedMediaName = $file['name'];
-            $temporaryFileName = $libraryLocation . $file['file'];
+
+            // Validate the file name
+            $fileName = basename($file['file']);
+            if (empty($fileName) || $fileName == '.') {
+                $this->getLog()->error('Skipping file on import due to invalid filename. ' . $fileName);
+                continue;
+            }
+
+            $temporaryFileName = $libraryLocation . $fileName;
 
             // Get the file from the ZIP
-            $fileStream = $zip->getStream('library/' . $file['file']);
+            $fileStream = $zip->getStream('library/' . $fileName);
 
             if ($fileStream === false) {
                 // Log out the entire ZIP file and all entries.
-                $log = 'Problem getting library/' . $file['file'] . '. Files: ';
+                $log = 'Problem getting library/' . $fileName . '. Files: ';
                 for ($i = 0; $i < $zip->numFiles; $i++) {
                     $log .= $zip->getNameIndex($i) . ', ';
                 }
@@ -1287,9 +1295,9 @@ public function createFromZip($zipFile, $layoutName, $userId, $template, $replac
                 }
             } catch (NotFoundException $e) {
                 // Create it instead
-                $this->getLog()->debug('Media does not exist in Library, add it ' .  $file['file']);
+                $this->getLog()->debug('Media does not exist in Library, add it ' .  $fileName);
 
-                $media = $this->mediaFactory->create($intendedMediaName, $file['file'], $file['type'], $userId, $file['duration']);
+                $media = $this->mediaFactory->create($intendedMediaName, $fileName, $file['type'], $userId, $file['duration']);
 
                 if ($importTags && isset($file['tags'])) {
                     foreach ($file['tags'] as $tagNode) {
@@ -1444,7 +1452,7 @@ public function createFromZip($zipFile, $layoutName, $userId, $template, $replac
                 $columnWithImages = [];
                 // We must null the ID so that we don't try to load the dataset when we assign columns
                 $dataSet->dataSetId = null;
-                
+
                 // Hydrate the columns
                 foreach ($item['columns'] as $columnItem) {
                     $this->getLog()->debug(sprintf('Assigning column: %s', json_encode($columnItem)));
