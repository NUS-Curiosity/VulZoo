diff --git a/src/RuleImportAsset.php b/src/RuleImportAsset.php
index e2a946043a0..4857cc11631 100644
--- a/src/RuleImportAsset.php
+++ b/src/RuleImportAsset.php
@@ -34,6 +34,8 @@
  * ---------------------------------------------------------------------
  */
 
+use Glpi\Toolbox\Sanitizer;
+
 class RuleImportAsset extends Rule
 {
     const RULE_ACTION_LINK_OR_IMPORT    = 0;
@@ -518,7 +520,7 @@ class_exists($itemtype)
                 $this->handleOneJoinPerCriteria($item, $it_criteria);
             }
 
-            $this->handleFieldsCriteria($item, $it_criteria, $input);
+            $this->handleFieldsCriteria($item, $it_criteria, Sanitizer::sanitize($input));
 
             if (isset($PLUGIN_HOOKS['use_rules'])) {
                 foreach ($PLUGIN_HOOKS['use_rules'] as $plugin => $val) {
diff --git a/tests/functional/Glpi/Inventory/Assets/Bios.php b/tests/functional/Glpi/Inventory/Assets/Bios.php
index 0d29445b8d0..5e4f2739ebc 100644
--- a/tests/functional/Glpi/Inventory/Assets/Bios.php
+++ b/tests/functional/Glpi/Inventory/Assets/Bios.php
@@ -144,7 +144,7 @@ public function testInventoryUpdate()
       <NAME>pc002</NAME>
     </HARDWARE>
     <BIOS>
-      <SSN>ggheb7ne7</SSN>
+      <SSN>ggheb7'ne7</SSN>
       <BMANUFACTURER>Dell Inc.</BMANUFACTURER>
       <BVERSION>1.4.3</BVERSION>
       <MMANUFACTURER>Dell Inc.</MMANUFACTURER>
@@ -175,7 +175,7 @@ public function testInventoryUpdate()
         //create manually a computer, with a bios
         $computers_id = $computer->add([
             'name'   => 'pc002',
-            'serial' => 'ggheb7ne7',
+            'serial' => addslashes("ggheb7'ne7"),
             'entities_id' => 0
         ]);
         $this->integer($computers_id)->isGreaterThan(0);
@@ -219,7 +219,7 @@ public function testInventoryUpdate()
       <NAME>pc002</NAME>
     </HARDWARE>
     <BIOS>
-      <SSN>ggheb7ne7</SSN>
+      <SSN>ggheb7'ne7</SSN>
       <BMANUFACTURER>Dell Inc.</BMANUFACTURER>
       <BVERSION>1.4.4</BVERSION>
       <MMANUFACTURER>Dell Inc.</MMANUFACTURER>
diff --git a/tests/functional/Glpi/Inventory/Inventory.php b/tests/functional/Glpi/Inventory/Inventory.php
index 51220e608b2..2b96a6283ad 100644
--- a/tests/functional/Glpi/Inventory/Inventory.php
+++ b/tests/functional/Glpi/Inventory/Inventory.php
@@ -4901,6 +4901,45 @@ public function testImportDatabases()
         $this->boolean($database->getFromDBByCrit(['name' => 'MariaDB']))->isTrue();
         $this->string($database->fields['version'])->isIdenticalTo('Ver 15.1 Distrib 10.5.10-MariaDB-modified');
 
+        //- ensure existing instances has been updated
+        $databases = $database->getDatabases();
+        $this->array($databases)->hasSize(2);
+        $this->array(array_pop($databases))
+            ->string['name']->isIdenticalTo('new_database')
+            ->integer['size']->isIdenticalTo(2048);
+        $this->array(array_pop($databases))
+            ->string['name']->isIdenticalTo('glpi')
+            ->integer['size']->isIdenticalTo(55000);
+
+        //test sql syntax error
+        $json = json_decode(file_get_contents(self::INV_FIXTURES . 'computer_2_partial_dbs.json'));
+        $mysql = $json->content->databases_services[0];
+        //update version
+        $mysql->name = "Maria'DB";
+        $dbs = $mysql->databases;
+
+        $db_glpi = &$dbs[0];
+        $db_glpi->size = 55000;
+        $db_glpi->last_backup_date = '2021-06-25 08:52:44';
+
+        $db_new = &$dbs[1];
+        $db_new->name = 'new_database';
+        $db_new->size = 2048;
+
+        $services = [$mysql];
+        $json->content->databases_services = $services;
+
+        $this->doInventory($json);
+
+        //check created databases & instances
+        $this->integer(countElementsInTable(\DatabaseInstance::getTable(), ['is_deleted' => 0]))->isIdenticalTo(1);
+        $this->integer(countElementsInTable(\DatabaseInstance::getTable(), ['is_deleted' => 1]))->isIdenticalTo(2);
+
+        //ensure database version has been updated
+        $database = new \DatabaseInstance();
+        $this->boolean($database->getFromDBByCrit(['name' => 'MariaDB']))->isTrue();
+        $this->string($database->fields['version'])->isIdenticalTo('Ver 15.1 Distrib 10.5.10-MariaDB-modified');
+
         //- ensure existing instances has been updated
         $databases = $database->getDatabases();
         $this->array($databases)->hasSize(2);
