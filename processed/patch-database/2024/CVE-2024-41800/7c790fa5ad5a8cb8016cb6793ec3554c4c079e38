diff --git a/src/auth/methods/TOTP.php b/src/auth/methods/TOTP.php
index 1f69dcbcc0b..450c1703046 100644
--- a/src/auth/methods/TOTP.php
+++ b/src/auth/methods/TOTP.php
@@ -18,6 +18,7 @@
 use craft\web\View;
 use PragmaRX\Google2FA\Exceptions\Google2FAException;
 use PragmaRX\Google2FA\Google2FA;
+use yii\base\Exception;
 use yii\web\ForbiddenHttpException;
 
 /**
@@ -126,8 +127,10 @@ public function verify(mixed ...$args): bool
             return false;
         }
 
+        $google2fa = new Google2FA();
         try {
-            $verified = (new Google2FA())->verifyKey($secret, $code);
+            $lastUsedTimestamp = $this->lastUsedTimestamp($this->user->id);
+            $verified = $google2fa->verifyKeyNewer($secret, $code, $lastUsedTimestamp);
         } catch (Google2FAException) {
             return false;
         }
@@ -139,6 +142,8 @@ public function verify(mixed ...$args): bool
         if (!$storedSecret) {
             $this->storeSecret($this->user->id, $secret);
             Craft::$app->getSession()->remove($this->secretParam);
+        } else {
+            $this->storeLastUsedTimestamp($this->user->id, $verified === true ? $google2fa->getTimestamp() : $verified);
         }
 
         return true;
@@ -154,6 +159,12 @@ public function remove(): void
         ]);
     }
 
+    /**
+     * Gets User's 2FA secret from the database
+     * and returns as a string formatted into a 4 character chunks.
+     *
+     * @return string
+     */
     private function secret(): string
     {
         $google2fa = new Google2FA();
@@ -171,6 +182,12 @@ private function secret(): string
         return chunk_split($secret, 4, ' ');
     }
 
+    /**
+     * Returns user's 2fa secret from the database.
+     *
+     * @param int $userId
+     * @return string|null
+     */
     private static function secretFromDb(int $userId): ?string
     {
         $record = AuthenticatorRecord::find()
@@ -181,6 +198,14 @@ private static function secretFromDb(int $userId): ?string
         return $record ? $record['auth2faSecret'] : null;
     }
 
+    /**
+     * Stores user's 2fa secret in the database.
+     *
+     * @param int $userId
+     * @param string $secret
+     * @return void
+     * @throws ForbiddenHttpException
+     */
     private function storeSecret(int $userId, string $secret): void
     {
         // Make sure they have an elevated session first
@@ -199,9 +224,62 @@ private function storeSecret(int $userId, string $secret): void
         }
 
         $record->auth2faSecret = $secret;
+        // whenever we store the secret, we should ensure the oldTimestamp is accurate too
+        $record->oldTimestamp = (new Google2FA())->getTimestamp();
         $record->save();
     }
 
+    /**
+     * Returns the totp's old timestamp.
+     *
+     * @param int $userId
+     * @return int|null
+     */
+    private function lastUsedTimestamp(int $userId): ?int
+    {
+        $record = AuthenticatorRecord::find()
+            ->select(['oldTimestamp'])
+            ->where(['userId' => $userId])
+            ->one();
+
+        if (!$record) {
+            return null;
+        }
+
+        // old timestamp is the current Unix Timestamp divided by the $keyRegeneration period
+        // so we store it as int and don't mess with it
+        return $record['oldTimestamp'];
+    }
+
+    /**
+     * Saves totp's old timestamp.
+     *
+     * @param int $userId
+     * @param int $timestamp
+     * @return void
+     */
+    private function storeLastUsedTimestamp(int $userId, int $timestamp): void
+    {
+        /** @var AuthenticatorRecord|null $record */
+        $record = AuthenticatorRecord::find()
+            ->where(['userId' => $userId])
+            ->one();
+
+        if (!$record) {
+            // you shouldn't be able to get here without having a record, so let's throw an exception
+            throw new Exception('Couldn\'t find authenticator record.');
+        }
+
+        $record->oldTimestamp = $timestamp;
+        $record->save();
+    }
+
+    /**
+     * Generates and returns a QR code based on given 2fa secret.
+     *
+     * @param string $secret
+     * @return string
+     */
     private function generateQrCode(string $secret): string
     {
         $qrCodeUrl = (new Google2FA())->getQRCodeUrl(
diff --git a/src/config/app.php b/src/config/app.php
index 2885c2cb984..201b584ea31 100644
--- a/src/config/app.php
+++ b/src/config/app.php
@@ -4,7 +4,7 @@
     'id' => 'CraftCMS',
     'name' => 'Craft CMS',
     'version' => '5.2.2',
-    'schemaVersion' => '5.0.0.20',
+    'schemaVersion' => '5.0.0.21',
     'minVersionRequired' => '4.5.0',
     'basePath' => dirname(__DIR__), // Defines the @app alias
     'runtimePath' => '@storage/runtime', // Defines the @runtime alias
diff --git a/src/migrations/Install.php b/src/migrations/Install.php
index 7ef989cab3a..6f867bb7eb3 100644
--- a/src/migrations/Install.php
+++ b/src/migrations/Install.php
@@ -224,6 +224,7 @@ public function createTables(): void
             'id' => $this->primaryKey(),
             'userId' => $this->integer()->notNull(),
             'auth2faSecret' => $this->string()->defaultValue(null),
+            'oldTimestamp' => $this->integer()->unsigned()->defaultValue(null),
             'dateCreated' => $this->dateTime()->notNull(),
             'dateUpdated' => $this->dateTime()->notNull(),
         ]);
diff --git a/src/migrations/m240619_091352_add_auth_2fa_timestamp.php b/src/migrations/m240619_091352_add_auth_2fa_timestamp.php
new file mode 100644
index 00000000000..f413fc6c9a7
--- /dev/null
+++ b/src/migrations/m240619_091352_add_auth_2fa_timestamp.php
@@ -0,0 +1,36 @@
+<?php
+
+namespace craft\migrations;
+
+use craft\db\Migration;
+use craft\db\Table;
+
+/**
+ * m240619_091352_add_auth_2fa_timestamp migration.
+ */
+class m240619_091352_add_auth_2fa_timestamp extends Migration
+{
+    /**
+     * @inheritdoc
+     */
+    public function safeUp(): bool
+    {
+        if (!$this->db->columnExists(Table::AUTHENTICATOR, 'timestamp')) {
+            $this->addColumn(
+                Table::AUTHENTICATOR,
+                'oldTimestamp',
+                $this->integer()->unsigned()->defaultValue(null)->after('auth2faSecret')
+            );
+        }
+        return true;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    public function safeDown(): bool
+    {
+        echo "m240619_091352_add_auth_2fa_timestamp cannot be reverted.\n";
+        return false;
+    }
+}
diff --git a/src/records/Authenticator.php b/src/records/Authenticator.php
index 98c8890e3cd..f144da61ff4 100644
--- a/src/records/Authenticator.php
+++ b/src/records/Authenticator.php
@@ -17,6 +17,7 @@
  * @property int $id ID
  * @property int $userId Volume ID
  * @property string $auth2faSecret 2FA secret
+ * @property int $oldTimestamp old TOTP timestamp
  * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>
  * @since 5.0.0
  */
@@ -39,6 +40,7 @@ public function rules(): array
         return [
             [['userId', 'auth2faSecret'], 'required'],
             [['auth2faSecret'], 'string', 'max' => 32],
+            [['oldTimestamp'], 'integer'],
         ];
     }
 
