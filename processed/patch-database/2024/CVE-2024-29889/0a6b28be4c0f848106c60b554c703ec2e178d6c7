diff --git a/ajax/pin_savedsearches.php b/ajax/pin_savedsearches.php
index 0eaf0ae530b..2abd6095696 100644
--- a/ajax/pin_savedsearches.php
+++ b/ajax/pin_savedsearches.php
@@ -40,22 +40,16 @@
 
 Session::checkLoginUser();
 
-if (!is_string($_POST['itemtype']) || getItemForItemtype($_POST['itemtype']) === false) {
-    echo json_encode(['success' => false]);
-    exit();
-}
-
-$all_pinned = importArrayFromDB($_SESSION['glpisavedsearches_pinned']);
-$already_pinned = $all_pinned[$_POST['itemtype']] ?? 0;
-$all_pinned[$_POST['itemtype']] = $already_pinned ? 0 : 1;
-$_SESSION['glpisavedsearches_pinned'] = exportArrayToDB($all_pinned);
+$success = false;
 
 $user = new User();
-$success = $user->update(
-    [
-        'id'                   => Session::getLoginUserID(),
-        'savedsearches_pinned' => $_SESSION['glpisavedsearches_pinned'],
-    ]
-);
+if (
+    array_key_exists('itemtype', $_POST)
+    && is_string($_POST['itemtype'])
+    && $user->getFromDB(Session::getLoginUserID())
+    && $user->toggleSavedSearchPin($_POST['itemtype'])
+) {
+    $success = true;
+}
 
 echo json_encode(['success' => $success]);
diff --git a/src/User.php b/src/User.php
index bf4eaac432a..0451c155c6d 100644
--- a/src/User.php
+++ b/src/User.php
@@ -6876,4 +6876,28 @@ public function willProcessRuleRight(): void
     {
         $this->must_process_ruleright = true;
     }
+
+    /**
+     * Toggle pin of given itemtype saved search.
+     *
+     * @param string $itemtype
+     *
+     * @return bool
+     */
+    public function toggleSavedSearchPin(string $itemtype): bool
+    {
+        if (getItemForItemtype($itemtype) === false) {
+            return false;
+        }
+
+        $all_pinned     = importArrayFromDB($this->fields['savedsearches_pinned']);
+        $already_pinned = $all_pinned[$itemtype] ?? 0;
+
+        $all_pinned[$itemtype] = $already_pinned ? 0 : 1;
+
+        return $this->update(Sanitizer::sanitize([
+            'id'                   => $this->fields['id'],
+            'savedsearches_pinned' => exportArrayToDB($all_pinned),
+        ]));
+    }
 }
diff --git a/tests/functional/User.php b/tests/functional/User.php
index 539c8718998..ca5fcde71f8 100644
--- a/tests/functional/User.php
+++ b/tests/functional/User.php
@@ -1404,4 +1404,70 @@ public function testUserDnHashIsUsedInGetFromDBbyDn(): void
         $this->boolean($retrievedUser->isNewItem())->isFalse();
         $this->string($retrievedUser->fields['user_dn'])->isEmpty();
     }
+
+    protected function toggleSavedSearchPinProvider(): iterable
+    {
+        foreach (['', '[]', '{}'] as $initial_db_value) {
+            // initial empty data
+            yield [
+                'initial_db_value' => $initial_db_value,
+                'itemtype'         => 'Computer',
+                'success'          => true,
+                'result_db_value'  => '{"Computer":1}',
+            ];
+        }
+
+        // toggle to 1
+        yield [
+            'initial_db_value' => '{"Computer":0,"Monitor":1}',
+            'itemtype'         => 'Computer',
+            'success'          => true,
+            'result_db_value'  => '{"Computer":1,"Monitor":1}',
+        ];
+
+        // toggle to 0
+        yield [
+            'initial_db_value' => '{"Computer":1,"Monitor":1}',
+            'itemtype'         => 'Monitor',
+            'success'          => true,
+            'result_db_value'  => '{"Computer":1,"Monitor":0}',
+        ];
+
+        // namespaced itemtype
+        yield [
+            'initial_db_value' => '{"Computer":1,"Monitor":0}',
+            'itemtype'         => 'Glpi\\Socket',
+            'success'          => true,
+            'result_db_value'  => '{"Computer":1,"Monitor":0,"Glpi\\\\Socket":1}',
+        ];
+
+        // invalid itemtype
+        yield [
+            'initial_db_value' => '{"Computer":1,"Monitor":1}',
+            'itemtype'         => 'This is not a valid itemtype',
+            'success'          => false,
+            'result_db_value'  => '{"Computer":1,"Monitor":1}',
+        ];
+    }
+
+    /**
+     * @dataProvider toggleSavedSearchPinProvider
+     */
+    public function testToggleSavedSearchPin(string $initial_db_value, string $itemtype, bool $success, string $result_db_value): void
+    {
+        $user = $this->createItem(
+            \User::class,
+            [
+                'name'                  => __FUNCTION__ . (string) mt_rand(),
+                'savedsearches_pinned'  => $initial_db_value,
+            ]
+        );
+
+        $this->boolean($user->toggleSavedSearchPin($itemtype))->isEqualTo($success);
+        $this->boolean($user->getFromDb($user->getID()))->isTrue();
+        $this->string($user->fields['savedsearches_pinned'])->isEqualTo($result_db_value);
+
+        // result value in DB is always a valid JSON string
+        $this->array(importArrayFromDB($user->fields['savedsearches_pinned']))->isEqualTo(json_decode($result_db_value, true));
+    }
 }
