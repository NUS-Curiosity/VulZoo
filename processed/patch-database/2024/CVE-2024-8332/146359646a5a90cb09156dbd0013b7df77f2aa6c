diff --git a/controller/generalization_controller.go b/controller/generalization_controller.go
index 05df0b1..ed46c47 100644
--- a/controller/generalization_controller.go
+++ b/controller/generalization_controller.go
@@ -27,9 +27,9 @@ func NewGeneralizationController(generalizationService *service.GeneralizationSe
 }
 
 func (gc *GeneralizationController) Query(ctx *gin.Context) {
-	id, err := strconv.Atoi(ctx.Param("id"))
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
 	if err != nil {
 		_ = ctx.Error(err)
 		return
diff --git a/controller/sys_dict_controller.go b/controller/sys_dict_controller.go
index 4eff6a7..66a4012 100644
--- a/controller/sys_dict_controller.go
+++ b/controller/sys_dict_controller.go
@@ -66,7 +66,7 @@ func (t *DictController) GetSysDictById(ctx *gin.Context) {
 func (t *DictController) GetSysDictByCode(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
-	code := ctx.Param("code")
+	code := utils.SanitizeInput(ctx.Param("code"))
 	data, err := t.sysDictService.GetSysDictByCode(code)
 	if err != nil {
 		e := &response.AdminError{
@@ -248,9 +248,19 @@ func (t *DictController) CreateSysDictItem(ctx *gin.Context) {
 func (t *DictController) UpdateSysDictItem(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	translator, _ := t.translators["zh"]
 	var data request.DictItemUpdateReq
-	err := utils.ValidatorBody[request.DictItemUpdateReq](ctx, &data, translator)
+	data.Id = id
+	err = utils.ValidatorBody[request.DictItemUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
diff --git a/controller/sys_menu_controller.go b/controller/sys_menu_controller.go
index 0550707..07d1232 100644
--- a/controller/sys_menu_controller.go
+++ b/controller/sys_menu_controller.go
@@ -67,9 +67,19 @@ func (m *MenuController) CreateMenu(ctx *gin.Context) {
 func (m *MenuController) UpdateMenu(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.MenuUpdateReq
+	data.Id = id
 	translator, _ := m.translators["zh"]
-	err := utils.ValidatorBody[request.MenuUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.MenuUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
diff --git a/controller/sys_table_controller.go b/controller/sys_table_controller.go
index cd68b6a..bb43570 100644
--- a/controller/sys_table_controller.go
+++ b/controller/sys_table_controller.go
@@ -8,6 +8,7 @@ package controller
 import (
 	"github.com/gin-gonic/gin"
 	ut "github.com/go-playground/universal-translator"
+	"net/http"
 	"strconv"
 	"sweet-cms/form/request"
 	"sweet-cms/form/response"
@@ -47,7 +48,7 @@ func (t *TableController) GetTableByID(ctx *gin.Context) {
 func (t *TableController) GetTableByCode(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
-	code := ctx.Param("code")
+	code := utils.SanitizeInput(ctx.Param("code"))
 	data, err := t.sysTableService.GetTableByTableCode(code)
 	if err != nil {
 		_ = ctx.Error(err)
@@ -97,9 +98,19 @@ func (t *TableController) CreateTable(ctx *gin.Context) {
 func (t *TableController) UpdateTable(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.TableUpdateReq
+	data.Id = id
 	translator, _ := t.translators["zh"]
-	err := utils.ValidatorBody[request.TableUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.TableUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
@@ -184,9 +195,19 @@ func (t *TableController) CreateTableField(ctx *gin.Context) {
 func (t *TableController) UpdateTableField(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.TableFieldUpdateReq
+	data.Id = id
 	translator, _ := t.translators["zh"]
-	err := utils.ValidatorBody[request.TableFieldUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.TableFieldUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
@@ -271,9 +292,19 @@ func (t *TableController) CreateTableRelation(ctx *gin.Context) {
 func (t *TableController) UpdateTableRelation(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.TableRelationUpdateReq
+	data.Id = id
 	translator, _ := t.translators["zh"]
-	err := utils.ValidatorBody[request.TableRelationUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.TableRelationUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
@@ -357,9 +388,19 @@ func (t *TableController) CreateTableIndex(ctx *gin.Context) {
 func (t *TableController) UpdateTableIndex(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.TableIndexUpdateReq
+	data.Id = id
 	translator, _ := t.translators["zh"]
-	err := utils.ValidatorBody[request.TableIndexUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.TableIndexUpdateReq](ctx, &data, translator)
 	if err != nil {
 		_ = ctx.Error(err)
 		return
@@ -407,7 +448,7 @@ func (t *TableController) DeleteTableIndexByTableId(ctx *gin.Context) {
 func (t *TableController) InitTable(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
-	code := ctx.Param("code")
+	code := utils.SanitizeInput(ctx.Param("code"))
 	err := t.sysTableService.InitTable(ctx, code)
 	if err != nil {
 		_ = ctx.Error(err)
diff --git a/controller/sys_user_controller.go b/controller/sys_user_controller.go
index 9a3a784..85ebfd1 100644
--- a/controller/sys_user_controller.go
+++ b/controller/sys_user_controller.go
@@ -99,9 +99,19 @@ func (u *UserController) CreateUser(ctx *gin.Context) {
 func (u *UserController) UpdateUser(ctx *gin.Context) {
 	resp := response.NewResponse()
 	ctx.Set("response", resp)
+	id, err := strconv.Atoi(ctx.Param("id"))
+	if err != nil {
+		e := &response.AdminError{
+			ErrorCode:    http.StatusBadRequest,
+			ErrorMessage: err.Error(),
+		}
+		_ = ctx.Error(e)
+		return
+	}
 	var data request.UserUpdateReq
+	data.Id = id
 	translator, _ := u.translators["zh"]
-	err := utils.ValidatorBody[request.UserUpdateReq](ctx, &data, translator)
+	err = utils.ValidatorBody[request.UserUpdateReq](ctx, &data, translator)
 	err = u.sysUserService.Update(ctx, data)
 	if err != nil {
 		_ = ctx.Error(err)
