diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
index 6a4be6d8d77..dbf9550a625 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
@@ -67,7 +67,7 @@ public function __construct(
      */
     public function getSelectboxOptions(Tracker $backlog_tracker, $selected_milestone_id, PFUser $user): array
     {
-        $nearest_planning_tracker = $this->nearest_planning_tracker_provider->getNearestPlanningTracker($backlog_tracker, $this->hierarchy_factory);
+        $nearest_planning_tracker = $this->nearest_planning_tracker_provider->getNearestPlanningTracker($user, $backlog_tracker, $this->hierarchy_factory);
         if (! $nearest_planning_tracker) {
             return [];
         }
diff --git a/plugins/agiledashboard/include/AgileDashboard/Planning/NearestPlanningTrackerProvider.class.php b/plugins/agiledashboard/include/AgileDashboard/Planning/NearestPlanningTrackerProvider.class.php
index 177a7220051..fad7e671f25 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Planning/NearestPlanningTrackerProvider.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Planning/NearestPlanningTrackerProvider.class.php
@@ -40,13 +40,12 @@ public function __construct(PlanningFactory $planning_factory)
         $this->planning_factory = $planning_factory;
     }
 
-    /** @return Tracker|null */
-    public function getNearestPlanningTracker(Tracker $backlog_tracker, Tracker_HierarchyFactory $hierarchy_factory)
+    public function getNearestPlanningTracker(PFUser $user, Tracker $backlog_tracker, Tracker_HierarchyFactory $hierarchy_factory): ?Tracker
     {
         $current_backlog_tracker  = $backlog_tracker;
         $nearest_planning_tracker = null;
         while ($current_backlog_tracker && ! $nearest_planning_tracker) {
-            $plannings = $this->getPlanningTrackersInRightOrder($current_backlog_tracker, $hierarchy_factory);
+            $plannings = $this->getPlanningTrackersInRightOrder($user, $current_backlog_tracker, $hierarchy_factory);
             if (! $plannings) {
                 $current_backlog_tracker = $current_backlog_tracker->getParent();
                 continue;
@@ -57,9 +56,9 @@ public function getNearestPlanningTracker(Tracker $backlog_tracker, Tracker_Hier
         return $nearest_planning_tracker;
     }
 
-    private function getPlanningTrackersInRightOrder(Tracker $backlog_tracker, Tracker_HierarchyFactory $hierarchy_factory)
+    private function getPlanningTrackersInRightOrder(PFUser $user, Tracker $backlog_tracker, Tracker_HierarchyFactory $hierarchy_factory)
     {
-        $planning_trackers = $this->planning_factory->getPlanningsByBacklogTracker($backlog_tracker);
+        $planning_trackers = $this->planning_factory->getPlanningsByBacklogTracker($user, $backlog_tracker);
 
         $trackers_ids = $this->getAllPlanningTrackersIds($planning_trackers);
         $trackers_ids = $this->sortPlanningTrackersIdsUsingHierarchy($trackers_ids, $hierarchy_factory);
diff --git a/plugins/agiledashboard/include/Planning/PlanningFactory.class.php b/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
index 70d2830e970..28fc3cc1da7 100644
--- a/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
+++ b/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
@@ -19,8 +19,14 @@
  */
 
 use Tuleap\AgileDashboard\Planning\PlanningDao;
+use Tuleap\AgileDashboard\Planning\PlanningTrackerNotFoundFault;
+use Tuleap\AgileDashboard\Planning\PlanningTrackerNotReadableFault;
 use Tuleap\AgileDashboard\Planning\RetrievePlannings;
 use Tuleap\AgileDashboard\Planning\RetrieveRootPlanning;
+use Tuleap\NeverThrow\Err;
+use Tuleap\NeverThrow\Fault;
+use Tuleap\NeverThrow\Ok;
+use Tuleap\NeverThrow\Result;
 
 class PlanningFactory implements RetrievePlannings, RetrieveRootPlanning
 {
@@ -140,7 +146,12 @@ public function getPlannings(PFUser $user, $group_id)
         foreach ($this->dao->searchByProjectId($group_id) as $row) {
             $tracker = $this->tracker_factory->getTrackerById($row['planning_tracker_id']);
             if ($tracker && $tracker->userCanView($user)) {
-                $plannings[] = $this->getPlanningFromRow($user, $row);
+                $this->getPlanningFromRow($user, $row)
+                    ->andThen(function (Planning $planning) use (&$plannings) {
+                        $plannings[] = $planning;
+
+                        return Result::ok(null);
+                    });
             }
         }
         if ($plannings) {
@@ -168,7 +179,7 @@ public function getVirtualTopPlanning(PFUser $user, $group_id)
         $backlog_tracker_ids = $first_planning->getBacklogTrackersIds();
 
         $planning_tracker = $this->tracker_factory->getTrackerById($planning_tracker_id);
-        if ($planning_tracker === null) {
+        if ($planning_tracker === null || ! $planning_tracker->userCanView($user)) {
             throw new RuntimeException('Tracker does not exist');
         }
 
@@ -341,10 +352,13 @@ public function getPlanning(PFUser $user, $planning_id): ?Planning
             return null;
         }
 
-        return $this->getPlanningFromRow($user, $planning);
+        return $this->getPlanningFromRow($user, $planning)->unwrapOr(null);
     }
 
-    private function getPlanningFromRow(PFUser $user, array $row): Planning
+    /**
+     * @return Ok<Planning>|Err<Fault>
+     */
+    private function getPlanningFromRow(PFUser $user, array $row): Ok|Err
     {
         $planning = new Planning(
             $row['id'],
@@ -356,9 +370,9 @@ private function getPlanningFromRow(PFUser $user, array $row): Planning
             $row['planning_tracker_id']
         );
         $planning->setBacklogTrackers($this->getBacklogTrackers($user, $planning));
-        $planning->setPlanningTracker($this->getPlanningTracker($planning));
 
-        return $planning;
+        return $this->getPlanningTracker($user, $planning)
+            ->andThen(fn (Tracker $tracker) => Result::ok($planning->setPlanningTracker($tracker)));
     }
 
     /**
@@ -388,9 +402,15 @@ public function getPlanningByPlanningTracker(PFUser $user, Tracker $planning_tra
             [],
             $planning['planning_tracker_id']
         );
-        $returned->setPlanningTracker($this->getPlanningTracker($returned));
         $returned->setBacklogTrackers($this->getBacklogTrackers($user, $returned));
-        $this->instances[$planning_tracker->getId()] = $returned;
+        $returned = $this->getPlanningTracker($user, $returned)
+            ->andThen(fn (Tracker $tracker) => Result::ok($returned->setPlanningTracker($tracker)))
+            ->unwrapOr(null);
+
+        if ($returned !== null) {
+            $this->instances[$planning_tracker->getId()] = $returned;
+        }
+
         return $returned;
     }
 
@@ -412,7 +432,7 @@ public function isTrackerIdUsedInAPlanning(int $tracker_id): bool
      *
      * @return Planning[]
      */
-    public function getPlanningsByBacklogTracker(Tracker $backlog_tracker): array
+    public function getPlanningsByBacklogTracker(PFUser $user, Tracker $backlog_tracker): array
     {
         $plannings = [];
         foreach ($this->dao->searchByBacklogTrackerId($backlog_tracker->getId()) as $planning) {
@@ -426,8 +446,13 @@ public function getPlanningsByBacklogTracker(Tracker $backlog_tracker): array
                 $planning['planning_tracker_id']
             );
             $p->setBacklogTrackers([$backlog_tracker]);
-            $p->setPlanningTracker($this->getPlanningTracker($p));
-            $plannings[] = $p;
+            $this->getPlanningTracker($user, $p)
+                ->andThen(function (Tracker $tracker) use ($p, &$plannings) {
+                    $p->setPlanningTracker($tracker);
+                    $plannings[] = $p;
+
+                    return Result::ok(null);
+                });
         }
         return $plannings;
     }
@@ -473,15 +498,20 @@ public function getBacklogTrackersIds($planning_id)
     }
 
     /**
-     * @return Tracker
+     * @return Ok<Tracker>|Err<Fault>
      */
-    private function getPlanningTracker(Planning $planning)
+    private function getPlanningTracker(PFUser $user, Planning $planning): Ok|Err
     {
         $tracker = $this->tracker_factory->getTrackerById($planning->getPlanningTrackerId());
         if ($tracker === null) {
-            throw new RuntimeException('Tracker does not exist ' . $planning->getPlanningTrackerId() . ' for planning ' . $planning->getId());
+            return Result::err(PlanningTrackerNotFoundFault::build($planning));
         }
-        return $tracker;
+
+        if (! $tracker->userCanView($user)) {
+            return Result::err(PlanningTrackerNotReadableFault::build($planning));
+        }
+
+        return Result::ok($tracker);
     }
 
     /**
diff --git a/plugins/agiledashboard/include/Planning/PlanningTrackerNotFoundFault.php b/plugins/agiledashboard/include/Planning/PlanningTrackerNotFoundFault.php
new file mode 100644
index 00000000000..698ff1ca818
--- /dev/null
+++ b/plugins/agiledashboard/include/Planning/PlanningTrackerNotFoundFault.php
@@ -0,0 +1,43 @@
+<?php
+/**
+ * Copyright (c) Enalean, 2024 - Present. All Rights Reserved.
+ *
+ * This file is a part of Tuleap.
+ *
+ * Tuleap is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Tuleap is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+declare(strict_types=1);
+
+namespace Tuleap\AgileDashboard\Planning;
+
+use Planning;
+use Tuleap\NeverThrow\Fault;
+
+/**
+ * @psalm-immutable
+ */
+final readonly class PlanningTrackerNotFoundFault extends Fault
+{
+    public static function build(Planning $planning): Fault
+    {
+        return new self(
+            sprintf(
+                'Tracker %s does not exist for planning %s',
+                $planning->getPlanningTrackerId(),
+                $planning->getId(),
+            )
+        );
+    }
+}
diff --git a/plugins/agiledashboard/include/Planning/PlanningTrackerNotReadableFault.php b/plugins/agiledashboard/include/Planning/PlanningTrackerNotReadableFault.php
new file mode 100644
index 00000000000..0ab8332e573
--- /dev/null
+++ b/plugins/agiledashboard/include/Planning/PlanningTrackerNotReadableFault.php
@@ -0,0 +1,42 @@
+<?php
+/**
+ * Copyright (c) Enalean, 2024 - Present. All Rights Reserved.
+ *
+ * This file is a part of Tuleap.
+ *
+ * Tuleap is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Tuleap is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+declare(strict_types=1);
+
+namespace Tuleap\AgileDashboard\Planning;
+
+use Planning;
+use Tuleap\NeverThrow\Fault;
+
+/**
+ * @psalm-immutable
+ */
+final readonly class PlanningTrackerNotReadableFault extends Fault
+{
+    public static function build(Planning $planning): Fault
+    {
+        return new self(
+            sprintf(
+                'Planning tracker is not readable for planning %s',
+                $planning->getId(),
+            )
+        );
+    }
+}
diff --git a/plugins/agiledashboard/include/agiledashboardPlugin.php b/plugins/agiledashboard/include/agiledashboardPlugin.php
index b257e8390fe..6319baae4da 100644
--- a/plugins/agiledashboard/include/agiledashboardPlugin.php
+++ b/plugins/agiledashboard/include/agiledashboardPlugin.php
@@ -470,6 +470,7 @@ public function trackerReportProcessAdditionalQuery(TrackerReportProcessAddition
         $backlog_tracker = $event->getTracker();
 
         $nearest_planning_tracker = (new AgileDashboard_Planning_NearestPlanningTrackerProvider($this->getPlanningFactory()))->getNearestPlanningTracker(
+            $event->getUser(),
             $backlog_tracker,
             Tracker_HierarchyFactory::instance(),
         );
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProviderTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProviderTest.php
index f1e00524fbe..fc6cedddb9c 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProviderTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProviderTest.php
@@ -114,7 +114,7 @@ protected function setUp(): void
     public function testItReturnsEmptyArrayWhenNoNearestPlanningTracker(): void
     {
         $this->nearest_planning_tracker_provider->method('getNearestPlanningTracker')
-            ->with($this->task_tracker, $this->hierarchy_factory)
+            ->with($this->user, $this->task_tracker, $this->hierarchy_factory)
             ->willReturn(null);
 
         $this->dao->expects(self::never())->method('getAllMilestoneByTrackers');
@@ -125,7 +125,7 @@ public function testItReturnsEmptyArrayWhenNoNearestPlanningTracker(): void
     public function testItDoesNotSearchOnProductTrackerSinceThereIsNoPlanning(): void
     {
         $this->nearest_planning_tracker_provider->method('getNearestPlanningTracker')
-            ->with($this->task_tracker, $this->hierarchy_factory)->willReturn($this->sprint_tracker);
+            ->with($this->user, $this->task_tracker, $this->hierarchy_factory)->willReturn($this->sprint_tracker);
 
         $this->release_tracker->method('userCanView')->with($this->user)->willReturn(true);
         $this->sprint_tracker->method('userCanView')->with($this->user)->willReturn(true);
@@ -140,7 +140,7 @@ public function testItDoesNotSearchOnProductTrackerSinceThereIsNoPlanning(): voi
     public function testItDoesNotSearchOnMilestonesUserCantView(): void
     {
         $this->nearest_planning_tracker_provider->method('getNearestPlanningTracker')
-            ->with($this->task_tracker, $this->hierarchy_factory)
+            ->with($this->user, $this->task_tracker, $this->hierarchy_factory)
             ->willReturn($this->sprint_tracker);
 
         $this->release_tracker->method('userCanView')->with($this->user)->willReturn(false);
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/NearestPlanningTrackerProviderTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/NearestPlanningTrackerProviderTest.php
index 65a2bb01ec2..86d62ca0d78 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/NearestPlanningTrackerProviderTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/NearestPlanningTrackerProviderTest.php
@@ -30,6 +30,7 @@
 use Tracker_Hierarchy;
 use Tracker_HierarchyFactory;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
 
@@ -59,7 +60,7 @@ protected function setUp(): void
 
         $planning_factory = $this->createMock(PlanningFactory::class);
         $planning_factory->method('getPlanningsByBacklogTracker')
-            ->will(self::returnCallback(fn(Tracker $tracker) => match ($tracker) {
+            ->will(self::returnCallback(fn(\PFUser $user, Tracker $tracker) => match ($tracker) {
                 $this->task_tracker,
                 $this->epic_tracker => [],
                 $story_tracker      => [$sprint_planning],
@@ -71,11 +72,11 @@ protected function setUp(): void
 
     public function testItRetrievesTheNearestPlanningTracker(): void
     {
-        self::assertEquals($this->sprint_tracker, $this->provider->getNearestPlanningTracker($this->task_tracker, $this->hierarchy_factory));
+        self::assertEquals($this->sprint_tracker, $this->provider->getNearestPlanningTracker(UserTestBuilder::buildWithDefaults(), $this->task_tracker, $this->hierarchy_factory));
     }
 
     public function testItReturnsNullWhenNoPlanningMatches(): void
     {
-        self::assertNull($this->provider->getNearestPlanningTracker($this->epic_tracker, $this->hierarchy_factory));
+        self::assertNull($this->provider->getNearestPlanningTracker(UserTestBuilder::buildWithDefaults(), $this->epic_tracker, $this->hierarchy_factory));
     }
 }
diff --git a/tests/rest/tests/CardsTest.php b/tests/rest/tests/CardsTest.php
index 7179ee1880a..0d5407895be 100644
--- a/tests/rest/tests/CardsTest.php
+++ b/tests/rest/tests/CardsTest.php
@@ -118,7 +118,7 @@ public function testPUTCardsForReadOnlyUser(): void
             ),
             REST_TestDataBuilder::TEST_BOT_USER_NAME
         );
-        $this->assertEquals(403, $response_put->getStatusCode());
+        $this->assertEquals(404, $response_put->getStatusCode());
     }
 
     private function findCardInCardwall($cardwall, $id)
