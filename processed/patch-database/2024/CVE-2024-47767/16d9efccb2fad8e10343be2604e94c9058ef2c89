diff --git a/plugins/agiledashboard/include/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandler.php b/plugins/agiledashboard/include/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandler.php
index 185d4a348fa..683734d6320 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandler.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandler.php
@@ -110,7 +110,7 @@ public function process(
             return;
         }
 
-        $planning = $this->planning_factory->getPlanning($requested_planning['planning_id']);
+        $planning = $this->planning_factory->getPlanning($request->getCurrentUser(), $requested_planning['planning_id']);
 
         if ($redirect->stayInTracker()) {
             $this->saveToRequestForFutureRedirection($planning, $last_milestone_artifact, $redirect, $request);
diff --git a/plugins/agiledashboard/include/AgileDashboard/BacklogItem/PaginatedBacklogItemsRepresentationsBuilder.class.php b/plugins/agiledashboard/include/AgileDashboard/BacklogItem/PaginatedBacklogItemsRepresentationsBuilder.class.php
index ab84b61b0cb..13eefaed34b 100644
--- a/plugins/agiledashboard/include/AgileDashboard/BacklogItem/PaginatedBacklogItemsRepresentationsBuilder.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/BacklogItem/PaginatedBacklogItemsRepresentationsBuilder.class.php
@@ -57,7 +57,7 @@ public function __construct(
      */
     public function getPaginatedBacklogItemsRepresentationsForMilestone(PFUser $user, Planning_Milestone $milestone, ISearchOnStatus $criterion, $limit, $offset)
     {
-        $backlog = $this->backlog_factory->getBacklog($milestone, $limit, $offset);
+        $backlog = $this->backlog_factory->getBacklog($user, $milestone, $limit, $offset);
 
         return $this->getBacklogItemsRepresentations($user, $milestone, $backlog, $criterion, $limit, $offset);
     }
diff --git a/plugins/agiledashboard/include/AgileDashboard/FormElement/MessageFetcher.php b/plugins/agiledashboard/include/AgileDashboard/FormElement/MessageFetcher.php
index 5a7ada58530..2b8a8fa5894 100644
--- a/plugins/agiledashboard/include/AgileDashboard/FormElement/MessageFetcher.php
+++ b/plugins/agiledashboard/include/AgileDashboard/FormElement/MessageFetcher.php
@@ -56,11 +56,11 @@ public function __construct(
     /**
      * @return array
      */
-    public function getWarningsRelatedToPlanningConfiguration(Tracker $tracker)
+    public function getWarningsRelatedToPlanningConfiguration(\PFUser $user, Tracker $tracker)
     {
         $purifier = Codendi_HTMLPurifier::instance();
         $warnings = [];
-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);
 
         if (! $planning) {
             $warnings[] = '<li>' . dgettext('tuleap-agiledashboard', 'This tracker is not a planning tracker') . '</li>';
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/Backlog.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/Backlog.php
index cd9bbea17f5..b64741f112f 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/Backlog.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/Backlog.php
@@ -75,7 +75,10 @@ public function __construct(
         );
     }
 
-    public function getDescendantTrackers()
+    /**
+     * @return Tracker[]
+     */
+    public function getDescendantTrackers(): array
     {
         return $this->descendant_trackers;
     }
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/BacklogFactory.class.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/BacklogFactory.class.php
index 2efd345bfa0..528638d4442 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/BacklogFactory.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/Backlog/BacklogFactory.class.php
@@ -49,14 +49,11 @@ public function __construct(
         $this->planning_factory = $planning_factory;
     }
 
-    /**
-     * @return AgileDashboard_Milestone_Backlog_Backlog
-     */
-    public function getBacklog(Planning_Milestone $milestone, $limit = null, $offset = null)
+    public function getBacklog(PFUser $user, Planning_Milestone $milestone, $limit = null, $offset = null): \AgileDashboard_Milestone_Backlog_Backlog
     {
         $backlog_trackers_children_can_manage = [];
-        $first_child_backlog_trackers         = $this->getFirstChildBacklogTracker($milestone);
-        if ($first_child_backlog_trackers) {
+        $first_child_backlog_trackers         = $this->getFirstChildBacklogTracker($user, $milestone);
+        if ($first_child_backlog_trackers !== null) {
             $backlog_trackers_children_can_manage = array_merge($backlog_trackers_children_can_manage, $first_child_backlog_trackers);
         } else {
             $backlog_trackers_children_can_manage = array_merge($backlog_trackers_children_can_manage, $milestone->getPlanning()->getBacklogTrackers());
@@ -91,12 +88,15 @@ private function instantiateBacklog(
         );
     }
 
-    private function getFirstChildBacklogTracker(Planning_Milestone $milestone)
+    /**
+     * @return Tracker[]|null
+     */
+    private function getFirstChildBacklogTracker(PFUser $user, Planning_Milestone $milestone): ?array
     {
         $backlog_tracker_children = $milestone->getPlanning()->getPlanningTracker()->getChildren();
         if ($backlog_tracker_children) {
             $first_child_tracker  = current($backlog_tracker_children);
-            $first_child_planning = $this->planning_factory->getPlanningByPlanningTracker($first_child_tracker);
+            $first_child_planning = $this->planning_factory->getPlanningByPlanningTracker($user, $first_child_tracker);
             if ($first_child_planning) {
                 return $first_child_planning->getBacklogTrackers();
             }
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/HeaderOptionsProvider.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/HeaderOptionsProvider.php
index 55eb02db19f..c2a78bcf91b 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/HeaderOptionsProvider.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/HeaderOptionsProvider.php
@@ -85,7 +85,7 @@ private function createCurrentContextSectionWithBacklogTrackers(
 
         return $this->createCurrentContextSectionFromTrackers(
             $milestone,
-            $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers(),
+            $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers(),
             $user,
             (string) $milestone->getArtifactTitle(),
             $current_context_section,
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneParentLinker.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneParentLinker.php
index fc0f99c3fd3..3e7b6cc2bfd 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneParentLinker.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneParentLinker.php
@@ -52,7 +52,7 @@ public function linkToMilestoneParent(Planning_Milestone $milestone, PFUser $use
 
         $parent_milestone_artifact = $parent_milestone->getArtifact();
 
-        if (! $this->parentMilestoneHasItemTrackerInItsBacklogTracker($parent_milestone, $artifact_added)) {
+        if (! $this->parentMilestoneHasItemTrackerInItsBacklogTracker($user, $parent_milestone, $artifact_added)) {
             return;
         }
 
@@ -68,19 +68,20 @@ public function linkToMilestoneParent(Planning_Milestone $milestone, PFUser $use
         }
     }
 
-    private function getBacklogTrackers(Planning_Milestone $milestone)
+    /**
+     * @return Tracker[]
+     */
+    private function getBacklogTrackers(PFUser $user, Planning_Milestone $milestone): array
     {
-        return $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();
+        return $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();
     }
 
-    /**
-     * @return bool
-     */
     private function parentMilestoneHasItemTrackerInItsBacklogTracker(
+        PFUser $user,
         Planning_Milestone $parent_milestone,
         Artifact $artifact_added,
-    ) {
-        $backlog_trackers = $this->getBacklogTrackers($parent_milestone);
+    ): bool {
+        $backlog_trackers = $this->getBacklogTrackers($user, $parent_milestone);
 
         foreach ($backlog_trackers as $backlog_tracker) {
             if ($backlog_tracker->getId() === $artifact_added->getTrackerId()) {
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
index 27e6f6ab974..6a4be6d8d77 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/MilestoneReportCriterionOptionsProvider.class.php
@@ -65,14 +65,14 @@ public function __construct(
      *
      * @return string[]
      */
-    public function getSelectboxOptions(Tracker $backlog_tracker, $selected_milestone_id, PFUser $user)
+    public function getSelectboxOptions(Tracker $backlog_tracker, $selected_milestone_id, PFUser $user): array
     {
         $nearest_planning_tracker = $this->nearest_planning_tracker_provider->getNearestPlanningTracker($backlog_tracker, $this->hierarchy_factory);
         if (! $nearest_planning_tracker) {
             return [];
         }
 
-        $planning_trackers_ids = $this->getPlanningTrackersIds($nearest_planning_tracker);
+        $planning_trackers_ids = $this->getPlanningTrackersIds($user, $nearest_planning_tracker);
 
         return $this->formatAllMilestonesAsSelectboxOptions($planning_trackers_ids, $selected_milestone_id, $backlog_tracker, $user);
     }
@@ -153,9 +153,9 @@ private function addTopBacklogPlanningEntry($selected_milestone_id, Tracker $bac
     }
 
     /** @return int[] */
-    private function getPlanningTrackersIds(Tracker $nearest_planning_tracker)
+    private function getPlanningTrackersIds(PFUser $user, Tracker $nearest_planning_tracker): array
     {
-        $parents = $this->getParentsWithPlanningAndOrderedFromTopToBottom($nearest_planning_tracker);
+        $parents = $this->getParentsWithPlanningAndOrderedFromTopToBottom($user, $nearest_planning_tracker);
 
         return array_map(
             static function (Tracker $tracker) {
@@ -166,11 +166,11 @@ static function (Tracker $tracker) {
     }
 
     /** @return Tracker[] */
-    private function keepsTrackersUntilThereIsNoPlanning(array $list_of_trackers)
+    private function keepsTrackersUntilThereIsNoPlanning(PFUser $user, array $list_of_trackers): array
     {
         $trackers = [];
         foreach ($list_of_trackers as $tracker) {
-            if (! $this->planning_factory->getPlanningByPlanningTracker($tracker)) {
+            if (! $this->planning_factory->getPlanningByPlanningTracker($user, $tracker)) {
                 break;
             }
             $trackers[] = $tracker;
@@ -179,10 +179,10 @@ private function keepsTrackersUntilThereIsNoPlanning(array $list_of_trackers)
     }
 
     /** @return Tracker[] */
-    private function getParentsWithPlanningAndOrderedFromTopToBottom(Tracker $nearest_planning_tracker)
+    private function getParentsWithPlanningAndOrderedFromTopToBottom(PFUser $user, Tracker $nearest_planning_tracker): array
     {
         $parents   = $this->hierarchy_factory->getAllParents($nearest_planning_tracker);
-        $parents   = $this->keepsTrackersUntilThereIsNoPlanning($parents);
+        $parents   = $this->keepsTrackersUntilThereIsNoPlanning($user, $parents);
         $parents   = array_reverse($parents);
         $parents[] = $nearest_planning_tracker;
 
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Details/DetailsPresenterBuilder.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Details/DetailsPresenterBuilder.php
index bbcfa7beb93..0c205dd15c6 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Details/DetailsPresenterBuilder.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Details/DetailsPresenterBuilder.php
@@ -64,7 +64,7 @@ public function __construct(
     public function getMilestoneDetailsPresenter(PFUser $user, Planning_Milestone $milestone)
     {
         $redirect_parameter = new Planning_MilestoneRedirectParameter();
-        $backlog            = $this->backlog_factory->getBacklog($milestone);
+        $backlog            = $this->backlog_factory->getBacklog($user, $milestone);
         $redirect_to_self   = $redirect_parameter->getPlanningRedirectToSelf($milestone, DetailsPaneInfo::IDENTIFIER);
 
         $descendant_trackers = $backlog->getDescendantTrackers();
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinder.class.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinder.class.php
index ecec5001a2f..b39589949d6 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinder.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinder.class.php
@@ -44,7 +44,7 @@ public function __construct(
         $this->planning_factory  = $planning_factory;
     }
 
-    public function findFirstSubmilestoneTracker(Planning_Milestone $milestone)
+    public function findFirstSubmilestoneTracker(PFUser $user, Planning_Milestone $milestone)
     {
         $tracker_id = $milestone->getTrackerId();
         if (is_array($tracker_id)) {
@@ -59,7 +59,7 @@ public function findFirstSubmilestoneTracker(Planning_Milestone $milestone)
         $milestone_backlog_trackers = $milestone->getPlanning()->getBacklogTrackers();
         foreach ($milestone_backlog_trackers as $milestone_backlog_tracker) {
             foreach ($children as $tracker) {
-                $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+                $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);
 
                 if (! $planning) {
                     continue;
diff --git a/plugins/agiledashboard/include/AgileDashboard/Milestone/Sidebar/PromotedMilestoneBuilder.php b/plugins/agiledashboard/include/AgileDashboard/Milestone/Sidebar/PromotedMilestoneBuilder.php
index 5a71ae28975..3c7a8395784 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Milestone/Sidebar/PromotedMilestoneBuilder.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Milestone/Sidebar/PromotedMilestoneBuilder.php
@@ -75,7 +75,7 @@ public function build(Artifact $milestone_artifact, PFUser $user, \Project $proj
             return Option::nothing(Planning_ArtifactMilestone::class);
         }
 
-        $planning = $this->planning_factory->getPlanningByPlanningTracker($milestone_artifact->getTracker());
+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $milestone_artifact->getTracker());
         if (! $planning) {
             return Option::nothing(Planning_ArtifactMilestone::class);
         }
diff --git a/plugins/agiledashboard/include/AgileDashboard/PaneInfoFactory.class.php b/plugins/agiledashboard/include/AgileDashboard/PaneInfoFactory.class.php
index c147fe9c6ef..5f6263bcedd 100644
--- a/plugins/agiledashboard/include/AgileDashboard/PaneInfoFactory.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/PaneInfoFactory.class.php
@@ -40,9 +40,9 @@ public function getDetailsPaneInfo(Planning_Milestone $milestone)
         return new DetailsPaneInfo($milestone);
     }
 
-    public function getPlanningV2PaneInfo(Planning_Milestone $milestone)
+    public function getPlanningV2PaneInfo(PFUser $user, Planning_Milestone $milestone)
     {
-        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);
+        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);
         if (! $submilestone_tracker) {
             return;
         }
diff --git a/plugins/agiledashboard/include/AgileDashboard/Planning/HeaderOptionsForPlanningProvider.php b/plugins/agiledashboard/include/AgileDashboard/Planning/HeaderOptionsForPlanningProvider.php
index c034ae4343f..ab6ad67979d 100644
--- a/plugins/agiledashboard/include/AgileDashboard/Planning/HeaderOptionsForPlanningProvider.php
+++ b/plugins/agiledashboard/include/AgileDashboard/Planning/HeaderOptionsForPlanningProvider.php
@@ -80,7 +80,7 @@ private function addPlanningOptionsForRegularMilestone(
         PFUser $user,
         Option $current_context_section,
     ): Option {
-        $tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);
+        $tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);
         if (! $tracker || ! $tracker->userCanSubmitArtifact($user)) {
             return $current_context_section;
         }
diff --git a/plugins/agiledashboard/include/AgileDashboard/REST/v1/Milestone/MilestoneRepresentationBuilder.php b/plugins/agiledashboard/include/AgileDashboard/REST/v1/Milestone/MilestoneRepresentationBuilder.php
index 7fac7b02b43..c118cd4e3b8 100644
--- a/plugins/agiledashboard/include/AgileDashboard/REST/v1/Milestone/MilestoneRepresentationBuilder.php
+++ b/plugins/agiledashboard/include/AgileDashboard/REST/v1/Milestone/MilestoneRepresentationBuilder.php
@@ -94,7 +94,7 @@ public function getMilestoneRepresentation(
             $status_count = $this->milestone_factory->getMilestoneStatusCount($user, $milestone);
         }
 
-        $backlog_trackers = $this->getBacklogTrackers($milestone);
+        $backlog_trackers = $this->getBacklogTrackers($user, $milestone);
 
 
         $pane_info_collector = new \Tuleap\AgileDashboard\Milestone\Pane\PaneInfoCollector(
@@ -106,7 +106,7 @@ public function getMilestoneRepresentation(
         );
         $this->event_manager->processEvent($pane_info_collector);
 
-        $submilestone_tracker = $this->sub_milestone_finder->findFirstSubmilestoneTracker($milestone);
+        $submilestone_tracker = $this->sub_milestone_finder->findFirstSubmilestoneTracker($user, $milestone);
 
         $original_project_collector = new OriginalProjectCollector($milestone->getArtifact(), $user);
         $this->event_manager->processEvent($original_project_collector);
@@ -118,7 +118,7 @@ public function getMilestoneRepresentation(
             $this->parent_tracker_retriever->getCreatableParentTrackers($milestone, $user, $backlog_trackers),
             $this->milestone_factory->userCanChangePrioritiesInMilestone($milestone, $user),
             $representation_type,
-            $this->getSubPlanning($milestone),
+            $this->getSubPlanning($user, $milestone),
             $pane_info_collector,
             $submilestone_tracker,
             $original_project_collector,
@@ -163,15 +163,15 @@ public function buildRepresentationsFromCollection(
     /**
      * @return \Tracker[]
      */
-    private function getBacklogTrackers(\Planning_Milestone $milestone): array
+    private function getBacklogTrackers(\PFUser $user, \Planning_Milestone $milestone): array
     {
-        return $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();
+        return $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();
     }
 
-    private function getSubPlanning(\Planning_Milestone $milestone): ?\Planning
+    private function getSubPlanning(\PFUser $user, \Planning_Milestone $milestone): ?\Planning
     {
         $planning = $milestone->getPlanning();
 
-        return $this->planning_factory->getChildrenPlanning($planning);
+        return $this->planning_factory->getChildrenPlanning($user, $planning);
     }
 }
diff --git a/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResource.class.php b/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResource.class.php
index d01af692d5a..76f74e6434d 100644
--- a/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResource.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResource.class.php
@@ -1025,7 +1025,7 @@ protected function postBacklog($id, BacklogItemReference $item)
         $item_id  = $item->getArtifactId();
         $artifact = $this->getBacklogItemAsArtifact($user, $item_id);
 
-        $allowed_trackers = $this->backlog_factory->getBacklog($milestone)->getDescendantTrackers();
+        $allowed_trackers = $this->backlog_factory->getBacklog($user, $milestone)->getDescendantTrackers();
         if (! $this->milestone_validator->canBacklogItemBeAddedToMilestone($artifact, $allowed_trackers)) {
             throw new RestException(400, "Item of type '" . $artifact->getTracker()->getName() . "' cannot be added.");
         }
diff --git a/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResourceValidator.class.php b/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResourceValidator.class.php
index 2d98b9ccf99..0ade19ae210 100644
--- a/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResourceValidator.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/REST/v1/MilestoneResourceValidator.class.php
@@ -107,7 +107,7 @@ private function validateArtifactsForMilestoneContent(array $ids, Planning_Miles
             $backlog = $this->backlog_factory->getSelfBacklog($milestone);
 
             if ($milestone->getParent()) {
-                $open_unplanned = $this->backlog_item_collection_factory->getUnplannedOpenCollection($user, $milestone->getParent(), $this->backlog_factory->getBacklog($milestone->getParent()), false);
+                $open_unplanned = $this->backlog_item_collection_factory->getUnplannedOpenCollection($user, $milestone->getParent(), $this->backlog_factory->getBacklog($user, $milestone->getParent()), false);
             } else {
                 $top_milestone      = $this->milestone_factory->getVirtualTopMilestone($user, $milestone->getProject());
                 $backlog_unassigned = $this->backlog_factory->getSelfBacklog($top_milestone);
@@ -205,7 +205,7 @@ public function validateArtifactIdsAreInUnplannedMilestone(array $ids, Planning_
     {
         $this->validateIdsAreUnique($ids);
 
-        $unplanned = $this->backlog_item_collection_factory->getUnplannedCollection($user, $milestone, $this->backlog_factory->getBacklog($milestone), false);
+        $unplanned = $this->backlog_item_collection_factory->getUnplannedCollection($user, $milestone, $this->backlog_factory->getBacklog($user, $milestone), false);
 
         foreach ($ids as $id) {
             if (! $unplanned->containsId($id)) {
@@ -238,7 +238,7 @@ public function validateArtifactIdsCanBeAddedToBacklog(array $to_add, Planning_M
 
         $ids_to_add = $this->filterArtifactIdsAlreadyInBacklog($to_add, $milestone, $user);
 
-        $indexed_children_backlog_trackers = $this->getIndexedChildrenBacklogTrackers($milestone);
+        $indexed_children_backlog_trackers = $this->getIndexedChildrenBacklogTrackers($user, $milestone);
 
         foreach ($ids_to_add as $id) {
             $artifact = $this->tracker_artifact_factory->getArtifactById($id);
@@ -262,10 +262,10 @@ private function filterArtifactIdsAlreadyInBacklog(array $ids, Planning_Mileston
         return $to_add;
     }
 
-    private function getIndexedChildrenBacklogTrackers(Planning_Milestone $milestone)
+    private function getIndexedChildrenBacklogTrackers(PFUser $user, Planning_Milestone $milestone): array
     {
         $children_backlog_trackers = [];
-        $children_planning         = $this->planning_factory->getChildrenPlanning($milestone->getPlanning());
+        $children_planning         = $this->planning_factory->getChildrenPlanning($user, $milestone->getPlanning());
         if ($children_planning) {
             foreach ($children_planning->getBacklogTrackersIds() as $id) {
                 $children_backlog_trackers[$id] = true;
@@ -289,7 +289,7 @@ private function getMilestoneBacklogItems(PFUser $user, $milestone)
         return $this->backlog_item_collection_factory->getUnplannedOpenCollection(
             $user,
             $milestone,
-            $this->backlog_factory->getBacklog($milestone),
+            $this->backlog_factory->getBacklog($user, $milestone),
             false
         );
     }
diff --git a/plugins/agiledashboard/include/AgileDashboard/REST/v1/PlanningResource.class.php b/plugins/agiledashboard/include/AgileDashboard/REST/v1/PlanningResource.class.php
index 597b5b898c2..9d56d78df72 100644
--- a/plugins/agiledashboard/include/AgileDashboard/REST/v1/PlanningResource.class.php
+++ b/plugins/agiledashboard/include/AgileDashboard/REST/v1/PlanningResource.class.php
@@ -82,16 +82,13 @@ public function optionsForMilestones($id)
     }
 
     /**
-     * @param int $id
-     *
-     * @return Planning
      * @throws RestException 403
      * @throws RestException 404
      */
-    private function getPlanning($id)
+    private function getPlanning(int $id): Planning
     {
-        $planning = PlanningFactory::build()->getPlanning($id);
         $user     = $this->getCurrentUser();
+        $planning = PlanningFactory::build()->getPlanning($user, $id);
 
         if (! $planning) {
             throw new RestException(404, 'Planning not found');
diff --git a/plugins/agiledashboard/include/AgileDashboard/SequenceIdManager.php b/plugins/agiledashboard/include/AgileDashboard/SequenceIdManager.php
index 2964c519188..a7990b4e534 100644
--- a/plugins/agiledashboard/include/AgileDashboard/SequenceIdManager.php
+++ b/plugins/agiledashboard/include/AgileDashboard/SequenceIdManager.php
@@ -65,7 +65,7 @@ private function loadBacklogForMilestoneIfNeeded(PFUser $user, Planning_Mileston
 
         if (! isset($this->backlog_item_ids[$milestone->getArtifactId()])) {
             $this->backlog_item_ids[$milestone->getArtifactId() ?? 0] = [];
-            $backlog                                                  = $this->backlog_factory->getBacklog($milestone);
+            $backlog                                                  = $this->backlog_factory->getBacklog($user, $milestone);
             $backlog_artifacts                                        = $backlog->getArtifacts($user);
 
             $this->storeBacklogArtifacts($milestone->getArtifactId(), $backlog_artifacts);
diff --git a/plugins/agiledashboard/include/Planning/ArtifactLinker.class.php b/plugins/agiledashboard/include/Planning/ArtifactLinker.class.php
index 5d48042d639..c76dcf6f225 100644
--- a/plugins/agiledashboard/include/Planning/ArtifactLinker.class.php
+++ b/plugins/agiledashboard/include/Planning/ArtifactLinker.class.php
@@ -93,7 +93,7 @@ private function linkWithMilestoneArtifact(
         $last_ancestor = $source_artifact;
         if ($source_artifact) {
             foreach ($source_artifact->getAllAncestors($user) as $ancestor) {
-                $planning = $this->planning_factory->getPlanningByPlanningTracker($ancestor->getTracker());
+                $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $ancestor->getTracker());
                 if ($planning && in_array($artifact->getTracker(), $planning->getBacklogTrackers())) {
                     $ancestor->linkArtifact($artifact->getId(), $user);
                     $last_ancestor = $ancestor;
diff --git a/plugins/agiledashboard/include/Planning/MilestoneController.class.php b/plugins/agiledashboard/include/Planning/MilestoneController.class.php
index b4c52802d0a..ae53f1a15b9 100644
--- a/plugins/agiledashboard/include/Planning/MilestoneController.class.php
+++ b/plugins/agiledashboard/include/Planning/MilestoneController.class.php
@@ -160,11 +160,11 @@ public function getBreadcrumbs()
     public function solveInconsistencies()
     {
         $milestone_artifact = Tracker_ArtifactFactory::instance()->getArtifactById($this->request->get('aid'));
-        $milestone          = $this->milestone_factory->getMilestoneFromArtifact($milestone_artifact);
+        $milestone          = $this->milestone_factory->getMilestoneFromArtifact($this->request->getCurrentUser(), $milestone_artifact);
         $artifact_ids       = $this->request->get('inconsistent-artifacts-ids');
         $extractor          = new AgileDashboard_PaneRedirectionExtractor();
 
-        if (! ($this->inconsistentArtifactsIdsAreValid($artifact_ids) && $milestone->solveInconsistencies($this->getCurrentUser(), $artifact_ids))) {
+        if (! $milestone || ! ($this->inconsistentArtifactsIdsAreValid($artifact_ids) && $milestone->solveInconsistencies($this->getCurrentUser(), $artifact_ids))) {
             $this->addFeedback(Feedback::ERROR, dgettext('tuleap-agiledashboard', 'An error occurred while trying to solve inconsistencies.'));
         }
 
diff --git a/plugins/agiledashboard/include/Planning/MilestoneFactory.class.php b/plugins/agiledashboard/include/Planning/MilestoneFactory.class.php
index c2a338e5428..a2ec08c0f85 100644
--- a/plugins/agiledashboard/include/Planning/MilestoneFactory.class.php
+++ b/plugins/agiledashboard/include/Planning/MilestoneFactory.class.php
@@ -167,7 +167,7 @@ public function getValidatedBareMilestoneByArtifactId(PFUser $user, $artifact_id
     public function getBareMilestoneByArtifact(PFUser $user, Artifact $artifact)
     {
         $tracker  = $artifact->getTracker();
-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);
         if ($planning) {
             return $this->getBareMilestoneByArtifactAndPlanning($user, $artifact, $planning);
         }
@@ -205,7 +205,7 @@ private function getBareMilestoneByArtifactAndPlanning(PFUser $user, Artifact $a
      */
     public function getBareMilestone(PFUser $user, Project $project, $planning_id, $artifact_id)
     {
-        $planning = $this->planning_factory->getPlanning($planning_id);
+        $planning = $this->planning_factory->getPlanning($user, $planning_id);
         if ($planning === null) {
             throw new NotFoundException($planning_id);
         }
@@ -520,7 +520,7 @@ private function convertDARToArrayOfMilestones(PFUser $user, Planning_Milestone
                 continue;
             }
 
-            $planning = $this->planning_factory->getPlanningByPlanningTracker($artifact->getTracker());
+            $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $artifact->getTracker());
             if (! $planning) {
                 continue;
             }
@@ -689,28 +689,10 @@ private function getAllMilestonesWithoutCaching(PFUser $user, Planning $planning
         return $milestones;
     }
 
-    /**
-     * Create a Milestone corresponding to given artifact and loads the artifacts planned for this milestone
-     *
-     *
-     * @return Planning_ArtifactMilestone
-     */
-    public function getMilestoneFromArtifactWithPlannedArtifacts(Artifact $artifact, PFUser $user)
-    {
-        $planned_artifacts = $this->getPlannedArtifacts($user, $artifact);
-        return $this->getMilestoneFromArtifact($artifact, $planned_artifacts);
-    }
-
-    /**
-     * Create a Milestone corresponding to given artifact
-     *
-     *
-     * @return Planning_ArtifactMilestone
-     */
-    public function getMilestoneFromArtifact(Artifact $artifact, ?TreeNode $planned_artifacts = null)
+    public function getMilestoneFromArtifact(PFUser $user, Artifact $artifact, ?TreeNode $planned_artifacts = null): ?Planning_ArtifactMilestone
     {
         $tracker  = $artifact->getTracker();
-        $planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+        $planning = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);
         if (! $planning) {
             return null;
         }
@@ -739,7 +721,7 @@ public function getMilestoneAncestors(PFUser $user, Planning_Milestone $mileston
         if ($milestone_artifact) {
             $parent_artifacts = $milestone_artifact->getAllAncestors($user);
             foreach ($parent_artifacts as $artifact) {
-                $parent_milestone[] = $this->getMilestoneFromArtifact($artifact);
+                $parent_milestone[] = $this->getMilestoneFromArtifact($user, $artifact);
             }
         }
         $parent_milestone = array_filter($parent_milestone);
@@ -761,18 +743,16 @@ public function addMilestoneAncestors(PFUser $user, Planning_Milestone $mileston
      * Get the top most recent milestone (last created artifact in planning tracker)
      *
      * @param int $planning_id
-     *
-     * @return Planning_Milestone
      */
-    public function getLastMilestoneCreated(PFUser $user, $planning_id)
+    public function getLastMilestoneCreated(PFUser $user, $planning_id): ?Planning_Milestone
     {
-        $planning = $this->planning_factory->getPlanning($planning_id);
+        $planning = $this->planning_factory->getPlanning($user, $planning_id);
         if ($planning === null) {
             throw new NotFoundException($planning_id);
         }
         $artifacts = $this->artifact_factory->getOpenArtifactsByTrackerIdUserCanView($user, $planning->getPlanningTrackerId());
         if (count($artifacts) > 0) {
-            return $this->getMilestoneFromArtifact(array_shift($artifacts));
+            return $this->getMilestoneFromArtifact($user, array_shift($artifacts));
         }
         return new Planning_NoMilestone($planning->getPlanningTracker()->getProject(), $planning);
     }
@@ -794,7 +774,7 @@ public function getMilestoneStatusCount(PFUser $user, Planning_Milestone $milest
     /**
      * @return Planning_Milestone[]
      */
-    public function getAllCurrentMilestones(PFUser $user, Planning $planning)
+    public function getAllCurrentMilestones(PFUser $user, Planning $planning): array
     {
         $milestones = [];
         $artifacts  = $this->artifact_factory->getArtifactsByTrackerIdUserCanView($user, $planning->getPlanningTrackerId());
@@ -804,7 +784,10 @@ public function getAllCurrentMilestones(PFUser $user, Planning $planning)
                 continue;
             }
 
-            $milestones[] = $this->getMilestoneFromArtifact($artifact);
+            $milestone = $this->getMilestoneFromArtifact($user, $artifact);
+            if ($milestone) {
+                $milestones[] = $milestone;
+            }
         }
 
         return $milestones;
@@ -823,7 +806,10 @@ public function getAllFutureMilestones(PFUser $user, Planning $planning)
                 continue;
             }
 
-            $milestones[] = $this->getMilestoneFromArtifact($artifact);
+            $milestone = $this->getMilestoneFromArtifact($user, $artifact);
+            if ($milestone) {
+                $milestones[] = $milestone;
+            }
         }
 
         return $milestones;
diff --git a/plugins/agiledashboard/include/Planning/MilestonePaneFactory.class.php b/plugins/agiledashboard/include/Planning/MilestonePaneFactory.class.php
index 79b18d9877e..fcb74d2facf 100644
--- a/plugins/agiledashboard/include/Planning/MilestonePaneFactory.class.php
+++ b/plugins/agiledashboard/include/Planning/MilestonePaneFactory.class.php
@@ -113,7 +113,7 @@ private function buildListOfPaneInfo(Planning_Milestone $milestone, PFUser $user
 
         $this->list_of_pane_info[$milestone->getArtifactId() ?? 0][] = $this->getDetailsPaneInfo($milestone);
 
-        $planning_v2_pane_info = $this->getPlanningV2PaneInfo($milestone);
+        $planning_v2_pane_info = $this->getPlanningV2PaneInfo($user, $milestone);
         if ($planning_v2_pane_info) {
             $this->list_of_pane_info[$milestone->getArtifactId() ?? 0][] = $planning_v2_pane_info;
         }
@@ -160,14 +160,14 @@ private function buildDefaultPane(Planning_Milestone $milestone)
         $this->active_pane[$milestone->getArtifactId() ?? 0] = $this->getDetailsPane($pane_info, $milestone);
     }
 
-    private function getPlanningV2PaneInfo(Planning_Milestone $milestone): ?PaneInfo
+    private function getPlanningV2PaneInfo(PFUser $user, Planning_Milestone $milestone): ?PaneInfo
     {
-        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($milestone);
+        $submilestone_tracker = $this->submilestone_finder->findFirstSubmilestoneTracker($user, $milestone);
         if (! $submilestone_tracker) {
             return null;
         }
 
-        $pane_info = $this->pane_info_factory->getPlanningV2PaneInfo($milestone);
+        $pane_info = $this->pane_info_factory->getPlanningV2PaneInfo($user, $milestone);
         if ($this->request->get('pane') == PlanningV2PaneInfo::IDENTIFIER) {
             $pane_info->setActive(true);
             $this->active_pane[$milestone->getArtifactId() ?? 0] = $this->getPlanningV2Pane($pane_info, $milestone);
diff --git a/plugins/agiledashboard/include/Planning/Planning.class.php b/plugins/agiledashboard/include/Planning/Planning.class.php
index ecd75f17adc..8b4d028ed7e 100644
--- a/plugins/agiledashboard/include/Planning/Planning.class.php
+++ b/plugins/agiledashboard/include/Planning/Planning.class.php
@@ -176,7 +176,7 @@ public function setBacklogTrackers(array $backlog_trackers)
     /**
      * @return Tracker[]
      */
-    public function getBacklogTrackers()
+    public function getBacklogTrackers(): array
     {
         return $this->backlog_trackers;
     }
diff --git a/plugins/agiledashboard/include/Planning/PlanningController.class.php b/plugins/agiledashboard/include/Planning/PlanningController.class.php
index 0e52f5a2f2b..534e5553da5 100644
--- a/plugins/agiledashboard/include/Planning/PlanningController.class.php
+++ b/plugins/agiledashboard/include/Planning/PlanningController.class.php
@@ -311,7 +311,7 @@ public function edit(\Closure $displayHeader, \Closure $displayFooter): void
         $this->checkUserIsAdmin();
 
         $planning_id = $this->request->get('planning_id');
-        $planning    = $this->planning_factory->getPlanning($planning_id);
+        $planning    = $this->planning_factory->getPlanning($this->request->getCurrentUser(), $planning_id);
         if ($planning === null) {
             throw new \Tuleap\AgileDashboard\Planning\NotFoundException($planning_id);
         }
@@ -394,7 +394,7 @@ public function update(): void
         $this->checkUserIsAdmin();
 
         $updated_planning_id = (int) $this->request->get('planning_id');
-        $original_planning   = $this->planning_factory->getPlanning($updated_planning_id);
+        $original_planning   = $this->planning_factory->getPlanning($this->request->getCurrentUser(), $updated_planning_id);
         if ($original_planning === null) {
             $this->addFeedback(
                 Feedback::ERROR,
@@ -523,7 +523,7 @@ public function getBreadcrumbs()
     private function getPlanning()
     {
         $planning_id = $this->request->get('planning_id');
-        return $this->planning_factory->getPlanning($planning_id);
+        return $this->planning_factory->getPlanning($this->request->getCurrentUser(), $planning_id);
     }
 
     private function addBurnupWarning(array &$warning_list, Tracker $planning_tracker)
diff --git a/plugins/agiledashboard/include/Planning/PlanningFactory.class.php b/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
index 5299c6777fa..70d2830e970 100644
--- a/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
+++ b/plugins/agiledashboard/include/Planning/PlanningFactory.class.php
@@ -62,7 +62,7 @@ public static function build()
      * @param array  $tracker_mapping  An array mapping source tracker ids to destination tracker ids.
      * @param array  $ugroups_mapping  An array mapping source ugroups and destinations ones.
      */
-    public function duplicatePlannings($group_id, $tracker_mapping, array $ugroups_mapping)
+    public function duplicatePlannings(PFUser $user, $group_id, $tracker_mapping, array $ugroups_mapping): void
     {
         if (! $tracker_mapping) {
             return;
@@ -80,14 +80,14 @@ public function duplicatePlannings($group_id, $tracker_mapping, array $ugroups_m
 
                 $inserted_planning_id = $this->dao->createPlanning($group_id, PlanningParameters::fromArray($row));
 
-                $this->duplicatePriorityChangePermission($group_id, $row['id'], $inserted_planning_id, $ugroups_mapping);
+                $this->duplicatePriorityChangePermission($user, $group_id, $row['id'], $inserted_planning_id, $ugroups_mapping);
             }
         }
     }
 
-    protected function duplicatePriorityChangePermission($group_id, $source_planning_id, $new_planning_id, array $ugroups_mapping)
+    private function duplicatePriorityChangePermission(PFUser $user, $group_id, $source_planning_id, $new_planning_id, array $ugroups_mapping): void
     {
-        $source_planning = $this->getPlanning($source_planning_id);
+        $source_planning = $this->getPlanning($user, $source_planning_id);
         if ($source_planning === null) {
             throw new \Tuleap\AgileDashboard\Planning\NotFoundException($source_planning_id);
         }
@@ -140,7 +140,7 @@ public function getPlannings(PFUser $user, $group_id)
         foreach ($this->dao->searchByProjectId($group_id) as $row) {
             $tracker = $this->tracker_factory->getTrackerById($row['planning_tracker_id']);
             if ($tracker && $tracker->userCanView($user)) {
-                $plannings[] = $this->getPlanningFromRow($row);
+                $plannings[] = $this->getPlanningFromRow($user, $row);
             }
         }
         if ($plannings) {
@@ -305,7 +305,7 @@ public function getOrderedPlanningsWithBacklogTracker(PFUser $user, $group_id)
         $plannings = $this->getPlannings($user, $group_id);
 
         foreach ($plannings as $planning) {
-            $planning->setBacklogTrackers($this->getBacklogTrackers($planning));
+            $planning->setBacklogTrackers($this->getBacklogTrackers($user, $planning));
         }
 
         $this->sortPlanningsAccordinglyToHierarchy($plannings);
@@ -334,21 +334,17 @@ static function (Planning $planning) {
         });
     }
 
-    public function getPlanning($planning_id): ?Planning
+    public function getPlanning(PFUser $user, $planning_id): ?Planning
     {
         $planning = $this->dao->searchById((int) $planning_id);
         if ($planning === null) {
             return null;
         }
 
-        return $this->getPlanningFromRow($planning);
+        return $this->getPlanningFromRow($user, $planning);
     }
 
-    /**
-     *
-     * @return Planning
-     */
-    private function getPlanningFromRow(array $row)
+    private function getPlanningFromRow(PFUser $user, array $row): Planning
     {
         $planning = new Planning(
             $row['id'],
@@ -359,7 +355,7 @@ private function getPlanningFromRow(array $row)
             [],
             $row['planning_tracker_id']
         );
-        $planning->setBacklogTrackers($this->getBacklogTrackers($planning));
+        $planning->setBacklogTrackers($this->getBacklogTrackers($user, $planning));
         $planning->setPlanningTracker($this->getPlanningTracker($planning));
 
         return $planning;
@@ -372,7 +368,7 @@ private function getPlanningFromRow(array $row)
      * - Given I pass Release tracker as parameter
      * - Then I should get the Release planning (for instance Epic -> Release)
      */
-    public function getPlanningByPlanningTracker(Tracker $planning_tracker): ?Planning
+    public function getPlanningByPlanningTracker(PFUser $user, Tracker $planning_tracker): ?Planning
     {
         if (array_key_exists($planning_tracker->getId(), $this->instances)) {
             return $this->instances[$planning_tracker->getId()];
@@ -393,7 +389,7 @@ public function getPlanningByPlanningTracker(Tracker $planning_tracker): ?Planni
             $planning['planning_tracker_id']
         );
         $returned->setPlanningTracker($this->getPlanningTracker($returned));
-        $returned->setBacklogTrackers($this->getBacklogTrackers($returned));
+        $returned->setBacklogTrackers($this->getBacklogTrackers($user, $returned));
         $this->instances[$planning_tracker->getId()] = $returned;
         return $returned;
     }
@@ -489,12 +485,9 @@ private function getPlanningTracker(Planning $planning)
     }
 
     /**
-     * Get a list of trackers defined as backlog for a planning
-     *
-     *
-     * @return array of Tracker
+     * @return Tracker[]
      */
-    private function getBacklogTrackers(Planning $planning)
+    private function getBacklogTrackers(PFUser $user, Planning $planning): array
     {
         $backlog_trackers = [];
         $planning_id      = $planning->getId();
@@ -502,7 +495,7 @@ private function getBacklogTrackers(Planning $planning)
 
         foreach ($rows as $row) {
             $tracker = $this->tracker_factory->getTrackerById($row['tracker_id']);
-            if ($tracker !== null) {
+            if ($tracker !== null && $tracker->userCanView($user)) {
                 $backlog_trackers[] = $tracker;
             }
         }
@@ -650,7 +643,7 @@ public function getPlanningsOutOfRootPlanningHierarchy(PFUser $user, $group_id)
                 if (! in_array($tracker_id, $potential_planning_trackers)) {
                     $tracker = $this->tracker_factory->getTrackerById($tracker_id);
                     if ($tracker !== null) {
-                        $plannings[] = $this->getPlanningByPlanningTracker($tracker);
+                        $plannings[] = $this->getPlanningByPlanningTracker($user, $tracker);
                     }
                 }
             }
@@ -666,14 +659,14 @@ public function getTrackerFactory()
         return $this->tracker_factory;
     }
 
-    public function getChildrenPlanning(Planning $planning)
+    public function getChildrenPlanning(PFUser $user, Planning $planning): ?Planning
     {
         $children = $this->tracker_factory->getHierarchyFactory()->getChildren($planning->getPlanningTrackerId());
         if (count($children) == 0) {
             return null;
         } else {
             $planning_tracker = array_shift($children);
-            return $this->getPlanningByPlanningTracker($planning_tracker);
+            return $this->getPlanningByPlanningTracker($user, $planning_tracker);
         }
     }
 
diff --git a/plugins/agiledashboard/include/Planning/PlanningRequestValidator.class.php b/plugins/agiledashboard/include/Planning/PlanningRequestValidator.class.php
index 3f1fe26c5a2..43b48f5c79b 100644
--- a/plugins/agiledashboard/include/Planning/PlanningRequestValidator.class.php
+++ b/plugins/agiledashboard/include/Planning/PlanningRequestValidator.class.php
@@ -83,7 +83,12 @@ public function isValid(
                 $current_user,
                 $tracker_access_during_import_strategy,
             )
-            && $this->planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject($group_id, $planning_id, $planning_parameters);
+            && $this->planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject(
+                $current_user,
+                $group_id,
+                $planning_id,
+                $planning_parameters,
+            );
     }
 
     /**
@@ -160,12 +165,14 @@ private function planningTrackerIdIsValid(
      * @param int                $group_id            The group id to check the existing planning trackers against.
      * @param int                $planning_id         The id of the planning to be updated.
      * @param PlanningParameters $planning_parameters The validated parameters.
-     *
-     * @return bool
      */
-    private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject($group_id, $planning_id, PlanningParameters $planning_parameters)
-    {
-        return ($this->planningTrackerIsTheCurrentOne($planning_id, $planning_parameters) ||
+    private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSameProject(
+        PFUser $user,
+        $group_id,
+        $planning_id,
+        PlanningParameters $planning_parameters,
+    ): bool {
+        return ($this->planningTrackerIsTheCurrentOne($user, $planning_id, $planning_parameters) ||
                 $this->trackerIsNotAlreadyUsedAsAPlanningTrackerInProject($group_id, $planning_parameters));
     }
 
@@ -175,12 +182,10 @@ private function planningTrackerIsNotThePlanningTrackerOfAnotherPlanningInTheSam
      *
      * @param int                $planning_id         The planning with the current planning tracker id
      * @param PlanningParameters $planning_parameters The parameters being validated
-     *
-     * @return bool
      */
-    private function planningTrackerIsTheCurrentOne($planning_id, PlanningParameters $planning_parameters)
+    private function planningTrackerIsTheCurrentOne(PFUser $user, $planning_id, PlanningParameters $planning_parameters): bool
     {
-        $planning = $this->factory->getPlanning($planning_id);
+        $planning = $this->factory->getPlanning($user, $planning_id);
 
         if (! $planning) {
             return false;
diff --git a/plugins/agiledashboard/include/agiledashboardPlugin.php b/plugins/agiledashboard/include/agiledashboardPlugin.php
index acb6c2c74a8..b257e8390fe 100644
--- a/plugins/agiledashboard/include/agiledashboardPlugin.php
+++ b/plugins/agiledashboard/include/agiledashboardPlugin.php
@@ -426,14 +426,6 @@ public function userHistoryClear(array $params): void
         $visit_cleaner->deleteVisitByUserId((int) $user->getId());
     }
 
-    public function cardwall_event_get_swimline_tracker($params) // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps
-    {
-        $planning_factory = $this->getPlanningFactory();
-        if ($planning = $planning_factory->getPlanningByPlanningTracker($params['tracker'])) {
-            $params['backlog_trackers'] = $planning->getBacklogTrackers();
-        }
-    }
-
     /**
      * @see Tracker_Report::TRACKER_EVENT_REPORT_DISPLAY_ADDITIONAL_CRITERIA
      */
@@ -602,6 +594,7 @@ public function tracker_event_project_creation_trackers_required($params) // php
     public function trackerEventTrackersDuplicated(TrackerEventTrackersDuplicated $event): void
     {
         PlanningFactory::build()->duplicatePlannings(
+            $event->user,
             (int) $event->new_project->getID(),
             $event->tracker_mapping,
             $event->ugroups_mapping,
@@ -887,23 +880,6 @@ public function rest_project_resources(array $params) // phpcs:ignore PSR1.Metho
         $injector->declareProjectPlanningResource($params['resources'], $params['project']);
     }
 
-    private function getPlanningIdFromParameters($params)
-    {
-        if ($params['milestone_id'] == 0) {
-            $planning = $this->getPlanningFactory()->getRootPlanning(
-                $params['user'],
-                $params['group_id']
-            );
-
-            return $planning->getId();
-        }
-
-        $artifact  = $this->getArtifactFactory()->getArtifactById($params['milestone_id']);
-        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($artifact);
-
-        return $milestone->getPlanningId();
-    }
-
     /** @see Event::GET_PROJECTID_FROM_URL */
     public function get_projectid_from_url($params) // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps
     {
@@ -1170,7 +1146,7 @@ public function getMessageFetcherAdditionalWarnings(MessageFetcherAdditionalWarn
         $field = $event->getField();
 
         if ($field::class === Tuleap\AgileDashboard\FormElement\Burnup::class) {
-            $event->setWarnings($message_fetcher->getWarningsRelatedToPlanningConfiguration($field->getTracker()));
+            $event->setWarnings($message_fetcher->getWarningsRelatedToPlanningConfiguration($event->user, $field->getTracker()));
         }
     }
 
@@ -1286,7 +1262,7 @@ public function getAllBreadCrumbsForMilestoneBuilder(): AllBreadCrumbsForMilesto
 
     public function getSwitchToQuickLinkCollection(SwitchToLinksCollection $collection): void
     {
-        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($collection->getArtifact());
+        $milestone = $this->getMilestoneFactory()->getMilestoneFromArtifact($collection->getCurrentUser(), $collection->getArtifact());
         if ($milestone === null) {
             return;
         }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandlerTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandlerTest.php
index 970245907f1..ce62e5e3f8a 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandlerTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Artifact/EventRedirectAfterArtifactCreationOrUpdateHandlerTest.php
@@ -134,7 +134,7 @@ public function testItRedirectsToPlanning(): void
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $milestone = $this->createMock(\Planning_Milestone::class);
@@ -216,7 +216,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfPaneCannotBeFo
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $milestone = $this->createMock(\Planning_Milestone::class);
@@ -283,7 +283,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfMilestoneHasNo
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $milestone = $this->createMock(\Planning_Milestone::class);
@@ -337,7 +337,7 @@ public function testItRedirectsToPlanningWithFallbackToLegacyUrlIfMilestoneCanno
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $this->milestone_factory
@@ -387,7 +387,7 @@ public function testItRedirectsToTopPlanningIfPlanningCannotBeInstantiated(): vo
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn(null);
 
         $redirect       = new Tracker_Artifact_Redirect();
@@ -430,7 +430,7 @@ public function testItStaysInTracker(): void
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $redirect       = new Tracker_Artifact_Redirect();
@@ -474,7 +474,7 @@ public function testItStaysInTrackerAndIncludesTheChildMilestoneIfModeIsSetToCre
         $this->planning_factory
             ->expects(self::once())
             ->method('getPlanning')
-            ->with(self::PLANNING_ID)
+            ->with($this->user, self::PLANNING_ID)
             ->willReturn($this->planning);
 
         $redirect       = new Tracker_Artifact_Redirect();
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/FormElement/MessageFetcherTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/FormElement/MessageFetcherTest.php
index 9f7499b3e25..4af6ce378f2 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/FormElement/MessageFetcherTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/FormElement/MessageFetcherTest.php
@@ -30,6 +30,7 @@
 use Tracker;
 use Tracker_FormElement_Field;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Semantic\Status\Done\SemanticDone;
 use Tuleap\Tracker\Semantic\Status\Done\SemanticDoneFactory;
@@ -45,6 +46,7 @@ final class MessageFetcherTest extends TestCase
     private MessageFetcher $message_fetcher;
     private AgileDashboard_Semantic_InitialEffortFactory&MockObject $initial_effort_factory;
     private SemanticDoneFactory&MockObject $semantic_done_factory;
+    private \PFUser $user;
 
     protected function setUp(): void
     {
@@ -61,6 +63,7 @@ protected function setUp(): void
         $this->tracker         = TrackerTestBuilder::aTracker()->build();
         $this->backlog_tracker = TrackerTestBuilder::aTracker()->build();
         $this->field           = IntFieldBuilder::anIntField(145)->build();
+        $this->user            = UserTestBuilder::buildWithDefaults();
     }
 
     public function testItDoesNotAddWarningsIfAllIsWellConfigured(): void
@@ -69,20 +72,20 @@ public function testItDoesNotAddWarningsIfAllIsWellConfigured(): void
         $semantic_done  = $this->getMockedSemanticDone(true);
         $initial_effort = $this->getInitialEffortFieldSemantic();
 
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);
         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);
         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);
 
-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);
+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);
 
         self::assertEmpty($warnings);
     }
 
     public function testItReturnsAWarningIfTrackerIsNotAPlanningTracker(): void
     {
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn(null);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn(null);
 
-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);
+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);
 
         self::assertNotEmpty($warnings);
     }
@@ -93,12 +96,12 @@ public function testItReturnsAWarningIfBacklogTrackerDoesNotHaveSemanticDone():
         $semantic_done  = $this->getMockedSemanticDone(false);
         $initial_effort = $this->getInitialEffortFieldSemantic();
 
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);
         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);
         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);
         $semantic_done->method('getUrl');
 
-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);
+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);
 
         self::assertNotEmpty($warnings);
     }
@@ -109,11 +112,11 @@ public function testItReturnsAWarningIfBacklogTrackerDoesNotHaveSemanticInitialE
         $semantic_done  = $this->getMockedSemanticDone(true);
         $initial_effort = new AgileDashBoard_Semantic_InitialEffort($this->tracker, null);
 
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->tracker)->willReturn($planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->tracker)->willReturn($planning);
         $this->semantic_done_factory->method('getInstanceByTracker')->with($this->backlog_tracker)->willReturn($semantic_done);
         $this->initial_effort_factory->method('getByTracker')->with($this->backlog_tracker)->willReturn($initial_effort);
 
-        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->tracker);
+        $warnings = $this->message_fetcher->getWarningsRelatedToPlanningConfiguration($this->user, $this->tracker);
 
         self::assertNotEmpty($warnings);
     }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Backlog/AgileDashboard_SequenceIdManagerTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Backlog/AgileDashboard_SequenceIdManagerTest.php
index d67e8d75a59..2e82dca5e60 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Backlog/AgileDashboard_SequenceIdManagerTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Backlog/AgileDashboard_SequenceIdManagerTest.php
@@ -114,7 +114,7 @@ public function testItReturnsNothingIfThereAreNoArtifactsInMilestonesBacklog():
         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)
             ->willReturn(new AgileDashboard_Milestone_Backlog_DescendantItemsCollection());
 
-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)
+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)
             ->willReturn($this->backlog_1);
 
         self::assertNull($this->sequence_id_manager->getSequenceId($this->user, $this->milestone_1, 2));
@@ -127,7 +127,7 @@ public function testItReturnsNothingIfTheArtifactIsNotInTheMilestoneBacklog(): v
         $backlog_items->push($this->artifact_2);
         $backlog_items->push($this->artifact_3);
 
-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)
+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)
             ->willReturn($this->backlog_1);
         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)
             ->willReturn($backlog_items);
@@ -142,7 +142,7 @@ public function testItReturns1IfTheArtifactIsInFirstPlace(): void
         $backlog_items->push($this->artifact_2);
         $backlog_items->push($this->artifact_3);
 
-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)
+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)
             ->willReturn($this->backlog_1);
         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)
             ->willReturn($backlog_items);
@@ -160,7 +160,7 @@ public function testItReturns2IfTheArtifactIsInFirstPlace(): void
         $backlog_items->push($this->artifact_1);
         $backlog_items->push($this->artifact_3);
 
-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)
+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)
             ->willReturn($this->backlog_1);
         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)
             ->willReturn($backlog_items);
@@ -178,7 +178,7 @@ public function testItKeepsInMemoryTheBacklogResult(): void
         $backlog_items->push($this->artifact_1);
         $backlog_items->push($this->artifact_3);
 
-        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->milestone_1)
+        $this->backlog_factory->expects(self::once())->method('getBacklog')->with($this->user, $this->milestone_1)
             ->willReturn($this->backlog_1);
         $this->backlog_1->expects(self::once())->method('getArtifacts')->with($this->user)
             ->willReturn($backlog_items);
@@ -196,7 +196,7 @@ public function testItKeepsInMemoryTheBacklogResult(): void
     public function testItCanDealWithMultipleCallWithDifferentMilestones(): void
     {
         $this->backlog_factory->expects(self::exactly(2))->method('getBacklog')
-            ->withConsecutive([$this->milestone_1], [$this->milestone_2])
+            ->withConsecutive([$this->user, $this->milestone_1], [$this->user, $this->milestone_2])
             ->willReturnOnConsecutiveCalls($this->backlog_1, $this->backlog_2);
 
         $backlog_items = new AgileDashboard_Milestone_Backlog_DescendantItemsCollection();
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/HeaderOptionsProviderTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/HeaderOptionsProviderTest.php
index 68a72e905af..986923fe303 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/HeaderOptionsProviderTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/HeaderOptionsProviderTest.php
@@ -79,7 +79,7 @@ protected function setUp(): void
 
         $this->backlog = $this->createMock(AgileDashboard_Milestone_Backlog_Backlog::class);
         $backlog_factory->method('getBacklog')
-            ->with($this->milestone)
+            ->with($this->user, $this->milestone)
             ->willReturn($this->backlog);
 
         $this->epic            = TrackerTestBuilder::aTracker()
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinderTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinderTest.php
index e2ebcbb85c0..c9c4c025507 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinderTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Milestone/Pane/Planning/SubmilestoneFinderTest.php
@@ -36,6 +36,7 @@
 use Tracker_HierarchyFactory;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
 use Tuleap\Test\Builders\ProjectTestBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Test\Builders\ArtifactTestBuilder;
 use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
@@ -63,6 +64,7 @@ final class SubmilestoneFinderTest extends TestCase
     private int $theme_tracker_id       = 5;
     private int $team_tracker_id        = 6;
     private int $requirement_tracker_id = 7;
+    private \PFUser $user;
 
     protected function setUp(): void
     {
@@ -95,6 +97,8 @@ protected function setUp(): void
         $this->tracker_hierarchy_factory = $this->createMock(Tracker_HierarchyFactory::class);
         $this->planning_factory          = $this->createMock(PlanningFactory::class);
 
+        $this->user = UserTestBuilder::buildWithDefaults();
+
         $this->finder = new AgileDashboard_Milestone_Pane_Planning_SubmilestoneFinder(
             $this->tracker_hierarchy_factory,
             $this->planning_factory,
@@ -108,7 +112,7 @@ public function testItReturnsNullIfThereIsNoChildTrackerForMultiMilestoneConfigu
     {
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->sprint_tracker_id)->willReturn([]);
 
-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->sprint_milestone));
+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->sprint_milestone));
     }
 
     /**
@@ -119,9 +123,9 @@ public function testItReturnsSprintWhenBothPlanningsHaveSameBacklogTrackerForMul
     {
         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->user_story_tracker]);
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);
 
-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 
     /**
@@ -132,9 +136,9 @@ public function testItReturnsNullWhenChildHaveNoPlanningForMultiMilestoneConfigu
     {
         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->user_story_tracker]);
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn(null);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn(null);
 
-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 
     /**
@@ -146,9 +150,9 @@ public function testItReturnsSprintWhenTheBacklogTrackerIsParentForMultiMileston
         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->epic_tracker]);
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);
         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->user_story_tracker)->willReturn([$this->epic_tracker]);
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);
 
-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 
     /**
@@ -162,9 +166,9 @@ public function testItReturnsNullWhenTheBacklogTrackerIsNotRelatedForMultiMilest
         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->epic_tracker]);
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->requirement_tracker]);
         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->team_tracker)->willReturn([]);
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->requirement_tracker)->willReturn($this->requirement_planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->requirement_tracker)->willReturn($this->requirement_planning);
 
-        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertNull($this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 
     /**
@@ -177,9 +181,9 @@ public function testItReturnsSprintWhenTheBacklogTrackerIsAncestorForMultiMilest
         $this->release_planning->method('getBacklogTrackers')->willReturn([$this->theme_tracker]);
         $this->tracker_hierarchy_factory->method('getChildren')->with($this->release_tracker_id)->willReturn([$this->sprint_tracker]);
         $this->tracker_hierarchy_factory->method('getAllParents')->with($this->user_story_tracker)->willReturn([$this->epic_tracker, $this->theme_tracker]);
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->sprint_tracker)->willReturn($this->sprint_planning);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->with($this->user, $this->sprint_tracker)->willReturn($this->sprint_planning);
 
-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 
     /**
@@ -197,9 +201,9 @@ public function testItReturnsSprintEvenIfThereIsSiblingWithoutMatchingBacklogTra
         $this->tracker_hierarchy_factory->method('getAllParents')
             ->withConsecutive([$this->team_tracker], [$this->user_story_tracker])->willReturn([]);
         $this->planning_factory->method('getPlanningByPlanningTracker')
-            ->withConsecutive([$this->requirement_tracker], [$this->sprint_tracker])
+            ->withConsecutive([$this->user, $this->requirement_tracker], [$this->user, $this->sprint_tracker])
             ->willReturnOnConsecutiveCalls($this->requirement_planning, $this->sprint_planning);
 
-        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->release_milestone));
+        self::assertEquals($this->sprint_tracker, $this->finder->findFirstSubmilestoneTracker($this->user, $this->release_milestone));
     }
 }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/ArtifactLinkerTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/ArtifactLinkerTest.php
index 94d9a9b543d..4978da3c887 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/ArtifactLinkerTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/ArtifactLinkerTest.php
@@ -73,7 +73,7 @@ protected function setUp(): void
         $release_planning = PlanningBuilder::aPlanning(101)->withBacklogTrackers($epic_tracker)->build();
 
         $planning_factory = $this->createMock(PlanningFactory::class);
-        $planning_factory->method('getPlanningByPlanningTracker')->willReturnCallback(static fn(Tracker $tracker) => match ($tracker) {
+        $planning_factory->method('getPlanningByPlanningTracker')->willReturnCallback(static fn(PFUser $user, Tracker $tracker) => match ($tracker) {
             $corp_tracker    => $corp_planning,
             $product_tracker => $product_planning,
             $release_tracker => $release_planning,
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php
index 1964f9ce5cf..5bef1ebdbf9 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php
@@ -95,7 +95,10 @@ public function testItReturnsAMilestone(): void
             ->withProject(ProjectTestBuilder::aProject()->build())
             ->build();
 
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with($planning_tracker)->willReturn(PlanningBuilder::aPlanning(101)->build());
+        $this->planning_factory
+            ->method('getPlanningByPlanningTracker')
+            ->with($this->user, $planning_tracker)
+            ->willReturn(PlanningBuilder::aPlanning(101)->build());
 
         $changeset = ChangesetTestBuilder::aChangeset('1')->build();
 
@@ -118,7 +121,7 @@ public function testItReturnsAMilestone(): void
     public function testItReturnsNullWhenArtifactIsNotAMilestone(): void
     {
         $planning_tracker = TrackerTestBuilder::aTracker()->build();
-        $this->planning_factory->method('getPlanningByPlanningTracker')->with()->willReturn(null);
+        $this->planning_factory->method('getPlanningByPlanningTracker')->willReturn(null);
 
         $artifact = ArtifactTestBuilder::anArtifact(1)
             ->inTracker($planning_tracker)
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php
index 9cf5ad90659..0d189133201 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php
@@ -88,7 +88,7 @@ protected function setUp(): void
             ->withMilestoneTracker($planning_tracker)
             ->build();
 
-        $planning_factory->method('getPlanning')->with($this->planning_id)->willReturn($planning);
+        $planning_factory->method('getPlanning')->with($this->current_user, $this->planning_id)->willReturn($planning);
     }
 
     public function testItReturnsEmptyMilestoneWhenNothingMatches(): void
@@ -105,7 +105,7 @@ public function testItReturnsTheLastOpenArtifactOfPlanningTracker(): void
             ->willReturn(['115' => $this->sprint_1_artifact, '104' => ArtifactTestBuilder::anArtifact(104)->build()]);
 
         $this->milestone_factory->method('getMilestoneFromArtifact')
-            ->with($this->sprint_1_artifact)
+            ->with($this->current_user, $this->sprint_1_artifact)
             ->willReturn($this->sprint_1_milestone);
 
         $milestone = $this->milestone_factory->getLastMilestoneCreated($this->current_user, $this->planning_id);
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php
index 8d9548e08e1..5b53a234e20 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php
@@ -37,6 +37,7 @@
 use Tracker_FormElementFactory;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
 use Tuleap\Test\Builders\ProjectTestBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Artifact\Artifact;
 use Tuleap\Tracker\Semantic\Timeframe\SemanticTimeframeBuilder;
@@ -51,6 +52,7 @@ final class MilestoneFactoryGetMilestoneFromArtifactTest extends TestCase
     private Artifact $release_artifact;
     private Planning $release_planning;
     private Project $project;
+    private \PFUser $user;
 
     protected function setUp(): void
     {
@@ -65,6 +67,8 @@ protected function setUp(): void
 
         $this->planning_factory = $this->createMock(PlanningFactory::class);
 
+        $this->user = UserTestBuilder::buildWithDefaults();
+
         $this->milestone_factory = new Planning_MilestoneFactory(
             $this->planning_factory,
             $this->createMock(Tracker_ArtifactFactory::class),
@@ -80,7 +84,7 @@ protected function setUp(): void
     public function testItCreateMilestoneFromArtifact(): void
     {
         $this->planning_factory->expects(self::once())->method('getPlanningByPlanningTracker')->willReturn($this->release_planning);
-        $this->assertEqualToReleaseMilestone($this->milestone_factory->getMilestoneFromArtifact($this->release_artifact));
+        $this->assertEqualToReleaseMilestone($this->milestone_factory->getMilestoneFromArtifact($this->user, $this->release_artifact));
     }
 
     private function assertEqualToReleaseMilestone($actual_release_milestone): void
@@ -96,6 +100,6 @@ private function assertEqualToReleaseMilestone($actual_release_milestone): void
     public function testItReturnsNullWhenThereIsNoPlanningForTheTracker(): void
     {
         $this->planning_factory->expects(self::once())->method('getPlanningByPlanningTracker')->willReturn(null);
-        self::assertNull($this->milestone_factory->getMilestoneFromArtifact($this->task_artifact));
+        self::assertNull($this->milestone_factory->getMilestoneFromArtifact($this->user, $this->task_artifact));
     }
 }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php
deleted file mode 100644
index dcfc3f2da2f..00000000000
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-/**
- * Copyright (c) Enalean, 2012 - present. All Rights Reserved.
- *
- *  This file is a part of Tuleap.
- *
- * Tuleap is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * Tuleap is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
- *
- */
-
-declare(strict_types=1);
-
-namespace Tuleap\AgileDashboard\Planning;
-
-use ArtifactNode;
-use Planning_MilestoneFactory;
-use Tuleap\Test\Builders\UserTestBuilder;
-use Tuleap\Test\PHPUnit\TestCase;
-use Tuleap\Tracker\Test\Builders\ArtifactTestBuilder;
-
-final class MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest extends TestCase
-{
-    public function testItCreateMilestoneFromArtifactAndLoadsItsPlannedArtifacts(): void
-    {
-        $milestone_factory = $this->createPartialMock(Planning_MilestoneFactory::class, [
-            'getPlannedArtifacts',
-            'getMilestoneFromArtifact',
-        ]);
-
-        $user      = UserTestBuilder::buildWithDefaults();
-        $artifact  = ArtifactTestBuilder::anArtifact(101)->build();
-        $artifact2 = ArtifactTestBuilder::anArtifact(102)->build();
-        $artifact3 = ArtifactTestBuilder::anArtifact(103)->build();
-
-        $node = new ArtifactNode($artifact);
-        $node->addChild(new ArtifactNode($artifact2));
-        $node->addChild(new ArtifactNode($artifact3));
-
-        $milestone_factory->expects(self::once())->method('getPlannedArtifacts')->with($user, $artifact)->willReturn($node);
-        $milestone_factory->expects(self::once())->method('getMilestoneFromArtifact')->with($artifact, $node);
-
-        $milestone_factory->getMilestoneFromArtifactWithPlannedArtifacts($artifact, $user);
-    }
-}
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php
index 0fa3a5414cf..524553619c4 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php
@@ -168,7 +168,7 @@ public function testItCanRetrieveSubMilestonesOfAGivenMilestone(): void
 
 
         $this->planning_factory->method('getPlanningByPlanningTracker')
-            ->withConsecutive([$sprints_tracker], [$sprints_tracker], [$hackfests_tracker])
+            ->withConsecutive([$this->user, $sprints_tracker], [$this->user, $sprints_tracker], [$this->user, $hackfests_tracker])
             ->willReturnOnConsecutiveCalls($sprint_planning, $sprint_planning, $hackfest_planning);
 
         $milestone = new Planning_ArtifactMilestone(
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php
index 5ee1c7feca1..b63cebce850 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php
@@ -76,7 +76,7 @@ public function testItBuildTheMilestoneForOneParent(): void
         $this->sprint_artifact->method('getAllAncestors')->with($this->current_user)->willReturn([$release_artifact]);
 
         $release_milestone = $this->createMock(Planning_ArtifactMilestone::class);
-        $this->milestone_factory->method('getMilestoneFromArtifact')->with($release_artifact)->willReturn($release_milestone);
+        $this->milestone_factory->method('getMilestoneFromArtifact')->with($this->current_user, $release_artifact)->willReturn($release_milestone);
 
         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);
         self::assertEquals([$release_milestone], $milestones);
@@ -93,7 +93,7 @@ public function testItBuildTheMilestoneForSeveralParents(): void
         $release_milestone = $this->createMock(Planning_ArtifactMilestone::class);
         $release_milestone->method('getArtifact')->willReturn($release_artifact);
         $this->milestone_factory->method('getMilestoneFromArtifact')
-            ->withConsecutive([$release_artifact], [$product_artifact])
+            ->withConsecutive([$this->current_user, $release_artifact], [$this->current_user, $product_artifact])
             ->willReturnOnConsecutiveCalls($release_milestone, $product_milestone);
 
         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);
@@ -105,7 +105,7 @@ public function testItFiltersOutTheEmptyMilestones(): void
         $release_artifact = ArtifactTestBuilder::anArtifact(1)->build();
         $this->sprint_artifact->method('getAllAncestors')->with($this->current_user)->willReturn([$release_artifact]);
 
-        $this->milestone_factory->method('getMilestoneFromArtifact')->with($release_artifact)->willReturn(null);
+        $this->milestone_factory->method('getMilestoneFromArtifact')->with($this->current_user, $release_artifact)->willReturn(null);
 
         $milestones = $this->milestone_factory->getMilestoneAncestors($this->current_user, $this->sprint_milestone);
         self::assertEquals([], $milestones);
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php
index a8d91ec9016..2ccd4cdabc7 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php
@@ -230,7 +230,7 @@ public function testItReturnsSubMilestonesFilteredByStatus(): void
 
         $this->artifact_factory->method('getInstanceFromRow')->willReturnOnConsecutiveCalls($first_artifact, $second_artifact);
         $this->planning_factory->method('getPlanningByPlanningTracker')
-            ->with($this->sub_milestone_tracker)
+            ->with($this->user, $this->sub_milestone_tracker)
             ->willReturn($this->sub_planning);
 
         $sub_milestones = $this->getSubMilestones();
@@ -291,7 +291,7 @@ public function testItReturnsSiblingTopMilestonesFilteredByStatus(): void
 
         $this->artifact_factory->method('getInstanceFromRow')->willReturn($first_artifact, $second_artifact);
         $this->planning_factory->method('getPlanningByPlanningTracker')
-            ->with($top_milestone_tracker)
+            ->with($this->user, $top_milestone_tracker)
             ->willReturn($this->top_planning);
 
         $sibling_milestones = $this->getSiblingMilestones();
@@ -343,7 +343,7 @@ public function testItReturnsSiblingSubMilestonesFilteredByStatus(): void
 
         $this->artifact_factory->method('getInstanceFromRow')->willReturnOnConsecutiveCalls($first_artifact, $second_artifact);
         $this->planning_factory->method('getPlanningByPlanningTracker')
-            ->with($this->sub_milestone_tracker)
+            ->with($this->user, $this->sub_milestone_tracker)
             ->willReturn($this->sub_planning);
 
         $sibling_milestones = $this->getSiblingMilestones();
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningControllerTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningControllerTest.php
index 8ab4cf2b105..26ff40f22c2 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningControllerTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningControllerTest.php
@@ -28,7 +28,6 @@
 use EventManager;
 use Exception;
 use ForgeConfig;
-use LogicException;
 use PHPUnit\Framework\MockObject\MockObject;
 use Planning_Controller;
 use Planning_RequestValidator;
@@ -48,6 +47,7 @@
 use Tuleap\ForgeConfigSandbox;
 use Tuleap\GlobalLanguageMock;
 use Tuleap\GlobalResponseMock;
+use Tuleap\Test\Builders\HTTPRequestBuilder;
 use Tuleap\Test\Builders\ProjectTestBuilder;
 use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\DB\DBTransactionExecutorPassthrough;
@@ -64,7 +64,6 @@ final class PlanningControllerTest extends TestCase
     private PlanningUpdater&MockObject $planning_updater;
     private Planning_RequestValidator&MockObject $planning_request_validator;
     private EventManager&MockObject $event_manager;
-    private Codendi_Request&MockObject $request;
     private Planning_Controller $planning_controller;
     private UpdateIsAllowedChecker&MockObject $root_planning_update_checker;
     private UpdateRequestValidator&MockObject $update_request_validator;
@@ -75,9 +74,7 @@ protected function setUp(): void
     {
         ForgeConfig::set('codendi_dir', AGILEDASHBOARD_BASE_DIR . '/../../..');
 
-        $this->request = $this->createMock(Codendi_Request::class);
         $this->project = ProjectTestBuilder::aProject()->withId(101)->build();
-        $this->request->method('getProject')->willReturn($this->project);
 
         $this->planning_factory     = $this->createMock(PlanningFactory::class);
         $this->explicit_backlog_dao = $this->createMock(ArtifactsInExplicitBacklogDao::class);
@@ -88,9 +85,12 @@ protected function setUp(): void
         $this->root_planning_update_checker    = $this->createMock(UpdateIsAllowedChecker::class);
         $this->update_request_validator        = $this->createMock(UpdateRequestValidator::class);
         $this->backlog_trackers_update_checker = $this->createMock(BacklogTrackersUpdateChecker::class);
+    }
 
-        $this->planning_controller = new Planning_Controller(
-            $this->request,
+    private function getPlanningController(Codendi_Request $request): Planning_Controller
+    {
+        return $this->planning_controller = new Planning_Controller(
+            $request,
             $this->planning_factory,
             $this->createMock(ProjectManager::class),
             $this->createMock(AgileDashboard_XMLFullStructureExporter::class),
@@ -116,8 +116,6 @@ public function testItDeletesThePlanningAndRedirectsToTheIndex(): void
         $user = UserTestBuilder::anActiveUser()
             ->withAdministratorOf($this->project)
             ->build();
-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);
-        $this->request->expects(self::once())->method('get')->with('planning_id')->willReturn(42);
 
         $root_planning = PlanningBuilder::aPlanning(101)->withId(109)->build();
         $this->planning_factory->method('getRootPlanning')->willReturn($root_planning);
@@ -128,7 +126,12 @@ public function testItDeletesThePlanningAndRedirectsToTheIndex(): void
 
         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');
 
-        $this->planning_controller->delete();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParam('planning_id', 42)
+            ->build();
+        $this->getPlanningController($request)->delete();
     }
 
     public function testItDeletesExplicitBacklogPlanning(): void
@@ -136,8 +139,6 @@ public function testItDeletesExplicitBacklogPlanning(): void
         $user = UserTestBuilder::anActiveUser()
             ->withAdministratorOf($this->project)
             ->build();
-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);
-        $this->request->expects(self::once())->method('get')->with('planning_id')->willReturn(42);
 
         $root_planning = PlanningBuilder::aPlanning(101)->withId(42)->build();
         $this->planning_factory->method('getRootPlanning')->willReturn($root_planning);
@@ -148,7 +149,12 @@ public function testItDeletesExplicitBacklogPlanning(): void
 
         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');
 
-        $this->planning_controller->delete();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParam('planning_id', 42)
+            ->build();
+        $this->getPlanningController($request)->delete();
     }
 
     public function testItDoesntDeleteAnythingIfTheUserIsNotAdmin(): void
@@ -157,14 +163,17 @@ public function testItDoesntDeleteAnythingIfTheUserIsNotAdmin(): void
             ->withoutMemberOfProjects()
             ->withoutSiteAdministrator()
             ->build();
-        $this->request->expects(self::once())->method('getCurrentUser')->willReturn($user);
-        $this->request->expects(self::never())->method('get')->with('planning_id');
 
         // redirect() is a never return method, but phpunit mock system cannot handle it, so replace the exit() call by an exception
         $GLOBALS['Response']->expects(self::once())->method('redirect')->willThrowException(new Exception());
 
         self::expectException(Exception::class);
-        $this->planning_controller->delete();
+
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->build();
+        $this->getPlanningController($request)->delete();
     }
 
     public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void
@@ -173,9 +182,6 @@ public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void
             ->withAdministratorOf($this->project)
             ->build();
 
-        $this->request->expects(self::once())->method('getCurrentUser')->willReturn($user);
-        $this->request->method('get')->with('planning_id')->willReturn(1);
-
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
 
         $this->event_manager->expects(self::once())->method('processEvent');
@@ -189,8 +195,12 @@ public function testItOnlyUpdateCardWallConfigWhenRequestIsInvalid(): void
         $GLOBALS['Response']->expects(self::once())->method('redirect');
 
         $this->planning_updater->expects(self::never())->method('update');
-
-        $this->planning_controller->update();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParam('planning_id', 1)
+            ->build();
+        $this->getPlanningController($request)->update();
     }
 
     public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated(): void
@@ -199,15 +209,6 @@ public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated():
             ->withAdministratorOf($this->project)
             ->build();
 
-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);
-        $planning_parameters = [];
-        $this->request->method('get')
-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {
-                'planning_id' => 1,
-                'planning'    => $planning_parameters,
-                default       => throw new LogicException("Should not be called with '$arg'"),
-            }));
-
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
 
         $this->event_manager->expects(self::once())->method('processEvent');
@@ -226,7 +227,12 @@ public function testItOnlyUpdateCardWallConfigWhenRootPlanningCannotBeUpdated():
 
         $GLOBALS['Response']->expects(self::once())->method('redirect');
 
-        $this->planning_controller->update();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParams(['planning_id' => 1, 'planning' => []])
+            ->build();
+        $this->getPlanningController($request)->update();
     }
 
     public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): void
@@ -235,15 +241,6 @@ public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): voi
             ->withAdministratorOf($this->project)
             ->build();
 
-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);
-        $planning_parameters = [];
-        $this->request->method('get')
-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {
-                'planning_id' => 1,
-                'planning'    => $planning_parameters,
-                default       => throw new LogicException("Should not be called with '$arg'"),
-            }));
-
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
 
         $this->event_manager->expects(self::once())->method('processEvent');
@@ -263,7 +260,12 @@ public function testItOnlyUpdateCardWallConfigWhenPlanningCannotBeUpdated(): voi
 
         $GLOBALS['Response']->expects(self::once())->method('redirect');
 
-        $this->planning_controller->update();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParams(['planning_id' => 1, 'planning' => []])
+            ->build();
+        $this->getPlanningController($request)->update();
     }
 
     public function testItUpdatesThePlanning(): void
@@ -272,14 +274,7 @@ public function testItUpdatesThePlanning(): void
             ->withAdministratorOf($this->project)
             ->build();
 
-        $this->request->expects(self::exactly(2))->method('getCurrentUser')->willReturn($user);
         $planning_parameters = [];
-        $this->request->method('get')
-            ->will(self::returnCallback(static fn(string $arg) => match ($arg) {
-                'planning_id' => 1,
-                'planning'    => $planning_parameters,
-                default       => throw new LogicException("Should not be called with '$arg'"),
-            }));
 
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
 
@@ -298,7 +293,12 @@ public function testItUpdatesThePlanning(): void
 
         $GLOBALS['Response']->expects(self::once())->method('redirect');
 
-        $this->planning_controller->update();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParams(['planning_id' => 1, 'planning' => []])
+            ->build();
+        $this->getPlanningController($request)->update();
     }
 
     public function testItShowsAnErrorMessageAndRedirectsBackToTheCreationForm(): void
@@ -307,9 +307,6 @@ public function testItShowsAnErrorMessageAndRedirectsBackToTheCreationForm(): vo
             ->withAdministratorOf($this->project)
             ->build();
 
-        $this->request->method('getCurrentUser')->willReturn($user);
-        $this->request->method('getProject')->willReturn($this->project);
-
         $this->planning_request_validator->method('isValid')->willReturn(false);
 
         $this->planning_factory->expects(self::never())->method('createPlanning');
@@ -317,7 +314,11 @@ public function testItShowsAnErrorMessageAndRedirectsBackToTheCreationForm(): vo
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=new');
 
-        $this->planning_controller->create();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->build();
+        $this->getPlanningController($request)->create();
     }
 
     public function testItCreatesThePlanningAndRedirectsToTheIndex(): void
@@ -335,10 +336,6 @@ public function testItCreatesThePlanningAndRedirectsToTheIndex(): void
             PlanningPermissionsManager::PERM_PRIORITY_CHANGE => ['2', '3'],
         ];
 
-        $this->request->method('getCurrentUser')->willReturn($user);
-        $this->request->method('get')->with('planning')->willReturn($planning_parameters);
-        $this->request->method('getProject')->willReturn($this->project);
-
         $this->planning_request_validator->method('isValid')->willReturn(true);
 
         $this->planning_factory->expects(self::once())->method('createPlanning');
@@ -346,7 +343,12 @@ public function testItCreatesThePlanningAndRedirectsToTheIndex(): void
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
         $GLOBALS['Response']->expects(self::once())->method('redirect')->with('/plugins/agiledashboard/?group_id=101&action=admin');
 
-        $this->planning_controller->create();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->withParam('planning', $planning_parameters)
+            ->build();
+        $this->getPlanningController($request)->create();
     }
 
     public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void
@@ -356,9 +358,6 @@ public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void
             ->withoutSiteAdministrator()
             ->build();
 
-        $this->request->method('getProject')->willReturn($this->project);
-        $this->request->method('getCurrentUser')->willReturn($user);
-
         $this->planning_factory->expects(self::never())->method('createPlanning');
 
         $GLOBALS['Response']->expects(self::once())->method('addFeedback');
@@ -367,6 +366,10 @@ public function testItDoesntCreateAnythingIfTheUserIsNotAdmin(): void
 
         self::expectException(Exception::class);
 
-        $this->planning_controller->create();
+        $request = HTTPRequestBuilder::get()
+            ->withUser($user)
+            ->withProject($this->project)
+            ->build();
+        $this->getPlanningController($request)->create();
     }
 }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryDuplicationTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryDuplicationTest.php
index 2f95cde6255..242a2fea690 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryDuplicationTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryDuplicationTest.php
@@ -28,6 +28,7 @@
 use PlanningPermissionsManager;
 use TrackerFactory;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 
 final class PlanningFactoryDuplicationTest extends TestCase
@@ -36,6 +37,7 @@ final class PlanningFactoryDuplicationTest extends TestCase
     private PlanningFactory $planning_factory;
     private PlanningPermissionsManager&MockObject $planning_permissions_manager;
     private PlanningDao&MockObject $planning_dao;
+    private \PFUser $user;
 
     protected function setUp(): void
     {
@@ -49,6 +51,8 @@ protected function setUp(): void
             $this->planning_permissions_manager
         );
 
+        $this->user = UserTestBuilder::buildWithDefaults();
+
         $this->partial_factory = $this->getMockBuilder(PlanningFactory::class)
             ->setConstructorArgs([$this->planning_dao, $tracker_factory, $this->planning_permissions_manager])
             ->onlyMethods(['getPlanning'])
@@ -68,7 +72,10 @@ public function testItDuplicatesPlannings(): void
         $bug_tracker_copy_id    = 7;
         $faq_tracker_copy_id    = 8;
 
-        $this->partial_factory->method('getPlanning')->with(1)->willReturn(PlanningBuilder::aPlanning(123)->build());
+        $this->partial_factory
+            ->method('getPlanning')
+            ->with($this->user, 1)
+            ->willReturn(PlanningBuilder::aPlanning(123)->build());
 
         $tracker_mapping = [
             $sprint_tracker_id => $sprint_tracker_copy_id,
@@ -110,7 +117,7 @@ public function testItDuplicatesPlannings(): void
 
         $this->planning_permissions_manager->method('getGroupIdsWhoHasPermissionOnPlanning');
 
-        $this->partial_factory->duplicatePlannings($group_id, $tracker_mapping, []);
+        $this->partial_factory->duplicatePlannings($this->user, $group_id, $tracker_mapping, []);
     }
 
     public function testItDoesNothingIfThereAreNoTrackerMappings(): void
@@ -120,7 +127,7 @@ public function testItDoesNothingIfThereAreNoTrackerMappings(): void
 
         $this->planning_dao->expects(self::never())->method('createPlanning');
 
-        $this->planning_factory->duplicatePlannings($group_id, $empty_tracker_mapping, []);
+        $this->planning_factory->duplicatePlannings($this->user, $group_id, $empty_tracker_mapping, []);
     }
 
     public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void
@@ -136,7 +143,10 @@ public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void
         $bug_tracker_copy_id    = 7;
         $faq_tracker_copy_id    = 8;
 
-        $this->partial_factory->method('getPlanning')->with(1)->willReturn(PlanningBuilder::aPlanning(123)->build());
+        $this->partial_factory
+            ->method('getPlanning')
+            ->with($this->user, 1)
+            ->willReturn(PlanningBuilder::aPlanning(123)->build());
 
         $tracker_mapping = [
             $sprint_tracker_id => $sprint_tracker_copy_id,
@@ -189,6 +199,6 @@ public function testItTranslatesUgroupsIdsFromUgroupsMapping(): void
         $this->planning_permissions_manager->method('getGroupIdsWhoHasPermissionOnPlanning')->willReturn($ugroups_mapping);
         $this->planning_dao->method('createPlanning');
 
-        $this->partial_factory->duplicatePlannings($group_id, $tracker_mapping, $ugroups_mapping);
+        $this->partial_factory->duplicatePlannings($this->user, $group_id, $tracker_mapping, $ugroups_mapping);
     }
 }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningByPlanningTrackerTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningByPlanningTrackerTest.php
index c67925cbf24..9b1fe6d3346 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningByPlanningTrackerTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningByPlanningTrackerTest.php
@@ -28,6 +28,7 @@
 use PlanningPermissionsManager;
 use TrackerFactory;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
 
@@ -55,23 +56,28 @@ public function testItReturnsNothingIfThereIsNoAssociatedPlanning(): void
         $tracker = TrackerTestBuilder::aTracker()->withId(99)->build();
         $this->planning_dao->method('searchByMilestoneTrackerId')->willReturn(null);
 
-        self::assertNull($this->planning_factory->getPlanningByPlanningTracker($tracker));
+        self::assertNull($this->planning_factory->getPlanningByPlanningTracker(UserTestBuilder::buildWithDefaults(), $tracker));
     }
 
-    public function testItReturnsAPlanning(): void
+    public function testItReturnsAPlanningWithoutUnreadableTrackers(): void
     {
-        $tracker          = TrackerTestBuilder::aTracker()->withId(99)->build();
-        $planning_tracker = TrackerTestBuilder::aTracker()->withId(1)->build();
-        $backlog_tracker  = TrackerTestBuilder::aTracker()->withId(2)->build();
+        $tracker           = TrackerTestBuilder::aTracker()->withId(99)->build();
+        $planning_tracker  = TrackerTestBuilder::aTracker()->withId(1)->withUserCanView(true)->build();
+        $backlog_tracker   = TrackerTestBuilder::aTracker()->withId(2)->withUserCanView(true)->build();
+        $topsecret_tracker = TrackerTestBuilder::aTracker()->withId(3)->withUserCanView(false)->build();
 
         $planning = PlanningBuilder::aPlanning(102)
             ->withMilestoneTracker($planning_tracker)
             ->withBacklogTrackers($backlog_tracker)
             ->build();
 
-        $this->tracker_factory->expects(self::exactly(2))->method('getTrackerById')
-            ->withConsecutive([1], [2])
-            ->willReturnOnConsecutiveCalls($planning_tracker, $backlog_tracker);
+        $this->tracker_factory
+            ->method('getTrackerById')
+            ->willReturnCallback(fn ($id) => match ($id) {
+                1 => $planning_tracker,
+                2 => $backlog_tracker,
+                3 => $topsecret_tracker,
+            });
 
         $rows = [
             'id'                  => 12,
@@ -85,7 +91,7 @@ public function testItReturnsAPlanning(): void
         $this->planning_dao->method('searchBacklogTrackersByPlanningId')->willReturn([['tracker_id' => 2]]);
         $this->planning_dao->method('searchByMilestoneTrackerId')->willReturn($rows);
 
-        $retrieved_planning = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+        $retrieved_planning = $this->planning_factory->getPlanningByPlanningTracker(UserTestBuilder::buildWithDefaults(), $tracker);
         self::assertEquals($planning->getPlanningTracker(), $retrieved_planning->getPlanningTracker());
         self::assertEquals($planning->getBacklogTrackers(), $retrieved_planning->getBacklogTrackers());
     }
diff --git a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningTest.php b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningTest.php
index caede0f99d3..e5f67a0aed2 100644
--- a/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningTest.php
+++ b/plugins/agiledashboard/tests/unit/AgileDashboard/Planning/PlanningFactoryTestGetPlanningTest.php
@@ -72,11 +72,11 @@ protected function setUp(): void
 
         $this->user = UserTestBuilder::buildWithDefaults();
 
-        $this->planning_tracker = TrackerTestBuilder::aTracker()->withId(103)->build();
-        $this->backlog_tracker  = TrackerTestBuilder::aTracker()->withId(104)->build();
+        $this->planning_tracker = TrackerTestBuilder::aTracker()->withId(103)->withUserCanView(true)->build();
+        $this->backlog_tracker  = TrackerTestBuilder::aTracker()->withId(104)->withUserCanView(true)->build();
 
-        $epic_tracker          = TrackerTestBuilder::aTracker()->withId(101)->build();
-        $story_tracker         = TrackerTestBuilder::aTracker()->withId(100)->build();
+        $epic_tracker          = TrackerTestBuilder::aTracker()->withId(101)->withUserCanView(true)->build();
+        $story_tracker         = TrackerTestBuilder::aTracker()->withId(100)->withUserCanView(true)->build();
         $this->release_tracker = $this->mockTrackerWithId(107);
         $this->sprint_tracker  = $this->mockTrackerWithId(108);
 
@@ -162,7 +162,7 @@ public function testItCanRetrieveBothAPlanningAndItsTrackers(): void
             ->with($planning_id)
             ->willReturn([['tracker_id' => 104]]);
 
-        $planning = $this->planning_factory->getPlanning($planning_id);
+        $planning = $this->planning_factory->getPlanning($this->user, $planning_id);
 
         self::assertInstanceOf(Planning::class, $planning);
         self::assertEquals($this->planning_tracker, $planning->getPlanningTracker());
diff --git a/plugins/agiledashboard/tests/unit/Planning/Planning_RequestValidatorTest.php b/plugins/agiledashboard/tests/unit/Planning/Planning_RequestValidatorTest.php
index 3236456e1fb..6519f7a8e65 100644
--- a/plugins/agiledashboard/tests/unit/Planning/Planning_RequestValidatorTest.php
+++ b/plugins/agiledashboard/tests/unit/Planning/Planning_RequestValidatorTest.php
@@ -21,6 +21,7 @@
 use Tuleap\AgileDashboard\AgileDashboard\Planning\VerifyTrackerAccessDuringImportStrategy;
 use Tuleap\AgileDashboard\AgileDashboard\Planning\EnsureThatTrackerIsReadableByUser;
 use Tuleap\AgileDashboard\Test\Builders\PlanningBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
 
 //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps
@@ -60,21 +61,18 @@ final class Planning_RequestValidatorTest extends \Tuleap\Test\PHPUnit\TestCase
     private $tracker_factory;
     private PlanningFactory|\PHPUnit\Framework\MockObject\MockObject $planning_factory;
     private EnsureThatTrackerIsReadableByUser $tracker_access_during_import_strategy;
+    private PFUser $user;
 
     protected function setUp(): void
     {
+        $this->user = UserTestBuilder::buildWithDefaults();
+
         $this->planning_factory = $this->createMock(\PlanningFactory::class);
         $this->tracker_factory  = $this->createMock(TrackerFactory::class);
         $this->validator        = new Planning_RequestValidator(
             $this->planning_factory,
             $this->tracker_factory,
-            new class implements \Tuleap\User\ProvideCurrentUser
-            {
-                public function getCurrentUser(): \PFUser
-                {
-                    return \Tuleap\Test\Builders\UserTestBuilder::aUser()->build();
-                }
-            }
+            \Tuleap\Test\Stubs\ProvideCurrentUserStub::buildWithUser($this->user),
         );
 
         $this->release_planning_id = 34;
@@ -82,6 +80,7 @@ public function getCurrentUser(): \PFUser
         $this->sprints_tracker_id  = 78;
         $this->holidays_tracker_id = 90;
 
+
         $this->tracker_access_during_import_strategy = new EnsureThatTrackerIsReadableByUser();
     }
 
@@ -189,7 +188,7 @@ public function testItValidatesTheRequestWhenPlanningTrackerCannotBeSeenByTheCur
             ->withMilestoneTracker($release_tracker)
             ->build();
 
-        $this->planning_factory->method('getPlanning')->with($this->release_planning_id)->willReturn(
+        $this->planning_factory->method('getPlanning')->with($this->user, $this->release_planning_id)->willReturn(
             $this->release_planning
         );
         $this->planning_factory->method('getPlanningTrackerIdsByGroupId')->with($group_id)->willReturn(
@@ -246,7 +245,7 @@ private function getAReleaseWithPlanning(): void
             ->withMilestoneTracker($release_tracker)
             ->build();
 
-        $this->planning_factory->method('getPlanning')->with($this->release_planning_id)->willReturn(
+        $this->planning_factory->method('getPlanning')->with($this->user, $this->release_planning_id)->willReturn(
             $this->release_planning
         );
         $this->planning_factory->method('getPlanningTrackerIdsByGroupId')->with($group_id)->willReturn(
diff --git a/plugins/cardwall/include/SingleCardBuilder.class.php b/plugins/cardwall/include/SingleCardBuilder.class.php
index f984d07f4b7..5be5d2c4320 100644
--- a/plugins/cardwall/include/SingleCardBuilder.class.php
+++ b/plugins/cardwall/include/SingleCardBuilder.class.php
@@ -72,7 +72,7 @@ public function __construct(
     public function getSingleCard(PFUser $user, $artifact_id, $planning_id)
     {
         $card_artifact       = $this->getArtifact($artifact_id);
-        $config              = $this->getConfig($planning_id);
+        $config              = $this->getConfig($user, $planning_id);
         $field_provider      = $this->getFieldRetriever($config);
         $columns             = $config->getDashboardColumns();
         $display_preferences = new Cardwall_UserPreferences_UserPreferencesDisplayUser(
@@ -177,18 +177,18 @@ private function getArtifact($artifact_id)
         throw new CardControllerBuilderRequestIdException();
     }
 
-    private function getConfig($planning_id)
+    private function getConfig(PFUser $user, $planning_id)
     {
-        $config = $this->config_factory->getOnTopConfigByPlanning($this->getPlanning($planning_id));
+        $config = $this->config_factory->getOnTopConfigByPlanning($this->getPlanning($user, $planning_id));
         if ($config && $config->isEnabled()) {
             return $config;
         }
         throw new CardControllerBuilderRequestDataException();
     }
 
-    private function getPlanning($planning_id)
+    private function getPlanning(PFUser $user, $planning_id)
     {
-        $planning = $this->planning_factory->getPlanning($planning_id);
+        $planning = $this->planning_factory->getPlanning($user, $planning_id);
         if ($planning) {
             return $planning;
         }
diff --git a/plugins/cardwall/include/cardwallPlugin.php b/plugins/cardwall/include/cardwallPlugin.php
index d43f91501c9..ef30021ae09 100644
--- a/plugins/cardwall/include/cardwallPlugin.php
+++ b/plugins/cardwall/include/cardwallPlugin.php
@@ -480,7 +480,7 @@ public function redirectAfterArtifactCreationOrUpdateEvent(RedirectAfterArtifact
                 $redirect_params = current($cardwall);
                 switch ($redirect_to) {
                     case 'agile':
-                        $this->redirectToAgileDashboard($redirect, $redirect_params);
+                        $this->redirectToAgileDashboard($event->getRequest()->getCurrentUser(), $redirect, $redirect_params);
                         break;
                     case 'renderer':
                         $this->redirectToRenderer($redirect, $redirect_params);
@@ -492,11 +492,11 @@ public function redirectAfterArtifactCreationOrUpdateEvent(RedirectAfterArtifact
         }
     }
 
-    private function redirectToAgileDashboard(Tracker_Artifact_Redirect $redirect, array $redirect_params)
+    private function redirectToAgileDashboard(PFUser $user, Tracker_Artifact_Redirect $redirect, array $redirect_params)
     {
         $planning_id = key($redirect_params);
         $artifact_id = current($redirect_params);
-        $planning    = PlanningFactory::build()->getPlanning($planning_id);
+        $planning    = PlanningFactory::build()->getPlanning($user, $planning_id);
         if ($planning) {
             $redirect->base_url         = AGILEDASHBOARD_BASE_URL;
             $redirect->query_parameters = [
diff --git a/plugins/program_management/include/Adapter/Program/PlanningAdapter.php b/plugins/program_management/include/Adapter/Program/PlanningAdapter.php
index 53683c3f6b5..61b420787e6 100644
--- a/plugins/program_management/include/Adapter/Program/PlanningAdapter.php
+++ b/plugins/program_management/include/Adapter/Program/PlanningAdapter.php
@@ -95,7 +95,7 @@ public function retrieveSecondPlanningMilestoneTracker(
             return null;
         }
 
-        $children_planning = $this->planning_factory->getChildrenPlanning($root_planning);
+        $children_planning = $this->planning_factory->getChildrenPlanning($pfuser, $root_planning);
         if (! $children_planning) {
             $errors_collector?->addTeamSprintPlanningNotFoundOrNotAccessible($project);
             return null;
diff --git a/plugins/program_management/tests/unit/Adapter/Events/TrackersDuplicatedHandlerTest.php b/plugins/program_management/tests/unit/Adapter/Events/TrackersDuplicatedHandlerTest.php
index df0f588b4a0..4a9b99025f1 100644
--- a/plugins/program_management/tests/unit/Adapter/Events/TrackersDuplicatedHandlerTest.php
+++ b/plugins/program_management/tests/unit/Adapter/Events/TrackersDuplicatedHandlerTest.php
@@ -32,6 +32,7 @@
 use Tuleap\ProgramManagement\Tests\Stub\Program\Plan\RetrievePlanConfigurationStub;
 use Tuleap\Project\MappingRegistry;
 use Tuleap\Test\Builders\ProjectTestBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\PHPUnit\TestCase;
 use Tuleap\Tracker\TrackerEventTrackersDuplicated;
 
@@ -94,6 +95,7 @@ private function handle(): void
         );
         $handler->handle(
             new TrackerEventTrackersDuplicated(
+                UserTestBuilder::buildWithDefaults(),
                 [],
                 [],
                 [],
diff --git a/plugins/projectmilestones/include/Widget/ProjectMilestonesPresenterBuilder.php b/plugins/projectmilestones/include/Widget/ProjectMilestonesPresenterBuilder.php
index eb79d7b3502..59e6b49af96 100644
--- a/plugins/projectmilestones/include/Widget/ProjectMilestonesPresenterBuilder.php
+++ b/plugins/projectmilestones/include/Widget/ProjectMilestonesPresenterBuilder.php
@@ -194,8 +194,9 @@ public function getProjectMilestonePresenter(?Project $project, ?Planning $root_
             throw ProjectMilestonesException::buildProjectDontExist();
         }
 
+        $user = $this->request->getCurrentUser();
         try {
-            $this->project_access_checker->checkUserCanAccessProject($this->request->getCurrentUser(), $project);
+            $this->project_access_checker->checkUserCanAccessProject($user, $project);
         } catch (Project_AccessPrivateException $e) {
             throw ProjectMilestonesException::buildUserNotAccessToPrivateProject();
         } catch (Project_AccessDeletedException | Project_AccessProjectNotFoundException | Project_AccessRestrictedException | ProjectAccessSuspendedException $e) {
@@ -217,7 +218,7 @@ public function getProjectMilestonePresenter(?Project $project, ?Planning $root_
             $project,
             $this->getNumberUpcomingReleases(),
             $this->getNumberBacklogItems(),
-            $this->getTrackersIdAgileDashboard(),
+            $this->getTrackersIdAgileDashboard($user),
             $this->getLabelTrackerPlanning(),
             $this->isTimeframeDurationField(),
             $this->getLabelStartDateField(),
@@ -253,15 +254,15 @@ private function getNumberBacklogItems(): int
         return $backlog->count();
     }
 
-    private function getTrackersIdAgileDashboard(): array
+    private function getTrackersIdAgileDashboard(\PFUser $user): array
     {
         $trackers_agile_dashboard = [];
-        $backlog_milestones       = $this->agile_dashboard_milestone_backlog_backlog_factory->getBacklog($this->getVirturalTopMilestone());
+        $backlog_milestones       = $this->agile_dashboard_milestone_backlog_backlog_factory->getBacklog($user, $this->getVirturalTopMilestone());
         $trackers_backlogs        = $backlog_milestones->getDescendantTrackers();
 
         foreach ($trackers_backlogs as $tracker_backlog) {
             $tracker_agile_dashboard = [
-                'id' => (int) $tracker_backlog->getId(),
+                'id' => $tracker_backlog->getId(),
                 'color_name' => $tracker_backlog->getColor()->getName(),
                 'label' => $tracker_backlog->getName(),
             ];
diff --git a/plugins/tracker/include/Tracker/FormElement/ChartMessageFetcher.php b/plugins/tracker/include/Tracker/FormElement/ChartMessageFetcher.php
index e15f526c44d..d4b5321a918 100644
--- a/plugins/tracker/include/Tracker/FormElement/ChartMessageFetcher.php
+++ b/plugins/tracker/include/Tracker/FormElement/ChartMessageFetcher.php
@@ -111,7 +111,7 @@ public function fetchWarnings(Tracker_FormElement_Field $field, ChartFieldUsage
             }
         }
 
-        $event = new MessageFetcherAdditionalWarnings($field);
+        $event = new MessageFetcherAdditionalWarnings($user, $field);
         $this->event_manager->processEvent($event);
 
         $warnings = array_merge($warnings, $event->getWarnings());
diff --git a/plugins/tracker/include/Tracker/FormElement/Event/MessageFetcherAdditionalWarnings.php b/plugins/tracker/include/Tracker/FormElement/Event/MessageFetcherAdditionalWarnings.php
index 3ef7af4e2b8..525b2155af9 100644
--- a/plugins/tracker/include/Tracker/FormElement/Event/MessageFetcherAdditionalWarnings.php
+++ b/plugins/tracker/include/Tracker/FormElement/Event/MessageFetcherAdditionalWarnings.php
@@ -37,7 +37,7 @@ class MessageFetcherAdditionalWarnings implements Dispatchable
      */
     private $warnings = [];
 
-    public function __construct(Tracker_FormElement_Field $field)
+    public function __construct(public readonly \PFUser $user, Tracker_FormElement_Field $field)
     {
         $this->field = $field;
     }
diff --git a/plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php b/plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php
index 3ea8d9e7e30..1f01576267f 100644
--- a/plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php
+++ b/plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php
@@ -226,10 +226,8 @@ protected function getDao()
     /**
      * Return true if this field is the semantic title field of the tracker,
      * false otherwise if not or if there is no title field defined.
-     *
-     * @return bool true if the field is the 'title' of the tracker
      */
-    protected function isSemanticTitle()
+    protected function isSemanticTitle(): bool
     {
         $semantic_manager = new Tracker_SemanticManager($this->getTracker());
         $semantics        = $semantic_manager->getSemantics();
diff --git a/plugins/tracker/include/Tracker/Semantic/Tracker_SemanticManager.class.php b/plugins/tracker/include/Tracker/Semantic/Tracker_SemanticManager.class.php
index efd79edb0dc..48fe80e53b9 100644
--- a/plugins/tracker/include/Tracker/Semantic/Tracker_SemanticManager.class.php
+++ b/plugins/tracker/include/Tracker/Semantic/Tracker_SemanticManager.class.php
@@ -41,6 +41,7 @@ class Tracker_SemanticManager
      * Parameters:
      * 'semantics' => @var Tracker_SemanticCollection A collection of semantics that needs adding to.
      * 'tracker'   => @var Tracker                    The Tracker the semantics are defined upon
+     * 'user'      => @var PFUser                     The current user
      *
      * Expected results
      * The semantics parameter is populated with additional semantic fields
@@ -187,10 +188,7 @@ public function getSemanticsTheFieldBelongsTo(Tracker_FormElement_Field $field):
         return new CollectionOfSemanticsUsingAParticularTrackerField($field, $semantics_using_field);
     }
 
-    /**
-     * @return Tracker_SemanticCollection
-     */
-    public function getSemantics()
+    public function getSemantics(): Tracker_SemanticCollection
     {
         $semantics = new Tracker_SemanticCollection();
 
@@ -221,7 +219,7 @@ public function getSemantics()
         $semantics->add($semantic_progress);
         $semantics->add($this->tracker->getTooltip());
 
-        $this->addOtherSemantics($semantics);
+        $this->addOtherSemantics(UserManager::instance()->getCurrentUser(), $semantics);
 
         return $semantics;
     }
@@ -230,13 +228,14 @@ public function getSemantics()
      * Use an event to get semantics from other plugins.
      *
      */
-    private function addOtherSemantics(Tracker_SemanticCollection $semantics)
+    private function addOtherSemantics(PFUser $user, Tracker_SemanticCollection $semantics): void
     {
          EventManager::instance()->processEvent(
              self::TRACKER_EVENT_MANAGE_SEMANTICS,
              [
                  'semantics'   => $semantics,
                  'tracker'     => $this->tracker,
+                 'user'        => $user,
              ]
          );
     }
diff --git a/plugins/tracker/include/Tracker/TrackerEventTrackersDuplicated.php b/plugins/tracker/include/Tracker/TrackerEventTrackersDuplicated.php
index b9bde241922..aa6cc36726d 100644
--- a/plugins/tracker/include/Tracker/TrackerEventTrackersDuplicated.php
+++ b/plugins/tracker/include/Tracker/TrackerEventTrackersDuplicated.php
@@ -30,6 +30,7 @@ final class TrackerEventTrackersDuplicated implements \Tuleap\Event\Dispatchable
      * @param list<array{from: int, to: int, values: array, workflow: bool}> $field_mapping
      */
     public function __construct(
+        public readonly \PFUser $user,
         public readonly array $tracker_mapping,
         public readonly array $field_mapping,
         public readonly array $report_mapping,
diff --git a/plugins/tracker/include/Tracker/TrackerFactory.class.php b/plugins/tracker/include/Tracker/TrackerFactory.class.php
index eb8195d6b4e..70ffb4d44a2 100644
--- a/plugins/tracker/include/Tracker/TrackerFactory.class.php
+++ b/plugins/tracker/include/Tracker/TrackerFactory.class.php
@@ -542,8 +542,13 @@ protected function postCreateActions(Tracker $tracker, TrackerCreationSettings $
      * - the shared fields
      * - etc.
      */
-    public function duplicate(DBTransactionExecutor $transaction_executor, \Project $from_project, \Project $to_project, MappingRegistry $mapping_registry): void
-    {
+    public function duplicate(
+        PFUser $user,
+        DBTransactionExecutor $transaction_executor,
+        \Project $from_project,
+        \Project $to_project,
+        MappingRegistry $mapping_registry,
+    ): void {
         $from_project_id  = (int) $from_project->getID();
         $to_project_id    = (int) $to_project->getID();
         $tracker_ids_list = [];
@@ -607,6 +612,7 @@ function () use ($from_project_id, $tracker_ids_list, $mapping_registry, $to_pro
         $shared_factory->fixOriginalFieldIdsAfterDuplication($to_project_id, $from_project_id, $field_mapping);
 
         $this->getEventDispatcher()->dispatch(new TrackerEventTrackersDuplicated(
+            $user,
             $tracker_mapping,
             $field_mapping,
             $report_mapping,
diff --git a/plugins/tracker/include/Tracker/TrackerManager.class.php b/plugins/tracker/include/Tracker/TrackerManager.class.php
index c90aa89c25a..68553fa95ef 100644
--- a/plugins/tracker/include/Tracker/TrackerManager.class.php
+++ b/plugins/tracker/include/Tracker/TrackerManager.class.php
@@ -781,9 +781,9 @@ public function fetchTrackerSwitcher(PFUser $user, $separator, ?Project $include
     /**
      * On project creation, copy template trackers to destination project
      */
-    public function duplicate(DBTransactionExecutor $transaction_executor, \Project $from_project, \Project $to_project, MappingRegistry $mapping_registry): void
+    public function duplicate(PFUser $user, DBTransactionExecutor $transaction_executor, \Project $from_project, \Project $to_project, MappingRegistry $mapping_registry): void
     {
-        $this->getTrackerFactory()->duplicate($transaction_executor, $from_project, $to_project, $mapping_registry);
+        $this->getTrackerFactory()->duplicate($user, $transaction_executor, $from_project, $to_project, $mapping_registry);
         $this->duplicateReferences((int) $from_project->getID());
     }
 
diff --git a/plugins/tracker/include/trackerPlugin.php b/plugins/tracker/include/trackerPlugin.php
index 72d5ec8a7b3..51b99ca018c 100644
--- a/plugins/tracker/include/trackerPlugin.php
+++ b/plugins/tracker/include/trackerPlugin.php
@@ -706,6 +706,7 @@ public function registerProjectCreationEvent(RegisterProjectCreationEvent $event
 
             $tracker_manager = new TrackerManager();
             $tracker_manager->duplicate(
+                $event->getProjectAdministrator(),
                 new DBTransactionExecutorWithConnection(DBFactory::getMainTuleapDBConnection()),
                 $template,
                 $project,
diff --git a/plugins/tracker/tests/unit/Tracker/TrackerFactoryDuplicationTest.php b/plugins/tracker/tests/unit/Tracker/TrackerFactoryDuplicationTest.php
index 1a23289f75b..e003fc4b652 100644
--- a/plugins/tracker/tests/unit/Tracker/TrackerFactoryDuplicationTest.php
+++ b/plugins/tracker/tests/unit/Tracker/TrackerFactoryDuplicationTest.php
@@ -26,6 +26,7 @@
 use PHPUnit\Framework\MockObject\MockObject;
 use Tuleap\Project\MappingRegistry;
 use Tuleap\Test\Builders\ProjectTestBuilder;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\Test\DB\DBTransactionExecutorPassthrough;
 use Tuleap\Tracker\Semantic\Timeframe\SemanticTimeframeDuplicator;
 use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
@@ -87,6 +88,7 @@ public function testDuplicateDuplicatesAllTrackersWithHierarchy(): void
         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');
 
         $this->tracker_factory->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId(100)->build(),
             ProjectTestBuilder::aProject()->withId(999)->build(),
@@ -137,6 +139,7 @@ public function testDuplicateDuplicatesSharedFields(): void
         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');
 
         $this->tracker_factory->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId($from_project_id)->build(),
             ProjectTestBuilder::aProject()->withId($to_project_id)->build(),
@@ -155,6 +158,7 @@ public function testDuplicateIgnoresNonDuplicatableTrackers(): void
         $this->tracker_factory->expects(self::never())->method('create');
 
         $this->tracker_factory->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId(100)->build(),
             ProjectTestBuilder::aProject()->withId(999)->build(),
@@ -187,6 +191,7 @@ public function testDuplicateDuplicatesAllTriggerRules(): void
         $this->semantic_timeframe_duplicator->expects(self::once())->method('duplicateSemanticTimeframeForAllTrackers');
 
         $this->tracker_factory->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId(100)->build(),
             ProjectTestBuilder::aProject()->withId(999)->build(),
@@ -220,6 +225,7 @@ public function testDuplicateDuplicatesAllTrackersWithSemanticTimeframe(): void
             ->with([], [1234 => 555]);
 
         $this->tracker_factory->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId(100)->build(),
             ProjectTestBuilder::aProject()->withId(999)->build(),
diff --git a/plugins/tracker/tests/unit/Tracker/TrackerManagerTest.php b/plugins/tracker/tests/unit/Tracker/TrackerManagerTest.php
index 37c5d98c639..602e1549c16 100644
--- a/plugins/tracker/tests/unit/Tracker/TrackerManagerTest.php
+++ b/plugins/tracker/tests/unit/Tracker/TrackerManagerTest.php
@@ -248,6 +248,7 @@ public function testDuplicateCopyReferences(): void
         $rm->expects(self::once())->method('createReference')->with($r2);
 
         $tm->duplicate(
+            UserTestBuilder::buildWithDefaults(),
             new \Tuleap\Test\DB\DBTransactionExecutorPassthrough(),
             ProjectTestBuilder::aProject()->withId($source_project_id)->build(),
             ProjectTestBuilder::aProject()->withId($destination_project_id)->build(),
diff --git a/plugins/velocity/include/Velocity/Semantic/BacklogRetriever.php b/plugins/velocity/include/Velocity/Semantic/BacklogRetriever.php
index 4c130a2303d..ad11fbbc4fd 100644
--- a/plugins/velocity/include/Velocity/Semantic/BacklogRetriever.php
+++ b/plugins/velocity/include/Velocity/Semantic/BacklogRetriever.php
@@ -38,9 +38,9 @@ public function __construct(PlanningFactory $planning_factory)
     /**
      * @return Tracker[]
      */
-    public function getBacklogTrackers(Tracker $tracker)
+    public function getBacklogTrackers(\PFUser $user, Tracker $tracker)
     {
-        $planning_trackers = $this->planning_factory->getPlanningByPlanningTracker($tracker);
+        $planning_trackers = $this->planning_factory->getPlanningByPlanningTracker($user, $tracker);
         if (! $planning_trackers) {
             return [];
         }
diff --git a/plugins/velocity/include/Velocity/Semantic/SemanticVelocity.php b/plugins/velocity/include/Velocity/Semantic/SemanticVelocity.php
index ff088901aad..67bc4eaea81 100644
--- a/plugins/velocity/include/Velocity/Semantic/SemanticVelocity.php
+++ b/plugins/velocity/include/Velocity/Semantic/SemanticVelocity.php
@@ -38,6 +38,7 @@
 use Tuleap\Tracker\Semantic\Status\Done\SemanticDoneDao;
 use Tuleap\Tracker\Semantic\Status\Done\SemanticDoneFactory;
 use Tuleap\Tracker\Semantic\Status\Done\SemanticDoneValueChecker;
+use UserManager;
 
 class SemanticVelocity extends Tracker_Semantic
 {
@@ -101,7 +102,7 @@ public function fetchForSemanticsHomepage(): string
             $this->getBacklogRetriever(),
             new VelocitySemanticChecker()
         );
-        $velocity_presenter = $builder->build($this->getTracker(), $this->semantic_done, $this->velocity_field);
+        $velocity_presenter = $builder->build(UserManager::instance()->getCurrentUser(), $this->getTracker(), $this->semantic_done, $this->velocity_field);
 
         return $renderer->renderToString('velocity-intro', $velocity_presenter);
     }
@@ -122,6 +123,7 @@ public function displayAdmin(
 
         $renderer  = TemplateRendererFactory::build()->getRenderer(VELOCITY_BASE_DIR . '/templates');
         $presenter = $builder->build(
+            $current_user,
             $this->getTracker(),
             $this->getCSRFSynchronizerToken(),
             $this->semantic_done,
diff --git a/plugins/velocity/include/Velocity/Semantic/SemanticVelocityAdminPresenterBuilder.php b/plugins/velocity/include/Velocity/Semantic/SemanticVelocityAdminPresenterBuilder.php
index c33059adf3b..a12fb28e896 100644
--- a/plugins/velocity/include/Velocity/Semantic/SemanticVelocityAdminPresenterBuilder.php
+++ b/plugins/velocity/include/Velocity/Semantic/SemanticVelocityAdminPresenterBuilder.php
@@ -50,13 +50,14 @@ public function __construct(
     }
 
     public function build(
+        \PFUser $user,
         Tracker $tracker,
         CSRFSynchronizerToken $csrf,
         SemanticDone $semantic_done,
         array $possible_fields,
         $semantic_velocity_field_id,
     ) {
-        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($tracker);
+        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($user, $tracker);
         $backlog_required_trackers_collection = $this->missing_requirement_retriever->buildCollectionFromBacklogTrackers(
             $backlog_trackers
         );
diff --git a/plugins/velocity/include/Velocity/Semantic/SemanticVelocityPresenterBuilder.php b/plugins/velocity/include/Velocity/Semantic/SemanticVelocityPresenterBuilder.php
index 57cb31b6e4d..b0bd674265a 100644
--- a/plugins/velocity/include/Velocity/Semantic/SemanticVelocityPresenterBuilder.php
+++ b/plugins/velocity/include/Velocity/Semantic/SemanticVelocityPresenterBuilder.php
@@ -50,11 +50,12 @@ public function __construct(
     }
 
     public function build(
+        \PFUser $user,
         Tracker $tracker,
         SemanticDone $semantic_done,
         ?Tracker_FormElement_Field $velocity_field = null,
     ) {
-        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($tracker);
+        $backlog_trackers                     = $this->backlog_retriever->getBacklogTrackers($user, $tracker);
         $backlog_required_trackers_collection = $this->missing_requirement_retriever->buildCollectionFromBacklogTrackers(
             $backlog_trackers
         );
diff --git a/plugins/velocity/include/velocityPlugin.php b/plugins/velocity/include/velocityPlugin.php
index dd4999311c2..2ac1cad5242 100644
--- a/plugins/velocity/include/velocityPlugin.php
+++ b/plugins/velocity/include/velocityPlugin.php
@@ -75,21 +75,22 @@ public function getPluginInfo()
     #[\Tuleap\Plugin\ListeningToEventName(Tracker_SemanticManager::TRACKER_EVENT_MANAGE_SEMANTICS)]
     public function trackerEventManageSemantics($parameters): void // @codingStandardsIgnoreLine
     {
+        $user      = $parameters['user'];
         $tracker   = $parameters['tracker'];
         $semantics = $parameters['semantics'];
         \assert($semantics instanceof Tracker_SemanticCollection);
 
-        if (! $this->isAPlanningTrackers($tracker)) {
+        if (! $this->isAPlanningTrackers($user, $tracker)) {
             return;
         }
 
         $semantics->insertAfter(SemanticDone::NAME, SemanticVelocity::load($tracker));
     }
 
-    private function isAPlanningTrackers(Tracker $semantic_tracker)
+    private function isAPlanningTrackers(PFUser $user, Tracker $semantic_tracker): bool
     {
         $planning_factory = PlanningFactory::build();
-        $planning         = $planning_factory->getPlanningByPlanningTracker($semantic_tracker);
+        $planning         = $planning_factory->getPlanningByPlanningTracker($user, $semantic_tracker);
 
         if ($planning) {
             return $semantic_tracker->getId() === $planning->getPlanningTrackerId();
diff --git a/tests/psalm/psalm.xml b/tests/psalm/psalm.xml
index 8aacd58f5c9..0eec1878f2e 100644
--- a/tests/psalm/psalm.xml
+++ b/tests/psalm/psalm.xml
@@ -192,7 +192,6 @@
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetBareMilestoneByArtifactIdTest.php"/>
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetLastMilestoneCreatedTest.php"/>
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactTest.php"/>
-            <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneFromArtifactWithPlannedArtifactsTest.php"/>
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneTest.php"/>
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetMilestoneWithAncestorsTest.php"/>
             <file name="plugins/agiledashboard/tests/unit/AgileDashboard/Planning/MilestoneFactoryGetPaginatedMilestonesTest.php"/>
