diff --git a/config/areas/languages/views.php b/config/areas/languages/views.php
index f37ded0247..ac2d6d4904 100644
--- a/config/areas/languages/views.php
+++ b/config/areas/languages/views.php
@@ -12,12 +12,17 @@
 			return App::instance()->option('languages.variables', true) !== false;
 		},
 		'action'  => function (string $code) {
+			$kirby        = App::instance();
 			$language     = Find::language($code);
 			$link         = '/languages/' . $language->code();
 			$strings      = [];
-			$foundation   = App::instance()->defaultLanguage()->translations();
+			$foundation   = $kirby->defaultLanguage()->translations();
 			$translations = $language->translations();
 
+			// TODO: update following line and adapt for update and delete options
+			// when new `languageVariables.*` permissions available
+			$canUpdate = $kirby->user()?->role()->permissions()->for('languages', 'update') === true;
+
 			ksort($foundation);
 
 			foreach ($foundation as $key => $value) {
@@ -26,13 +31,14 @@
 					'value'   => $translations[$key] ?? null,
 					'options' => [
 						[
-							'click' => 'update',
-							'icon'  => 'edit',
-							'text'  => I18n::translate('edit'),
+							'click'    => 'update',
+							'disabled' => $canUpdate === false,
+							'icon'     => 'edit',
+							'text'     => I18n::translate('edit'),
 						],
 						[
 							'click'    => 'delete',
-							'disabled' => $language->isDefault() === false,
+							'disabled' => $canUpdate === false || $language->isDefault() === false,
 							'icon'     => 'trash',
 							'text'     => I18n::translate('delete'),
 						]
diff --git a/i18n/translations/en.json b/i18n/translations/en.json
index 1592770f82..d43474d3b7 100644
--- a/i18n/translations/en.json
+++ b/i18n/translations/en.json
@@ -126,9 +126,12 @@
 	"error.form.notSaved": "The form could not be saved",
 
 	"error.language.code": "Please enter a valid code for the language",
+	"error.language.create.permission": "You are not allowed to create a language",
+	"error.language.delete.permission": "You are not allowed to delete the language",
 	"error.language.duplicate": "The language already exists",
 	"error.language.name": "Please enter a valid name for the language",
 	"error.language.notFound": "The language could not be found",
+	"error.language.update.permission": "You are not allowed to update the language",
 
 	"error.layout.validation.block": "There's an error on the \"{field}\" field in block {blockIndex} using the \"{fieldset}\" block type in layout {layoutIndex}",
 	"error.layout.validation.settings": "There's an error in layout {index} settings",
diff --git a/panel/src/components/Views/Languages/LanguageView.vue b/panel/src/components/Views/Languages/LanguageView.vue
index d2fe42e239..caf32071f4 100644
--- a/panel/src/components/Views/Languages/LanguageView.vue
+++ b/panel/src/components/Views/Languages/LanguageView.vue
@@ -4,7 +4,7 @@
 			<k-prev-next :prev="prev" :next="next" />
 		</template>
 
-		<k-header :editable="true" @edit="update()">
+		<k-header :editable="canUpdate" @edit="update()">
 			{{ name }}
 
 			<template #buttons>
@@ -18,6 +18,7 @@
 						variant="filled"
 					/>
 					<k-button
+						:disabled="!canUpdate"
 						:title="$t('settings')"
 						icon="cog"
 						size="sm"
@@ -26,6 +27,7 @@
 					/>
 					<k-button
 						v-if="deletable"
+						:disabled="!$panel.permissions.languages.delete"
 						:title="$t('delete')"
 						icon="trash"
 						size="sm"
@@ -42,8 +44,12 @@
 
 		<k-section
 			:buttons="[
+				/**
+				 * @todo update disabled prop when new `languageVariables.*` permissions available
+				 */
 				{
 					click: createTranslation,
+					disabled: !canUpdate,
 					icon: 'add',
 					text: $t('add')
 				}
@@ -63,13 +69,14 @@
 							mobile: true
 						}
 					}"
+					:disabled="!canUpdate"
 					:rows="translations"
 					@cell="updateTranslation"
 					@option="option"
 				/>
 			</template>
 			<template v-else>
-				<k-empty icon="translate" @click="createTranslation">
+				<k-empty :disabled="!canUpdate" icon="translate" @click="createTranslation">
 					{{ $t("language.variables.empty") }}
 				</k-empty>
 			</template>
@@ -95,11 +102,24 @@ export default {
 		translations: Array,
 		url: String
 	},
+	computed: {
+		canUpdate() {
+			return this.$panel.permissions.languages.update;
+		}
+	},
 	methods: {
 		createTranslation() {
+			if (!this.canUpdate) {
+				return;
+			}
+
 			this.$dialog(`languages/${this.id}/translations/create`);
 		},
 		option(option, row) {
+			if (!this.canUpdate) {
+				return;
+			}
+
 			// for the compatibility of the encoded url in different environments,
 			// it is also encoded with base64 to reduce special characters
 			this.$dialog(
@@ -121,6 +141,10 @@ export default {
 			});
 		},
 		updateTranslation({ row }) {
+			if (!this.canUpdate) {
+				return;
+			}
+
 			// for the compatibility of the encoded url in different environments,
 			// it is also encoded with base64 to reduce special characters
 			this.$dialog(
diff --git a/panel/src/components/Views/Languages/LanguagesView.vue b/panel/src/components/Views/Languages/LanguagesView.vue
index 6ae4dd7f20..ba2503119d 100644
--- a/panel/src/components/Views/Languages/LanguagesView.vue
+++ b/panel/src/components/Views/Languages/LanguagesView.vue
@@ -5,6 +5,7 @@
 
 			<k-button-group slot="buttons">
 				<k-button
+					:disabled="!$panel.permissions.languages.create"
 					:text="$t('language.create')"
 					icon="add"
 					size="sm"
@@ -24,14 +25,23 @@
 					v-if="secondaryLanguages.length"
 					:items="secondaryLanguages"
 				/>
-				<k-empty v-else icon="translate" @click="$dialog('languages/create')">
+				<k-empty
+					v-else
+					icon="translate"
+					:disabled="!$panel.permissions.languages.create"
+					@click="$dialog('languages/create')"
+				>
 					{{ $t("languages.secondary.empty") }}
 				</k-empty>
 			</k-section>
 		</template>
 
 		<template v-else-if="languages.length === 0">
-			<k-empty icon="translate" @click="$dialog('languages/create')">
+			<k-empty
+				icon="translate"
+				:disabled="!$panel.permissions.languages.create"
+				@click="$dialog('languages/create')"
+			>
 				{{ $t("languages.empty") }}
 			</k-empty>
 		</template>
@@ -79,12 +89,14 @@ export default {
 					{
 						icon: "cog",
 						text: this.$t("settings"),
+						disabled: !this.$panel.permissions.languages.update,
 						click: () => this.$dialog(`languages/${language.id}/update`)
 					},
 					{
+						when: language.deletable,
 						icon: "trash",
 						text: this.$t("delete"),
-						disabled: language.deletable === false,
+						disabled: !this.$panel.permissions.languages.delete,
 						click: () => this.$dialog(`languages/${language.id}/delete`)
 					}
 				]
diff --git a/src/Cms/Language.php b/src/Cms/Language.php
index 592186722a..d9e3ebac24 100644
--- a/src/Cms/Language.php
+++ b/src/Cms/Language.php
@@ -6,6 +6,7 @@
 use Kirby\Exception\Exception;
 use Kirby\Exception\InvalidArgumentException;
 use Kirby\Exception\LogicException;
+use Kirby\Exception\PermissionException;
 use Kirby\Filesystem\F;
 use Kirby\Toolkit\Locale;
 use Kirby\Toolkit\Str;
@@ -145,8 +146,17 @@ public function code(): string
 	 */
 	public static function create(array $props): static
 	{
+		$kirby = App::instance();
+		$user  = $kirby->user();
+
+		if (
+			$user === null ||
+			$user->role()->permissions()->for('languages', 'create') === false
+		) {
+			throw new PermissionException(['key' => 'language.create.permission']);
+		}
+
 		$props['code'] = Str::slug($props['code'] ?? null);
-		$kirby         = App::instance();
 		$languages     = $kirby->languages();
 
 		// make the first language the default language
@@ -204,8 +214,16 @@ public static function create(array $props): static
 	public function delete(): bool
 	{
 		$kirby = App::instance();
+		$user  = $kirby->user();
 		$code  = $this->code();
 
+		if (
+			$user === null ||
+			$user->role()->permissions()->for('languages', 'delete') === false
+		) {
+			throw new PermissionException(['key' => 'language.delete.permission']);
+		}
+
 		if ($this->isDeletable() === false) {
 			throw new Exception('The language cannot be deleted');
 		}
@@ -497,13 +515,22 @@ public function url(): string
 	 */
 	public function update(array $props = null): static
 	{
+		$kirby = App::instance();
+		$user  = $kirby->user();
+
+		if (
+			$user === null ||
+			$user->role()->permissions()->for('languages', 'update') === false
+		) {
+			throw new PermissionException(['key' => 'language.update.permission']);
+		}
+
 		// don't change the language code
 		unset($props['code']);
 
 		// make sure the slug is nice and clean
 		$props['slug'] = Str::slug($props['slug'] ?? null);
 
-		$kirby   = App::instance();
 		$updated = $this->clone($props);
 
 		if (isset($props['translations']) === true) {
diff --git a/src/Cms/Permissions.php b/src/Cms/Permissions.php
index 20ba4ea267..4c9ab41bb5 100644
--- a/src/Cms/Permissions.php
+++ b/src/Cms/Permissions.php
@@ -41,7 +41,8 @@ class Permissions
 		],
 		'languages' => [
 			'create' => true,
-			'delete' => true
+			'delete' => true,
+			'update' => true
 		],
 		'pages' => [
 			'access'     	 => true,
diff --git a/tests/Cms/Languages/LanguageTest.php b/tests/Cms/Languages/LanguageTest.php
index 75d800c110..d0b587dddf 100644
--- a/tests/Cms/Languages/LanguageTest.php
+++ b/tests/Cms/Languages/LanguageTest.php
@@ -5,6 +5,7 @@
 use Kirby\Data\Data;
 use Kirby\Exception\InvalidArgumentException;
 use Kirby\Exception\LogicException;
+use Kirby\Exception\PermissionException;
 use Kirby\Filesystem\Dir;
 use Kirby\Filesystem\F;
 use Kirby\TestCase;
@@ -88,6 +89,8 @@ public function testBaseUrl($kirbyUrl, $url, $expected)
 	 */
 	public function testCreate()
 	{
+		$this->app->impersonate('kirby');
+
 		$language = Language::create([
 			'code' => 'en'
 		]);
@@ -99,6 +102,49 @@ public function testCreate()
 		$this->assertSame('/en', $language->url());
 	}
 
+	/**
+	 * @covers ::create
+	 */
+	public function testCreateNoPermissions()
+	{
+		$app = $this->app->clone([
+			'blueprints' => [
+				'users/editor' => [
+					'name' => 'editor',
+					'permissions' => [
+						'languages' => [
+							'create' => false
+						]
+					]
+				],
+			],
+			'users' => [
+				['email' => 'test@getkirby.com', 'role' => 'editor']
+			]
+		]);
+
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to create a language');
+
+		$app->impersonate('test@getkirby.com');
+		Language::create([
+			'code' => 'en'
+		]);
+	}
+
+	/**
+	 * @covers ::create
+	 */
+	public function testCreateWithoutLoggedUser()
+	{
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to create a language');
+
+		Language::create([
+			'code' => 'en'
+		]);
+	}
+
 	/**
 	 * @covers ::create
 	 */
@@ -107,10 +153,7 @@ public function testCreateHooks()
 		$calls = 0;
 		$phpunit = $this;
 
-		new App([
-			'roots' => [
-				'index' => static::TMP,
-			],
+		$app = $this->app->clone([
 			'hooks' => [
 				'language.create:before' => function (Language $language, array $input) use ($phpunit, &$calls) {
 					$phpunit->assertInstanceOf(Language::class, $language);
@@ -127,6 +170,8 @@ public function testCreateHooks()
 			]
 		]);
 
+		$app->impersonate('kirby');
+
 		Language::create([
 			'code' => 'de'
 		]);
@@ -150,10 +195,58 @@ public function testCodeAndId()
 	 */
 	public function testDelete()
 	{
+		$this->app->impersonate('kirby');
+
 		$language = Language::create(['code' => 'en']);
 		$this->assertTrue($language->delete());
 	}
 
+	/**
+	 * @covers ::delete
+	 */
+	public function testDeleteNoPermissions()
+	{
+		$app = $this->app->clone([
+			'blueprints' => [
+				'users/editor' => [
+					'name' => 'editor',
+					'permissions' => [
+						'languages' => [
+							'create' => true,
+							'delete' => false
+						]
+					]
+				],
+			],
+			'users' => [
+				['email' => 'test@getkirby.com', 'role' => 'editor']
+			]
+		]);
+
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to delete the language');
+
+		$app->impersonate('test@getkirby.com');
+		$language = Language::create(['code' => 'en']);
+		$language->delete();
+	}
+
+	/**
+	 * @covers ::delete
+	 */
+	public function testDeleteWithoutLoggedUser()
+	{
+		$this->app->impersonate('kirby');
+		$language = Language::create(['code' => 'en']);
+
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to delete the language');
+
+		// unimpersonate and test the method
+		$this->app->impersonate();
+		$language->delete();
+	}
+
 	/**
 	 * @covers ::delete
 	 */
@@ -162,7 +255,7 @@ public function testDeleteHooks()
 		$calls = 0;
 		$phpunit = $this;
 
-		new App([
+		$app = new App([
 			'roots' => [
 				'index' => static::TMP,
 			],
@@ -182,6 +275,8 @@ public function testDeleteHooks()
 			]
 		]);
 
+		$app->impersonate('kirby');
+
 		$language = Language::create([
 			'code' => 'en',
 			'name' => 'English'
@@ -649,6 +744,8 @@ public function testUpdate()
 	{
 		Dir::make(static::TMP . '/content');
 
+		$this->app->impersonate('kirby');
+
 		$language = Language::create([
 			'code' => 'en'
 		]);
@@ -669,6 +766,8 @@ public function testUpdateDefault()
 			]
 		]);
 
+		$app->impersonate('kirby');
+
 		$this->assertFalse($app->multilang());
 		$this->assertNull($app->defaultLanguage());
 		$this->assertSame(0, $app->languages()->count());
@@ -717,7 +816,7 @@ public function testUpdateHooks()
 
 		Dir::make(static::TMP . '/content');
 
-		new App([
+		$app = new App([
 			'roots' => [
 				'index' => static::TMP,
 			],
@@ -745,12 +844,61 @@ public function testUpdateHooks()
 			]
 		]);
 
+		$app->impersonate('kirby');
+
 		$language = Language::create(['code' => 'en']);
 		$language->update(['name' => 'English']);
 
 		$this->assertSame(2, $calls);
 	}
 
+	/**
+	 * @covers ::update
+	 */
+	public function testUpdateNoPermissions()
+	{
+		$app = $this->app->clone([
+			'blueprints' => [
+				'users/editor' => [
+					'name'        => 'editor',
+					'permissions' => [
+						'languages' => [
+							'create' => true,
+							'update' => false
+						]
+					]
+				],
+			],
+			'users'      => [
+				['email' => 'test@getkirby.com', 'role' => 'editor']
+			]
+		]);
+
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to update the language');
+
+		$app->impersonate('test@getkirby.com');
+
+		$language = Language::create(['code' => 'en']);
+		$language->update(['name' => 'English']);
+	}
+
+	/**
+	 * @covers ::update
+	 */
+	public function testUpdateWithoutLoggedUser()
+	{
+		$this->app->impersonate('kirby');
+		$language = Language::create(['code' => 'en']);
+
+		$this->expectException(PermissionException::class);
+		$this->expectExceptionMessage('You are not allowed to update the language');
+
+		// unimpersonate and test the method
+		$this->app->impersonate();
+		$language->update(['name' => 'English']);
+	}
+
 	/**
 	 * @covers ::variable
 	 */
diff --git a/tests/Cms/Languages/LanguagesTest.php b/tests/Cms/Languages/LanguagesTest.php
index c5022d217e..d401a624d0 100644
--- a/tests/Cms/Languages/LanguagesTest.php
+++ b/tests/Cms/Languages/LanguagesTest.php
@@ -143,6 +143,8 @@ public function testMultipleDefault()
 
 	public function testCreate()
 	{
+		$this->app->impersonate('kirby');
+
 		$language = $this->app->languages()->create([
 			'code' => 'tr'
 		]);
