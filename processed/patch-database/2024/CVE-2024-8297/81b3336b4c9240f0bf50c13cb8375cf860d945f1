diff --git a/middleware/jwt_refresh_token_middleware.go b/middleware/jwt_refresh_token_middleware.go
index 4563197..f579ea7 100644
--- a/middleware/jwt_refresh_token_middleware.go
+++ b/middleware/jwt_refresh_token_middleware.go
@@ -3,7 +3,6 @@ package middleware
 import (
 	"dlms/models"
 	"dlms/services"
-	"fmt"
 	"net/http"
 	"strings"
 
@@ -25,7 +24,6 @@ func JwtRefreshAuth() gin.HandlerFunc {
 		}
 
 		parts := strings.Split(header, " ")
-		fmt.Println(parts)
 		if len(parts) != 2 || strings.ToLower(parts[0]) == "Bearer" {
 			ctx.JSON(http.StatusUnauthorized, models.ResponseJson{
 				Success: false,
diff --git a/routes/borrow_route.go b/routes/borrow_route.go
index 6913d58..a0bb5c7 100644
--- a/routes/borrow_route.go
+++ b/routes/borrow_route.go
@@ -17,10 +17,10 @@ func InitBorrowRoute(r *gin.RouterGroup) {
 	borrowRoute.PUT("/update/:id", middleware.Role([]string{"user"}), borrowController.UpdateBorrow)
 	borrowRoute.PUT("/cancel/:id", middleware.Role([]string{"user"}), borrowController.CancelBorrowBook)
 	borrowRoute.GET("/history", middleware.Role([]string{"user"}), borrowController.BorrowingHistory)
+	borrowRoute.GET("/:id", middleware.Role([]string{"user", "admin"}), borrowController.BorrowDetails)
 
 	borrowRoute.Use(middleware.Role([]string{"admin"}))
 	borrowRoute.GET("/all", borrowController.GetBorrows)
-	borrowRoute.GET("/:id", borrowController.BorrowDetails)
 	borrowRoute.DELETE("/delete/:id", borrowController.DeleteBorrow)
 	borrowRoute.PUT("/approve/:id", borrowController.ApproveBookBorrowing)
 
diff --git a/services/borrow_service.go b/services/borrow_service.go
index d66b510..9c849bf 100644
--- a/services/borrow_service.go
+++ b/services/borrow_service.go
@@ -205,7 +205,12 @@ func (s *BorrowServiceImpl) UpdateBorrow(data dtos.BorrowDto, borrow models.Borr
 		return http.StatusOK, fmt.Errorf("Unable to edit")
 	}
 
-	book, err := s.bookRepository.FindOne(bson.M{"_id": borrow.BookId})
+	bookId, err := primitive.ObjectIDFromHex(data.BookId)
+	if err != nil {
+		return http.StatusInternalServerError, err
+	}
+
+	book, err := s.bookRepository.FindOne(bson.M{"_id": bookId})
 	if err != nil {
 		return http.StatusInternalServerError, err
 	}
