diff --git a/.bc-exclude.php b/.bc-exclude.php
index d1d2230cc70..164e76fbf5e 100644
--- a/.bc-exclude.php
+++ b/.bc-exclude.php
@@ -42,6 +42,8 @@
         'Shopware\\\\Core\\\\Framework\\\\App\\\\Payment\\\\Payload\\\\Struct\\\\SyncPayPayload#__construct()',
         'Shopware\\\\Core\\\\Framework\\\\Api\\\\Sync\\\\FkReference#__construct\(\)',
 
+        'Shopware\\\\Core\\\\Framework\\\\Context.*changed from callable.*',
+
         // Removed boot method from Bundle
         'Shopware\\\\Core\\\\Framework\\\\Bundle#boot',
 
diff --git a/changelog/_unreleased/2024-07-24-context-object-improvements.md b/changelog/_unreleased/2024-07-24-context-object-improvements.md
new file mode 100644
index 00000000000..781c62647bb
--- /dev/null
+++ b/changelog/_unreleased/2024-07-24-context-object-improvements.md
@@ -0,0 +1,8 @@
+---
+title: Context object improvements
+issue: NEXT-37399
+---
+
+# Core
+
+* Changed `\Shopware\Core\Framework\Context` to allow only \Closure in `enableInheritance`, `disableInheritance` and `scope` method to prevent misuse of the context object in sandbox environments.
diff --git a/changelog/_unreleased/2024-07-24-improve-aggregation-name-validation.md b/changelog/_unreleased/2024-07-24-improve-aggregation-name-validation.md
new file mode 100644
index 00000000000..26c4fdc16a7
--- /dev/null
+++ b/changelog/_unreleased/2024-07-24-improve-aggregation-name-validation.md
@@ -0,0 +1,8 @@
+---
+title: Improve aggregation name validation
+issue: NEXT-37397
+---
+
+# Core
+
+* Changed `\Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser` to validate that the aggregation name does not contain question marks or colon,
diff --git a/changelog/_unreleased/2024-07-24-improve-feature-silent-token-validation.md b/changelog/_unreleased/2024-07-24-improve-feature-silent-token-validation.md
new file mode 100644
index 00000000000..a2026194d11
--- /dev/null
+++ b/changelog/_unreleased/2024-07-24-improve-feature-silent-token-validation.md
@@ -0,0 +1,8 @@
+---
+title: Improve feature silent token validation
+issue: NEXT-37398
+---
+
+# Core
+
+* Changed `\Shopware\Core\Framework\Adapter\Twig\Node\FeatureCallSilentToken` to properly inject the feature flag into the compiled template file.
diff --git a/src/Core/Framework/Adapter/Twig/Node/FeatureCallSilentToken.php b/src/Core/Framework/Adapter/Twig/Node/FeatureCallSilentToken.php
index 1aaf2c1a168..f4d4ff64f8c 100644
--- a/src/Core/Framework/Adapter/Twig/Node/FeatureCallSilentToken.php
+++ b/src/Core/Framework/Adapter/Twig/Node/FeatureCallSilentToken.php
@@ -24,7 +24,9 @@ public function compile(Compiler $compiler): void
     {
         $compiler
             ->addDebugInfo($this)
-            ->raw('\Shopware\Core\Framework\Feature::callSilentIfInactive(\'' . $this->flag . '\', function () use(&$context) { ')
+            ->raw('\Shopware\Core\Framework\Feature::callSilentIfInactive(')
+            ->string($this->flag)
+            ->raw(', function () use(&$context) { ')
             ->subcompile($this->getNode('body'))
             ->raw('});');
     }
diff --git a/src/Core/Framework/Context.php b/src/Core/Framework/Context.php
index 4477be3942b..8dc089539ec 100644
--- a/src/Core/Framework/Context.php
+++ b/src/Core/Framework/Context.php
@@ -149,11 +149,11 @@ public function createWithVersionId(string $versionId): self
     /**
      * @template TReturn of mixed
      *
-     * @param callable(Context): TReturn $callback
+     * @param \Closure(Context): TReturn $callback
      *
      * @return TReturn the return value of the provided callback function
      */
-    public function scope(string $scope, callable $callback)
+    public function scope(string $scope, \Closure $callback)
     {
         $currentScope = $this->getScope();
         $this->scope = $scope;
@@ -216,11 +216,11 @@ public function setRuleIds(array $ruleIds): void
     /**
      * @template TReturn of mixed
      *
-     * @param callable(Context): TReturn $function
+     * @param \Closure(Context): TReturn $function
      *
      * @return TReturn
      */
-    public function enableInheritance(callable $function)
+    public function enableInheritance(\Closure $function)
     {
         $previous = $this->considerInheritance;
         $this->considerInheritance = true;
@@ -233,11 +233,11 @@ public function enableInheritance(callable $function)
     /**
      * @template TReturn of mixed
      *
-     * @param callable(Context): TReturn $function
+     * @param \Closure(Context): TReturn $function
      *
      * @return TReturn
      */
-    public function disableInheritance(callable $function)
+    public function disableInheritance(\Closure $function)
     {
         $previous = $this->considerInheritance;
         $this->considerInheritance = false;
diff --git a/src/Core/Framework/DataAbstractionLayer/DataAbstractionLayerException.php b/src/Core/Framework/DataAbstractionLayer/DataAbstractionLayerException.php
index 5ea43b3db31..31dd38d6a61 100644
--- a/src/Core/Framework/DataAbstractionLayer/DataAbstractionLayerException.php
+++ b/src/Core/Framework/DataAbstractionLayer/DataAbstractionLayerException.php
@@ -44,6 +44,7 @@ class DataAbstractionLayerException extends HttpException
     public const INVALID_WRITE_INPUT = 'FRAMEWORK__INVALID_WRITE_INPUT';
     public const DECODE_HANDLED_BY_HYDRATOR = 'FRAMEWORK__DECODE_HANDLED_BY_HYDRATOR';
     public const ATTRIBUTE_NOT_FOUND = 'FRAMEWORK__ATTRIBUTE_NOT_FOUND';
+    public const INVALID_AGGREGATION_NAME = 'FRAMEWORK__INVALID_AGGREGATION_NAME';
 
     public static function invalidSerializerField(string $expectedClass, Field $field): self
     {
@@ -402,4 +403,14 @@ public static function canNotFindAttribute(string $attribute, string $property):
             ['attribute' => $attribute, 'property' => $property]
         );
     }
+
+    public static function invalidAggregationName(string $name): self
+    {
+        return new self(
+            Response::HTTP_BAD_REQUEST,
+            self::INVALID_AGGREGATION_NAME,
+            'Invalid aggregation name "{{ name }}", cannot contain question marks und colon.',
+            ['name' => $name]
+        );
+    }
 }
diff --git a/src/Core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php b/src/Core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php
index 498a09c79ac..4517191fb99 100644
--- a/src/Core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php
+++ b/src/Core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php
@@ -4,6 +4,7 @@
 
 use Doctrine\DBAL\Connection;
 use Shopware\Core\Framework\Context;
+use Shopware\Core\Framework\DataAbstractionLayer\DataAbstractionLayerException;
 use Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityCollection;
 use Shopware\Core\Framework\DataAbstractionLayer\EntityDefinition;
@@ -116,6 +117,10 @@ private function fetchAggregation(
         Criteria $criteria,
         Context $context
     ): AggregationResult {
+        if (str_contains($aggregation->getName(), '?') || str_contains($aggregation->getName(), ':')) {
+            throw DataAbstractionLayerException::invalidAggregationName($aggregation->getName());
+        }
+
         $clone = clone $criteria;
         $clone->resetAggregations();
         $clone->resetSorting();
diff --git a/src/Core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php b/src/Core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
index 3ed39008fe9..1828f801a9a 100644
--- a/src/Core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
+++ b/src/Core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
@@ -199,6 +199,12 @@ private function parseAggregation(int $index, EntityDefinition $definition, arra
             return null;
         }
 
+        if (str_contains($name, '?') || str_contains($name, ':')) {
+            $exceptions->add(new InvalidAggregationQueryException('The aggregation name should not contain a question mark or colon.'), '/aggregations/' . $index);
+
+            return null;
+        }
+
         $type = $aggregation['type'] ?? null;
 
         if (!\is_string($type) || empty($type) || is_numeric($type)) {
diff --git a/src/Core/Framework/Test/DataAbstractionLayer/Search/EntityAggregatorTest.php b/src/Core/Framework/Test/DataAbstractionLayer/Search/EntityAggregatorTest.php
index 483fd3740ab..a1ede13d0a2 100644
--- a/src/Core/Framework/Test/DataAbstractionLayer/Search/EntityAggregatorTest.php
+++ b/src/Core/Framework/Test/DataAbstractionLayer/Search/EntityAggregatorTest.php
@@ -11,6 +11,7 @@
 use Shopware\Core\Defaults;
 use Shopware\Core\DevOps\Environment\EnvironmentHelper;
 use Shopware\Core\Framework\Context;
+use Shopware\Core\Framework\DataAbstractionLayer\DataAbstractionLayerException;
 use Shopware\Core\Framework\DataAbstractionLayer\Exception\InvalidAggregationQueryException;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Aggregation\Bucket\DateHistogramAggregation;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Aggregation\Bucket\FilterAggregation;
@@ -1338,6 +1339,18 @@ public function testAggregationWithBacktickInName(): void
         $this->aggregator->aggregate($this->getContainer()->get(TaxDefinition::class), $criteria, $context);
     }
 
+    public function testAggregationNameWithDisallowedName(): void
+    {
+        $context = Context::createDefaultContext();
+
+        $criteria = new Criteria();
+        $criteria->addAggregation(new SumAggregation('foo?foo', 'taxRate'));
+
+        static::expectExceptionObject(DataAbstractionLayerException::invalidAggregationName('foo?foo'));
+
+        $this->aggregator->aggregate($this->getContainer()->get(TaxDefinition::class), $criteria, $context);
+    }
+
     private function insertData(): void
     {
         $repository = $this->getContainer()->get('product.repository');
diff --git a/src/Core/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php b/src/Core/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
index f61817e7c20..f36aec32ae5 100644
--- a/src/Core/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
+++ b/src/Core/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
@@ -318,4 +318,33 @@ public function testICanCreateARangeAggregation(): void
         static::assertEquals($expectedRanges[0] + ['key' => '1-2'], $computedRanges[0]);
         static::assertEquals($expectedRanges[1] + ['key' => '2-3'], $computedRanges[1]);
     }
+
+    public function testQuestionMarkNotAllowedInAggregationName(): void
+    {
+        $criteria = new Criteria();
+        $searchRequestException = new SearchRequestException();
+        $this->parser->buildAggregations(
+            self::getContainer()->get(ProductDefinition::class),
+            [
+                'aggregations' => [
+                    [
+                        'name' => 'max?agg',
+                        'type' => 'max',
+                        'field' => 'tax.taxRate',
+                    ],
+                ],
+            ],
+            $criteria,
+            $searchRequestException
+        );
+
+        $errors = iterator_to_array($searchRequestException->getErrors(), false);
+        static::assertCount(1, $errors);
+
+        $error = array_shift($errors);
+
+        static::assertNotNull($error);
+
+        static::assertSame('The aggregation name should not contain a question mark or colon.', $error['detail']);
+    }
 }
diff --git a/src/Core/System/SalesChannel/Entity/SalesChannelRepository.php b/src/Core/System/SalesChannel/Entity/SalesChannelRepository.php
index d10ddc4f70d..b7c0652ce96 100644
--- a/src/Core/System/SalesChannel/Entity/SalesChannelRepository.php
+++ b/src/Core/System/SalesChannel/Entity/SalesChannelRepository.php
@@ -9,6 +9,7 @@
 use Shopware\Core\Framework\DataAbstractionLayer\Event\EntitySearchResultLoadedEvent;
 use Shopware\Core\Framework\DataAbstractionLayer\Exception\InconsistentCriteriaIdsException;
 use Shopware\Core\Framework\DataAbstractionLayer\Field\AssociationField;
+use Shopware\Core\Framework\DataAbstractionLayer\Field\ManyToManyAssociationField;
 use Shopware\Core\Framework\DataAbstractionLayer\Read\EntityReaderInterface;
 use Shopware\Core\Framework\DataAbstractionLayer\RepositorySearchDetector;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\AggregationResult\AggregationResultCollection;
@@ -203,7 +204,7 @@ private function processCriteria(Criteria $topCriteria, SalesChannelContext $sal
         }
 
         $queue = [
-            ['definition' => $this->definition, 'criteria' => $topCriteria],
+            ['definition' => $this->definition, 'criteria' => $topCriteria, 'path' => ''],
         ];
 
         $maxCount = 100;
@@ -216,8 +217,10 @@ private function processCriteria(Criteria $topCriteria, SalesChannelContext $sal
 
             $definition = $cur['definition'];
             $criteria = $cur['criteria'];
+            $path = $cur['path'];
+            $processedKey = $path . $definition::class;
 
-            if (isset($processed[$definition::class])) {
+            if (isset($processed[$processedKey])) {
                 continue;
             }
 
@@ -230,7 +233,7 @@ private function processCriteria(Criteria $topCriteria, SalesChannelContext $sal
                 $this->eventDispatcher->dispatch($event, $eventName);
             }
 
-            $processed[$definition::class] = true;
+            $processed[$processedKey] = true;
 
             foreach ($criteria->getAssociations() as $associationName => $associationCriteria) {
                 // find definition
@@ -240,7 +243,14 @@ private function processCriteria(Criteria $topCriteria, SalesChannelContext $sal
                 }
 
                 $referenceDefinition = $field->getReferenceDefinition();
-                $queue[] = ['definition' => $referenceDefinition, 'criteria' => $associationCriteria];
+                $queue[] = ['definition' => $referenceDefinition, 'criteria' => $associationCriteria, 'path' => $path . '.' . $associationName];
+
+                if (!$field instanceof ManyToManyAssociationField) {
+                    continue;
+                }
+
+                $referenceDefinition = $field->getToManyReferenceDefinition();
+                $queue[] = ['definition' => $referenceDefinition, 'criteria' => $associationCriteria, 'path' => $path . '.' . $associationName];
             }
         }
     }
diff --git a/tests/unit/Core/Framework/Adapter/Twig/Node/FeatureCallSilentTokenTest.php b/tests/unit/Core/Framework/Adapter/Twig/Node/FeatureCallSilentTokenTest.php
index c48d94cefb0..c583184049f 100644
--- a/tests/unit/Core/Framework/Adapter/Twig/Node/FeatureCallSilentTokenTest.php
+++ b/tests/unit/Core/Framework/Adapter/Twig/Node/FeatureCallSilentTokenTest.php
@@ -26,7 +26,7 @@ public function testCompile(): void
 
         $code = <<<'PHP'
 // line 1
-\Shopware\Core\Framework\Feature::callSilentIfInactive('v6.5.0.0', function () use(&$context) { yield "test";
+\Shopware\Core\Framework\Feature::callSilentIfInactive("v6.5.0.0", function () use(&$context) { yield "test";
 });
 PHP;
 
diff --git a/tests/unit/Core/Framework/Adapter/Twig/TokenParser/FeatureFlagCallTokenParserTest.php b/tests/unit/Core/Framework/Adapter/Twig/TokenParser/FeatureFlagCallTokenParserTest.php
index 4c4266144b4..fa6f727b701 100644
--- a/tests/unit/Core/Framework/Adapter/Twig/TokenParser/FeatureFlagCallTokenParserTest.php
+++ b/tests/unit/Core/Framework/Adapter/Twig/TokenParser/FeatureFlagCallTokenParserTest.php
@@ -59,6 +59,11 @@ public static function providerCode(): iterable
             '{% do foo.call %}',
             true,
         ];
+
+        yield 'test injection' => [
+            '{% sw_silent_feature_call "aaa\' . system(\'id\') . \'bbb" %}{% do foo.call %}{% endsw_silent_feature_call %}',
+            true,
+        ];
     }
 }
 
diff --git a/tests/unit/Framework/ContextTest.php b/tests/unit/Framework/ContextTest.php
new file mode 100644
index 00000000000..5f9ef67120b
--- /dev/null
+++ b/tests/unit/Framework/ContextTest.php
@@ -0,0 +1,39 @@
+<?php declare(strict_types=1);
+
+namespace Shopware\Tests\Unit\Framework;
+
+use PHPUnit\Framework\Attributes\CoversClass;
+use PHPUnit\Framework\Attributes\DataProvider;
+use PHPUnit\Framework\TestCase;
+use Shopware\Core\Framework\Context;
+use Twig\Environment;
+use Twig\Error\RuntimeError;
+use Twig\Loader\ArrayLoader;
+
+/**
+ * @internal
+ */
+#[CoversClass(Context::class)]
+class ContextTest extends TestCase
+{
+    public static function twigMethodProviders(): \Generator
+    {
+        yield 'enableInheritance' => ['{{ context.enableInheritance("print_r") }}'];
+        yield 'disableInheritance' => ['{{ context.disableInheritance("print_r") }}'];
+        yield 'scope' => ['{{ context.scope("system", "print_r") }}'];
+    }
+
+    #[DataProvider(methodName: 'twigMethodProviders')]
+    public function testCallableCannotBeCalledFromTwig(string $tpl): void
+    {
+        $context = Context::createDefaultContext();
+
+        $twig = new Environment(new ArrayLoader([
+            'tpl' => $tpl,
+        ]));
+
+        static::expectException(RuntimeError::class);
+
+        $twig->render('tpl', ['context' => $context]);
+    }
+}
