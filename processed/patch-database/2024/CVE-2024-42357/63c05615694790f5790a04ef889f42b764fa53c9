diff --git a/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php b/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
index 3abf528444..3994a47978 100644
--- a/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
+++ b/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php
@@ -199,6 +199,12 @@ private function parseAggregation(int $index, EntityDefinition $definition, arra
             return null;
         }
 
+        if (str_contains($name, '?') || str_contains($name, ':')) {
+            $exceptions->add(new InvalidAggregationQueryException('The aggregation name should not contain a question mark or colon.'), '/aggregations/' . $index);
+
+            return null;
+        }
+
         $type = $aggregation['type'] ?? null;
 
         if (!\is_string($type) || empty($type) || is_numeric($type)) {
diff --git a/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php b/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
index f61817e7c2..f36aec32ae 100644
--- a/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
+++ b/Framework/Test/DataAbstractionLayer/Search/Parser/AggregationParserTest.php
@@ -318,4 +318,33 @@ public function testICanCreateARangeAggregation(): void
         static::assertEquals($expectedRanges[0] + ['key' => '1-2'], $computedRanges[0]);
         static::assertEquals($expectedRanges[1] + ['key' => '2-3'], $computedRanges[1]);
     }
+
+    public function testQuestionMarkNotAllowedInAggregationName(): void
+    {
+        $criteria = new Criteria();
+        $searchRequestException = new SearchRequestException();
+        $this->parser->buildAggregations(
+            self::getContainer()->get(ProductDefinition::class),
+            [
+                'aggregations' => [
+                    [
+                        'name' => 'max?agg',
+                        'type' => 'max',
+                        'field' => 'tax.taxRate',
+                    ],
+                ],
+            ],
+            $criteria,
+            $searchRequestException
+        );
+
+        $errors = iterator_to_array($searchRequestException->getErrors(), false);
+        static::assertCount(1, $errors);
+
+        $error = array_shift($errors);
+
+        static::assertNotNull($error);
+
+        static::assertSame('The aggregation name should not contain a question mark or colon.', $error['detail']);
+    }
 }
