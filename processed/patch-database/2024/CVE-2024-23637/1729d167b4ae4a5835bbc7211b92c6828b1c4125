diff --git a/docs/api/access.rst b/docs/api/access.rst
index 8380bc9362..231838be4a 100644
--- a/docs/api/access.rst
+++ b/docs/api/access.rst
@@ -59,7 +59,7 @@ Add a new group
 
    Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :json key:         The group's identifier
    :json name:        The user's name
@@ -101,7 +101,7 @@ Update a group
 
    Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :json description: A human readable description of the group
    :json permissions: The permissions to assign to the group
@@ -122,7 +122,7 @@ Delete a group
 
    Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :status 200:       No error
 
@@ -179,7 +179,7 @@ Add a new user
 
    Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :json name:     The user's name
    :json password: The user's password
@@ -204,7 +204,7 @@ Update a user
 
    Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :param username: Name of the user to update
    :json admin:     Whether to mark the user as admin (true) or not (false), can be left out (no change)
@@ -223,7 +223,7 @@ Delete a user
 
    Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.
 
-   Requires the ``SETTINGS`` permission.
+   Requires the ``SETTINGS`` permission and a recent credentials check.
 
    :param username: Name of the user to delete
    :status 200:     No error
@@ -242,7 +242,7 @@ Change a user's password
    request body. Without the ``SETTINGS`` permission, an additional property ``current``
    is also required to be set on the request body, containing the user's current password.
 
-   Requires the ``SETTINGS`` permission or to be logged in as the user. Note that ``current``
+   Requires the ``SETTINGS`` permission or to be logged in as the user, and a recent credentials check. Note that ``current``
    will be evaluated even in presence of the ``SETTINGS`` permission, if set.
 
    :param username: Name of the user to change the password for
@@ -252,7 +252,7 @@ Change a user's password
    :status 400:     If the request doesn't contain a ``password`` property, doesn't
                     contain a ``current`` property even though required, or the request
                     is otherwise invalid
-   :status 403:     No admin rights, not logged in as the user or a current password
+   :status 403:     No admin rights, not logged in as the user, no recent credentials check or a current password
                     mismatch
    :status 404:     The user is unknown
 
@@ -287,11 +287,11 @@ Update a user's settings
    Expects a new settings JSON object to merge with the current settings as
    request body.
 
-   Requires the ``SETTINGS`` permission or to be logged in as the user.
+   Requires the ``SETTINGS`` permission or to be logged in as the user,  and a recent credentials check.
 
    :param username: Name of the user to retrieve the settings for
    :status 204:     No error
-   :status 403:     No admin rights and not logged in as the user
+   :status 403:     No admin rights and not logged in as the user, or no recent credentials check
    :status 404:     The user is unknown
 
 .. _sec-api-access-users-apikey-generate:
@@ -306,11 +306,11 @@ Regenerate a user's api key
    Does not expect a body. Will return the generated API key as ``apikey``
    property in the JSON object contained in the response body.
 
-   Requires the ``SETTINGS`` permission or to be logged in as the user.
+   Requires the ``SETTINGS`` permission or to be logged in as the user, and a recent credentials check.
 
    :param username: Name of the user to retrieve the settings for
    :status 200:     No error
-   :status 403:     No admin rights and not logged in as the user
+   :status 403:     No admin rights and not logged in as the user, or no recent credentials check
    :status 404:     The user is unknown
 
 .. _sec-api-access-users-apikey-delete:
@@ -322,11 +322,11 @@ Delete a user's api key
 
    Deletes a user's personal API key.
 
-   Requires the ``SETTINGS`` permission or to be logged in as the user.
+   Requires the ``SETTINGS`` permission or to be logged in as the user, and a recent credentials check.
 
    :param username: Name of the user to retrieve the settings for
    :status 204:     No error
-   :status 403:     No admin rights and not logged in as the user
+   :status 403:     No admin rights and not logged in as the user, or no recent credentials check
    :status 404:     The user is unknown
 
 .. _sec-api-access-datamodel:
diff --git a/docs/bundledplugins/appkeys.rst b/docs/bundledplugins/appkeys.rst
index f17bc08548..5fc265bf57 100644
--- a/docs/bundledplugins/appkeys.rst
+++ b/docs/bundledplugins/appkeys.rst
@@ -291,6 +291,8 @@ Decide on existing request
 
    Returns an HTTP :http:statuscode:`204` on success.
 
+   Requires the ``PLUGIN_APPKEYS_GRANT`` permissions and a recent credentials check.
+
    :json decision: boolean value to indicate whether to confirm (``True``) or deny (``False``) access
    :status 204: success
 
@@ -303,13 +305,17 @@ Fetch list of existing application keys
 
    Fetches a list of existing application keys and pending requests registered in the system for the current user.
 
-   If the additional optional parameter ``all`` is provided and the user has administrator rights, fetches a list
+   If the additional optional parameter ``all`` is provided and the user has the ``PLUGIN_APPKEYS_ADMIN`` permission, fetches a list
    of *all** application keys and pending requests registered in the system for any user.
 
+   If the additional optional parameter ``app`` is provided, only the key for the specified application identifier and the
+   current user will be returned. A user with the ``PLUGIN_APPKEYS_ADMIN``permission may also specify the ``user`` parameter
+   to fetch the key for the specified application identifier and a different user.
+
    Returns a :http:statuscode:`200` with a :ref:`List response <sec-bundledplugins-appkey-datamodel-listreponse>` in the
    body upon success.
 
-   :query all: Fetch all application keys and pending requests from all users. Requires administrator rights.
+   :query all: Fetch all application keys and pending requests from all users. Requires the ``PLUGIN_APPKEYS_ADMIN`` permission.
 
 .. _sec-bundledplugins-appkeys-api-issuecommand:
 
@@ -323,18 +329,27 @@ Issue an application key command
 
    revoke
      Revokes an existing application key. Must belong to the user issuing the command, unless the user has admin rights
-     in which case they make revoke any application key in the system. Expects the key in question as parameter ``key``.
+     in which case they make revoke any application key in the system. Expects the key in question identified by the
+     associated application identifier provided in the ``app`` parameter. Keys for other users but the current one can
+     be revoked by admins with the additional ``user`` parameter to specify the user id.
 
    generate
-     Generates a new application key for the user, using the application identifier provided as parameter ``app``.
+     Generates a new application key for the user, using the application identifier provided as parameter ``app``. Keys
+     for other users but the current one can be generated by admins with the additional ``user`` parameter to specify
+     the user id.
 
    Upon success, a status code of :http:statuscode:`204` and an empty body is returned.
 
-   Requires user rights.
+   Requires user rights and a fresh credentials check.
+
+   .. deprecated:: 1.10.0
+
+      Revoking a key by supplying the key itself has been deprecated as of OctoPrint 1.10.0. Use ``app`` and optionally
+      ``user`` instead.
 
    **Example revoke request**
 
-   Revokes the (fictional) key ``aabbccddeeff112233445566``.
+   Revokes the key associated with app id ``test`` for the current user.
 
    .. sourcecode:: http
 
@@ -345,7 +360,28 @@ Issue an application key command
 
       {
         "command": "revoke",
-        "key": "aabbccddeeff112233445566"
+        "app": "test"
+      }
+
+   .. sourcecode:: http
+
+      HTTP/1.1 204 No Content
+
+   **Example revoke request by an admin for a different user**
+
+   Revokes the key associated with the app id ``test`` for user ``user``.
+
+   .. sourcecode:: http
+
+      POST /api/plugin/appkeys HTTP/1.1
+      Host: example.com
+      Content-Type: application/json
+      X-Api-Key: abcdef...
+
+      {
+        "command": "revoke",
+        "app": "test",
+        "user": "user"
       }
 
    .. sourcecode:: http
@@ -365,17 +401,28 @@ Issue an application key command
 
       {
         "command": "generate",
-        "key": "My awesome application 1.0"
+        "app": "My awesome application 1.0"
       }
 
    .. sourcecode:: http
 
-      HTTP/1.1 204 No Content
+      HTTP/1.1 200 OK
+      Content-Type: application/json
+
+      {
+        "app_id": "My awesome application 1.0",
+        "user_id": "me",
+        "api_key": "abcdef1234567890"
+      }
 
    :json string command: The command to issue, either ``revoke`` or ``generate``
-   :json string key:     ``revoke`` command: The key to revoke
-   :json string app:     ``generate`` command: Application identifier for which to generate a key
-   :statuscode 204:      No error
+   :json string app:     ``revoke`` & ``generate`` commands: The application identifier of the key to revoke or generate.
+   :json string user:    ``revoke`` & ``generate`` commands: The user name for which to revoke or generated a key associated with the provided
+                         app id. If not provided, the current user's name will be used.
+   :json string key:     ``revoke`` command: The key to revoke. Revoking by providing the key itself has been deprecated
+                         as of OctoPrint 1.10.0. Use ``app`` and optionally ``user`` instead.
+   :statuscode 200:      Key generation successful
+   :statuscode 204:      No error during key revocation
    :statuscode 400:      Invalid or missing parameter
 
 .. _sec-bundledplugins-appkey-datamodel:
@@ -543,6 +590,18 @@ Pending list entry
 JavaScript Client Library
 -------------------------
 
+.. js:function:: OctoPrintClient.plugins.appkeys.getKey(app, user, opts)
+
+   Retrieves the key information the given ``app`` and optional other ``user``. The key must belong to the current user, or the current user must
+   have the ``PLUGIN_APPKEYS_ADMIN`` permission.
+
+   See :ref:`Fetch list of existing application keys <sec-bundledplugins-appkeys-api-fetchlist>` for more details.
+
+   :param string app: Application identifier
+   :param string user: Optional user identifier
+   :param object opts: Additional options for the request
+   :returns Promise: A `jQuery Promise <http://api.jquery.com/Types/#Promise>`_ for the request's response
+
 .. js:function:: OctoPrintClient.plugins.appkeys.getKeys(opts)
 
    Retrieves registered keys and pending requests for the current user.
@@ -556,7 +615,7 @@ JavaScript Client Library
 
    Retrieves registered keys and pending requests for all users.
 
-   Needs administrator rights.
+   Needs the ``PLUGIN_APPKEYS_ADMIN`` permission.
 
    See :ref:`Fetch list of existing application keys <sec-bundledplugins-appkeys-api-fetchlist>` for more details.
 
@@ -575,15 +634,31 @@ JavaScript Client Library
 
 .. js:function:: OctoPrintClient.plugins.appkeys.revokeKey(key, opts)
 
-   Revokes the given ``key``. The key must belong to the current user, or the current user must have administrator
-   rights.
+   Revokes the given ``key``. The key must belong to the current user, or the current user must
+   have the ``PLUGIN_APPKEYS_ADMIN`` permission.
 
    See :ref:`Issue an application key command <sec-bundledplugins-appkeys-api-issuecommand>` for details.
 
+   .. deprecated:: 1.10.0
+
+      ``revokeKey`` has been deprecated. Use ``revokeKeyForApp`` instead.
+
    :param string key: Key to revoke
    :param object opts: Additional options for the request
    :returns Promise: A `jQuery Promise <http://api.jquery.com/Types/#Promise>`_ for the request's response
 
+.. js:function:: OctoPrintClient.plugins.appkeys.revokeKeyForApp(app, user, opts)
+
+   Revokes the key for the given ``app`` and optional other ``user``. The key must belong to the current user, or the current user must
+   have the ``PLUGIN_APPKEYS_ADMIN`` permission.
+
+   See :ref:`Issue an application key command <sec-bundledplugins-appkeys-api-issuecommand>` for details.
+
+   :param string app: Application identifier
+   :param string user: Optional user identifier
+   :param object opts: Additional options for the request
+   :returns Promise: A `jQuery Promise <http://api.jquery.com/Types/#Promise>`_ for the request's response
+
 .. js:function:: OctoPrintClient.plugins.appkeys.decide(token, decision, opts)
 
    Decides on an existing authorization request.
diff --git a/docs/configuration/config_yaml.rst b/docs/configuration/config_yaml.rst
index 7ecd73a66f..ec4a465c2a 100644
--- a/docs/configuration/config_yaml.rst
+++ b/docs/configuration/config_yaml.rst
@@ -72,6 +72,10 @@ Use the following settings to enable access control:
      # If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint.
      addRemoteUsers: false
 
+     # Default timeout after which to require reauthentication by a user for dangerous changes, in minutes.
+     # Defaults to 5 minutes. Set to 0 to disable reauthentication requirements (SECURITY IMPACT!).
+     defaultReauthenticationTimeout: 5
+
 .. _sec-configuration-config_yaml-api:
 
 API
diff --git a/src/octoprint/access/__init__.py b/src/octoprint/access/__init__.py
index 87a8ccb6ad..c5783c81f0 100644
--- a/src/octoprint/access/__init__.py
+++ b/src/octoprint/access/__init__.py
@@ -11,7 +11,7 @@ def auth_log(message):
 
 
 login_mechanisms = login_mechanism_lut = {
-    "http": "credentials",
+    "password": "credentials",
     "autologin": "autologin",
     "remember_me": "Remember Me cookie",
     "basic_auth": "Basic Authorization header",
diff --git a/src/octoprint/plugins/appkeys/__init__.py b/src/octoprint/plugins/appkeys/__init__.py
index e4f275734e..0d2e84ae47 100644
--- a/src/octoprint/plugins/appkeys/__init__.py
+++ b/src/octoprint/plugins/appkeys/__init__.py
@@ -9,10 +9,12 @@
 import octoprint.plugin
 from octoprint.access import ADMIN_GROUP, USER_GROUP
 from octoprint.access.permissions import Permissions
-from octoprint.server import NO_CONTENT, admin_permission, current_user
-from octoprint.server.util import require_login_with
+from octoprint.server import NO_CONTENT, current_user
+from octoprint.server.util import require_fresh_login_with
 from octoprint.server.util.flask import (
     add_non_caching_response_headers,
+    credentials_checked_recently,
+    ensure_credentials_checked_recently,
     no_firstrun_access,
     restricted_access,
 )
@@ -227,7 +229,7 @@ def handle_auth_dialog(self, app_token):
         if not pendings:
             return flask.abort(404)
 
-        response = require_login_with(
+        response = require_fresh_login_with(
             permissions=[Permissions.PLUGIN_APPKEYS_GRANT], user_id=required_user
         )
         if response:
@@ -270,6 +272,8 @@ def handle_decision(self, user_token):
         if not Permissions.PLUGIN_APPKEYS_GRANT.can():
             flask.abort(403, description="No permission to grant app access")
 
+        ensure_credentials_checked_recently()
+
         decision = data["decision"] in valid_boolean_trues
         user_id = current_user.get_name()
 
@@ -293,23 +297,50 @@ def is_blueprint_csrf_protected(self):
     ##~~ SimpleApiPlugin mixin
 
     def get_api_commands(self):
-        return {"generate": ["app"], "revoke": ["key"]}
+        return {"generate": ["app"], "revoke": []}
 
     def on_api_get(self, request):
         user_id = current_user.get_name()
         if not user_id:
             return flask.abort(403)
 
+        # GET ?app_id=...[&user_id=...]
+        if request.values.get("app"):
+            app_id = request.values.get("app")
+            user_id = request.values.get("user", user_id)
+            if (
+                user_id != current_user.get_name()
+                and not Permissions.PLUGIN_APPKEYS_ADMIN.can()
+            ):
+                return flask.abort(403)
+
+            key = self._api_key_for_user_and_app_id(user_id, app_id)
+            if not key:
+                return flask.abort(404)
+
+            return flask.jsonify(
+                key=key.external() | {"api_key": ""}
+                if not credentials_checked_recently()
+                else key.external()
+            )
+
+        # GET ?all=true (admin only)
         if (
             request.values.get("all") in valid_boolean_trues
             and Permissions.PLUGIN_APPKEYS_ADMIN.can()
         ):
             keys = self._all_api_keys()
+
         else:
             keys = self._api_keys_for_user(user_id)
 
         return flask.jsonify(
-            keys=list(map(lambda x: x.external(), keys)),
+            keys=list(
+                map(
+                    lambda x: x | {"api_key": ""},
+                    map(lambda x: x.external(), keys),
+                )
+            ),
             pending={
                 x.user_token: x.external() for x in self._get_pending_by_user_id(user_id)
             },
@@ -322,14 +353,38 @@ def on_api_command(self, command, data):
 
         if command == "revoke":
             api_key = data.get("key")
+
+            if api_key:
+                # deprecated key based revoke?
+                from flask import request
+
+                from octoprint.server.util import get_remote_address
+
+                self._logger.warning(
+                    "Deprecated key based revoke command sent to /api/plugin/appkeys by {}, should be migrated to use app id/user tuple".format(
+                        get_remote_address(request)
+                    )
+                )
+
+            else:
+                # newer app/user based revoke?
+                user = data.get("user", user_id)
+                app = data.get("app")
+                if not app:
+                    return flask.abort(400, description="Need either app or key")
+
+                api_key = self._api_key_for_user_and_app_id(user, app)
+
             if not api_key:
-                return flask.abort(400)
+                return flask.abort(400, description="Need either app or key")
 
-            if not admin_permission.can():
+            if not Permissions.PLUGIN_APPKEYS_ADMIN.can():
                 user_for_key = self._user_for_api_key(api_key)
                 if user_for_key is None or user_for_key.user_id != user_id:
                     return flask.abort(403)
 
+            ensure_credentials_checked_recently()
+
             self._delete_api_key(api_key)
 
         elif command == "generate":
@@ -342,6 +397,8 @@ def on_api_command(self, command, data):
             if selected_user_id != user_id and not Permissions.PLUGIN_APPKEYS_ADMIN.can():
                 return flask.abort(403)
 
+            ensure_credentials_checked_recently()
+
             key = self._add_api_key(selected_user_id, app_name.strip())
             return flask.jsonify(user_id=selected_user_id, app_id=app_name, api_key=key)
 
@@ -473,12 +530,18 @@ def _add_api_key(self, user_id, app_name):
             return key.api_key
 
     def _delete_api_key(self, api_key):
+        if isinstance(api_key, ActiveKey):
+            api_key = api_key.api_key
+
         with self._keys_lock:
             for user_id, data in self._keys.items():
                 self._keys[user_id] = list(filter(lambda x: x.api_key != api_key, data))
             self._save_keys()
 
     def _user_for_api_key(self, api_key):
+        if isinstance(api_key, ActiveKey):
+            api_key = api_key.api_key
+
         with self._keys_lock:
             for user_id, data in self._keys.items():
                 if any(filter(lambda x: x.api_key == api_key, data)):
@@ -496,6 +559,17 @@ def _all_api_keys(self):
                 result += keys
         return result
 
+    def _api_key_for_user_and_app_id(self, user_id, app_id):
+        with self._keys_lock:
+            if user_id not in self._keys:
+                return None
+
+            for key in self._keys[user_id]:
+                if key.app_id.lower() == app_id.lower():
+                    return key
+
+        return None
+
     def _generate_key(self):
         return generate_api_key()
 
diff --git a/src/octoprint/plugins/appkeys/static/clientjs/appkeys.js b/src/octoprint/plugins/appkeys/static/clientjs/appkeys.js
index b58adfca44..24c0bbc3b6 100644
--- a/src/octoprint/plugins/appkeys/static/clientjs/appkeys.js
+++ b/src/octoprint/plugins/appkeys/static/clientjs/appkeys.js
@@ -14,8 +14,15 @@
     };
 
     OctoPrintAppKeysClient.prototype.getAllKeys = function (opts) {
+        return this.base.get(this.base.getSimpleApiUrl("appkeys") + "?all=true", opts);
+    };
+
+    OctoPrintAppKeysClient.prototype.getKey = function (app, user, opts) {
         return this.base.get(
-            OctoPrintClient.prototype.getSimpleApiUrl("appkeys") + "?all=true",
+            this.base.getSimpleApiUrl("appkeys") +
+                "?app=" +
+                encodeURIComponent(app) +
+                (user ? "&user=" + encodeURIComponent(user) : ""),
             opts
         );
     };
@@ -34,9 +41,20 @@
     };
 
     OctoPrintAppKeysClient.prototype.revokeKey = function (key, opts) {
+        console.log(
+            "revokeKey should be considered deprecated, use revokeKeyForApp instead"
+        );
         return this.base.simpleApiCommand("appkeys", "revoke", {key: key}, opts);
     };
 
+    OctoPrintAppKeysClient.prototype.revokeKeyForApp = function (app, user, opts) {
+        const params = {app: app};
+        if (user) {
+            params.user = user;
+        }
+        return this.base.simpleApiCommand("appkeys", "revoke", params, opts);
+    };
+
     OctoPrintAppKeysClient.prototype.decide = function (token, decision, opts) {
         return this.base.postJson(
             this.base.getBlueprintUrl("appkeys") + "decision/" + token,
diff --git a/src/octoprint/plugins/appkeys/static/js/appkeys.js b/src/octoprint/plugins/appkeys/static/js/appkeys.js
index adfa8c3a88..eaca3fcdab 100644
--- a/src/octoprint/plugins/appkeys/static/js/appkeys.js
+++ b/src/octoprint/plugins/appkeys/static/js/appkeys.js
@@ -6,6 +6,9 @@ $(function () {
 
         self.onStartup = function () {
             self.dialog = $("#plugin_appkeys_keygenerated");
+            self.dialog.on("hidden", () => {
+                self.resetDialog();
+            });
         };
 
         self.showDialog = function (title, data) {
@@ -40,6 +43,17 @@ $(function () {
 
             self.dialog.modal("show");
         };
+
+        self.resetDialog = () => {
+            if (self.dialog === undefined) return;
+
+            self.dialog.find("#plugin_appkeys_keygenerated_title").text("");
+            self.dialog.find("#plugin_appkeys_keygenerated_user").text("");
+            self.dialog.find("#plugin_appkeys_keygenerated_app").text("");
+            self.dialog.find("#plugin_appkeys_keygenerated_key_text").text("");
+            self.dialog.find("#plugin_appkeys_keygenerated_key_copy").off();
+            self.dialog.find("#plugin_appkeys_keygenerated_key_qrcode").empty();
+        };
     }
 
     function UserAppKeysViewModel(parameters) {
@@ -69,7 +83,7 @@ $(function () {
         self.editorApp = ko.observable();
 
         self.requestData = function () {
-            OctoPrint.plugins.appkeys.getKeys().done(self.fromResponse);
+            return OctoPrint.plugins.appkeys.getKeys().done(self.fromResponse);
         };
 
         self.fromResponse = function (response) {
@@ -81,26 +95,42 @@ $(function () {
         };
 
         self.generateKey = function () {
-            return OctoPrint.plugins.appkeys
-                .generateKey(self.editorApp())
-                .done(self.requestData)
-                .done(function () {
-                    self.editorApp("");
-                });
+            self.loginState.reauthenticateIfNecessary(() => {
+                OctoPrint.plugins.appkeys
+                    .generateKey(self.editorApp())
+                    .done(self.requestData)
+                    .done(function () {
+                        self.editorApp("");
+                    });
+            });
         };
 
-        self.revokeKey = function (key) {
-            var perform = function () {
-                OctoPrint.plugins.appkeys.revokeKey(key).done(self.requestData);
-            };
+        self.revokeKey = (data) => {
+            const app = data.app_id;
+
+            self.loginState.reauthenticateIfNecessary(() => {
+                showConfirmationDialog(
+                    _.sprintf(
+                        gettext(
+                            "You are about to revoke the application key for %(app)s."
+                        ),
+                        {app: _.escape(app)}
+                    ),
+                    () => {
+                        OctoPrint.plugins.appkeys
+                            .revokeKeyForApp(app)
+                            .done(self.requestData);
+                    }
+                );
+            });
+        };
 
-            showConfirmationDialog(
-                _.sprintf(
-                    gettext('You are about to revoke the application key "%(key)s".'),
-                    {key: _.escape(key)}
-                ),
-                perform
-            );
+        self.showKeyDetails = (data) => {
+            self.loginState.reauthenticateIfNecessary(() => {
+                OctoPrint.plugins.appkeys.getKey(data.app_id).done((response) => {
+                    self.dialog.showDialog(gettext("Details"), response.key);
+                });
+            });
         };
 
         self.allowApp = function (token) {
@@ -135,8 +165,10 @@ $(function () {
                         {
                             text: gettext("Allow"),
                             click: function (notice) {
-                                self.allowApp(token);
-                                notice.remove();
+                                self.loginState.reauthenticateIfNecessary(() => {
+                                    self.allowApp(token);
+                                    notice.remove();
+                                });
                             }
                         },
                         {
@@ -245,7 +277,7 @@ $(function () {
         };
 
         self.requestData = function () {
-            OctoPrint.plugins.appkeys.getAllKeys().done(self.fromResponse);
+            return OctoPrint.plugins.appkeys.getAllKeys().done(self.fromResponse);
         };
 
         self.fromResponse = function (response) {
@@ -267,46 +299,65 @@ $(function () {
             self.apps(apps);
         };
 
+        self.showKeyDetails = (data) => {
+            self.loginState.reauthenticateIfNecessary(() => {
+                OctoPrint.plugins.appkeys
+                    .getKey(data.app_id, data.user_id)
+                    .done((response) => {
+                        self.dialog.showDialog(gettext("Details"), response.key);
+                    });
+            });
+        };
+
         self.generateKey = function () {
-            return OctoPrint.plugins.appkeys
-                .generateKeyForUser(self.editorUser(), self.editorApp())
-                .done(self.requestData)
-                .done(function () {
-                    self.editorUser(self.loginState.username());
-                    self.editorApp("");
-                })
-                .done(function (data) {
-                    self.dialog.showDialog(gettext("New key generated!"), data);
-                });
+            self.loginState.reauthenticateIfNecessary(() => {
+                OctoPrint.plugins.appkeys
+                    .generateKeyForUser(self.editorUser(), self.editorApp())
+                    .done(self.requestData)
+                    .done(function () {
+                        self.editorUser(self.loginState.username());
+                        self.editorApp("");
+                    })
+                    .done(function (data) {
+                        self.dialog.showDialog(gettext("New key generated!"), data);
+                    });
+            });
         };
 
-        self.revokeKey = function (key) {
-            var perform = function () {
-                OctoPrint.plugins.appkeys.revokeKey(key).done(self.requestData);
-            };
+        self.revokeKey = function (data) {
+            const app = data.app_id;
+            const user = data.user_id;
 
             showConfirmationDialog(
                 _.sprintf(
-                    gettext('You are about to revoke the application key "%(key)s".'),
-                    {key: _.escape(key)}
+                    gettext(
+                        "You are about to revoke the application key for %(app)s for user %(user)s."
+                    ),
+                    {app: _.escape(app), user: _.escape(user)}
                 ),
-                perform
+                () => {
+                    self.loginState.reauthenticateIfNecessary(() => {
+                        OctoPrint.plugins.appkeys
+                            .revokeKeyForApp(app, user)
+                            .done(self.requestData);
+                    });
+                }
             );
         };
 
         self.revokeMarked = function () {
-            var perform = function () {
-                self._bulkRevoke(self.markedForDeletion()).done(function () {
-                    self.markedForDeletion.removeAll();
-                });
-            };
-
             showConfirmationDialog(
                 _.sprintf(
                     gettext("You are about to revoke %(count)d application keys."),
                     {count: self.markedForDeletion().length}
                 ),
-                perform
+                () => {
+                    self.loginState.forceReauthentication(() => {
+                        self._bulkRevoke(self.markedForDeletion()).done(() => {
+                            self.markedForDeletion.removeAll();
+                        });
+                    });
+                }
             );
         };
 
@@ -315,13 +366,22 @@ $(function () {
                 _.uniq(
                     self
                         .markedForDeletion()
-                        .concat(_.map(self.keys.paginatedItems(), "api_key"))
+                        .concat(
+                            _.map(
+                                self.keys.paginatedItems(),
+                                (item) => `${item.user_id}:${item.app_id}`
+                            )
+                        )
                 )
             );
         };
 
         self.markAllForDeletion = function () {
-            self.markedForDeletion(_.uniq(_.map(self.keys.allItems, "api_key")));
+            self.markedForDeletion(
+                _.uniq(
+                    _.map(self.keys.allItems, (item) => `${item.user_id}:${item.app_id}`)
+                )
+            );
         };
 
         self.markAllByUserForDeletion = function (user) {
@@ -341,7 +401,12 @@ $(function () {
                 _.uniq(
                     self
                         .markedForDeletion()
-                        .concat(_.map(_.filter(self.keys.allItems, filter), "api_key"))
+                        .concat(
+                            _.map(
+                                _.filter(self.keys.allItems, filter),
+                                (item) => `${item.user_id}:${item.app_id}`
+                            )
+                        )
                 )
             );
         };
@@ -351,31 +416,49 @@ $(function () {
         };
 
         self._bulkRevoke = function (keys) {
+            /*
+             * TODO: This still has a risk of running into reauthentication for REALLY large numbers of keys
+             * whose bulk removal takes longer than the reauthentication timeout.
+             */
+
             var title, message, handler;
 
             title = gettext("Revoking application keys");
             message = _.sprintf(gettext("Revoking %(count)d application keys..."), {
                 count: keys.length
             });
-            handler = function (key) {
+            handler = function (id) {
+                const [user, app] = rsplit(id, ":", 1);
                 return OctoPrint.plugins.appkeys
-                    .revokeKey(key)
+                    .revokeKeyForApp(app, user)
                     .done(function () {
                         deferred.notify(
-                            _.sprintf(gettext("Revoked %(key)s..."), {
-                                key: _.escape(key)
+                            _.sprintf(gettext("Revoked %(app)s for %(user)s..."), {
+                                app: _.escape(app),
+                                user: _.escape(user)
                             }),
                             true
                         );
                     })
                     .fail(function (jqXHR) {
                         var short = _.sprintf(
-                            gettext("Revocation of %(key)s failed, continuing..."),
-                            {key: _.escape(key)}
+                            gettext(
+                                "Revocation of %(app)s for user %(user)s failed, continuing..."
+                            ),
+                            {
+                                app: _.escape(app),
+                                user: _.escape(user)
+                            }
                         );
                         var long = _.sprintf(
-                            gettext("Deletion of %(key)s failed: %(error)s"),
-                            {key: _.escape(key), error: _.escape(jqXHR.responseText)}
+                            gettext(
+                                "Deletion of %(app)s for user %(user)s failed: %(error)s"
+                            ),
+                            {
+                                app: _.escape(app),
+                                user: _.escape(user),
+                                error: _.escape(jqXHR.responseText)
+                            }
                         );
                         deferred.notify(short, long, false);
                     });
diff --git a/src/octoprint/plugins/appkeys/templates/appkeys.jinja2 b/src/octoprint/plugins/appkeys/templates/appkeys.jinja2
index 4b4f181414..889eeb2f36 100644
--- a/src/octoprint/plugins/appkeys/templates/appkeys.jinja2
+++ b/src/octoprint/plugins/appkeys/templates/appkeys.jinja2
@@ -20,7 +20,7 @@
             <div class="control-group">
                 <label class="control-label">{{ _('API Key') }}</label>
                 <div class="controls">
-                    <strong id="plugin_appkeys_keygenerated_key_text" class="control-text"></strong>
+                    <strong class="control-text"><code id="plugin_appkeys_keygenerated_key_text"></code></strong>
                     <a href="javascript:void(0)" id="plugin_appkeys_keygenerated_key_copy" title="{{ _('Copy API Key to clipboard')|edq }}" class="control-text"><i class="fas fa-copy"></i></a>
                 </div>
             </div>
diff --git a/src/octoprint/plugins/appkeys/templates/appkeys_settings.jinja2 b/src/octoprint/plugins/appkeys/templates/appkeys_settings.jinja2
index c9eb271596..4a7258b912 100644
--- a/src/octoprint/plugins/appkeys/templates/appkeys_settings.jinja2
+++ b/src/octoprint/plugins/appkeys/templates/appkeys_settings.jinja2
@@ -40,10 +40,10 @@
         </thead>
         <tbody data-bind="foreach: keys.paginatedItems">
         <tr>
-            <td class="settings_plugin_appkeys_checkbox"><input type="checkbox" data-bind="value: api_key, checked: $root.markedForDeletion"></td>
+            <td class="settings_plugin_appkeys_checkbox"><input type="checkbox" data-bind="value: user_id + ':' + app_id, checked: $root.markedForDeletion"></td>
             <td class="settings_plugin_appkeys_user"><span data-bind="text: user_id"></span></td>
-            <td class="settings_plugin_appkeys_app"><span data-bind="text: app_id"></span><br /><small class="muted">{{ _('API Key') }}: <span data-bind="text: api_key"></span> <a href="javascript:void(0)" title="{{ _('Copy API Key to clipboard')|edq }}" data-bind="click: function() { copyToClipboard(api_key) }"><i class="fas fa-copy"></i></a></small></td>
-            <td class="settings_plugin_appkeys_actions"><a href="javascript:void(0)" title="{{ _('Revoke')|edq }}" class="fa fa-trash-o" data-bind="click: function() { $parent.revokeKey($data.api_key, $data.user_id) }"></a>&nbsp;|&nbsp;<a href="javascript:void(0)" title="{{ _('Details')|edq }}" class="fas fa-search" data-bind="click: function() { $parent.dialog.showDialog(gettext('Details'), $data) }"></a></td>
+            <td class="settings_plugin_appkeys_app"><span data-bind="text: app_id"></span></td>
+            <td class="settings_plugin_appkeys_actions"><a href="javascript:void(0)" title="{{ _('Revoke')|edq }}" class="fa fa-trash-o" data-bind="click: function() { $parent.revokeKey($data) }"></a>&nbsp;|&nbsp;<a href="javascript:void(0)" title="{{ _('Details')|edq }}" class="fas fa-search" data-bind="click: function() { $parent.showKeyDetails($data) }"></a></td>
         </tr>
         </tbody>
     </table>
@@ -71,12 +71,12 @@
     <div class="control-group">
         <label class="control-label">{{ _('Application identifier') }}</label>
         <div class="controls">
-            <input type="text" data-bind="value: editorApp">
+            <input type="text" data-bind="value: editorApp, valueUpdate: 'input'">
         </div>
     </div>
     <div class="control-group">
         <div class="controls">
-            <button class="btn btn-primary" data-bind="click: generateKey">{{ _('Generate') }}</button>
+            <button class="btn btn-primary" data-bind="click: generateKey, enabled: editorApp, css: {disabled: !editorApp()}">{{ _('Generate') }}</button>
         </div>
     </div>
 </form>
diff --git a/src/octoprint/plugins/appkeys/templates/appkeys_usersettings.jinja2 b/src/octoprint/plugins/appkeys/templates/appkeys_usersettings.jinja2
index 3f127c54fe..f37dc0df7e 100644
--- a/src/octoprint/plugins/appkeys/templates/appkeys_usersettings.jinja2
+++ b/src/octoprint/plugins/appkeys/templates/appkeys_usersettings.jinja2
@@ -13,8 +13,10 @@
         </thead>
         <tbody data-bind="foreach: keys.paginatedItems">
         <tr>
-            <td class="settings_plugin_appkeys_app"><span data-bind="text: app_id"></span><br /><small class="muted">{{ _('API Key') }}: <span data-bind="text: api_key"></span> <a href="javascript:void(0)" title="{{ _('Copy API Key to clipboard')|edq }}" data-bind="click: function() { copyToClipboard(api_key) }"><i class="fas fa-copy"></i></a></small></td>
-            <td class="settings_plugin_appkeys_actions"><a href="javascript:void(0)" title="{{ _('Revoke')|edq }}" class="far fa-trash-alt" data-bind="click: function() { $parent.revokeKey($data.api_key) }"></a>&nbsp;|&nbsp;<a href="javascript:void(0)" title="{{ _('Details')|edq }}" class="fas fa-search" data-bind="click: function() { $parent.dialog.showDialog(gettext('Details'), $data) }"></a></td>
+            <td class="settings_plugin_appkeys_app">
+                <span data-bind="text: app_id"></span>
+            </td>
+            <td class="settings_plugin_appkeys_actions"><a href="javascript:void(0)" title="{{ _('Revoke')|edq }}" class="far fa-trash-alt" data-bind="click: function() { $parent.revokeKey($data) }"></a>&nbsp;|&nbsp;<a href="javascript:void(0)" title="{{ _('Details')|edq }}" class="fas fa-search" data-bind="click: function() { $parent.showKeyDetails($data) }"></a></td>
         </tr>
         </tbody>
     </table>
@@ -37,13 +39,13 @@
     <div class="control-group">
         <label class="control-label">{{ _('Application identifier') }}</label>
         <div class="controls">
-            <input type="text" data-bind="value: editorApp">
+            <input type="text" data-bind="value: editorApp, valueUpdate: 'input'">
         </div>
     </div>
 
     <div class="control-group">
         <div class="controls">
-            <button class="btn btn-primary" data-bind="click: generateKey">{{ _('Generate') }}</button>
+            <button class="btn btn-primary" data-bind="click: generateKey, enabled: editorApp, css: {disabled: !editorApp()}">{{ _('Generate') }}</button>
         </div>
     </div>
 </form>
diff --git a/src/octoprint/plugins/pluginmanager/__init__.py b/src/octoprint/plugins/pluginmanager/__init__.py
index 1fe5cfb5db..2c1ce9950a 100644
--- a/src/octoprint/plugins/pluginmanager/__init__.py
+++ b/src/octoprint/plugins/pluginmanager/__init__.py
@@ -29,7 +29,9 @@
 from octoprint.server import safe_mode
 from octoprint.server.util.flask import (
     check_etag,
+    ensure_credentials_checked_recently,
     no_firstrun_access,
+    require_credentials_checked_recently,
     with_revalidation_checking,
 )
 from octoprint.settings import valid_boolean_trues
@@ -360,6 +362,7 @@ def get_template_types(self, template_sorting, template_rules, *args, **kwargs):
 
     @octoprint.plugin.BlueprintPlugin.route("/upload_file", methods=["POST"])
     @no_firstrun_access
+    @require_credentials_checked_recently
     @Permissions.PLUGIN_PLUGINMANAGER_INSTALL.require(403)
     def upload_file(self):
         import flask
@@ -752,6 +755,9 @@ def on_api_command(self, command, data):
             # do not update while a print job is running
             # store targets to be run later on print done event
             if command == "install" and data not in self._queued_installs:
+                if not Permissions.PLUGIN_PLUGINMANAGER_INSTALL.can():
+                    abort(403)
+                ensure_credentials_checked_recently()
                 self._logger.debug(f"Queuing install of {data}")
                 self._queued_installs.append(data)
             if len(self._queued_installs) > 0:
@@ -769,6 +775,7 @@ def on_api_command(self, command, data):
         elif command == "install":
             if not Permissions.PLUGIN_PLUGINMANAGER_INSTALL.can():
                 abort(403)
+            ensure_credentials_checked_recently()
             url = data["url"]
             plugin_name = data.get("plugin")
             from_repo = data.get("from_repo", False)
diff --git a/src/octoprint/plugins/pluginmanager/static/js/pluginmanager.js b/src/octoprint/plugins/pluginmanager/static/js/pluginmanager.js
index c5cf51be50..2383a3e40a 100644
--- a/src/octoprint/plugins/pluginmanager/static/js/pluginmanager.js
+++ b/src/octoprint/plugins/pluginmanager/static/js/pluginmanager.js
@@ -482,18 +482,20 @@ $(function () {
                 self.uploadButton.unbind("click");
                 self.uploadButton.bind("click", function () {
                     const proceed = () => {
-                        self._markWorking(
-                            isJsonFile
-                                ? gettext("Installing plugins...")
-                                : gettext("Installing plugin..."),
-                            isJsonFile
-                                ? gettext("Installing plugins from uploaded file...")
-                                : gettext("Installing plugin from uploaded file...")
-                        );
-                        data.formData = {
-                            dependency_links: self.followDependencyLinks()
-                        };
-                        data.submit();
+                        self.loginState.reauthenticateIfNecessary(() => {
+                            self._markWorking(
+                                isJsonFile
+                                    ? gettext("Installing plugins...")
+                                    : gettext("Installing plugin..."),
+                                isJsonFile
+                                    ? gettext("Installing plugins from uploaded file...")
+                                    : gettext("Installing plugin from uploaded file...")
+                            );
+                            data.formData = {
+                                dependency_links: self.followDependencyLinks()
+                            };
+                            data.submit();
+                        });
                     };
 
                     if (isJsonFile) {
@@ -1160,12 +1162,14 @@ $(function () {
             self.selectedPlugins([]);
         };
 
-        self.showRepository = function () {
-            self.repositoryDialog.modal({
-                minHeight: function () {
-                    return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);
-                },
-                show: true
+        self.showRepository = () => {
+            self.loginState.reauthenticateIfNecessary(() => {
+                self.repositoryDialog.modal({
+                    minHeight: function () {
+                        return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);
+                    },
+                    show: true
+                });
             });
         };
 
@@ -1174,14 +1178,6 @@ $(function () {
         };
 
         self.installFromRepository = function (data) {
-            if (
-                !self.loginState.hasPermission(
-                    self.access.permissions.PLUGIN_PLUGINMANAGER_INSTALL
-                )
-            ) {
-                return;
-            }
-
             self.installPlugin(
                 data.archive,
                 data.title,
@@ -1235,110 +1231,117 @@ $(function () {
                 followDependencyLinks = self.followDependencyLinks();
             }
 
-            var workTitle, workText;
-            if (!reinstall) {
-                workTitle = gettext("Installing plugin...");
-                if (name) {
+            self.loginState.reauthenticateIfNecessary(() => {
+                var workTitle, workText;
+                if (!reinstall) {
+                    workTitle = gettext("Installing plugin...");
+                    if (name) {
+                        workText = _.sprintf(
+                            gettext('Installing plugin "%(name)s" from %(url)s...'),
+                            {url: _.escape(url), name: _.escape(name)}
+                        );
+                    } else {
+                        workText = _.sprintf(
+                            gettext("Installing plugin from %(url)s..."),
+                            {
+                                url: _.escape(url)
+                            }
+                        );
+                    }
+                } else {
+                    workTitle = gettext("Reinstalling plugin...");
                     workText = _.sprintf(
-                        gettext('Installing plugin "%(name)s" from %(url)s...'),
+                        gettext('Reinstalling plugin "%(name)s" from %(url)s...'),
                         {url: _.escape(url), name: _.escape(name)}
                     );
-                } else {
-                    workText = _.sprintf(gettext("Installing plugin from %(url)s..."), {
-                        url: _.escape(url)
-                    });
                 }
-            } else {
-                workTitle = gettext("Reinstalling plugin...");
-                workText = _.sprintf(
-                    gettext('Reinstalling plugin "%(name)s" from %(url)s...'),
-                    {url: _.escape(url), name: _.escape(name)}
-                );
-            }
 
-            if (self.multiInstallRunning()) {
-                workTitle =
-                    _.sprintf("[%(index)d/%(total)d] ", {
-                        index:
-                            this.multiInstallInitialSize() -
-                            self.multiInstallQueue().length,
-                        total: this.multiInstallInitialSize()
-                    }) + workTitle;
-            }
+                if (self.multiInstallRunning()) {
+                    workTitle =
+                        _.sprintf("[%(index)d/%(total)d] ", {
+                            index:
+                                this.multiInstallInitialSize() -
+                                self.multiInstallQueue().length,
+                            total: this.multiInstallInitialSize()
+                        }) + workTitle;
+                }
 
-            self._markWorking(workTitle, workText);
+                self._markWorking(workTitle, workText);
 
-            var onSuccess = function (response) {
-                    self.installUrl("");
-                    if (response.hasOwnProperty("queued_installs")) {
-                        self.queuedInstalls(response.queued_installs);
-                        var text =
-                            '<div class="row-fluid"><p>' +
-                            gettext("The following plugins are queued to be installed.") +
-                            "</p><ul><li>" +
-                            _.map(response.queued_installs, function (info) {
-                                var plugin = ko.utils.arrayFirst(
-                                    self.repositoryplugins.paginatedItems(),
-                                    function (item) {
-                                        return item.archive === info.url;
-                                    }
-                                );
-                                return plugin.title;
-                            }).join("</li><li>") +
-                            "</li></ul></div>";
-                        if (typeof self.installQueuePopup !== "undefined") {
-                            self.installQueuePopup.update({
-                                text: text
-                            });
-                            if (self.installQueuePopup.state === "closed") {
-                                self.installQueuePopup.open();
+                var onSuccess = function (response) {
+                        self.installUrl("");
+                        if (response.hasOwnProperty("queued_installs")) {
+                            self.queuedInstalls(response.queued_installs);
+                            var text =
+                                '<div class="row-fluid"><p>' +
+                                gettext(
+                                    "The following plugins are queued to be installed."
+                                ) +
+                                "</p><ul><li>" +
+                                _.map(response.queued_installs, function (info) {
+                                    var plugin = ko.utils.arrayFirst(
+                                        self.repositoryplugins.paginatedItems(),
+                                        function (item) {
+                                            return item.archive === info.url;
+                                        }
+                                    );
+                                    return plugin.title;
+                                }).join("</li><li>") +
+                                "</li></ul></div>";
+                            if (typeof self.installQueuePopup !== "undefined") {
+                                self.installQueuePopup.update({
+                                    text: text
+                                });
+                                if (self.installQueuePopup.state === "closed") {
+                                    self.installQueuePopup.open();
+                                }
+                            } else {
+                                self.installQueuePopup = new PNotify({
+                                    title: gettext("Plugin installs queued"),
+                                    text: text,
+                                    type: "notice"
+                                });
+                            }
+                            if (self.multiInstallQueue().length > 0) {
+                                self.performMultiInstallJob();
+                            } else {
+                                self.multiInstallRunning(false);
+                                self.workingDialog.modal("hide");
+                                self._markDone();
                             }
-                        } else {
-                            self.installQueuePopup = new PNotify({
-                                title: gettext("Plugin installs queued"),
-                                text: text,
-                                type: "notice"
-                            });
                         }
-                        if (self.multiInstallQueue().length > 0) {
-                            self.performMultiInstallJob();
+                    },
+                    onError = function (jqXHR) {
+                        if (jqXHR.status === 409) {
+                            // there's already a plugin being installed
+                            self._markDone(
+                                "There's already another plugin install in progress."
+                            );
                         } else {
-                            self.multiInstallRunning(false);
-                            self.workingDialog.modal("hide");
-                            self._markDone();
+                            self._markDone(
+                                "Could not install plugin, unknown error, please consult octoprint.log for details"
+                            );
+                            new PNotify({
+                                title: gettext("Something went wrong"),
+                                text: gettext("Please consult octoprint.log for details"),
+                                type: "error",
+                                hide: false
+                            });
                         }
-                    }
-                },
-                onError = function (jqXHR) {
-                    if (jqXHR.status === 409) {
-                        // there's already a plugin being installed
-                        self._markDone(
-                            "There's already another plugin install in progress."
-                        );
-                    } else {
-                        self._markDone(
-                            "Could not install plugin, unknown error, please consult octoprint.log for details"
-                        );
-                        new PNotify({
-                            title: gettext("Something went wrong"),
-                            text: gettext("Please consult octoprint.log for details"),
-                            type: "error",
-                            hide: false
-                        });
-                    }
-                };
+                    };
 
-            if (reinstall) {
-                OctoPrint.plugins.pluginmanager
-                    .reinstall(reinstall, url, followDependencyLinks, fromRepo)
-                    .done(onSuccess)
-                    .fail(onError);
-            } else {
-                OctoPrint.plugins.pluginmanager
-                    .install(url, followDependencyLinks, fromRepo)
-                    .done(onSuccess)
-                    .fail(onError);
-            }
+                if (reinstall) {
+                    OctoPrint.plugins.pluginmanager
+                        .reinstall(reinstall, url, followDependencyLinks, fromRepo)
+                        .done(onSuccess)
+                        .fail(onError);
+                } else {
+                    OctoPrint.plugins.pluginmanager
+                        .install(url, followDependencyLinks, fromRepo)
+                        .done(onSuccess)
+                        .fail(onError);
+                }
+            });
         };
 
         self.uninstallPlugin = function (data) {
diff --git a/src/octoprint/schema/config/access_control.py b/src/octoprint/schema/config/access_control.py
index dd27107dbe..e6c1370989 100644
--- a/src/octoprint/schema/config/access_control.py
+++ b/src/octoprint/schema/config/access_control.py
@@ -50,3 +50,6 @@ class AccessControlConfig(BaseModel):
 
     addRemoteUsers: bool = False
     """If a remote user is not found, add them. Use this only if all users from the remote system can use OctoPrint."""
+
+    defaultReauthenticationTimeout: int = 5
+    """Default timeout after which to require reauthentication by a user for dangerous changes, in minutes. Defaults to 5 minutes. Set to 0 to disable reauthentication requirements (SECURITY IMPACT!)."""
diff --git a/src/octoprint/server/__init__.py b/src/octoprint/server/__init__.py
index 8c542e233a..157813c8f5 100644
--- a/src/octoprint/server/__init__.py
+++ b/src/octoprint/server/__init__.py
@@ -195,6 +195,7 @@ def on_user_logged_out(sender, user=None):
 def on_user_loaded_from_cookie(sender, user=None):
     if user:
         session["login_mechanism"] = "remember_me"
+        session["credentials_seen"] = False
 
 
 def load_user(id):
diff --git a/src/octoprint/server/api/__init__.py b/src/octoprint/server/api/__init__.py
index 8bce260fcb..262cd57585 100644
--- a/src/octoprint/server/api/__init__.py
+++ b/src/octoprint/server/api/__init__.py
@@ -2,6 +2,7 @@
 __license__ = "GNU Affero General Public License http://www.gnu.org/licenses/agpl.html"
 __copyright__ = "Copyright (C) 2014 The OctoPrint Project - Released under terms of the AGPLv3 License"
 
+import datetime
 import logging
 
 from flask import (
@@ -41,6 +42,7 @@
     no_firstrun_access,
     passive_login,
     session_signature,
+    to_api_credentials_seen,
 )
 from octoprint.settings import settings as s
 from octoprint.settings import valid_boolean_trues
@@ -329,7 +331,8 @@ def login():
                 identity_changed.send(
                     current_app._get_current_object(), identity=Identity(user.get_id())
                 )
-                session["login_mechanism"] = "http"
+                session["login_mechanism"] = "password"
+                session["credentials_seen"] = datetime.datetime.now().timestamp()
 
                 logging.getLogger(__name__).info(
                     "Actively logging in user {} from {}".format(
@@ -345,6 +348,9 @@ def login():
                     additional_private=s().get(["server", "ipCheck", "trustedSubnets"]),
                 )
                 response["_login_mechanism"] = session["login_mechanism"]
+                response["_credentials_seen"] = to_api_credentials_seen(
+                    session["credentials_seen"]
+                )
 
                 r = make_response(jsonify(response))
                 r.delete_cookie("active_logout")
diff --git a/src/octoprint/server/api/access.py b/src/octoprint/server/api/access.py
index 4c8bd86fd1..c496a43e84 100644
--- a/src/octoprint/server/api/access.py
+++ b/src/octoprint/server/api/access.py
@@ -10,7 +10,11 @@
 from octoprint.access.permissions import Permissions
 from octoprint.server import SUCCESS, groupManager, userManager
 from octoprint.server.api import api, valid_boolean_trues
-from octoprint.server.util.flask import no_firstrun_access
+from octoprint.server.util.flask import (
+    ensure_credentials_checked_recently,
+    no_firstrun_access,
+    require_credentials_checked_recently,
+)
 
 # ~~ permission api
 
@@ -32,6 +36,7 @@ def get_groups():
 
 @api.route("/access/groups", methods=["POST"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def add_group():
     data = request.get_json()
@@ -77,6 +82,7 @@ def get_group(key):
 
 @api.route("/access/groups/<key>", methods=["PUT"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def update_group(key):
     data = request.get_json()
@@ -107,6 +113,7 @@ def update_group(key):
 
 @api.route("/access/groups/<key>", methods=["DELETE"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def remove_group(key):
     try:
@@ -130,6 +137,7 @@ def get_users():
 
 @api.route("/access/users", methods=["POST"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def add_user():
     data = request.get_json()
@@ -179,6 +187,7 @@ def get_user(username):
 
 @api.route("/access/users/<username>", methods=["PUT"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def update_user(username):
     user = userManager.find_user(username)
@@ -208,8 +217,15 @@ def update_user(username):
 
 @api.route("/access/users/<username>", methods=["DELETE"])
 @no_firstrun_access
+@require_credentials_checked_recently
 @Permissions.ADMIN.require(403)
 def remove_user(username):
+    if not userManager.enabled:
+        return jsonify(SUCCESS)
+
+    if current_user.get_name() == username:
+        abort(400, description="You cannot delete yourself")
+
     try:
         userManager.remove_user(username)
         return get_users()
@@ -236,13 +252,20 @@ def change_password_for_user(username):
         if "password" not in data or not data["password"]:
             abort(400, description="new password is missing")
 
-        if not current_user.has_permission(Permissions.ADMIN) or "current" in data:
+        if current_user.get_name() == username:
             if "current" not in data or not data["current"]:
                 abort(400, description="current password is missing")
 
             if not userManager.check_password(username, data["current"]):
                 abort(403, description="Invalid current password")
 
+        elif current_user.has_permission(Permissions.ADMIN):
+            ensure_credentials_checked_recently()
+
+        else:
+            # this should never happen
+            abort(403, description="You are not allowed to change this user's password")
+
         try:
             userManager.change_user_password(username, data["password"])
         except users.UnknownUser:
@@ -285,6 +308,10 @@ def change_settings_for_user(username):
     ):
         abort(403)
 
+    if current_user.get_name() != username:
+        # this must be an admin, so we need to ensure credentials were checked
+        ensure_credentials_checked_recently()
+
     data = request.get_json()
 
     try:
@@ -305,6 +332,10 @@ def delete_apikey_for_user(username):
             or current_user.has_permission(Permissions.ADMIN)
         )
     ):
+        if current_user.get_name() != username:
+            # this must be an admin, so we need to ensure credentials were checked
+            ensure_credentials_checked_recently()
+
         try:
             userManager.delete_api_key(username)
         except users.UnknownUser:
@@ -328,6 +359,10 @@ def generate_apikey_for_user(username):
             or current_user.has_permission(Permissions.ADMIN)
         )
     ):
+        if current_user.get_name() != username:
+            # this must be an admin, so we need to ensure credentials were checked
+            ensure_credentials_checked_recently()
+
         try:
             apikey = userManager.generate_api_key(username)
         except users.UnknownUser:
diff --git a/src/octoprint/server/api/settings.py b/src/octoprint/server/api/settings.py
index 272626d36b..8c0b6da72e 100644
--- a/src/octoprint/server/api/settings.py
+++ b/src/octoprint/server/api/settings.py
@@ -13,7 +13,11 @@
 from octoprint.access.permissions import Permissions
 from octoprint.server import pluginManager, printer, userManager
 from octoprint.server.api import NO_CONTENT, api
-from octoprint.server.util.flask import no_firstrun_access, with_revalidation_checking
+from octoprint.server.util.flask import (
+    credentials_checked_recently,
+    no_firstrun_access,
+    with_revalidation_checking,
+)
 from octoprint.settings import settings, valid_boolean_trues
 from octoprint.timelapse import configure_timelapse
 from octoprint.webcams import (
@@ -91,6 +95,9 @@ def hash_update(value):
     # and likewise if the role of the user changes
     hash_update(repr(roles))
 
+    # of if the user reauthenticates
+    hash_update(repr(credentials_checked_recently()))
+
     return hash.hexdigest()
 
 
@@ -118,7 +125,9 @@ def getSettings():
 
     data = {
         "api": {
-            "key": s.get(["api", "key"]) if Permissions.ADMIN.can() else None,
+            "key": s.get(["api", "key"])
+            if Permissions.ADMIN.can() and credentials_checked_recently()
+            else None,
             "allowCrossOrigin": s.get(["api", "allowCrossOrigin"]),
         },
         "appearance": {
@@ -458,7 +467,7 @@ def setSettings():
 
 @api.route("/settings/apikey", methods=["POST"])
 @no_firstrun_access
-@Permissions.SETTINGS.require(403)
+@Permissions.ADMIN.require(403)
 def generateApiKey():
     apikey = settings().generateApiKey()
     return jsonify(apikey=apikey)
@@ -466,7 +475,7 @@ def generateApiKey():
 
 @api.route("/settings/apikey", methods=["DELETE"])
 @no_firstrun_access
-@Permissions.SETTINGS.require(403)
+@Permissions.ADMIN.require(403)
 def deleteApiKey():
     settings().deleteApiKey()
     return NO_CONTENT
diff --git a/src/octoprint/server/util/__init__.py b/src/octoprint/server/util/__init__.py
index daa89565c0..c7cda3479e 100644
--- a/src/octoprint/server/util/__init__.py
+++ b/src/octoprint/server/util/__init__.py
@@ -3,6 +3,7 @@
 __copyright__ = "Copyright (C) 2014 The OctoPrint Project - Released under terms of the AGPLv3 License"
 
 import base64
+import datetime
 import logging
 import sys
 
@@ -102,6 +103,18 @@ def loginUser(user, remember=False, login_mechanism=None):
         )
         if login_mechanism:
             _flask.session["login_mechanism"] = login_mechanism
+            _flask.session["credentials_seen"] = (
+                datetime.datetime.now().timestamp()
+                if login_mechanism
+                in (
+                    "password",
+                    "apikey",
+                    "authheader",
+                    "remote_user",
+                    "basic_auth",
+                )
+                else False
+            )
         return True
     return False
 
@@ -263,6 +276,7 @@ def get_user_for_remote_user_header(request):
 
     if user:
         _flask.session["login_mechanism"] = "remote_user"
+        _flask.session["credentials_seen"] = datetime.datetime.now().timestamp()
     return user
 
 
@@ -296,6 +310,7 @@ def get_user_for_authorization_header(header):
 
     if user:
         _flask.session["login_mechanism"] = "basic_auth"
+        _flask.session["credentials_seen"] = datetime.datetime.now().timestamp()
     return user
 
 
@@ -382,6 +397,39 @@ def has_permissions(*permissions):
     return all(map(lambda p: p.can(), permissions))
 
 
+def require_fresh_login_with(permissions=None, user_id=None):
+    """
+    Requires a login with fresh credentials.
+
+    Args:
+        permissions: list of all permissions required to pass the check
+        user_id: required user to pass the check
+
+    Returns: a flask redirect response to return if a login is required, or None
+    """
+
+    from octoprint.server import current_user, userManager
+    from octoprint.server.util.flask import credentials_checked_recently
+
+    response = require_login_with(permissions=permissions, user_id=user_id)
+    if response is not None:
+        return response
+
+    login_kwargs = {
+        "redirect": _flask.request.script_root + _flask.request.full_path,
+        "reauthenticate": "true",
+        "user_id": current_user.get_id(),
+    }
+    if (
+        _flask.request.headers.get("X-Preemptive-Recording", "no") == "no"
+        and userManager.has_been_customized()
+    ):
+        if not credentials_checked_recently():
+            return _flask.redirect(_flask.url_for("login", **login_kwargs))
+
+    return None
+
+
 def require_login_with(permissions=None, user_id=None):
     """
     Requires a login with the given permissions and/or user id.
diff --git a/src/octoprint/server/util/flask.py b/src/octoprint/server/util/flask.py
index 14af022b41..2d2f15a8e4 100644
--- a/src/octoprint/server/util/flask.py
+++ b/src/octoprint/server/util/flask.py
@@ -11,7 +11,7 @@
 import os
 import threading
 import time
-from datetime import datetime, timedelta
+from datetime import datetime, timedelta, timezone
 from typing import Any, Union
 
 import flask
@@ -732,6 +732,7 @@ def determine_user(u):
                             f"Logging in user {autologin_as} from {remote_address} via autologin"
                         )
                         flask.session["login_mechanism"] = "autologin"
+                        flask.session["credentials_seen"] = False
                         return autologin_user
             except Exception:
                 logger.exception(
@@ -753,9 +754,23 @@ def determine_user(u):
     )
     if flask.session.get("login_mechanism") is not None:
         response["_login_mechanism"] = flask.session.get("login_mechanism")
+    response["_credentials_seen"] = to_api_credentials_seen(
+        flask.session.get("credentials_seen", False)
+    )
     return flask.jsonify(response)
 
 
+def to_api_credentials_seen(credentials_seen):
+    if not credentials_seen:
+        return False
+
+    return (
+        datetime.fromtimestamp(credentials_seen, tz=timezone.utc)
+        .replace(microsecond=0)
+        .isoformat()
+    )
+
+
 # ~~ rate limiting helper
 
 
@@ -1636,6 +1651,47 @@ def decorated_view(*args, **kwargs):
     return decorated_view
 
 
+def credentials_checked_recently():
+    minutes = settings().getInt(["accessControl", "defaultReauthenticationTimeout"])
+    if not minutes:
+        return True
+
+    credentials_seen = flask.session.get("credentials_seen")
+    now = datetime.now()
+
+    try:
+        if credentials_seen and datetime.fromtimestamp(
+            credentials_seen
+        ) > now - timedelta(minutes=minutes):
+            # credentials seen less than the set minutes ago, proceed
+            return True
+    except Exception:
+        logging.getLogger(__name__).exception("Error while checking for seen credentials")
+        pass
+
+    return False
+
+
+def ensure_credentials_checked_recently():
+    if not credentials_checked_recently():
+        flask.abort(403, description="Please reauthenticate with your credentials")
+
+
+def require_credentials_checked_recently(func):
+    """
+    If you decorate a view with this, it will ensure that only users who entered their password
+    recently in this login session are allowed to proceed. Otherwise it will cause a HTTP 403 status code
+    to be returned by the decorated resource.
+    """
+
+    @functools.wraps(func)
+    def decorated_view(*args, **kwargs):
+        ensure_credentials_checked_recently()
+        return func(*args, **kwargs)
+
+    return decorated_view
+
+
 def get_remote_address(request):
     forwardedFor = request.headers.get("X-Forwarded-For", None)
     if forwardedFor is not None:
diff --git a/src/octoprint/server/views.py b/src/octoprint/server/views.py
index 025fcb231d..efadaac4b3 100644
--- a/src/octoprint/server/views.py
+++ b/src/octoprint/server/views.py
@@ -41,10 +41,12 @@
 )
 from octoprint.server.util import (
     has_permissions,
+    require_fresh_login_with,
     require_login_with,
     validate_local_redirect,
 )
 from octoprint.server.util.csrf import add_csrf_cookie
+from octoprint.server.util.flask import credentials_checked_recently
 from octoprint.settings import settings
 from octoprint.util import sv, to_bytes, to_unicode
 from octoprint.util.version import get_python_version_string
@@ -225,9 +227,12 @@ def login():
         permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]
 
     user_id = request.args.get("user_id", "")
+    reauthenticate = request.args.get("reauthenticate", "false").lower() == "true"
 
-    if (not user_id or current_user.get_id() == user_id) and has_permissions(
-        *permissions
+    if (
+        (not user_id or current_user.get_id() == user_id)
+        and has_permissions(*permissions)
+        and (not reauthenticate or credentials_checked_recently())
     ):
         return redirect(redirect_url)
 
@@ -237,6 +242,7 @@ def login():
         "permission_names": map(lambda x: x.get_name(), permissions),
         "user_id": user_id,
         "logged_in": not current_user.is_anonymous,
+        "reauthenticate": reauthenticate,
     }
 
     try:
@@ -257,7 +263,7 @@ def login():
 @app.route("/recovery")
 @app.route("/recovery/")
 def recovery():
-    response = require_login_with(permissions=[Permissions.ADMIN])
+    response = require_fresh_login_with(permissions=[Permissions.ADMIN])
     if response:
         return response
 
@@ -417,6 +423,9 @@ def wizard_active(templates):
     enable_webcam = settings().getBoolean(["webcam", "webcamEnabled"])
     enable_temperature_graph = settings().get(["feature", "temperatureGraph"])
     sockjs_connect_timeout = settings().getInt(["devel", "sockJsConnectTimeout"])
+    reauthentication_timeout = settings().getInt(
+        ["accessControl", "defaultReauthenticationTimeout"]
+    )
 
     def default_template_filter(template_type, template_key):
         if template_type == "tab":
@@ -431,6 +440,7 @@ def default_template_filter(template_type, template_key):
         enable_webcam,
         enable_temperature_graph,
         sockjs_connect_timeout,
+        reauthentication_timeout,
         connectivityChecker.online,
         wizard_active(_templates.get(locale)),
     ] + sorted(
@@ -647,6 +657,7 @@ def default_view():
                 "enableLoadingAnimation": enable_loading_animation,
                 "enableSdSupport": enable_sd_support,
                 "sockJsConnectTimeout": sockjs_connect_timeout * 1000,
+                "reauthenticationTimeout": reauthentication_timeout,
                 "wizard": wizard,
                 "online": connectivityChecker.online,
                 "now": now,
diff --git a/src/octoprint/static/js/app/client/settings.js b/src/octoprint/static/js/app/client/settings.js
index 204bb5a684..e061581376 100644
--- a/src/octoprint/static/js/app/client/settings.js
+++ b/src/octoprint/static/js/app/client/settings.js
@@ -48,6 +48,10 @@
         return this.base.postJson(apiKeyUrl, opts);
     };
 
+    OctoPrintSettingsClient.prototype.deleteApiKey = function (opts) {
+        return this.base.delete(apiKeyUrl, opts);
+    };
+
     OctoPrintClient.registerComponent("settings", OctoPrintSettingsClient);
     return OctoPrintSettingsClient;
 });
diff --git a/src/octoprint/static/js/app/helpers.js b/src/octoprint/static/js/app/helpers.js
index 0c719ee6d9..4a7f05fd2b 100644
--- a/src/octoprint/static/js/app/helpers.js
+++ b/src/octoprint/static/js/app/helpers.js
@@ -685,6 +685,14 @@ function formatNumberK(num) {
     }
 }
 
+function rsplit(str, sep, limit) {
+    // copy of Python's rsplit in JS
+    // adapted from https://stackoverflow.com/a/5202185
+    // caution: other than split in JS, this limit does limit the splits, NOT the number of parts
+    const parts = str.split(sep);
+    return limit ? [parts.slice(0, -limit).join(sep)].concat(parts.slice(-limit)) : parts;
+}
+
 function pnotifyAdditionalInfo(inner) {
     return (
         '<div class="pnotify_additional_info">' +
diff --git a/src/octoprint/static/js/app/viewmodels/access.js b/src/octoprint/static/js/app/viewmodels/access.js
index 498cc5748a..b40ecc2c1e 100644
--- a/src/octoprint/static/js/app/viewmodels/access.js
+++ b/src/octoprint/static/js/app/viewmodels/access.js
@@ -35,6 +35,14 @@ $(function () {
 
             self.currentUser = ko.observable(self.emptyUser).extend({notify: "always"});
 
+            self.isCurrentUser = (user) => {
+                return user && user.name && user.name == access.loginState.username();
+            };
+
+            self.isDeleteUserEnabled = (user) => {
+                return !self.isCurrentUser(user);
+            };
+
             self.editor = {
                 name: ko.observable(undefined),
                 groups: ko.observableArray([]),
@@ -160,22 +168,28 @@ $(function () {
             self.showAddUserDialog = function () {
                 if (!CONFIG_ACCESS_CONTROL) return;
 
-                self.currentUser(undefined);
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.currentUser(undefined);
 
-                $('ul.nav-pills a[data-toggle="tab"]:first', self.userEditorDialog).tab(
-                    "show"
-                );
-                self.userEditorDialog
-                    .modal({
-                        minHeight: function () {
-                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);
-                        }
-                    })
-                    .css({
-                        "margin-left": function () {
-                            return -($(this).width() / 2);
-                        }
-                    });
+                    $(
+                        'ul.nav-pills a[data-toggle="tab"]:first',
+                        self.userEditorDialog
+                    ).tab("show");
+                    self.userEditorDialog
+                        .modal({
+                            minHeight: function () {
+                                return Math.max(
+                                    $.fn.modal.defaults.maxHeight() - 80,
+                                    250
+                                );
+                            }
+                        })
+                        .css({
+                            "margin-left": function () {
+                                return -($(this).width() / 2);
+                            }
+                        });
+                });
             };
 
             self.confirmAddUser = function () {
@@ -189,10 +203,12 @@ $(function () {
                     active: self.editor.active()
                 };
 
-                self.addUser(user).done(function () {
-                    // close dialog
-                    self.currentUser(undefined);
-                    self.userEditorDialog.modal("hide");
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.addUser(user).done(function () {
+                        // close dialog
+                        self.currentUser(undefined);
+                        self.userEditorDialog.modal("hide");
+                    });
                 });
             };
 
@@ -222,17 +238,19 @@ $(function () {
                         });
                 };
 
-                OctoPrint.users
-                    .get(user.name)
-                    .done(function (data) {
-                        process(data);
-                    })
-                    .fail(function () {
-                        log.warn(
-                            "Could not fetch current user data, proceeding with client side data copy"
-                        );
-                        process(user);
-                    });
+                access.loginState.reauthenticateIfNecessary(() => {
+                    OctoPrint.users
+                        .get(user.name)
+                        .done(function (data) {
+                            process(data);
+                        })
+                        .fail(function () {
+                            log.warn(
+                                "Could not fetch current user data, proceeding with client side data copy"
+                            );
+                            process(user);
+                        });
+                });
             };
 
             self.confirmEditUser = function () {
@@ -243,45 +261,97 @@ $(function () {
                 user.groups = self.editor.groups();
                 user.permissions = self.editor.permissions();
 
-                self.updateUser(user).done(function () {
-                    // close dialog
-                    self.currentUser(undefined);
-                    self.userEditorDialog.modal("hide");
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.updateUser(user).done(function () {
+                        // close dialog
+                        self.currentUser(undefined);
+                        self.userEditorDialog.modal("hide");
+                    });
+                });
+            };
+
+            self.confirmRemoveUser = (user) => {
+                if (!CONFIG_ACCESS_CONTROL) return;
+
+                if (user.name === access.loginState.username()) {
+                    // we do not allow to delete ourselves
+                    new PNotify({
+                        title: gettext("Not possible"),
+                        text: gettext("You may not delete your own account."),
+                        type: "error"
+                    });
+                    return $.Deferred()
+                        .reject("You may not delete your own account")
+                        .promise();
+                }
+
+                access.loginState.reauthenticateIfNecessary(() => {
+                    showConfirmationDialog({
+                        title: gettext("Are you sure?"),
+                        message: _.sprintf(
+                            gettext('You are about to delete the user "%(name)s".'),
+                            {name: _.escape(user.name)}
+                        ),
+                        proceed: gettext("Delete"),
+                        onproceed: () => {
+                            self.removeUser(user);
+                        }
+                    });
                 });
             };
 
             self.showChangePasswordDialog = function (user) {
                 if (!CONFIG_ACCESS_CONTROL) return;
 
-                self.currentUser(user);
-                self.changePasswordDialog.modal("show");
+                const proceed = () => {
+                    self.currentUser(user);
+                    self.changePasswordDialog.modal("show");
+                };
+
+                if (self.isCurrentUser(user)) {
+                    proceed();
+                } else {
+                    access.loginState.reauthenticateIfNecessary(proceed);
+                }
             };
 
             self.confirmChangePassword = function () {
                 if (!CONFIG_ACCESS_CONTROL) return;
 
-                self.updatePassword(
-                    self.currentUser().name,
-                    self.editor.password(),
-                    self.editor.currentPassword()
-                )
-                    .done(function () {
-                        // close dialog
-                        self.currentUser(undefined);
-                        self.changePasswordDialog.modal("hide");
-                    })
-                    .fail(function (xhr) {
-                        if (xhr.status === 403) {
-                            self.currentPasswordMismatch(true);
-                        }
-                    });
+                const proceed = () => {
+                    self.updatePassword(
+                        self.currentUser().name,
+                        self.editor.password(),
+                        self.editor.currentPassword()
+                    )
+                        .done(function () {
+                            // close dialog
+                            self.currentUser(undefined);
+                            self.changePasswordDialog.modal("hide");
+                        })
+                        .fail(function (xhr) {
+                            if (xhr.status === 403) {
+                                self.currentPasswordMismatch(true);
+                            }
+                        });
+                };
+
+                if (self.isCurrentUser()) {
+                    proceed();
+                } else {
+                    access.loginState.reauthenticateIfNecessary(proceed);
+                }
             };
 
             self.confirmGenerateApikey = function () {
                 if (!CONFIG_ACCESS_CONTROL) return;
 
-                self.generateApikey(self.currentUser().name).done(function (response) {
-                    self._updateApikey(response.apikey);
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.generateApikey(self.currentUser().name).done(function (
+                        response
+                    ) {
+                        self._updateApikey(response.apikey);
+                    });
                 });
             };
 
@@ -297,8 +367,10 @@ $(function () {
             self.confirmDeleteApikey = function () {
                 if (!CONFIG_ACCESS_CONTROL) return;
 
-                self.deleteApikey(self.currentUser().name).done(function () {
-                    self._updateApikey(undefined);
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.deleteApikey(self.currentUser().name).done(function () {
+                        self._updateApikey(undefined);
+                    });
                 });
             };
 
@@ -315,10 +387,16 @@ $(function () {
                 if (!user) {
                     throw OctoPrint.InvalidArgumentError("user must be set");
                 }
-                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))
+                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN)) {
                     return $.Deferred()
                         .reject("You are not authorized to perform this action")
                         .promise();
+                }
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
 
                 return OctoPrint.access.users.add(user).done(self.fromResponse);
             };
@@ -327,40 +405,29 @@ $(function () {
                 if (!user) {
                     throw OctoPrint.InvalidArgumentError("user must be set");
                 }
-                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))
+                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN)) {
                     return $.Deferred()
                         .reject("You are not authorized to perform this action")
                         .promise();
-
-                if (user.name === access.loginState.username()) {
-                    // we do not allow to delete ourselves
-                    new PNotify({
-                        title: gettext("Not possible"),
-                        text: gettext("You may not delete your own account."),
-                        type: "error"
-                    });
+                }
+                if (!access.loginState.credentialsSeen()) {
                     return $.Deferred()
-                        .reject("You may not delete your own account")
+                        .reject("You need to reauthenticate to perform this action")
                         .promise();
                 }
 
-                showConfirmationDialog({
-                    title: gettext("Are you sure?"),
-                    message: _.sprintf(
-                        gettext('You are about to delete the user "%(name)s".'),
-                        {name: _.escape(user.name)}
-                    ),
-                    proceed: gettext("Delete"),
-                    onproceed: function () {
-                        OctoPrint.access.users.delete(user.name).done(self.fromResponse);
-                    }
-                });
+                return OctoPrint.access.users.delete(user.name).done(self.fromResponse);
             };
 
             self.updateUser = function (user) {
                 if (!user) {
                     throw OctoPrint.InvalidArgumentError("user must be set");
                 }
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
 
                 return OctoPrint.access.users
                     .update(
@@ -374,16 +441,31 @@ $(function () {
             };
 
             self.updatePassword = function (username, password, current) {
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
                 return OctoPrint.access.users.changePassword(username, password, current);
             };
 
             self.generateApikey = function (username) {
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
                 return OctoPrint.access.users.generateApiKey(username).done(function () {
                     self.requestData();
                 });
             };
 
             self.deleteApikey = function (username) {
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
                 return OctoPrint.access.users.resetApiKey(username);
             };
 
@@ -576,21 +658,27 @@ $(function () {
             };
 
             self.showAddGroupDialog = function () {
-                self.currentGroup(undefined);
-                $('ul.nav-pills a[data-toggle="tab"]:first', self.groupEditorDialog).tab(
-                    "show"
-                );
-                self.groupEditorDialog
-                    .modal({
-                        minHeight: function () {
-                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);
-                        }
-                    })
-                    .css({
-                        "margin-left": function () {
-                            return -($(this).width() / 2);
-                        }
-                    });
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.currentGroup(undefined);
+                    $(
+                        'ul.nav-pills a[data-toggle="tab"]:first',
+                        self.groupEditorDialog
+                    ).tab("show");
+                    self.groupEditorDialog
+                        .modal({
+                            minHeight: function () {
+                                return Math.max(
+                                    $.fn.modal.defaults.maxHeight() - 80,
+                                    250
+                                );
+                            }
+                        })
+                        .css({
+                            "margin-left": function () {
+                                return -($(this).width() / 2);
+                            }
+                        });
+                });
             };
 
             self.confirmAddGroup = function () {
@@ -617,21 +705,27 @@ $(function () {
             self.showEditGroupDialog = function (group) {
                 if (!group.changeable) return;
 
-                self.currentGroup(group);
-                $('ul.nav-pills a[data-toggle="tab"]:first', self.groupEditorDialog).tab(
-                    "show"
-                );
-                self.groupEditorDialog
-                    .modal({
-                        minHeight: function () {
-                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);
-                        }
-                    })
-                    .css({
-                        "margin-left": function () {
-                            return -($(this).width() / 2);
-                        }
-                    });
+                access.loginState.reauthenticateIfNecessary(() => {
+                    self.currentGroup(group);
+                    $(
+                        'ul.nav-pills a[data-toggle="tab"]:first',
+                        self.groupEditorDialog
+                    ).tab("show");
+                    self.groupEditorDialog
+                        .modal({
+                            minHeight: function () {
+                                return Math.max(
+                                    $.fn.modal.defaults.maxHeight() - 80,
+                                    250
+                                );
+                            }
+                        })
+                        .css({
+                            "margin-left": function () {
+                                return -($(this).width() / 2);
+                            }
+                        });
+                });
             };
 
             self.confirmEditGroup = function () {
@@ -653,6 +747,24 @@ $(function () {
                 });
             };
 
+            self.confirmRemoveGroup = (group) => {
+                if (!group.removable) return;
+
+                access.loginState.reauthenticateIfNecessary(() => {
+                    showConfirmationDialog({
+                        title: gettext("Are you sure?"),
+                        message: _.sprintf(
+                            gettext('You are about to delete the group "%(name)s".'),
+                            {name: _.escape(group.name)}
+                        ),
+                        proceed: gettext("Delete"),
+                        onproceed: () => {
+                            self.removeGroup(group);
+                        }
+                    });
+                });
+            };
+
             //~~ Framework
 
             self.onStartup = function () {
@@ -665,6 +777,11 @@ $(function () {
                 if (!group) {
                     throw OctoPrint.InvalidArgumentError("group must be set");
                 }
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
 
                 return OctoPrint.access.groups.add(group).done(self.fromResponse);
             };
@@ -673,24 +790,15 @@ $(function () {
                 if (!group) {
                     throw OctoPrint.InvalidArgumentError("group must be set");
                 }
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
 
-                if (!group.removable) return;
-
-                showConfirmationDialog({
-                    title: gettext("Are you sure?"),
-                    message: _.sprintf(
-                        gettext('You are about to delete the group "%(name)s".'),
-                        {name: _.escape(group.name)}
-                    ),
-                    proceed: gettext("Delete"),
-                    onproceed: function () {
-                        OctoPrint.access.groups
-                            .delete(group.key)
-                            .done(function (response) {
-                                self.fromResponse(response);
-                                access.users.requestData();
-                            });
-                    }
+                OctoPrint.access.groups.delete(group.key).done((response) => {
+                    self.fromResponse(response);
+                    access.users.requestData();
                 });
             };
 
@@ -698,6 +806,11 @@ $(function () {
                 if (!group) {
                     throw OctoPrint.InvalidArgumentError("group must be set");
                 }
+                if (!access.loginState.credentialsSeen()) {
+                    return $.Deferred()
+                        .reject("You need to reauthenticate to perform this action")
+                        .promise();
+                }
 
                 return OctoPrint.access.groups.update(group).done(self.fromResponse);
             };
diff --git a/src/octoprint/static/js/app/viewmodels/loginstate.js b/src/octoprint/static/js/app/viewmodels/loginstate.js
index 6bfb286fba..bfd98408ae 100644
--- a/src/octoprint/static/js/app/viewmodels/loginstate.js
+++ b/src/octoprint/static/js/app/viewmodels/loginstate.js
@@ -6,6 +6,10 @@ $(function () {
         self.loginPass = ko.observable("");
         self.loginRemember = ko.observable(false);
 
+        self.reauthenticateDialog = undefined;
+        self.reauthenticatePass = ko.observable("");
+        self.reauthenticateFailed = ko.observable(false);
+
         self.loggedIn = ko.observable(undefined);
         self.username = ko.observable(undefined);
         self.userneeds = ko.observable(undefined);
@@ -17,6 +21,7 @@ $(function () {
 
         self.currentUser = ko.observable(undefined);
         self.currentLoginMechanism = ko.observable(undefined);
+        self.credentialsSeen = ko.observable(undefined);
 
         self.elementUsernameInput = undefined;
         self.elementPasswordInput = undefined;
@@ -74,6 +79,86 @@ $(function () {
                 .done(self.updateCurrentUserData);
         };
 
+        self._reauthenticated = false;
+
+        self.showReauthenticationDialog = () => {
+            const result = $.Deferred();
+
+            self._reauthenticated = false;
+            self.reauthenticateDialog.on("shown", function () {
+                $("input[type=password]", self.reauthenticateDialog).focus();
+            });
+            self.reauthenticateDialog.on("hidden", () => {
+                self.reauthenticatePass("");
+                self.reauthenticateFailed(false);
+                if (self._reauthenticated) {
+                    result.resolve();
+                } else {
+                    result.reject();
+                }
+            });
+            self.reauthenticateDialog.modal("show");
+
+            return result.promise();
+        };
+
+        self.reauthenticate = () => {
+            const user = self.currentUser().name;
+            const pass = self.reauthenticatePass();
+            return OctoPrint.browser
+                .login(user, pass)
+                .done((response) => {
+                    self.fromResponse(response);
+                    self.reauthenticateFailed(false);
+                    self._reauthenticated = self.credentialsSeen();
+                    $("#reauthenticate_dialog").modal("hide");
+                })
+                .fail((response) => {
+                    self.reauthenticatePass("");
+                    self.reauthenticateFailed(true);
+                });
+        };
+
+        self.reauthenticateIfNecessary = (callback) => {
+            if (!self.checkCredentialsSeen()) {
+                self.forceReauthentication(callback);
+            } else {
+                callback();
+            }
+        };
+
+        self.forceReauthentication = (callback) => {
+            self.showReauthenticationDialog()
+                .done(() => {
+                    callback();
+                })
+                .fail(() => {
+                    // Do nothing
+                });
+        };
+
+        self.checkCredentialsSeen = () => {
+            if (CONFIG_REAUTHENTICATION_TIMEOUT <= 0) return true;
+
+            const credentialsSeen = self.credentialsSeen();
+            if (!credentialsSeen) {
+                return false;
+            }
+
+            const now = new Date();
+            const seen = new Date(credentialsSeen);
+            return now - seen < CONFIG_REAUTHENTICATION_TIMEOUT * 60 * 1000;
+        };
+
+        self.afterReauthenticationTimeout = (callback, timeout) => {
+            if (CONFIG_REAUTHENTICATION_TIMEOUT <= 0) return;
+            if (timeout) window.clearTimeout(timeout);
+            return window.setTimeout(
+                callback,
+                (CONFIG_REAUTHENTICATION_TIMEOUT * 60 + 10) * 1000
+            );
+        };
+
         self.requestData = function () {
             return OctoPrint.browser
                 .passiveLogin()
@@ -91,6 +176,7 @@ $(function () {
                 if (response && response.name) {
                     self.loggedIn(true);
                     self.currentLoginMechanism(response._login_mechanism);
+                    self.credentialsSeen(response._credentials_seen);
                     self.updateCurrentUserData(response);
                     if (!currentLoggedIn || currentLoggedIn === undefined) {
                         callViewModels(self.allViewModels, "onUserLoggedIn", [response]);
@@ -242,6 +328,7 @@ $(function () {
                     self.loginUser("");
                     self.loginPass("");
                     self.loginRemember(false);
+                    self.reauthenticatePass("");
 
                     if (history && history.replaceState) {
                         history.replaceState(
@@ -322,6 +409,8 @@ $(function () {
         };
 
         self.onStartup = function () {
+            self.reauthenticateDialog = $("#reauthenticate_dialog");
+
             self.elementUsernameInput = $("#login_user");
             self.elementPasswordInput = $("#login_pass");
             self.elementLoginButton = $("#login_button");
@@ -476,6 +565,7 @@ $(function () {
     }
 
     OCTOPRINT_VIEWMODELS.push({
-        construct: LoginStateViewModel
+        construct: LoginStateViewModel,
+        elements: ["#reauthenticate_dialog"]
     });
 });
diff --git a/src/octoprint/static/js/app/viewmodels/settings.js b/src/octoprint/static/js/app/viewmodels/settings.js
index ce3e0d0c2d..df9b0a6ebc 100644
--- a/src/octoprint/static/js/app/viewmodels/settings.js
+++ b/src/octoprint/static/js/app/viewmodels/settings.js
@@ -127,6 +127,8 @@ $(function () {
         self.api_key = ko.observable(undefined);
         self.api_allowCrossOrigin = ko.observable(undefined);
 
+        self.apiKeyVisible = ko.observable(false);
+
         self.appearance_name = ko.observable(undefined);
         self.appearance_color = ko.observable(undefined);
         self.appearance_colorTransparent = ko.observable();
@@ -703,10 +705,36 @@ $(function () {
             );
         };
 
+        self.deleteApiKey = () => {
+            if (!CONFIG_ACCESS_CONTROL) return;
+            if (!self.api_key()) return;
+
+            showConfirmationDialog(
+                gettext(
+                    "This will delete the API Key. It will cease to to function immediately."
+                ),
+                function () {
+                    OctoPrint.settings.deleteApiKey().done(() => {
+                        self.api_key(undefined);
+                    });
+                }
+            );
+        };
+
         self.copyApiKey = function () {
             copyToClipboard(self.api_key());
         };
 
+        self.revealingApiKey = ko.observable(false);
+        self.revealApiKey = () => {
+            self.loginState.reauthenticateIfNecessary(() => {
+                self.revealingApiKey(true);
+                self.requestData().always(() => {
+                    self.revealingApiKey(false);
+                });
+            });
+        };
+
         self.showTranslationManager = function () {
             self.translationManagerDialog.modal();
             return false;
@@ -1067,6 +1095,7 @@ $(function () {
             return data;
         };
 
+        self.reauthenticationTimeout = undefined;
         self.fromResponse = function (response, local) {
             // server side changes to set
             var serverChangedData;
@@ -1254,6 +1283,15 @@ $(function () {
             mapToObservables(serverChangedData, specialMappings, clientChangedData);
 
             firstRequest.resolve();
+
+            // special delivery for the API key flag
+            self.apiKeyVisible(self.loginState.checkCredentialsSeen());
+            if (self.apiKeyVisible()) {
+                self.reauthenticationTimeout =
+                    self.loginState.afterReauthenticationTimeout(() => {
+                        self.requestData();
+                    }, self.reauthenticationTimeout);
+            }
         };
 
         self.cancelData = function () {
diff --git a/src/octoprint/templates/dialogs/reauthenticate.jinja2 b/src/octoprint/templates/dialogs/reauthenticate.jinja2
new file mode 100644
index 0000000000..49e43addaf
--- /dev/null
+++ b/src/octoprint/templates/dialogs/reauthenticate.jinja2
@@ -0,0 +1,25 @@
+<div id="reauthenticate_dialog" class="modal hide fade-in">
+    <div class="modal-header">
+        <a href="javascript:void()" class="close" data-dismiss="modal" aria-hidden="true">&times;</a>
+        <h3>{{ _('Please reauthenticate') }}</h3>
+    </div>
+    <div class="modal-body">
+        <p>{% trans %}
+            You need to reauthenticate to perform this action.
+            Please enter your password below.
+        {% endtrans %}</p>
+        <form class="form-horizontal" data-bind="event: {'submit': reauthenticate }" onsubmit="return false; // this gets overwritten on view model bind">
+            <div class="control-group">
+                <label class="control-label">{{ _('Password') }}</label>
+                <div class="controls">
+                    <input type="password" class="input-block-level" data-bind="value: reauthenticatePass" placeholder="{{ _("Password")|edq }}">
+                    <span class="help-block text-error" data-bind="visible: reauthenticateFailed">{{ _('Reauthentication failed. Wrong password?') }}</span>
+                </div>
+            </div>
+        </form>
+    </div>
+    <div class="modal-footer">
+        <button class="btn" data-dismiss="modal">{{ _('Abort') }}</button>
+        <button class="btn btn-primary" data-bind="click: function() { reauthenticate(); }">{{ _('Confirm') }}</button>
+    </div>
+</div>
diff --git a/src/octoprint/templates/dialogs/settings/api.jinja2 b/src/octoprint/templates/dialogs/settings/api.jinja2
index a3ec12fab1..23b19b87d1 100644
--- a/src/octoprint/templates/dialogs/settings/api.jinja2
+++ b/src/octoprint/templates/dialogs/settings/api.jinja2
@@ -25,14 +25,18 @@
         </div>
         <div class="control-group">
             <label class="control-label" for="settings-apikey">{{ _('Global API Key') }}</label>
-            <div class="controls">
+            <div class="controls" data-bind="visible: apiKeyVisible">
                 <div class="input-append input-block-level">
                     <input type="text" readonly="readonly" id="settings-apikey" data-bind="value: api_key, attr: {placeholder: '{{ _('N/A')|esq }}'}">
                     <a class="btn add-on" title="Copy API Key to clipboard" data-bind="click: copyApiKey, css: {'disabled': !api_key()}"><i class="fas fa-copy"></i></a>
                     <a class="btn add-on" title="Generate new API Key" data-bind="click: generateApiKey"><i class="fas fa-sync"></i></a>
+                    <a class="btn btn-danger add-on" title="Delete API Key" data-bind="click: deleteApiKey, css: {'disabled': !api_key()}"><i class="far fa-trash-alt"></i></a>
                 </div>
                 <span class="help-block">{{ _('Please note that changes to the API key are applied immediately, without having to "Save" first.') }}</span>
             </div>
+            <div class="controls" data-bind="visible: !apiKeyVisible()">
+                <button class="btn" data-bind="click: revealApiKey, enabled: !revealingApiKey(), css: {disabled: revealingApiKey}"><i class="fas fa-spinner fa-spin" data-bind="visible: revealingApiKey"></i> {{ _('Reveal API Key') }}</button>
+            </div>
         </div>
         <div class="control-group" data-bind="visible: api_key">
             <label class="control-label">{{ _('QR Code') }}</label>
diff --git a/src/octoprint/templates/index.jinja2 b/src/octoprint/templates/index.jinja2
index f5459d68ec..bf327b675a 100644
--- a/src/octoprint/templates/index.jinja2
+++ b/src/octoprint/templates/index.jinja2
@@ -177,6 +177,7 @@
             {% include 'dialogs/temperature.jinja2' %}
             {% include 'dialogs/timelapse.jinja2' %}
             {% include 'dialogs/firmwareerror.jinja2' %}
+            {% include 'dialogs/reauthenticate.jinja2' %}
             <!-- End of dialogs -->
 
             <!-- Overlays -->
diff --git a/src/octoprint/templates/initscript.jinja2 b/src/octoprint/templates/initscript.jinja2
index e968d91920..46c1e7996d 100644
--- a/src/octoprint/templates/initscript.jinja2
+++ b/src/octoprint/templates/initscript.jinja2
@@ -15,6 +15,7 @@
     var CONFIG_FIRST_RUN = {%  if firstRun -%} true; {% else %} false; {%- endif %}
     var CONFIG_TEMPERATURE_GRAPH = {%  if enableTemperatureGraph -%} true; {% else %} false; {%- endif %}
     var CONFIG_WIZARD = {% if wizard -%} true; {% else %} false; {%- endif %}
+    var CONFIG_REAUTHENTICATION_TIMEOUT = {{ reauthenticationTimeout }};
 
     var SOCKJS_URI = "{{ url_for('index') }}" + "sockjs";
     var SOCKJS_DEBUG = CONFIG_DEBUG;
diff --git a/src/octoprint/templates/login.jinja2 b/src/octoprint/templates/login.jinja2
index 8162356345..b4be96ee93 100644
--- a/src/octoprint/templates/login.jinja2
+++ b/src/octoprint/templates/login.jinja2
@@ -63,13 +63,21 @@
 
     <div id="login" class="container">
         <form class="form-signin">
-            <h2 class="form-signin-heading" data-test-id="login-title">{{ _('Please log in') }}</h2>
+            <h2 class="form-signin-heading" data-test-id="login-title">
+                {% if reauthenticate %}
+                    {{ _('Please reauthenticate') }}
+                {% else %}
+                    {{ _('Please log in') }}
+                {% endif %}
+            </h2>
 
             <div id="login-error-credentials" class="alert alert-error" data-test-id="login-error">{{ _('Incorrect username or password. Hint: Both are case sensitive!') }}</div>
             <div id="login-error-rate" class="alert alert-error" data-test-id="login-error-rate">{{ _('You have made too many failed login attempts. Please try again later.') }}</div>
             <div id="login-offline" class="alert alert-error">{{ _('Server is currently offline.') }} <a id="login-reconnect" href="javascript:void(0)">{{ _('Reconnect...') }}</a></div>
 
-            {% if user_id %}<p>
+            {% if reauthenticate %}<p>
+                {{ _('You need to reauthenticate before you can continue. Please enter your password below.') }}
+            </p>{% elif user_id %}<p>
                 {{ _('The following account is required:') }} {{ user_id|e }}
             </p>{% elif logged_in %}<p>
                 {{ _('An account with the following permissions is required:') }} {{ permission_names|join(", ") }}
@@ -77,10 +85,12 @@
 
             <input type="text" id="login-user" data-test-id="login-username" class="input-block-level" placeholder="{{ _('Username')|edq }}" {% if user_id %}value="{{ user_id|edq }}" disabled{% endif %} autofocus autocapitalize="none">
             <input type="password" id="login-password" data-test-id="login-password" class="input-block-level" placeholder="{{ _('Password')|edq }}">
+            {% if not reauthenticate %}
             <span class="pull-right"><small><a href="https://faq.octoprint.org/forgotten-password" id="login-forgotpassword" target="_blank" tabindex="-1">{{ _('Forgot password?') }}</a></small></span>
             <label class="checkbox">
                 <input type="checkbox" id="login-remember" data-test-id="login-remember-me"> {{ _('Remember me') }}
             </label>
+            {% endif %}
             <button class="btn btn-block btn-large btn-primary" id="login-button" data-test-id="login-submit" type="submit">{{ _('Log in') }}</button>
         </form>
     </div>
diff --git a/src/octoprint/templates/snippets/settings/accesscontrol/groups.jinja2 b/src/octoprint/templates/snippets/settings/accesscontrol/groups.jinja2
index 11a54ac7b6..2f7e0aeb22 100644
--- a/src/octoprint/templates/snippets/settings/accesscontrol/groups.jinja2
+++ b/src/octoprint/templates/snippets/settings/accesscontrol/groups.jinja2
@@ -27,7 +27,7 @@
             </table>
         </td>
         <td class="settings_groups_actions">
-            <a href="#" class="fas fa-pencil-alt" title="{{ _('Update group')|edq }}" data-bind="enable: changeable, css: {disabled: !changeable}, click: function() { $root.access.groups.showEditGroupDialog($data); }"></a>&nbsp;|&nbsp;<a href="#" class="far fa-trash-alt" title="{{ _('Delete group') }}" data-bind="enable: removable, css: {disabled: !removable}, click: function() { $root.access.groups.removeGroup($data); }"></a>
+            <a href="javascript:void()" class="fas fa-pencil-alt" title="{{ _('Update group')|edq }}" data-bind="enable: changeable, css: {disabled: !changeable}, click: function() { $root.access.groups.showEditGroupDialog($data); }"></a>&nbsp;|&nbsp;<a href="javascript:void()" class="far fa-trash-alt" title="{{ _('Delete group') }}" data-bind="enable: removable, css: {disabled: !removable}, click: function() { $root.access.groups.confirmRemoveGroup($data); }"></a>
         </td>
     </tr>
     </tbody>
diff --git a/src/octoprint/templates/snippets/settings/accesscontrol/users.jinja2 b/src/octoprint/templates/snippets/settings/accesscontrol/users.jinja2
index 2e2684dc27..cbb2c8c964 100644
--- a/src/octoprint/templates/snippets/settings/accesscontrol/users.jinja2
+++ b/src/octoprint/templates/snippets/settings/accesscontrol/users.jinja2
@@ -28,7 +28,7 @@
         </td>
         <td class="settings_users_active"><i class="far" data-bind="css: { 'fa-check-square': active, 'fa-square': !active }"></i></td>
         <td class="settings_users_actions">
-            <a href="#" class="fas fa-pencil-alt" title="{{ _('Update User')|edq }}" data-bind="click: function() { $root.access.users.showEditUserDialog($data); }"></a>&nbsp;|&nbsp;<a href="#" class="fas fa-key" title="{{ _('Change password') }}" data-bind="click: function() { $root.access.users.showChangePasswordDialog($data); }"></a>&nbsp;|&nbsp;<a href="#" class="far fa-trash-alt" title="{{ _('Delete user') }}" data-bind="click: function() { $root.access.users.removeUser($data); }"></a>
+            <a href="javascript:void()" class="fas fa-pencil-alt" title="{{ _('Update User')|edq }}" data-bind="click: function() { $root.access.users.showEditUserDialog($data); }"></a>&nbsp;|&nbsp;<a href="javascript:void()" class="fas fa-key" title="{{ _('Change password') }}" data-bind="click: function() { $root.access.users.showChangePasswordDialog($data); }"></a>&nbsp;|&nbsp;<a href="javascript:void()" class="far fa-trash-alt" title="{{ _('Delete user') }}" data-bind="css: { disabled: !$root.access.users.isDeleteUserEnabled($data)}, enabled: $root.access.users.isDeleteUserEnabled($data), click: function() { if ($root.access.users.isDeleteUserEnabled($data)) { $root.access.users.confirmRemoveUser($data); } }"></a>
         </td>
     </tr>
     </tbody>
@@ -138,6 +138,12 @@
     </div>
     <div class="modal-body">
         <form class="form-horizontal" onsubmit="return false;">
+            <div class="control-group" data-bind="visible: $root.access.loginState.username() == $root.access.users.editor.name()">
+                <label class="control-label" for="settings-usersDialogChangePasswordPasswordC">{{ _('Current Password') }}</label>
+                <div class="controls">
+                    <input type="password" class="input-block-level" id="settings-usersDialogChangePasswordPasswordC" data-bind="value: $root.access.users.editor.currentPassword" required>
+                </div>
+            </div>
             <div class="control-group">
                 <label class="control-label" for="settings-usersDialogChangePasswordPassword1">{{ _('New Password') }}</label>
                 <div class="controls">
diff --git a/tests/static/js/test-helpers.js b/tests/static/js/test-helpers.js
index 95d8983f8d..665e69d821 100644
--- a/tests/static/js/test-helpers.js
+++ b/tests/static/js/test-helpers.js
@@ -1090,3 +1090,45 @@ QUnit.cases(
     var result = formatDate(params.unixTimestamp, params.options);
     assert.equal(result, params.expected, "As expected: " + String(params.expected));
 });
+
+QUnit.module("rsplit");
+QUnit.cases(
+    (function () {
+        var cases = [];
+
+        var params = [
+            {
+                title: "Basic",
+                text: "a:b:c",
+                sep: ":",
+                limit: undefined,
+                expected: ["a", "b", "c"]
+            },
+            {
+                title: "With Limit",
+                text: "a:b:c",
+                sep: ":",
+                limit: 1,
+                expected: ["a:b", "c"]
+            },
+            {
+                title: "No Match",
+                text: "a-b-c",
+                sep: ":",
+                limit: undefined,
+                expected: ["a-b-c"]
+            }
+        ];
+
+        var param, i;
+        for (i = 0; i < params.length; i++) {
+            param = params[i];
+            cases.push(param);
+        }
+
+        return cases;
+    })()
+).test("rsplit", function (params, assert) {
+    var result = rsplit(params.text, params.sep, params.limit);
+    assert.deepEqual(result, params.expected, "As expected: " + String(params.expected));
+});
