diff --git a/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnFields.php b/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnFields.php
index 4b1f2365b39..c8003a6aa9a 100644
--- a/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnFields.php
+++ b/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnFields.php
@@ -25,9 +25,9 @@
 interface SearchUserGroupsPermissionOnFields
 {
     /**
-     * @param int[] $user_groups_id
+     * @param list<UserGroupInProject> $user_groups
      * @param int[] $fields_id
      * @return int[]
      */
-    public function searchUserGroupsPermissionOnFields(array $user_groups_id, array $fields_id, string $permission): array;
+    public function searchUserGroupsPermissionOnFields(array $user_groups, array $fields_id, string $permission): array;
 }
diff --git a/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnTrackers.php b/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnTrackers.php
index c025c9a0abe..a782e28c414 100644
--- a/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnTrackers.php
+++ b/plugins/tracker/include/Tracker/Permission/SearchUserGroupsPermissionOnTrackers.php
@@ -25,11 +25,11 @@
 interface SearchUserGroupsPermissionOnTrackers
 {
     /**
-     * @param int[] $user_groups_id
+     * @param list<UserGroupInProject> $user_groups
      * @param int[] $trackers_id
      * @return int[]
      */
-    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups_id, array $trackers_id): array;
+    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups, array $trackers_id): array;
 
     /**
      * @param int[] $user_groups_id
diff --git a/plugins/tracker/include/Tracker/Permission/TrackersPermissionsDao.php b/plugins/tracker/include/Tracker/Permission/TrackersPermissionsDao.php
index 70e7d7b0f00..8cfe5f2d9fb 100644
--- a/plugins/tracker/include/Tracker/Permission/TrackersPermissionsDao.php
+++ b/plugins/tracker/include/Tracker/Permission/TrackersPermissionsDao.php
@@ -29,25 +29,32 @@
 
 final class TrackersPermissionsDao extends DataAccessObject implements SearchUserGroupsPermissionOnFields, SearchUserGroupsPermissionOnTrackers, SearchUserGroupsPermissionOnArtifacts
 {
-    public function searchUserGroupsPermissionOnFields(array $user_groups_id, array $fields_id, string $permission): array
+    public function searchUserGroupsPermissionOnFields(array $user_groups, array $fields_id, string $permission): array
     {
-        $ugroups_statement = EasyStatement::open()->in('permissions.ugroup_id IN (?*)', $user_groups_id);
-        $fields_statement  = EasyStatement::open()->in('permissions.object_id IN (?*)', $fields_id);
+        $fields_statement = EasyStatement::open()->in('field.id IN (?*)', $fields_id);
+        $groups_statement = implode(', ', array_map(static fn(UserGroupInProject $user_group) => '(?, ?)', $user_groups));
+        $groups_values    = [];
+        foreach ($user_groups as $user_group) {
+            $groups_values[] = $user_group->project_id;
+            $groups_values[] = $user_group->user_group_id;
+        }
 
         $sql = <<<SQL
-        SELECT DISTINCT object_id AS field_id
+        SELECT DISTINCT permissions.object_id AS field_id
         FROM permissions
-        WHERE $ugroups_statement AND $fields_statement AND permissions.permission_type = ?
+        INNER JOIN tracker_field AS field ON permissions.object_id = CAST(field.id AS CHAR CHARACTER SET utf8)
+        INNER JOIN tracker ON tracker.id = field.tracker_id
+        INNER JOIN `groups` AS project ON project.group_id = tracker.group_id
+        WHERE permissions.permission_type = ? AND $fields_statement AND (project.group_id, permissions.ugroup_id) IN ($groups_statement)
         SQL;
 
-        $results = $this->getDB()->safeQuery($sql, [...$user_groups_id, ...$this->castIdsToString($fields_id), $permission]);
+        $results = $this->getDB()->safeQuery($sql, [$permission, ...$fields_id, ...$groups_values]);
         assert(is_array($results));
         return array_map(static fn(array $row) => (int) $row['field_id'], $results);
     }
 
-    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups_id, array $trackers_id): array
+    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups, array $trackers_id): array
     {
-        $ugroups_statement   = EasyStatement::open()->in('permissions.ugroup_id IN (?*)', $user_groups_id);
         $trackers_statement  = EasyStatement::open()->in('tracker.id IN (?*)', $trackers_id);
         $perm_type_statement = EasyStatement::open()->in('permissions.permission_type IN (?*)', [
             Tracker::PERMISSION_ADMIN,
@@ -57,21 +64,27 @@ public function searchUserGroupsViewPermissionOnTrackers(array $user_groups_id,
             Tracker::PERMISSION_SUBMITTER_ONLY,
         ]);
 
+        $groups_statement = implode(', ', array_map(static fn(UserGroupInProject $user_group) => '(?, ?)', $user_groups));
+        $groups_values    = [];
+        foreach ($user_groups as $user_group) {
+            $groups_values[] = $user_group->project_id;
+            $groups_values[] = $user_group->user_group_id;
+        }
+
         $sql = <<<SQL
         SELECT DISTINCT tracker.id AS tracker_id
-        FROM tracker
-        INNER JOIN permissions ON (
-            permissions.object_id = CAST(tracker.id AS CHAR CHARACTER SET utf8)
-            AND $ugroups_statement
-            AND $perm_type_statement
-        )
-        WHERE tracker.deletion_date IS NULL AND $trackers_statement
+        FROM permissions
+        INNER JOIN tracker ON permissions.object_id = CAST(tracker.id AS CHAR CHARACTER SET utf8)
+        INNER JOIN `groups` AS project ON project.group_id = tracker.group_id
+        WHERE tracker.deletion_date IS NULL
+            AND $trackers_statement AND $perm_type_statement
+            AND (project.group_id, permissions.ugroup_id) IN ($groups_statement)
         SQL;
 
         $results = $this->getDB()->safeQuery($sql, [
-            ...$user_groups_id,
-            ...array_values($perm_type_statement->values()),
             ...$trackers_id,
+            ...array_values($perm_type_statement->values()),
+            ...$groups_values,
         ]);
         assert(is_array($results));
         return array_map(static fn(array $row) => (int) $row['tracker_id'], $results);
@@ -135,13 +148,4 @@ public function searchUserGroupsViewPermissionOnArtifacts(array $user_groups_id,
         );
         return array_map(static fn(array $row) => (int) $row['artifact_id'], $results);
     }
-
-    /**
-     * @param int[] $ids
-     * @return string[]
-     */
-    private function castIdsToString(array $ids): array
-    {
-        return array_map(static fn(int $id) => (string) $id, $ids);
-    }
 }
diff --git a/plugins/tracker/include/Tracker/Permission/TrackersPermissionsRetriever.php b/plugins/tracker/include/Tracker/Permission/TrackersPermissionsRetriever.php
index 094cb5012b3..7127a39e36f 100644
--- a/plugins/tracker/include/Tracker/Permission/TrackersPermissionsRetriever.php
+++ b/plugins/tracker/include/Tracker/Permission/TrackersPermissionsRetriever.php
@@ -137,7 +137,7 @@ public function retrieveUserPermissionOnTrackers(PFUser $user, array $trackers,
     private function buildTrackerViewPermissions(PFUser $user, array $trackers): UserPermissionsOnItems
     {
         $results = $this->trackers_dao->searchUserGroupsViewPermissionOnTrackers(
-            $this->getUserUGroupsFromTrackers($user, $trackers),
+            $this->getUserUGroupsWithProjectFromTrackers($user, $trackers),
             array_map(static fn(Tracker $tracker) => $tracker->getId(), $trackers)
         );
 
@@ -239,17 +239,38 @@ public function retrieveUserPermissionOnArtifacts(PFUser $user, array $artifacts
 
     /**
      * @param Tracker_FormElement[] $fields
-     * @return int[]
+     * @return list<UserGroupInProject>
      */
     private function getUserUGroupsFromFields(PFUser $user, array $fields): array
     {
-        $ugroups_id = [];
+        $result = [];
         foreach ($fields as $field) {
             $project_id = (int) $field->getTracker()->getProject()->getID();
-            $ugroups_id = array_merge($ugroups_id, $user->getUgroups($project_id, ['project_id' => $project_id]));
+            $ugroups    = $user->getUgroups($project_id, ['project_id' => $project_id]);
+            foreach ($ugroups as $ugroup) {
+                $result[] = new UserGroupInProject($project_id, (int) $ugroup);
+            }
         }
 
-        return array_map(static fn(int|string $id) => (int) $id, $ugroups_id);
+        return array_values(array_unique($result, SORT_REGULAR));
+    }
+
+    /**
+     * @param Tracker[] $trackers
+     * @return list<UserGroupInProject>
+     */
+    private function getUserUGroupsWithProjectFromTrackers(PFUser $user, array $trackers): array
+    {
+        $result = [];
+        foreach ($trackers as $tracker) {
+            $project_id = (int) $tracker->getProject()->getID();
+            $ugroups    = $user->getUgroups($project_id, ['project_id' => $project_id]);
+            foreach ($ugroups as $ugroup) {
+                $result[] = new UserGroupInProject($project_id, (int) $ugroup);
+            }
+        }
+
+        return array_values(array_unique($result, SORT_REGULAR));
     }
 
     /**
diff --git a/plugins/tracker/include/Tracker/Permission/UserGroupInProject.php b/plugins/tracker/include/Tracker/Permission/UserGroupInProject.php
new file mode 100644
index 00000000000..c77c7d05f71
--- /dev/null
+++ b/plugins/tracker/include/Tracker/Permission/UserGroupInProject.php
@@ -0,0 +1,35 @@
+<?php
+/**
+ * Copyright (c) Enalean, 2024-Present. All Rights Reserved.
+ *
+ * This file is a part of Tuleap.
+ *
+ * Tuleap is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Tuleap is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+declare(strict_types=1);
+
+namespace Tuleap\Tracker\Permission;
+
+/**
+ * @psalm-immutable
+ */
+final readonly class UserGroupInProject
+{
+    public function __construct(
+        public int $project_id,
+        public int $user_group_id,
+    ) {
+    }
+}
diff --git a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnArtifactsTest.php b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnArtifactsTest.php
index d6e2cc9d387..ceb2f88fdb2 100644
--- a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnArtifactsTest.php
+++ b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnArtifactsTest.php
@@ -24,6 +24,7 @@
 
 use ProjectUGroup;
 use Tracker;
+use Tracker_ArtifactFactory;
 use Tuleap\DB\DBFactory;
 use Tuleap\Test\Builders\CoreDatabaseBuilder;
 use Tuleap\Test\PHPUnit\TestIntegrationTestCase;
@@ -109,4 +110,37 @@ public function testProjectAdminPermission(): void
             $this->artifact_closed_2,
         ], $result);
     }
+
+    public function testItDoesNotRetrieveArtifactFromProjectWhenAdminOfAnotherProject(): void
+    {
+        $db              = DBFactory::getMainTuleapDBConnection()->getDB();
+        $core_builder    = new CoreDatabaseBuilder($db);
+        $tracker_builder = new TrackerDatabaseBuilder($db);
+        $retriever       = TrackersPermissionsRetriever::build();
+
+        $project       = $core_builder->buildProject('project');
+        $project_admin = $core_builder->buildProject('project_admin');
+        $user          = $core_builder->buildUser('admin', 'Admin', 'admin@example.com');
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project->getID());
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project_admin->getID());
+        $core_builder->addUserToProjectAdmins((int) $user->getId(), (int) $project_admin->getID());
+
+        $tracker_1     = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 1');
+        $artifact_1_id = $tracker_builder->buildArtifact($tracker_1->getId());
+        $tracker_2     = $tracker_builder->buildTracker((int) $project_admin->getID(), 'Tracker 2');
+        $artifact_2_id = $tracker_builder->buildArtifact($tracker_2->getId());
+        $tracker_builder->setViewPermissionOnArtifact($artifact_1_id, ProjectUGroup::PROJECT_ADMIN);
+        $tracker_builder->setViewPermissionOnArtifact($artifact_2_id, ProjectUGroup::PROJECT_MEMBERS);
+        $factory    = Tracker_ArtifactFactory::instance();
+        $artifact_1 = $factory->getArtifactById($artifact_1_id);
+        $artifact_2 = $factory->getArtifactById($artifact_2_id);
+        self::assertNotNull($artifact_1);
+        self::assertNotNull($artifact_2);
+
+        $result = $retriever->retrieveUserPermissionOnArtifacts($user, [$artifact_1, $artifact_2], ArtifactPermissionType::PERMISSION_VIEW);
+        self::assertCount(1, $result->allowed);
+        self::assertSame($artifact_2_id, $result->allowed[0]->getId());
+        self::assertCount(1, $result->not_allowed);
+        self::assertSame($artifact_1_id, $result->not_allowed[0]->getId());
+    }
 }
diff --git a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnFieldsTest.php b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnFieldsTest.php
index c7dcade16b0..82aaa818861 100644
--- a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnFieldsTest.php
+++ b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnFieldsTest.php
@@ -23,6 +23,7 @@
 namespace Tuleap\Tracker\Permission;
 
 use ProjectUGroup;
+use Tracker_FormElementFactory;
 use Tuleap\DB\DBFactory;
 use Tuleap\Test\Builders\CoreDatabaseBuilder;
 use Tuleap\Test\PHPUnit\TestIntegrationTestCase;
@@ -30,6 +31,7 @@
 
 final class TrackersPermissionsDaoOnFieldsTest extends TestIntegrationTestCase
 {
+    private int $project_id;
     /**
      * @var non-empty-list<int>
      */
@@ -43,9 +45,10 @@ protected function setUp(): void
         $core_builder    = new CoreDatabaseBuilder($db);
         $tracker_builder = new TrackerDatabaseBuilder($db);
 
-        $project = $core_builder->buildProject('project_name');
+        $project          = $core_builder->buildProject('project_name');
+        $this->project_id = (int) $project->getID();
 
-        $tracker         = $tracker_builder->buildTracker((int) $project->getID(), 'Release');
+        $tracker         = $tracker_builder->buildTracker($this->project_id, 'Release');
         $this->field1_id = $tracker_builder->buildIntField($tracker->getId(), 'field1');
         $field2_id       = $tracker_builder->buildStaticListField($tracker->getId(), 'field2', 'sb');
         $this->field3_id = $tracker_builder->buildDateField($tracker->getId(), 'field3', false);
@@ -59,7 +62,7 @@ protected function setUp(): void
     public function testItRetrieveFieldsReadPermissions(): void
     {
         $dao     = new TrackersPermissionsDao();
-        $results = $dao->searchUserGroupsPermissionOnFields([ProjectUGroup::PROJECT_MEMBERS], $this->fields_id, FieldPermissionType::PERMISSION_READ->value);
+        $results = $dao->searchUserGroupsPermissionOnFields([new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_MEMBERS)], $this->fields_id, FieldPermissionType::PERMISSION_READ->value);
 
         self::assertCount(2, $results);
         self::assertEqualsCanonicalizing([$this->field1_id, $this->field3_id], $results);
@@ -68,9 +71,45 @@ public function testItRetrieveFieldsReadPermissions(): void
     public function testItRetrieveFieldsReadPermissionsWithAdmin(): void
     {
         $dao     = new TrackersPermissionsDao();
-        $results = $dao->searchUserGroupsPermissionOnFields([ProjectUGroup::PROJECT_MEMBERS, ProjectUGroup::PROJECT_ADMIN], $this->fields_id, FieldPermissionType::PERMISSION_READ->value);
+        $results = $dao->searchUserGroupsPermissionOnFields([
+            new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_MEMBERS),
+            new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_ADMIN),
+        ], $this->fields_id, FieldPermissionType::PERMISSION_READ->value);
 
         self::assertCount(3, $results);
         self::assertEqualsCanonicalizing($this->fields_id, $results);
     }
+
+    public function testItDoesNotRetrieveFieldFromProjectWhenAdminOfAnotherProject(): void
+    {
+        $db              = DBFactory::getMainTuleapDBConnection()->getDB();
+        $core_builder    = new CoreDatabaseBuilder($db);
+        $tracker_builder = new TrackerDatabaseBuilder($db);
+        $retriever       = TrackersPermissionsRetriever::build();
+
+        $project       = $core_builder->buildProject('project');
+        $project_admin = $core_builder->buildProject('project_admin');
+        $user          = $core_builder->buildUser('admin', 'Admin', 'admin@example.com');
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project->getID());
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project_admin->getID());
+        $core_builder->addUserToProjectAdmins((int) $user->getId(), (int) $project_admin->getID());
+
+        $tracker_1  = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 1');
+        $field_1_id = $tracker_builder->buildIntField($tracker_1->getId(), 'int_field');
+        $tracker_2  = $tracker_builder->buildTracker((int) $project_admin->getID(), 'Tracker 2');
+        $field_2_id = $tracker_builder->buildIntField($tracker_2->getId(), 'int_field');
+        $tracker_builder->setReadPermission($field_1_id, ProjectUGroup::PROJECT_ADMIN);
+        $tracker_builder->setReadPermission($field_2_id, ProjectUGroup::PROJECT_MEMBERS);
+        $factory = Tracker_FormElementFactory::instance();
+        $field_1 = $factory->getFieldById($field_1_id);
+        $field_2 = $factory->getFieldById($field_2_id);
+        self::assertNotNull($field_1);
+        self::assertNotNull($field_2);
+
+        $result = $retriever->retrieveUserPermissionOnFields($user, [$field_1, $field_2], FieldPermissionType::PERMISSION_READ);
+        self::assertCount(1, $result->allowed);
+        self::assertSame($field_2_id, $result->allowed[0]->getId());
+        self::assertCount(1, $result->not_allowed);
+        self::assertSame($field_1_id, $result->not_allowed[0]->getId());
+    }
 }
diff --git a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnTrackersTest.php b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnTrackersTest.php
index 3dd264bfa48..125a71a9bb0 100644
--- a/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnTrackersTest.php
+++ b/plugins/tracker/tests/integration/Permission/TrackersPermissionsDaoOnTrackersTest.php
@@ -31,6 +31,7 @@
 
 final class TrackersPermissionsDaoOnTrackersTest extends TestIntegrationTestCase
 {
+    private int $project_id;
     /**
      * @var list<int>
      */
@@ -45,11 +46,12 @@ protected function setUp(): void
         $core_builder    = new CoreDatabaseBuilder($db);
         $tracker_builder = new TrackerDatabaseBuilder($db);
 
-        $project = $core_builder->buildProject('project_name');
+        $project          = $core_builder->buildProject('project_name');
+        $this->project_id = (int) $project->getID();
 
-        $this->tracker1_id = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 1')->getId();
-        $this->tracker2_id = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 2')->getId();
-        $this->tracker3_id = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 3')->getId();
+        $this->tracker1_id = $tracker_builder->buildTracker($this->project_id, 'Tracker 1')->getId();
+        $this->tracker2_id = $tracker_builder->buildTracker($this->project_id, 'Tracker 2')->getId();
+        $this->tracker3_id = $tracker_builder->buildTracker($this->project_id, 'Tracker 3')->getId();
         $this->trackers    = [$this->tracker1_id, $this->tracker2_id, $this->tracker3_id];
         $tracker_builder->setViewPermissionOnTracker(
             $this->tracker1_id,
@@ -71,12 +73,19 @@ protected function setUp(): void
         $field3_id = $tracker_builder->buildIntField($this->tracker3_id, 'int_field3');
         $tracker_builder->setSubmitPermission($field1_id, ProjectUGroup::PROJECT_ADMIN);
         $tracker_builder->setSubmitPermission($field3_id, ProjectUGroup::PROJECT_MEMBERS);
+
+        $_SERVER['REQUEST_URI'] = '';
+    }
+
+    protected function tearDown(): void
+    {
+        unset($_SERVER['REQUEST_URI']);
     }
 
     public function testItRetrieveTrackersViewPermissions(): void
     {
         $dao     = new TrackersPermissionsDao();
-        $results = $dao->searchUserGroupsViewPermissionOnTrackers([ProjectUGroup::PROJECT_MEMBERS], $this->trackers);
+        $results = $dao->searchUserGroupsViewPermissionOnTrackers([new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_MEMBERS)], $this->trackers);
 
         self::assertCount(2, $results);
         self::assertEqualsCanonicalizing([$this->tracker1_id, $this->tracker3_id], $results);
@@ -85,7 +94,10 @@ public function testItRetrieveTrackersViewPermissions(): void
     public function testItRetrieveTrackersViewPermissionsWithAdmin(): void
     {
         $dao     = new TrackersPermissionsDao();
-        $results = $dao->searchUserGroupsViewPermissionOnTrackers([ProjectUGroup::PROJECT_MEMBERS, ProjectUGroup::PROJECT_ADMIN], $this->trackers);
+        $results = $dao->searchUserGroupsViewPermissionOnTrackers([
+            new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_MEMBERS),
+            new UserGroupInProject($this->project_id, ProjectUGroup::PROJECT_ADMIN),
+        ], $this->trackers);
 
         self::assertCount(3, $results);
         self::assertEqualsCanonicalizing([$this->tracker1_id, $this->tracker2_id, $this->tracker3_id], $results);
@@ -108,4 +120,56 @@ public function testItRetrieveTrackersSubmitPermissionsWithAdmin(): void
         self::assertCount(2, $results);
         self::assertEqualsCanonicalizing([$this->tracker1_id, $this->tracker3_id], $results);
     }
+
+    public function testItDoesNotRetrieveTrackerViewFromProjectWhenAdminOfAnotherProject(): void
+    {
+        $db              = DBFactory::getMainTuleapDBConnection()->getDB();
+        $core_builder    = new CoreDatabaseBuilder($db);
+        $tracker_builder = new TrackerDatabaseBuilder($db);
+        $retriever       = TrackersPermissionsRetriever::build();
+
+        $project       = $core_builder->buildProject('project');
+        $project_admin = $core_builder->buildProject('project_admin');
+        $user          = $core_builder->buildUser('admin', 'Admin', 'admin@example.com');
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project->getID());
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project_admin->getID());
+        $core_builder->addUserToProjectAdmins((int) $user->getId(), (int) $project_admin->getID());
+
+        $tracker_1 = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 1');
+        $tracker_2 = $tracker_builder->buildTracker((int) $project_admin->getID(), 'Tracker 2');
+        $tracker_builder->setViewPermissionOnTracker($tracker_1->getId(), Tracker::PERMISSION_FULL, ProjectUGroup::PROJECT_ADMIN);
+        $tracker_builder->setViewPermissionOnTracker($tracker_2->getId(), Tracker::PERMISSION_FULL, ProjectUGroup::PROJECT_MEMBERS);
+
+        $result = $retriever->retrieveUserPermissionOnTrackers($user, [$tracker_1, $tracker_2], TrackerPermissionType::PERMISSION_VIEW);
+        self::assertCount(1, $result->allowed);
+        self::assertSame($tracker_2->getId(), $result->allowed[0]->getId());
+        self::assertCount(1, $result->not_allowed);
+        self::assertSame($tracker_1->getId(), $result->not_allowed[0]->getId());
+    }
+
+    public function testItDoesNotRetrieveTrackerSubmitFromProjectWhenAdminOfAnotherProject(): void
+    {
+        $db              = DBFactory::getMainTuleapDBConnection()->getDB();
+        $core_builder    = new CoreDatabaseBuilder($db);
+        $tracker_builder = new TrackerDatabaseBuilder($db);
+        $retriever       = TrackersPermissionsRetriever::build();
+
+        $project       = $core_builder->buildProject('project');
+        $project_admin = $core_builder->buildProject('project_admin');
+        $user          = $core_builder->buildUser('admin', 'Admin', 'admin@example.com');
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project->getID());
+        $core_builder->addUserToProjectMembers((int) $user->getId(), (int) $project_admin->getID());
+        $core_builder->addUserToProjectAdmins((int) $user->getId(), (int) $project_admin->getID());
+
+        $tracker_1 = $tracker_builder->buildTracker((int) $project->getID(), 'Tracker 1');
+        $tracker_2 = $tracker_builder->buildTracker((int) $project_admin->getID(), 'Tracker 2');
+        $tracker_builder->setViewPermissionOnTracker($tracker_1->getId(), Tracker::PERMISSION_FULL, ProjectUGroup::PROJECT_ADMIN);
+        $tracker_builder->setViewPermissionOnTracker($tracker_2->getId(), Tracker::PERMISSION_FULL, ProjectUGroup::PROJECT_MEMBERS);
+
+        $result = $retriever->retrieveUserPermissionOnTrackers($user, [$tracker_1, $tracker_2], TrackerPermissionType::PERMISSION_SUBMIT);
+        self::assertCount(1, $result->allowed);
+        self::assertSame($tracker_2->getId(), $result->allowed[0]->getId());
+        self::assertCount(1, $result->not_allowed);
+        self::assertSame($tracker_1->getId(), $result->not_allowed[0]->getId());
+    }
 }
diff --git a/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnFieldsStub.php b/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnFieldsStub.php
index a857cf219f1..0c0d58529e3 100644
--- a/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnFieldsStub.php
+++ b/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnFieldsStub.php
@@ -46,7 +46,7 @@ public static function buildWithResults(array $results): self
         return new self($results);
     }
 
-    public function searchUserGroupsPermissionOnFields(array $user_groups_id, array $fields_id, string $permission): array
+    public function searchUserGroupsPermissionOnFields(array $user_groups, array $fields_id, string $permission): array
     {
         return $this->result;
     }
diff --git a/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnTrackersStub.php b/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnTrackersStub.php
index ff4de423444..bc60ea6aef6 100644
--- a/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnTrackersStub.php
+++ b/plugins/tracker/tests/unit/Stub/Tracker/Permission/SearchUserGroupsPermissionOnTrackersStub.php
@@ -64,7 +64,7 @@ public function withSubmitResults(array $results): self
         return $this;
     }
 
-    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups_id, array $trackers_id): array
+    public function searchUserGroupsViewPermissionOnTrackers(array $user_groups, array $trackers_id): array
     {
         return $this->view_results;
     }
