diff --git a/packages/backend/src/api/v1/auth/index.ts b/packages/backend/src/api/v1/auth/index.ts
index 6739d59f..e5f29387 100644
--- a/packages/backend/src/api/v1/auth/index.ts
+++ b/packages/backend/src/api/v1/auth/index.ts
@@ -293,27 +293,18 @@ auth.post("/request-password-reset", async (ctx: Context) => {
       Db.Account[]
     >`select * from account where email = ${email}`
 
-    if (recoveryToken) {
-      if (await isJWTExpired(recoveryToken)) {
-        // Edge case 1: User has made a password reset request more than one hour ago, but has not completed the flow
-        await requestPasswordReset(email)
-        ctx.body = { ok: true }
-        return
-      } else {
-        // Edge case 2: User has already made a password request less than one hour ago
-        throw new Error(
-          "Password reset request already initiated less than one hour ago",
-        )
-      }
+    if (recoveryToken && !(await isJWTExpired(recoveryToken))) {
+      await requestPasswordReset(email)
+      ctx.body = { ok: true }
+      return
     }
 
-    // Base case: User is making his first password reset request since the last one has been successfully reset
     await requestPasswordReset(email)
     ctx.body = { ok: true }
   } catch (error) {
     console.error(error)
     // Do not send error message to client if email is not found
-    ctx.body = {}
+    ctx.body = { ok: true }
   }
 })
 
@@ -325,8 +316,11 @@ auth.post("/reset-password", async (ctx: Context) => {
   const { token, password } = bodySchema.parse(ctx.request.body)
 
   const {
-    payload: { email },
+    payload: { email, type },
   } = await verifyJWT<{ email: string }>(token)
+  if (type !== "reset_token") {
+    ctx.throw(403, "Unauthorized")
+  }
 
   const passwordHash = await hashPassword(password)
 
diff --git a/packages/backend/src/api/v1/auth/utils.ts b/packages/backend/src/api/v1/auth/utils.ts
index 2a278255..3732e93a 100644
--- a/packages/backend/src/api/v1/auth/utils.ts
+++ b/packages/backend/src/api/v1/auth/utils.ts
@@ -187,8 +187,11 @@ export async function authMiddleware(ctx: Context, next: Next) {
 export async function requestPasswordReset(email: string) {
   const [user] = await sql`select id from account where email = ${email}`
 
-  const ONE_HOUR = 60 * 60
-  const token = await signJWT({ email }, ONE_HOUR)
+  const FIFTEEN_MINUTES = 15 * 60
+  const token = await signJWT(
+    { email, type: "password_reset" },
+    FIFTEEN_MINUTES,
+  )
 
   await sql`update account set recovery_token = ${token} where id = ${user.id}`
 
