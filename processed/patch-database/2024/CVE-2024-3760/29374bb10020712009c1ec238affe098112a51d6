diff --git a/packages/backend/src/api/v1/auth/index.ts b/packages/backend/src/api/v1/auth/index.ts
index 6f87baa2..4491d2a0 100644
--- a/packages/backend/src/api/v1/auth/index.ts
+++ b/packages/backend/src/api/v1/auth/index.ts
@@ -1,18 +1,20 @@
+import { Db } from "@/src/types"
 import sql from "@/src/utils/db"
 import { sendVerifyEmail } from "@/src/utils/emails"
 import Context from "@/src/utils/koa"
 import { sendTelegramMessage } from "@/src/utils/notifications"
 import Router from "koa-router"
 import { z } from "zod"
+import saml, { getLoginUrl } from "./saml"
 import {
   hashPassword,
+  isJWTExpired,
   requestPasswordReset,
   sanitizeEmail,
-  signJwt,
-  verifyJwt,
+  signJWT,
+  verifyJWT,
   verifyPassword,
 } from "./utils"
-import saml, { getLoginUrl } from "./saml"
 
 const auth = new Router({
   prefix: "/auth",
@@ -42,6 +44,7 @@ auth.post("/method", async (ctx: Context) => {
   }
 })
 
+// TODO: split signup and join
 auth.post("/signup", async (ctx: Context) => {
   const bodySchema = z.object({
     email: z.string().email().transform(sanitizeEmail),
@@ -141,7 +144,7 @@ auth.post("/signup", async (ctx: Context) => {
       return { user, org }
     })
 
-    const token = await signJwt({
+    const token = await signJWT({
       userId: user.id,
       email: user.email,
       orgId: org.id,
@@ -161,7 +164,7 @@ auth.post("/signup", async (ctx: Context) => {
     ctx.body = { token }
     return
   } else if (signupMethod === "join") {
-    const { payload } = await verifyJwt(token!)
+    const { payload } = await verifyJWT(token!)
 
     if (payload.email !== email) {
       ctx.throw(403, "Invalid token")
@@ -193,7 +196,7 @@ auth.get("/join-data", async (ctx: Context) => {
 
   const {
     payload: { orgId },
-  } = await verifyJwt(token)
+  } = await verifyJWT(token)
 
   const [org] = await sql`
     select name, plan from org where id = ${orgId}
@@ -238,6 +241,8 @@ auth.post("/login", async (ctx: Context) => {
   }
 
   if (!user.passwordHash) {
+    // If SAML was the only auth method allowed since the account creation,
+    // and that SAML is disabled by admin, accounts don't have a password yet
     await requestPasswordReset(email)
 
     ctx.body = { message: "We sent you an email to reset your password" }
@@ -255,7 +260,7 @@ auth.post("/login", async (ctx: Context) => {
   // update last login
   await sql`update account set last_login_at = now() where id = ${user.id}`
 
-  const token = await signJwt({
+  const token = await signJWT({
     userId: user.id,
     email: user.email,
     orgId: user.orgId,
@@ -276,11 +281,28 @@ auth.post("/request-password-reset", async (ctx: Context) => {
       ctx.body = { error: "Invalid email format" }
       return
     }
-
     const { email } = body.data
 
-    await requestPasswordReset(email)
+    const [{ recoveryToken }] = await sql<
+      Db.Account[]
+    >`select * from account where email = ${email}`
+
+    if (recoveryToken) {
+      if (await isJWTExpired(recoveryToken)) {
+        // Edge case 1: User has made a password reset request more than one hour ago, but has not completed the flow
+        await requestPasswordReset(email)
+        ctx.body = { ok: true }
+        return
+      } else {
+        // Edge case 2: User has already made a password request less than one hour ago
+        throw new Error(
+          "Password reset request already initiated less than one hour ago",
+        )
+      }
+    }
 
+    // Base case: User is making his first password reset request since the last one has been successfully reset
+    await requestPasswordReset(email)
     ctx.body = { ok: true }
   } catch (error) {
     console.error(error)
@@ -298,7 +320,7 @@ auth.post("/reset-password", async (ctx: Context) => {
 
   const {
     payload: { email },
-  } = await verifyJwt<{ email: string }>(token)
+  } = await verifyJWT<{ email: string }>(token)
 
   const passwordHash = await hashPassword(password)
 
@@ -306,7 +328,7 @@ auth.post("/reset-password", async (ctx: Context) => {
     update account set password_hash = ${passwordHash}, last_login_at = NOW() where email = ${email} returning *
   `
 
-  const authToken = await signJwt({
+  const authToken = await signJWT({
     userId: user.id,
     email: user.email,
     orgId: user.orgId,
@@ -319,7 +341,7 @@ auth.post("/reset-password", async (ctx: Context) => {
 auth.post("/exchange-token", async (ctx: Context) => {
   const { onetimeToken } = ctx.request.body as { onetimeToken: string }
 
-  await verifyJwt(onetimeToken)
+  await verifyJWT(onetimeToken)
 
   // get account with onetime_token = token
   const [account] = await sql`
@@ -332,7 +354,7 @@ auth.post("/exchange-token", async (ctx: Context) => {
 
   const oneDay = 60 * 60 * 24
 
-  const authToken = await signJwt(
+  const authToken = await signJWT(
     {
       userId: account.id,
       email: account.email,
diff --git a/packages/backend/src/api/v1/auth/utils.ts b/packages/backend/src/api/v1/auth/utils.ts
index a78ed891..2a278255 100644
--- a/packages/backend/src/api/v1/auth/utils.ts
+++ b/packages/backend/src/api/v1/auth/utils.ts
@@ -37,7 +37,7 @@ export async function hashPassword(password: string): Promise<string> {
 
 const ONE_MONTH = 60 * 60 * 24 * 30
 
-export function signJwt(
+export function signJWT(
   payload: any,
   expiresIn: number = ONE_MONTH,
 ): Promise<string> {
@@ -52,13 +52,22 @@ export function signJwt(
     .sign(new TextEncoder().encode(process.env.JWT_SECRET))
 }
 
-export function verifyJwt<Payload>(token: string) {
-  return jose.jwtVerify<Payload>(
+export function verifyJWT<Payload>(token: string) {
+  return jose.jwtVerify<Payload & { iat: number; exp: number; nbf: number }>(
     token,
     new TextEncoder().encode(process.env.JWT_SECRET),
   )
 }
 
+export async function isJWTExpired(token: string) {
+  try {
+    await verifyJWT(token)
+    return false
+  } catch (error) {
+    return true
+  }
+}
+
 // TODO: shared
 interface SessionData {
   userId: string
@@ -144,7 +153,7 @@ export async function authMiddleware(ctx: Context, next: Next) {
       if (!bearer) {
         throw new Error("No bearer token provided.")
       }
-      const { payload } = await verifyJwt<SessionData>(key)
+      const { payload } = await verifyJWT<SessionData>(key)
 
       ctx.state.userId = payload.userId
       ctx.state.orgId = payload.orgId
@@ -179,7 +188,7 @@ export async function requestPasswordReset(email: string) {
   const [user] = await sql`select id from account where email = ${email}`
 
   const ONE_HOUR = 60 * 60
-  const token = await signJwt({ email }, ONE_HOUR)
+  const token = await signJWT({ email }, ONE_HOUR)
 
   await sql`update account set recovery_token = ${token} where id = ${user.id}`
 
diff --git a/packages/backend/src/api/v1/users.ts b/packages/backend/src/api/v1/users.ts
index 97a2cbca..26451396 100644
--- a/packages/backend/src/api/v1/users.ts
+++ b/packages/backend/src/api/v1/users.ts
@@ -9,7 +9,7 @@ import {
 import { jwtVerify } from "jose"
 import { z } from "zod"
 import { sendEmail } from "@/src/utils/sendEmail"
-import { signJwt } from "./auth/utils"
+import { signJWT } from "./auth/utils"
 import { roles } from "shared"
 import { checkAccess } from "@/src/utils/authorization"
 
@@ -182,7 +182,7 @@ users.post("/", checkAccess("teamMembers", "create"), async (ctx: Context) => {
   `
   const orgUserCount = orgUserCountResult.count
 
-  const token = await signJwt({ email, orgId }, FIFTEEN_DAYS)
+  const token = await signJWT({ email, orgId }, FIFTEEN_DAYS)
   const userToInsert = {
     email,
     orgId,
diff --git a/packages/backend/src/types/database.ts b/packages/backend/src/types/database.ts
new file mode 100644
index 00000000..40cefe38
--- /dev/null
+++ b/packages/backend/src/types/database.ts
@@ -0,0 +1,14 @@
+export interface Account {
+  id: string
+  createdAt: Date
+  email: string | null
+  passwordHash: string | null
+  recoveryToken: string | null
+  name: string | null
+  orgId: string | null
+  role: "owner" | "admin" | "member" | "viewer" | "prompt_editor" | "billing"
+  verified: boolean
+  avatarUrl: string | null
+  lastLoginAt: Date | null
+  singleUseToken: string | null
+}
diff --git a/packages/backend/src/types/index.ts b/packages/backend/src/types/index.ts
new file mode 100644
index 00000000..a5cab679
--- /dev/null
+++ b/packages/backend/src/types/index.ts
@@ -0,0 +1 @@
+export * as Db from "./database"
diff --git a/packages/backend/src/utils/emails.ts b/packages/backend/src/utils/emails.ts
index f153de68..6dd141ea 100644
--- a/packages/backend/src/utils/emails.ts
+++ b/packages/backend/src/utils/emails.ts
@@ -1,4 +1,4 @@
-import { signJwt } from "@/src/api/v1/auth/utils"
+import { signJWT } from "@/src/api/v1/auth/utils"
 import { sendEmail } from "./sendEmail"
 
 function extractFirstName(name: string) {
@@ -7,7 +7,7 @@ function extractFirstName(name: string) {
 }
 
 export async function sendVerifyEmail(email: string, name: string) {
-  const token = await signJwt({ email })
+  const token = await signJWT({ email })
 
   const confirmLink = `${process.env.API_URL}/v1/users/verify-email?token=${token}`
 
diff --git a/packages/db/0010.sql b/packages/db/0010.sql
new file mode 100644
index 00000000..4074e4f6
--- /dev/null
+++ b/packages/db/0010.sql
@@ -0,0 +1 @@
+alter table account alter column role set not null;
\ No newline at end of file
