diff --git a/.eslintrc.js b/.eslintrc.js
index 99c5559ed..5eac001d8 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -1,23 +1,21 @@
 module.exports = {
   root: true,
-  parser: '@typescript-eslint/parser',
+  parser: "@typescript-eslint/parser",
   parserOptions: {
-    "ecmaVersion": 6
+    ecmaVersion: 6,
   },
-  plugins: [
-    '@typescript-eslint',
-  ],
+  plugins: ["@typescript-eslint"],
   extends: [
-    'eslint:recommended',
-    'plugin:@typescript-eslint/eslint-recommended',
-    'plugin:@typescript-eslint/recommended',
+    "eslint:recommended",
+    "plugin:@typescript-eslint/eslint-recommended",
+    "plugin:@typescript-eslint/recommended",
   ],
   env: {
-    "amd": true,
-    "node": true,
+    amd: true,
+    node: true,
   },
   rules: {
     "@typescript-eslint/no-use-before-define": "off",
     "@typescript-eslint/explicit-function-return-type": "off",
-  }
+  },
 };
diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
index e9e90435a..c4e2793f3 100644
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -42,7 +42,7 @@ jobs:
   run-tests:
     runs-on: ubuntu-latest
     name: Run tests
-    needs: [ build ]
+    needs: [build]
 
     steps:
       - uses: actions/checkout@v2
@@ -53,9 +53,9 @@ jobs:
       - name: Install dependencies
         run: npm ci
         env:
-          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
+          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
 
       - name: Test code
-        uses: mujo-code/puppeteer-headful@master
+        uses: mymindstorm/puppeteer-headful@8f745c770f7f4c0f9f332d7c43a775f90e53779a
         with:
           args: npm test
diff --git a/package-lock.json b/package-lock.json
index e36934afd..51cd480ee 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,8 +15,7 @@
         "node-gost-crypto": "^1.0.2",
         "qrcode-generator": "^1.4.4",
         "qrcode-reader": "^1.0.4",
-        "uuid": "^3.4.0",
-        "vue": "^2.6.12",
+        "vue": "^2.7.16",
         "vue2-dragula": "^2.5.4",
         "vuex": "^3.4.0"
       },
@@ -29,16 +28,14 @@
         "@types/sinon": "^17.0.2",
         "@types/sinon-chai": "^3.2.12",
         "@types/sinon-chrome": "^2.2.10",
-        "@types/uuid": "^3.4.9",
-        "@typescript-eslint/eslint-plugin": "^2.34.0",
-        "@typescript-eslint/parser": "^2.34.0",
-        "@vue/runtime-dom": "^3.2.47",
+        "@typescript-eslint/eslint-plugin": "^7.15.0",
+        "@typescript-eslint/parser": "^7.15.0",
         "@vue/test-utils": "^1.1.1",
         "base64-loader": "^1.0.0",
         "buffer": "^6.0.3",
         "chai": "^4.2.0",
         "crypto-js": "^4.1.1",
-        "eslint": "^6.8.0",
+        "eslint": "^8.56.0",
         "fork-ts-checker-webpack-plugin": "^6.5.3",
         "lodash": "^4.17.21",
         "mocha": "^10.2.0",
@@ -58,7 +55,7 @@
         "util": "^0.12.5",
         "vue-loader": "^15.10.1",
         "vue-svg-loader": "^0.16.0",
-        "vue-template-compiler": "^2.7.0",
+        "vue-template-compiler": "^2.7.16",
         "webpack": "^5.11.0",
         "webpack-cli": "^5.0.0",
         "webpack-merge": "^5.0.0"
@@ -417,6 +414,115 @@
         "node": ">=10.0.0"
       }
     },
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
+      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
+      "dev": true,
+      "dependencies": {
+        "eslint-visitor-keys": "^3.3.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.11.0",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.0.tgz",
+      "integrity": "sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==",
+      "dev": true,
+      "engines": {
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@eslint/eslintrc": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
+      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
+      "dev": true,
+      "dependencies": {
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^9.6.0",
+        "globals": "^13.19.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint/eslintrc/node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true
+    },
+    "node_modules/@eslint/eslintrc/node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "8.57.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
+      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
+      "dev": true,
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@humanwhocodes/config-array": {
+      "version": "0.11.14",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
+      "integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
+      "deprecated": "Use @eslint/config-array instead",
+      "dev": true,
+      "dependencies": {
+        "@humanwhocodes/object-schema": "^2.0.2",
+        "debug": "^4.3.1",
+        "minimatch": "^3.0.5"
+      },
+      "engines": {
+        "node": ">=10.10.0"
+      }
+    },
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+      "dev": true,
+      "engines": {
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/object-schema": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
+      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
+      "deprecated": "Use @eslint/object-schema instead",
+      "dev": true
+    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -574,6 +680,41 @@
         "@jridgewell/sourcemap-codec": "1.4.14"
       }
     },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "dev": true,
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "dev": true,
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "dev": true,
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
     "node_modules/@puppeteer/browsers": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.2.3.tgz",
@@ -596,15 +737,6 @@
         "node": ">=18"
       }
     },
-    "node_modules/@puppeteer/browsers/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/@puppeteer/browsers/node_modules/cliui": {
       "version": "8.0.1",
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
@@ -619,18 +751,6 @@
         "node": ">=12"
       }
     },
-    "node_modules/@puppeteer/browsers/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/@puppeteer/browsers/node_modules/yargs": {
       "version": "17.7.2",
       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
@@ -786,12 +906,6 @@
         "@types/estree": "*"
       }
     },
-    "node_modules/@types/eslint-visitor-keys": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz",
-      "integrity": "sha512-OCutwjDZ4aFS6PB1UZ988C4YgwlBHJd6wCeQqaLdmadZ/7e+w79+hbMUFC1QXDNCmdyoRfAFdm0RypzwR+Qpag==",
-      "dev": true
-    },
     "node_modules/@types/estree": {
       "version": "0.0.51",
       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.51.tgz",
@@ -889,12 +1003,6 @@
       "integrity": "sha512-9GcLXF0/v3t80caGs5p2rRfkB+a8VBGLJZVih6CNFkx8IZ994wiKKLSRs9nuFwk1HevWs/1mnUmkApGrSGsShA==",
       "dev": true
     },
-    "node_modules/@types/uuid": {
-      "version": "3.4.10",
-      "resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-3.4.10.tgz",
-      "integrity": "sha512-BgeaZuElf7DEYZhWYDTc/XcLZXdVgFkVSTa13BqKvbnmUrxr3TJFKofUxCtDO9UQOdhnV+HPOESdHiHKZOJV1A==",
-      "dev": true
-    },
     "node_modules/@types/yauzl": {
       "version": "2.10.3",
       "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
@@ -906,26 +1014,31 @@
       }
     },
     "node_modules/@typescript-eslint/eslint-plugin": {
-      "version": "2.34.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-2.34.0.tgz",
-      "integrity": "sha512-4zY3Z88rEE99+CNvTbXSyovv2z9PNOVffTWD2W8QF5s2prBQtwN2zadqERcrHpcR7O/+KMI3fcTAmUUhK/iQcQ==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/experimental-utils": "2.34.0",
-        "functional-red-black-tree": "^1.0.1",
-        "regexpp": "^3.0.0",
-        "tsutils": "^3.17.1"
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.15.0.tgz",
+      "integrity": "sha512-uiNHpyjZtFrLwLDpHnzaDlP3Tt6sGMqTCiqmxaN4n4RP0EfYZDODJyddiFDF44Hjwxr5xAcaYxVKm9QKQFJFLA==",
+      "dev": true,
+      "dependencies": {
+        "@eslint-community/regexpp": "^4.10.0",
+        "@typescript-eslint/scope-manager": "7.15.0",
+        "@typescript-eslint/type-utils": "7.15.0",
+        "@typescript-eslint/utils": "7.15.0",
+        "@typescript-eslint/visitor-keys": "7.15.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.3.1",
+        "natural-compare": "^1.4.0",
+        "ts-api-utils": "^1.3.0"
       },
       "engines": {
-        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "@typescript-eslint/parser": "^2.0.0",
-        "eslint": "^5.0.0 || ^6.0.0"
+        "@typescript-eslint/parser": "^7.0.0",
+        "eslint": "^8.56.0"
       },
       "peerDependenciesMeta": {
         "typescript": {
@@ -933,48 +1046,71 @@
         }
       }
     },
-    "node_modules/@typescript-eslint/experimental-utils": {
-      "version": "2.34.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-2.34.0.tgz",
-      "integrity": "sha512-eS6FTkq+wuMJ+sgtuNTtcqavWXqsflWcfBnlYhg/nS4aZ1leewkXGbvBhaapn1q6qf4M71bsR1tez5JTRMuqwA==",
+    "node_modules/@typescript-eslint/parser": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-7.15.0.tgz",
+      "integrity": "sha512-k9fYuQNnypLFcqORNClRykkGOMOj+pV6V91R4GO/l1FDGwpqmSwoOQrOHo3cGaH63e+D3ZiCAOsuS/D2c99j/A==",
       "dev": true,
       "dependencies": {
-        "@types/json-schema": "^7.0.3",
-        "@typescript-eslint/typescript-estree": "2.34.0",
-        "eslint-scope": "^5.0.0",
-        "eslint-utils": "^2.0.0"
+        "@typescript-eslint/scope-manager": "7.15.0",
+        "@typescript-eslint/types": "7.15.0",
+        "@typescript-eslint/typescript-estree": "7.15.0",
+        "@typescript-eslint/visitor-keys": "7.15.0",
+        "debug": "^4.3.4"
       },
       "engines": {
-        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "eslint": "*"
+        "eslint": "^8.56.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
       }
     },
-    "node_modules/@typescript-eslint/parser": {
-      "version": "2.34.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-2.34.0.tgz",
-      "integrity": "sha512-03ilO0ucSD0EPTw2X4PntSIRFtDPWjrVq7C3/Z3VQHRC7+13YB55rcJI3Jt+YgeHbjUdJPcPa7b23rXCBokuyA==",
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-7.15.0.tgz",
+      "integrity": "sha512-Q/1yrF/XbxOTvttNVPihxh1b9fxamjEoz2Os/Pe38OHwxC24CyCqXxGTOdpb4lt6HYtqw9HetA/Rf6gDGaMPlw==",
+      "dev": true,
+      "dependencies": {
+        "@typescript-eslint/types": "7.15.0",
+        "@typescript-eslint/visitor-keys": "7.15.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-7.15.0.tgz",
+      "integrity": "sha512-SkgriaeV6PDvpA6253PDVep0qCqgbO1IOBiycjnXsszNTVQe5flN5wR5jiczoEoDEnAqYFSFFc9al9BSGVltkg==",
       "dev": true,
       "dependencies": {
-        "@types/eslint-visitor-keys": "^1.0.0",
-        "@typescript-eslint/experimental-utils": "2.34.0",
-        "@typescript-eslint/typescript-estree": "2.34.0",
-        "eslint-visitor-keys": "^1.1.0"
+        "@typescript-eslint/typescript-estree": "7.15.0",
+        "@typescript-eslint/utils": "7.15.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^1.3.0"
       },
       "engines": {
-        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "eslint": "^5.0.0 || ^6.0.0"
+        "eslint": "^8.56.0"
       },
       "peerDependenciesMeta": {
         "typescript": {
@@ -982,22 +1118,36 @@
         }
       }
     },
+    "node_modules/@typescript-eslint/types": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-7.15.0.tgz",
+      "integrity": "sha512-aV1+B1+ySXbQH0pLK0rx66I3IkiZNidYobyfn0WFsdGhSXw+P3YOqeTq5GED458SfB24tg+ux3S+9g118hjlTw==",
+      "dev": true,
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
     "node_modules/@typescript-eslint/typescript-estree": {
-      "version": "2.34.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-2.34.0.tgz",
-      "integrity": "sha512-OMAr+nJWKdlVM9LOqCqh3pQQPwxHAN7Du8DR6dmwCrAmxtiXQnhHJ6tBNtf+cggqfo51SG/FCwnKhXCIM7hnVg==",
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-7.15.0.tgz",
+      "integrity": "sha512-gjyB/rHAopL/XxfmYThQbXbzRMGhZzGw6KpcMbfe8Q3nNQKStpxnUKeXb0KiN/fFDR42Z43szs6rY7eHk0zdGQ==",
       "dev": true,
       "dependencies": {
-        "debug": "^4.1.1",
-        "eslint-visitor-keys": "^1.1.0",
-        "glob": "^7.1.6",
-        "is-glob": "^4.0.1",
-        "lodash": "^4.17.15",
-        "semver": "^7.3.2",
-        "tsutils": "^3.17.1"
+        "@typescript-eslint/types": "7.15.0",
+        "@typescript-eslint/visitor-keys": "7.15.0",
+        "debug": "^4.3.4",
+        "globby": "^11.1.0",
+        "is-glob": "^4.0.3",
+        "minimatch": "^9.0.4",
+        "semver": "^7.6.0",
+        "ts-api-utils": "^1.3.0"
       },
       "engines": {
-        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
         "type": "opencollective",
@@ -1009,14 +1159,86 @@
         }
       }
     },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "dev": true,
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-7.15.0.tgz",
+      "integrity": "sha512-hfDMDqaqOqsUVGiEPSMLR/AjTSCsmJwjpKkYQRo1FNbmW4tBwBspYDwO9eh7sKSTwMQgBw9/T4DHudPaqshRWA==",
+      "dev": true,
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@typescript-eslint/scope-manager": "7.15.0",
+        "@typescript-eslint/types": "7.15.0",
+        "@typescript-eslint/typescript-estree": "7.15.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.56.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "7.15.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-7.15.0.tgz",
+      "integrity": "sha512-Hqgy/ETgpt2L5xueA/zHHIl4fJI2O4XUE9l4+OIfbJIRSnTJb/QscncdqqZzofQegIJugRIF57OJea1khw2SDw==",
+      "dev": true,
+      "dependencies": {
+        "@typescript-eslint/types": "7.15.0",
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@ungap/structured-clone": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.2.0.tgz",
+      "integrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==",
+      "dev": true
+    },
     "node_modules/@vue/compiler-sfc": {
-      "version": "2.7.14",
-      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-2.7.14.tgz",
-      "integrity": "sha512-aNmNHyLPsw+sVvlQFQ2/8sjNuLtK54TC6cuKnVzAY93ks4ZBrvwQSnkkIh7bsbNhum5hJBS00wSDipQ937f5DA==",
+      "version": "2.7.16",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-2.7.16.tgz",
+      "integrity": "sha512-KWhJ9k5nXuNtygPU7+t1rX6baZeqOYLEforUPjgNDBnLicfHCoi48H87Q8XyLZOrNNsmhuwKqtpDQWjEFe6Ekg==",
       "dependencies": {
-        "@babel/parser": "^7.18.4",
+        "@babel/parser": "^7.23.5",
         "postcss": "^8.4.14",
         "source-map": "^0.6.1"
+      },
+      "optionalDependencies": {
+        "prettier": "^1.18.2 || ^2.0.0"
       }
     },
     "node_modules/@vue/component-compiler-utils": {
@@ -1077,48 +1299,6 @@
       "integrity": "sha512-ncTzHV7NvsQZkYe1DW7cbDLm0YpzHmZF5r/iyP3ZnQtMiJ+pjzisCiMNI+Sj+xQF5pXhSHxSB3uDbsBTzY/c2A==",
       "dev": true
     },
-    "node_modules/@vue/reactivity": {
-      "version": "3.2.47",
-      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.2.47.tgz",
-      "integrity": "sha512-7khqQ/75oyyg+N/e+iwV6lpy1f5wq759NdlS1fpAhFXa8VeAIKGgk2E/C4VF59lx5b+Ezs5fpp/5WsRYXQiKxQ==",
-      "dev": true,
-      "dependencies": {
-        "@vue/shared": "3.2.47"
-      }
-    },
-    "node_modules/@vue/runtime-core": {
-      "version": "3.2.47",
-      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.2.47.tgz",
-      "integrity": "sha512-RZxbLQIRB/K0ev0K9FXhNbBzT32H9iRtYbaXb0ZIz2usLms/D55dJR2t6cIEUn6vyhS3ALNvNthI+Q95C+NOpA==",
-      "dev": true,
-      "dependencies": {
-        "@vue/reactivity": "3.2.47",
-        "@vue/shared": "3.2.47"
-      }
-    },
-    "node_modules/@vue/runtime-dom": {
-      "version": "3.2.47",
-      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.2.47.tgz",
-      "integrity": "sha512-ArXrFTjS6TsDei4qwNvgrdmHtD930KgSKGhS5M+j8QxXrDJYLqYw4RRcDy1bz1m1wMmb6j+zGLifdVHtkXA7gA==",
-      "dev": true,
-      "dependencies": {
-        "@vue/runtime-core": "3.2.47",
-        "@vue/shared": "3.2.47",
-        "csstype": "^2.6.8"
-      }
-    },
-    "node_modules/@vue/runtime-dom/node_modules/csstype": {
-      "version": "2.6.21",
-      "resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.21.tgz",
-      "integrity": "sha512-Z1PhmomIfypOpoMjRQB70jfvy/wxT50qW08YXO5lMIJkrdq4yOTR+AW7FqutScmB9NkLwxo+jU+kZLbofZZq/w==",
-      "dev": true
-    },
-    "node_modules/@vue/shared": {
-      "version": "3.2.47",
-      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.2.47.tgz",
-      "integrity": "sha512-BHGyyGN3Q97EZx0taMQ+OLNuZcW3d37ZEVmEAyeoA9ERdGvm9Irc/0Fua8SNyOtV1w6BS4q25wbMzJujO9HIfQ==",
-      "dev": true
-    },
     "node_modules/@vue/test-utils": {
       "version": "1.3.4",
       "resolved": "https://registry.npmjs.org/@vue/test-utils/-/test-utils-1.3.4.tgz",
@@ -1343,9 +1523,9 @@
       "dev": true
     },
     "node_modules/acorn": {
-      "version": "7.4.1",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
-      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
+      "version": "8.12.1",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
+      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
       "dev": true,
       "bin": {
         "acorn": "bin/acorn"
@@ -1422,40 +1602,13 @@
         "node": ">=6"
       }
     },
-    "node_modules/ansi-escapes": {
-      "version": "4.3.2",
-      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
-      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
-      "dev": true,
-      "dependencies": {
-        "type-fest": "^0.21.3"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/ansi-escapes/node_modules/type-fest": {
-      "version": "0.21.3",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
-      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/ansi-regex": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
-      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
       "dev": true,
       "engines": {
-        "node": ">=6"
+        "node": ">=8"
       }
     },
     "node_modules/ansi-styles": {
@@ -1534,6 +1687,15 @@
       "integrity": "sha512-GQTc6Uupx1FCavi5mPzBvVT7nEOeWMmUA9P95wpfpW1XwMSKs+KaymD5C2Up7KAUKg/mYwbsUYzdZWcoajlNZg==",
       "dev": true
     },
+    "node_modules/array-union": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
+      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/array.prototype.reduce": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/array.prototype.reduce/-/array.prototype.reduce-1.0.5.tgz",
@@ -1580,15 +1742,6 @@
       "integrity": "sha512-xNvxJEOUiWPGhUuUdQgAJPKOOJfGnIyKySOc09XkKsgdUV/3E2zvwZYdejjmRgPCgcym1juLH3226yA7sEFJKQ==",
       "dev": true
     },
-    "node_modules/astral-regex": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-1.0.0.tgz",
-      "integrity": "sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/asynckit": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
@@ -1943,12 +2096,6 @@
         "node": ">=4"
       }
     },
-    "node_modules/chardet": {
-      "version": "0.7.0",
-      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
-      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
-      "dev": true
-    },
     "node_modules/check-error": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.2.tgz",
@@ -2026,57 +2173,15 @@
         "node": ">=6"
       }
     },
-    "node_modules/cli-cursor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
-      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
+    "node_modules/cliui": {
+      "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
       "dev": true,
       "dependencies": {
-        "restore-cursor": "^3.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cli-width": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz",
-      "integrity": "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==",
-      "dev": true,
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/cliui": {
-      "version": "7.0.4",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
-      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
-      "dev": true,
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.0",
-        "wrap-ansi": "^7.0.0"
-      }
-    },
-    "node_modules/cliui/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cliui/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^7.0.0"
       }
     },
     "node_modules/clone-deep": {
@@ -2247,28 +2352,17 @@
       }
     },
     "node_modules/cross-spawn": {
-      "version": "6.0.5",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
-      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
       "dev": true,
       "dependencies": {
-        "nice-try": "^1.0.4",
-        "path-key": "^2.0.1",
-        "semver": "^5.5.0",
-        "shebang-command": "^1.2.0",
-        "which": "^1.2.9"
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
       },
       "engines": {
-        "node": ">=4.8"
-      }
-    },
-    "node_modules/cross-spawn/node_modules/semver": {
-      "version": "5.7.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
-      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
-      "dev": true,
-      "bin": {
-        "semver": "bin/semver"
+        "node": ">= 8"
       }
     },
     "node_modules/crossvent": {
@@ -2545,6 +2639,18 @@
         "node": ">=0.3.1"
       }
     },
+    "node_modules/dir-glob": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
+      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
+      "dev": true,
+      "dependencies": {
+        "path-type": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/doctrine": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
@@ -2878,54 +2984,55 @@
       }
     },
     "node_modules/eslint": {
-      "version": "6.8.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
-      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
-      "dev": true,
-      "dependencies": {
-        "@babel/code-frame": "^7.0.0",
-        "ajv": "^6.10.0",
-        "chalk": "^2.1.0",
-        "cross-spawn": "^6.0.5",
-        "debug": "^4.0.1",
+      "version": "8.57.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.0.tgz",
+      "integrity": "sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==",
+      "dev": true,
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.2.0",
+        "@eslint-community/regexpp": "^4.6.1",
+        "@eslint/eslintrc": "^2.1.4",
+        "@eslint/js": "8.57.0",
+        "@humanwhocodes/config-array": "^0.11.14",
+        "@humanwhocodes/module-importer": "^1.0.1",
+        "@nodelib/fs.walk": "^1.2.8",
+        "@ungap/structured-clone": "^1.2.0",
+        "ajv": "^6.12.4",
+        "chalk": "^4.0.0",
+        "cross-spawn": "^7.0.2",
+        "debug": "^4.3.2",
         "doctrine": "^3.0.0",
-        "eslint-scope": "^5.0.0",
-        "eslint-utils": "^1.4.3",
-        "eslint-visitor-keys": "^1.1.0",
-        "espree": "^6.1.2",
-        "esquery": "^1.0.1",
+        "escape-string-regexp": "^4.0.0",
+        "eslint-scope": "^7.2.2",
+        "eslint-visitor-keys": "^3.4.3",
+        "espree": "^9.6.1",
+        "esquery": "^1.4.2",
         "esutils": "^2.0.2",
-        "file-entry-cache": "^5.0.1",
-        "functional-red-black-tree": "^1.0.1",
-        "glob-parent": "^5.0.0",
-        "globals": "^12.1.0",
-        "ignore": "^4.0.6",
-        "import-fresh": "^3.0.0",
+        "fast-deep-equal": "^3.1.3",
+        "file-entry-cache": "^6.0.1",
+        "find-up": "^5.0.0",
+        "glob-parent": "^6.0.2",
+        "globals": "^13.19.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.2.0",
         "imurmurhash": "^0.1.4",
-        "inquirer": "^7.0.0",
         "is-glob": "^4.0.0",
-        "js-yaml": "^3.13.1",
+        "is-path-inside": "^3.0.3",
+        "js-yaml": "^4.1.0",
         "json-stable-stringify-without-jsonify": "^1.0.1",
-        "levn": "^0.3.0",
-        "lodash": "^4.17.14",
-        "minimatch": "^3.0.4",
-        "mkdirp": "^0.5.1",
+        "levn": "^0.4.1",
+        "lodash.merge": "^4.6.2",
+        "minimatch": "^3.1.2",
         "natural-compare": "^1.4.0",
-        "optionator": "^0.8.3",
-        "progress": "^2.0.0",
-        "regexpp": "^2.0.1",
-        "semver": "^6.1.2",
-        "strip-ansi": "^5.2.0",
-        "strip-json-comments": "^3.0.1",
-        "table": "^5.2.3",
-        "text-table": "^0.2.0",
-        "v8-compile-cache": "^2.0.3"
+        "optionator": "^0.9.3",
+        "strip-ansi": "^6.0.1",
+        "text-table": "^0.2.0"
       },
       "bin": {
         "eslint": "bin/eslint.js"
       },
       "engines": {
-        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
@@ -2944,72 +3051,170 @@
         "node": ">=8.0.0"
       }
     },
-    "node_modules/eslint-utils": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-2.1.0.tgz",
-      "integrity": "sha512-w94dQYoauyvlDc43XnGB8lU3Zt713vNChgt4EWwhXAP2XkBvndfxF0AgIqKOOasjPIPzj9JqgwkwbCYD0/V3Zg==",
+    "node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+      "dev": true,
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "dev": true,
       "dependencies": {
-        "eslint-visitor-keys": "^1.1.0"
+        "color-convert": "^2.0.1"
       },
       "engines": {
-        "node": ">=6"
+        "node": ">=8"
       },
       "funding": {
-        "url": "https://github.com/sponsors/mysticatea"
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/eslint-visitor-keys": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.3.0.tgz",
-      "integrity": "sha512-6J72N8UNa462wa/KFODt/PJ3IU60SDpC3QXC1Hjc1BXXpfL2C9R5+AU7jhe0F6GREqVMh4Juu+NY7xn+6dipUQ==",
+    "node_modules/eslint/node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true
+    },
+    "node_modules/eslint/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
       "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
       "engines": {
-        "node": ">=4"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/eslint/node_modules/eslint-utils": {
-      "version": "1.4.3",
-      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-1.4.3.tgz",
-      "integrity": "sha512-fbBN5W2xdY45KulGXmLHZ3c3FHfVYmKg0IrAKGOkT/464PQsx2UeIzfz1RmEci+KLm1bBaAzZAh8+/E+XAeZ8Q==",
+    "node_modules/eslint/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/eslint/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/eslint/node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint/node_modules/eslint-scope": {
+      "version": "7.2.2",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
+      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
       "dev": true,
       "dependencies": {
-        "eslint-visitor-keys": "^1.1.0"
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
       },
       "engines": {
-        "node": ">=6"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
       }
     },
-    "node_modules/eslint/node_modules/regexpp": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
-      "integrity": "sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==",
+    "node_modules/eslint/node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
       "dev": true,
       "engines": {
-        "node": ">=6.5.0"
+        "node": ">=4.0"
       }
     },
-    "node_modules/eslint/node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+    "node_modules/eslint/node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "dev": true,
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/eslint/node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
       "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/eslint/node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
       "bin": {
-        "semver": "bin/semver.js"
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/eslint/node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
       }
     },
     "node_modules/espree": {
-      "version": "6.2.1",
-      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
-      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
+      "version": "9.6.1",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
+      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
       "dev": true,
       "dependencies": {
-        "acorn": "^7.1.1",
-        "acorn-jsx": "^5.2.0",
-        "eslint-visitor-keys": "^1.1.0"
+        "acorn": "^8.9.0",
+        "acorn-jsx": "^5.3.2",
+        "eslint-visitor-keys": "^3.4.1"
       },
       "engines": {
-        "node": ">=6.0.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
       }
     },
     "node_modules/esprima": {
@@ -3106,20 +3311,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/external-editor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
-      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
-      "dev": true,
-      "dependencies": {
-        "chardet": "^0.7.0",
-        "iconv-lite": "^0.4.24",
-        "tmp": "^0.0.33"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/extract-zip": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
@@ -3152,6 +3343,22 @@
       "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==",
       "dev": true
     },
+    "node_modules/fast-glob": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
+      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
+      "dev": true,
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
@@ -3179,6 +3386,15 @@
         "node": ">= 4.9.1"
       }
     },
+    "node_modules/fastq": {
+      "version": "1.17.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
+      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
+      "dev": true,
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
     "node_modules/fd-slicer": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
@@ -3188,31 +3404,16 @@
         "pend": "~1.2.0"
       }
     },
-    "node_modules/figures": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
-      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
-      "dev": true,
-      "dependencies": {
-        "escape-string-regexp": "^1.0.5"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/file-entry-cache": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
-      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
       "dev": true,
       "dependencies": {
-        "flat-cache": "^2.0.1"
+        "flat-cache": "^3.0.4"
       },
       "engines": {
-        "node": ">=4"
+        "node": "^10.12.0 || >=12.0.0"
       }
     },
     "node_modules/fill-range": {
@@ -3270,23 +3471,23 @@
       }
     },
     "node_modules/flat-cache": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
-      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
+      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
       "dev": true,
       "dependencies": {
-        "flatted": "^2.0.0",
-        "rimraf": "2.6.3",
-        "write": "1.0.3"
+        "flatted": "^3.2.9",
+        "keyv": "^4.5.3",
+        "rimraf": "^3.0.2"
       },
       "engines": {
-        "node": ">=4"
+        "node": "^10.12.0 || >=12.0.0"
       }
     },
     "node_modules/flatted": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
-      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
+      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
       "dev": true
     },
     "node_modules/for-each": {
@@ -3311,65 +3512,6 @@
         "node": ">=8.0.0"
       }
     },
-    "node_modules/foreground-child/node_modules/cross-spawn": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
-      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
-      "dev": true,
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/foreground-child/node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/foreground-child/node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/foreground-child/node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/foreground-child/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/fork-ts-checker-webpack-plugin": {
       "version": "6.5.3",
       "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
@@ -3607,20 +3749,6 @@
       "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
       "dev": true
     },
-    "node_modules/fsevents": {
-      "version": "2.3.2",
-      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
-      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
-      "dev": true,
-      "hasInstallScript": true,
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
-      }
-    },
     "node_modules/function-bind": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
@@ -3645,12 +3773,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/functional-red-black-tree": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
-      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
-      "dev": true
-    },
     "node_modules/functions-have-names": {
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
@@ -3809,12 +3931,12 @@
       "dev": true
     },
     "node_modules/globals": {
-      "version": "12.4.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
-      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
+      "version": "13.24.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
+      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
       "dev": true,
       "dependencies": {
-        "type-fest": "^0.8.1"
+        "type-fest": "^0.20.2"
       },
       "engines": {
         "node": ">=8"
@@ -3823,6 +3945,18 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/globals/node_modules/type-fest": {
+      "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/globalthis": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.3.tgz",
@@ -3838,6 +3972,26 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/globby": {
+      "version": "11.1.0",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
+      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
+      "dev": true,
+      "dependencies": {
+        "array-union": "^2.1.0",
+        "dir-glob": "^3.0.1",
+        "fast-glob": "^3.2.9",
+        "ignore": "^5.2.0",
+        "merge2": "^1.4.1",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/gopd": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
@@ -3856,6 +4010,12 @@
       "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
       "dev": true
     },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true
+    },
     "node_modules/has": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
@@ -4006,18 +4166,6 @@
         "node": ">= 14"
       }
     },
-    "node_modules/iconv-lite": {
-      "version": "0.4.24",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
-      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
-      "dev": true,
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/icss-utils": {
       "version": "5.1.0",
       "resolved": "https://registry.npmjs.org/icss-utils/-/icss-utils-5.1.0.tgz",
@@ -4052,9 +4200,9 @@
       ]
     },
     "node_modules/ignore": {
-      "version": "4.0.6",
-      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
-      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.1.tgz",
+      "integrity": "sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==",
       "dev": true,
       "engines": {
         "node": ">= 4"
@@ -4124,138 +4272,23 @@
       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
       "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
       "dev": true,
-      "dependencies": {
-        "once": "^1.3.0",
-        "wrappy": "1"
-      }
-    },
-    "node_modules/inherits": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
-      "dev": true
-    },
-    "node_modules/ini": {
-      "version": "1.3.8",
-      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
-      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
-      "dev": true
-    },
-    "node_modules/inquirer": {
-      "version": "7.3.3",
-      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-7.3.3.tgz",
-      "integrity": "sha512-JG3eIAj5V9CwcGvuOmoo6LB9kbAYT8HXffUl6memuszlwDC/qvFAJw49XJ5NROSFNPxp3iQg1GqkFhaY/CR0IA==",
-      "dev": true,
-      "dependencies": {
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.1.0",
-        "cli-cursor": "^3.1.0",
-        "cli-width": "^3.0.0",
-        "external-editor": "^3.0.3",
-        "figures": "^3.0.0",
-        "lodash": "^4.17.19",
-        "mute-stream": "0.0.8",
-        "run-async": "^2.4.0",
-        "rxjs": "^6.6.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0",
-        "through": "^2.3.6"
-      },
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
-    "node_modules/inquirer/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/inquirer/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/inquirer/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/inquirer/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true
-    },
-    "node_modules/inquirer/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
       }
     },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true
+    },
+    "node_modules/ini": {
+      "version": "1.3.8",
+      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
+      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
+      "dev": true
+    },
     "node_modules/internal-slot": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.5.tgz",
@@ -4509,6 +4542,15 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/is-path-inside": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
+      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/is-plain-obj": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-2.1.0.tgz",
@@ -4750,65 +4792,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/istanbul-lib-processinfo/node_modules/cross-spawn": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
-      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
-      "dev": true,
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/istanbul-lib-processinfo/node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/istanbul-lib-processinfo/node_modules/rimraf": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
-      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
-      "dependencies": {
-        "glob": "^7.1.3"
-      },
-      "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/istanbul-lib-processinfo/node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/istanbul-lib-processinfo/node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/istanbul-lib-processinfo/node_modules/uuid": {
       "version": "8.3.2",
       "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
@@ -4818,21 +4801,6 @@
         "uuid": "dist/bin/uuid"
       }
     },
-    "node_modules/istanbul-lib-processinfo/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/istanbul-lib-report": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz",
@@ -5030,6 +4998,12 @@
         "node": ">=4"
       }
     },
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true
+    },
     "node_modules/json-parse-even-better-errors": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
@@ -5083,6 +5057,15 @@
       "integrity": "sha512-g3UB796vUFIY90VIv/WX3L2c8CS2MdWUww3CNrYmqza1Fg0DURc2K/O4YrnklBdQarSJ/y8JnJYDGc+1iumQjg==",
       "dev": true
     },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "dependencies": {
+        "json-buffer": "3.0.1"
+      }
+    },
     "node_modules/kind-of": {
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
@@ -5096,13 +5079,13 @@
       }
     },
     "node_modules/levn": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
-      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
       "dev": true,
       "dependencies": {
-        "prelude-ls": "~1.1.2",
-        "type-check": "~0.3.2"
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
       },
       "engines": {
         "node": ">= 0.8.0"
@@ -5170,6 +5153,12 @@
       "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
       "dev": true
     },
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true
+    },
     "node_modules/log-symbols": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
@@ -5337,6 +5326,15 @@
       "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
       "dev": true
     },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "dev": true,
+      "engines": {
+        "node": ">= 8"
+      }
+    },
     "node_modules/methods": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
@@ -5392,15 +5390,6 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/mimic-fn": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
-      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/minimatch": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
@@ -5648,12 +5637,6 @@
         "mustache": "bin/mustache"
       }
     },
-    "node_modules/mute-stream": {
-      "version": "0.0.8",
-      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
-      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==",
-      "dev": true
-    },
     "node_modules/nanoid": {
       "version": "3.3.3",
       "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.3.tgz",
@@ -5687,12 +5670,6 @@
         "node": ">= 0.4.0"
       }
     },
-    "node_modules/nice-try": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
-      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
-      "dev": true
-    },
     "node_modules/nise": {
       "version": "5.1.5",
       "resolved": "https://registry.npmjs.org/nise/-/nise-5.1.5.tgz",
@@ -5799,15 +5776,6 @@
         "npm-license-generator": "build/npm-license-generator"
       }
     },
-    "node_modules/npm-license-generator/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/npm-license-generator/node_modules/ansi-styles": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
@@ -5904,33 +5872,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/npm-license-generator/node_modules/rimraf": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
-      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
-      "dependencies": {
-        "glob": "^7.1.3"
-      },
-      "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/npm-license-generator/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/npm-license-generator/node_modules/wrap-ansi": {
       "version": "6.2.0",
       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
@@ -6036,15 +5977,6 @@
         "node": ">=8.9"
       }
     },
-    "node_modules/nyc/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/nyc/node_modules/ansi-styles": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
@@ -6150,33 +6082,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/nyc/node_modules/rimraf": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
-      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
-      "dependencies": {
-        "glob": "^7.1.3"
-      },
-      "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/nyc/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/nyc/node_modules/wrap-ansi": {
       "version": "6.2.0",
       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
@@ -6312,47 +6217,23 @@
         "wrappy": "1"
       }
     },
-    "node_modules/onetime": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
-      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
-      "dev": true,
-      "dependencies": {
-        "mimic-fn": "^2.1.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/optionator": {
-      "version": "0.8.3",
-      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
-      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
       "dev": true,
       "dependencies": {
-        "deep-is": "~0.1.3",
-        "fast-levenshtein": "~2.0.6",
-        "levn": "~0.3.0",
-        "prelude-ls": "~1.1.2",
-        "type-check": "~0.3.2",
-        "word-wrap": "~1.2.3"
+        "deep-is": "^0.1.3",
+        "fast-levenshtein": "^2.0.6",
+        "levn": "^0.4.1",
+        "prelude-ls": "^1.2.1",
+        "type-check": "^0.4.0",
+        "word-wrap": "^1.2.5"
       },
       "engines": {
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/os-tmpdir": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
-      "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/p-limit": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
@@ -6500,12 +6381,12 @@
       }
     },
     "node_modules/path-key": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
-      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
       "dev": true,
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/path-parse": {
@@ -6756,9 +6637,9 @@
       }
     },
     "node_modules/prelude-ls": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
-      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
       "dev": true,
       "engines": {
         "node": ">= 0.8.0"
@@ -6768,7 +6649,7 @@
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.2.1.tgz",
       "integrity": "sha512-PqyhM2yCjg/oKkFPtTGUojv7gnZAoG80ttl45O6x2Ug/rMJw4wcc9k6aaf2hibP7BGVCCM33gZoGjyvt9mm16Q==",
-      "dev": true,
+      "devOptional": true,
       "bin": {
         "prettier": "bin-prettier.js"
       },
@@ -7016,6 +6897,26 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
     "node_modules/queue-tick": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/queue-tick/-/queue-tick-1.0.1.tgz",
@@ -7086,18 +6987,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/regexpp": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
-      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/mysticatea"
-      }
-    },
     "node_modules/release-zalgo": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/release-zalgo/-/release-zalgo-1.0.0.tgz",
@@ -7172,50 +7061,53 @@
         "node": ">=4"
       }
     },
-    "node_modules/restore-cursor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
-      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
+    "node_modules/reusify": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
+      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
       "dev": true,
-      "dependencies": {
-        "onetime": "^5.1.0",
-        "signal-exit": "^3.0.2"
-      },
       "engines": {
-        "node": ">=8"
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
       }
     },
     "node_modules/rimraf": {
-      "version": "2.6.3",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
-      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "deprecated": "Rimraf versions prior to v4 are no longer supported",
       "dev": true,
       "dependencies": {
         "glob": "^7.1.3"
       },
       "bin": {
         "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/run-async": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
-      "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.12.0"
-      }
-    },
-    "node_modules/rxjs": {
-      "version": "6.6.7",
-      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
-      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
       "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
       "dependencies": {
-        "tslib": "^1.9.0"
-      },
-      "engines": {
-        "npm": ">=2.0.0"
+        "queue-microtask": "^1.2.2"
       }
     },
     "node_modules/safe-buffer": {
@@ -7252,12 +7144,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
-      "dev": true
-    },
     "node_modules/sass": {
       "version": "1.60.0",
       "resolved": "https://registry.npmjs.org/sass/-/sass-1.60.0.tgz",
@@ -7351,24 +7237,24 @@
       }
     },
     "node_modules/shebang-command": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
-      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
       "dev": true,
       "dependencies": {
-        "shebang-regex": "^1.0.0"
+        "shebang-regex": "^3.0.0"
       },
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
       }
     },
     "node_modules/shebang-regex": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
-      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
       "dev": true,
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
       }
     },
     "node_modules/side-channel": {
@@ -7532,27 +7418,13 @@
         "node": ">=8"
       }
     },
-    "node_modules/slice-ansi": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-2.1.0.tgz",
-      "integrity": "sha512-Qu+VC3EwYLldKa1fCxuuvULvSJOKEgk9pi8dZeCVK7TqBfUNTH4sFkk4joj8afVSfAYgJoSOetjx9QWOJ5mYoQ==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^3.2.0",
-        "astral-regex": "^1.0.0",
-        "is-fullwidth-code-point": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
-      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
+    "node_modules/slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
       "dev": true,
       "engines": {
-        "node": ">=4"
+        "node": ">=8"
       }
     },
     "node_modules/smart-buffer": {
@@ -7636,36 +7508,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/spawn-wrap/node_modules/rimraf": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
-      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
-      "dependencies": {
-        "glob": "^7.1.3"
-      },
-      "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/spawn-wrap/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/spdx-exceptions": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
@@ -7748,27 +7590,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/string-width/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/string-width/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/string.prototype.trim": {
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.7.tgz",
@@ -7815,15 +7636,15 @@
       }
     },
     "node_modules/strip-ansi": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
-      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
       "dev": true,
       "dependencies": {
-        "ansi-regex": "^4.1.0"
+        "ansi-regex": "^5.0.1"
       },
       "engines": {
-        "node": ">=6"
+        "node": ">=8"
       }
     },
     "node_modules/strip-bom": {
@@ -7943,50 +7764,6 @@
         "node": ">=4.0.0"
       }
     },
-    "node_modules/table": {
-      "version": "5.4.6",
-      "resolved": "https://registry.npmjs.org/table/-/table-5.4.6.tgz",
-      "integrity": "sha512-wmEc8m4fjnob4gt5riFRtTu/6+4rSe12TpAELNSqHMfF3IqnA+CH37USM6/YR3qRZv7e56kAEAtd6nKZaxe0Ug==",
-      "dev": true,
-      "dependencies": {
-        "ajv": "^6.10.2",
-        "lodash": "^4.17.14",
-        "slice-ansi": "^2.1.0",
-        "string-width": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/table/node_modules/emoji-regex": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
-      "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==",
-      "dev": true
-    },
-    "node_modules/table/node_modules/is-fullwidth-code-point": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
-      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/table/node_modules/string-width": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
-      "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
-      "dev": true,
-      "dependencies": {
-        "emoji-regex": "^7.0.1",
-        "is-fullwidth-code-point": "^2.0.0",
-        "strip-ansi": "^5.1.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/tapable": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
@@ -8135,18 +7912,6 @@
         "randombytes": "^2.1.0"
       }
     },
-    "node_modules/terser/node_modules/acorn": {
-      "version": "8.8.2",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.2.tgz",
-      "integrity": "sha512-xjIYgE8HBrkpd/sJqOGNspf8uHG+NOHGOw6a/Urj8taM2EXfdNAH2oFcPeIFfsv3+kz/mJrS5VuMqbNLjCa2vw==",
-      "dev": true,
-      "bin": {
-        "acorn": "bin/acorn"
-      },
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
     "node_modules/test-exclude": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
@@ -8187,18 +7952,6 @@
       "resolved": "https://registry.npmjs.org/ticky/-/ticky-1.0.1.tgz",
       "integrity": "sha512-RX35iq/D+lrsqhcPWIazM9ELkjOe30MSeoBHQHSsRwd1YuhJO5ui1K1/R0r7N3mFvbLBs33idw+eR6j+w6i/DA=="
     },
-    "node_modules/tmp": {
-      "version": "0.0.33",
-      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
-      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
-      "dev": true,
-      "dependencies": {
-        "os-tmpdir": "~1.0.2"
-      },
-      "engines": {
-        "node": ">=0.6.0"
-      }
-    },
     "node_modules/to-fast-properties": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
@@ -8220,6 +7973,18 @@
         "node": ">=8.0"
       }
     },
+    "node_modules/ts-api-utils": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
+      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.2.0"
+      }
+    },
     "node_modules/ts-loader": {
       "version": "9.4.2",
       "resolved": "https://registry.npmjs.org/ts-loader/-/ts-loader-9.4.2.tgz",
@@ -8309,34 +8074,13 @@
         "node": ">=8"
       }
     },
-    "node_modules/tslib": {
-      "version": "1.14.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
-      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
-      "dev": true
-    },
-    "node_modules/tsutils": {
-      "version": "3.21.0",
-      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
-      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
-      "dev": true,
-      "dependencies": {
-        "tslib": "^1.8.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      },
-      "peerDependencies": {
-        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
-      }
-    },
     "node_modules/type-check": {
-      "version": "0.3.2",
-      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
-      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
       "dev": true,
       "dependencies": {
-        "prelude-ls": "~1.1.2"
+        "prelude-ls": "^1.2.1"
       },
       "engines": {
         "node": ">= 0.8.0"
@@ -8586,27 +8330,13 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/uuid": {
-      "version": "3.4.0",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
-      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
-      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
-      "bin": {
-        "uuid": "bin/uuid"
-      }
-    },
-    "node_modules/v8-compile-cache": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
-      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
-      "dev": true
-    },
     "node_modules/vue": {
-      "version": "2.7.14",
-      "resolved": "https://registry.npmjs.org/vue/-/vue-2.7.14.tgz",
-      "integrity": "sha512-b2qkFyOM0kwqWFuQmgd4o+uHGU7T+2z3T+WQp8UBjADfEv2n4FEMffzBmCKNP0IGzOEEfYjvtcC62xaSKeQDrQ==",
+      "version": "2.7.16",
+      "resolved": "https://registry.npmjs.org/vue/-/vue-2.7.16.tgz",
+      "integrity": "sha512-4gCtFXaAA3zYZdTp5s4Hl2sozuySsgz4jy1EnpBHNfpMa9dK1ZCG7viqBPCwXtmgc8nHqUsAu3G4gtmXkkY3Sw==",
+      "deprecated": "Vue 2 has reached EOL and is no longer actively maintained. See https://v2.vuejs.org/eol/ for more details.",
       "dependencies": {
-        "@vue/compiler-sfc": "2.7.14",
+        "@vue/compiler-sfc": "2.7.16",
         "csstype": "^3.1.0"
       }
     },
@@ -8746,9 +8476,9 @@
       }
     },
     "node_modules/vue-template-compiler": {
-      "version": "2.7.14",
-      "resolved": "https://registry.npmjs.org/vue-template-compiler/-/vue-template-compiler-2.7.14.tgz",
-      "integrity": "sha512-zyA5Y3ArvVG0NacJDkkzJuPQDF8RFeRlzV2vLeSnhSpieO6LK2OVbdLPi5MPPs09Ii+gMO8nY4S3iKQxBxDmWQ==",
+      "version": "2.7.16",
+      "resolved": "https://registry.npmjs.org/vue-template-compiler/-/vue-template-compiler-2.7.16.tgz",
+      "integrity": "sha512-AYbUWAJHLGGQM7+cNTELw+KsOG9nl2CnSv467WobS5Cv9uk3wFcnr1Etsz2sEIHEZvw1U+o9mRlEO6QbZvUPGQ==",
       "dev": true,
       "dependencies": {
         "de-indent": "^1.0.2",
@@ -8891,65 +8621,6 @@
         "node": "^12.20.0 || >=14"
       }
     },
-    "node_modules/webpack-cli/node_modules/cross-spawn": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
-      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
-      "dev": true,
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/webpack-cli/node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/webpack-cli/node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/webpack-cli/node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/webpack-cli/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/webpack-merge": {
       "version": "5.8.0",
       "resolved": "https://registry.npmjs.org/webpack-merge/-/webpack-merge-5.8.0.tgz",
@@ -8972,18 +8643,6 @@
         "node": ">=10.13.0"
       }
     },
-    "node_modules/webpack/node_modules/acorn": {
-      "version": "8.8.2",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.2.tgz",
-      "integrity": "sha512-xjIYgE8HBrkpd/sJqOGNspf8uHG+NOHGOw6a/Urj8taM2EXfdNAH2oFcPeIFfsv3+kz/mJrS5VuMqbNLjCa2vw==",
-      "dev": true,
-      "bin": {
-        "acorn": "bin/acorn"
-      },
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
     "node_modules/webpack/node_modules/acorn-import-assertions": {
       "version": "1.8.0",
       "resolved": "https://registry.npmjs.org/acorn-import-assertions/-/acorn-import-assertions-1.8.0.tgz",
@@ -9012,15 +8671,18 @@
       }
     },
     "node_modules/which": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
-      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
       "dev": true,
       "dependencies": {
         "isexe": "^2.0.0"
       },
       "bin": {
-        "which": "bin/which"
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
       }
     },
     "node_modules/which-boxed-primitive": {
@@ -9103,15 +8765,6 @@
         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
-    "node_modules/wrap-ansi/node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/wrap-ansi/node_modules/ansi-styles": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
@@ -9145,36 +8798,12 @@
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
       "dev": true
     },
-    "node_modules/wrap-ansi/node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/wrappy": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
       "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
       "dev": true
     },
-    "node_modules/write": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/write/-/write-1.0.3.tgz",
-      "integrity": "sha512-/lg70HAjtkUgWPVZhZcm+T4hkL8Zbtp1nFNOn3lRrxnlv50SRBv7cR7RqR+GMsd3hUXy9hWBo4CHTbFTcOYwig==",
-      "dev": true,
-      "dependencies": {
-        "mkdirp": "^0.5.1"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/write-file-atomic": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
diff --git a/package.json b/package.json
index 088dde83d..6c2c9677f 100644
--- a/package.json
+++ b/package.json
@@ -31,16 +31,14 @@
     "@types/sinon": "^17.0.2",
     "@types/sinon-chai": "^3.2.12",
     "@types/sinon-chrome": "^2.2.10",
-    "@types/uuid": "^3.4.9",
-    "@typescript-eslint/eslint-plugin": "^2.34.0",
-    "@typescript-eslint/parser": "^2.34.0",
-    "@vue/runtime-dom": "^3.2.47",
+    "@typescript-eslint/eslint-plugin": "^7.15.0",
+    "@typescript-eslint/parser": "^7.15.0",
     "@vue/test-utils": "^1.1.1",
     "base64-loader": "^1.0.0",
     "buffer": "^6.0.3",
     "chai": "^4.2.0",
     "crypto-js": "^4.1.1",
-    "eslint": "^6.8.0",
+    "eslint": "^8.56.0",
     "fork-ts-checker-webpack-plugin": "^6.5.3",
     "lodash": "^4.17.21",
     "mocha": "^10.2.0",
@@ -60,7 +58,7 @@
     "util": "^0.12.5",
     "vue-loader": "^15.10.1",
     "vue-svg-loader": "^0.16.0",
-    "vue-template-compiler": "^2.7.0",
+    "vue-template-compiler": "^2.7.16",
     "webpack": "^5.11.0",
     "webpack-cli": "^5.0.0",
     "webpack-merge": "^5.0.0"
@@ -72,8 +70,7 @@
     "node-gost-crypto": "^1.0.2",
     "qrcode-generator": "^1.4.4",
     "qrcode-reader": "^1.0.4",
-    "uuid": "^3.4.0",
-    "vue": "^2.6.12",
+    "vue": "^2.7.16",
     "vue2-dragula": "^2.5.4",
     "vuex": "^3.4.0"
   }
diff --git a/src/argon.ts b/src/argon.ts
index 3110ecf84..ea27b3967 100644
--- a/src/argon.ts
+++ b/src/argon.ts
@@ -10,7 +10,7 @@ window.addEventListener("message", (event) => {
 
   switch (message.action) {
     case "hash":
-      Argon.hash(message.value).then((hash) => {
+      Argon.hash(message.value, message.salt).then((hash) => {
         source.postMessage({ response: hash }, event.origin);
       });
       break;
@@ -28,12 +28,14 @@ window.addEventListener("message", (event) => {
 });
 
 class Argon {
-  static async hash(value: string) {
-    const salt = window.crypto.getRandomValues(new Uint8Array(16));
+  static async hash(value: string, salt: string | Uint8Array) {
     const hash = await argon2.hash({
       pass: value,
-      salt,
-      mem: 1024 * 16,
+      salt: salt,
+      time: 2,
+      mem: 1024 * 19,
+      parallelism: 1,
+      hashLen: 32,
       type: argon2.ArgonType.Argon2id,
     });
 
diff --git a/src/background.ts b/src/background.ts
index 30b95a15d..f84d78f91 100644
--- a/src/background.ts
+++ b/src/background.ts
@@ -2,8 +2,12 @@ import { getCredentials } from "./models/credentials";
 import { Encryption } from "./models/encryption";
 import { EntryStorage, ManagedStorage } from "./models/storage";
 import { Dropbox, Drive, OneDrive } from "./models/backup";
-import * as uuid from "uuid/v4";
-import { getSiteName, getMatchedEntries, getCurrentTab } from "./utils";
+import {
+  getSiteName,
+  getMatchedEntries,
+  getCurrentTab,
+  okToInjectContentScript,
+} from "./utils";
 import { CodeState } from "./models/otp";
 
 import { getOTPAuthPerLineFromOPTAuthMigration } from "./models/migration";
@@ -30,13 +34,16 @@ chrome.runtime.onMessage.addListener(async (message, sender) => {
   } else if (message.action === "getTotp") {
     getTotp(message.info);
   } else if (message.action === "cachePassphrase") {
-    chrome.storage.session.set({ cachedPassphrase: message.value });
+    chrome.storage.session.set({
+      cachedPassphrase: message.value,
+      cachedKeyId: message.keyId,
+    });
     chrome.alarms.clear("autolock");
     setAutolock();
   } else if (["dropbox", "drive", "onedrive"].indexOf(message.action) > -1) {
     getBackupToken(message.action);
   } else if (message.action === "lock") {
-    chrome.storage.session.set({ cachedPassphrase: null });
+    chrome.storage.session.set({ cachedPassphrase: null, cachedKeyId: null });
   } else if (message.action === "resetAutolock") {
     chrome.alarms.clear("autolock");
     setAutolock();
@@ -51,11 +58,14 @@ chrome.runtime.onMessage.addListener(async (message, sender) => {
 });
 
 chrome.alarms.onAlarm.addListener(() => {
-  chrome.storage.session.set({ cachedPassphrase: null });
+  chrome.storage.session.set({ cachedPassphrase: null, cachedKeyId: null });
   if (contentTab && contentTab.id) {
     chrome.tabs.sendMessage(contentTab.id, { action: "stopCapture" });
   }
   chrome.runtime.sendMessage({ action: "stopImport" });
+
+  // https://stackoverflow.com/a/56483156
+  return true;
 });
 
 async function getCapture(tab: chrome.tabs.Tab) {
@@ -136,9 +146,10 @@ async function getTotp(text: string, silent = false) {
         account = label;
       }
       const parameters = parameterPart.split("&");
-      const { cachedPassphrase } = await chrome.storage.session.get(
-        "cachedPassphrase"
-      );
+      const {
+        cachedPassphrase,
+        cachedKeyId,
+      } = await chrome.storage.session.get();
       parameters.forEach((item) => {
         const parameter = item.split("=");
         if (parameter[0].toLowerCase() === "secret") {
@@ -177,8 +188,8 @@ async function getTotp(text: string, silent = false) {
         !silent && chrome.tabs.sendMessage(id, { action: "secretqr", secret });
         return false;
       } else {
-        const encryption = new Encryption(cachedPassphrase);
-        const hash = await uuid();
+        const encryption = new Encryption(cachedPassphrase, cachedKeyId);
+        const hash = crypto.randomUUID();
         if (
           !/^[2-7a-z]+=*$/i.test(secret) &&
           /^[0-9a-f]+$/i.test(secret) &&
@@ -192,7 +203,7 @@ async function getTotp(text: string, silent = false) {
         ) {
           type = "hhex";
         }
-        const entryData: { [hash: string]: OTPStorage } = {};
+        const entryData: { [hash: string]: RawOTPStorage } = {};
         entryData[hash] = {
           account,
           hash,
@@ -400,10 +411,8 @@ function getBackupToken(service: string) {
 }
 
 async function uploadBackup(service: string) {
-  const { cachedPassphrase } = await chrome.storage.session.get(
-    "cachedPassphrase"
-  );
-  const encryption = new Encryption(cachedPassphrase);
+  const { cachedPassphrase, cachedKeyId } = await chrome.storage.session.get();
+  const encryption = new Encryption(cachedPassphrase, cachedKeyId);
 
   switch (service) {
     case "dropbox":
@@ -440,12 +449,13 @@ chrome.runtime.onInstalled.addListener(async (details) => {
   if (url) {
     chrome.tabs.create({ url, active: true });
   }
+
+  // https://stackoverflow.com/a/56483156
+  return true;
 });
 
 chrome.commands.onCommand.addListener(async (command: string) => {
-  const { cachedPassphrase } = await chrome.storage.session.get(
-    "cachedPassphrase"
-  );
+  const { cachedPassphrase, cachedKeyId } = await chrome.storage.session.get();
 
   let tab: chrome.tabs.Tab | undefined;
 
@@ -456,7 +466,7 @@ chrome.commands.onCommand.addListener(async (command: string) => {
       }
 
       tab = await getCurrentTab();
-      if (tab.id) {
+      if (okToInjectContentScript(tab)) {
         await chrome.scripting.executeScript({
           target: { tabId: tab.id },
           files: ["/dist/content.js"],
@@ -473,7 +483,7 @@ chrome.commands.onCommand.addListener(async (command: string) => {
 
     case "autofill":
       tab = await getCurrentTab();
-      if (tab.id) {
+      if (okToInjectContentScript(tab)) {
         await chrome.scripting.executeScript({
           target: { tabId: tab.id },
           files: ["/dist/content.js"],
@@ -491,7 +501,7 @@ chrome.commands.onCommand.addListener(async (command: string) => {
 
         if (matchedEntries && matchedEntries.length === 1) {
           const entry = matchedEntries[0];
-          const encryption = new Encryption(cachedPassphrase);
+          const encryption = new Encryption(cachedPassphrase, cachedKeyId);
           entry.applyEncryption(encryption);
 
           if (
@@ -510,6 +520,9 @@ chrome.commands.onCommand.addListener(async (command: string) => {
     default:
       break;
   }
+
+  // https://stackoverflow.com/a/56483156
+  return true;
 });
 
 async function setAutolock() {
@@ -564,6 +577,9 @@ async function updateContextMenu() {
               height: 400,
               width: 320,
             });
+
+            // https://stackoverflow.com/a/56483156
+            return true;
           });
         } else {
           chrome.contextMenus.removeAll();
diff --git a/src/components/Import.vue b/src/components/Import.vue
index 59ecc82fb..e224a82a2 100644
--- a/src/components/Import.vue
+++ b/src/components/Import.vue
@@ -66,6 +66,9 @@ export default Vue.extend({
       if (event.action === "stopImport") {
         this.shouldShowPassphrase = true;
       }
+
+      // https://stackoverflow.com/a/56483156
+      return true;
     });
   },
 });
diff --git a/src/components/Import/FileImport.vue b/src/components/Import/FileImport.vue
index 89fbc3e69..f61113f7a 100644
--- a/src/components/Import/FileImport.vue
+++ b/src/components/Import/FileImport.vue
@@ -45,12 +45,12 @@ export default Vue.extend({
       }
       if (target.files[0]) {
         const reader = new FileReader();
-        let decryptedFileData: { [hash: string]: OTPStorage } = {};
+        let decryptedFileData: { [hash: string]: RawOTPStorage } = {};
         reader.onload = async () => {
           let importData: {
             // @ts-ignore
             key?: { enc: string; hash: string };
-            [hash: string]: OTPStorage;
+            [hash: string]: RawOTPStorage | Key;
             // Bug #557, uploaded backups were missing `key`
             // @ts-ignore
             enc?: string;
@@ -74,7 +74,7 @@ export default Vue.extend({
             succeededCount = result.succeededCount;
           }
 
-          let key: { enc: string; hash: string } | null = null;
+          let key: { enc: string } | null = null;
 
           if (importData.hasOwnProperty("key")) {
             if (importData.key) {
@@ -82,27 +82,33 @@ export default Vue.extend({
             }
             delete importData.key;
           } else if (importData.enc && importData.hash) {
-            key = { enc: importData.enc, hash: importData.hash };
+            key = { enc: importData.enc };
             delete importData.hash;
             delete importData.enc;
           }
 
-          let encrypted = false;
           for (const hash in importData) {
-            if (importData[hash].encrypted) {
-              encrypted = true;
+            const possibleEntry = importData[hash];
+            if (possibleEntry.dataType === "Key") {
+              // don't try to import keys as an OTPEntry
+              continue;
+            }
+
+            if (possibleEntry.keyId || possibleEntry.encrypted) {
               try {
                 const oldPassphrase:
                   | string
                   | null = await this.getOldPassphrase();
 
                 if (key) {
-                  decryptedFileData = decryptBackupData(
+                  // v2 encryption
+                  decryptedFileData = await decryptBackupData(
                     importData,
                     CryptoJS.AES.decrypt(key.enc, oldPassphrase).toString()
                   );
                 } else {
-                  decryptedFileData = decryptBackupData(
+                  // v3 and v1 encryption
+                  decryptedFileData = await decryptBackupData(
                     importData,
                     oldPassphrase
                   );
@@ -112,11 +118,10 @@ export default Vue.extend({
               } catch {
                 break;
               }
+            } else {
+              decryptedFileData[hash] = possibleEntry;
             }
           }
-          if (!encrypted) {
-            decryptedFileData = importData;
-          }
           if (Object.keys(decryptedFileData).length) {
             await EntryStorage.import(
               this.$encryption as Encryption,
diff --git a/src/components/Import/QrImport.vue b/src/components/Import/QrImport.vue
index 427d23fb6..6edd0702d 100644
--- a/src/components/Import/QrImport.vue
+++ b/src/components/Import/QrImport.vue
@@ -48,12 +48,12 @@ export default Vue.extend({
         let importData: {
           // @ts-ignore
           key?: { enc: string; hash: string };
-          [hash: string]: OTPStorage;
+          [hash: string]: RawOTPStorage;
         } = result.exportData;
 
         const { failedCount, succeededCount } = result;
 
-        let decryptedFileData: { [hash: string]: OTPStorage } = importData;
+        let decryptedFileData: { [hash: string]: RawOTPStorage } = importData;
 
         if (Object.keys(decryptedFileData).length) {
           await EntryStorage.import(
diff --git a/src/components/Import/TextImport.vue b/src/components/Import/TextImport.vue
index 97712ce3a..47a5ac19c 100644
--- a/src/components/Import/TextImport.vue
+++ b/src/components/Import/TextImport.vue
@@ -48,7 +48,7 @@ export default Vue.extend({
       let exportData: {
         // @ts-ignore
         key?: { enc: string; hash: string };
-        [hash: string]: OTPStorage;
+        [hash: string]: OTPStorage | Key;
       } = {};
       let failedCount = 0;
       let succeededCount = 0;
@@ -78,15 +78,15 @@ export default Vue.extend({
             ? this.importPassphrase
             : null;
         let decryptedbackupData: {
-          [hash: string]: OTPStorage;
+          [hash: string]: RawOTPStorage;
         } = {};
         if (key && passphrase) {
-          decryptedbackupData = decryptBackupData(
+          decryptedbackupData = await decryptBackupData(
             exportData,
             CryptoJS.AES.decrypt(key.enc, passphrase).toString()
           );
         } else {
-          decryptedbackupData = decryptBackupData(exportData, passphrase);
+          decryptedbackupData = await decryptBackupData(exportData, passphrase);
         }
 
         if (Object.keys(decryptedbackupData).length) {
diff --git a/src/components/Popup/AddMethodPage.vue b/src/components/Popup/AddMethodPage.vue
index 5fb0bee50..ca63065fe 100644
--- a/src/components/Popup/AddMethodPage.vue
+++ b/src/components/Popup/AddMethodPage.vue
@@ -14,7 +14,7 @@
 </template>
 <script lang="ts">
 import Vue from "vue";
-import { getCurrentTab } from "../../utils";
+import { getCurrentTab, okToInjectContentScript } from "../../utils";
 export default Vue.extend({
   methods: {
     showInfo(page: string) {
@@ -33,7 +33,7 @@ export default Vue.extend({
 
       // Insert content script
       const tab = await getCurrentTab();
-      if (tab.id) {
+      if (okToInjectContentScript(tab)) {
         await chrome.scripting.executeScript({
           target: { tabId: tab.id },
           files: ["/dist/content.js"],
diff --git a/src/components/Popup/BackupPage.vue b/src/components/Popup/BackupPage.vue
index 44617f58d..8e718b46b 100644
--- a/src/components/Popup/BackupPage.vue
+++ b/src/components/Popup/BackupPage.vue
@@ -2,7 +2,7 @@
   <div>
     <!-- File Backup -->
     <div v-show="!exportDisabled">
-      <div class="text warning" v-if="!encryption.getEncryptionStatus()">
+      <div class="text warning" v-if="!defaultEncryption">
         {{ i18n.export_info }}
       </div>
       <div class="text">
@@ -43,12 +43,12 @@
       <a-button-link
         download="authenticator.json"
         :href="exportEncryptedFile"
-        v-if="encryption.getEncryptionStatus() && isDataLinkSupported"
+        v-if="!!defaultEncryption && isDataLinkSupported"
         >{{ i18n.download_enc_backup }}</a-button-link
       >
       <button
         v-on:click="downloadBackUpExportEncryptedFile()"
-        v-if="encryption.getEncryptionStatus() && !isDataLinkSupported"
+        v-if="!!defaultEncryption && !isDataLinkSupported"
         class="button"
       >
         {{ i18n.download_enc_backup }}
@@ -86,8 +86,8 @@ export default Vue.extend({
     };
   },
   computed: {
-    encryption: function () {
-      return this.$store.state.accounts.encryption;
+    defaultEncryption: function () {
+      return this.$store.state.accounts.defaultEncryption;
     },
     exportDisabled: function () {
       return this.$store.state.menu.exportDisabled;
@@ -173,7 +173,7 @@ export default Vue.extend({
   },
 });
 
-function hasUnsupportedAccounts(exportData: { [h: string]: OTPStorage }) {
+function hasUnsupportedAccounts(exportData: { [h: string]: RawOTPStorage }) {
   for (const entry of Object.keys(exportData)) {
     if (
       exportData[entry].type === "battle" ||
@@ -186,7 +186,7 @@ function hasUnsupportedAccounts(exportData: { [h: string]: OTPStorage }) {
 }
 
 function getBackupFile(
-  entryData: { [hash: string]: OTPStorage },
+  entryData: { [hash: string]: RawOTPStorage },
   key?: Object
 ) {
   if (key) {
@@ -198,7 +198,7 @@ function getBackupFile(
   return downloadFileUrlBuilder(json);
 }
 
-function getOneLineOtpBackupFile(entryData: { [hash: string]: OTPStorage }) {
+function getOneLineOtpBackupFile(entryData: { [hash: string]: RawOTPStorage }) {
   const otpAuthLines: string[] = [];
   for (const hash of Object.keys(entryData)) {
     const otpStorage = entryData[hash];
diff --git a/src/components/Popup/DrivePage.vue b/src/components/Popup/DrivePage.vue
index bdbe2d88e..351a61bbf 100644
--- a/src/components/Popup/DrivePage.vue
+++ b/src/components/Popup/DrivePage.vue
@@ -1,10 +1,7 @@
 <template>
   <div>
     <div>
-      <div
-        class="text warning"
-        v-show="!isEncrypted || !encryption.getEncryptionStatus()"
-      >
+      <div class="text warning" v-show="!isEncrypted || !defaultEncryption">
         {{ i18n.dropbox_risk }}
       </div>
       <div v-show="backupToken">
@@ -13,7 +10,7 @@
         </div>
       </div>
       <a-select-input
-        v-show="encryption.getEncryptionStatus() && backupToken"
+        v-show="!!defaultEncryption && backupToken"
         :label="i18n.encrypted"
         v-model="isEncrypted"
       >
@@ -50,8 +47,8 @@ export default Vue.extend({
     UserSettings.updateItems();
   },
   computed: {
-    encryption: function () {
-      return this.$store.state.accounts.encryption;
+    defaultEncryption: function () {
+      return this.$store.state.accounts.defaultEncryption;
     },
     isEncrypted: {
       get(): boolean {
diff --git a/src/components/Popup/DropboxPage.vue b/src/components/Popup/DropboxPage.vue
index 8c3046d58..030d2d6ca 100644
--- a/src/components/Popup/DropboxPage.vue
+++ b/src/components/Popup/DropboxPage.vue
@@ -1,10 +1,7 @@
 <template>
   <div>
     <div>
-      <div
-        class="text warning"
-        v-show="!isEncrypted || !encryption.getEncryptionStatus()"
-      >
+      <div class="text warning" v-show="!isEncrypted || !defaultEncryption">
         {{ i18n.dropbox_risk }}
       </div>
       <div v-show="backupToken">
@@ -13,7 +10,7 @@
         </div>
       </div>
       <a-select-input
-        v-show="encryption.getEncryptionStatus() && backupToken"
+        v-show="!!defaultEncryption && backupToken"
         :label="i18n.encrypted"
         v-model="isEncrypted"
       >
@@ -49,8 +46,8 @@ export default Vue.extend({
     UserSettings.updateItems();
   },
   computed: {
-    encryption: function () {
-      return this.$store.state.accounts.encryption;
+    defaultEncryption: function () {
+      return this.$store.state.accounts.defaultEncryption;
     },
     isEncrypted: {
       get(): boolean {
diff --git a/src/components/Popup/EntryComponent.vue b/src/components/Popup/EntryComponent.vue
index e1cfd8fb1..92099b5b1 100644
--- a/src/components/Popup/EntryComponent.vue
+++ b/src/components/Popup/EntryComponent.vue
@@ -90,7 +90,7 @@ import { mapState } from "vuex";
 import * as QRGen from "qrcode-generator";
 import { OTPEntry, OTPType, CodeState, OTPAlgorithm } from "../../models/otp";
 import { EntryStorage } from "../../models/storage";
-import { getCurrentTab } from "../../utils";
+import { getCurrentTab, okToInjectContentScript } from "../../utils";
 
 import IconMinusCircle from "../../../svg/minus-circle.svg";
 import IconRedo from "../../../svg/redo.svg";
@@ -223,13 +223,12 @@ export default Vue.extend({
             if (this.$store.state.menu.useAutofill) {
               await insertContentScript();
               const tab = await getCurrentTab();
-              if (!tab || !tab.id) {
-                return;
+              if (tab && tab.id) {
+                chrome.tabs.sendMessage(tab.id, {
+                  action: "pastecode",
+                  code: entry.code,
+                });
               }
-              chrome.tabs.sendMessage(tab.id, {
-                action: "pastecode",
-                code: entry.code,
-              });
             }
 
             const lastActiveElement = document.activeElement as HTMLElement;
@@ -296,8 +295,8 @@ function getQrUrl(entry: OTPEntry) {
 }
 
 async function insertContentScript() {
-  const tab = await getCurrentTab();
-  if (tab.id) {
+  let tab = await getCurrentTab();
+  if (okToInjectContentScript(tab)) {
     await chrome.scripting.executeScript({
       target: { tabId: tab.id },
       files: ["/dist/content.js"],
diff --git a/src/components/Popup/MainHeader.vue b/src/components/Popup/MainHeader.vue
index a05ccd00c..f97d77817 100644
--- a/src/components/Popup/MainHeader.vue
+++ b/src/components/Popup/MainHeader.vue
@@ -25,7 +25,7 @@
         id="i-lock"
         v-bind:title="i18n.lock"
         v-on:click="lock()"
-        v-show="!style.isEditing && encryption.getEncryptionStatus()"
+        v-show="!style.isEditing && !!defaultEncryption"
       >
         <IconLock />
       </div>
@@ -33,7 +33,7 @@
         class="icon"
         id="i-sync"
         v-bind:style="{
-          left: encryption.getEncryptionStatus() ? '70px' : '45px',
+          left: !!defaultEncryption ? '70px' : '45px',
         }"
         v-show="
           (dropboxToken || driveToken || oneDriveToken) && !style.isEditing
@@ -74,7 +74,7 @@
 <script lang="ts">
 import Vue from "vue";
 import { mapState } from "vuex";
-import { getCurrentTab } from "../../utils";
+import { getCurrentTab, okToInjectContentScript } from "../../utils";
 
 // Icons
 import IconCog from "../../../svg/cog.svg";
@@ -88,7 +88,7 @@ import { isFirefox } from "../../browser";
 
 const computedPrototype = [
   mapState("style", ["style"]),
-  mapState("accounts", ["encryption"]),
+  mapState("accounts", ["defaultEncryption"]),
   mapState("backup", ["driveToken", "dropboxToken", "oneDriveToken"]),
 ];
 
@@ -127,7 +127,7 @@ export default Vue.extend({
       if (page === "AddMethodPage") {
         if (
           this.$store.state.menu.enforcePassword &&
-          !this.$store.state.accounts.encryption.getEncryptionStatus()
+          !this.$store.state.accounts.defaultEncryption
         ) {
           page = "SetPasswordPage";
         }
@@ -146,7 +146,7 @@ export default Vue.extend({
     async beginCapture() {
       if (
         this.$store.state.menu.enforcePassword &&
-        !this.$store.state.accounts.encryption.getEncryptionStatus()
+        !this.$store.state.accounts.defaultEncryption
       ) {
         this.$store.commit("style/showInfo");
         this.$store.commit("currentView/changeView", "SetPasswordPage");
@@ -160,7 +160,7 @@ export default Vue.extend({
 
       const tab = await getCurrentTab();
       // Insert content script
-      if (tab.id) {
+      if (okToInjectContentScript(tab)) {
         await chrome.scripting.executeScript({
           target: { tabId: tab.id },
           files: ["/dist/content.js"],
diff --git a/src/components/Popup/OneDrivePage.vue b/src/components/Popup/OneDrivePage.vue
index 3ef85dbd3..8c93fc782 100644
--- a/src/components/Popup/OneDrivePage.vue
+++ b/src/components/Popup/OneDrivePage.vue
@@ -1,10 +1,7 @@
 <template>
   <div>
     <div>
-      <div
-        class="text warning"
-        v-show="!isEncrypted || !encryption.getEncryptionStatus()"
-      >
+      <div class="text warning" v-show="!isEncrypted || !defaultEncryption">
         {{ i18n.dropbox_risk }}
       </div>
       <div v-show="backupToken">
@@ -13,7 +10,7 @@
         </div>
       </div>
       <a-select-input
-        v-show="encryption.getEncryptionStatus() && backupToken"
+        v-show="!!defaultEncryption && backupToken"
         :label="i18n.encrypted"
         v-model="isEncrypted"
       >
@@ -59,8 +56,8 @@ export default Vue.extend({
     UserSettings.updateItems();
   },
   computed: {
-    encryption: function () {
-      return this.$store.state.accounts.encryption;
+    defaultEncryption: function () {
+      return this.$store.state.accounts.defaultEncryption;
     },
     isEncrypted: {
       get(): boolean {
diff --git a/src/components/Popup/PreferencesPage.vue b/src/components/Popup/PreferencesPage.vue
index b52834368..8bace36c8 100644
--- a/src/components/Popup/PreferencesPage.vue
+++ b/src/components/Popup/PreferencesPage.vue
@@ -43,7 +43,7 @@
       @change="requireContextMenuPermission()"
       v-if="isSupported"
     />
-    <div class="control-group" v-show="encryption.getEncryptionStatus()">
+    <div class="control-group" v-show="!!defaultEncryption">
       <label class="combo-label">{{ i18n.autolock }}</label>
       <input
         class="input"
@@ -107,8 +107,8 @@ export default Vue.extend({
         this.$store.commit("menu/setTheme", theme);
       },
     },
-    encryption(): EncryptionInterface {
-      return this.$store.state.accounts.encryption;
+    defaultEncryption(): string {
+      return this.$store.state.accounts.defaultEncryption;
     },
     enforceAutolock() {
       return this.$store.state.menu.enforceAutolock;
diff --git a/src/content.ts b/src/content.ts
index 4ba5efa9e..5ac1805cf 100644
--- a/src/content.ts
+++ b/src/content.ts
@@ -1,10 +1,8 @@
-// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-// @ts-ignore
+// @ts-expect-error - no typings
 import QRCode from "qrcode-reader";
 import jsQR from "jsqr";
 
-// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-// @ts-ignore
+// @ts-expect-error - injected by vue-svg-loader
 import scanGIF from "../images/scan.gif";
 
 if (!document.getElementById("__ga_grayLayout__")) {
@@ -63,6 +61,9 @@ if (!document.getElementById("__ga_grayLayout__")) {
         // invalid command, ignore it
         break;
     }
+
+    // https://stackoverflow.com/a/56483156
+    return true;
   });
 }
 
diff --git a/src/definitions/gost.d.ts b/src/definitions/gost.d.ts
index e5f778572..e8935fa4f 100644
--- a/src/definitions/gost.d.ts
+++ b/src/definitions/gost.d.ts
@@ -5,7 +5,6 @@ declare module "node-gost-crypto" {
     version: number;
     length: number;
   }
-  // eslint-disable-next-line @typescript-eslint/class-name-casing
   export class gostEngine {
     static getGostDigest(alg: AlgorithmIndentifier): GostDigest;
   }
diff --git a/src/definitions/module-interface.d.ts b/src/definitions/module-interface.d.ts
index 3dc038637..494266315 100644
--- a/src/definitions/module-interface.d.ts
+++ b/src/definitions/module-interface.d.ts
@@ -1,3 +1,4 @@
+/* eslint-disable @typescript-eslint/ban-types */
 interface Module {
   getModule(): Promise<VuexConstructor> | VuexConstructor;
 }
@@ -59,7 +60,8 @@ interface StyleState {
 
 interface AccountsState {
   entries: OTPEntryInterface[];
-  encryption: EncryptionInterface;
+  defaultEncryption: string;
+  encryption: Map<string, EncryptionInterface>;
   OTPType: number;
   shouldShowPassphrase: boolean;
   sectorStart: boolean;
@@ -70,8 +72,8 @@ interface AccountsState {
   siteName: (string | null)[];
   showSearch: boolean;
   exportData: { [k: string]: OTPEntryInterface };
-  exportEncData: { [k: string]: OTPEntryInterface };
-  key: { enc: string; hash: string } | null;
+  exportEncData: { [k: string]: OTPEntryInterface | Key };
+  keys: OldKey | Key[];
   wrongPassword: boolean;
   initComplete: boolean;
 }
diff --git a/src/definitions/otp.d.ts b/src/definitions/otp.d.ts
index e626c4230..c55fb1486 100644
--- a/src/definitions/otp.d.ts
+++ b/src/definitions/otp.d.ts
@@ -2,7 +2,6 @@ interface OTPEntryInterface {
   type: number; // OTPType
   index: number;
   issuer: string;
-  encSecret: string | null;
   secret: string | null;
   account: string;
   hash: string;
@@ -12,6 +11,8 @@ interface OTPEntryInterface {
   digits: number;
   algorithm: number; // OTPAlgorithm
   pinned: boolean;
+  encData?: string;
+  encryption?: EncryptionInterface;
   create(): Promise<void>;
   update(): Promise<void>;
   next(): Promise<void>;
@@ -24,14 +25,19 @@ interface OTPEntryInterface {
 
 interface EncryptionInterface {
   getEncryptedString(data: string): string;
-  getDecryptedSecret(entry: OTPStorage): string | null;
+  decryptSecretString(entry: string): string | null;
+  decryptEncSecret(entry: OTPEntryInterface): RawOTPStorage | null;
   getEncryptionStatus(): boolean;
   updateEncryptionPassword(password: string): void;
+  getEncryptionKeyId(): string;
+  setEncryptionKeyId(id: string): void;
 }
 
-interface OTPStorage {
+interface RawOTPStorage {
+  dataType?: "OTPStorage";
   account?: string;
   encrypted: boolean;
+  keyId?: string;
   hash: string;
   index: number;
   issuer?: string;
@@ -43,3 +49,28 @@ interface OTPStorage {
   algorithm?: string;
   pinned?: boolean;
 }
+
+interface EncOTPStorage {
+  dataType: "EncOTPStorage";
+  keyId: string;
+  data: string;
+  index: number;
+}
+
+type OTPStorage = RawOTPStorage | EncOTPStorage;
+
+interface OldKey {
+  enc: string;
+  hash: string;
+}
+
+interface Key {
+  dataType: "Key";
+  // UUID
+  id: string;
+  // Salt used to generate encryption key
+  salt: string;
+  // Hash of the encryption key
+  hash: string;
+  version: 3;
+}
diff --git a/src/definitions/shims-vue.d.ts b/src/definitions/shims-vue.d.ts
index 1ac3c42a4..bac18c752 100644
--- a/src/definitions/shims-vue.d.ts
+++ b/src/definitions/shims-vue.d.ts
@@ -1,6 +1,6 @@
 /* eslint-disable @typescript-eslint/no-explicit-any */
 declare module "*.vue" {
-  import Vue, { VueConstructor } from "vue";
+  import Vue from "vue";
   export default Vue;
 }
 
diff --git a/src/definitions/vue.d.ts b/src/definitions/vue.d.ts
index 54d406cc6..236017a15 100644
--- a/src/definitions/vue.d.ts
+++ b/src/definitions/vue.d.ts
@@ -1,5 +1,4 @@
 /* eslint-disable @typescript-eslint/no-explicit-any */
-import Vue from "vue";
 import { Store } from "vuex";
 
 declare module "vue/types/vue" {
diff --git a/src/import.ts b/src/import.ts
index 56839dc68..21bebdabb 100644
--- a/src/import.ts
+++ b/src/import.ts
@@ -7,7 +7,6 @@ import { Encryption } from "./models/encryption";
 import { EntryStorage } from "./models/storage";
 import { getOTPAuthPerLineFromOPTAuthMigration } from "./models/migration";
 import * as CryptoJS from "crypto-js";
-import * as uuid from "uuid/v4";
 
 async function init() {
   // i18n
@@ -19,7 +18,11 @@ async function init() {
   }
 
   // Load entries to global
-  const encryption = new Encryption(await getCachedPassphrase());
+  const cachedSecrets = await getCachedSecrets();
+  const encryption = new Encryption(
+    cachedSecrets.cachedPassphrase,
+    cachedSecrets.cachedKeyId
+  );
   const entries = await EntryStorage.get();
 
   if (encryption.getEncryptionStatus()) {
@@ -45,53 +48,153 @@ async function init() {
 
 init();
 
-async function getCachedPassphrase() {
-  const { cachedPassphrase } = await chrome.storage.session.get(
-    "cachedPassphrase"
-  );
+async function getCachedSecrets() {
+  const { cachedPassphrase, cachedKeyId } = await chrome.storage.session.get();
 
-  return cachedPassphrase;
+  return { cachedPassphrase, cachedKeyId };
 }
 
-export function decryptBackupData(
-  backupData: { [hash: string]: OTPStorage },
+export async function decryptBackupData(
+  backupData: { [hash: string]: OTPStorage | Key },
   passphrase: string | null
 ) {
-  const decryptedbackupData: { [hash: string]: OTPStorage } = {};
-  for (const hash of Object.keys(backupData)) {
-    if (typeof backupData[hash] !== "object") {
+  const decryptedBackupData: { [hash: string]: RawOTPStorage } = {};
+  const keys: Map<string, string | null> = new Map();
+  for (const hash in backupData) {
+    const unknownStorageItem = backupData[hash];
+    if (
+      typeof unknownStorageItem !== "object" ||
+      unknownStorageItem.dataType === "Key"
+    ) {
       continue;
     }
-    if (!backupData[hash].secret) {
+    let storageItem: RawOTPStorage;
+    if (unknownStorageItem.dataType === "EncOTPStorage") {
+      if (!passphrase) {
+        continue;
+      }
+
+      if (!keys.has(unknownStorageItem.keyId)) {
+        keys.set(
+          unknownStorageItem.keyId,
+          await findAndUnlockKey(
+            backupData,
+            unknownStorageItem.keyId,
+            passphrase
+          )
+        );
+      }
+      const decryptKey = keys.get(unknownStorageItem.keyId);
+      if (!decryptKey) {
+        // wrong password for key
+        continue;
+      }
+
+      storageItem = {
+        ...unknownStorageItem,
+        ...JSON.parse(
+          CryptoJS.AES.decrypt(unknownStorageItem.data, decryptKey).toString(
+            CryptoJS.enc.Utf8
+          )
+        ),
+        encrypted: false,
+      };
+    } else {
+      storageItem = unknownStorageItem;
+    }
+    if (!storageItem.secret) {
       continue;
     }
-    if (backupData[hash].encrypted && !passphrase) {
+    if (storageItem.encrypted && !passphrase) {
       continue;
     }
-    if (backupData[hash].encrypted && passphrase) {
+    if (storageItem.encrypted && passphrase) {
       try {
-        backupData[hash].secret = CryptoJS.AES.decrypt(
-          backupData[hash].secret,
+        storageItem.secret = CryptoJS.AES.decrypt(
+          storageItem.secret,
           passphrase
         ).toString(CryptoJS.enc.Utf8);
-        backupData[hash].encrypted = false;
+        storageItem.encrypted = false;
       } catch (error) {
         continue;
       }
     }
-    // backupData[hash].secret may be empty after decrypt with wrong
+    // storageItem.secret may be empty after decrypt with wrong
     // passphrase
-    if (!backupData[hash].secret) {
+    if (!storageItem.secret) {
       continue;
     }
-    decryptedbackupData[hash] = backupData[hash];
+    decryptedBackupData[hash] = storageItem;
+  }
+  return decryptedBackupData;
+}
+
+async function findAndUnlockKey(
+  importData: { [key: string]: OTPStorage | Key },
+  keyId: string,
+  password: string
+): Promise<string | null> {
+  if (!(keyId in importData)) {
+    return null;
+  }
+
+  const key = importData[keyId];
+  if (key.dataType !== "Key" || key.id !== keyId) {
+    return null;
+  }
+
+  const rawHash = await new Promise((resolve: (value: string) => void) => {
+    const iframe = document.getElementById("argon-sandbox");
+    const message = {
+      action: "hash",
+      value: password,
+      salt: key.salt,
+    };
+    if (iframe) {
+      window.addEventListener("message", (response) => {
+        resolve(response.data.response);
+      });
+      // @ts-expect-error bad typings
+      iframe.contentWindow.postMessage(message, "*");
+    }
+  });
+
+  // https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#format-algorithm
+  const possibleHash = rawHash.split("$")[5];
+  if (!possibleHash) {
+    throw new Error("argon2 did not return a hash!");
+  }
+
+  // verify user password by comparing their password hash with the
+  // hash of their password's hash
+  const isCorrectPassword = await new Promise(
+    (resolve: (value: string) => void) => {
+      const iframe = document.getElementById("argon-sandbox");
+      const message = {
+        action: "verify",
+        value: possibleHash,
+        hash: key.hash,
+      };
+      if (iframe) {
+        window.addEventListener("message", (response) => {
+          resolve(response.data.response);
+        });
+        // @ts-expect-error bad typings
+        iframe.contentWindow.postMessage(message, "*");
+      }
+    }
+  );
+
+  if (!isCorrectPassword) {
+    return null;
   }
-  return decryptedbackupData;
+
+  return possibleHash;
 }
 
 export async function getEntryDataFromOTPAuthPerLine(importCode: string) {
   const lines = importCode.split("\n");
-  const exportData: { [hash: string]: OTPStorage } = {};
+  const exportData: { [hash: string]: RawOTPStorage } = {};
   let failedCount = 0;
   let succeededCount = 0;
   for (let item of lines) {
@@ -175,7 +278,7 @@ export async function getEntryDataFromOTPAuthPerLine(importCode: string) {
         failedCount++;
         continue;
       } else {
-        const hash = await uuid();
+        const hash = crypto.randomUUID();
         if (
           !/^[2-7a-z]+=*$/i.test(secret) &&
           /^[0-9a-f]+$/i.test(secret) &&
diff --git a/src/mochaReporter.ts b/src/mochaReporter.ts
index 6be225392..56d3647f9 100644
--- a/src/mochaReporter.ts
+++ b/src/mochaReporter.ts
@@ -24,7 +24,6 @@ export function MochaReporter(runner: Runner) {
   const tests: Test[] = [];
 
   runner.on("start", () => {
-    // eslint-disable-next-line @typescript-eslint/camelcase
     window.__mocha_test_results__ = {};
     window.__mocha_test_results__.total = runner.total;
     window.__mocha_test_results__.completed = false;
@@ -40,8 +39,7 @@ export function MochaReporter(runner: Runner) {
         status: test.state,
       };
     };
-    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-    // @ts-ignore typings are wrong
+    // @ts-expect-error typings are wrong
     window.__mocha_test_results__.tests = tests.map(strip);
     window.__mocha_test_results__.completed = true;
 
diff --git a/src/models/backup.ts b/src/models/backup.ts
index b49dc679e..5484c5727 100644
--- a/src/models/backup.ts
+++ b/src/models/backup.ts
@@ -280,14 +280,14 @@ export class Drive implements BackupProvider {
                     UserSettings.items.driveFolder = undefined;
                     UserSettings.commitItems();
                     resolve(true);
+                  } else {
+                    console.error(res.error.message);
+                    resolve(false);
                   }
                 } else if (res.trashed) {
                   UserSettings.items.driveFolder = undefined;
                   UserSettings.commitItems();
                   resolve(true);
-                } else if (res.error) {
-                  console.error(res.error.message);
-                  resolve(false);
                 } else {
                   resolve(true);
                 }
diff --git a/src/models/encryption.ts b/src/models/encryption.ts
index 3c6101603..ebca10a85 100644
--- a/src/models/encryption.ts
+++ b/src/models/encryption.ts
@@ -2,9 +2,11 @@ import * as CryptoJS from "crypto-js";
 
 export class Encryption implements EncryptionInterface {
   private password: string;
+  private keyId: string;
 
-  constructor(password: string) {
-    this.password = password;
+  constructor(hash: string, keyId: string) {
+    this.password = hash;
+    this.keyId = keyId;
   }
 
   getEncryptedString(data: string): string {
@@ -15,10 +17,10 @@ export class Encryption implements EncryptionInterface {
     }
   }
 
-  getDecryptedSecret(entry: { secret: string; hash: string }) {
+  decryptSecretString(secret: string) {
     try {
       const decryptedSecret = CryptoJS.AES.decrypt(
-        entry.secret,
+        secret,
         this.password
       ).toString(CryptoJS.enc.Utf8);
 
@@ -46,6 +48,27 @@ export class Encryption implements EncryptionInterface {
     }
   }
 
+  decryptEncSecret(entry: OTPEntryInterface) {
+    try {
+      if (!entry.encData) {
+        return null;
+      }
+
+      const decryptedData = CryptoJS.AES.decrypt(
+        entry.encData,
+        this.password
+      ).toString(CryptoJS.enc.Utf8);
+
+      if (!decryptedData) {
+        return null;
+      }
+
+      return JSON.parse(decryptedData);
+    } catch (error) {
+      return null;
+    }
+  }
+
   getEncryptionStatus(): boolean {
     return this.password ? true : false;
   }
@@ -53,4 +76,12 @@ export class Encryption implements EncryptionInterface {
   updateEncryptionPassword(password: string) {
     this.password = password;
   }
+
+  setEncryptionKeyId(id: string): void {
+    this.keyId = id;
+  }
+
+  getEncryptionKeyId(): string {
+    return this.keyId;
+  }
 }
diff --git a/src/models/otp.ts b/src/models/otp.ts
index 95ea5ed15..cdfa38dba 100644
--- a/src/models/otp.ts
+++ b/src/models/otp.ts
@@ -1,8 +1,6 @@
-import { Encryption } from "./encryption";
 import { KeyUtilities } from "./key-utilities";
 import { UserSettings } from "./settings";
 import { EntryStorage } from "./storage";
-import * as uuid from "uuid/v4";
 
 export enum OTPType {
   totp = 1,
@@ -26,6 +24,12 @@ export enum OTPAlgorithm {
   GOST3411_2012_512,
 }
 
+export enum DataType {
+  OTPStorage = "OTPStorage",
+  EncOTPStorage = "EncOTPStorage",
+  Key = "Key",
+}
+
 export interface OTPAlgorithmSpec {
   length: number;
 }
@@ -48,7 +52,6 @@ export class OTPEntry implements OTPEntryInterface {
   index: number;
   issuer: string;
   secret: string | null;
-  encSecret: string | null;
   account: string;
   hash: string;
   counter: number;
@@ -56,27 +59,65 @@ export class OTPEntry implements OTPEntryInterface {
   digits: number;
   algorithm: OTPAlgorithm;
   pinned: boolean;
+  encryption?: EncryptionInterface;
+  encData?: string;
+  encSecret?: string;
+  keyId?: string;
   code = "&bull;&bull;&bull;&bull;&bull;&bull;";
 
   constructor(
-    entry: {
-      account?: string;
-      encrypted: boolean;
-      index: number;
-      issuer?: string;
-      secret: string;
-      type: OTPType;
-      counter?: number;
-      period?: number;
-      hash?: string;
-      digits?: number;
-      algorithm?: OTPAlgorithm;
-      pinned?: boolean;
-    },
-    encryption?: Encryption
+    entry:
+      | {
+          account?: string;
+          encrypted: boolean;
+          index: number;
+          issuer?: string;
+          secret: string;
+          type: OTPType;
+          counter?: number;
+          period?: number;
+          hash?: string;
+          digits?: number;
+          algorithm?: OTPAlgorithm;
+          pinned?: boolean;
+        }
+      | {
+          encrypted: true;
+          keyId: string;
+          encData: string;
+          hash: string;
+          index: number;
+        },
+    encryption?: EncryptionInterface
   ) {
-    this.type = entry.type;
+    this.encryption = encryption;
     this.index = entry.index;
+
+    if ("keyId" in entry) {
+      this.encData = entry.encData;
+      this.secret = null;
+      this.hash = entry.hash;
+      this.keyId = entry.keyId;
+
+      // defaults
+      this.type = OTPType.totp;
+      this.issuer = "";
+      this.account = "";
+      this.counter = 0;
+      this.period = 30;
+      this.digits = 6;
+      this.algorithm = OTPAlgorithm.SHA1;
+      this.pinned = false;
+      return;
+    } else if (entry.encrypted) {
+      // v2 encryption backwards compat logic
+      this.secret = null;
+      this.encSecret = entry.secret;
+    } else {
+      this.secret = entry.secret;
+    }
+
+    this.type = entry.type;
     if (entry.issuer) {
       this.issuer = entry.issuer;
     } else {
@@ -87,20 +128,10 @@ export class OTPEntry implements OTPEntryInterface {
     } else {
       this.account = "";
     }
-    if (entry.encrypted) {
-      this.encSecret = entry.secret;
-      this.secret = null;
-    } else {
-      this.secret = entry.secret;
-      this.encSecret = null;
-      if (encryption && encryption.getEncryptionStatus()) {
-        this.encSecret = encryption.getEncryptedString(this.secret);
-      }
-    }
     if (entry.hash) {
       this.hash = entry.hash;
     } else {
-      this.hash = uuid(); // UUID
+      this.hash = crypto.randomUUID();
     }
     if (entry.counter) {
       this.counter = entry.counter;
@@ -142,31 +173,65 @@ export class OTPEntry implements OTPEntryInterface {
     return;
   }
 
-  changeEncryption(encryption: Encryption) {
+  changeEncryption(encryption: EncryptionInterface) {
     if (!this.secret) {
       return;
     }
 
-    if (encryption.getEncryptionStatus()) {
-      this.encSecret = encryption.getEncryptedString(this.secret);
-    } else {
-      this.encSecret = null;
-    }
+    this.encryption = encryption;
     return;
   }
 
-  applyEncryption(encryption: Encryption) {
-    const secret = this.encSecret ? this.encSecret : null;
-    if (secret) {
-      this.secret = encryption.getDecryptedSecret({
-        hash: this.hash,
-        secret,
-      });
-      if (this.type !== OTPType.hotp && this.type !== OTPType.hhex) {
-        this.generate();
+  applyEncryption(encryption: EncryptionInterface) {
+    if (!encryption || !encryption.getEncryptionStatus()) {
+      return;
+    }
+
+    if (this.encSecret) {
+      // v2 encryption
+      this.secret = encryption.decryptSecretString(this.encSecret);
+      if (this.secret) {
+        this.encSecret = "";
       }
+      return;
     }
-    return;
+
+    // check if its a rawotpstorage
+    const decryptedData = encryption.decryptEncSecret(this);
+    if (decryptedData === null) {
+      return;
+    }
+
+    if (decryptedData?.dataType !== "OTPStorage") {
+      console.warn("Decrypt successful, but malformed encData!", this.hash);
+    }
+
+    if (decryptedData.hash !== this.hash) {
+      console.warn(
+        "Decrypt successful, but hash mismatch!",
+        this.hash,
+        decryptedData.hash
+      );
+    }
+
+    this.account = decryptedData.account || "";
+    // @ts-expect-error need a better way to do this
+    this.algorithm = OTPAlgorithm[decryptedData.algorithm] || OTPAlgorithm.SHA1;
+    this.counter = decryptedData.counter || 0;
+    this.digits = decryptedData.digits || 6;
+    this.issuer = decryptedData.issuer || "";
+    this.period = decryptedData.period || 30;
+    this.pinned = decryptedData.pinned || false;
+    this.secret = decryptedData.secret;
+    // @ts-expect-error need a better way to do this
+    this.type = OTPType[decryptedData.type] || OTPType.totp;
+
+    if (this.type !== OTPType.hotp && this.type !== OTPType.hhex) {
+      this.generate();
+    }
+
+    this.encryption = encryption;
+    this.encData = "";
   }
 
   async delete() {
@@ -187,7 +252,7 @@ export class OTPEntry implements OTPEntryInterface {
   }
 
   genUUID() {
-    this.hash = uuid();
+    this.hash = crypto.randomUUID();
   }
 
   generate() {
@@ -202,7 +267,7 @@ export class OTPEntry implements OTPEntryInterface {
       });
     }
 
-    if (!this.secret && !this.encSecret) {
+    if (!this.secret && !this.encData) {
       this.code = CodeState.Invalid;
     } else if (!this.secret) {
       this.code = CodeState.Encrypted;
@@ -219,7 +284,7 @@ export class OTPEntry implements OTPEntryInterface {
         );
       } catch (error) {
         this.code = CodeState.Invalid;
-        console.log("Invalid secret.", error);
+        console.warn("Invalid secret.", error);
       }
     }
   }
diff --git a/src/models/settings.ts b/src/models/settings.ts
index ae793e76a..f40cb2e1f 100644
--- a/src/models/settings.ts
+++ b/src/models/settings.ts
@@ -153,7 +153,7 @@ export class UserSettings {
       ? StorageLocation.Local
       : storageLocation;
     const storageData: UserSettingsData =
-      (await chrome.storage[location].get("UserSettings")).UserSettings || {};
+      (await chrome.storage[location].get("UserSettings"))?.UserSettings || {};
     delete storageData[key];
 
     UserSettings.items = storageData;
@@ -163,7 +163,7 @@ export class UserSettings {
 
   private static async getStorageData(location: StorageLocation) {
     const storageData: UserSettingsData =
-      (await chrome.storage[location].get("UserSettings")).UserSettings || {};
+      (await chrome.storage[location].get("UserSettings"))?.UserSettings || {};
 
     return storageData;
   }
diff --git a/src/models/storage.ts b/src/models/storage.ts
index f359ae952..05ab77186 100644
--- a/src/models/storage.ts
+++ b/src/models/storage.ts
@@ -1,12 +1,9 @@
 import { Encryption } from "./encryption";
 import { OTPEntry, OTPType, OTPAlgorithm, CodeState } from "./otp";
-import * as uuid from "uuid/v4";
 import { StorageLocation, UserSettings } from "./settings";
-
+import { DataType } from "./otp";
 export class BrowserStorage {
-  private static async getStorageLocation(): Promise<
-    StorageLocation | undefined
-  > {
+  private static async getStorageLocation(): Promise<StorageLocation> {
     await UserSettings.updateItems();
     const managedLocation = await ManagedStorage.get<StorageLocation>(
       "storageArea"
@@ -60,7 +57,7 @@ export class BrowserStorage {
       });
     } else {
       return new Promise((resolve) => {
-        resolve(UserSettings.items.storageLocation);
+        resolve(UserSettings.items.storageLocation || StorageLocation.Sync);
         return;
       });
     }
@@ -69,9 +66,22 @@ export class BrowserStorage {
   // TODO: promise this
   static async get() {
     const storageLocation = await this.getStorageLocation();
-    const removeKey = function (items: { [key: string]: OTPStorage }): void {
+    const removeOtherData = function (items: Record<string, unknown>): void {
       delete items.key;
       delete items.LocalStorage;
+
+      for (const itemId in items) {
+        const item = items[itemId];
+
+        if (
+          item !== null &&
+          typeof item === "object" &&
+          "dataType" in item &&
+          item.dataType === "Key"
+        ) {
+          delete items[itemId];
+        }
+      }
     };
 
     let items = {} as { [key: string]: OTPStorage };
@@ -82,34 +92,39 @@ export class BrowserStorage {
       items = await chrome.storage.sync.get();
     }
 
-    removeKey(items);
+    removeOtherData(items);
 
     return items;
   }
 
-  static getKey() {
-    return new Promise(
-      (resolve: (key: { enc: string; hash: string } | null) => void) => {
-        this.getStorageLocation().then((storageLocation) => {
-          // eslint-disable-next-line @typescript-eslint/no-explicit-any
-          const callback = function (items: { [key: string]: any }): void {
-            if (typeof items.key === "object") {
-              resolve(items.key);
-            } else {
-              resolve(null);
-            }
-            return;
-          };
+  static async getKeys(): Promise<OldKey | Key[]> {
+    const storageLocation = await this.getStorageLocation();
 
-          if (storageLocation === StorageLocation.Local) {
-            chrome.storage.local.get(callback);
-          } else if (storageLocation === StorageLocation.Sync) {
-            chrome.storage.sync.get(callback);
-          }
-          return;
-        });
+    const data = (await chrome.storage[storageLocation].get()) as Record<
+      string,
+      unknown
+    >;
+
+    // Return old key first, so we know to run a migration
+    if (data && typeof data === "object" && "key" in data) {
+      if (isOldKey(data.key)) {
+        return data.key;
+      } else {
+        console.error("'key' is malformed!");
       }
-    );
+    }
+
+    const keys: Key[] = [];
+    if (data && typeof data === "object") {
+      for (const record in data) {
+        const key = data[record];
+        if (isKey(key)) {
+          keys.push(key);
+        }
+      }
+    }
+
+    return keys;
   }
 
   static async set(data: object) {
@@ -148,14 +163,47 @@ export class BrowserStorage {
   }
 }
 
+export function isOldKey(key: unknown): key is OldKey {
+  return Boolean(
+    key &&
+      typeof key === "object" &&
+      "enc" in key &&
+      "hash" in key &&
+      key.enc &&
+      key.hash &&
+      typeof key.enc === "string" &&
+      typeof key.hash === "string"
+  );
+}
+
+function isKey(key: unknown): key is Key {
+  return Boolean(
+    key &&
+      typeof key === "object" &&
+      "dataType" in key &&
+      "id" in key &&
+      "salt" in key &&
+      key.dataType === "Key" &&
+      key.id &&
+      key.salt &&
+      typeof key.id === "string" &&
+      typeof key.salt === "string"
+  );
+}
+
 export class EntryStorage {
   private static getOTPStorageFromEntry(
     entry: OTPEntry,
     unencrypted?: boolean
   ): OTPStorage {
     let secret: string;
-    if (entry.encSecret) {
-      secret = entry.encSecret;
+    if (!entry.secret && entry.encData && entry.keyId) {
+      return {
+        dataType: DataType.EncOTPStorage,
+        keyId: entry.keyId,
+        data: entry.encData,
+        index: entry.index,
+      };
     } else if (entry.secret) {
       secret = entry.secret;
     } else {
@@ -163,14 +211,14 @@ export class EntryStorage {
       console.warn("Invalid entry", entry);
     }
 
-    let encrypted = Boolean(entry.encSecret);
+    let encrypted = entry.encryption?.getEncryptionStatus() || false;
 
     if (unencrypted && entry.secret) {
       secret = entry.secret;
       encrypted = false;
     }
 
-    const storageItem: OTPStorage = {
+    const storageItem: RawOTPStorage = {
       encrypted,
       hash: entry.hash,
       index: entry.index,
@@ -206,28 +254,66 @@ export class EntryStorage {
       storageItem.algorithm = OTPAlgorithm[entry.algorithm];
     }
 
+    if (entry.encryption?.getEncryptionKeyId()) {
+      storageItem.keyId = entry.encryption.getEncryptionKeyId();
+    }
+
+    storageItem.dataType = DataType.OTPStorage;
+
+    if (
+      !unencrypted &&
+      encrypted &&
+      entry.encryption?.getEncryptionStatus() &&
+      entry.encryption.getEncryptionKeyId()
+    ) {
+      const encData = entry.encryption.getEncryptedString(
+        JSON.stringify(storageItem)
+      );
+      return {
+        dataType: DataType.EncOTPStorage,
+        data: encData,
+        keyId: entry.encryption.getEncryptionKeyId(),
+        index: entry.index,
+      };
+    } else if (encrypted) {
+      console.error("Could not encrypt malformed entry: ", entry);
+    }
+
     return storageItem;
   }
 
-  private static ensureUniqueIndex(_data: { [hash: string]: OTPStorage }) {
-    const tempEntryArray: OTPStorage[] = [];
+  private static ensureUniqueIndex(data: { [hash: string]: OTPStorage }) {
+    const tempEntryArray: [hash: string, storage: OTPStorage][] = [];
 
-    for (const hash of Object.keys(_data)) {
-      if (hash === "UserSettings" || !this.isValidEntry(_data, hash)) {
+    for (const hash of Object.keys(data)) {
+      if (
+        hash === "UserSettings" ||
+        (data[hash] as { dataType: string }).dataType === "Key" ||
+        !this.isValidEntry(data, hash)
+      ) {
         continue;
       }
-      tempEntryArray.push(_data[hash]);
+      tempEntryArray.push([hash, data[hash]]);
     }
 
     tempEntryArray.sort((a, b) => {
-      return a.index - b.index;
+      return a[1].index - b[1].index;
     });
 
-    const newData: { [hash: string]: OTPStorage } = {};
-    for (let i = 0; i < tempEntryArray.length; i++) {
-      tempEntryArray[i].index = i;
-      newData[tempEntryArray[i].hash] = tempEntryArray[i];
-    }
+    let i = 0;
+    const newData: { [hash: string]: OTPStorage } = tempEntryArray.reduce(
+      (previous: { [hash: string]: OTPStorage }, entry) => {
+        const mergedData = {
+          ...previous,
+          [entry[0]]: { ...entry[1], index: i },
+        };
+
+        i += 1;
+
+        return mergedData;
+      },
+      {}
+    );
 
     return newData;
   }
@@ -237,10 +323,7 @@ export class EntryStorage {
       return false;
     }
 
-    if (
-      !entry ||
-      !Object.prototype.hasOwnProperty.hasOwnProperty.call(entry, "secret")
-    ) {
+    if (!entry || !("secret" in entry || "data" in entry)) {
       return false;
     }
 
@@ -264,7 +347,12 @@ export class EntryStorage {
   }
 
   static async hasEncryptionKey(): Promise<boolean> {
-    return Boolean(await BrowserStorage.getKey());
+    const keys = await BrowserStorage.getKeys();
+    if (isOldKey(keys)) {
+      return true;
+    } else {
+      return keys.length !== 0;
+    }
   }
 
   static getExport(data: OTPEntryInterface[], encrypted?: boolean) {
@@ -272,24 +360,11 @@ export class EntryStorage {
       const exportData: { [hash: string]: OTPStorage } = {};
       for (const entry of data) {
         // Skip unable-decrypted data
-        if (entry.code === CodeState.Encrypted) {
+        if (entry.code === CodeState.Encrypted || !entry.secret) {
           continue;
         }
 
-        if (!encrypted) {
-          if (!entry.secret) {
-            // Not unencrypted
-          } else {
-            exportData[entry.hash] = this.getOTPStorageFromEntry(
-              entry as OTPEntry,
-              true
-            );
-          }
-        } else {
-          exportData[entry.hash] = this.getOTPStorageFromEntry(
-            entry as OTPEntry
-          );
-        }
+        exportData[entry.hash] = this.getOTPStorageFromEntry(entry, !encrypted);
       }
       return exportData;
     } catch (error) {
@@ -300,140 +375,169 @@ export class EntryStorage {
   static async backupGetExport(encryption: Encryption, encrypted?: boolean) {
     const _data = await BrowserStorage.get();
     for (const hash of Object.keys(_data)) {
-      if (hash === "UserSettings" || !this.isValidEntry(_data, hash)) {
+      if (
+        hash === "UserSettings" ||
+        (_data[hash] as { dataType: string }).dataType === "Key" ||
+        !this.isValidEntry(_data, hash)
+      ) {
         delete _data[hash];
         continue;
       }
+
+      const entry = _data[hash];
+
+      // TODO: fix this
+      if (entry.dataType === "EncOTPStorage") {
+        continue;
+      }
+
       // remove unnecessary fields
       if (
-        !(_data[hash].type === OTPType[OTPType.hotp]) &&
-        !(_data[hash].type === OTPType[OTPType.hhex])
+        !(entry.type === OTPType[OTPType.hotp]) &&
+        !(entry.type === OTPType[OTPType.hhex])
       ) {
-        delete _data[hash].counter;
+        delete entry.counter;
       }
 
-      if (_data[hash].period === 30) {
-        delete _data[hash].period;
+      if (entry.period === 30) {
+        delete entry.period;
       }
 
-      if (!_data[hash].issuer) {
-        delete _data[hash].issuer;
+      if (!entry.issuer) {
+        delete entry.issuer;
       }
 
-      if (!_data[hash].account) {
-        delete _data[hash].account;
+      if (!entry.account) {
+        delete entry.account;
       }
 
-      if (_data[hash].digits === 6) {
-        delete _data[hash].digits;
+      if (entry.digits === 6) {
+        delete entry.digits;
       }
 
-      if (_data[hash].algorithm === OTPAlgorithm[OTPAlgorithm.SHA1]) {
-        delete _data[hash].algorithm;
+      if (entry.algorithm === OTPAlgorithm[OTPAlgorithm.SHA1]) {
+        delete entry.algorithm;
       }
 
-      delete _data[hash].pinned;
+      delete entry.pinned;
 
       if (!encrypted) {
         // decrypt the data to export
-        if (_data[hash].encrypted) {
-          const decryptedSecret = encryption.getDecryptedSecret(_data[hash]);
-          if (
-            decryptedSecret !== _data[hash].secret &&
-            decryptedSecret !== null
-          ) {
-            _data[hash].secret = decryptedSecret;
-            _data[hash].encrypted = false;
+        if (entry.encrypted) {
+          const decryptedSecret = encryption.decryptSecretString(entry.secret);
+          if (decryptedSecret !== entry.secret && decryptedSecret !== null) {
+            entry.secret = decryptedSecret;
+            entry.encrypted = false;
           }
         }
         // we need correct hash
-        if (hash !== _data[hash].hash) {
-          _data[_data[hash].hash] = _data[hash];
+        if (hash !== entry.hash) {
+          _data[entry.hash] = entry;
           delete _data[hash];
         }
       }
     }
     if (encryption.getEncryptionStatus()) {
-      Object.assign(_data, { key: await BrowserStorage.getKey() });
+      const keys = await BrowserStorage.getKeys();
+      if (isOldKey(keys)) {
+        Object.assign(_data, { key: keys });
+      } else {
+        for (const key of keys) {
+          Object.assign(_data, { [key.id]: key });
+        }
+      }
     }
     return _data;
   }
 
   static async import(
     encryption: Encryption,
-    data: { [hash: string]: OTPStorage }
+    data: { [hash: string]: RawOTPStorage }
   ) {
     let _data = await BrowserStorage.get();
     for (const hash of Object.keys(data)) {
       // never trust data import from user
-      // we do not support encrypted data import any longer
+      // data must be decrypted before calling this method
       if (!data[hash].secret || data[hash].encrypted) {
-        // we need give a failed warning
+        // TODO: we need give a failed warning
         continue;
       }
 
-      data[hash].hash = data[hash].hash || hash;
-      data[hash].account = data[hash].account || "";
-      data[hash].encrypted = encryption.getEncryptionStatus();
-      data[hash].index = data[hash].index || 0;
-      data[hash].issuer = data[hash].issuer || "";
-      data[hash].type = data[hash].type || OTPType[OTPType.totp];
-      data[hash].counter = data[hash].counter || 0;
-      data[hash].digits = data[hash].digits || 6;
-      data[hash].algorithm =
-        data[hash].algorithm || OTPAlgorithm[OTPAlgorithm.SHA1];
-      data[hash].pinned = data[hash].pinned || false;
-      const period = data[hash].period;
-      if (
-        data[hash].type !== OTPType[OTPType.totp] ||
-        (period && (isNaN(period) || period <= 0))
-      ) {
-        delete data[hash].period;
+      const rawAlgorithm = data[hash].algorithm;
+      const entryData: {
+        account: string;
+        encrypted: false;
+        index: number;
+        issuer: string;
+        secret: string;
+        type: OTPType;
+        counter: number;
+        period: number;
+        hash: string;
+        digits: number;
+        algorithm: OTPAlgorithm;
+        pinned: boolean;
+      } = {
+        type: (parseInt(data[hash].type) as OTPType) || OTPType[OTPType.totp],
+        index: data[hash].index || 0,
+        issuer: data[hash].issuer || "",
+        account: data[hash].account || "",
+        encrypted: false,
+        secret: data[hash].secret,
+        counter: data[hash].counter || 0,
+        period: data[hash].period || 30,
+        digits: data[hash].digits || 6,
+        algorithm: rawAlgorithm
+          ? (parseInt(rawAlgorithm) as OTPAlgorithm)
+          : OTPAlgorithm.SHA1,
+        pinned: data[hash].pinned || false,
+        hash: data[hash].hash || hash,
+      };
+
+      if (isNaN(entryData.period) || entryData.period <= 0) {
+        entryData.period = 30;
       }
 
       // If invalid digits, then use default.
-      const digits = data[hash].digits;
-      if (digits && (digits > 10 || digits < 1)) {
-        data[hash].digits = 6;
+      if (entryData.digits > 10 || entryData.digits < 1) {
+        entryData.digits = 6;
       }
 
       // If invalid algorithm, then use default
-      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-      // @ts-ignore - it's fine if this ends up undefined
-      if (!OTPAlgorithm[data[hash].algorithm]) {
-        data[hash].algorithm = OTPAlgorithm[OTPAlgorithm.SHA1];
+      if (!OTPAlgorithm[entryData.algorithm]) {
+        entryData.algorithm = OTPAlgorithm.SHA1;
       }
 
-      if (/^(blz-|bliz-)/.test(data[hash].secret)) {
-        const secretMatches = data[hash].secret.match(/^(blz-|bliz-)(.*)/);
+      if (/^(blz-|bliz-)/.test(entryData.secret)) {
+        const secretMatches = entryData.secret.match(/^(blz-|bliz-)(.*)/);
         if (secretMatches && secretMatches.length >= 3) {
-          data[hash].secret = secretMatches[2];
-          data[hash].type = OTPType[OTPType.battle];
+          entryData.secret = secretMatches[2];
+          entryData.type = OTPType.battle;
         }
       }
 
-      if (/^stm-/.test(data[hash].secret)) {
-        const secretMatches = data[hash].secret.match(/^stm-(.*)/);
+      if (/^stm-/.test(entryData.secret)) {
+        const secretMatches = entryData.secret.match(/^stm-(.*)/);
         if (secretMatches && secretMatches.length >= 2) {
-          data[hash].secret = secretMatches[1];
-          data[hash].type = OTPType[OTPType.steam];
+          entryData.secret = secretMatches[1];
+          entryData.type = OTPType.steam;
         }
       }
 
       if (
-        !/^[a-z2-7]+=*$/i.test(data[hash].secret) &&
-        /^[0-9a-f]+$/i.test(data[hash].secret) &&
-        data[hash].type === OTPType[OTPType.totp]
+        !/^[a-z2-7]+=*$/i.test(entryData.secret) &&
+        /^[0-9a-f]+$/i.test(entryData.secret) &&
+        entryData.type === OTPType.totp
       ) {
-        data[hash].type = OTPType[OTPType.hex];
+        entryData.type = OTPType.hex;
       }
 
       if (
-        !/^[a-z2-7]+=*$/i.test(data[hash].secret) &&
-        /^[0-9a-f]+$/i.test(data[hash].secret) &&
-        data[hash].type === OTPType[OTPType.hotp]
+        !/^[a-z2-7]+=*$/i.test(entryData.secret) &&
+        /^[0-9a-f]+$/i.test(entryData.secret) &&
+        entryData.type === OTPType.hotp
       ) {
-        data[hash].type = OTPType[OTPType.hhex];
+        entryData.type = OTPType.hhex;
       }
 
       // not a valid / old hash
@@ -442,18 +546,12 @@ export class EntryStorage {
           hash
         )
       ) {
-        const _hash = await uuid();
-
-        data[_hash] = data[hash];
-        data[_hash].hash = _hash;
+        entryData.hash = crypto.randomUUID();
         delete data[hash];
-
-        data[_hash].secret = encryption.getEncryptedString(data[_hash].secret);
-        _data[_hash] = data[_hash];
-      } else {
-        data[hash].secret = encryption.getEncryptedString(data[hash].secret);
-        _data[hash] = data[hash];
       }
+
+      const entry = new OTPEntry(entryData, encryption);
+      _data[entryData.hash] = this.getOTPStorageFromEntry(entry);
     }
     _data = this.ensureUniqueIndex(_data);
     await BrowserStorage.set(_data);
@@ -491,11 +589,29 @@ export class EntryStorage {
     const data: OTPEntry[] = [];
 
     for (const hash of Object.keys(_data)) {
-      if (hash === "UserSettings" || !this.isValidEntry(_data, hash)) {
+      if (
+        hash === "UserSettings" ||
+        (_data[hash] as { dataType: string }).dataType === "Key" ||
+        !this.isValidEntry(_data, hash)
+      ) {
         continue;
       }
+
       const entryData = _data[hash];
 
+      if (entryData.dataType === "EncOTPStorage") {
+        data.push(
+          new OTPEntry({
+            encrypted: true,
+            encData: entryData.data,
+            keyId: entryData.keyId,
+            hash,
+            index: entryData.index,
+          })
+        );
+        continue;
+      }
+
       if (!entryData.hash) {
         entryData.hash = hash;
       }
@@ -540,20 +656,19 @@ export class EntryStorage {
         type,
         counter: entryData.counter,
         period,
-        digits: entryData.digits,
-        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-        // @ts-ignore - it's fine if this ends up undefined
+        digits: entryData.digits ? Number(entryData.digits) : undefined,
+        // @ts-expect-error - it's fine if this ends up undefined
         algorithm: OTPAlgorithm[entryData.algorithm],
         pinned: entryData.pinned,
       });
 
       data.push(entry);
-
-      data.sort((a, b) => {
-        return a.index - b.index;
-      });
     }
 
+    data.sort((a, b) => {
+      return a.index - b.index;
+    });
+
     return data;
   }
 
diff --git a/src/popup.ts b/src/popup.ts
index f222c3c34..173bc033e 100644
--- a/src/popup.ts
+++ b/src/popup.ts
@@ -76,7 +76,7 @@ async function init() {
   // Prompt for password if needed
   if (instance.$store.state.accounts.shouldShowPassphrase) {
     // If we have cached password, use that
-    if (instance.$store.state.accounts.encryption.getEncryptionStatus()) {
+    if (instance.$store.state.accounts.defaultEncryption) {
       instance.$store.commit("currentView/changeView", "LoadingPage");
       await instance.$store.dispatch("accounts/updateEntries");
     } else {
@@ -209,7 +209,9 @@ async function runScheduledBackup(clientTime: number, instance: Vue) {
           try {
             const dropbox = new Dropbox();
             const res = await dropbox.upload(
-              instance.$store.state.accounts.encryption
+              instance.$store.state.accounts.encryption.get(
+                instance.$store.state.accounts.defaultEncryption
+              )
             );
             if (res) {
               // we have uploaded backup to Dropbox
@@ -251,7 +253,9 @@ async function runScheduledBackup(clientTime: number, instance: Vue) {
           try {
             const drive = new Drive();
             const res = await drive.upload(
-              instance.$store.state.accounts.encryption
+              instance.$store.state.accounts.encryption.get(
+                instance.$store.state.accounts.defaultEncryption
+              )
             );
             if (res) {
               UserSettings.items.lastRemindingBackupTime = clientTime;
@@ -291,7 +295,9 @@ async function runScheduledBackup(clientTime: number, instance: Vue) {
           try {
             const onedrive = new OneDrive();
             const res = await onedrive.upload(
-              instance.$store.state.accounts.encryption
+              instance.$store.state.accounts.encryption.get(
+                instance.$store.state.accounts.defaultEncryption
+              )
             );
             if (res) {
               UserSettings.items.lastRemindingBackupTime = clientTime;
diff --git a/src/qrdebug.ts b/src/qrdebug.ts
index c0e5066a4..713c92def 100644
--- a/src/qrdebug.ts
+++ b/src/qrdebug.ts
@@ -12,6 +12,9 @@ chrome.runtime.onMessage.addListener((message, sender) => {
       message.info.windowWidth
     );
   }
+
+  // https://stackoverflow.com/a/56483156
+  return true;
 });
 
 function getQrDebug(
diff --git a/src/store/Accounts.ts b/src/store/Accounts.ts
index 22c00b1ac..c6e293047 100644
--- a/src/store/Accounts.ts
+++ b/src/store/Accounts.ts
@@ -1,4 +1,4 @@
-import { EntryStorage, BrowserStorage } from "../models/storage";
+import { EntryStorage, BrowserStorage, isOldKey } from "../models/storage";
 import { Encryption } from "../models/encryption";
 import * as CryptoJS from "crypto-js";
 import { OTPType, OTPAlgorithm } from "../models/otp";
@@ -6,11 +6,22 @@ import { ActionContext } from "vuex";
 import { getSiteName, getMatchedEntriesHash } from "../utils";
 import { isChromium } from "../browser";
 import { StorageLocation, UserSettings } from "../models/settings";
+import { DataType } from "../models/otp";
 
+const LegacyEncryption = "LegacyEncryption";
 export class Accounts implements Module {
   async getModule() {
-    const cachedPassphrase = await this.getCachedPassphrase();
-    const encryption: Encryption = new Encryption(cachedPassphrase);
+    const cachedKeyInfo = await this.getCachedKeyInfo();
+    const encryption: Map<string, EncryptionInterface> = new Map();
+    if (cachedKeyInfo.cachedKeyId) {
+      encryption.set(
+        cachedKeyInfo.cachedKeyId,
+        new Encryption(
+          cachedKeyInfo.cachedPassphrase,
+          cachedKeyInfo.cachedKeyId
+        )
+      );
+    }
     const shouldShowPassphrase = await EntryStorage.hasEncryptionKey();
     const entries = shouldShowPassphrase ? [] : await this.getEntries();
 
@@ -20,6 +31,7 @@ export class Accounts implements Module {
       state: {
         entries,
         encryption,
+        defaultEncryption: cachedKeyInfo.cachedKeyId,
         OTPType,
         OTPAlgorithm,
         shouldShowPassphrase,
@@ -31,7 +43,7 @@ export class Accounts implements Module {
         showSearch: false,
         exportData: await EntryStorage.getExport(entries),
         exportEncData: await EntryStorage.getExport(entries, true),
-        key: await BrowserStorage.getKey(),
+        keys: await BrowserStorage.getKeys(),
         wrongPassword: false,
         initComplete: false,
       },
@@ -149,15 +161,20 @@ export class Accounts implements Module {
         },
         updateEncExport(
           state: AccountsState,
-          exportData: { [k: string]: OTPEntryInterface }
-        ) {
-          state.exportEncData = exportData;
-        },
-        updateKeyExport(
-          state: AccountsState,
-          key: { enc: string; hash: string } | null
+          data: {
+            entries: { [k: string]: OTPEntryInterface };
+            keys: Key[] | OldKey;
+          }
         ) {
-          state.key = key;
+          if (isOldKey(data.keys)) {
+            return;
+          }
+
+          const keys = data.keys.reduce((prev: { [id: string]: Key }, key) => {
+            prev[key.id] = key;
+            return prev;
+          }, {});
+          state.exportEncData = { ...data.entries, ...keys };
         },
         wrongPassword(state: AccountsState) {
           state.wrongPassword = true;
@@ -168,7 +185,7 @@ export class Accounts implements Module {
       },
       actions: {
         deleteCode: async (
-          state: ActionContext<AccountsState, {}>,
+          state: ActionContext<AccountsState, object>,
           hash: string
         ) => {
           const index = state.state.entries.findIndex(
@@ -181,13 +198,13 @@ export class Accounts implements Module {
             "updateExport",
             await EntryStorage.getExport(state.state.entries)
           );
-          state.commit(
-            "updateEncExport",
-            await EntryStorage.getExport(state.state.entries, true)
-          );
+          state.commit("updateEncExport", {
+            entries: await EntryStorage.getExport(state.state.entries, true),
+            keys: await BrowserStorage.getKeys(),
+          });
         },
         addCode: async (
-          state: ActionContext<AccountsState, {}>,
+          state: ActionContext<AccountsState, object>,
           entry: OTPEntryInterface
         ) => {
           state.state.entries.unshift(entry);
@@ -195,13 +212,13 @@ export class Accounts implements Module {
             "updateExport",
             await EntryStorage.getExport(state.state.entries)
           );
-          state.commit(
-            "updateEncExport",
-            await EntryStorage.getExport(state.state.entries, true)
-          );
+          state.commit("updateEncExport", {
+            entries: await EntryStorage.getExport(state.state.entries, true),
+            keys: await BrowserStorage.getKeys(),
+          });
         },
         applyPassphrase: async (
-          state: ActionContext<AccountsState, {}>,
+          state: ActionContext<AccountsState, object>,
           password: string
         ) => {
           if (!password) {
@@ -210,180 +227,313 @@ export class Accounts implements Module {
 
           state.commit("currentView/changeView", "LoadingPage", { root: true });
 
-          const encKey = await BrowserStorage.getKey();
-          if (!encKey) {
-            // --- migrate to key
-            // verify current password
-            state.state.encryption.updateEncryptionPassword(password);
-            await state.dispatch("updateEntries");
-
-            if (state.getters.currentlyEncrypted) {
-              state.commit("style/hideInfo", true, { root: true });
-              return;
-            }
-            // gen key
-            const wordArray = CryptoJS.lib.WordArray.random(120);
-            const encKey = CryptoJS.AES.encrypt(wordArray, password).toString();
-            const encKeyHash = await new Promise(
+          // Decrypt entries
+          let saltedHash = "";
+          let migrationNeeded = false;
+          const encKeys = await BrowserStorage.getKeys();
+          if (isOldKey(encKeys)) {
+            // --- handle v2 encryption
+            // decrypt using key
+            const key = CryptoJS.AES.decrypt(encKeys.enc, password).toString();
+            const isCorrectPassword = await new Promise(
               (resolve: (value: string) => void) => {
                 const iframe = document.getElementById("argon-sandbox");
                 const message = {
-                  action: "hash",
-                  value: wordArray.toString(),
+                  action: "verify",
+                  value: key,
+                  hash: encKeys.hash,
                 };
                 if (iframe) {
                   window.addEventListener("message", (response) => {
                     resolve(response.data.response);
                   });
-                  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-                  //@ts-ignore
+                  // @ts-expect-error - bad typings
                   iframe.contentWindow.postMessage(message, "*");
                 }
               }
             );
 
-            if (!encKeyHash) {
-              state.commit("style/hideInfo", true, { root: true });
+            if (!isCorrectPassword) {
+              state.commit("wrongPassword");
+              state.commit("currentView/changeView", "EnterPasswordPage", {
+                root: true,
+              });
               return;
             }
 
-            // change entry encryption to key and remove old hash
-            const oldKeys: string[] = [];
-            for (const entry of state.state.entries) {
-              await entry.changeEncryption(
-                new Encryption(wordArray.toString())
-              );
-              oldKeys.push(entry.hash);
-              entry.genUUID();
-            }
-
-            // store key
-            await BrowserStorage.set({
-              key: { enc: encKey, hash: encKeyHash },
-            });
-            await EntryStorage.set(state.state.entries);
-            await BrowserStorage.remove(oldKeys);
+            state.state.encryption.set(
+              LegacyEncryption,
+              new Encryption(key, LegacyEncryption)
+            );
 
-            state.state.encryption.updateEncryptionPassword(
-              wordArray.toString()
+            migrationNeeded = true;
+          } else if (encKeys.length === 0) {
+            // --- handle v1 encryption
+            // verify current password
+            state.state.encryption.set(
+              LegacyEncryption,
+              new Encryption(password, LegacyEncryption)
             );
             await state.dispatch("updateEntries");
+
+            if (state.getters.currentlyEncrypted) {
+              state.commit("wrongPassword");
+              state.commit("currentView/changeView", "EnterPasswordPage", {
+                root: true,
+              });
+              return;
+            }
+
+            migrationNeeded = true;
           } else {
-            // --- decrypt using key
-            const key = CryptoJS.AES.decrypt(encKey.enc, password).toString();
-            const isCorrectPassword = await new Promise(
-              (resolve: (value: string) => void) => {
-                const iframe = document.getElementById("argon-sandbox");
-                const message = {
-                  action: "verify",
-                  value: key,
-                  hash: encKey.hash,
-                };
-                if (iframe) {
-                  window.addEventListener("message", (response) => {
-                    resolve(response.data.response);
-                  });
-                  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-                  //@ts-ignore
-                  iframe.contentWindow.postMessage(message, "*");
+            // --- handle v3 encryption
+            // TODO: let user reconcile multiple keys from sync conflicts
+            for (const key of encKeys) {
+              const rawHash = await new Promise(
+                (resolve: (value: string) => void) => {
+                  const iframe = document.getElementById("argon-sandbox");
+                  const message = {
+                    action: "hash",
+                    value: password,
+                    salt: key.salt,
+                  };
+                  if (iframe) {
+                    window.addEventListener("message", (response) => {
+                      resolve(response.data.response);
+                    });
+                    // @ts-expect-error bad typings
+                    iframe.contentWindow.postMessage(message, "*");
+                  }
                 }
+              );
+
+              // https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#format-algorithm
+              const possibleHash = rawHash.split("$")[5];
+              if (!possibleHash) {
+                throw new Error("argon2 did not return a hash!");
               }
-            );
 
-            if (!isCorrectPassword) {
+              // verify user password by comparing their password hash with the
+              // hash of their password's hash
+              const isCorrectPassword = await new Promise(
+                (resolve: (value: string) => void) => {
+                  const iframe = document.getElementById("argon-sandbox");
+                  const message = {
+                    action: "verify",
+                    value: possibleHash,
+                    hash: key.hash,
+                  };
+                  if (iframe) {
+                    window.addEventListener("message", (response) => {
+                      resolve(response.data.response);
+                    });
+                    // @ts-expect-error bad typings
+                    iframe.contentWindow.postMessage(message, "*");
+                  }
+                }
+              );
+
+              // TODO: there is a serious bug here. If two keys have the same password,
+              // then only one of them will be used for decryption.
+              if (isCorrectPassword) {
+                state.state.encryption.set(
+                  key.id,
+                  new Encryption(possibleHash, key.id)
+                );
+                state.state.defaultEncryption = key.id;
+
+                saltedHash = possibleHash;
+              }
+            }
+
+            await state.dispatch("updateEntries");
+
+            if (!saltedHash) {
               state.commit("wrongPassword");
               state.commit("currentView/changeView", "EnterPasswordPage", {
                 root: true,
               });
               return;
             }
+          }
 
-            state.state.encryption.updateEncryptionPassword(key);
-            await state.dispatch("updateEntries");
+          // Migrate from older encryption if needed
+          if (migrationNeeded) {
+            // gen hashes
+
+            // The hash of the user's password is used as the encryption key for user data.
+            const rawSaltedHash = await genHash(password);
+            // https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#format-algorithm
+            const salt = window.atob(rawSaltedHash.split("$")[4]);
+            saltedHash = rawSaltedHash.split("$")[5];
+
+            // This hash is used to verify that a user decrypted `saltedHash` correctly
+            const hashOfHash = await genHash(saltedHash);
 
-            // Encrypt any unencrypted entries.
-            // Browser sync can cause unencrypted entries to show up.
-            let needUpdateStorage = false;
+            if (!saltedHash || !hashOfHash) {
+              throw new Error("argon2 did not return a hash!");
+            }
+
+            // update entry encryption
+            const key: Key = {
+              dataType: DataType.Key,
+              id: crypto.randomUUID(),
+              salt: salt,
+              hash: hashOfHash,
+              version: 3,
+            };
+            const newEncryption = new Encryption(saltedHash, key.id);
+            state.state.encryption.set(key.id, newEncryption);
+            state.state.defaultEncryption = key.id;
+
+            const toRemove: string[] = [];
             for (const entry of state.state.entries) {
-              if (!entry.encSecret) {
-                await entry.changeEncryption(state.state.encryption);
-                needUpdateStorage = true;
+              if (!entry.secret) {
+                continue;
               }
-            }
 
-            if (needUpdateStorage) {
-              await EntryStorage.set(state.state.entries);
-              await state.dispatch("updateEntries");
+              await entry.changeEncryption(newEncryption);
+
+              // if not uuidv4 regen
+              if (
+                /[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}/i.test(
+                  entry.hash
+                )
+              ) {
+                entry.genUUID();
+                toRemove.push(entry.hash);
+              }
             }
 
-            if (!state.getters.currentlyEncrypted) {
-              chrome.runtime.sendMessage({
-                action: "cachePassphrase",
-                value: key,
-              });
+            // store key
+            await BrowserStorage.set({
+              [key.id]: key,
+            });
+            await EntryStorage.set(state.state.entries);
+            await BrowserStorage.remove(toRemove);
+            await BrowserStorage.remove("key");
+
+            await state.dispatch("updateEntries");
+          }
+
+          if (!saltedHash) {
+            throw new Error("Empty saltedHash! This should never happen.");
+          }
+
+          // Encrypt any unencrypted entries.
+          // Browser sync can cause unencrypted entries to show up.
+          let needUpdateStorage = false;
+          const defaultEncryption = state.state.encryption.get(
+            state.state.defaultEncryption
+          );
+          if (!defaultEncryption) {
+            throw new Error(
+              "defaultEncryption is empty, this should never happen!"
+            );
+          }
+          for (const entry of state.state.entries) {
+            if (
+              entry.encryption?.getEncryptionKeyId() !==
+              state.state.defaultEncryption
+            ) {
+              await entry.changeEncryption(defaultEncryption);
+              needUpdateStorage = true;
             }
           }
+
+          if (needUpdateStorage) {
+            await EntryStorage.set(state.state.entries);
+            await state.dispatch("updateEntries");
+          }
+
+          if (!state.getters.currentlyEncrypted) {
+            chrome.runtime.sendMessage({
+              action: "cachePassphrase",
+              value: saltedHash,
+              keyId: defaultEncryption.getEncryptionKeyId(),
+            });
+          }
+
           state.commit("style/hideInfo", true, { root: true });
           return;
         },
         changePassphrase: async (
-          state: ActionContext<AccountsState, {}>,
+          state: ActionContext<AccountsState, object>,
           password: string
         ) => {
           if (password) {
-            const wordArray = CryptoJS.lib.WordArray.random(120);
-            const encKey = CryptoJS.AES.encrypt(wordArray, password).toString();
-            const encKeyHash = await new Promise(
-              (resolve: (value: string) => void) => {
-                const iframe = document.getElementById("argon-sandbox");
-                const message = {
-                  action: "hash",
-                  value: wordArray.toString(),
-                };
-                if (iframe) {
-                  window.addEventListener("message", (response) => {
-                    resolve(response.data.response);
-                  });
-                  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-                  //@ts-ignore
-                  iframe.contentWindow.postMessage(message, "*");
-                }
-              }
-            );
+            // The hash of the user's password is used as the encryption key for user data.
+            const rawSaltedHash = await genHash(password);
+            // https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#format-algorithm
+            const salt = window.atob(rawSaltedHash.split("$")[4]);
+            const saltedHash = rawSaltedHash.split("$")[5];
 
-            if (!encKeyHash) {
-              return;
+            // This hash is used to verify that a user decrypted `saltedHash` correctly
+            const hashOfHash = await genHash(saltedHash);
+
+            if (!saltedHash || !hashOfHash) {
+              throw new Error("argon2 did not return a hash!");
             }
 
             // change entry encryption and regen hash
-            const removeHashes: string[] = [];
-            for (const entry of state.state.entries) {
-              await entry.changeEncryption(
-                new Encryption(wordArray.toString())
+            const removeKeys: string[] = [];
+            const keys = await BrowserStorage.getKeys();
+            if (isOldKey(keys)) {
+              throw new Error(
+                "OldKey still being used. This should never happen!"
               );
+            }
+            const key: Key = {
+              dataType: DataType.Key,
+              id: crypto.randomUUID(),
+              salt: salt,
+              hash: hashOfHash,
+              version: 3,
+            };
+
+            const linkedKeys = new Map<string, undefined>();
+            for (const entry of state.state.entries) {
+              await entry.changeEncryption(new Encryption(saltedHash, key.id));
               // if not uuidv4 regen
               if (
                 /[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}/i.test(
                   entry.hash
                 )
               ) {
-                removeHashes.push(entry.hash);
+                removeKeys.push(entry.hash);
                 entry.genUUID();
               }
+
+              if (entry.encryption?.getEncryptionKeyId()) {
+                linkedKeys.set(
+                  entry.encryption.getEncryptionKeyId(),
+                  undefined
+                );
+              }
             }
 
             // store key
             await BrowserStorage.set({
-              key: { enc: encKey, hash: encKeyHash },
+              [key.id]: key,
             });
             await EntryStorage.set(state.state.entries);
-            if (removeHashes.length) {
-              await BrowserStorage.remove(removeHashes);
+            // remove unlinked keys when there is at least one entry
+            if (state.state.entries.length !== 0) {
+              for (const storedKey of keys) {
+                if (!linkedKeys.has(storedKey.id)) {
+                  removeKeys.push(storedKey.id);
+                }
+              }
+            }
+            if (removeKeys.length) {
+              await BrowserStorage.remove(removeKeys);
             }
 
-            state.state.encryption.updateEncryptionPassword(
-              wordArray.toString()
+            state.state.encryption.set(
+              key.id,
+              new Encryption(saltedHash, key.id)
             );
+            state.state.defaultEncryption = key.id;
 
             await state.dispatch("updateEntries");
 
@@ -394,17 +544,23 @@ export class Accounts implements Module {
 
             chrome.runtime.sendMessage({
               action: "cachePassphrase",
-              value: wordArray.toString(),
+              value: saltedHash,
+              keyId: key.id,
             });
           } else {
             for (const entry of state.state.entries) {
-              await entry.changeEncryption(new Encryption(""));
+              await entry.changeEncryption(new Encryption("", ""));
             }
             await EntryStorage.set(state.state.entries);
 
-            state.state.encryption.updateEncryptionPassword("");
-
-            BrowserStorage.remove("key");
+            await BrowserStorage.remove("key");
+            const keyId = state.state.encryption
+              .get(state.state.defaultEncryption)
+              ?.getEncryptionKeyId();
+            if (keyId) {
+              await BrowserStorage.remove(keyId);
+            }
+            state.state.defaultEncryption = "";
 
             await state.dispatch("updateEntries");
 
@@ -417,12 +573,23 @@ export class Accounts implements Module {
           UserSettings.items.encodedPhrase = undefined;
           await UserSettings.removeItem("encodedPhrase");
         },
-        updateEntries: async (state: ActionContext<AccountsState, {}>) => {
+        updateEntries: async (state: ActionContext<AccountsState, object>) => {
           const entries = await this.getEntries();
 
-          if (state.state.encryption.getEncryptionStatus()) {
-            for (const entry of entries) {
-              await entry.applyEncryption(state.state.encryption as Encryption);
+          for (const entry of entries) {
+            // LegacyEncryption indicates that we need to use backwards compatibility logic
+            if (entry.encSecret) {
+              const legacyEncryption = state.state.encryption.get(
+                LegacyEncryption
+              );
+              if (legacyEncryption) {
+                await entry.applyEncryption(legacyEncryption);
+              }
+            } else if (entry.keyId) {
+              const entryEncryption = state.state.encryption.get(entry.keyId);
+              if (entryEncryption) {
+                await entry.applyEncryption(entryEncryption);
+              }
             }
           }
 
@@ -432,22 +599,21 @@ export class Accounts implements Module {
             "updateExport",
             await EntryStorage.getExport(state.state.entries)
           );
-          state.commit(
-            "updateEncExport",
-            await EntryStorage.getExport(state.state.entries, true)
-          );
-          state.commit("updateKeyExport", await BrowserStorage.getKey());
+          state.commit("updateEncExport", {
+            entries: await EntryStorage.getExport(state.state.entries, true),
+            keys: await BrowserStorage.getKeys(),
+          });
           state.commit("initComplete");
           return;
         },
-        clearFilter: (state: ActionContext<AccountsState, {}>) => {
+        clearFilter: (state: ActionContext<AccountsState, object>) => {
           state.commit("stopFilter");
           if (state.state.entries.length >= 10) {
             state.commit("showSearch");
           }
         },
         migrateStorage: async (
-          state: ActionContext<AccountsState, {}>,
+          state: ActionContext<AccountsState, object>,
           newStorageLocation: string
         ) => {
           // sync => local
@@ -480,8 +646,10 @@ export class Accounts implements Module {
             newStorageLocation === StorageLocation.Sync
           ) {
             const localData = await chrome.storage.local.get();
-            delete localData.UserSettings;
-            await chrome.storage.sync.set(localData);
+            if (localData?.UserSettings) {
+              delete localData.UserSettings;
+              await chrome.storage.sync.set(localData);
+            }
             const syncData = await chrome.storage.sync.get();
 
             // Double check if data was set
@@ -507,12 +675,13 @@ export class Accounts implements Module {
     };
   }
 
-  private async getCachedPassphrase() {
-    const { cachedPassphrase } = await chrome.storage.session.get(
-      "cachedPassphrase"
-    );
+  private async getCachedKeyInfo() {
+    const {
+      cachedPassphrase,
+      cachedKeyId,
+    } = await chrome.storage.session.get();
 
-    return cachedPassphrase;
+    return { cachedPassphrase, cachedKeyId };
   }
 
   private async getEntries() {
@@ -520,3 +689,27 @@ export class Accounts implements Module {
     return otpEntries;
   }
 }
+
+async function genHash(value: string) {
+  const randomValues = window.crypto.getRandomValues(new Uint16Array(8));
+  let salt = "";
+  for (const byte of randomValues) {
+    salt += byte.toString(16);
+  }
+
+  return new Promise((resolve: (value: string) => void) => {
+    const iframe = document.getElementById("argon-sandbox");
+    const message = {
+      action: "hash",
+      value: value,
+      salt,
+    };
+    if (iframe) {
+      window.addEventListener("message", (response) => {
+        resolve(response.data.response);
+      });
+      // @ts-expect-error bad typings
+      iframe.contentWindow.postMessage(message, "*");
+    }
+  });
+}
diff --git a/src/store/Notification.ts b/src/store/Notification.ts
index 7340f1398..c68d81290 100644
--- a/src/store/Notification.ts
+++ b/src/store/Notification.ts
@@ -29,7 +29,7 @@ export class Notification implements Module {
       },
       actions: {
         confirm: async (
-          state: ActionContext<NotificationState, {}>,
+          state: ActionContext<NotificationState, object>,
           message: string
         ) => {
           return new Promise((resolve: (value: boolean) => void) => {
@@ -46,7 +46,7 @@ export class Notification implements Module {
           });
         },
         ephermalMessage: (
-          state: ActionContext<NotificationState, {}>,
+          state: ActionContext<NotificationState, object>,
           message: string
         ) => {
           state.commit("setNotification", message);
diff --git a/src/syncTime.ts b/src/syncTime.ts
index 0f56efd8c..7e46074cc 100644
--- a/src/syncTime.ts
+++ b/src/syncTime.ts
@@ -6,8 +6,7 @@ export async function syncTimeWithGoogle() {
   return new Promise(
     (resolve: (value: string) => void, reject: (reason: Error) => void) => {
       try {
-        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
-        // @ts-ignore
+        // @ts-expect-error - these typings are wrong
         const xhr = new XMLHttpRequest({ mozAnon: true });
         xhr.open("HEAD", "https://www.google.com/generate_204");
         const xhrAbort = setTimeout(() => {
diff --git a/src/utils.ts b/src/utils.ts
index 77fe7aed7..508f06503 100644
--- a/src/utils.ts
+++ b/src/utils.ts
@@ -143,3 +143,20 @@ export async function getCurrentTab() {
   const [tab] = await chrome.tabs.query(queryOptions);
   return tab;
 }
+
+interface TabWithIdAndURL extends chrome.tabs.Tab {
+  id: number;
+  url: string;
+}
+
+export function okToInjectContentScript(
+  tab: chrome.tabs.Tab
+): tab is TabWithIdAndURL {
+  return (
+    tab.id !== undefined &&
+    tab.url !== undefined &&
+    (tab.url.startsWith("https://") ||
+      tab.url.startsWith("http://") ||
+      tab.url.startsWith("file://"))
+  );
+}
diff --git a/tsconfig.json b/tsconfig.json
index 98cfb69df..3adffa296 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,7 +1,7 @@
 {
   "compilerOptions": {
     "lib": ["ES2020.Promise", "es6", "dom"],
-    "target": "es5",
+    "target": "es6",
     "strict": true,
     "module": "es2015",
     "rootDir": "src",
@@ -16,7 +16,7 @@
     "noImplicitReturns": true,
     "pretty": true,
     "sourceMap": true,
-    "allowSyntheticDefaultImports": true
+    "allowSyntheticDefaultImports": true,
   },
   "include": [
     "src/*.ts",
diff --git a/view/import.html b/view/import.html
index 5a1ad50af..da1ffe1fb 100644
--- a/view/import.html
+++ b/view/import.html
@@ -10,6 +10,9 @@
 <body>
     <div id="import"></div>
     <script src="../dist/import.js"></script>
+    <iframe src="argon.html"
+        id="argon-sandbox"
+        style="display: none;"></iframe>
 </body>
 
 </html>
