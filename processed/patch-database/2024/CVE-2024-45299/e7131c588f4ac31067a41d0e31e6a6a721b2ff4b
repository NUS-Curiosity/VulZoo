diff --git a/frontend/projects/public/src/app/shared/event.service.ts b/frontend/projects/public/src/app/shared/event.service.ts
index 19c7b5305..6b40549fd 100644
--- a/frontend/projects/public/src/app/shared/event.service.ts
+++ b/frontend/projects/public/src/app/shared/event.service.ts
@@ -10,6 +10,7 @@ import {shareReplay} from 'rxjs/operators';
 import {EventCode} from '../model/event-code';
 import {DateValidity} from '../model/date-validity';
 import {SearchParams} from '../model/search-params';
+import { loadPreloaded } from './util';
 
 @Injectable({
   providedIn: 'root'
@@ -33,7 +34,7 @@ export class EventService {
     if (!this.eventCache[eventShortName]) {
       const preloadEvent = document.getElementById('preload-event');
       if (preloadEvent && preloadEvent.getAttribute('data-param') === eventShortName) {
-        this.eventCache[eventShortName] = of(JSON.parse(preloadEvent.textContent)).pipe(shareReplay(1));
+        this.eventCache[eventShortName] = of(loadPreloaded('preload-event')).pipe(shareReplay(1));
       } else {
         this.eventCache[eventShortName] = this.http.get<Event>(`/api/v2/public/event/${eventShortName}`).pipe(shareReplay(1));
       }
diff --git a/frontend/projects/public/src/app/shared/i18n.service.ts b/frontend/projects/public/src/app/shared/i18n.service.ts
index b8d435fce..8fd8fcac8 100644
--- a/frontend/projects/public/src/app/shared/i18n.service.ts
+++ b/frontend/projects/public/src/app/shared/i18n.service.ts
@@ -10,7 +10,7 @@ import {catchError, map, mergeMap, shareReplay, tap} from 'rxjs/operators';
 import {EventService} from './event.service';
 import {PurchaseContextType} from './purchase-context.service';
 import {PurchaseContext} from '../model/purchase-context';
-import {getFromSessionStorage, writeToSessionStorage} from './util';
+import {getFromSessionStorage, loadPreloaded, writeToSessionStorage} from './util';
 
 @Injectable({
   providedIn: 'root'
@@ -41,11 +41,11 @@ export class I18nService {
       if (this.countriesCache.empty) {
           const vatCountries = document.getElementById('preload-vat-countries');
           if (vatCountries != null && vatCountries.getAttribute('data-param') != null) {
-              this.countriesCache.countriesForVat[vatCountries.getAttribute('data-param')] = JSON.parse(vatCountries.textContent);
+              this.countriesCache.countriesForVat[vatCountries.getAttribute('data-param')] = loadPreloaded('preload-vat-countries');
           }
           const allCountries = document.getElementById('preload-countries');
           if (allCountries != null && allCountries.getAttribute('data-param') != null) {
-              this.countriesCache.allCountries[allCountries.getAttribute('data-param')] = JSON.parse(allCountries.textContent);
+              this.countriesCache.allCountries[allCountries.getAttribute('data-param')] = loadPreloaded('preload-countries');
           }
           this.countriesCache.markAsInitialized();
       }
@@ -153,7 +153,7 @@ export class CustomLoader implements TranslateLoader {
     if (!translationCache[lang]) {
       const preloadBundle = document.getElementById('preload-bundle');
       if (preloadBundle && preloadBundle.getAttribute('data-param') === lang) {
-        translationCache[lang] = of(JSON.parse(preloadBundle.textContent)).pipe(shareReplay(1));
+        translationCache[lang] = of(loadPreloaded('preload-bundle')).pipe(shareReplay(1));
       } else {
         translationCache[lang] = this.http.get(`/api/v2/public/i18n/bundle/${lang}`).pipe(shareReplay(1));
       }
diff --git a/frontend/projects/public/src/app/shared/info.service.ts b/frontend/projects/public/src/app/shared/info.service.ts
index 526ca847a..2b8734130 100644
--- a/frontend/projects/public/src/app/shared/info.service.ts
+++ b/frontend/projects/public/src/app/shared/info.service.ts
@@ -3,6 +3,7 @@ import {HttpClient} from '@angular/common/http';
 import {Observable, of} from 'rxjs';
 import {Info} from '../model/info';
 import {shareReplay} from 'rxjs/operators';
+import { loadPreloaded } from './util';
 
 @Injectable({
   providedIn: 'root'
@@ -17,7 +18,7 @@ export class InfoService {
     if (!this.infoCache) {
       const preloadInfo = document.getElementById('preload-info');
       if (preloadInfo) {
-        this.infoCache = of(JSON.parse(preloadInfo.textContent)).pipe(shareReplay(1));
+        this.infoCache = of(loadPreloaded('preload-info')).pipe(shareReplay(1));
       } else {
         this.infoCache = this.http.get<Info>('/api/v2/info').pipe(shareReplay(1));
       }
diff --git a/frontend/projects/public/src/app/shared/util.ts b/frontend/projects/public/src/app/shared/util.ts
index 8d9ca09e3..d5675feef 100644
--- a/frontend/projects/public/src/app/shared/util.ts
+++ b/frontend/projects/public/src/app/shared/util.ts
@@ -96,3 +96,14 @@ export function groupAdditionalData(data: AdditionalServiceWithData[]): GroupedA
 export interface GroupedAdditionalServiceWithData extends AdditionalServiceWithData {
   count: number;
 }
+
+// load preloaded data which are json and url encoded
+export function loadPreloaded(id: string) {
+  const preload = document.getElementById(id);
+  if (preload && preload.textContent) {
+    return JSON.parse(decodeURIComponent(preload.textContent));
+  } else {
+    return undefined;
+  }
+  
+}
diff --git a/src/main/java/alfio/controller/IndexController.java b/src/main/java/alfio/controller/IndexController.java
index 6f26d18c5..a2fde8bea 100644
--- a/src/main/java/alfio/controller/IndexController.java
+++ b/src/main/java/alfio/controller/IndexController.java
@@ -49,6 +49,7 @@
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.context.request.ServletWebRequest;
 import org.springframework.web.util.UriComponentsBuilder;
+import org.springframework.web.util.UriUtils;
 
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -333,8 +334,9 @@ private static String countriesAsJson(Json json, String preloadLang) {
     }
 
     private static Element buildScripTag(String content, String type, String id, String param) {
+        var encodedContent = UriUtils.encodeFragment(content, StandardCharsets.UTF_8);
         var e = new Element("script");
-        e.appendChild(new Text(content));
+        e.appendChild(new Text(encodedContent));
         e.setAttribute("type", type);
         e.setAttribute("id", id);
         if (param != null) {
