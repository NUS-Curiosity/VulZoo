diff --git a/pkg/endpoint/endpoint.go b/pkg/endpoint/endpoint.go
index 779d328d62c08..9fd144b78a056 100644
--- a/pkg/endpoint/endpoint.go
+++ b/pkg/endpoint/endpoint.go
@@ -506,6 +506,11 @@ func (e *Endpoint) IsHost() bool {
 	return e.isHost
 }
 
+// SetIsHost is a convenient method to create host endpoints for testing.
+func (ep *Endpoint) SetIsHost(isHost bool) {
+	ep.isHost = isHost
+}
+
 // closeBPFProgramChannel closes the channel that signals whether the endpoint
 // has had its BPF program compiled. If the channel is already closed, this is
 // a no-op.
diff --git a/pkg/endpointmanager/host.go b/pkg/endpointmanager/host.go
index 039bf5552679b..492620c1f2a5b 100644
--- a/pkg/endpointmanager/host.go
+++ b/pkg/endpointmanager/host.go
@@ -35,24 +35,31 @@ func (mgr *endpointManager) startNodeLabelsObserver(old map[string]string) {
 			return
 		}
 
-		mgr.updateHostEndpointLabels(old, ln.Labels)
-		old = ln.Labels
+		if mgr.updateHostEndpointLabels(old, ln.Labels) {
+			// Endpoint's label update logic rejects a request if any of the old labels are
+			// not present in the endpoint manager's state. So, overwrite old labels only if
+			// the update is successful to avoid node labels being outdated indefinitely (GH-29649).
+			old = ln.Labels
+		}
+
 	}, func(error) { /* Executed only when we are shutting down */ })
 }
 
-func (mgr *endpointManager) updateHostEndpointLabels(oldNodeLabels, newNodeLabels map[string]string) {
+// updateHostEndpointLabels updates the local node labels in the endpoint manager.
+// Returns true if the update is successful.
+func (mgr *endpointManager) updateHostEndpointLabels(oldNodeLabels, newNodeLabels map[string]string) bool {
 	nodeEP := mgr.GetHostEndpoint()
 	if nodeEP == nil {
 		log.Error("Host endpoint not found")
-		return
+		return false
 	}
 
-	err := nodeEP.UpdateLabelsFrom(oldNodeLabels, newNodeLabels, labels.LabelSourceK8s)
-	if err != nil {
+	if err := nodeEP.UpdateLabelsFrom(oldNodeLabels, newNodeLabels, labels.LabelSourceK8s); err != nil {
 		// An error can only occur if either the endpoint is terminating, or the
 		// old labels are not found. Both are impossible, hence there's no point
 		// in retrying.
 		log.WithError(err).Error("Unable to update host endpoint labels")
-		return
+		return false
 	}
+	return true
 }
diff --git a/pkg/endpointmanager/manager_test.go b/pkg/endpointmanager/manager_test.go
index a943b8be86887..a351a6796ea10 100644
--- a/pkg/endpointmanager/manager_test.go
+++ b/pkg/endpointmanager/manager_test.go
@@ -19,7 +19,10 @@ import (
 	"github.com/cilium/cilium/pkg/endpoint"
 	endpointid "github.com/cilium/cilium/pkg/endpoint/id"
 	"github.com/cilium/cilium/pkg/fqdn/restore"
+	"github.com/cilium/cilium/pkg/labelsfilter"
 	monitorAPI "github.com/cilium/cilium/pkg/monitor/api"
+	"github.com/cilium/cilium/pkg/node"
+	"github.com/cilium/cilium/pkg/node/types"
 	"github.com/cilium/cilium/pkg/option"
 	"github.com/cilium/cilium/pkg/policy"
 	testidentity "github.com/cilium/cilium/pkg/testutils/identity"
@@ -958,3 +961,33 @@ func TestWaitForEndpointsAtPolicyRev(t *testing.T) {
 		tt.postTestRun()
 	}
 }
+
+func TestMissingNodeLabelsUpdate(t *testing.T) {
+	// Initialize label filter config.
+	labelsfilter.ParseLabelPrefixCfg(nil, nil, "")
+	s := setupEndpointManagerSuite(t)
+	mgr := New(&dummyEpSyncher{}, nil, nil)
+	hostEPID := uint16(17)
+
+	// Initialize the local node watcher before the host endpoint is created.
+	// These labels are not propagated to the endpoint manager.
+	mgr.localNodeStore = node.NewTestLocalNodeStore(node.LocalNode{Node: types.Node{}})
+	mgr.startNodeLabelsObserver(nil)
+	mgr.localNodeStore.Update(func(ln *node.LocalNode) { ln.Labels = map[string]string{"k1": "v1"} })
+	_, ok := mgr.endpoints[hostEPID]
+	require.EqualValues(t, ok, false)
+
+	// Create host endpoint and expose it in the endpoint manager.
+	ep := endpoint.NewTestEndpointWithState(t, s, s, testipcache.NewMockIPCache(), &endpoint.FakeEndpointProxy{}, testidentity.NewMockIdentityAllocator(nil), 1, endpoint.StateReady)
+	ep.SetIsHost(true)
+	ep.ID = hostEPID
+	require.Nil(t, mgr.expose(ep))
+
+	// Update node labels and verify that the node labels are updated correctly even if the old
+	// labels {k1=v1} are not present in the endpoint manager's state.
+	mgr.localNodeStore.Update(func(ln *node.LocalNode) { ln.Labels = map[string]string{"k2": "v2"} })
+	hostEP, ok := mgr.endpoints[hostEPID]
+	require.EqualValues(t, ok, true)
+	got := hostEP.OpLabels.IdentityLabels().K8sStringMap()
+	require.EqualValues(t, map[string]string{"k2": "v2"}, got)
+}
