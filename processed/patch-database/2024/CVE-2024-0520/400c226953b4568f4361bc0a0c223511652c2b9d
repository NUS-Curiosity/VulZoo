diff --git a/mlflow/data/http_dataset_source.py b/mlflow/data/http_dataset_source.py
index cd87b3d1b3ac0..9492f9888d8ff 100644
--- a/mlflow/data/http_dataset_source.py
+++ b/mlflow/data/http_dataset_source.py
@@ -11,6 +11,14 @@
 from mlflow.utils.rest_utils import augmented_raise_for_status, cloud_storage_http_request
 
 
+def _is_path(filename: str) -> bool:
+    """
+    Return True if `filename` is a path, False otherwise. For example,
+    "foo/bar" is a path, but "bar" is not.
+    """
+    return os.path.basename(filename) != filename
+
+
 class HTTPDatasetSource(DatasetSource):
     """
     Represents the source of a dataset stored at a web location and referred to
@@ -57,6 +65,11 @@ def load(self, dst_path=None) -> str:
         ):
             # NB: If the filename is quoted, unquote it
             basename = file_name[1].strip("'\"")
+            if _is_path(basename):
+                raise MlflowException.invalid_parameter_value(
+                    f"Invalid filename in Content-Disposition header: {basename}. "
+                    "It must be a file name, not a path."
+                )
         elif path is not None and len(posixpath.basename(path)) > 0:
             basename = posixpath.basename(path)
         else:
diff --git a/tests/data/test_http_dataset_source.py b/tests/data/test_http_dataset_source.py
index 77c33001b588f..b7b4a14dbd622 100644
--- a/tests/data/test_http_dataset_source.py
+++ b/tests/data/test_http_dataset_source.py
@@ -128,3 +128,30 @@ def download_with_mock_content_disposition_headers(*args, **kwargs):
         loaded = source.load()
         assert os.path.exists(loaded)
         assert os.path.basename(loaded) == expected_filename
+
+
+@pytest.mark.parametrize(
+    "filename",
+    [
+        "/foo/bar.txt",
+        "./foo/bar.txt",
+        "../foo/bar.txt",
+        "foo/bar.txt",
+    ],
+)
+def test_source_load_with_content_disposition_header_invalid_filename(filename):
+    def download_with_mock_content_disposition_headers(*args, **kwargs):
+        response = cloud_storage_http_request(*args, **kwargs)
+        response.headers["Content-Disposition"] = f"attachment; filename={filename}"
+        return response
+
+    with mock.patch(
+        "mlflow.data.http_dataset_source.cloud_storage_http_request",
+        side_effect=download_with_mock_content_disposition_headers,
+    ):
+        source = HTTPDatasetSource(
+            "https://raw.githubusercontent.com/mlflow/mlflow/master/tests/datasets/winequality-red.csv"
+        )
+
+        with pytest.raises(MlflowException, match="Invalid filename in Content-Disposition header"):
+            source.load()
