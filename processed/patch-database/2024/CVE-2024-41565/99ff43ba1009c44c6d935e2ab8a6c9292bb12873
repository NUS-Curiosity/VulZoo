diff --git a/Common/src/main/java/mezz/jei/common/transfer/RecipeTransferUtil.java b/Common/src/main/java/mezz/jei/common/transfer/RecipeTransferUtil.java
index f4a469baa..b273b7c1f 100644
--- a/Common/src/main/java/mezz/jei/common/transfer/RecipeTransferUtil.java
+++ b/Common/src/main/java/mezz/jei/common/transfer/RecipeTransferUtil.java
@@ -102,7 +102,7 @@ public static boolean validateSlots(
 				.toList();
 			if (!invalidRecipeIndexes.isEmpty()) {
 				LOGGER.error(
-					"Transfer handler has invalid slots for the destination of the recipe,  the slots are not included in the list of crafting slots. {}",
+					"Transfer request has invalid slots for the destination of the recipe,  the slots are not included in the list of crafting slots. {}",
 					StringUtil.intsToString(invalidRecipeIndexes)
 				);
 				return false;
@@ -118,7 +118,7 @@ public static boolean validateSlots(
 				.toList();
 			if (!invalidInventorySlotIndexes.isEmpty()) {
 				LOGGER.error(
-					"Transfer handler has invalid source slots for the inventory stacks for the recipe, the slots are not included in the list of inventory slots or recipe slots. {}\n inventory slots: {}\n crafting slots: {}",
+					"Transfer request has invalid source slots for the inventory stacks for the recipe, the slots are not included in the list of inventory slots or recipe slots. {}\n inventory slots: {}\n crafting slots: {}",
 					StringUtil.intsToString(invalidInventorySlotIndexes),
 					StringUtil.intsToString(inventorySlotIndexes),
 					StringUtil.intsToString(craftingSlotIndexes)
@@ -134,7 +134,7 @@ public static boolean validateSlots(
 				.collect(Collectors.toSet());
 			if (!overlappingSlots.isEmpty()) {
 				LOGGER.error(
-					"Transfer handler has invalid slots, inventorySlots and craftingSlots should not share any slot, but both have: {}",
+					"Transfer request has invalid slots, inventorySlots and craftingSlots should not share any slot, but both have: {}",
 					StringUtil.intsToString(overlappingSlots)
 				);
 				return false;
@@ -153,13 +153,31 @@ public static boolean validateSlots(
 				.toList();
 			if (!invalidPickupSlots.isEmpty()) {
 				LOGGER.error(
-					"Transfer handler has invalid slots, the player is unable to pickup from them: {}",
+					"Transfer request has invalid slots, the player is unable to pickup from them: {}",
 					StringUtil.intsToString(invalidPickupSlots)
 				);
 				return false;
 			}
 		}
 
+		// check that all slots are real (not output slots)
+		{
+			List<Integer> invalidFakeSlots = Stream.concat(
+					craftingSlots.stream(),
+					inventorySlots.stream()
+				)
+				.filter(Slot::isFake)
+				.map(slot -> slot.index)
+				.toList();
+			if (!invalidFakeSlots.isEmpty()) {
+				LOGGER.error(
+					"Transfer request has invalid slots, they are fake slots (recipe outputs): {}",
+					StringUtil.intsToString(invalidFakeSlots)
+				);
+				return false;
+			}
+		}
+
 		return true;
 	}
 
diff --git a/Library/src/main/java/mezz/jei/library/transfer/BasicRecipeTransferHandler.java b/Library/src/main/java/mezz/jei/library/transfer/BasicRecipeTransferHandler.java
index 6b7d7d016..73ac0296e 100644
--- a/Library/src/main/java/mezz/jei/library/transfer/BasicRecipeTransferHandler.java
+++ b/Library/src/main/java/mezz/jei/library/transfer/BasicRecipeTransferHandler.java
@@ -119,10 +119,8 @@ public IRecipeTransferError transferRecipe(C container, R recipe, IRecipeSlotsVi
 			return handlerHelper.createUserErrorForMissingSlots(message, transferOperations.missingItems);
 		}
 
-		{
-			if (!RecipeTransferUtil.validateSlots(player, transferOperations.results, craftingSlots, inventorySlots)) {
-				return handlerHelper.createInternalError();
-			}
+		if (!RecipeTransferUtil.validateSlots(player, transferOperations.results, craftingSlots, inventorySlots)) {
+			return handlerHelper.createInternalError();
 		}
 
 		if (doTransfer) {
@@ -146,6 +144,24 @@ public static <C extends AbstractContainerMenu, R> boolean validateTransferInfo(
 		List<Slot> craftingSlots,
 		List<Slot> inventorySlots
 	) {
+		for (Slot slot : craftingSlots) {
+			if (slot.isFake()) {
+				LOGGER.error("Recipe Transfer helper {} does not work for container {}. " +
+						"The Recipe Transfer Helper references crafting slot index [{}] but it is a fake (output) slot, which is not allowed.",
+					transferInfo.getClass(), container.getClass(), slot.index
+				);
+				return false;
+			}
+		}
+		for (Slot slot : inventorySlots) {
+			if (slot.isFake()) {
+				LOGGER.error("Recipe Transfer helper {} does not work for container {}. " +
+						"The Recipe Transfer Helper references inventory slot index [{}] but it is a fake (output) slot, which is not allowed.",
+					transferInfo.getClass(), container.getClass(), slot.index
+				);
+				return false;
+			}
+		}
 		Collection<Integer> craftingSlotIndexes = slotIndexes(craftingSlots);
 		Collection<Integer> inventorySlotIndexes = slotIndexes(inventorySlots);
 		Collection<Integer> containerSlotIndexes = slotIndexes(container.slots);
