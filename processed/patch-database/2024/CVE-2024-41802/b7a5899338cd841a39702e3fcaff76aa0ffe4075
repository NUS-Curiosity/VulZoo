diff --git a/lib/Controller/DataSet.php b/lib/Controller/DataSet.php
index f78de2bb39..7a69b100cc 100644
--- a/lib/Controller/DataSet.php
+++ b/lib/Controller/DataSet.php
@@ -1067,15 +1067,23 @@ public function importJson($dataSetId)
 
                     // Build a filter to select existing records
                     $filter = '';
+                    $params = [];
+                    $i = 0;
                     foreach ($data['uniqueKeys'] as $uniqueKey) {
                         if (isset($sanitizedRow[$uniqueKey])) {
-                            $filter .= 'AND `' . $uniqueKey . '` = \'' . $sanitizedRow[$uniqueKey] . '\' ';
+                            $i++;
+                            $filter .= 'AND `' . $uniqueKey . '` = :uniqueKey_' . $i;
+                            $params['uniqueKey_' . $i] = $sanitizedRow[$uniqueKey];
                         }
                     }
                     $filter = trim($filter, 'AND');
 
                     // Use the unique keys to look up this row and see if it exists
-                    $existingRows = $dataSet->getData(['filter' => $filter], ['includeFormulaColumns' => false, 'requireTotal' => false]);
+                    $existingRows = $dataSet->getData(
+                        ['filter' => $filter],
+                        ['includeFormulaColumns' => false, 'requireTotal' => false],
+                        $params
+                    );
 
                     if (count($existingRows) > 0) {
                         foreach ($existingRows as $existingRow) {
diff --git a/lib/Controller/DataSetData.php b/lib/Controller/DataSetData.php
index 27e257f9f2..593683a10f 100644
--- a/lib/Controller/DataSetData.php
+++ b/lib/Controller/DataSetData.php
@@ -112,11 +112,15 @@ public function grid($dataSetId)
 
         // Filter criteria
         $filter = '';
+        $params = [];
+        $i = 0;
         foreach ($dataSet->getColumn() as $column) {
             /* @var \Xibo\Entity\DataSetColumn $column */
             if ($column->dataSetColumnTypeId == 1) {
+                $i++;
                 if ($this->getSanitizer()->getString($column->heading) != null) {
-                    $filter .= 'AND ' . $column->heading . ' LIKE \'%' . $this->getSanitizer()->getString($column->heading) . '%\' ';
+                    $filter .= 'AND `' . $column->heading . '` LIKE :heading_' . $i;
+                    $params['heading_' . $i] = '%' . $this->getSanitizer()->getString($column->heading) . '%';
                 }
             }
         }
@@ -126,12 +130,16 @@ public function grid($dataSetId)
         $filter = $this->gridRenderFilter(['filter' => $this->getSanitizer()->getParam('filter', $filter)]);
 
         try {
-            $data = $dataSet->getData([
-                'order' => $sorting,
-                'start' => $filter['start'],
-                'size' => $filter['length'],
-                'filter' => $filter['filter']
-            ]);
+            $data = $dataSet->getData(
+                [
+                    'order' => $sorting,
+                    'start' => $filter['start'],
+                    'size' => $filter['length'],
+                    'filter' => $filter['filter']
+                ],
+                [],
+                $params
+            );
         } catch (\Exception $e) {
             $data = ['exception' => __('Error getting DataSet data, failed with following message: ') . $e->getMessage()];
             $this->getLog()->error('Error getting DataSet data, failed with following message: ' . $e->getMessage());
diff --git a/lib/Entity/DataSet.php b/lib/Entity/DataSet.php
index 1bdfbc5bae..ca17526c31 100644
--- a/lib/Entity/DataSet.php
+++ b/lib/Entity/DataSet.php
@@ -387,10 +387,11 @@ public function getUniqueColumnValues($columns)
      * Get DataSet Data
      * @param array $filterBy
      * @param array $options
+     * @param array $extraParams Extra params to apply to the final query
      * @return array
      * @throws NotFoundException
      */
-    public function getData($filterBy = [], $options = [])
+    public function getData($filterBy = [], $options = [], $extraParams = [])
     {
         $start = $this->sanitizer->getInt('start', 0, $filterBy);
         $size = $this->sanitizer->getInt('size', 0, $filterBy);
@@ -403,8 +404,8 @@ public function getData($filterBy = [], $options = [])
             'requireTotal' => true
         ], $options);
 
-        // Params
-        $params = [];
+        // Params (start from extraParams supplied)
+        $params = $extraParams;
 
         // Sanitize the filter options provided
         // Get the Latitude and Longitude ( might be used in a formula )
@@ -1003,15 +1004,22 @@ public function addRow($row)
         $this->lastDataEdit = time();
 
         // Build a query to insert
+        $params = [];
         $keys = array_keys($row);
-        $keys[] = 'id';
 
-        $values = array_values($row);
-        $values[] = NULL;
+        $sql = 'INSERT INTO `dataset_' . $this->dataSetId
+            . '` (`' . implode('`, `', $keys) . '`) VALUES (';
 
-        $sql = 'INSERT INTO `dataset_' . $this->dataSetId . '` (`' . implode('`, `', $keys) . '`) VALUES (' . implode(',', array_fill(0, count($values), '?')) . ')';
+        $i = 0;
+        foreach ($row as $value) {
+            $i++;
+            $sql .= ':value' . $i . ',';
+            $params['value' . $i] = $value;
+        }
+        $sql = rtrim($sql, ',');
+        $sql .= ')';
 
-        return $this->getStore()->insert($sql, $values);
+        return $this->getStore()->insert($sql, $params);
     }
 
     /**
