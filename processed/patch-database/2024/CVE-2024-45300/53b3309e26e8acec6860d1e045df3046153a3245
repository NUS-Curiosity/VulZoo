diff --git a/src/main/java/alfio/controller/api/v2/user/EventApiV2Controller.java b/src/main/java/alfio/controller/api/v2/user/EventApiV2Controller.java
index 73613261b..6241d69bb 100644
--- a/src/main/java/alfio/controller/api/v2/user/EventApiV2Controller.java
+++ b/src/main/java/alfio/controller/api/v2/user/EventApiV2Controller.java
@@ -163,7 +163,7 @@ public ResponseEntity<ItemsByCategory> getTicketCategories(@PathVariable String
                     if (specialCode.isPresent()) {
                         maxTickets = Math.min(1, maxTickets);
                     } else if (filteredPromoCode != null && filteredPromoCode.getMaxUsage() != null) {
-                        maxTickets = filteredPromoCode.getMaxUsage() - promoCodeRepository.countConfirmedPromoCode(filteredPromoCode.getId(), categoriesOrNull(filteredPromoCode), null, categoriesOrNull(filteredPromoCode) != null ? "X" : null);
+                        maxTickets = filteredPromoCode.getMaxUsage() - promoCodeRepository.countConfirmedPromoCode(filteredPromoCode.getId());
                     }
                     return new SaleableTicketCategory(category,
                         now, event, ticketReservationManager.countAvailableTickets(event, category), maxTickets,
diff --git a/src/main/java/alfio/manager/NotificationManager.java b/src/main/java/alfio/manager/NotificationManager.java
index 8f534a2c1..2443c6d02 100644
--- a/src/main/java/alfio/manager/NotificationManager.java
+++ b/src/main/java/alfio/manager/NotificationManager.java
@@ -346,6 +346,11 @@ public void sendSimpleEmail(PurchaseContext purchaseContext, String reservationI
 
     public void sendSimpleEmail(PurchaseContext purchaseContext, String reservationId, String recipient, List<String> cc, String subject, TemplateGenerator textBuilder, List<Mailer.Attachment> attachments) {
 
+        if (recipient == null) {
+            log.warn("No recipient provided, mail for reservation id {} with subject {} will be ignored", reservationId, subject);
+            return;
+        }
+
         String encodedAttachments = attachments.isEmpty() ? null : encodeAttachments(attachments.toArray(new Mailer.Attachment[0]));
         String encodedCC = Json.toJson(cc);
 
diff --git a/src/main/java/alfio/manager/PromoCodeRequestManager.java b/src/main/java/alfio/manager/PromoCodeRequestManager.java
index 639b683f4..15750aa7f 100644
--- a/src/main/java/alfio/manager/PromoCodeRequestManager.java
+++ b/src/main/java/alfio/manager/PromoCodeRequestManager.java
@@ -184,7 +184,7 @@ private PromoCodeType checkPromoCodeType(int eventId, String trimmedCode) {
     }
 
     private boolean isDiscountCodeUsageExceeded(PromoCodeDiscount discount) {
-        return discount.getMaxUsage() != null && discount.getMaxUsage() <= promoCodeRepository.countConfirmedPromoCode(discount.getId(), categoriesOrNull(discount), null, categoriesOrNull(discount) != null ? "X" : null);
+        return discount.getMaxUsage() != null && discount.getMaxUsage() <= promoCodeRepository.countConfirmedPromoCode(discount.getId());
     }
 
     private Pair<Optional<String>, BindingResult> makeSimpleReservation(Event event,
@@ -228,7 +228,7 @@ public int countUsage(int promoCodeId) {
         if(code.isEmpty()) {
             return 0;
         }
-        return promoCodeRepository.countConfirmedPromoCode(promoCodeId, categoriesOrNull(code.get()), null, categoriesOrNull(code.get()) != null ? "X" : null);
+        return promoCodeRepository.countConfirmedPromoCode(promoCodeId);
     }
 
     public List<PromoCodeUsageResult> retrieveDetailedUsage(int promoCodeId, Integer eventId) {
diff --git a/src/main/java/alfio/manager/TicketReservationManager.java b/src/main/java/alfio/manager/TicketReservationManager.java
index 8974391cb..89ebc7dc5 100644
--- a/src/main/java/alfio/manager/TicketReservationManager.java
+++ b/src/main/java/alfio/manager/TicketReservationManager.java
@@ -85,6 +85,7 @@
 import org.springframework.transaction.support.TransactionSynchronizationManager;
 import org.springframework.transaction.support.TransactionTemplate;
 import org.springframework.util.Assert;
+import org.springframework.util.CollectionUtils;
 import org.springframework.validation.BindingResult;
 
 import java.math.BigDecimal;
@@ -326,6 +327,17 @@ public String createTicketReservation(Event event,
 
         Optional<PromoCodeDiscount> dynamicDiscount = createDynamicPromoCode(discount, event, list, reservationId);
 
+        discount.ifPresent(d -> {
+            if (d.getMaxUsage() != null) {
+                promoCodeDiscountRepository.lockForCount(d.getId());
+                var discountedCategories = d.getCategories();
+                var appliedDiscountCount = CollectionUtils.isEmpty(discountedCategories) ? list.size() : list.stream().filter(t -> discountedCategories.contains(t.getTicketCategoryId())).count();
+                if (d.getMaxUsage() < promoCodeDiscountRepository.countUsedPromoCode(d.getId()) + appliedDiscountCount) {
+                    throw new TooManyTicketsForDiscountCodeException();
+                }
+            }
+        });
+
         ticketReservationRepository.createNewReservation(reservationId,
             event.now(clockProvider),
             reservationExpiration, dynamicDiscount.or(() -> discount).map(PromoCodeDiscount::getId).orElse(null),
@@ -707,12 +719,12 @@ private boolean isDiscountCodeUsageExceeded(String reservationId) {
         TicketReservation reservation = ticketReservationRepository.findReservationById(reservationId);
         if(reservation.getPromoCodeDiscountId() != null) {
             final PromoCodeDiscount promoCode = promoCodeDiscountRepository.findById(reservation.getPromoCodeDiscountId());
-            if(promoCode.getMaxUsage() == null) {
+            if (promoCode.getMaxUsage() == null) {
                 return false;
             }
             int currentTickets = ticketReservationRepository.countTicketsInReservationForCategories(reservationId, categoriesOrNull(promoCode));
             return Boolean.TRUE.equals(serializedTransactionTemplate.execute(status -> {
-                Integer confirmedPromoCode = promoCodeDiscountRepository.countConfirmedPromoCode(promoCode.getId(), categoriesOrNull(promoCode), reservationId, categoriesOrNull(promoCode) != null ? "X" : null);
+                Integer confirmedPromoCode = promoCodeDiscountRepository.countConfirmedPromoCode(promoCode.getId());
                 return promoCode.getMaxUsage() < currentTickets + confirmedPromoCode;
             }));
         }
diff --git a/src/main/java/alfio/repository/PromoCodeDiscountRepository.java b/src/main/java/alfio/repository/PromoCodeDiscountRepository.java
index 6febb0b86..666832d8e 100644
--- a/src/main/java/alfio/repository/PromoCodeDiscountRepository.java
+++ b/src/main/java/alfio/repository/PromoCodeDiscountRepository.java
@@ -23,7 +23,6 @@
 import ch.digitalfondue.npjt.QueryRepository;
 
 import java.time.ZonedDateTime;
-import java.util.Collection;
 import java.util.List;
 import java.util.Optional;
 
@@ -106,12 +105,12 @@ int addPromoCodeIfNotExists(@Bind("promoCode") String promoCode,
     @Query("select count(*) from promo_code where event_id_fk = :eventId or (event_id_fk is null and organization_id_fk = :organizationId)")
     Integer countByEventAndOrganizationId(@Bind("eventId") int eventId, @Bind("organizationId") int organizationId);
 
-    @Query("""
-        select count(b.id) from tickets_reservation a, ticket b\
-         where (:currentId is null or a.id <> :currentId) and a.status in ('OFFLINE_PAYMENT', 'DEFERRED_OFFLINE_PAYMENT', 'COMPLETE', 'STUCK') and a.promo_code_id_fk = :id\
-         and b.tickets_reservation_id = a.id and (:categoriesJson is null or b.category_id in (:categories))\
-        """)
-    Integer countConfirmedPromoCode(@Bind("id") int id, @Bind("categories") Collection<Integer> categories, @Bind("currentId") String currentReservationId, @Bind("categoriesJson") String categoriesJson);
+
+    @Query("select promo_code_use from promocode_count where promo_code_id = :id")
+    Integer countConfirmedPromoCode(@Bind("id") int id);
+
+    @Query("select promo_code_use from promocode_count_all where promo_code_id = :id")
+    Integer countUsedPromoCode(@Bind("id") int id);
 
     @Query("update promo_code set valid_to = :end where id = :id")
     int updateEventPromoCodeEnd(@Bind("id") int id, @Bind("end") ZonedDateTime end);
@@ -135,4 +134,7 @@ int updateEventPromoCode(@Bind("id") int id,
         """)
     List<PromoCodeUsageResult> findDetailedUsage(@Bind("promoCode") String promoCode,
                                                  @Bind("eventId") Integer eventId);
+
+    @Query("select id from promo_code where id = :id for update")
+    Integer lockForCount(@Bind("id") int id);
 }
diff --git a/src/main/resources/alfio/db/PGSQL/afterMigrate__018_VIEW_promocode_count.sql b/src/main/resources/alfio/db/PGSQL/afterMigrate__018_VIEW_promocode_count.sql
new file mode 100644
index 000000000..38acf79b5
--- /dev/null
+++ b/src/main/resources/alfio/db/PGSQL/afterMigrate__018_VIEW_promocode_count.sql
@@ -0,0 +1,64 @@
+--
+-- This file is part of alf.io.
+--
+-- alf.io is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- alf.io is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+drop view if exists promocode_count;
+
+create view promocode_count as (
+select id as promo_code_id, promo_code, coalesce(promo_code_use,0) as promo_code_use
+from (
+    select id, promo_code from promo_code pc
+) as pc_data
+left join (
+    select pc.id promo_code_id, count(*) as promo_code_use from tickets_reservation tr
+    inner join promo_code pc on tr.promo_code_id_fk = pc.id
+    left join ticket on ticket.tickets_reservation_id = tr.id
+    where tr.status in ('OFFLINE_PAYMENT', 'DEFERRED_OFFLINE_PAYMENT', 'COMPLETE', 'STUCK')
+    and (
+        -- is not assigned to category?
+        pc.categories is null or json_array_length(pc.categories::json) = 0 or
+        -- v category_id is inside pc.categories?
+        ((pc.categories::jsonb) @> ((ticket.category_id::text)::jsonb))
+    ) group by pc.id
+) as count_data on pc_data.id = count_data.promo_code_id
+);
+
+
+
+drop view if exists promocode_count_all;
+
+create view promocode_count_all as (
+select id as promo_code_id, promo_code, coalesce(promo_code_use,0) as promo_code_use
+from (
+    select id, promo_code from promo_code pc
+) as pc_data
+left join (
+    select pc.id promo_code_id, count(*) as promo_code_use
+    from tickets_reservation tr
+    inner join promo_code pc on tr.promo_code_id_fk = pc.id
+    left join ticket on ticket.tickets_reservation_id = tr.id
+    where tr.status <> 'CANCELLED'
+    and (
+        -- is not assigned to category?
+        pc.categories is null or json_array_length(pc.categories::json) = 0 or
+        -- v category_id is inside pc.categories?
+        ((pc.categories::jsonb) @> ((ticket.category_id::text)::jsonb))
+    )
+    group by pc.id
+) as count_data on pc_data.id = count_data.promo_code_id
+);
+
+
diff --git a/src/test/java/alfio/manager/DiscountIntegrationTest.java b/src/test/java/alfio/manager/DiscountIntegrationTest.java
new file mode 100644
index 000000000..eee222ca2
--- /dev/null
+++ b/src/test/java/alfio/manager/DiscountIntegrationTest.java
@@ -0,0 +1,190 @@
+package alfio.manager;
+
+import alfio.TestConfiguration;
+import alfio.config.DataSourceConfiguration;
+import alfio.config.Initializer;
+import alfio.controller.form.ReservationForm;
+import alfio.manager.payment.PaymentSpecification;
+import alfio.manager.user.UserManager;
+import alfio.model.*;
+import alfio.model.metadata.AlfioMetadata;
+import alfio.model.modification.DateTimeModification;
+import alfio.model.modification.TicketCategoryModification;
+import alfio.model.modification.TicketReservationModification;
+import alfio.model.modification.TicketReservationWithOptionalCodeModification;
+import alfio.model.transaction.PaymentMethod;
+import alfio.model.transaction.PaymentProxy;
+import alfio.repository.EventRepository;
+import alfio.repository.PromoCodeDiscountRepository;
+import alfio.repository.TicketCategoryRepository;
+import alfio.repository.system.ConfigurationRepository;
+import alfio.repository.user.OrganizationRepository;
+import alfio.test.util.AlfioIntegrationTest;
+import alfio.test.util.IntegrationTestUtil;
+import alfio.util.BaseIntegrationTest;
+import alfio.util.ClockProvider;
+import org.apache.commons.lang3.time.DateUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
+
+import java.math.BigDecimal;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.ZonedDateTime;
+import java.util.*;
+import java.util.concurrent.CountDownLatch;
+
+import static alfio.model.PromoCodeDiscount.categoriesOrNull;
+import static alfio.test.util.IntegrationTestUtil.*;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+@AlfioIntegrationTest
+@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})
+@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})
+class DiscountIntegrationTest extends BaseIntegrationTest {
+
+
+    @Autowired
+    private ConfigurationRepository configurationRepository;
+    @Autowired
+    private UserManager userManager;
+    @Autowired
+    private OrganizationRepository organizationRepository;
+    @Autowired
+    private EventManager eventManager;
+
+    @Autowired
+    private EventRepository eventRepository;
+
+    @Autowired
+    private TicketCategoryRepository ticketCategoryRepository;
+
+    @Autowired
+    private TicketReservationManager ticketReservationManager;
+
+    @Autowired
+    private ClockProvider clockProvider;
+
+    @Autowired
+    private PromoCodeDiscountRepository promoCodeDiscountRepository;
+
+    private static final Logger log = LoggerFactory.getLogger(DiscountIntegrationTest.class);
+
+    @Test
+    void checkConcurrency() throws InterruptedException {
+
+        int concurrencyCount = 4;
+
+        var startSignal = new CountDownLatch(concurrencyCount);
+        var countdownLatchBeforePerformPayment = new CountDownLatch(concurrencyCount);
+        var countdownLatchBeforeComplete = new CountDownLatch(concurrencyCount);
+        var doneSignal = new CountDownLatch(concurrencyCount);
+
+
+        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);
+        List<TicketCategoryModification> categories = List.of(
+            new TicketCategoryModification(null, "default", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,
+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).minusDays(1), LocalTime.now(ClockProvider.clock())),
+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),
+                DESCRIPTION, BigDecimal.TEN, false,
+                "", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty())
+        );
+        Pair<Event, String> eventAndUser = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);
+
+        var event = eventAndUser.getLeft();
+
+        TicketCategory category = ticketCategoryRepository.findAllTicketCategories(event.getId()).get(0);
+
+        String promoCode = "100_PROMO";
+
+        eventManager.addPromoCode(promoCode,
+            event.getId(), null,
+            ZonedDateTime.now(clockProvider.getClock()).minusDays(2),
+            event.getEnd().plusDays(2),
+            50, PromoCodeDiscount.DiscountType.PERCENTAGE, List.of(category.getId()),
+            1, "100% discount",
+            "test@test.ch",
+            PromoCodeDiscount.CodeType.DISCOUNT,
+            null,
+            null);
+
+        var promoCodeDiscount = promoCodeDiscountRepository.findAllInEvent(event.getId()).get(0);
+
+
+        for (int i = 0; i < concurrencyCount; i++) {
+            Runnable runnable = () -> {
+                try {
+                    var form = new ReservationForm();
+                    var ticketReservation = new TicketReservationModification();
+                    ticketReservation.setQuantity(2);
+                    ticketReservation.setTicketCategoryId(category.getId());
+                    form.setReservation(Collections.singletonList(ticketReservation));
+                    form.setPromoCode(promoCode);
+
+                    TicketReservationModification tr = new TicketReservationModification();
+                    tr.setQuantity(1);
+                    tr.setTicketCategoryId(category.getId());
+                    TicketReservationWithOptionalCodeModification mod = new TicketReservationWithOptionalCodeModification(tr, Optional.empty());
+                    startSignal.countDown();
+                    startSignal.await();
+
+                    String reservationId = null;
+                    try {
+                        reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(mod), Collections.emptyList(),
+                            DateUtils.addDays(new Date(), 1),
+                            Optional.of(promoCode),
+                            Locale.ENGLISH,
+                            false,
+                            null);
+
+
+                    } catch (Throwable t) {
+
+                    } finally {
+                        countdownLatchBeforePerformPayment.countDown();
+                    }
+                    countdownLatchBeforePerformPayment.await();
+
+                    try {
+                        if (reservationId != null) {
+                            Pair<TotalPrice, Optional<PromoCodeDiscount>> priceAndDiscount = ticketReservationManager.totalReservationCostWithVAT(reservationId);
+                            TotalPrice totalPrice = priceAndDiscount.getLeft();
+                            PaymentSpecification specification = new PaymentSpecification(reservationId, null, totalPrice.getPriceWithVAT(),
+                                event, "email@example.com", new CustomerName("full name", "full", "name", event.mustUseFirstAndLastName()),
+                                "billing address", null, Locale.ENGLISH, true, false, null, "IT", "123456", PriceContainer.VatStatus.INCLUDED, true, false);
+                            var paymentResult = ticketReservationManager.performPayment(specification, totalPrice, PaymentProxy.OFFLINE, PaymentMethod.BANK_TRANSFER, null);
+                            assertTrue(paymentResult.isSuccessful());
+                        }
+                    } catch (Throwable t) {
+                    } finally {
+                        countdownLatchBeforeComplete.countDown();
+                    }
+
+
+                    countdownLatchBeforeComplete.await();
+                    if (reservationId != null) {
+                        ticketReservationManager.confirmOfflinePayment(event, reservationId, null, eventAndUser.getRight());
+                    }
+                } catch (InterruptedException e) {
+                    throw new IllegalStateException(e);
+                } catch (Throwable t) {
+                } finally {
+                    doneSignal.countDown();
+                }
+            };
+            new Thread(runnable).start();
+        }
+
+        doneSignal.await();
+
+        Assertions.assertEquals(1, promoCodeDiscountRepository.countConfirmedPromoCode(promoCodeDiscount.getId()));
+    }
+}
