diff --git a/src/Features/SupportFileUploads/TemporaryUploadedFile.php b/src/Features/SupportFileUploads/TemporaryUploadedFile.php
index bdadd9936..0d0f952fd 100644
--- a/src/Features/SupportFileUploads/TemporaryUploadedFile.php
+++ b/src/Features/SupportFileUploads/TemporaryUploadedFile.php
@@ -168,7 +168,7 @@ public static function generateHashNameWithOriginalNameEmbedded($file)
     {
         $hash = str()->random(30);
         $meta = str('-meta'.base64_encode($file->getClientOriginalName()).'-')->replace('/', '_');
-        $extension = '.'.$file->guessExtension();
+        $extension = '.'.$file->getClientOriginalExtension();
 
         return $hash.$meta.$extension;
     }
diff --git a/src/Features/SupportFileUploads/UnitTest.php b/src/Features/SupportFileUploads/UnitTest.php
index 83782b1f4..b96b22847 100644
--- a/src/Features/SupportFileUploads/UnitTest.php
+++ b/src/Features/SupportFileUploads/UnitTest.php
@@ -13,6 +13,7 @@
 use Illuminate\Support\Facades\Storage;
 use Illuminate\Http\UploadedFile;
 use Facades\Livewire\Features\SupportFileUploads\GenerateSignedUploadUrl;
+use Illuminate\Http\Testing\FileFactory;
 use Tests\TestComponent;
 
 class UnitTest extends \Tests\TestCase
@@ -788,6 +789,20 @@ public function test_validation_of_file_uploads_while_time_traveling()
 
         Storage::disk('avatars')->assertExists('uploaded-avatar.png');
     }
+
+    public function test_extension_validation_cant_be_spoofed_by_manipulating_the_mime_type()
+    {
+        Storage::fake('avatars');
+
+        $file = (new \Illuminate\Http\Testing\FileFactory)->create('malicious.php', 0, 'image/png');
+
+        Livewire::test(FileExtensionValidatorComponent::class)
+            ->set('photo', $file)
+            ->call('save')
+            ->assertHasErrors('photo');
+
+        Storage::disk('avatars')->assertMissing('malicious.php');
+    }
 }
 
 class DummyMiddleware
@@ -908,3 +923,19 @@ public function updatedFile()
     }
 }
 
+class FileExtensionValidatorComponent extends FileUploadComponent
+{
+    use WithFileUploads;
+
+    public $photo;
+
+    public function save()
+    {
+        $this->validate([
+            'photo' => 'extensions:png',
+        ]);
+
+        $this->photo->storeAs('/', 'malicious.'.$this->photo->getClientOriginalExtension(), $disk = 'avatars');
+    }
+}
+
