diff --git a/extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java b/extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java
index df3288fcb5c2..0290bd1ad486 100644
--- a/extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java
+++ b/extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java
@@ -29,6 +29,7 @@
 
 package com.google.refine.extension.database.sqlite;
 
+import java.io.File;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.sql.Connection;
@@ -69,8 +70,21 @@ public static SQLiteConnectionManager getInstance() {
     }
 
     public static String getDatabaseUrl(DatabaseConfiguration dbConfig) {
+        String dbPath = dbConfig.getDatabaseName();
+        if (dbPath.contains("?")) {
+            throw new IllegalArgumentException("Paths to SQLite databases are not allowed to contain '?'");
+        }
+        if (dbPath.startsWith("//") || dbPath.startsWith("\\\\") || dbPath.startsWith("\\/") || dbPath.startsWith("/\\")) {
+            throw new IllegalArgumentException("File path starts with illegal prefix; only local files are accepted.");
+        }
+        if (!new File(dbPath).isFile()) {
+            throw new IllegalArgumentException("File could not be read: " + dbPath);
+        }
         try {
-            URI uri = new URI("jdbc:" + dbConfig.getDatabaseType().toLowerCase(), dbConfig.getDatabaseName(), null);
+            URI uri = new URI(
+                    "jdbc:" + dbConfig.getDatabaseType().toLowerCase(),
+                    dbPath + "?open_mode=1&limit_attached=0", // open_mode=1 means read-only
+                    null);
             return uri.toASCIIString();
         } catch (URISyntaxException e) {
             throw new IllegalArgumentException(e);
diff --git a/extensions/database/tests/conf/appveyor_tests.xml b/extensions/database/tests/conf/appveyor_tests.xml
index ecb767fca173..9e6c832195ca 100644
--- a/extensions/database/tests/conf/appveyor_tests.xml
+++ b/extensions/database/tests/conf/appveyor_tests.xml
@@ -25,7 +25,7 @@
     <parameter name = "mariadbDbPassword" value=""/>
     <parameter name = "mariadbTestTable" value="test_table"/>
 
-    <parameter name = "sqliteDbName" value="extension_test_db.sqlite"/>
+    <parameter name = "sqliteDbName" value="tests/resources/test_db.sqlite"/>
     <parameter name = "sqliteDbHost" value=""/>
     <parameter name = "sqliteDbPort" value=""/>
     <parameter name = "sqliteDbUser" value=""/>
diff --git a/extensions/database/tests/conf/github_actions_tests.xml b/extensions/database/tests/conf/github_actions_tests.xml
index 3e508e56792b..28607f31474a 100644
--- a/extensions/database/tests/conf/github_actions_tests.xml
+++ b/extensions/database/tests/conf/github_actions_tests.xml
@@ -21,7 +21,7 @@
     <parameter name = "mariadbDbPassword" value="root"/>
     <parameter name = "mariadbTestTable" value="test_table"/>
 
-    <parameter name = "sqliteDbName" value="extension_test_db.sqlite"/>
+    <parameter name = "sqliteDbName" value="tests/resources/test_db.sqlite"/>
     <parameter name = "sqliteDbHost" value=""/>
     <parameter name = "sqliteDbPort" value=""/>
     <parameter name = "sqliteDbUser" value=""/>
diff --git a/extensions/database/tests/conf/tests.xml b/extensions/database/tests/conf/tests.xml
index 7885174bf951..a0910c90f477 100644
--- a/extensions/database/tests/conf/tests.xml
+++ b/extensions/database/tests/conf/tests.xml
@@ -29,7 +29,7 @@
     <parameter name = "mariadbDbPassword" value=""/>
     <parameter name = "mariadbTestTable" value="test_table"/>
 
-    <parameter name = "sqliteDbName" value="extension_test_db.sqlite"/>
+    <parameter name = "sqliteDbName" value="tests/resources/test_db.sqlite"/>
     <parameter name = "sqliteDbHost" value=""/>
     <parameter name = "sqliteDbPort" value=""/>
     <parameter name = "sqliteDbUser" value=""/>
diff --git a/extensions/database/tests/resources/test_db.sqlite b/extensions/database/tests/resources/test_db.sqlite
new file mode 100644
index 000000000000..521f9e1fdeaa
Binary files /dev/null and b/extensions/database/tests/resources/test_db.sqlite differ
diff --git a/extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java b/extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java
index bd1d0bc110ec..a98f55ad755f 100644
--- a/extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java
+++ b/extensions/database/tests/src/com/google/refine/extension/database/DBExtensionTests.java
@@ -61,7 +61,7 @@ public class DBExtensionTests {
     protected final String DEFAULT_MARIADB_NAME = "testdb";
 
     protected final String SQLITE_DB_NAME = "sqlite";
-    protected final String DEFAULT_SQLITE_DB_NAME = "extension_test_db.sqlite";
+    protected final String DEFAULT_SQLITE_DB_NAME = "tests/resources/test_db.sqlite";
 
     protected final String DEFAULT_TEST_TABLE = "test_data";
 
diff --git a/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManagerTest.java b/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManagerTest.java
index d7223aa683e6..baea9aa20a9a 100644
--- a/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManagerTest.java
+++ b/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManagerTest.java
@@ -29,13 +29,11 @@
 
 package com.google.refine.extension.database.sqlite;
 
-import java.io.File;
 import java.sql.Connection;
 import java.sql.SQLException;
 
 import org.mockito.MockitoAnnotations;
 import org.testng.Assert;
-import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Optional;
 import org.testng.annotations.Parameters;
@@ -66,15 +64,6 @@ public void beforeTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName,
         DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());
     }
 
-    @AfterTest
-    @Parameters({ "sqliteDbName" })
-    public void afterTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName) {
-        File f = new File(sqliteDbName);
-        if (f.exists()) {
-            f.delete();
-        }
-    }
-
     @Test
     public void testTestConnection() throws DatabaseServiceException {
         boolean isConnected = SQLiteConnectionManager.getInstance().testConnection(testDbConfig);
diff --git a/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteDatabaseServiceTest.java b/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteDatabaseServiceTest.java
index ddc3fee7b66b..0352bf42dc51 100644
--- a/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteDatabaseServiceTest.java
+++ b/extensions/database/tests/src/com/google/refine/extension/database/sqlite/SQLiteDatabaseServiceTest.java
@@ -29,20 +29,17 @@
 
 package com.google.refine.extension.database.sqlite;
 
-import java.io.File;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.List;
 
 import org.mockito.MockitoAnnotations;
 import org.testng.Assert;
-import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Optional;
 import org.testng.annotations.Parameters;
 import org.testng.annotations.Test;
 
-import com.google.refine.extension.database.DBExtensionTestUtils;
 import com.google.refine.extension.database.DBExtensionTests;
 import com.google.refine.extension.database.DatabaseConfiguration;
 import com.google.refine.extension.database.DatabaseService;
@@ -69,20 +66,10 @@ public void beforeTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName,
         testDbConfig.setDatabaseType(SQLiteDatabaseService.DB_NAME);
 
         testTable = sqliteTestTable;
-        DBExtensionTestUtils.initTestData(testDbConfig, sqliteTestTable);
 
         DatabaseService.DBType.registerDatabase(SQLiteDatabaseService.DB_NAME, SQLiteDatabaseService.getInstance());
     }
 
-    @AfterTest
-    @Parameters({ "sqliteDbName" })
-    public void afterTest(@Optional(DEFAULT_SQLITE_DB_NAME) String sqliteDbName) {
-        File f = new File(sqliteDbName);
-        if (f.exists()) {
-            f.delete();
-        }
-    }
-
     @Test
     public void testGetDatabaseUrl() {
         SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService
@@ -90,7 +77,7 @@ public void testGetDatabaseUrl() {
         String dbUrl = sqLiteDatabaseService.getDatabaseUrl(testDbConfig);
 
         Assert.assertNotNull(dbUrl);
-        Assert.assertEquals(dbUrl, "jdbc:sqlite:extension_test_db.sqlite");
+        Assert.assertEquals(dbUrl, "jdbc:sqlite:tests/resources/test_db.sqlite?open_mode=1&limit_attached=0");
     }
 
     @Test
@@ -103,6 +90,35 @@ public void testGetConnection() throws DatabaseServiceException {
         Assert.assertNotNull(conn);
     }
 
+    /*
+     * We don't allow loading extensions because that executes arbitrary code
+     */
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testGetConnectionWithExtensions() throws DatabaseServiceException {
+        DatabaseConfiguration testDbConfigWithExtensions = new DatabaseConfiguration();
+        testDbConfigWithExtensions.setDatabaseName("test_db.sqlite?enable_load_extension=true");
+        testDbConfigWithExtensions.setDatabaseType(SQLiteDatabaseService.DB_NAME);
+
+        SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService
+                .get(SQLiteDatabaseService.DB_NAME);
+        sqLiteDatabaseService.getConnection(testDbConfigWithExtensions);
+    }
+
+    /*
+     * We don't allow loading a remote SQLite file to make remote code execution harder
+     */
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testGetConnectionWithRemoteFile() throws DatabaseServiceException {
+        DatabaseConfiguration testDbConfigWithExtensions = new DatabaseConfiguration();
+        testDbConfigWithExtensions
+                .setDatabaseName("https://github.com/xerial/sqlite-jdbc/raw/master/src/test/resources/org/sqlite/sample.db");
+        testDbConfigWithExtensions.setDatabaseType(SQLiteDatabaseService.DB_NAME);
+
+        SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService
+                .get(SQLiteDatabaseService.DB_NAME);
+        sqLiteDatabaseService.getConnection(testDbConfigWithExtensions);
+    }
+
     @Test
     public void testTestConnection() throws DatabaseServiceException {
         SQLiteDatabaseService sqLiteDatabaseService = (SQLiteDatabaseService) DatabaseService
