diff --git a/requirements.txt b/requirements.txt
index a8fc39e..291d8f4 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,5 +1,5 @@
 Flask==2.2.5
-Flask-Cors==4.0.1
+Flask-Cors==5.0.0
 fastapi==0.111.0
 uvicorn[standard]==0.30.1
 PyYAML==6.0.1
@@ -8,4 +8,5 @@ uuid==1.30
 mysql-connector-python==8.0.33
 python-multipart==0.0.7
 requests==2.32.0
-matplotlib==3.8.0
\ No newline at end of file
+matplotlib==3.8.0
+tldextract==5.1.2
\ No newline at end of file
diff --git a/src/_version.py b/src/_version.py
index 2b3df07..b0b7ec2 100644
--- a/src/_version.py
+++ b/src/_version.py
@@ -1 +1 @@
-__version__='1.7.2'
\ No newline at end of file
+__version__='1.7.3'
\ No newline at end of file
diff --git a/src/auth_server.py b/src/auth_server.py
index 51001fb..aae5e21 100644
--- a/src/auth_server.py
+++ b/src/auth_server.py
@@ -1,7 +1,8 @@
 from fastapi import FastAPI, HTTPException, Request, Form, File, UploadFile, WebSocket
 from fastapi.middleware.cors import CORSMiddleware
-from fastapi.responses import FileResponse, JSONResponse, HTMLResponse
+from fastapi.responses import FileResponse, JSONResponse, HTMLResponse, RedirectResponse
 from starlette.responses import Response
+import tldextract
 import os
 import yaml
 import json
@@ -224,7 +225,7 @@ async def lif_login(username: str = Form(), password: str = Form(), permissions:
         raise HTTPException(status_code=401, detail='Incorrect Login Credentials')
     
 @app.get("/auth/logout")
-async def log_out(response: Response):
+async def log_out(response: Response, redirect = None):
     """
     ## Logout Route For Lif Accounts
     Handles the logout process for Lif Accounts.
@@ -232,13 +233,34 @@ async def log_out(response: Response):
     ### Parameters:
     none
 
+    ### Query Parameters
+    - **redirect:** url to redirect to after the logout completes.
+
     ### Returns:
     - **STRING:** Status of the operation.
     """
     response.delete_cookie(key="LIF_USERNAME", path="/", domain=".lifplatforms.com")
     response.delete_cookie(key="LIF_TOKEN", path="/", domain=".lifplatforms.com")
 
-    return "Logout Successful"
+    # Create a RedirectResponse
+    redirect_response = RedirectResponse(url=redirect)
+
+    # Copy the cookies from the response to the redirect response
+    for cookie in response.headers.getlist("set-cookie"):
+        redirect_response.headers.append("set-cookie", cookie)
+
+    if redirect != None:
+        # Check to ensure redirect URL goes to a Lif Platforms domain
+        extracted = tldextract.extract(redirect)
+        domain = f"{extracted.domain}.{extracted.suffix}"
+
+        if domain == "lifplatforms.com":
+            return redirect_response
+        else:
+            print(domain)
+            raise HTTPException(status_code=400, detail="Untrusted redirect url.")
+    else:
+        return "Log Out Successful"
     
 @app.post("/update_pfp")
 @app.post("/account/update_avatar")
@@ -464,10 +486,15 @@ async def get_pfp(username: str):
 
     # Check if the file exists and is a regular file
     if os.path.isfile(avatar_path):
-        return FileResponse(avatar_path, media_type='image/gif')
+        response = FileResponse(avatar_path, media_type='image/gif')
     else:
         # Return default image if the user's banner doesn't exist
-        return FileResponse(f'{assets_folder}/default_pfp.png', media_type='image/gif')
+        response = FileResponse(f'{assets_folder}/default_pfp.png', media_type='image/gif')
+
+    # Add caching limit to image
+    response.headers["Cache-Control"] = "public, max-age=3600"
+
+    return response
 
 @app.get("/get_banner/{username}")
 @app.get("/profile/get_banner/{username}")
@@ -490,10 +517,15 @@ async def get_banner(username: str):
 
     # Check if the file exists and is a regular file
     if os.path.isfile(banner_path):
-        return FileResponse(banner_path, media_type='image/gif')
+        response = FileResponse(banner_path, media_type='image/gif')
     else:
         # Return default image if the user's banner doesn't exist
-        return FileResponse(f'{assets_folder}/default_banner.png', media_type='image/gif')
+        response = FileResponse(f'{assets_folder}/default_banner.png', media_type='image/gif')
+
+    # Add caching time limit to image
+    response.headers["Cache-Control"] = "public, max-age=3600"
+
+    return response
     
 @app.post("/create_lif_account")
 @app.post("/account/create_account")
@@ -653,6 +685,9 @@ async def account_recovery(websocket: WebSocket):
     user_email = None
     user_code = None
 
+    # Determines if the user has entered the correct code from the recovery email
+    authenticated = False
+
     # Wait for client to send data
     while True:
         # Tries to receive data from client, if fails then the connection is closed
@@ -677,25 +712,31 @@ async def account_recovery(websocket: WebSocket):
             elif 'code' in data:
                 # Compare generated code with user provided code
                 if data['code'] == user_code:
+                    # Sets the user to authenticated so the password can be updated
+                    authenticated = True
+
                     await websocket.send_json({"responseType": "codeCorrect", "message": "Code validated successfully."})
                 else:
                     await websocket.send_json({"responseType": "error", "message": "Bad Code"})
                     
             elif 'password' in data:
-                # Get password hash and gen salt
-                password_hash = hasher.get_hash_gen_salt(data['password'])
+                if authenticated:
+                    # Get password hash and gen salt
+                    password_hash = hasher.get_hash_gen_salt(data['password'])
 
-                # Get username from email
-                username = database.get_username_from_email(user_email)
+                    # Get username from email
+                    username = database.get_username_from_email(user_email)
 
-                # Update password and salt in database
-                database.update.update_password(username, password_hash['password'])
-                database.update.update_user_salt(username, password_hash['salt'])
+                    # Update password and salt in database
+                    database.update.update_password(username, password_hash['password'])
+                    database.update.update_user_salt(username, password_hash['salt'])
 
-                # Get user token
-                token = database.info.retrieve_user_token(username)
+                    # Get user token
+                    token = database.info.retrieve_user_token(username)
 
-                await websocket.send_json({"responseType": "passwordUpdated", "username": username, "token": token})
+                    await websocket.send_json({"responseType": "passwordUpdated", "username": username, "token": token})
+                else:
+                    await websocket.send_json({"responseType": "error", "message": "You have not authenticated yet"})
             else:
                 await websocket.send_json({"responseType": "error", "message": "Bad Request"})
 
