diff --git a/examples/showcase/app/revalidate/component.tsx b/examples/showcase/app/revalidate/component.tsx
new file mode 100644
index 0000000..6e7aeb4
--- /dev/null
+++ b/examples/showcase/app/revalidate/component.tsx
@@ -0,0 +1,17 @@
+"use client"
+
+import IncrementExample from "@/content/docs/examples/introduction/increment-example"
+import { useState } from "react"
+
+export default function RevalidateComponent() {
+  const [open, setOpen] = useState(false)
+  return (
+    <div>
+      {open ? (
+        <IncrementExample />
+      ) : (
+        <button onClick={() => setOpen(true)}>Open</button>
+      )}
+    </div>
+  )
+}
diff --git a/examples/showcase/app/revalidate/page.tsx b/examples/showcase/app/revalidate/page.tsx
new file mode 100644
index 0000000..4ac103a
--- /dev/null
+++ b/examples/showcase/app/revalidate/page.tsx
@@ -0,0 +1,15 @@
+import RevalidateComponent from "./component"
+
+export default async function RevalidatePage() {
+  // sleep for 2 seconds
+  await new Promise((resolve) => setTimeout(resolve, 1000))
+  const randomNumber = Math.floor(Math.random() * 10000)
+
+  return (
+    <div>
+      <h1>Revalidate Page</h1>
+      <p>Random number: {randomNumber}</p>
+      <RevalidateComponent />
+    </div>
+  )
+}
diff --git a/examples/showcase/content/docs/examples/introduction/actions.ts b/examples/showcase/content/docs/examples/introduction/actions.ts
index 44dd8be..4cf2049 100644
--- a/examples/showcase/content/docs/examples/introduction/actions.ts
+++ b/examples/showcase/content/docs/examples/introduction/actions.ts
@@ -1,5 +1,6 @@
 "use server"
 
+import { revalidatePath } from "next/cache"
 import z from "zod"
 import { createServerAction } from "zsa"
 
@@ -11,7 +12,10 @@ export const incrementNumberAction = createServerAction()
   )
   .handler(async ({ input }) => {
     await new Promise((resolve) => setTimeout(resolve, 500))
-    return input.number + 1
+
+    revalidatePath("/revalidate", "page")
+
+    return input.number + 2
   })
 
 export const plainAction = createServerAction().handler(async () => {
diff --git a/examples/showcase/content/docs/examples/introduction/increment-example.tsx b/examples/showcase/content/docs/examples/introduction/increment-example.tsx
index 503050f..c578dcb 100644
--- a/examples/showcase/content/docs/examples/introduction/increment-example.tsx
+++ b/examples/showcase/content/docs/examples/introduction/increment-example.tsx
@@ -3,6 +3,7 @@
 import { Button } from "@/components/ui/button"
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
 import { useState } from "react"
+import { toast } from "sonner"
 import { useServerAction } from "zsa-react"
 import { incrementNumberAction } from "./actions"
 
@@ -31,6 +32,7 @@ export default function IncrementExample() {
               return
             }
 
+            toast("got data" + data)
             setCounter(data)
           }}
         >
diff --git a/packages/zsa/src/errors.ts b/packages/zsa/src/errors.ts
index b41a1f7..ab9be9c 100644
--- a/packages/zsa/src/errors.ts
+++ b/packages/zsa/src/errors.ts
@@ -57,7 +57,6 @@ export type TZSAError<TInputSchema extends z.ZodType> = Error &
     | {
         code: Exclude<keyof typeof ERROR_CODES, "INPUT_PARSE_ERROR">
         message?: string
-        stack: string
         data: string
         name: string
         fieldErrors?: undefined
@@ -66,7 +65,6 @@ export type TZSAError<TInputSchema extends z.ZodType> = Error &
       }
     | {
         message?: string
-        stack: string
         code: "INPUT_PARSE_ERROR"
         data: string
         name: string
diff --git a/packages/zsa/src/zod-safe-function.ts b/packages/zsa/src/zod-safe-function.ts
index 87f513b..52db260 100644
--- a/packages/zsa/src/zod-safe-function.ts
+++ b/packages/zsa/src/zod-safe-function.ts
@@ -512,7 +512,6 @@ export class ZodSafeFunction<
       {
         data: stringifyIfNeeded(customError.data),
         name: customError.name,
-        stack: JSON.stringify(customError.stack),
         message: stringifyIfNeeded(customError.message),
         code: customError.code,
         fieldErrors: flattenedErrors?.fieldErrors,
diff --git a/tests/jest/__tests__/openapi.test.tsx b/tests/jest/__tests__/openapi.test.tsx
index 6c01656..fa6a7bc 100644
--- a/tests/jest/__tests__/openapi.test.tsx
+++ b/tests/jest/__tests__/openapi.test.tsx
@@ -165,7 +165,6 @@ describe("openapi", () => {
       const json = await response.json()
       expect(json.code).toBe("INPUT_PARSE_ERROR")
       expect(json.message).toBeDefined()
-      expect(json.stack).not.toBeDefined()
     })
 
     it("should multiply two numbers [POST]", async () => {
@@ -387,7 +386,6 @@ describe("openapi", () => {
       const json = await response.json()
       expect(json.code).toBe("INPUT_PARSE_ERROR")
       expect(json.message).toBeDefined()
-      expect(json.stack).toBeDefined()
       expect(json.name).toBeDefined()
     })
 
@@ -419,7 +417,6 @@ describe("openapi", () => {
       const json = await response.json()
       expect(json.code).toBe("INPUT_PARSE_ERROR")
       expect(json.message).toBeDefined()
-      expect(json.stack).not.toBeDefined()
     })
   })
 
