diff --git a/operator/pkg/model/translation/envoy_virtual_host.go b/operator/pkg/model/translation/envoy_virtual_host.go
index 14550a1d2479e..3c90d42e2b0c8 100644
--- a/operator/pkg/model/translation/envoy_virtual_host.go
+++ b/operator/pkg/model/translation/envoy_virtual_host.go
@@ -42,6 +42,7 @@ type VirtualHostMutator func(*envoy_config_route_v3.VirtualHost) *envoy_config_r
 //   - Exact Match length
 //   - Regex Match length
 //   - Prefix match length
+//   - Method match
 //   - Number of header matches
 //   - Number of query parameter matches
 //
@@ -81,6 +82,20 @@ func (s SortableRoute) Less(i, j int) bool {
 		return prefixMatch1 > prefixMatch2
 	}
 
+	// Next up, sort by method based on :method header
+	// Give higher priority for the route having method specified
+	method1 := getMethod(s[i].Match.GetHeaders())
+	method2 := getMethod(s[j].Match.GetHeaders())
+	if method1 == nil && method2 != nil {
+		return false
+	}
+	if method1 != nil && method2 == nil {
+		return true
+	}
+	if method1 != nil && *method1 != *method2 {
+		return *method1 < *method2
+	}
+
 	// If that's the same, then sort by header length
 	if headerMatch1 != headerMatch2 {
 		return headerMatch1 > headerMatch2
@@ -90,6 +105,15 @@ func (s SortableRoute) Less(i, j int) bool {
 	return queryMatch1 > queryMatch2
 }
 
+func getMethod(headers []*envoy_config_route_v3.HeaderMatcher) *string {
+	for _, h := range headers {
+		if h.Name == ":method" {
+			return model.AddressOf(h.GetStringMatch().GetExact())
+		}
+	}
+	return nil
+}
+
 func (s SortableRoute) Swap(i, j int) {
 	s[i], s[j] = s[j], s[i]
 }
diff --git a/operator/pkg/model/translation/envoy_virtual_host_test.go b/operator/pkg/model/translation/envoy_virtual_host_test.go
index 5fd17dfb5b92a..466d1e7e935ec 100644
--- a/operator/pkg/model/translation/envoy_virtual_host_test.go
+++ b/operator/pkg/model/translation/envoy_virtual_host_test.go
@@ -91,7 +91,6 @@ func TestSortableRoute(t *testing.T) {
 				},
 			},
 		},
-
 		{
 			Name: "regex match with two headers",
 			Match: &envoy_config_route_v3.RouteMatch{
@@ -124,7 +123,6 @@ func TestSortableRoute(t *testing.T) {
 				},
 			},
 		},
-
 		{
 			Name: "exact match short",
 			Match: &envoy_config_route_v3.RouteMatch{
@@ -141,6 +139,46 @@ func TestSortableRoute(t *testing.T) {
 				},
 			},
 		},
+		{
+			Name: "exact match long with POST method",
+			Match: &envoy_config_route_v3.RouteMatch{
+				PathSpecifier: &envoy_config_route_v3.RouteMatch_Path{
+					Path: "/exact/match/longest",
+				},
+				Headers: []*envoy_config_route_v3.HeaderMatcher{
+					{
+						Name: ":method",
+						HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
+							StringMatch: &envoy_type_matcher_v3.StringMatcher{
+								MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
+									Exact: "POST",
+								},
+							},
+						},
+					},
+				},
+			},
+		},
+		{
+			Name: "exact match long with GET method",
+			Match: &envoy_config_route_v3.RouteMatch{
+				PathSpecifier: &envoy_config_route_v3.RouteMatch_Path{
+					Path: "/exact/match/longest",
+				},
+				Headers: []*envoy_config_route_v3.HeaderMatcher{
+					{
+						Name: ":method",
+						HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
+							StringMatch: &envoy_type_matcher_v3.StringMatcher{
+								MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
+									Exact: "GET",
+								},
+							},
+						},
+					},
+				},
+			},
+		},
 		{
 			Name: "exact match with one header",
 			Match: &envoy_config_route_v3.RouteMatch{
@@ -227,6 +265,46 @@ func TestSortableRoute(t *testing.T) {
 				},
 			},
 		},
+		{
+			Name: "prefix match short with HEAD method",
+			Match: &envoy_config_route_v3.RouteMatch{
+				PathSpecifier: &envoy_config_route_v3.RouteMatch_PathSeparatedPrefix{
+					PathSeparatedPrefix: "/prefix/match",
+				},
+				Headers: []*envoy_config_route_v3.HeaderMatcher{
+					{
+						Name: ":method",
+						HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
+							StringMatch: &envoy_type_matcher_v3.StringMatcher{
+								MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
+									Exact: "HEAD",
+								},
+							},
+						},
+					},
+				},
+			},
+		},
+		{
+			Name: "prefix match short with GET method",
+			Match: &envoy_config_route_v3.RouteMatch{
+				PathSpecifier: &envoy_config_route_v3.RouteMatch_PathSeparatedPrefix{
+					PathSeparatedPrefix: "/prefix/match",
+				},
+				Headers: []*envoy_config_route_v3.HeaderMatcher{
+					{
+						Name: ":method",
+						HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
+							StringMatch: &envoy_type_matcher_v3.StringMatcher{
+								MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
+									Exact: "GET",
+								},
+							},
+						},
+					},
+				},
+			},
+		},
 		{
 			Name: "prefix match long",
 			Match: &envoy_config_route_v3.RouteMatch{
@@ -328,10 +406,14 @@ func TestSortableRoute(t *testing.T) {
 		"regex match with two headers",
 		"exact match short",
 		"exact match long",
+		"exact match long with POST method",
+		"exact match long with GET method",
 		"exact match with one header",
 		"exact match with one header and one query",
 		"exact match with two headers",
 		"prefix match short",
+		"prefix match short with HEAD method",
+		"prefix match short with GET method",
 		"prefix match long",
 		"prefix match with one header",
 		"prefix match with one header and one query",
@@ -342,6 +424,8 @@ func TestSortableRoute(t *testing.T) {
 
 	namesAfterSort := buildNameSlice(arr)
 	assert.Equal(t, []string{
+		"exact match long with GET method",
+		"exact match long with POST method",
 		"exact match long",
 		"exact match with two headers",
 		"exact match with one header and one query",
@@ -353,6 +437,8 @@ func TestSortableRoute(t *testing.T) {
 		"regex match with one header",
 		"regex match short",
 		"prefix match long",
+		"prefix match short with GET method",
+		"prefix match short with HEAD method",
 		"prefix match short",
 		"prefix match with two headers",
 		"prefix match with one header and one query",
diff --git a/operator/pkg/model/translation/gateway-api/translator_fixture_test.go b/operator/pkg/model/translation/gateway-api/translator_fixture_test.go
index 6957270020b08..14f9afe7fea46 100644
--- a/operator/pkg/model/translation/gateway-api/translator_fixture_test.go
+++ b/operator/pkg/model/translation/gateway-api/translator_fixture_test.go
@@ -2498,14 +2498,14 @@ var methodMatchingHTTPListenersHTTPListenersCiliumEnvoyConfig = &ciliumv2.Cilium
 												HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
 													StringMatch: &envoy_type_matcher_v3.StringMatcher{
 														MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
-															Exact: "POST",
+															Exact: "GET",
 														},
 													},
 												},
 											},
 										},
 									},
-									Action: routeActionBackendV1,
+									Action: routeActionBackendV2,
 								},
 								{
 									Match: &envoy_config_route_v3.RouteMatch{
@@ -2518,14 +2518,14 @@ var methodMatchingHTTPListenersHTTPListenersCiliumEnvoyConfig = &ciliumv2.Cilium
 												HeaderMatchSpecifier: &envoy_config_route_v3.HeaderMatcher_StringMatch{
 													StringMatch: &envoy_type_matcher_v3.StringMatcher{
 														MatchPattern: &envoy_type_matcher_v3.StringMatcher_Exact{
-															Exact: "GET",
+															Exact: "POST",
 														},
 													},
 												},
 											},
 										},
 									},
-									Action: routeActionBackendV2,
+									Action: routeActionBackendV1,
 								},
 							},
 						},
