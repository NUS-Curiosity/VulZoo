diff --git a/server-core/src/main/java/io/onedev/server/web/page/project/blob/ProjectBlobPage.java b/server-core/src/main/java/io/onedev/server/web/page/project/blob/ProjectBlobPage.java
index 475131ce8a..a796386c1a 100644
--- a/server-core/src/main/java/io/onedev/server/web/page/project/blob/ProjectBlobPage.java
+++ b/server-core/src/main/java/io/onedev/server/web/page/project/blob/ProjectBlobPage.java
@@ -5,6 +5,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Sets;
 import io.onedev.commons.utils.ExceptionUtils;
+import io.onedev.commons.utils.ExplicitException;
 import io.onedev.commons.utils.FileUtils;
 import io.onedev.commons.utils.PlanarRange;
 import io.onedev.server.OneDev;
@@ -165,6 +166,8 @@ public ProjectBlobPage(PageParameters params) {
 		List<String> revisionAndPathSegments = new ArrayList<>();
 		for (int i=0; i<params.getIndexedCount(); i++) {
 			String segment = params.get(i).toString();
+			if (segment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (segment.length() != 0)
 				revisionAndPathSegments.add(segment);
 		}
diff --git a/server-core/src/main/java/io/onedev/server/web/page/project/builds/detail/report/BuildReportPage.java b/server-core/src/main/java/io/onedev/server/web/page/project/builds/detail/report/BuildReportPage.java
index a70d37b9f0..166145bca8 100644
--- a/server-core/src/main/java/io/onedev/server/web/page/project/builds/detail/report/BuildReportPage.java
+++ b/server-core/src/main/java/io/onedev/server/web/page/project/builds/detail/report/BuildReportPage.java
@@ -1,5 +1,6 @@
 package io.onedev.server.web.page.project.builds.detail.report;
 
+import io.onedev.commons.utils.ExplicitException;
 import org.apache.wicket.request.mapper.parameter.PageParameters;
 
 import io.onedev.server.model.Build;
@@ -15,8 +16,9 @@ public abstract class BuildReportPage extends BuildDetailPage {
 	
 	public BuildReportPage(PageParameters params) {
 		super(params);
-		
 		reportName = params.get(PARAM_REPORT).toString();
+		if (reportName.contains(".."))
+			throw new ExplicitException("Invalid request path");
 	}
 	
 	@Override
diff --git a/server-core/src/main/java/io/onedev/server/web/page/project/commits/CommitDetailPage.java b/server-core/src/main/java/io/onedev/server/web/page/project/commits/CommitDetailPage.java
index f67df5c32e..2b05f359bd 100644
--- a/server-core/src/main/java/io/onedev/server/web/page/project/commits/CommitDetailPage.java
+++ b/server-core/src/main/java/io/onedev/server/web/page/project/commits/CommitDetailPage.java
@@ -3,6 +3,7 @@
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
+import io.onedev.commons.utils.ExplicitException;
 import io.onedev.commons.utils.PlanarRange;
 import io.onedev.server.OneDev;
 import io.onedev.server.buildspec.BuildSpec;
@@ -128,10 +129,14 @@ public CommitDetailPage(PageParameters params) {
 
 		List<String> revisionSegments = new ArrayList<>();
 		String segment = params.get(PARAM_COMMIT).toString();
+		if (segment.contains(".."))
+			throw new ExplicitException("Invalid request path");
 		if (segment.length() != 0)
 			revisionSegments.add(segment);
 		for (int i=0; i<params.getIndexedCount(); i++) {
 			segment = params.get(i).toString();
+			if (segment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (segment.length() != 0)
 				revisionSegments.add(segment);
 		}
diff --git a/server-core/src/main/java/io/onedev/server/web/resource/ArtifactResource.java b/server-core/src/main/java/io/onedev/server/web/resource/ArtifactResource.java
index 7fa8b3bb64..5a49546124 100644
--- a/server-core/src/main/java/io/onedev/server/web/resource/ArtifactResource.java
+++ b/server-core/src/main/java/io/onedev/server/web/resource/ArtifactResource.java
@@ -57,6 +57,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 
 		for (int i = 0; i < params.getIndexedCount(); i++) {
 			String pathSegment = params.get(i).toString();
+			if (pathSegment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (pathSegment.length() != 0)
 				pathSegments.add(pathSegment);
 		}
diff --git a/server-core/src/main/java/io/onedev/server/web/resource/RawBlobResource.java b/server-core/src/main/java/io/onedev/server/web/resource/RawBlobResource.java
index ca79f3ba9a..eb97c6180f 100644
--- a/server-core/src/main/java/io/onedev/server/web/resource/RawBlobResource.java
+++ b/server-core/src/main/java/io/onedev/server/web/resource/RawBlobResource.java
@@ -1,6 +1,7 @@
 package io.onedev.server.web.resource;
 
 import com.google.common.base.Splitter;
+import io.onedev.commons.utils.ExplicitException;
 import io.onedev.k8shelper.KubernetesHelper;
 import io.onedev.server.OneDev;
 import io.onedev.server.cluster.ClusterManager;
@@ -62,6 +63,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 		List<String> revisionAndPathSegments = new ArrayList<>();
 		for (int i = 0; i < params.getIndexedCount(); i++) {
 			String segment = params.get(i).toString();
+			if (segment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (segment.length() != 0)
 				revisionAndPathSegments.add(segment);
 		}
diff --git a/server-core/src/main/java/io/onedev/server/web/resource/SiteFileResource.java b/server-core/src/main/java/io/onedev/server/web/resource/SiteFileResource.java
index 2bb6d3e156..d023a1dc09 100644
--- a/server-core/src/main/java/io/onedev/server/web/resource/SiteFileResource.java
+++ b/server-core/src/main/java/io/onedev/server/web/resource/SiteFileResource.java
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
+import io.onedev.commons.utils.ExplicitException;
 import io.onedev.k8shelper.KubernetesHelper;
 import io.onedev.server.OneDev;
 import io.onedev.server.cluster.ClusterManager;
@@ -24,6 +25,7 @@
 
 import javax.persistence.EntityNotFoundException;
 import javax.servlet.http.HttpServletResponse;
+import javax.ws.rs.BadRequestException;
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.Invocation;
@@ -60,6 +62,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 		List<String> filePathSegments = new ArrayList<>();
 		for (int i = 0; i < params.getIndexedCount(); i++) {
 			String segment = params.get(i).toString();
+			if (segment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (segment.length() != 0)
 				filePathSegments.add(segment);
 		}
@@ -172,8 +176,7 @@ public void writeData(Attributes attributes) throws IOException {
 				attributes.getResponse().write("Site file not found: " + filePath);
 			}
 			
-		});
-				
+		});			
 	}
 
 	private ProjectManager getProjectManager() {
diff --git a/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportDownloadResource.java b/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportDownloadResource.java
index 838923e1e0..b45155fd47 100644
--- a/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportDownloadResource.java
+++ b/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportDownloadResource.java
@@ -49,6 +49,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 		}
 		
 		String reportName = params.get(PARAM_REPORT).toString();
+		if (reportName.contains(".."))
+			throw new ExplicitException("Invalid request path");
 
 		if (!SecurityUtils.canAccessReport(build, reportName))
 			throw new UnauthorizedException();
@@ -57,6 +59,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 
 		for (int i = 0; i < params.getIndexedCount(); i++) {
 			String pathSegment = params.get(i).toString();
+			if (pathSegment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (pathSegment.length() != 0)
 				pathSegments.add(pathSegment);
 		}
diff --git a/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportPage.java b/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportPage.java
index 0a1d113e48..01779a8ce0 100644
--- a/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportPage.java
+++ b/server-plugin/server-plugin-report-html/src/main/java/io/onedev/server/plugin/report/html/HtmlReportPage.java
@@ -11,18 +11,12 @@
 import org.apache.wicket.request.mapper.parameter.PageParameters;
 
 import static io.onedev.server.plugin.report.html.PublishHtmlReportStep.START_PAGE;
-import static java.nio.charset.StandardCharsets.*;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 public class HtmlReportPage extends BuildReportPage {
-
-	private static final String PARAM_REPORT = "report";
-	
-	private final String reportName;
 	
 	public HtmlReportPage(PageParameters params) {
 		super(params);
-		
-		reportName = params.get(PARAM_REPORT).toString();
 	}
 
 	@Override
@@ -37,7 +31,7 @@ protected void onInitialize() {
 				new ReadPublishedFile(projectId, buildNumber, getReportName(), START_PAGE));
 		
 		PageParameters params = HtmlReportDownloadResource.paramsOf(
-				getBuild(), reportName, new String(startPage, UTF_8));
+				getBuild(), getReportName(), new String(startPage, UTF_8));
 		CharSequence startPageUrl = RequestCycle.get()
 				.urlFor(new HtmlReportDownloadResourceReference(), params);
 		
@@ -52,9 +46,4 @@ public void renderHead(IHeaderResponse response) {
 		}.add(AttributeAppender.append("src", startPageUrl.toString())).add(AttributeAppender.append("class", "d-flex flex-grow-1")));
 	}
 
-	@Override
-	public String getReportName() {
-		return reportName;
-	}
-
 }
diff --git a/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportDownloadResource.java b/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportDownloadResource.java
index 419e1903bd..659dad3da2 100644
--- a/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportDownloadResource.java
+++ b/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportDownloadResource.java
@@ -57,6 +57,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 		
 		if (reportName == null)
 			throw new IllegalArgumentException("Markdown report name has to be specified");
+		if (reportName.contains(".."))
+			throw new ExplicitException("Invalid request path");
 		
 		if (!SecurityUtils.canAccessReport(build, reportName))
 			throw new UnauthorizedException();
@@ -64,6 +66,8 @@ protected ResourceResponse newResourceResponse(Attributes attributes) {
 		List<String> pathSegments = new ArrayList<>();
 		for (int i = 0; i < params.getIndexedCount(); i++) {
 			String pathSegment = params.get(i).toString();
+			if (pathSegment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (pathSegment.length() != 0)
 				pathSegments.add(pathSegment);
 		}
diff --git a/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportPage.java b/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportPage.java
index f0216f8a08..6890ab8121 100644
--- a/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportPage.java
+++ b/server-plugin/server-plugin-report-markdown/src/main/java/io/onedev/server/plugin/report/markdown/MarkdownReportPage.java
@@ -1,6 +1,7 @@
 package io.onedev.server.plugin.report.markdown;
 
 import com.google.common.base.Splitter;
+import io.onedev.commons.utils.ExplicitException;
 import io.onedev.commons.utils.FileUtils;
 import io.onedev.commons.utils.StringUtils;
 import io.onedev.server.OneDev;
@@ -37,10 +38,14 @@ public MarkdownReportPage(PageParameters params) {
 		super(params);
 		
 		reportName = params.get(PARAM_REPORT).toString();
+		if (reportName.contains(".."))
+			throw new ExplicitException("Invalid request path");
 		
 		List<String> pathSegments = new ArrayList<>();
 		for (int i=0; i<params.getIndexedCount(); i++) {
 			String segment = params.get(i).toString();
+			if (segment.contains(".."))
+				throw new ExplicitException("Invalid request path");
 			if (segment.length() != 0)
 				pathSegments.add(segment);
 		}
