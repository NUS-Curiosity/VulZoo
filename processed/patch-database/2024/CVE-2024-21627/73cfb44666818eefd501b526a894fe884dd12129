diff --git a/classes/Validate.php b/classes/Validate.php
index 2a0e1ec4a9e08..99e6126e1e6f9 100644
--- a/classes/Validate.php
+++ b/classes/Validate.php
@@ -515,16 +515,22 @@ public static function isGenericName($name)
      */
     public static function isCleanHtml($html, $allow_iframe = false)
     {
+        // any html attribute starting with "on" (event attributes)
+        $eventAttributeRegex = '/<\s*\w+[^>]*\s(on\w+)=["\'][^"\']*["\']/ims';
+
         $events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';
         $events .= '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';
         $events .= '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';
-        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';
+        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|ondragexit|onmousewheel';
         $events .= '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';
         $events .= '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';
         $events .= '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';
         $events .= '|onpointerover|onpointerenter|onpointerdown|onpointermove|onpointerup|onpointerout|onpointerleave|onpointercancel|ongotpointercapture|onlostpointercapture';
+        $events .= '|onpagehide|onpageshow|onautocomplete|onautocompleteerror|oncanplay|oncanplaythrough|onclose|oncuechange|ondurationchange|onemptied|onended|oninvalid|onloadeddata';
+        $events .= '|onloadedmetadata|onloadstart|onpause|onplay|onplaying|onpopstate|onprogress|onratechange|onreset|onseeked|onseeking|onshow|onsort|onstalled|onstorage|onsuspend|ontimeupdate';
+        $events .= '|ontoggle|onvolumechange|onwaiting';
 
-        if (preg_match('/<[\s]*script/ims', $html) || preg_match('/(' . $events . ')[\s]*=/ims', $html) || preg_match('/.*script\:/ims', $html)) {
+        if (preg_match('/<[\s]*script/ims', $html) || preg_match($eventAttributeRegex, $html) || preg_match('/(' . $events . ')[\s]*=/ims', $html) || preg_match('/.*script\:/ims', $html)) {
             return false;
         }
 
@@ -532,6 +538,15 @@ public static function isCleanHtml($html, $allow_iframe = false)
             return false;
         }
 
+        // RLO characters detection
+        $rloCharacters = "\xE2\x80\xAE";
+
+        // Check if the RLO character is in the string
+        if (strpos($html, $rloCharacters) !== false) {
+            // RLO character found, potential RLO attack
+            return false;
+        }
+
         return true;
     }
 
diff --git a/js/admin.js b/js/admin.js
index e2e56b76ff2ed..86ab4867a6b22 100644
--- a/js/admin.js
+++ b/js/admin.js
@@ -536,11 +536,11 @@ function showRedirectProductOptions(show)
 function redirectSelectChange()
 {
   redirectTypeValue = $('#redirect_type :selected').val();
-  if (redirectTypeValue == '404' || 
-      redirectTypeValue == '410' || 
-      redirectTypeValue == 'default' || 
-      redirectTypeValue == '200-displayed' || 
-      redirectTypeValue == '404-displayed' || 
+  if (redirectTypeValue == '404' ||
+      redirectTypeValue == '410' ||
+      redirectTypeValue == 'default' ||
+      redirectTypeValue == '200-displayed' ||
+      redirectTypeValue == '404-displayed' ||
       redirectTypeValue == '410-displayed')
     showRedirectProductSelectOptions(false);
   else
@@ -1434,17 +1434,23 @@ function isCleanHtml(content)
   var events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';
   events += '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';
   events += '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';
-  events += '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';
+  events += '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|ondragexit|onmousewheel';
   events += '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';
   events += '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';
-  events += '|onselectstart|onstart|onstop';
+  events += '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';
+  events += '|onpointerover|onpointerenter|onpointerdown|onpointermove|onpointerup|onpointerout|onpointerleave|onpointercancel|ongotpointercapture|onlostpointercapture';
+  events += '|onpagehide|onpageshow|onautocomplete|onautocompleteerror|oncanplay|oncanplaythrough|onclose|oncuechange|ondurationchange|onemptied|onended|oninvalid|onloadeddata';
+  events += '|onloadedmetadata|onloadstart|onpause|onplay|onplaying|onpopstate|onprogress|onratechange|onreset|onseeked|onseeking|onshow|onsort|onstalled|onstorage|onsuspend|ontimeupdate';
+  events += '|ontoggle|onvolumechange|onwaiting';
 
   var script1 = /<[\s]*script/im;
   var script2 = new RegExp('('+events+')[\s]*=', 'im');
   var script3 = /.*script\:/im;
   var script4 = /<[\s]*(i?frame|embed|object)/im;
+  var script5 = /<\s*\w+[^>]*\s(on\w+)=["'][^"']*["']/ims;
+  var rloCharacter = "\xE2\x80\xAE";
 
-  if (script1.test(content) || script2.test(content) || script3.test(content) || script4.test(content))
+  if (script1.test(content) || script2.test(content) || script3.test(content) || script4.test(content) || script5.test(content) || content.indexOf(rloCharacter) !== -1)
     return false;
 
   return true;
diff --git a/js/tools.js b/js/tools.js
index bf1e525875ae2..9115cea93b87f 100644
--- a/js/tools.js
+++ b/js/tools.js
@@ -705,20 +705,26 @@ function in_array(value, array)
 
 function isCleanHtml(content)
 {
-	var events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';
-	events += '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';
-	events += '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';
-	events += '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';
-	events += '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';
-	events += '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';
-	events += '|onselectstart|onstart|onstop';
+  var events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';
+  events += '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';
+  events += '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';
+  events += '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|ondragexit|onmousewheel';
+  events += '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';
+  events += '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';
+  events += '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';
+  events += '|onpointerover|onpointerenter|onpointerdown|onpointermove|onpointerup|onpointerout|onpointerleave|onpointercancel|ongotpointercapture|onlostpointercapture';
+  events += '|onpagehide|onpageshow|onautocomplete|onautocompleteerror|oncanplay|oncanplaythrough|onclose|oncuechange|ondurationchange|onemptied|onended|oninvalid|onloadeddata';
+  events += '|onloadedmetadata|onloadstart|onpause|onplay|onplaying|onpopstate|onprogress|onratechange|onreset|onseeked|onseeking|onshow|onsort|onstalled|onstorage|onsuspend|ontimeupdate';
+  events += '|ontoggle|onvolumechange|onwaiting';
 
 	var script1 = /<[\s]*script/im;
 	var script2 = new RegExp('('+events+')[\s]*=', 'im');
 	var script3 = /.*script\:/im;
 	var script4 = /<[\s]*(i?frame|embed|object)/im;
+  var script5 = /<\s*\w+[^>]*\s(on\w+)=["'][^"']*["']/ims;
+  var rloCharacter = "\xE2\x80\xAE";
 
-	if (script1.test(content) || script2.test(content) || script3.test(content) || script4.test(content))
+	if (script1.test(content) || script2.test(content) || script3.test(content) || script4.test(content) || script5.test(content) || content.indexOf(rloCharacter) !== -1)
 		return false;
 
 	return true;
diff --git a/src/Core/ConstraintValidator/CleanHtmlValidator.php b/src/Core/ConstraintValidator/CleanHtmlValidator.php
index 280e6f5d42c92..55e653129359b 100644
--- a/src/Core/ConstraintValidator/CleanHtmlValidator.php
+++ b/src/Core/ConstraintValidator/CleanHtmlValidator.php
@@ -70,7 +70,19 @@ public function validate($value, Constraint $constraint)
         $containsJavascriptEvents = preg_match('/(' . $this->getJavascriptEvents() . ')[\s]*=/ims', $value);
 
         $iframe = !$this->allowEmbeddableHtml && preg_match(self::EMBEDDABLE_HTML_PATTERN, $value);
-        if ($containsScriptTags || $containsJavascriptEvents || $iframe) {
+
+        // any html attribute starting with "on" (event attributes), as a second layer protection
+        $eventAttributeRegex = '/<\s*\w+[^>]*\s(on\w+)=["\'][^"\']*["\']/ims';
+        // RLO characters detection
+        $rloCharacters = "\xE2\x80\xAE";
+
+        // Check if the RLO character is in the string
+        if (strpos($value, $rloCharacters) !== false) {
+            // RLO character found, potential RLO attack
+            return false;
+        }
+
+        if ($containsScriptTags || $containsJavascriptEvents || $iframe || preg_match($eventAttributeRegex, $value) || strpos($value, $rloCharacters) !== false) {
             $this->context->buildViolation($constraint->message)
                 ->setTranslationDomain('Admin.Notifications.Error')
                 ->setParameter('%s', $this->formatValue($value))
@@ -90,11 +102,14 @@ private function getJavascriptEvents()
         $events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';
         $events .= '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';
         $events .= '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';
-        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';
+        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|ondragexit|onmousewheel';
         $events .= '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';
         $events .= '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';
         $events .= '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';
         $events .= '|onpointerover|onpointerenter|onpointerdown|onpointermove|onpointerup|onpointerout|onpointerleave|onpointercancel|ongotpointercapture|onlostpointercapture';
+        $events .= '|onpagehide|onpageshow|onautocomplete|onautocompleteerror|oncanplay|oncanplaythrough|onclose|oncuechange|ondurationchange|onemptied|onended|oninvalid|onloadeddata';
+        $events .= '|onloadedmetadata|onloadstart|onpause|onplay|onplaying|onpopstate|onprogress|onratechange|onreset|onseeked|onseeking|onshow|onsort|onstalled|onstorage|onsuspend|ontimeupdate';
+        $events .= '|ontoggle|onvolumechange|onwaiting';
 
         return $events;
     }
diff --git a/tests/Unit/Adapter/ValidateTest.php b/tests/Unit/Adapter/ValidateTest.php
index 2692558c180b6..12875f6bba258 100644
--- a/tests/Unit/Adapter/ValidateTest.php
+++ b/tests/Unit/Adapter/ValidateTest.php
@@ -138,6 +138,20 @@ public function testisValidObjectClassName(bool $expected, string $objectClassNa
         $this->assertSame($expected, $this->validate->isValidObjectClassName($objectClassName));
     }
 
+    /**
+     * @param string $html
+     * @param bool $iframeAllowed
+     * @param $expectedResult
+     *
+     * @dataProvider isCleanHtmlDataProvider
+     *
+     * @return void
+     */
+    public function testIsCleanHtml(string $html, bool $allowFrame, $expectedResult): void
+    {
+        $this->assertSame($expectedResult, $this->validate->isCleanHtml($html, $allowFrame));
+    }
+
     public function isValidObjectClassNameDataProvider(): array
     {
         return [
@@ -153,4 +167,100 @@ public function isValidObjectClassNameDataProvider(): array
             [true, '__'],
         ];
     }
+
+    private function isCleanHtmlDataProvider()
+    {
+        return [
+            [
+                '<div randomattribute="randomvalue">test</div>', // nominal case
+                false,
+                true
+            ],
+            [
+                '<div
+
+randomattribute="anything"   attributewithoutvalue
+
+        randomattr="random value">
+
+</div>', // nominal case with added spaces and line jumps
+                false,
+                true
+            ],
+            [
+                '/form input > embed onerror iframe object', // test plain words with forbidden tag / attributes: should pass
+                false,
+                true
+            ],
+            [
+                '<a href="#" onchange="evilJavascriptIsCalled()"></a>', // event attributes are forbidden, should not pass
+                false,
+                false
+            ],
+            [
+                '<a href="#" onanything="evilJavascriptIsCalled()"></a>', // random attribute starting with on should not pass
+                false,
+                false
+            ],
+            [
+                '<a href="#" oNnotexi="evilJavascriptIsCalled()"></a>', // random attribute starting with on but case insensitive: should not pass
+                false,
+                false
+            ],
+            [
+                '<iframe src="catvideo.html" /></iframe>', // iframe forbidden
+                false,
+                false
+            ],
+            [
+                '<iframe src="catvideo.html" /></iframe>', // iframe parameter is set to true, should pass
+                true,
+                true
+            ],
+            [
+                '<form></form>', // form should not pass,
+                false,
+                false
+            ],
+            [
+                '<embed></embed>', // embed should not pass
+                false,
+                false
+            ],
+            [
+                '<input>', // input should not pass
+                false,
+                false
+            ],
+            [
+                '<script>
+
+    </script>', // script tags are forbidden, should not pass (added a random tabulation and line break
+                false,
+                false
+            ],
+            [
+                '<object></object>', // objects are forbidden, should not pass
+                false,
+                false
+            ],
+            [
+                '<div
+randomattribute="anything"
+
+    onbidule="test" attributewithoutvalue
+
+        randomattr="random value">test
+
+        </div>', // puting an attribute starting with "on" in the middle of other attributes, with spaces and line breaks: shouldn't pass
+                false,
+                false
+            ],
+            [
+                '‮<img src=x onerror="alert(\'img\')">', // test RLO xss attack
+                false,
+                false
+            ]
+        ];
+    }
 }
diff --git a/tests/Unit/Core/ConstraintValidator/CleanHtmlValidatorTest.php b/tests/Unit/Core/ConstraintValidator/CleanHtmlValidatorTest.php
index fca0ae377921c..a67b589a20b0e 100644
--- a/tests/Unit/Core/ConstraintValidator/CleanHtmlValidatorTest.php
+++ b/tests/Unit/Core/ConstraintValidator/CleanHtmlValidatorTest.php
@@ -56,6 +56,30 @@ public function testItFailsWhenJavascriptEventsAreGiven()
         ;
     }
 
+    public function testItFailsWhenAttributeStartingWithOnIsGiven()
+    {
+        $htmlTag = '<a href="#" onanything="evilJavascriptIsCalled()"></a>';
+
+        $this->validator->validate($htmlTag, new CleanHtml());
+
+        $this->buildViolation((new CleanHtml())->message)
+            ->setParameter('%s', '"' . $htmlTag . '"')
+            ->assertRaised()
+        ;
+    }
+
+    public function testCaseInsensitiveOnEventAttributeDetection()
+    {
+        $htmlTag = '<a href="#" oNnotexi="evilJavascriptIsCalled()"></a>';
+
+        $this->validator->validate($htmlTag, new CleanHtml());
+
+        $this->buildViolation((new CleanHtml())->message)
+            ->setParameter('%s', '"' . $htmlTag . '"')
+            ->assertRaised()
+        ;
+    }
+
     public function testItFailsWhenIframeIsGiven()
     {
         $htmlTag = '<iframe src="catvideo.html" /></iframe>';
@@ -138,6 +162,61 @@ public function testSucceedsWithPlainWords()
         $this->context->getViolations();
     }
 
+    public function testItSucceedsWhenRegularAttributeIsGiven()
+    {
+        $htmlTag = '<div randomattribute="blabla">test</div>';
+        $this->validator->validate($htmlTag, new CleanHtml());
+
+        $this->assertNoViolation();
+        $this->context->getViolations();
+    }
+
+    public function testSucceedsWithSpaces()
+    {
+        $htmlTag = '<div
+
+randomattribute="blabla"   attributewithoutvalue
+
+        randomattr="random value">
+
+</div>';
+        $this->validator->validate($htmlTag, new CleanHtml());
+
+        $this->assertNoViolation();
+    }
+
+    public function itFailsToHaveOnAttributeWithRandomSpacesAndLines()
+    {
+        $htmlTag = '<div
+randomattribute="blabla"
+
+    onbidule="test" attributewithoutvalue
+
+        randomattr="random value">test
+
+        </div>';
+
+        $this->buildViolation((new CleanHtml())->message)
+            ->setParameter('%s', '"' . $htmlTag . '"')
+            ->assertRaised()
+        ;
+
+        $this->context->getViolations();
+    }
+
+    public function itFailsWithRLOInjection()
+    {
+        $htmlTag = '‮<img src=x onerror="alert(\'img\')">';
+
+        $this->buildViolation((new CleanHtml())->message)
+            ->setParameter('%s', '"' . $htmlTag . '"')
+            ->assertRaised()
+        ;
+
+        $this->context->getViolations();
+
+    }
+
     protected function createValidator()
     {
         return new CleanHtmlValidator(false);
