diff --git a/.eslintrc b/.eslintrc
index e28dafb..3ba77f8 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -13,7 +13,7 @@
 		"indent": [2, 4],
 		"max-lines": 0,
 		"max-nested-callbacks": [2, 5],
-		"max-params": [2, 3],
+		"max-params": [2, 4],
 		"max-statements": [2, 20],
 		"max-statements-per-line": [2, { "max": 2 }],
 		"new-cap": [2, { "capIsNewExceptions": ["Template"] }],
diff --git a/lib/render.js b/lib/render.js
index 697ddff..fb8ef76 100644
--- a/lib/render.js
+++ b/lib/render.js
@@ -21,7 +21,7 @@ var wrapWith = function (tagName) {
                 opt.errorAfterField ? '' : errorHTML,
                 field.widget.toHTML(name, field),
                 opt.errorAfterField ? errorHTML : ''
-            ].join(''));
+            ].join(''), true);
             wrappedContent.push(fieldset);
         } else {
             var fieldHTMLs = [field.labelHTML(name, field.id), field.widget.toHTML(name, field)];
@@ -35,7 +35,7 @@ var wrapWith = function (tagName) {
             }
             wrappedContent = wrappedContent.concat(fieldHTMLs);
         }
-        return tag(tagName, { classes: field.classes() }, wrappedContent.join(''));
+        return tag(tagName, { classes: field.classes() }, wrappedContent.join(''), true);
     };
 };
 exports.div = wrapWith('div');
@@ -45,7 +45,7 @@ exports.li = wrapWith('li');
 exports.table = function (name, field, options) {
     var opt = options || {};
 
-    var th = tag('th', {}, field.labelHTML(name, field.id));
+    var th = tag('th', {}, field.labelHTML(name, field.id), true);
 
     var tdContent = field.widget.toHTML(name, field);
 
@@ -58,7 +58,7 @@ exports.table = function (name, field, options) {
         }
     }
 
-    var td = tag('td', {}, tdContent);
+    var td = tag('td', {}, tdContent, true);
 
-    return tag('tr', { classes: field.classes() }, th + td);
+    return tag('tr', { classes: field.classes() }, th + td, true);
 };
diff --git a/lib/tag.js b/lib/tag.js
index 7f7643c..7dbe7a1 100644
--- a/lib/tag.js
+++ b/lib/tag.js
@@ -50,12 +50,13 @@ var isSelfClosing = function (tagName) {
     return Object.prototype.hasOwnProperty.call(selfClosingTags, tagName);
 };
 
-var tag = function tag(tagName, attrsMap, content) {
+var tag = function tag(tagName, attrsMap, content, contentIsEscaped) {
     var safeTagName = htmlEscape(tagName);
     var attrsHTML = !is.array(attrsMap) ? attrs(attrsMap) : attrsMap.reduce(function (html, map) {
         return html + attrs(map);
     }, '');
-    return '<' + safeTagName + attrsHTML + (isSelfClosing(safeTagName) ? ' />' : '>' + content + '</' + safeTagName + '>');
+    var safeContent = contentIsEscaped ? content : htmlEscape(content);
+    return '<' + safeTagName + attrsHTML + (isSelfClosing(safeTagName) ? ' />' : '>' + safeContent + '</' + safeTagName + '>');
 };
 
 tag.attrs = attrs;
diff --git a/lib/widgets.js b/lib/widgets.js
index a8235db..c413d03 100644
--- a/lib/widgets.js
+++ b/lib/widgets.js
@@ -117,7 +117,7 @@ var select = function (isMultiple) {
             var choices = unifyChoices(f.choices, 1);
             var optionsHTML = renderChoices(choices, function render(choice) {
                 if (choice.isNested) {
-                    return tag('optgroup', { label: choice.label }, renderChoices(choice.choices, render));
+                    return tag('optgroup', { label: choice.label }, renderChoices(choice.choices, render), true);
                 } else {
                     return tag('option', { value: choice.value, selected: !!isSelected(f.value, choice.value) }, choice.label);
                 }
@@ -130,7 +130,7 @@ var select = function (isMultiple) {
             if (isMultiple) {
                 attrs.multiple = true;
             }
-            return tag('select', [attrs, userAttrs, w.attrs || {}], optionsHTML);
+            return tag('select', [attrs, userAttrs, w.attrs || {}], optionsHTML, true);
         };
         return w;
     };
diff --git a/test/test-widgets.js b/test/test-widgets.js
index ce4ef75..0f9021f 100644
--- a/test/test-widgets.js
+++ b/test/test-widgets.js
@@ -256,6 +256,16 @@ test('textarea', function (t) {
         '<textarea name="name" id="someid" rows="20" cols="80" class="one two" placeholder="hi!">value</textarea>'
     );
     t.equal(forms.widgets.textarea().type, 'textarea');
+
+    t.test('properly escapes contents', function (st) {
+        st.equal(
+            forms.widgets.textarea().toHTML('name', { value: 'Inside</textarea>Escaped the textarea!' }),
+            '<textarea name="name" id="id_name">Inside&lt;/textarea&gt;Escaped the textarea!</textarea>'
+       );
+
+        st.end();
+    });
+
     t.end();
 });
 
