diff --git a/src/lepton/bitops.cc b/src/lepton/bitops.cc
index 3032fb10..517bdced 100644
--- a/src/lepton/bitops.cc
+++ b/src/lepton/bitops.cc
@@ -356,6 +356,7 @@ bounded_iostream::bounded_iostream(Sirikata::DecoderWriter *w,
     this->size_callback = size_callback;
     buffer_position = 0;
     byte_position = 0;
+    byte_bound = 0x7FFFFFFF;
     num_bytes_attempted_to_write = 0;
     set_bound(0);
 }
@@ -384,7 +385,7 @@ void bounded_iostream::close() {
     parent->Close();
 }
 
-unsigned int bounded_iostream::write_no_buffer(const void *from, size_t bytes_to_write) {
+uint32_t bounded_iostream::write_no_buffer(const void *from, size_t bytes_to_write) {
     //return iostream::write(from,tpsize,dtsize);
     std::pair<unsigned int, Sirikata::JpegError> retval;
     if (byte_bound != 0 && byte_position + bytes_to_write > byte_bound) {
diff --git a/src/lepton/bitops.hh b/src/lepton/bitops.hh
index 2aa36e98..9cb959c7 100644
--- a/src/lepton/bitops.hh
+++ b/src/lepton/bitops.hh
@@ -467,12 +467,12 @@ class bounded_iostream
     uint8_t buffer[buffer_size];
     uint32_t buffer_position;
     Sirikata::DecoderWriter *parent;
-    unsigned int byte_bound;
-    unsigned int byte_position;
-    unsigned int num_bytes_attempted_to_write;
+    uint32_t byte_bound;
+    uint32_t byte_position;
+    uint32_t num_bytes_attempted_to_write;
     Sirikata::JpegError err;
     std::function<void(Sirikata::DecoderWriter*, size_t)> size_callback;
-    unsigned int write_no_buffer( const void* from, size_t bytes_to_write );
+    uint32_t write_no_buffer( const void* from, size_t bytes_to_write );
 public:
 	bounded_iostream( Sirikata::DecoderWriter * parent,
                       const std::function<void(Sirikata::DecoderWriter*, size_t)> &size_callback,
diff --git a/src/lepton/lepton_codec.cc b/src/lepton/lepton_codec.cc
index cbdf10f6..5442b23e 100644
--- a/src/lepton/lepton_codec.cc
+++ b/src/lepton/lepton_codec.cc
@@ -275,6 +275,7 @@ CodingReturnValue LeptonCodec::ThreadState::vp8_decode_thread(unsigned int threa
     /* deserialize each block in planar order */
 
     dev_assert(luma_splits_.size() == 2); // not ready to do multiple work items on a thread yet
+    always_assert(luma_splits_.size() >= 2);
     int min_y = luma_splits_[0];
     int max_y = luma_splits_[1];
     while(true) {
diff --git a/src/lepton/vp8_decoder.cc b/src/lepton/vp8_decoder.cc
index 412632e8..8a0cacec 100644
--- a/src/lepton/vp8_decoder.cc
+++ b/src/lepton/vp8_decoder.cc
@@ -417,6 +417,7 @@ std::vector<ThreadHandoff> VP8ComponentDecoder::initialize_decoder_state(const U
 void VP8ComponentDecoder::flush() {
         mux_splicer.drain(mux_reader_);
 }
+namespace{void nop(){}}
 CodingReturnValue VP8ComponentDecoder::decode_chunk(UncompressedComponents * const colldata)
 {
     mux_splicer.init(spin_workers_);
@@ -455,14 +456,19 @@ CodingReturnValue VP8ComponentDecoder::decode_chunk(UncompressedComponents * con
     if (do_threading_) {
         for (unsigned int thread_id = 0; thread_id < NUM_THREADS; ++thread_id) {
             unsigned int cur_spin_worker = thread_id;
-            spin_workers_[cur_spin_worker].work
-                = std::bind(worker_thread,
-                            thread_state_[thread_id],
-                            thread_id,
-                            colldata,
-                            mux_splicer.thread_target,
-                            getWorker(cur_spin_worker),
-                            &send_to_actual_thread_state);
+            if (!thread_state_[thread_id]) {
+                spin_workers_[cur_spin_worker].work
+                    = &nop;
+            } else {
+                spin_workers_[cur_spin_worker].work
+                    = std::bind(worker_thread,
+                                thread_state_[thread_id],
+                                thread_id,
+                                colldata,
+                                mux_splicer.thread_target,
+                                getWorker(cur_spin_worker),
+                                &send_to_actual_thread_state);
+            }
             spin_workers_[cur_spin_worker].activate_work();
         }
         flush();
diff --git a/src/vp8/decoder/boolreader.hh b/src/vp8/decoder/boolreader.hh
index 0d0d3313..17a9ed6a 100644
--- a/src/vp8/decoder/boolreader.hh
+++ b/src/vp8/decoder/boolreader.hh
@@ -119,7 +119,9 @@ public:
             return;
         }
         size_t del = rope[0].second-rope[0].first;
-        memcpy(dest, rope[0].first, del);
+        if (del) {
+            memcpy(dest, rope[0].first, del);
+        }
         dest += del;
         size -=del;
         if (size) {
