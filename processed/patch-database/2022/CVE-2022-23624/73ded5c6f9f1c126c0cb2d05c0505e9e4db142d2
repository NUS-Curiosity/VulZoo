diff --git a/__test__/index.spec.ts b/__test__/index.spec.ts
index 4c38c80..d28a9c1 100644
--- a/__test__/index.spec.ts
+++ b/__test__/index.spec.ts
@@ -204,6 +204,89 @@ test('POST: 400', async () => {
   ).rejects.toHaveProperty('response.status', 400)
 })
 
+test('POST: nested validation', async () => {
+  const res1 = await client.users.post({
+    body: {
+      id: 123,
+      name: 'foo',
+      location: {
+        country: 'JP',
+        stateProvince: 'Tokyo'
+      }
+    }
+  })
+  expect(res1.status).toBe(204)
+
+  // Note that extraneous properties are allowed by default
+  const res2 = await client.users.post({
+    body: {
+      id: 123,
+      name: 'foo',
+      location: {
+        country: 'JP',
+        stateProvince: 'Tokyo',
+        extra1: {
+          extra1a: 'bar',
+          extra1b: 'baz'
+        }
+      },
+      extra2: 'qux'
+    } as any
+  })
+  expect(res2.status).toBe(204)
+})
+
+test('POST: 400 (nested validation)', async () => {
+  // id is not a number
+  await expect(
+    client.users.post({
+      body: {
+        id: '123',
+        name: 'foo',
+        location: {
+          country: 'JP',
+          stateProvince: 'Tokyo'
+        }
+      } as any
+    })
+  ).rejects.toHaveProperty('response.status', 400)
+
+  // location is missing
+  await expect(
+    client.users.post({
+      body: { id: 123, name: 'foo' } as any
+    })
+  ).rejects.toHaveProperty('response.status', 400)
+
+  // country is not a valid 2-letter country code
+  await expect(
+    client.users.post({
+      body: {
+        id: 123,
+        name: 'foo',
+        location: {
+          country: 'XX',
+          stateProvince: 'Tokyo'
+        }
+      } as any
+    })
+  ).rejects.toHaveProperty('response.status', 400)
+
+  // stateProvince is not a string
+  await expect(
+    client.users.post({
+      body: {
+        id: 123,
+        name: 'foo',
+        location: {
+          country: 'JP',
+          stateProvince: 1234
+        }
+      } as any
+    })
+  ).rejects.toHaveProperty('response.status', 400)
+})
+
 test('controller dependency injection', async () => {
   let val = 0
   const id = '5'
diff --git a/package.json b/package.json
index 0ab5f02..94c2aac 100644
--- a/package.json
+++ b/package.json
@@ -97,6 +97,7 @@
     "@typescript-eslint/eslint-plugin": "^4.28.1",
     "@typescript-eslint/parser": "^4.28.1",
     "axios": "^0.21.1",
+    "class-transformer": "^0.5.1",
     "class-validator": "^0.13.1",
     "eslint": "^7.30.0",
     "eslint-config-prettier": "^8.3.0",
@@ -111,6 +112,7 @@
     "multer": "^1.4.2",
     "node-fetch": "^2.6.1",
     "prettier": "^2.3.2",
+    "reflect-metadata": "^0.1.13",
     "rimraf": "^3.0.2",
     "standard-version": "^9.3.0",
     "ts-jest": "^27.0.3",
diff --git a/servers/all/$server.ts b/servers/all/$server.ts
index cbd4b70..782bf50 100644
--- a/servers/all/$server.ts
+++ b/servers/all/$server.ts
@@ -1,13 +1,17 @@
 /* eslint-disable */
 // prettier-ignore
+import 'reflect-metadata'
+// prettier-ignore
+import { ClassTransformOptions, plainToInstance } from 'class-transformer'
+// prettier-ignore
+import { validateOrReject, ValidatorOptions } from 'class-validator'
+// prettier-ignore
 import path from 'path'
 // prettier-ignore
 import express, { Express, RequestHandler, Request } from 'express'
 // prettier-ignore
 import multer, { Options } from 'multer'
 // prettier-ignore
-import { validateOrReject, ValidatorOptions } from 'class-validator'
-// prettier-ignore
 import fastJson, { Schema } from 'fast-json-stringify'
 // prettier-ignore
 import * as Validators from './validators'
@@ -47,6 +51,7 @@ import type { LowerHttpMethod, AspidaMethods, HttpStatusOk, AspidaMethodParams }
 // prettier-ignore
 export type FrourioOptions = {
   basePath?: string
+  transformer?: ClassTransformOptions
   validator?: ValidatorOptions
   multer?: Options
 }
@@ -305,6 +310,7 @@ const asyncMethodToHandlerWithSchema = (
 // prettier-ignore
 export default (app: Express, options: FrourioOptions = {}) => {
   const basePath = options.basePath ?? ''
+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }
   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }
   const hooks0 = hooksFn0(app)
   const hooks1 = hooksFn1(app)
@@ -332,7 +338,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     callParserIfExistsQuery(parseNumberTypeQueryParams([['requiredNum', false, false], ['optionalNum', true, false], ['optionalNumArr', true, true], ['emptyNum', true, false], ['requiredNumArr', false, true]])),
     callParserIfExistsQuery(parseBooleanTypeQueryParams([['bool', false, false], ['optionalBool', true, false], ['boolArray', false, true], ['optionalBoolArray', true, true]])),
     createValidateHandler(req => [
-      Object.keys(req.query).length ? validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions) : null
+      Object.keys(req.query).length ? validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions) : null
     ]),
     asyncMethodToHandlerWithSchema(controller0.get, responseSchema0.get)
   ])
@@ -346,8 +352,8 @@ export default (app: Express, options: FrourioOptions = {}) => {
     uploader,
     formatMulterData([]),
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions),
-      validateOrReject(Object.assign(new Validators.Body(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions),
+      validateOrReject(plainToInstance(Validators.Body, req.body, transformerOptions), validatorOptions)
     ]),
     methodToHandler(controller0.post)
   ])
@@ -372,7 +378,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     uploader,
     formatMulterData([['requiredArr', false], ['optionalArr', true], ['empty', true], ['vals', false], ['files', false]]),
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.MultiForm(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.MultiForm, req.body, transformerOptions), validatorOptions)
     ]),
     methodToHandler(controller3.post)
   ])
@@ -417,7 +423,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     hooks0.preParsing,
     parseJSONBoby,
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.UserInfo(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.UserInfo, req.body, transformerOptions), validatorOptions)
     ]),
     ...ctrlHooks1.preHandler,
     methodToHandler(controller7.post)
diff --git a/servers/all/api/users/_userId@number/controller.ts b/servers/all/api/users/_userId@number/controller.ts
index c6acbb2..5889807 100644
--- a/servers/all/api/users/_userId@number/controller.ts
+++ b/servers/all/api/users/_userId@number/controller.ts
@@ -5,5 +5,15 @@ export type AdditionalRequest = {
 }
 
 export default defineController(() => ({
-  get: ({ params }) => ({ status: 200, body: { id: params.userId, name: 'bbb' } })
+  get: ({ params }) => ({
+    status: 200,
+    body: {
+      id: params.userId,
+      name: 'bbb',
+      location: {
+        country: 'JP',
+        stateProvince: 'Tokyo'
+      }
+    }
+  })
 }))
diff --git a/servers/all/api/users/controller.ts b/servers/all/api/users/controller.ts
index 0cad61d..acef73b 100644
--- a/servers/all/api/users/controller.ts
+++ b/servers/all/api/users/controller.ts
@@ -16,6 +16,18 @@ const hooks = defineHooks(() => ({
 export { hooks, AdditionalRequest }
 
 export default defineController(() => ({
-  get: async () => ({ status: 200, body: [{ id: 1, name: 'aa' }] }),
+  get: async () => ({
+    status: 200,
+    body: [
+      {
+        id: 1,
+        name: 'aa',
+        location: {
+          country: 'JP',
+          stateProvince: 'Tokyo'
+        }
+      }
+    ]
+  }),
   post: () => ({ status: 204 })
 }))
diff --git a/servers/all/validators/index.ts b/servers/all/validators/index.ts
index 2397f34..68e5116 100644
--- a/servers/all/validators/index.ts
+++ b/servers/all/validators/index.ts
@@ -1,3 +1,4 @@
+import { Type } from 'class-transformer'
 import {
   IsNumberString,
   IsBooleanString,
@@ -8,7 +9,10 @@ import {
   IsString,
   Allow,
   IsOptional,
-  ArrayNotEmpty
+  ArrayNotEmpty,
+  IsISO31661Alpha2,
+  ValidateNested,
+  IsObject
 } from 'class-validator'
 import type { ReadStream } from 'fs'
 
@@ -52,12 +56,27 @@ export class Body {
   file: File | ReadStream
 }
 
+export class UserInfoLocation {
+  @IsISO31661Alpha2()
+  country: string
+
+  @IsString()
+  stateProvince: string
+}
+
 export class UserInfo {
   @IsInt()
   id: number
 
   @MaxLength(20)
   name: string
+
+  // @Type decorator is required to validate nested object properly
+  // @IsObject decorator is required or class-validator will not throw an error when the property is missing
+  @ValidateNested()
+  @IsObject()
+  @Type(() => UserInfoLocation)
+  location: UserInfoLocation
 }
 
 export class MultiForm {
diff --git a/servers/noMulter/$server.ts b/servers/noMulter/$server.ts
index 4cde229..509d6a3 100644
--- a/servers/noMulter/$server.ts
+++ b/servers/noMulter/$server.ts
@@ -1,9 +1,13 @@
 /* eslint-disable */
 // prettier-ignore
-import express, { Express, RequestHandler, Request } from 'express'
+import 'reflect-metadata'
+// prettier-ignore
+import { ClassTransformOptions, plainToInstance } from 'class-transformer'
 // prettier-ignore
 import { validateOrReject, ValidatorOptions } from 'class-validator'
 // prettier-ignore
+import express, { Express, RequestHandler, Request } from 'express'
+// prettier-ignore
 import * as Validators from './validators'
 // prettier-ignore
 import hooksFn0 from './api/hooks'
@@ -27,6 +31,7 @@ import type { LowerHttpMethod, AspidaMethods, HttpStatusOk, AspidaMethodParams }
 // prettier-ignore
 export type FrourioOptions = {
   basePath?: string
+  transformer?: ClassTransformOptions
   validator?: ValidatorOptions
 }
 
@@ -144,6 +149,7 @@ const asyncMethodToHandler = (
 // prettier-ignore
 export default (app: Express, options: FrourioOptions = {}) => {
   const basePath = options.basePath ?? ''
+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }
   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }
   const hooks0 = hooksFn0(app)
   const hooks1 = hooksFn1(app)
@@ -160,7 +166,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     hooks0.onRequest,
     ctrlHooks0.onRequest,
     createValidateHandler(req => [
-      Object.keys(req.query).length ? validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions) : null
+      Object.keys(req.query).length ? validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions) : null
     ]),
     asyncMethodToHandler(controller0.get)
   ])
@@ -170,8 +176,8 @@ export default (app: Express, options: FrourioOptions = {}) => {
     ctrlHooks0.onRequest,
     parseJSONBoby,
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions),
-      validateOrReject(Object.assign(new Validators.Body(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions),
+      validateOrReject(plainToInstance(Validators.Body, req.body, transformerOptions), validatorOptions)
     ]),
     methodToHandler(controller0.post)
   ])
@@ -209,7 +215,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     hooks1.onRequest,
     parseJSONBoby,
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.UserInfo(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.UserInfo, req.body, transformerOptions), validatorOptions)
     ]),
     ...ctrlHooks1.preHandler,
     methodToHandler(controller4.post)
diff --git a/servers/noTypedParams/$server.ts b/servers/noTypedParams/$server.ts
index f7aff89..6e09091 100644
--- a/servers/noTypedParams/$server.ts
+++ b/servers/noTypedParams/$server.ts
@@ -1,13 +1,17 @@
 /* eslint-disable */
 // prettier-ignore
+import 'reflect-metadata'
+// prettier-ignore
+import { ClassTransformOptions, plainToInstance } from 'class-transformer'
+// prettier-ignore
+import { validateOrReject, ValidatorOptions } from 'class-validator'
+// prettier-ignore
 import path from 'path'
 // prettier-ignore
 import express, { Express, RequestHandler, Request } from 'express'
 // prettier-ignore
 import multer, { Options } from 'multer'
 // prettier-ignore
-import { validateOrReject, ValidatorOptions } from 'class-validator'
-// prettier-ignore
 import * as Validators from './validators'
 // prettier-ignore
 import hooksFn0 from './api/hooks'
@@ -33,6 +37,7 @@ import type { LowerHttpMethod, AspidaMethods, HttpStatusOk, AspidaMethodParams }
 // prettier-ignore
 export type FrourioOptions = {
   basePath?: string
+  transformer?: ClassTransformOptions
   validator?: ValidatorOptions
   multer?: Options
 }
@@ -174,6 +179,7 @@ const asyncMethodToHandler = (
 // prettier-ignore
 export default (app: Express, options: FrourioOptions = {}) => {
   const basePath = options.basePath ?? ''
+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }
   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }
   const hooks0 = hooksFn0(app)
   const hooks1 = hooksFn1(app)
@@ -191,7 +197,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     hooks0.onRequest,
     ctrlHooks0.onRequest,
     createValidateHandler(req => [
-      Object.keys(req.query).length ? validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions) : null
+      Object.keys(req.query).length ? validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions) : null
     ]),
     asyncMethodToHandler(controller0.get)
   ])
@@ -202,8 +208,8 @@ export default (app: Express, options: FrourioOptions = {}) => {
     uploader,
     formatMulterData([]),
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.Query(), req.query), validatorOptions),
-      validateOrReject(Object.assign(new Validators.Body(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.Query, req.query, transformerOptions), validatorOptions),
+      validateOrReject(plainToInstance(Validators.Body, req.body, transformerOptions), validatorOptions)
     ]),
     methodToHandler(controller0.post)
   ])
@@ -218,7 +224,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     uploader,
     formatMulterData([['empty', false], ['vals', false], ['files', false]]),
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.MultiForm(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.MultiForm, req.body, transformerOptions), validatorOptions)
     ]),
     methodToHandler(controller2.post)
   ])
@@ -251,7 +257,7 @@ export default (app: Express, options: FrourioOptions = {}) => {
     hooks1.onRequest,
     parseJSONBoby,
     createValidateHandler(req => [
-      validateOrReject(Object.assign(new Validators.UserInfo(), req.body), validatorOptions)
+      validateOrReject(plainToInstance(Validators.UserInfo, req.body, transformerOptions), validatorOptions)
     ]),
     ...ctrlHooks1.preHandler,
     methodToHandler(controller5.post)
diff --git a/src/buildServerFile.ts b/src/buildServerFile.ts
index cbd9b6d..aefc242 100644
--- a/src/buildServerFile.ts
+++ b/src/buildServerFile.ts
@@ -1,6 +1,7 @@
 import path from 'path'
 import { addPrettierIgnore } from './addPrettierIgnore'
 import createControllersText from './createControllersText'
+import checkRequisites from './checkRequisites'
 
 const genHandlerText = (isAsync: boolean) => `
 const ${isAsync ? 'asyncM' : 'm'}ethodToHandler = (
@@ -77,13 +78,19 @@ export default (input: string, project?: string) => {
   const hasMethodToHandlerWithSchema = controllers.includes(' methodToHandlerWithSchema(')
   const hasAsyncMethodToHandlerWithSchema = controllers.includes(' asyncMethodToHandlerWithSchema(')
 
+  checkRequisites({ hasValidator })
+
   return {
-    text: addPrettierIgnore(`/* eslint-disable */${hasMulter ? "\nimport path from 'path'" : ''}
+    text: addPrettierIgnore(`/* eslint-disable */${
+      hasValidator
+        ? "\nimport 'reflect-metadata'" +
+          "\nimport { ClassTransformOptions, plainToInstance } from 'class-transformer'" +
+          "\nimport { validateOrReject, ValidatorOptions } from 'class-validator'"
+        : ''
+    }${hasMulter ? "\nimport path from 'path'" : ''}
 import ${hasJSONBody ? 'express, ' : ''}{ Express, RequestHandler${
       hasValidator ? ', Request' : ''
     } } from 'express'${hasMulter ? "\nimport multer, { Options } from 'multer'" : ''}${
-      hasValidator ? "\nimport { validateOrReject, ValidatorOptions } from 'class-validator'" : ''
-    }${
       hasMethodToHandlerWithSchema || hasAsyncMethodToHandlerWithSchema
         ? "\nimport fastJson, { Schema } from 'fast-json-stringify'"
         : ''
@@ -94,7 +101,7 @@ ${hasValidator ? `import * as Validators from './validators'\n` : ''}${imports}$
 
 export type FrourioOptions = {
   basePath?: string
-${hasValidator ? '  validator?: ValidatorOptions\n' : ''}${
+${hasValidator ? '  transformer?: ClassTransformOptions\n  validator?: ValidatorOptions\n' : ''}${
       hasMulter
         ? `  multer?: Options
 }
@@ -299,7 +306,8 @@ export default (app: Express, options: FrourioOptions = {}) => {
   const basePath = options.basePath ?? ''
 ${
   hasValidator
-    ? '  const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\n'
+    ? '  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }\n' +
+      '  const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\n'
     : ''
 }${consts}${
       hasMulter
diff --git a/src/checkRequisites.ts b/src/checkRequisites.ts
new file mode 100644
index 0000000..71da0ac
--- /dev/null
+++ b/src/checkRequisites.ts
@@ -0,0 +1,21 @@
+const shouldRequirePacakge = (name: string) => {
+  try {
+    require.resolve(name)
+  } catch (e: unknown) {
+    if (e instanceof Error && (e as any).code === 'MODULE_NOT_FOUND') {
+      console.warn(
+        `[WARN] Package "${name}" is necessary but not importable. Did you forget to install?`
+      )
+    } else {
+      throw e
+    }
+  }
+}
+
+export default ({ hasValidator }: { hasValidator: boolean }): void => {
+  if (hasValidator) {
+    shouldRequirePacakge('class-validator')
+    shouldRequirePacakge('class-transformer')
+    shouldRequirePacakge('reflect-metadata')
+  }
+}
diff --git a/src/createControllersText.ts b/src/createControllersText.ts
index 59b1f75..6d6cc95 100644
--- a/src/createControllersText.ts
+++ b/src/createControllersText.ts
@@ -470,9 +470,9 @@ ${validateInfo
     v.type
       ? `      ${
           v.hasQuestion ? `Object.keys(req.${v.name}).length ? ` : ''
-        }validateOrReject(Object.assign(new Validators.${checker.typeToString(v.type)}(), req.${
+        }validateOrReject(plainToInstance(Validators.${checker.typeToString(v.type)}, req.${
           v.name
-        }), validatorOptions)${v.hasQuestion ? ' : null' : ''}`
+        }, transformerOptions), validatorOptions)${v.hasQuestion ? ' : null' : ''}`
       : ''
   )
   .join(',\n')}\n    ])`
diff --git a/yarn.lock b/yarn.lock
index e6e8db9..f093384 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1682,6 +1682,11 @@ cjs-module-lexer@^1.0.0:
   resolved "https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-1.2.1.tgz#2fd46d9906a126965aa541345c499aaa18e8cd73"
   integrity sha512-jVamGdJPDeuQilKhvVn1h3knuMOZzr8QDnpk+M9aMlCaMkTDd6fBWPhiDqFvFZ07pL0liqabAiuy8SY4jGHeaw==
 
+class-transformer@^0.5.1:
+  version "0.5.1"
+  resolved "https://registry.yarnpkg.com/class-transformer/-/class-transformer-0.5.1.tgz#24147d5dffd2a6cea930a3250a677addf96ab336"
+  integrity sha512-SQa1Ws6hUbfC98vKGxZH3KFY0Y1lm5Zm0SY8XX9zbK7FJCyVEac3ATW0RIpwzW+oOfmHE5PMPufDG9hCfoEOMw==
+
 class-validator@^0.13.1:
   version "0.13.1"
   resolved "https://registry.yarnpkg.com/class-validator/-/class-validator-0.13.1.tgz#381b2001ee6b9e05afd133671fbdf760da7dec67"
@@ -4931,6 +4936,11 @@ redent@^3.0.0:
     indent-string "^4.0.0"
     strip-indent "^3.0.0"
 
+reflect-metadata@^0.1.13:
+  version "0.1.13"
+  resolved "https://registry.yarnpkg.com/reflect-metadata/-/reflect-metadata-0.1.13.tgz#67ae3ca57c972a2aa1642b10fe363fe32d49dc08"
+  integrity sha512-Ts1Y/anZELhSsjMcU605fU9RE4Oi3p5ORujwbIKXfWa+0Zxs510Qrmrce5/Jowq3cHSZSJqBjypxmHarc+vEWg==
+
 regexpp@^3.0.0, regexpp@^3.1.0:
   version "3.1.0"
   resolved "https://registry.yarnpkg.com/regexpp/-/regexpp-3.1.0.tgz#206d0ad0a5648cffbdb8ae46438f3dc51c9f78e2"
