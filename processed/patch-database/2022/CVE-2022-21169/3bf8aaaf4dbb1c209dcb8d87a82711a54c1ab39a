diff --git a/.eslintrc.json b/.eslintrc.json
index c581a21..04c375c 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -21,6 +21,7 @@
         "prettier/prettier": ["error"],
         "quotes": "off",
         "strict": "off",
-        "prefer-arrow-callback":"off"
+        "prefer-arrow-callback":"off",
+        "operator-linebreak": "off"
     }
 }
diff --git a/lib/sanitize.js b/lib/sanitize.js
index c4ac5ea..53ae75f 100644
--- a/lib/sanitize.js
+++ b/lib/sanitize.js
@@ -4,12 +4,19 @@ const sanitizeHtml = require("sanitize-html");
 
 const initializeOptions = (options) => {
   const sanitizerOptions = {};
-  if (Array.isArray(options.allowedTags) && options.allowedTags.length > 0) {
+  if (
+    Object.hasOwn(options, "allowedTags") &&
+    Array.isArray(options.allowedTags) &&
+    options.allowedTags.length > 0
+  ) {
     sanitizerOptions.allowedTags = options.allowedTags;
   }
   return {
     allowedKeys:
-      (Array.isArray(options.allowedKeys) && options.allowedKeys) || [],
+      (Object.hasOwn(options, "allowedKeys") &&
+        Array.isArray(options.allowedKeys) &&
+        options.allowedKeys) ||
+      [],
     sanitizerOptions,
   };
 };
diff --git a/test/test.js b/test/test.js
index 0b90d5c..4dca36a 100644
--- a/test/test.js
+++ b/test/test.js
@@ -1222,4 +1222,34 @@ describe("Express xss Sanitize", function () {
       });
     });
   });
+
+  describe("Sanitize data with custom options as function", function () {
+    describe("Sanitize simple object", function () {
+      it("should sanitize dirty body.", function (done) {
+        expect(sanitize({
+          a: "<script>Test</script>",
+          b: '<p onclick="return;">Test</p>',
+          c: '<img src="/"/>',
+        }, { allowedKeys: ["c"] })).to.eql({
+          a: "",
+          b: "<p>Test</p>",
+          c: '<img src="/"/>',
+        });
+        done();
+      });
+    });
+
+    describe("XSS bypass by using prototype pollution issue", function () {
+      it("should sanitize dirty data after prototype pollution.", function (done) {
+        // eslint-disable-next-line no-extend-native
+        Object.prototype.allowedTags = ['script'];
+        expect(sanitize({
+          a: "<script>Test</script>",
+        }, {})).to.eql({
+          a: "",
+        });
+        done();
+      });
+    });
+  });
 });
