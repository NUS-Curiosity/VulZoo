diff --git a/lam-packaging/RPM/lam.apache.conf b/lam-packaging/RPM/lam.apache.conf
index 2eddb62a5..b46ffa907 100644
--- a/lam-packaging/RPM/lam.apache.conf
+++ b/lam-packaging/RPM/lam.apache.conf
@@ -10,6 +10,22 @@ Alias /lam /usr/share/ldap-account-manager
 
 <Directory /var/lib/ldap-account-manager/tmp>
   Options -Indexes
+  <Files ~ ".*\.php.*">
+    Require all denied
+  </Files>
+  <Files ~ ".*\.inc">
+    Require all denied
+  </Files>
+</Directory>
+
+<Directory /usr/share/ldap-account-manager/tmp>
+  Options -Indexes
+  <Files ~ ".*\.php.*">
+    Require all denied
+  </Files>
+  <Files ~ ".*\.inc">
+    Require all denied
+  </Files>
 </Directory>
 
 <Directory /var/lib/ldap-account-manager/tmp/internal>
@@ -17,16 +33,31 @@ Alias /lam /usr/share/ldap-account-manager
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/tmp/internal>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /var/lib/ldap-account-manager/sess>
   Options -Indexes
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/sess>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /var/lib/ldap-account-manager/config>
   Options -Indexes
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/config>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /usr/share/ldap-account-manager/lib>
   Options -Indexes
   Require all denied
diff --git a/lam-packaging/RPM/lam.nginx.conf b/lam-packaging/RPM/lam.nginx.conf
index 6929826ae..667bdab46 100644
--- a/lam-packaging/RPM/lam.nginx.conf
+++ b/lam-packaging/RPM/lam.nginx.conf
@@ -3,6 +3,16 @@ location /lam {
 	alias /usr/share/ldap-account-manager;
 	autoindex off;
 
+	location ~ /lam/tmp/.*\.(php|inc)$ {
+		deny all;
+		return 403;
+	}
+
+	location ~ /lam/(tmp/internal|sess|config|lib|help|locale) {
+		deny all;
+		return 403;
+	}
+
 	location ~ \.php$ {
 		fastcgi_split_path_info ^(.+\.php)(/.+)$;
 		fastcgi_pass unix:/var/run/php7-fpm.sock;
@@ -11,9 +21,4 @@ location /lam {
 		fastcgi_param SCRIPT_FILENAME $request_filename;
 	}
 
-	location ~ /lam/(tmp/internal|sess|config|lib|help|locale) {
-		deny all;
-		return 403;
-	}
-
 }
diff --git a/lam-packaging/debian/lam.apache.conf b/lam-packaging/debian/lam.apache.conf
index 2eddb62a5..b46ffa907 100644
--- a/lam-packaging/debian/lam.apache.conf
+++ b/lam-packaging/debian/lam.apache.conf
@@ -10,6 +10,22 @@ Alias /lam /usr/share/ldap-account-manager
 
 <Directory /var/lib/ldap-account-manager/tmp>
   Options -Indexes
+  <Files ~ ".*\.php.*">
+    Require all denied
+  </Files>
+  <Files ~ ".*\.inc">
+    Require all denied
+  </Files>
+</Directory>
+
+<Directory /usr/share/ldap-account-manager/tmp>
+  Options -Indexes
+  <Files ~ ".*\.php.*">
+    Require all denied
+  </Files>
+  <Files ~ ".*\.inc">
+    Require all denied
+  </Files>
 </Directory>
 
 <Directory /var/lib/ldap-account-manager/tmp/internal>
@@ -17,16 +33,31 @@ Alias /lam /usr/share/ldap-account-manager
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/tmp/internal>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /var/lib/ldap-account-manager/sess>
   Options -Indexes
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/sess>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /var/lib/ldap-account-manager/config>
   Options -Indexes
   Require all denied
 </Directory>
 
+<Directory /usr/share/ldap-account-manager/config>
+  Options -Indexes
+  Require all denied
+</Directory>
+
 <Directory /usr/share/ldap-account-manager/lib>
   Options -Indexes
   Require all denied
diff --git a/lam-packaging/debian/lam.nginx.conf b/lam-packaging/debian/lam.nginx.conf
index d11bd0b94..4fc844394 100644
--- a/lam-packaging/debian/lam.nginx.conf
+++ b/lam-packaging/debian/lam.nginx.conf
@@ -3,10 +3,9 @@ location /lam {
 	alias /usr/share/ldap-account-manager;
 	autoindex off;
 
-	location ~ \.php$ {
-		include snippets/fastcgi-php.conf;
-		fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
-		fastcgi_param SCRIPT_FILENAME $request_filename;
+	location ~ /lam/tmp/.*\.(php|inc)$ {
+		deny all;
+		return 403;
 	}
 
 	location ~ /lam/(tmp/internal|sess|config|lib|help|locale) {
@@ -14,4 +13,10 @@ location /lam {
 		return 403;
 	}
 
+	location ~ \.php$ {
+		include snippets/fastcgi-php.conf;
+		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
+		fastcgi_param SCRIPT_FILENAME $request_filename;
+	}
+
 }
diff --git a/lam/HISTORY b/lam/HISTORY
index e626e74b5..a3aec9792 100644
--- a/lam/HISTORY
+++ b/lam/HISTORY
@@ -1,4 +1,4 @@
-June 2022 8.0
+27.06.2022 8.0
   - PHP 8.1 compatibility
   - Extended user account status and locking options
   - Unix: added Gecos to profile editor
@@ -13,11 +13,16 @@ June 2022 8.0
    -> Hidden account is displayed (257)
    -> Change of RDN failed for OpenLDAP entries
    -> Tree view issues with browser auto-completion (176)
+   -> Unauthenticated Arbitrary Object Instantiation / Unauthenticated Remote Code Execution (GHSA-r387-grjx-qgvw, CVE-2022-31084)
+   -> Incorrect Default Permissions (GHSA-q8g5-45m4-q95p, CVE-2022-31087)
+   -> Incorrect Regular Expressions (GHSA-q9pc-x84w-982x, CVE-2022-31086)
+   -> Unauthenticated LDAP Injection (GHSA-wxf8-9x99-6gp4, CVE-2022-31088)
+   -> Reflected XSS (Internet Explorer only) (GHSA-6m3q-5c84-6h6j, CVE-2022-31085)
 
 
 15.04.2022 7.9.1
   - Fixed bugs:
-   -> Security issues in PDF editor and profile editor
+   -> Security issues in PDF editor and profile editor (GHSA-f2fr-cccr-583v, CVE-2022-24851)
 
 
 09.03.2022 7.9
diff --git a/lam/docs/manual-sources/chapter-configuration.xml b/lam/docs/manual-sources/chapter-configuration.xml
index ddf997d1c..84b0b9df1 100644
--- a/lam/docs/manual-sources/chapter-configuration.xml
+++ b/lam/docs/manual-sources/chapter-configuration.xml
@@ -119,14 +119,6 @@
       LAM via an untrusted IP only get blank pages. There is a separate field
       for LAM Pro self service.</para>
 
-      <para id="sessionEncryption">Session encryption will encrypt sensitive
-      data like passwords in your session files. This is only available when
-      PHP <ulink
-      url="http://php.net/manual/en/book.openssl.php">OpenSSL</ulink> is
-      active. This adds extra security but also costs performance. If you
-      manage a large directory you might want to disable this and take other
-      actions to secure your LAM server.</para>
-
       <screenshot>
         <mediaobject>
           <imageobject>
diff --git a/lam/help/help.inc b/lam/help/help.inc
index db52f3a35..fbd5c1202 100644
--- a/lam/help/help.inc
+++ b/lam/help/help.inc
@@ -164,8 +164,6 @@ $helpArray = array (
 					"Text" => _("Here you can specify minimum requirements for passwords. The character classes are: lowercase, uppercase, numeric and symbols.")),
 				"244" => array ("Headline" => _('PHP error reporting'),
 					"Text" => _('Defines if the PHP error reporting setting from php.ini is used or the setting preferred by LAM ("E_ALL & ~E_NOTICE"). If you do not develop LAM modules please use the default. This will prevent displaying messages that are useful only for developers.')),
-				"245" => array ("Headline" => _('Encrypt session'),
-					"Text" => _('Encrypts sensitive data like passwords in your session. This requires the PHP OpenSSL extension.')),
 				"246" => array ("Headline" => _('Number of rules that must match'),
 					"Text" => _('Specifies the number of above password rules that must be fulfilled.')),
 				"247" => array ("Headline" => _('Password must not contain user name'),
diff --git a/lam/lib/account.inc b/lam/lib/account.inc
index 352828a66..4f06eee9a 100644
--- a/lam/lib/account.inc
+++ b/lam/lib/account.inc
@@ -176,16 +176,9 @@ function pwd_hash($password, $enabled = true, $hashType = 'SSHA') {
 			break;
 		case 'PBKDF2-SHA512':
 			$iterations = 200000;
-			if (function_exists('openssl_pbkdf2')) {
-				$salt = openssl_random_pseudo_bytes(16);
-				$hashBinary = openssl_pbkdf2($password, $salt, 64, $iterations, 'sha512');
-				$hash = "{PBKDF2-SHA512}${iterations}" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);
-			}
-			else {
-				$salt = generateSalt(16);
-				$hashBinary = hex2bin(hash_pbkdf2('sha512', $password, $salt, $iterations));
-				$hash = "{PBKDF2-SHA512}${iterations}" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);
-			}
+			$salt = openssl_random_pseudo_bytes(16);
+			$hashBinary = openssl_pbkdf2($password, $salt, 64, $iterations, 'sha512');
+			$hash = "{PBKDF2-SHA512}${iterations}" . '$' . base64_encode($salt) . '$' . base64_encode($hashBinary);
 			break;
 		case 'MD5':
 			$hash = "{MD5}" . base64_encode(hex2bin(md5($password)));
@@ -251,11 +244,7 @@ function getHashType(?string $hash): string {
  * @return array hash types
  */
 function getSupportedHashTypes() {
-	$hashes = array('CRYPT', 'CRYPT-SHA512', 'SHA', 'SSHA', 'MD5', 'SMD5', 'PLAIN', 'SASL', 'K5KEY', 'LDAP_EXOP', 'ARGON2ID');
-	if (function_exists('openssl_pbkdf2') || function_exists('hash_pbkdf2')) {
-		$hashes[] = 'PBKDF2-SHA512';
-	}
-	return $hashes;
+	return array('CRYPT', 'CRYPT-SHA512', 'SHA', 'SSHA', 'MD5', 'SMD5', 'PLAIN', 'SASL', 'K5KEY', 'LDAP_EXOP', 'ARGON2ID', 'PBKDF2-SHA512');
 }
 
 /**
@@ -1576,8 +1565,12 @@ class moduleCache {
 	 *
 	 * @param String $name module name
 	 * @param String $scope module scope (e.g. user)
+	 * @return null|object module object
 	 */
-	public static function getModule($name, $scope) {
+	public static function getModule($name, $scope): ?object {
+		if (!ScopeAndModuleValidation::isValidModuleName($name) || !ScopeAndModuleValidation::isValidScopeName($scope)) {
+			return null;
+		}
 		if (isset(self::$cache[$name . ':' . $scope])) {
 			return self::$cache[$name . ':' . $scope];
 		}
@@ -1598,10 +1591,7 @@ class moduleCache {
  * @return int random number
  */
 function getRandomNumber() {
-	if (function_exists('openssl_random_pseudo_bytes')) {
-		return abs(hexdec(bin2hex(openssl_random_pseudo_bytes(5))));
-	}
-	return abs(mt_rand());
+	return abs(hexdec(bin2hex(openssl_random_pseudo_bytes(5))));
 }
 
 /**
diff --git a/lam/lib/config.inc b/lam/lib/config.inc
index ceb1abb20..a975cd760 100644
--- a/lam/lib/config.inc
+++ b/lam/lib/config.inc
@@ -2963,9 +2963,6 @@ class LAMCfgMain {
 	/** list of hosts which may access LAM Pro self service */
 	public $allowedHostsSelfService;
 
-	/** session encryption */
-	public $encryptSession;
-
 	/** minimum length for passwords */
 	public $passwordMinLength = 0;
 
@@ -3062,7 +3059,7 @@ class LAMCfgMain {
 		"passwordMinClasses", "passwordMinSymbol", 'checkedRulesCount',
 		'passwordMustNotContainUser', 'passwordMustNotContain3Chars',
 		'externalPwdCheckUrl',
-		'errorReporting', 'encryptSession', 'allowedHostsSelfService',
+		'errorReporting', 'allowedHostsSelfService',
 		'license', 'licenseEmailFrom', 'licenseEmailTo', 'licenseWarningType', 'licenseEmailDateSent',
 		'mailServer', 'mailUser', 'mailPassword', 'mailEncryption', 'configDatabaseType',
 		'configDatabaseServer', 'configDatabasePort', 'configDatabaseName', 'configDatabaseUser',
@@ -3094,7 +3091,6 @@ class LAMCfgMain {
 		$this->logDestination = "SYSLOG";
 		$this->allowedHosts = "";
 		$this->allowedHostsSelfService = '';
-		$this->encryptSession = 'true';
 		try {
 			$this->reload();
 		} catch (LAMException $e) {
@@ -3370,9 +3366,6 @@ class LAMCfgMain {
 			if (!in_array("allowedHostsSelfService", $saved)) {
 				array_push($file_array, "allowedHostsSelfService: " . $this->allowedHostsSelfService . "\n");
 			}
-			if (!in_array("encryptSession", $saved)) {
-				array_push($file_array, "encryptSession: " . $this->encryptSession . "\n");
-			}
 			if (!in_array("passwordMinLength", $saved)) {
 				array_push($file_array, "passwordMinLength: " . $this->passwordMinLength . "\n");
 			}
diff --git a/lam/lib/modules.inc b/lam/lib/modules.inc
index 90a21ee63..01cd8abe8 100644
--- a/lam/lib/modules.inc
+++ b/lam/lib/modules.inc
@@ -306,6 +306,9 @@ function getAvailableModules($scope, $mustSupportAdminInterface = false) {
 		if ((substr($entry, strlen($entry) - 4, 4) == '.inc') && is_file($dirname . '/'.$entry)) {
 			$entry = substr($entry, 0, strpos($entry, '.'));
 			$temp = moduleCache::getModule($entry, $scope);
+			if ($temp === null) {
+				continue;
+			}
 			if ($mustSupportAdminInterface && !$temp->supportsAdminInterface()) {
 				continue;
 			}
@@ -399,7 +402,7 @@ function checkConfigOptions($scopes, &$options) {
 * @param string $scope account type
 * @return array help entry
 */
-function getHelp($module,$helpID,$scope='') {
+function getHelp($module, $helpID, $scope) {
 	global $helpArray;
 	if (!isset($module) || ($module == '') || ($module == 'main')) {
 		$helpPath = "../help/help.inc";
@@ -411,9 +414,6 @@ function getHelp($module,$helpID,$scope='') {
 		}
 		return $helpArray[$helpID];
 	}
-	if (empty($scope)) {
-		$scope = 'none';
-	}
 	$moduleObject = moduleCache::getModule($module, $scope);
 	return $moduleObject->get_help($helpID);
 }
@@ -2854,3 +2854,72 @@ class AccountStatusDetails {
 
 }
 
+/**
+ * Validation of scope and module names.
+ */
+class ScopeAndModuleValidation {
+
+	private static $cachedModuleNames = null;
+
+	private static $cachedScopeNames = null;
+
+	const REGEX_SCOPE = "/^[a-z0-9_-]+$/i";
+	const REGEX_MODULE = "/^[a-z0-9_-]+$/i";
+
+	/**
+	 * Checks if the provided scope name is valid.
+	 *
+	 * @param string $scope scope name
+	 * @return bool is existing
+	 */
+	public static function isValidScopeName(string $scope): bool {
+		if (!preg_match(self::REGEX_SCOPE, $scope)) {
+			return false;
+		}
+		if (self::$cachedScopeNames === null) {
+			$dirname = dirname(__FILE__) . "/types";
+			$dir = dir($dirname);
+			$scopeNames = array();
+			while ($entry = $dir->read()) {
+				if ((substr($entry, strlen($entry) - 4, 4) === '.inc')
+					&& (is_file($dirname . '/'.$entry) || is_link($dirname . '/'.$entry))) {
+					$entry = substr($entry, 0, -4);
+					if (preg_match(self::REGEX_SCOPE, $entry)) {
+						$scopeNames[] = $entry;
+					}
+				}
+			}
+			self::$cachedScopeNames = $scopeNames;
+		}
+		return in_array($scope, self::$cachedScopeNames);
+	}
+
+	/**
+	 * Checks if the provided module name is valid.
+	 *
+	 * @param string $moduleName module name
+	 * @return bool is existing
+	 */
+	public static function isValidModuleName(string $moduleName): bool {
+		if (!preg_match(self::REGEX_MODULE, $moduleName)) {
+			return false;
+		}
+		if (self::$cachedModuleNames === null) {
+			$dirname = dirname(__FILE__) . "/modules";
+			$dir = dir($dirname);
+			$moduleNames = array();
+			while ($entry = $dir->read()) {
+				if ((substr($entry, strlen($entry) - 4, 4) === '.inc')
+					&& (is_file($dirname . '/' . $entry) || is_link($dirname . '/' . $entry))) {
+					$entry = substr($entry, 0, -4);
+					if (preg_match(self::REGEX_MODULE, $entry)) {
+						$moduleNames[] = $entry;
+					}
+				}
+			}
+			self::$cachedModuleNames = $moduleNames;
+		}
+		return in_array($moduleName, self::$cachedModuleNames);
+	}
+
+}
diff --git a/lam/lib/modules/inetOrgPerson.inc b/lam/lib/modules/inetOrgPerson.inc
index 5b7407ac5..9d2010f28 100644
--- a/lam/lib/modules/inetOrgPerson.inc
+++ b/lam/lib/modules/inetOrgPerson.inc
@@ -1894,21 +1894,19 @@ class inetOrgPerson extends baseModule implements passwordService,AccountStatusP
 				$table->addElement($link);
 				$deleteButton = new htmlAccountPageButton(get_class($this), 'userCertificate', 'delete_' . $i, 'del.svg', true);
 				$table->addElement($deleteButton);
-				if (function_exists('openssl_x509_parse')) {
-					$pem = @chunk_split(@base64_encode($this->attributes['userCertificate;binary'][$i]), 64, "\n");
-					if (!empty($pem)) {
-						$pem = "-----BEGIN CERTIFICATE-----\n" . $pem . "-----END CERTIFICATE-----\n";
-						$pemData = @openssl_x509_parse($pem);
-						$data = array();
-						if (isset($pemData['serialNumber'])) {
-							$data[] = $pemData['serialNumber'];
-						}
-						if (isset($pemData['name'])) {
-							$data[] = $pemData['name'];
-						}
-						if (sizeof($data) > 0) {
-							$table->addElement(new htmlOutputText(implode(': ', $data)));
-						}
+				$pem = @chunk_split(@base64_encode($this->attributes['userCertificate;binary'][$i]), 64, "\n");
+				if (!empty($pem)) {
+					$pem = "-----BEGIN CERTIFICATE-----\n" . $pem . "-----END CERTIFICATE-----\n";
+					$pemData = @openssl_x509_parse($pem);
+					$data = array();
+					if (isset($pemData['serialNumber'])) {
+						$data[] = $pemData['serialNumber'];
+					}
+					if (isset($pemData['name'])) {
+						$data[] = $pemData['name'];
+					}
+					if (sizeof($data) > 0) {
+						$table->addElement(new htmlOutputText(implode(': ', $data)));
 					}
 				}
 				$table->addNewLine();
@@ -3215,22 +3213,20 @@ class inetOrgPerson extends baseModule implements passwordService,AccountStatusP
 				fwrite($out, $userCertificates[$i]);
 				fclose ($out);
 				$path = '../../tmp/' . $filename;
-				if (function_exists('openssl_x509_parse')) {
-					$pem = @chunk_split(@base64_encode($userCertificates[$i]), 64, "\n");
-					if (!empty($pem)) {
-						$pem = "-----BEGIN CERTIFICATE-----\n" . $pem . "-----END CERTIFICATE-----\n";
-						$pemData = @openssl_x509_parse($pem);
-						$data = array();
-						if (isset($pemData['serialNumber'])) {
-							$data[] = $pemData['serialNumber'];
-						}
-						if (isset($pemData['name'])) {
-							$data[] = $pemData['name'];
-						}
-						if (sizeof($data) > 0) {
-							$group->addElement(new htmlOutputText(implode(': ', $data)));
-							$group->addElement(new htmlSpacer('5px', null));
-						}
+				$pem = @chunk_split(@base64_encode($userCertificates[$i]), 64, "\n");
+				if (!empty($pem)) {
+					$pem = "-----BEGIN CERTIFICATE-----\n" . $pem . "-----END CERTIFICATE-----\n";
+					$pemData = @openssl_x509_parse($pem);
+					$data = array();
+					if (isset($pemData['serialNumber'])) {
+						$data[] = $pemData['serialNumber'];
+					}
+					if (isset($pemData['name'])) {
+						$data[] = $pemData['name'];
+					}
+					if (sizeof($data) > 0) {
+						$group->addElement(new htmlOutputText(implode(': ', $data)));
+						$group->addElement(new htmlSpacer('5px', null));
 					}
 				}
 				$saveLink = new htmlLink('', $path, '../../graphics/save.svg');
diff --git a/lam/lib/pdfstruct.inc b/lam/lib/pdfstruct.inc
index 752689453..d94f0a720 100644
--- a/lam/lib/pdfstruct.inc
+++ b/lam/lib/pdfstruct.inc
@@ -17,7 +17,7 @@ use function LAM\PERSISTENCE\dbTableExists;
 /*
   This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)
   Copyright (C) 2003 - 2006  Michael Duergner
-                2011 - 2021  Roland Gruber
+                2011 - 2022  Roland Gruber
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
@@ -276,10 +276,10 @@ class PdfStructurePersistenceManager {
 	 * @throws LAMException error saving logo
 	 */
 	public function savePdfLogo(string $confName, string $name, string $data) : void {
-		if (!LAMConfig::isValidName($confName) || !$this->isValidLogoFileName($name)) {
+		if (!LAMConfig::isValidName($confName)) {
 			throw new LAMException(_('Unable to upload logo file.'));
 		}
-		if (!preg_match('/[a-zA-Z0-9_-]+\\.(png)|(jpg)/i', $name)) {
+		if (!$this->isValidLogoFileName($name)) {
 			throw new LAMException(_('Unable to upload logo file.'), _('The file name must end with ".png" or ".jpg".'));
 		}
 		$this->strategy->savePdfLogo($confName, $name, $data);
@@ -358,7 +358,7 @@ class PdfStructurePersistenceManager {
 	 * @return boolean is valid
 	 */
 	private function isValidPDFStructureName(string $name) : bool {
-		return preg_match('/^[a-z0-9\-\_]+$/i', $name) === 1;
+		return preg_match('/^[a-z0-9_-]+$/i', $name) === 1;
 	}
 
 	/**
@@ -368,7 +368,7 @@ class PdfStructurePersistenceManager {
 	 * @return bool valid
 	 */
 	private function isValidLogoFileName(string $fileName) : bool {
-		return preg_match('/[a-zA-Z0-9_-]+\\.(png)|(jpg)/i', $fileName);
+		return preg_match('/^[a-z0-9_-]+\\.(png|jpg)$/im', $fileName) === 1;
 	}
 
 	/**
diff --git a/lam/lib/security.inc b/lam/lib/security.inc
index 75b6dbd27..486a97ea4 100644
--- a/lam/lib/security.inc
+++ b/lam/lib/security.inc
@@ -181,10 +181,8 @@ function logoffAndBackToLoginPage() {
 		logNewMessage(LOG_WARNING, 'Self service session of DN ' . lamDecrypt($_SESSION['selfService_clientDN'], 'SelfService') . ' expired.');
 	}
 	// delete key and iv in cookie
-	if (function_exists('openssl_random_pseudo_bytes')) {
-		setcookie("Key", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
-		setcookie("IV", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
-	}
+	setcookie("Key", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
+	setcookie("IV", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
 	// link back to login page
 	$paths = array('./', '../', '../../', '../../../', '../../../../');
 	$page = 'login.php';
@@ -701,25 +699,12 @@ function setLAMHeaders() {
 * @param string $prefix prefix for cookie names
 * @return object encrypted string
 */
-function lamEncrypt($data, $prefix='') {
-	// use OpenSSL if available
-	if (function_exists('openssl_random_pseudo_bytes')) {
-		// OpenSSL may have been enabled in a running session
-		if (!isset($_COOKIE[$prefix . "IV"])
-				|| ($_COOKIE[$prefix . "IV"] == '')
-				|| ($_COOKIE[$prefix . "IV"] == "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")) {
-			return $data;
-		}
-		// read key and iv from cookie
-		$iv = base64_decode($_COOKIE[$prefix . "IV"]);
-		$key = base64_decode($_COOKIE[$prefix . "Key"]);
-		// encrypt string
-		return openssl_encrypt(base64_encode($data), lamEncryptionAlgo(), $key, 0, $iv);
-	}
-	// otherwise do not encrypt
-	else {
-		return $data;
-	}
+function lamEncrypt($data, $prefix = '') {
+	// read key and iv from cookie
+	$iv = base64_decode($_COOKIE[$prefix . "IV"]);
+	$key = base64_decode($_COOKIE[$prefix . "Key"]);
+	// encrypt string
+	return openssl_encrypt(base64_encode($data), lamEncryptionAlgo(), $key, 0, $iv);
 }
 
 /**
@@ -730,25 +715,12 @@ function lamEncrypt($data, $prefix='') {
 * @return string decrypted string
 */
 function lamDecrypt($data, $prefix='') {
-	// use OpenSSL if available
-	if (function_exists('openssl_random_pseudo_bytes')) {
-		// OpenSSL may have been enabled in a running session
-		if (!isset($_COOKIE[$prefix . "IV"])
-				|| ($_COOKIE[$prefix . "IV"] == '')
-				|| ($_COOKIE[$prefix . "IV"] == "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")) {
-			return $data;
-		}
-		// read key and iv from cookie
-		$iv = base64_decode($_COOKIE[$prefix . "IV"]);
-		$key = base64_decode($_COOKIE[$prefix . "Key"]);
-		// decrypt string
-		$ret = openssl_decrypt($data, lamEncryptionAlgo(), $key, 0, $iv);
-		return base64_decode(str_replace(chr(00), "", $ret));
-	}
-	// otherwise do not decrypt
-	else {
-		return $data;
-	}
+	// read key and iv from cookie
+	$iv = base64_decode($_COOKIE[$prefix . "IV"]);
+	$key = base64_decode($_COOKIE[$prefix . "Key"]);
+	// decrypt string
+	$ret = openssl_decrypt($data, lamEncryptionAlgo(), $key, 0, $iv);
+	return base64_decode(str_replace(chr(00), "", $ret));
 }
 
 /**
diff --git a/lam/templates/config/mainmanage.php b/lam/templates/config/mainmanage.php
index c5e391e89..492328e0a 100644
--- a/lam/templates/config/mainmanage.php
+++ b/lam/templates/config/mainmanage.php
@@ -198,14 +198,6 @@
 		}
 		$cfg->allowedHostsSelfService = $allowedHostsSelfService;
 	}
-	// set session encryption
-	if (function_exists('openssl_random_pseudo_bytes')) {
-		$encryptSession = 'false';
-		if (isset($_POST['encryptSession']) && ($_POST['encryptSession'] == 'on')) {
-			$encryptSession = 'true';
-		}
-		$cfg->encryptSession = $encryptSession;
-	}
 	// set log level
 	$cfg->logLevel = $_POST['logLevel'];
 	// set log destination
@@ -442,10 +434,6 @@
 	if (isLAMProVersion()) {
 		$row->add(new htmlResponsiveInputTextarea('allowedHostsSelfService', implode("\n", explode(",", $cfg->allowedHostsSelfService)), null, '7', _("Allowed hosts (self service)"), '241'), 12);
 	}
-	$encryptSession = ($cfg->encryptSession === 'true');
-	$encryptSessionBox = new htmlResponsiveInputCheckbox('encryptSession', $encryptSession, _('Encrypt session'), '245');
-	$encryptSessionBox->setIsEnabled(function_exists('openssl_random_pseudo_bytes'));
-	$row->add($encryptSessionBox, 12);
 	// SSL certificate
 	$row->addVerticalSpacer('1rem');
 	$row->addLabel(new htmlOutputText(_('SSL certificates')));
diff --git a/lam/templates/help.php b/lam/templates/help.php
index 0d2754ddd..69d8c740a 100644
--- a/lam/templates/help.php
+++ b/lam/templates/help.php
@@ -24,6 +24,8 @@
   LDAP Account Manager display help pages.
 */
 
+use ScopeAndModuleValidation;
+
 /**
  * LDAP Account Manager help page.
  *
@@ -116,15 +118,22 @@ function displayHelp(array $helpEntry): void {
 // module help
 if (isset($_GET['module']) && !($_GET['module'] == 'main') && !($_GET['module'] == '')) {
 	include_once(__DIR__ . "/../lib/modules.inc");
-	if (isset($_GET['scope'])) {
-		$helpEntry = getHelp($_GET['module'],$_GET['HelpNumber'],$_GET['scope']);
-	}
-	else {
-		$helpEntry = getHelp($_GET['module'],$_GET['HelpNumber']);
+	$moduleName = $_GET['module'];
+	if (!ScopeAndModuleValidation::isValidModuleName($moduleName)) {
+	    logNewMessage(LOG_ERR, 'Invalid module name: ' . $moduleName);
+	    die();
+    }
+	if (!empty($_GET['scope'])) {
+	    $scope = $_GET['scope'];
+	    if (!ScopeAndModuleValidation::isValidScopeName($scope)) {
+		    logNewMessage(LOG_ERR, 'Invalid scope name: ' . $scope);
+		    die();
+        }
+		$helpEntry = getHelp($moduleName, $_GET['HelpNumber'], $scope);
 	}
 	if (!$helpEntry) {
-		$variables = array(htmlspecialchars($_GET['HelpNumber']), htmlspecialchars($_GET['module']));
-		$errorMessage = _("Sorry this help id ({bold}%s{endbold}) is not available for this module ({bold}%s{endbold}).");
+		$variables = array(htmlspecialchars($_GET['HelpNumber']), htmlspecialchars($moduleName));
+		$errorMessage = _("Sorry the help id '%s' is not available for the module '%s'.");
 		echoHTMLHead();
 		statusMessage("ERROR", "", $errorMessage, $variables);
 		echoHTMLFoot();
diff --git a/lam/templates/login.php b/lam/templates/login.php
index 080c0a57a..60a051dc8 100644
--- a/lam/templates/login.php
+++ b/lam/templates/login.php
@@ -174,10 +174,10 @@
 $_SESSION['header'] .= "<meta name=\"robots\" content=\"noindex, nofollow\">\n";
 $_SESSION['header'] .= "<meta http-equiv=\"content-type\" content=\"text/html; charset=" . $encoding . "\">\n";
 $_SESSION['header'] .= "<meta http-equiv=\"pragma\" content=\"no-cache\">\n		<meta http-equiv=\"cache-control\" content=\"no-cache\">";
-$manifestUrl = str_replace('/templates/login.php', '', getCallingURL());
-$manifestUrl = preg_replace('/http(s)?:\\/\\/([^\\/])+/', '', $manifestUrl);
-$manifestUrl = preg_replace('/\\?.*/', '', $manifestUrl);
-$_SESSION['header'] .= '<link rel="manifest" href="' . $manifestUrl . '/templates/manifest.php" crossorigin="use-credentials">';
+$urlMatches = array();
+if (preg_match('/http(s)?:\\/\\/[^\\/]+(\\/.*)\/templates\/login.php.*/', getCallingURL(), $urlMatches)) {
+	$_SESSION['header'] .= '<link rel="manifest" href="' . $urlMatches[2] . '/templates/manifest.php" crossorigin="use-credentials">';
+}
 
 setlanguage(); // setting correct language
 
@@ -195,13 +195,11 @@ function display_LoginPage($licenseValidator, $error_message, $errorDetails = nu
 	$cfgMain = $_SESSION["cfgMain"];
 	logNewMessage(LOG_DEBUG, "Display login page");
 	// generate 256 bit key and initialization vector for user/passwd-encryption
-	if (function_exists('openssl_random_pseudo_bytes') && ($cfgMain->encryptSession == 'true')) {
-		$key = openssl_random_pseudo_bytes(32);
-		$iv = openssl_random_pseudo_bytes(16);
-		// save both in cookie
-		setcookie("Key", base64_encode($key), 0, "/", '', false, true);
-		setcookie("IV", base64_encode($iv), 0, "/", '', false, true);
-	}
+    $key = openssl_random_pseudo_bytes(32);
+    $iv = openssl_random_pseudo_bytes(16);
+    // save both in cookie
+    setcookie("Key", base64_encode($key), 0, "/", '', false, true);
+    setcookie("IV", base64_encode($iv), 0, "/", '', false, true);
 
 	$serverProfilePersistenceManager = new ServerProfilePersistenceManager();
 	$profiles = $serverProfilePersistenceManager->getProfiles();
@@ -537,7 +535,7 @@ function displayLoginHeader() : void {
     $searchLDAP = null;
 	if ($_SESSION['config']->getLoginMethod() == LAMConfig::LOGIN_SEARCH) {
 		$searchFilter = $_SESSION['config']->getLoginSearchFilter();
-		$searchFilter = str_replace('%USER%', $username, $searchFilter);
+		$searchFilter = str_replace('%USER%', ldap_escape($username, '', LDAP_ESCAPE_FILTER), $searchFilter);
 		$searchDN = '';
 		$searchPassword = '';
 		$configLoginSearchDn = $_SESSION['config']->getLoginSearchDN();
diff --git a/lam/templates/logout.php b/lam/templates/logout.php
index f7c62c62c..a6fc21807 100644
--- a/lam/templates/logout.php
+++ b/lam/templates/logout.php
@@ -29,10 +29,8 @@
 
 
 // delete key and iv in cookie
-if (function_exists('openssl_random_pseudo_bytes')) {
-	setcookie("Key", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
-	setcookie("IV", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
-}
+setcookie("Key", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
+setcookie("IV", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 0, "/", '', false, true);
 
 /** security functions */
 include_once(__DIR__ . "/../lib/security.inc");
diff --git a/lam/templates/manifest.php b/lam/templates/manifest.php
index 6e9b71a38..34c1c3826 100644
--- a/lam/templates/manifest.php
+++ b/lam/templates/manifest.php
@@ -3,7 +3,7 @@
 /*
 
   This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)
-  Copyright (C) 2019  Roland Gruber
+  Copyright (C) 2019 - 2022  Roland Gruber
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
@@ -37,10 +37,14 @@
 	header('Content-Type: application/json; charset=utf-8');
 }
 
-$baseUrl = getCallingURL();
-$baseUrl = str_replace('/templates/manifest.php', '', $baseUrl);
-$baseUrl = preg_replace('/\\?.*/', '', $baseUrl);
-$baseUrl = preg_replace('/http(s)?:\\/\\/([^\\/])+/', '', $baseUrl);
+$urlMatches = array();
+if (preg_match('/http(s)?:\\/\\/[^\\/]+(\\/.*)\/templates\/manifest.php.*/', getCallingURL(), $urlMatches)) {
+	$baseUrl = $urlMatches[2];
+}
+else {
+	logNewMessage('Unable to get base URL from ' . getCallingURL());
+	exit();
+}
 
 echo '{
   "short_name": "LAM",
diff --git a/lam/tests/lib/ModulesTest.php b/lam/tests/lib/ModulesTest.php
new file mode 100644
index 000000000..2752d10ca
--- /dev/null
+++ b/lam/tests/lib/ModulesTest.php
@@ -0,0 +1,51 @@
+<?php
+use PHPUnit\Framework\TestCase;
+/*
+ This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)
+ Copyright (C) 2022  Roland Gruber
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+ */
+
+include_once __DIR__ . '/../../lib/modules.inc';
+
+/**
+ * modules.inc test cases.
+ *
+ * @author Roland Gruber
+ */
+class ModulesTest extends TestCase {
+
+	/**
+	 * Tests unformatShortFormatToSeconds() without characters.
+	 */
+	function testScopeAndModuleValidation() {
+		$this->assertTrue(ScopeAndModuleValidation::isValidModuleName('posixAccount'));
+		$this->assertTrue(ScopeAndModuleValidation::isValidModuleName('inetOrgPerson'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('notExistingModule'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('.'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidModuleName('abc/def'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidModuleName("posixAccount\n"));
+
+		$this->assertTrue(ScopeAndModuleValidation::isValidScopeName('user'));
+		$this->assertTrue(ScopeAndModuleValidation::isValidScopeName('group'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('notExistingScope'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('.'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidScopeName('abc/def'));
+		$this->assertFalse(ScopeAndModuleValidation::isValidScopeName("user\n"));
+	}
+
+}
diff --git a/lam/tmp/.htaccess b/lam/tmp/.htaccess
index 5a928f6da..efda821a8 100644
--- a/lam/tmp/.htaccess
+++ b/lam/tmp/.htaccess
@@ -1 +1,7 @@
 Options -Indexes
+<Files ~ ".*\.php.*">
+    Require all denied
+</Files>
+<Files ~ ".*\.inc">
+    Require all denied
+</Files>
