diff --git a/Dockerfile b/Dockerfile
index 77ce6ccc89..e2edc43c97 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -74,6 +74,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \
         vim \
         mime-support \
         postgresql-client \
+        libmagic1 \
         libxmlsec1 \
         libxmlsec1-openssl \
         gettext \
diff --git a/INSTALL.rst b/INSTALL.rst
index d7b68944f0..ad39d58c8b 100644
--- a/INSTALL.rst
+++ b/INSTALL.rst
@@ -17,13 +17,14 @@ You need the following libraries and/or programs:
 * `Python`_ 3.8 or above
 * Python `Virtualenv`_ and `Pip`_
 * `PostgreSQL`_ 10 or above
-* `Node.js`_ (LTS version, see the Dockerfile for version information)
+* `Node.js`_ (LTS version, see ``.nvmrc`` for version information)
 * `npm`_
 * `yarn`_
 
 You will also need the following libraries:
 
 * pkg-config
+* libmagic1
 * libxml2-dev
 * libxmlsec1-dev
 * libxmlsec1-openssl
diff --git a/requirements/base.in b/requirements/base.in
index 2395a8538b..e6a3dbb63e 100644
--- a/requirements/base.in
+++ b/requirements/base.in
@@ -10,11 +10,12 @@ lxml
 O365  # microsoft graph
 phonenumbers
 Pillow  # handle images
+portalocker[redis]
 psycopg2  # database driver
 pytz  # handle timezones
 python-dotenv  # environment variables for secrets
 python-decouple  # processing of envvar configs
-portalocker[redis]
+python-magic
 tablib[xlsx]
 xmltodict
 self-certifi
diff --git a/requirements/base.txt b/requirements/base.txt
index e25dace33e..8b0a35d023 100644
--- a/requirements/base.txt
+++ b/requirements/base.txt
@@ -316,6 +316,8 @@ python-decouple==3.3
     # via -r requirements/base.in
 python-dotenv==0.14.0
     # via -r requirements/base.in
+python-magic==0.4.27
+    # via -r requirements/base.in
 python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537
     # via -r requirements/base.in
 pytz==2021.3
diff --git a/requirements/ci.txt b/requirements/ci.txt
index 982039c62d..1b909a44fd 100644
--- a/requirements/ci.txt
+++ b/requirements/ci.txt
@@ -622,6 +622,10 @@ python-dotenv==0.14.0
     # via
     #   -c requirements/base.txt
     #   -r requirements/base.txt
+python-magic==0.4.27
+    # via
+    #   -c requirements/base.txt
+    #   -r requirements/base.txt
 python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537
     # via
     #   -c requirements/base.txt
diff --git a/requirements/dev.txt b/requirements/dev.txt
index 6cbac59766..b3eebe274c 100644
--- a/requirements/dev.txt
+++ b/requirements/dev.txt
@@ -737,6 +737,10 @@ python-dotenv==0.14.0
     # via
     #   -c requirements/ci.txt
     #   -r requirements/ci.txt
+python-magic==0.4.27
+    # via
+    #   -c requirements/ci.txt
+    #   -r requirements/ci.txt
 python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537
     # via
     #   -c requirements/ci.txt
diff --git a/src/openforms/submissions/attachments.py b/src/openforms/submissions/attachments.py
index 09ce7ab478..804f1750eb 100644
--- a/src/openforms/submissions/attachments.py
+++ b/src/openforms/submissions/attachments.py
@@ -1,5 +1,6 @@
 import os.path
 import re
+from collections import defaultdict
 from datetime import timedelta
 from typing import Iterable, Optional, Tuple
 from urllib.parse import urlparse
@@ -9,9 +10,11 @@
 from django.urls import Resolver404, resolve
 from django.utils.translation import gettext as _
 
+import magic
 import PIL
 from glom import glom
 from PIL import Image
+from rest_framework.exceptions import ValidationError
 
 from openforms.api.exceptions import RequestEntityTooLarge
 from openforms.conf.utils import Filesize
@@ -85,6 +88,7 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:
     uploads = resolve_uploads_from_data(components, submission_step.data)
 
     result = list()
+    validation_errors = defaultdict(list)
     for key, (component, uploads) in uploads.items():
         # grab resize settings
         resize_apply = glom(component, "of.image.resize.apply", default=False)
@@ -94,6 +98,7 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:
                 component, "of.image.resize.height", default=DEFAULT_IMAGE_MAX_SIZE[1]
             ),
         )
+        allowed_mime_types = glom(component, "file.type", default=[])
         file_max_size = file_size_cast(
             glom(component, "fileMaxSize", default="") or settings.MAX_FILE_UPLOAD_SIZE
         )
@@ -112,6 +117,28 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:
                     ),
                 )
 
+            # perform content type validation
+            with upload.content.open("rb") as infile:
+                # 2048 bytes per recommendation of python-magic
+                file_mime_type = magic.from_buffer(infile.read(2048), mime=True)
+
+            invalid_file_type_error = ValidationError(
+                _("The file '{filename}' is not a valid file type.").format(
+                    filename=upload.file_name
+                ),
+                code="invalid",
+            )
+
+            if upload.content_type != file_mime_type:
+                validation_errors[key].append(invalid_file_type_error)
+                continue
+
+            # if no allowed_mime_types are defined on the file component, then all filetypes
+            # are allowed and we skip validation.
+            if allowed_mime_types and file_mime_type not in allowed_mime_types:
+                validation_errors[key].append(invalid_file_type_error)
+                continue
+
             file_name = append_file_num_postfix(
                 upload.file_name, base_name, i, len(uploads)
             )
@@ -126,6 +153,9 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:
                 # see https://github.com/open-formulieren/open-forms/issues/507
                 resize_submission_attachment.delay(attachment.id, resize_size)
 
+    if validation_errors:
+        raise ValidationError(validation_errors)
+
     return result
 
 
diff --git a/src/openforms/submissions/models/submission_files.py b/src/openforms/submissions/models/submission_files.py
index 1ee456f4e5..8a2d132561 100644
--- a/src/openforms/submissions/models/submission_files.py
+++ b/src/openforms/submissions/models/submission_files.py
@@ -95,19 +95,18 @@ def create_from_upload(
                 False,
             )
         except self.model.DoesNotExist:
-            return (
-                self.create(
+            with upload.content.open("rb") as content:
+                instance = self.create(
                     submission_step=submission_step,
                     temporary_file=upload,
                     form_key=form_key,
                     # wrap in File() so it will be physically copied
-                    content=File(upload.content, name=upload.file_name),
+                    content=File(content, name=upload.file_name),
                     content_type=upload.content_type,
                     original_name=upload.file_name,
                     file_name=file_name,
-                ),
-                True,
-            )
+                )
+            return (instance, True)
 
 
 class SubmissionFileAttachment(DeleteFileFieldFilesMixin, models.Model):
diff --git a/src/openforms/submissions/tests/factories.py b/src/openforms/submissions/tests/factories.py
index a70322adcd..7b4d844009 100644
--- a/src/openforms/submissions/tests/factories.py
+++ b/src/openforms/submissions/tests/factories.py
@@ -5,6 +5,7 @@
 from django.utils import timezone
 
 import factory
+import magic
 from glom import PathAccessError, glom
 
 from openforms.forms.models import FormVariable
@@ -188,12 +189,16 @@ class Meta:
 
 class TemporaryFileUploadFactory(factory.django.DjangoModelFactory):
     file_name = factory.Faker("file_name")
-    content_type = factory.Faker("mime_type")
     content = factory.django.FileField(filename="file.dat", data=b"content")
 
     class Meta:
         model = TemporaryFileUpload
 
+    @factory.lazy_attribute
+    def content_type(self) -> str:
+        buffer = self.content.read(2048)
+        return magic.from_buffer(buffer, mime=True)
+
 
 class SubmissionFileAttachmentFactory(factory.django.DjangoModelFactory):
     submission_step = factory.SubFactory(SubmissionStepFactory)
diff --git a/src/openforms/submissions/tests/files/README.md b/src/openforms/submissions/tests/files/README.md
new file mode 100644
index 0000000000..874a3e771d
--- /dev/null
+++ b/src/openforms/submissions/tests/files/README.md
@@ -0,0 +1,5 @@
+# Test files
+
+- `image-256x256.png` is a 256px red square.
+- `image-256x256.pdf` is the same file as `image-256x256.png` but pretends to be a PDF by extension.
+  This file is used for content-type validation.
diff --git a/src/openforms/submissions/tests/files/image-256x256.pdf b/src/openforms/submissions/tests/files/image-256x256.pdf
new file mode 100644
index 0000000000..0d1bf1988f
Binary files /dev/null and b/src/openforms/submissions/tests/files/image-256x256.pdf differ
diff --git a/src/openforms/submissions/tests/test_submission_attachment.py b/src/openforms/submissions/tests/test_submission_attachment.py
index 448278241f..68291ff74a 100644
--- a/src/openforms/submissions/tests/test_submission_attachment.py
+++ b/src/openforms/submissions/tests/test_submission_attachment.py
@@ -1,12 +1,14 @@
 import os
+from pathlib import Path
 from unittest.mock import patch
 
 from django.core.files import File
-from django.test import TestCase, override_settings
+from django.test import TestCase, override_settings, tag
 from django.urls import reverse
 
 from PIL import Image, UnidentifiedImageError
 from privates.test import temp_private_root
+from rest_framework.exceptions import ValidationError
 
 from openforms.accounts.tests.factories import SuperUserFactory
 from openforms.api.exceptions import RequestEntityTooLarge
@@ -30,14 +32,16 @@
 )
 from .mixins import VariablesTestMixin
 
+TEST_FILES_DIR = Path(__file__).parent / "files"
+
 
 @temp_private_root()
 class SubmissionAttachmentTest(VariablesTestMixin, TestCase):
     @classmethod
     def setUpTestData(cls):
-        cls.test_image_path = os.path.join(
-            os.path.dirname(__file__), "files", "image-256x256.png"
-        )
+        super().setUpTestData()
+
+        cls.test_image_path = (TEST_FILES_DIR / "image-256x256.png").resolve()
 
     def test_resolve_uploads_from_formio_data(self):
         upload = TemporaryFileUploadFactory.create()
@@ -332,6 +336,165 @@ def test_attach_upload_larger_than_configured_max_size_raises_413(self):
         with self.assertRaises(RequestEntityTooLarge):
             attach_uploads_to_submission_step(submission_step)
 
+    @tag("GHSA-h85r-xv4w-cg8g")
+    def test_attach_upload_validates_file_content_types_malicious_content(self):
+        """
+        Regression test for CVE-2022-31041 to ensure the file content is validated
+        against the formio configuration.
+
+        We cannot rely on file extension or browser mime-type. Therefore, we have a test
+        file that claims to be a PDF but is actually an image that we put in the upload
+        data. The step attaching the uploads to the form data must validate the
+        configuration.
+        """
+        with open(TEST_FILES_DIR / "image-256x256.pdf", "rb") as infile:
+            upload1 = TemporaryFileUploadFactory.create(
+                file_name="my-pdf.pdf",
+                content=File(infile),
+                content_type="application/pdf",
+            )
+            upload2 = TemporaryFileUploadFactory.create(
+                file_name="my-pdf2.pdf", content=File(infile), content_type="image/png"
+            )
+
+        data = {
+            "my_file": [
+                {
+                    "url": f"http://server/api/v1/submissions/files/{upload1.uuid}",
+                    "data": {
+                        "url": f"http://server/api/v1/submissions/files/{upload1.uuid}",
+                        "form": "",
+                        "name": "my-pdf.pdf",
+                        "size": 585,
+                        "baseUrl": "http://server",
+                        "project": "",
+                    },
+                    "name": "my-pdf-12305610-2da4-4694-a341-ccb919c3d543.png",
+                    "size": 585,
+                    "type": "application/pdf",  # we are lying!
+                    "storage": "url",
+                    "originalName": "my-pdf.pdf",
+                },
+                {
+                    "url": f"http://server/api/v1/submissions/files/{upload2.uuid}",
+                    "data": {
+                        "url": f"http://server/api/v1/submissions/files/{upload2.uuid}",
+                        "form": "",
+                        "name": "my-pdf2.pdf",
+                        "size": 585,
+                        "baseUrl": "http://server",
+                        "project": "",
+                    },
+                    "name": "my-pdf2-12305610-2da4-4694-a341-ccb919c3d543.png",
+                    "size": 585,
+                    "type": "image/png",  # we are lying!
+                    "storage": "url",
+                    "originalName": "my-pdf2.pdf",
+                },
+            ],
+        }
+        formio_components = {
+            "key": "my_file",
+            "type": "file",
+            "multiple": True,
+            "file": {
+                "name": "",
+                "type": ["application/pdf"],
+            },
+            "filePattern": "application/pdf",
+        }
+
+        submission = SubmissionFactory.from_components(
+            [formio_components],
+            submitted_data=data,
+        )
+        submission_step = submission.submissionstep_set.get()
+
+        with self.assertRaises(ValidationError) as err_context:
+            attach_uploads_to_submission_step(submission_step)
+
+        validation_error = err_context.exception.get_full_details()
+        self.assertEqual(len(validation_error["my_file"]), 2)
+
+    @tag("GHSA-h85r-xv4w-cg8g")
+    def test_attach_upload_validates_file_content_types_ok(self):
+        """
+        Regression test for CVE-2022-31041 to ensure the file content is validated
+        against the formio configuration.
+
+        We cannot rely on file extension or browser mime-type. Therefore, we have a test
+        file that claims to be a PDF but is actually an image that we put in the upload
+        data. The step attaching the uploads to the form data must validate the
+        configuration.
+        """
+        with open(TEST_FILES_DIR / "image-256x256.png", "rb") as infile:
+            upload1 = TemporaryFileUploadFactory.create(
+                file_name="my-img.png",
+                content=File(infile),
+                content_type="image/png",
+            )
+            upload2 = TemporaryFileUploadFactory.create(
+                file_name="my-img2.png", content=File(infile), content_type="image/png"
+            )
+
+        data = {
+            "my_file": [
+                {
+                    "url": f"http://server/api/v1/submissions/files/{upload1.uuid}",
+                    "data": {
+                        "url": f"http://server/api/v1/submissions/files/{upload1.uuid}",
+                        "form": "",
+                        "name": "my-img.png",
+                        "size": 585,
+                        "baseUrl": "http://server",
+                        "project": "",
+                    },
+                    "name": "my-img-12305610-2da4-4694-a341-ccb919c3d543.png",
+                    "size": 585,
+                    "type": "image/png",  # we are lying!
+                    "storage": "url",
+                    "originalName": "my-img.png",
+                },
+                {
+                    "url": f"http://server/api/v1/submissions/files/{upload2.uuid}",
+                    "data": {
+                        "url": f"http://server/api/v1/submissions/files/{upload2.uuid}",
+                        "form": "",
+                        "name": "my-img2.png",
+                        "size": 585,
+                        "baseUrl": "http://server",
+                        "project": "",
+                    },
+                    "name": "my-img2-12305610-2da4-4694-a341-ccb919c3d543.png",
+                    "size": 585,
+                    "type": "image/png",  # we are lying!
+                    "storage": "url",
+                    "originalName": "my-img2.png",
+                },
+            ],
+        }
+        formio_components = {
+            "key": "my_file",
+            "type": "file",
+            "multiple": True,
+            "file": {
+                "name": "",
+                "type": ["image/png", "image/jpeg"],
+            },
+            "filePattern": "image/png,image/jpeg",
+        }
+
+        submission = SubmissionFactory.from_components(
+            [formio_components],
+            submitted_data=data,
+        )
+        submission_step = submission.submissionstep_set.get()
+
+        try:
+            attach_uploads_to_submission_step(submission_step)
+        except ValidationError:
+            self.fail("Uploads should be accepted since the content types are valid")
+
     @disable_2fa
     def test_attachment_retrieve_view_requires_permission(self):
         attachment = SubmissionFileAttachmentFactory.create()
