diff --git a/OpenUtau.Core/Classic/VoicebankInstaller.cs b/OpenUtau.Core/Classic/VoicebankInstaller.cs
index fb1203533..0bf55161d 100644
--- a/OpenUtau.Core/Classic/VoicebankInstaller.cs
+++ b/OpenUtau.Core/Classic/VoicebankInstaller.cs
@@ -43,18 +43,21 @@ public class VoicebankInstaller {
                 int count = 0;
                 bool hasCharacterYaml = archive.Entries.Any(e => e.Key.EndsWith(kCharacterYaml));
                 foreach (var entry in archive.Entries) {
-                    var filePath = Path.Combine(basePath, entry.Key);
-                    Directory.CreateDirectory(Path.GetDirectoryName(filePath));
-                    if (!entry.IsDirectory && entry.Key != kInstallTxt) {
-                        entry.WriteToFile(Path.Combine(basePath, entry.Key), extractionOptions);
-                        if (!hasCharacterYaml && filePath.EndsWith(kCharacterTxt)) {
-                            var config = new VoicebankConfig() {
-                                TextFileEncoding = textEncoding.WebName,
-                            };
-                            using (var stream = File.Open(filePath.Replace(".txt", ".yaml"), FileMode.Create)) {
-                                config.Save(stream);
+                    if (!(entry.Key.Contains("..")))//detect zipSlip attack
+                    {
+                        var filePath = Path.Combine(basePath, entry.Key);
+                        Directory.CreateDirectory(Path.GetDirectoryName(filePath));
+                        if (!entry.IsDirectory && entry.Key != kInstallTxt) {
+                            entry.WriteToFile(Path.Combine(basePath, entry.Key), extractionOptions);
+                            if (!hasCharacterYaml && filePath.EndsWith(kCharacterTxt)) {
+                                var config = new VoicebankConfig() {
+                                    TextFileEncoding = textEncoding.WebName,
+                                };
+                                using (var stream = File.Open(filePath.Replace(".txt", ".yaml"), FileMode.Create)) {
+                                    config.Save(stream);
+                                }
                             }
-                        }
+                        } 
                     }
                     progress.Invoke(100.0 * ++count / total, entry.Key);
                 }
