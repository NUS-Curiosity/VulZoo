diff --git a/changes/sso-check-audience b/changes/sso-check-audience
new file mode 100644
index 000000000000..a55310bc1ff2
--- /dev/null
+++ b/changes/sso-check-audience
@@ -0,0 +1 @@
+* Check for audience restrictions when validating a SAML request.
diff --git a/server/service/service_sessions.go b/server/service/service_sessions.go
index 6fd04d97bd23..e1caaab072f3 100644
--- a/server/service/service_sessions.go
+++ b/server/service/service_sessions.go
@@ -156,7 +156,11 @@ func (svc *Service) CallbackSSO(ctx context.Context, auth fleet.Auth) (*fleet.SS
 	}
 
 	// Validate response
-	validator, err := sso.NewValidator(*metadata)
+	validator, err := sso.NewValidator(*metadata, sso.WithExpectedAudience(
+		appConfig.SSOSettings.EntityID,
+		appConfig.ServerSettings.ServerURL,
+		appConfig.ServerSettings.ServerURL+svc.config.Server.URLPrefix+"/api/v1/fleet/sso/callback", // ACS
+	))
 	if err != nil {
 		return nil, ctxerr.Wrap(ctx, err, "create validator from metadata")
 	}
diff --git a/server/sso/types.go b/server/sso/types.go
index 02fad65ef2fa..06076442e902 100644
--- a/server/sso/types.go
+++ b/server/sso/types.go
@@ -205,9 +205,14 @@ type Assertion struct {
 }
 
 type Conditions struct {
-	XMLName      xml.Name
-	NotBefore    string `xml:",attr"`
-	NotOnOrAfter string `xml:",attr"`
+	XMLName             xml.Name
+	NotBefore           string              `xml:",attr"`
+	NotOnOrAfter        string              `xml:",attr"`
+	AudienceRestriction AudienceRestriction `xml:"AudienceRestriction"`
+}
+
+type AudienceRestriction struct {
+	Audience string `xml:"Audience"`
 }
 
 type Subject struct {
diff --git a/server/sso/validate.go b/server/sso/validate.go
index 4c2a1d306697..d4d2b6e0d848 100644
--- a/server/sso/validate.go
+++ b/server/sso/validate.go
@@ -24,9 +24,10 @@ type Validator interface {
 }
 
 type validator struct {
-	context  *dsig.ValidationContext
-	clock    *dsig.Clock
-	metadata Metadata
+	context           *dsig.ValidationContext
+	clock             *dsig.Clock
+	metadata          Metadata
+	expectedAudiences []string
 }
 
 func Clock(clock *dsig.Clock) func(v *validator) {
@@ -35,6 +36,12 @@ func Clock(clock *dsig.Clock) func(v *validator) {
 	}
 }
 
+func WithExpectedAudience(audiences ...string) func(v *validator) {
+	return func(v *validator) {
+		v.expectedAudiences = audiences
+	}
+}
+
 // NewValidator is used to validate the response to an auth request.
 // metadata is from the IDP.
 func NewValidator(metadata Metadata, opts ...func(v *validator)) (Validator, error) {
@@ -86,6 +93,18 @@ func (v *validator) ValidateResponse(auth fleet.Auth) error {
 	if currentTime.Before(notBefore) {
 		return errors.New("response too early")
 	}
+
+	verifiesAudience := false
+	for _, audience := range v.expectedAudiences {
+		if info.response.Assertion.Conditions.AudienceRestriction.Audience == audience {
+			verifiesAudience = true
+			break
+		}
+	}
+	if !verifiesAudience {
+		return errors.New("wrong audience:" + info.response.Assertion.Conditions.AudienceRestriction.Audience)
+	}
+
 	if auth.UserID() == "" {
 		return errors.New("missing user id")
 	}
diff --git a/server/sso/validate_test.go b/server/sso/validate_test.go
index 8b8d524b09ce..97ddb659e4f7 100644
--- a/server/sso/validate_test.go
+++ b/server/sso/validate_test.go
@@ -49,19 +49,35 @@ func TestValidate(t *testing.T) {
 	require.Nil(t, err)
 
 	clock := dsig.NewFakeClockAt(tm)
-	validator, err := NewValidator(testMetadata(), Clock(clock))
-	require.Nil(t, err)
-	require.NotNil(t, validator)
 
-	auth, err := DecodeAuthResponse(testResponse)
-	require.Nil(t, err)
+	testCases := []struct {
+		audiences  []string
+		shouldFail bool
+	}{
+		{audiences: []string{"kolide"}, shouldFail: false},
+		{audiences: []string{"someotheraudience"}, shouldFail: true},
+		{audiences: nil, shouldFail: true},
+	}
 
-	signed, err := validator.ValidateSignature(auth)
-	require.Nil(t, err)
-	require.NotNil(t, signed)
+	for _, tt := range testCases {
+		validator, err := NewValidator(testMetadata(), Clock(clock), WithExpectedAudience(tt.audiences...))
+		require.Nil(t, err)
+		require.NotNil(t, validator)
 
-	err = validator.ValidateResponse(auth)
-	assert.Nil(t, err)
+		auth, err := DecodeAuthResponse(testResponse)
+		require.Nil(t, err)
+
+		signed, err := validator.ValidateSignature(auth)
+		require.Nil(t, err)
+		require.NotNil(t, signed)
+
+		err = validator.ValidateResponse(auth)
+		if tt.shouldFail {
+			require.Error(t, err)
+		} else {
+			require.NoError(t, err)
+		}
+	}
 }
 
 func tamperedResponse(original string) (string, error) {
@@ -169,7 +185,7 @@ func TestVerifyValidGoogleResponse(t *testing.T) {
 	tm, err := time.Parse(time.RFC3339, "2017-07-18T14:47:08.035Z")
 	require.Nil(t, err)
 	clock := dsig.NewFakeClockAt(tm)
-	validator, err := NewValidator(testGoogleMetadata(), Clock(clock))
+	validator, err := NewValidator(testGoogleMetadata(), Clock(clock), WithExpectedAudience("kolide.edilok.net"))
 	require.Nil(t, err)
 	require.NotNil(t, validator)
 	auth, err := DecodeAuthResponse(samlResponse)
