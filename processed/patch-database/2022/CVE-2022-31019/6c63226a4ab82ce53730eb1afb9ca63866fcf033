diff --git a/Sources/Vapor/URLEncodedForm/URLEncodedFormData.swift b/Sources/Vapor/URLEncodedForm/URLEncodedFormData.swift
index cf2ba85661..47da5c56a0 100644
--- a/Sources/Vapor/URLEncodedForm/URLEncodedFormData.swift
+++ b/Sources/Vapor/URLEncodedForm/URLEncodedFormData.swift
@@ -54,6 +54,7 @@ enum URLQueryFragment: ExpressibleByStringLiteral, Equatable {
 internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStringLiteral, ExpressibleByDictionaryLiteral, Equatable {
     var values: [URLQueryFragment]
     var children: [String: URLEncodedFormData]
+    let maxRecursionDepth = 100
     
     var hasOnlyValues: Bool {
         return children.count == 0
@@ -90,7 +91,10 @@ internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStri
         self.children = Dictionary(uniqueKeysWithValues: dictionaryLiteral)
     }
         
-    mutating func set(value: URLQueryFragment, forPath path: [String]) {
+    mutating func set(value: URLQueryFragment, forPath path: [String], recursionDepth: Int) throws {
+        guard recursionDepth <= maxRecursionDepth else {
+            throw URLEncodedFormError.reachedNestingLimit
+        }
         guard let firstElement = path.first else {
             self.values.append(value)
             return
@@ -101,7 +105,7 @@ internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStri
         } else {
             child = []
         }
-        child.set(value: value, forPath: Array(path[1...]))
+        try child.set(value: value, forPath: Array(path[1...]), recursionDepth: recursionDepth + 1)
         self.children[firstElement] = child
     }
 }
diff --git a/Sources/Vapor/URLEncodedForm/URLEncodedFormError.swift b/Sources/Vapor/URLEncodedForm/URLEncodedFormError.swift
index 4ab3a6ffa8..4a73749ba0 100644
--- a/Sources/Vapor/URLEncodedForm/URLEncodedFormError.swift
+++ b/Sources/Vapor/URLEncodedForm/URLEncodedFormError.swift
@@ -1,6 +1,7 @@
 /// Errors thrown while encoding/decoding `application/x-www-form-urlencoded` data.
 enum URLEncodedFormError: Error {
     case malformedKey(key: Substring)
+    case reachedNestingLimit
 }
 
 extension URLEncodedFormError: AbortError {
@@ -12,6 +13,8 @@ extension URLEncodedFormError: AbortError {
         switch self {
         case .malformedKey(let path):
             return "Malformed form-urlencoded key encountered: \(path)"
+        case .reachedNestingLimit:
+            return "The data supplied is too nested"
         }
     }
 }
diff --git a/Sources/Vapor/URLEncodedForm/URLEncodedFormParser.swift b/Sources/Vapor/URLEncodedForm/URLEncodedFormParser.swift
index f604a1e0d2..aa98b9c26a 100644
--- a/Sources/Vapor/URLEncodedForm/URLEncodedFormParser.swift
+++ b/Sources/Vapor/URLEncodedForm/URLEncodedFormParser.swift
@@ -14,11 +14,11 @@ internal struct URLEncodedFormParser {
             switch kv.count {
             case 1:
                 let value = String(kv[0])
-                result.set(value: .urlEncoded(value), forPath: [])
+                try result.set(value: .urlEncoded(value), forPath: [], recursionDepth: 0)
             case 2:
                 let key = kv[0]
                 let value = String(kv[1])
-                result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)))
+                try result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)), recursionDepth: 0)
             default:
                 //Empty `&&`
                 continue
diff --git a/Tests/VaporTests/URLEncodedFormTests.swift b/Tests/VaporTests/URLEncodedFormTests.swift
index 4192e6982d..558743a385 100644
--- a/Tests/VaporTests/URLEncodedFormTests.swift
+++ b/Tests/VaporTests/URLEncodedFormTests.swift
@@ -574,6 +574,15 @@ final class URLEncodedFormTests: XCTestCase {
         ])
         XCTAssertEqual(data, "test=%26%3B!$'(),/:%3D%3F@~")
     }
+    
+    func testHeavilyNestedArray() throws {
+        var body = "x"
+        body += String(repeating: "[]", count: 80000)
+        body += "=y"
+        struct Foo: Content {}
+        XCTAssertThrowsError(try URLEncodedFormDecoder().decode(Foo.self, from: body))
+        XCTAssert(true, "We should not have crashed")
+    }
 }
 
 private struct User: Codable, Equatable {
