diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/IdentifiableObjectManager.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/IdentifiableObjectManager.java
index 55099def23f0..4f45fc4a6cdf 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/IdentifiableObjectManager.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/IdentifiableObjectManager.java
@@ -108,6 +108,9 @@ <T extends IdentifiableObject> List<AttributeValue> getAllValuesByAttributes( Cl
     <T extends IdentifiableObject> long countAllValuesByAttributes( Class<T> klass, List<Attribute> attributes );
 
     <T extends IdentifiableObject> List<T> getByUid( Class<T> clazz, Collection<String> uids );
+    
+    <T extends IdentifiableObject> List<T> getAndValidateByUid( Class<T> type, Collection<String> uids )
+        throws IllegalQueryException;
 
     <T extends IdentifiableObject> List<T> getById( Class<T> clazz, Collection<Long> ids );
 
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
index 96fe1eccad05..fcf864d638ce 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
@@ -46,6 +46,7 @@ public enum ErrorCode
     E1105( "Data set not found or not accessible: `{0}`" ),
     E1106( "There are duplicate translation record for property `{0}` and locale `{1}`" ),
     E1107( "Object type `{0}` is not translatable." ),
+    E1112( "Object(s) of type `{0}` not found or not accessible: `{1}`" ),
 
     /* Data */
     E2000( "Query parameters cannot be null" ),
diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/association/ProgramOrganisationUnitAssociationsQueryBuilder.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/association/ProgramOrganisationUnitAssociationsQueryBuilder.java
index a91b5a456955..aa5f92896ae7 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/association/ProgramOrganisationUnitAssociationsQueryBuilder.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/association/ProgramOrganisationUnitAssociationsQueryBuilder.java
@@ -34,6 +34,7 @@
 import static org.hisp.dhis.hibernate.jsonb.type.JsonbFunctions.HAS_USER_GROUP_IDS;
 import static org.hisp.dhis.hibernate.jsonb.type.JsonbFunctions.HAS_USER_ID;
 import static org.hisp.dhis.security.acl.AclService.LIKE_READ_METADATA;
+import static org.hisp.dhis.system.util.SqlUtils.singleQuote;
 
 import java.util.Arrays;
 import java.util.Objects;
@@ -43,6 +44,7 @@
 import lombok.RequiredArgsConstructor;
 
 import org.hisp.dhis.commons.collection.CollectionUtils;
+import org.hisp.dhis.system.util.SqlUtils;
 import org.hisp.dhis.user.CurrentUserGroupInfo;
 import org.hisp.dhis.user.CurrentUserService;
 import org.hisp.dhis.user.User;
@@ -133,14 +135,14 @@ private String getSharingConditions( String access )
     private String getOwnerCondition( CurrentUserGroupInfo currentUserGroupInfo )
     {
         return String.join( " or ",
-            jsonbFunction( EXTRACT_PATH_TEXT, "owner" ) + " = " + withQuotes( currentUserGroupInfo.getUserUID() ),
+            jsonbFunction( EXTRACT_PATH_TEXT, "owner" ) + " = " + singleQuote( currentUserGroupInfo.getUserUID() ),
             jsonbFunction( EXTRACT_PATH_TEXT, "owner" ) + " is null" );
     }
 
     private String getPublicSharingCondition( String access )
     {
         return String.join( " or ",
-            jsonbFunction( EXTRACT_PATH_TEXT, "public" ) + " like " + withQuotes( access ),
+            jsonbFunction( EXTRACT_PATH_TEXT, "public" ) + " like " + singleQuote( access ),
             jsonbFunction( EXTRACT_PATH_TEXT, "public" ) + " is null" );
     }
 
@@ -173,7 +175,7 @@ private String jsonbFunction( String functionName, String... params )
             "(",
             String.join( ",", "prg.sharing",
                 Arrays.stream( params )
-                    .map( this::withQuotes )
+                    .map( SqlUtils::singleQuote )
                     .collect( joining( "," ) ) ),
             ")" );
     }
@@ -187,15 +189,11 @@ private String getProgramUidsFilter( Set<String> programUids )
     {
         return "pr.uid in (" +
             programUids.stream()
-                .map( this::withQuotes )
+                .map( SqlUtils::singleQuote )
                 .collect( joining( "," ) )
             + ")";
     }
 
-    private String withQuotes( String programUid )
-    {
-        return String.join( "", "'", programUid, "'" );
-    }
 
     private String getUserOrgUnitPathsFilter( Set<String> userOrgUnitPaths )
     {
diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/DefaultIdentifiableObjectManager.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/DefaultIdentifiableObjectManager.java
index 58acee2ae261..5e9f91ac54f8 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/DefaultIdentifiableObjectManager.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/DefaultIdentifiableObjectManager.java
@@ -57,6 +57,9 @@
 import org.hisp.dhis.category.CategoryOptionCombo;
 import org.hisp.dhis.chart.Chart;
 import org.hisp.dhis.common.exception.InvalidIdentifierReferenceException;
+import org.hisp.dhis.commons.collection.CollectionUtils;
+import org.hisp.dhis.feedback.ErrorCode;
+import org.hisp.dhis.feedback.ErrorMessage;
 import org.hisp.dhis.hibernate.HibernateProxyUtils;
 import org.hisp.dhis.reporttable.ReportTable;
 import org.hisp.dhis.schema.Schema;
@@ -618,6 +621,25 @@ public <T extends IdentifiableObject> List<T> getByUid( Class<T> clazz, Collecti
 
         return (List<T>) store.getByUid( uids );
     }
+    
+    @Override
+    @Transactional( readOnly = true )
+    public <T extends IdentifiableObject> List<T> getAndValidateByUid( Class<T> type, Collection<String> uids )
+        throws IllegalQueryException
+    {
+        List<T> objects = getByUid( type, uids );
+
+        List<String> identifiers = IdentifiableObjectUtils.getUids( objects );
+        List<String> difference = CollectionUtils.difference( uids, identifiers );
+
+        if ( !difference.isEmpty() )
+        {
+            throw new IllegalQueryException( new ErrorMessage(
+                ErrorCode.E1112, type.getSimpleName(), difference ) );
+        }
+
+        return objects;
+    }
 
     @Override
     @Transactional( readOnly = true )
diff --git a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/IdentifiableObjectManagerTest.java b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/IdentifiableObjectManagerTest.java
index b9dd74ba7940..8a24aa244d9d 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/IdentifiableObjectManagerTest.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/IdentifiableObjectManagerTest.java
@@ -33,6 +33,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -46,6 +47,7 @@
 import org.hisp.dhis.dataelement.DataElementGroup;
 import org.hisp.dhis.dataelement.DataElementOperand;
 import org.hisp.dhis.dataelement.DataElementService;
+import org.hisp.dhis.feedback.ErrorCode;
 import org.hisp.dhis.hibernate.exception.CreateAccessDeniedException;
 import org.hisp.dhis.hibernate.exception.DeleteAccessDeniedException;
 import org.hisp.dhis.hibernate.exception.UpdateAccessDeniedException;
@@ -444,6 +446,32 @@ public void getByUidTest()
         assertTrue( cd.contains( dataElementC ) );
         assertTrue( cd.contains( dataElementD ) );
     }
+    
+    @Test
+    public void getAndValidateByUidTest()
+    {
+        DataElement dataElementA = createDataElement( 'A' );
+        DataElement dataElementB = createDataElement( 'B' );
+        DataElement dataElementC = createDataElement( 'C' );
+        identifiableObjectManager.save( dataElementA );
+        identifiableObjectManager.save( dataElementB );
+        identifiableObjectManager.save( dataElementC );
+        List<DataElement> ab = identifiableObjectManager.getAndValidateByUid( DataElement.class,
+            Arrays.asList( dataElementA.getUid(), dataElementB.getUid() ) );
+        assertTrue( ab.contains( dataElementA ) );
+        assertTrue( ab.contains( dataElementB ) );
+        assertFalse( ab.contains( dataElementC ) );
+    }
+
+    @Test
+    public void getAndValidateByUidExceptionTest()
+    {
+        DataElement dataElementA = createDataElement( 'A' );
+        identifiableObjectManager.save( dataElementA );
+        IllegalQueryException ex = assertThrows( IllegalQueryException.class, () -> identifiableObjectManager
+            .getAndValidateByUid( DataElement.class, Arrays.asList( dataElementA.getUid(), "xhjG82jHaky" ) ) );
+        assertEquals( ErrorCode.E1112, ex.getErrorCode() );
+    }
 
     @Test
     public void getOrderedUidIdSchemeTest()
diff --git a/dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/collection/CollectionUtils.java b/dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/collection/CollectionUtils.java
index d52a4f490076..edc89b8f9122 100644
--- a/dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/collection/CollectionUtils.java
+++ b/dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/collection/CollectionUtils.java
@@ -27,9 +27,12 @@
  */
 package org.hisp.dhis.commons.collection;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Objects;
 import java.util.Set;
 import java.util.function.Consumer;
@@ -57,6 +60,22 @@ public static <T> Collection<T> intersection( Collection<T> c1, Collection<T> c2
         set1.retainAll( new HashSet<>( c2 ) );
         return set1;
     }
+    
+    /**
+     * Returns all elements which are contained by {@code collection1} but not
+     * contained by {@code collection2} as an immutable list.
+     *
+     * @param <T>
+     * @param collection1 the first collection.
+     * @param collection2 the second collection.
+     * @return all elements in {@code collection1} not in {@code collection2}.
+     */
+    public static <A> List<A> difference( Collection<A> collection1, Collection<A> collection2 )
+    {
+        List<A> list = new ArrayList<>( collection1 );
+        list.removeAll( collection2 );
+        return Collections.unmodifiableList( list );
+    }
 
     /**
      * Searches for and returns the first string which starts with the given
diff --git a/dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/CollectionUtilsTest.java b/dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/CollectionUtilsTest.java
new file mode 100644
index 000000000000..1e0f7aaab391
--- /dev/null
+++ b/dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/CollectionUtilsTest.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2004-2022, University of Oslo
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * Neither the name of the HISP project nor the names of its contributors may
+ * be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.hisp.dhis.commons.util;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import java.util.List;
+
+import org.hisp.dhis.commons.collection.CollectionUtils;
+import org.junit.jupiter.api.Test;
+
+import com.google.common.collect.Lists;
+
+class CollectionUtilsTest
+{
+
+    @Test
+    public void testDifference()
+    {
+        List<String> collection1 = Lists.newArrayList( "One", "Two", "Three" );
+        List<String> collection2 = Lists.newArrayList( "One", "Two", "Four" );
+        List<String> difference = CollectionUtils.difference( collection1, collection2 );
+
+        assertEquals( 1, difference.size() );
+        assertEquals( "Three", difference.get( 0 ) );
+    }
+}
\ No newline at end of file
diff --git a/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/SqlUtils.java b/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/SqlUtils.java
index f63d4126d84d..5781154dae64 100644
--- a/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/SqlUtils.java
+++ b/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/SqlUtils.java
@@ -45,6 +45,8 @@
 public class SqlUtils
 {
     public static final String QUOTE = "\"";
+    
+    public static final String SINGLE_QUOTE = "'";
 
     public static final String SEPARATOR = ".";
 
@@ -79,6 +81,21 @@ public static String quote( String alias, String relation )
 
         return alias + SEPARATOR + quote( relation );
     }
+    
+    /**
+     * Single-quotes the given relation (typically a value). Single-quotes part
+     * of the given relation are encoded (replaced by double single-quotes that
+     * is).
+     *
+     * @param relation the relation (typically a column).
+     * @return the single-quoted relation.
+     */
+    public static String singleQuote( String relation )
+    {
+        String rel = relation.replaceAll( SINGLE_QUOTE, (SINGLE_QUOTE + SINGLE_QUOTE) );
+
+        return SINGLE_QUOTE + rel + SINGLE_QUOTE;
+    }
 
     /**
      * Returns a string set for the given result set and column. Assumes that
