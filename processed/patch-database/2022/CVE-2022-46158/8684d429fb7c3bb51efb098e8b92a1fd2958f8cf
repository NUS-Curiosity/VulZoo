diff --git a/admin-dev/themes/default/template/controllers/customer_threads/helpers/view/message.tpl b/admin-dev/themes/default/template/controllers/customer_threads/helpers/view/message.tpl
index 65e51575176f1..d882bfdd72e6a 100644
--- a/admin-dev/themes/default/template/controllers/customer_threads/helpers/view/message.tpl
+++ b/admin-dev/themes/default/template/controllers/customer_threads/helpers/view/message.tpl
@@ -53,7 +53,7 @@
 			</h4>
 		{/if}
 		<span class="message-date">&nbsp;<i class="icon-calendar"></i> - {dateFormat date=$message.date_add full=0} - <i class="icon-time"></i> {$message.date_add|substr:11:5}</span>
-		{if isset($message.file_name)} <span class="message-product">&nbsp;<i class="icon-link"></i> <a href="{$message.file_name|escape:'html':'UTF-8'}" target="_blank" rel="noopener noreferrer nofollow">{l s="Attachment" d='Admin.Catalog.Feature'}</a></span>{/if}
+		{if isset($message.file_name)} <span class="message-product">&nbsp;<i class="icon-link"></i> <a href="{$message.file_link|escape:'html':'UTF-8'}" target="_blank" rel="noopener noreferrer nofollow">{l s="Attachment" d='Admin.Catalog.Feature'}</a></span>{/if}
 		{if isset($message.product_name)} <span class="message-attachment">&nbsp;<i class="icon-book"></i> <a href="{$message.product_link|escape:'html':'UTF-8'}" target="_blank" rel="noopener noreferrer nofollow">{l s="Product" d='Admin.Global'} {$message.product_name|escape:'html':'UTF-8'} </a></span>{/if}
 		<p class="message-item-text">{$message.message|escape:'html':'UTF-8'|nl2br}</p>
 	</div>
diff --git a/classes/Dispatcher.php b/classes/Dispatcher.php
index 6a4085a11e2cc..99acf6beff848 100644
--- a/classes/Dispatcher.php
+++ b/classes/Dispatcher.php
@@ -53,6 +53,13 @@ class DispatcherCore
      * @var array List of default routes
      */
     public $default_routes = [
+        'upload' => [
+            'controller' => 'upload',
+            'rule' => 'upload/{file}',
+            'keywords' => [
+                'file' => ['regexp' => '.+', 'param' => 'file'],
+            ],
+        ],
         'category_rule' => [
             'controller' => 'category',
             'rule' => '{id}-{rewrite}',
@@ -1029,12 +1036,13 @@ public function getController($id_shop = null)
             $controller = $this->controller_not_found;
             $test_request_uri = preg_replace('/(=http:\/\/)/', '=', $this->request_uri);
 
-            // If the request_uri matches a static file, then there is no need to check the routes, we keep
+            // If the request_uri matches a static file, unless it's in the upload folder,
+            // then there is no need to check the routes, we keep
             // "controller_not_found" (a static file should not go through the dispatcher)
-            if (!preg_match(
-                '/\.(gif|jpe?g|png|css|js|ico)$/i',
-                parse_url($test_request_uri, PHP_URL_PATH)
-            )) {
+            if (
+                !preg_match('/\.(gif|jpe?g|png|css|js|ico)$/i', parse_url($test_request_uri, PHP_URL_PATH))
+                || preg_match('/^\/upload/', parse_url($test_request_uri, PHP_URL_PATH)))
+            {
                 // Add empty route as last route to prevent this greedy regexp to match request uri before right time
                 if ($this->empty_route) {
                     $this->addRoute(
diff --git a/classes/Tools.php b/classes/Tools.php
index bdad4f093a2a7..5f5744c7de15a 100644
--- a/classes/Tools.php
+++ b/classes/Tools.php
@@ -2632,7 +2632,9 @@ public static function generateHtaccess($path = null, $rewrite_settings = null,
                 fwrite($write_fd, 'RewriteRule . - [E=REWRITEBASE:' . $uri['physical'] . ']' . PHP_EOL);
 
                 // Webservice
-                fwrite($write_fd, 'RewriteRule ^api(?:/(.*))?$ %{ENV:REWRITEBASE}webservice/dispatcher.php?url=$1 [QSA,L]' . "\n\n");
+                fwrite($write_fd, 'RewriteRule ^api(?:/(.*))?$ %{ENV:REWRITEBASE}webservice/dispatcher.php?url=$1 [QSA,L]' . PHP_EOL);
+                // upload folder
+                fwrite($write_fd, 'RewriteRule ^upload/.+$ %{ENV:REWRITEBASE}index.php [QSA,L]' . "\n\n");
 
                 if (!$rewrite_settings) {
                     $rewrite_settings = (int) Configuration::get('PS_REWRITING_SETTINGS', null, null, (int) $uri['id_shop']);
diff --git a/controllers/admin/AdminCustomerThreadsController.php b/controllers/admin/AdminCustomerThreadsController.php
index f4a4adf4bae51..350b437297f11 100644
--- a/controllers/admin/AdminCustomerThreadsController.php
+++ b/controllers/admin/AdminCustomerThreadsController.php
@@ -512,14 +512,18 @@ public function postProcess()
 
     public function initContent()
     {
-        if (isset($_GET['filename']) && file_exists(_PS_UPLOAD_DIR_ . $_GET['filename']) && Validate::isFileName($_GET['filename'])) {
-            AdminCustomerThreadsController::openUploadedFile();
+        if (isset($_GET['filename'])) {
+            if (file_exists(_PS_UPLOAD_DIR_ . $_GET['filename']) && Validate::isFileName($_GET['filename'])) {
+                $this->openUploadedFile(!Tools::getValue('show'));
+            } else {
+                Tools::redirect('404');
+            }
         }
 
         return parent::initContent();
     }
 
-    protected function openUploadedFile()
+    protected function openUploadedFile(bool $forceDownload = true)
     {
         $filename = $_GET['filename'];
 
@@ -553,7 +557,9 @@ protected function openUploadedFile()
             ob_end_clean();
         }
         header('Content-Type: ' . $extension);
-        header('Content-Disposition:attachment;filename="' . $filename . '"');
+        if ($forceDownload) {
+            header('Content-Disposition:attachment;filename="' . $filename . '"');
+        }
         readfile(_PS_UPLOAD_DIR_ . $filename);
         die;
     }
@@ -631,10 +637,20 @@ public function renderView()
                 $employee = new Employee($mess['id_employee']);
                 $messages[$key]['employee_image'] = $employee->getImage();
             }
-            if (isset($mess['file_name']) && $mess['file_name'] != '') {
-                $messages[$key]['file_name'] = _THEME_PROD_PIC_DIR_ . $mess['file_name'];
-            } else {
+            if (empty($mess['file_name'])) {
                 unset($messages[$key]['file_name']);
+            } else {
+                $messages[$key]['file_link'] = $this->context->link->getAdminLink(
+                    'AdminCustomerThreads',
+                    true,
+                    [],
+                    [
+                        'id_customer_thread' => $id_customer_thread,
+                        'viewcustomer_thread' => '',
+                        'filename' => $mess['file_name'],
+                        'show' => true,
+                    ]
+                );
             }
 
             if ($mess['id_product']) {
diff --git a/controllers/front/GetFileController.php b/controllers/front/GetFileController.php
index 37eee4499e254..8ac7a5831cfc0 100644
--- a/controllers/front/GetFileController.php
+++ b/controllers/front/GetFileController.php
@@ -25,6 +25,137 @@
  */
 class GetFileControllerCore extends FrontController
 {
+    protected const MIME_TYPES = [
+        'ez' => 'application/andrew-inset',
+        'hqx' => 'application/mac-binhex40',
+        'cpt' => 'application/mac-compactpro',
+        'doc' => 'application/msword',
+        'oda' => 'application/oda',
+        'pdf' => 'application/pdf',
+        'ai' => 'application/postscript',
+        'eps' => 'application/postscript',
+        'ps' => 'application/postscript',
+        'smi' => 'application/smil',
+        'smil' => 'application/smil',
+        'wbxml' => 'application/vnd.wap.wbxml',
+        'wmlc' => 'application/vnd.wap.wmlc',
+        'wmlsc' => 'application/vnd.wap.wmlscriptc',
+        'bcpio' => 'application/x-bcpio',
+        'vcd' => 'application/x-cdlink',
+        'pgn' => 'application/x-chess-pgn',
+        'cpio' => 'application/x-cpio',
+        'csh' => 'application/x-csh',
+        'dcr' => 'application/x-director',
+        'dir' => 'application/x-director',
+        'dxr' => 'application/x-director',
+        'dvi' => 'application/x-dvi',
+        'spl' => 'application/x-futuresplash',
+        'gtar' => 'application/x-gtar',
+        'hdf' => 'application/x-hdf',
+        'js' => 'application/x-javascript',
+        'skp' => 'application/x-koan',
+        'skd' => 'application/x-koan',
+        'skt' => 'application/x-koan',
+        'skm' => 'application/x-koan',
+        'latex' => 'application/x-latex',
+        'nc' => 'application/x-netcdf',
+        'cdf' => 'application/x-netcdf',
+        'sh' => 'application/x-sh',
+        'shar' => 'application/x-shar',
+        'swf' => 'application/x-shockwave-flash',
+        'sit' => 'application/x-stuffit',
+        'sv4cpio' => 'application/x-sv4cpio',
+        'sv4crc' => 'application/x-sv4crc',
+        'tar' => 'application/x-tar',
+        'tcl' => 'application/x-tcl',
+        'tex' => 'application/x-tex',
+        'texinfo' => 'application/x-texinfo',
+        'texi' => 'application/x-texinfo',
+        't' => 'application/x-troff',
+        'tr' => 'application/x-troff',
+        'roff' => 'application/x-troff',
+        'man' => 'application/x-troff-man',
+        'me' => 'application/x-troff-me',
+        'ms' => 'application/x-troff-ms',
+        'ustar' => 'application/x-ustar',
+        'src' => 'application/x-wais-source',
+        'xhtml' => 'application/xhtml+xml',
+        'xht' => 'application/xhtml+xml',
+        'zip' => 'application/zip',
+        'au' => 'audio/basic',
+        'snd' => 'audio/basic',
+        'mid' => 'audio/midi',
+        'midi' => 'audio/midi',
+        'kar' => 'audio/midi',
+        'mpga' => 'audio/mpeg',
+        'mp2' => 'audio/mpeg',
+        'mp3' => 'audio/mpeg',
+        'aif' => 'audio/x-aiff',
+        'aiff' => 'audio/x-aiff',
+        'aifc' => 'audio/x-aiff',
+        'm3u' => 'audio/x-mpegurl',
+        'ram' => 'audio/x-pn-realaudio',
+        'rm' => 'audio/x-pn-realaudio',
+        'rpm' => 'audio/x-pn-realaudio-plugin',
+        'ra' => 'audio/x-realaudio',
+        'wav' => 'audio/x-wav',
+        'pdb' => 'chemical/x-pdb',
+        'xyz' => 'chemical/x-xyz',
+        'bmp' => 'image/bmp',
+        'gif' => 'image/gif',
+        'ief' => 'image/ief',
+        'jpeg' => 'image/jpeg',
+        'jpg' => 'image/jpeg',
+        'jpe' => 'image/jpeg',
+        'png' => 'image/png',
+        'tiff' => 'image/tiff',
+        'tif' => 'image/tif',
+        'djvu' => 'image/vnd.djvu',
+        'djv' => 'image/vnd.djvu',
+        'wbmp' => 'image/vnd.wap.wbmp',
+        'ras' => 'image/x-cmu-raster',
+        'pnm' => 'image/x-portable-anymap',
+        'pbm' => 'image/x-portable-bitmap',
+        'pgm' => 'image/x-portable-graymap',
+        'ppm' => 'image/x-portable-pixmap',
+        'rgb' => 'image/x-rgb',
+        'xbm' => 'image/x-xbitmap',
+        'xpm' => 'image/x-xpixmap',
+        'xwd' => 'image/x-windowdump',
+        'igs' => 'model/iges',
+        'iges' => 'model/iges',
+        'msh' => 'model/mesh',
+        'mesh' => 'model/mesh',
+        'silo' => 'model/mesh',
+        'wrl' => 'model/vrml',
+        'vrml' => 'model/vrml',
+        'css' => 'text/css',
+        'html' => 'text/html',
+        'htm' => 'text/html',
+        'asc' => 'text/plain',
+        'txt' => 'text/plain',
+        'rtx' => 'text/richtext',
+        'rtf' => 'text/rtf',
+        'sgml' => 'text/sgml',
+        'sgm' => 'text/sgml',
+        'tsv' => 'text/tab-seperated-values',
+        'wml' => 'text/vnd.wap.wml',
+        'wmls' => 'text/vnd.wap.wmlscript',
+        'etx' => 'text/x-setext',
+        'xml' => 'text/xml',
+        'xsl' => 'text/xml',
+        'mpeg' => 'video/mpeg',
+        'mpg' => 'video/mpeg',
+        'mpe' => 'video/mpeg',
+        'qt' => 'video/quicktime',
+        'mov' => 'video/quicktime',
+        'mxu' => 'video/vnd.mpegurl',
+        'avi' => 'video/x-msvideo',
+        'movie' => 'video/x-sgi-movie',
+        'ice' => 'x-conference-xcooltalk',
+    ];
+
+    /** @var bool */
     protected $display_header = false;
     protected $display_footer = false;
 
@@ -78,7 +209,6 @@ public function init()
                 $this->displayCustomError('Invalid key.');
             }
 
-            $filename = $tmp[0];
             $hash = $tmp[1];
 
             if (!($info = OrderDetail::getDownloadFromHash($hash))) {
@@ -136,8 +266,37 @@ public function init()
             $filename = $info['display_filename'];
         }
 
-        /* Detect mime content type */
-        $mimeType = false;
+        $this->sendFile($file, $filename);
+    }
+
+    protected function sendFile(string $file, string $filename, bool $forceDownload = true): void
+    {
+        if (ob_get_level() && ob_get_length() > 0) {
+            ob_end_clean();
+        }
+
+        /* Set headers for download */
+        header('Content-Transfer-Encoding: binary');
+        header('Content-Type: ' . $this->getMimeType($file, $filename));
+        header('Content-Length: ' . filesize($file));
+        if ($forceDownload) {
+            header('Content-Disposition: attachment; filename="' . $filename . '"');
+        }
+        //prevents max execution timeout, when reading large files
+        @set_time_limit(0);
+        $fp = fopen($file, 'rb');
+
+        if ($fp && is_resource($fp)) {
+            while (!feof($fp)) {
+                echo fgets($fp, 16384);
+            }
+        }
+
+        exit;
+    }
+
+    private function getMimeType(string $file, string $filename): string
+    {
         if (function_exists('finfo_open')) {
             $finfo = @finfo_open(FILEINFO_MIME);
             $mimeType = @finfo_file($finfo, $file);
@@ -159,163 +318,10 @@ public function init()
             $bName = explode('.', $bName);
             $bName = strtolower($bName[count($bName) - 1]);
 
-            $mimeTypes = [
-                'ez' => 'application/andrew-inset',
-                'hqx' => 'application/mac-binhex40',
-                'cpt' => 'application/mac-compactpro',
-                'doc' => 'application/msword',
-                'oda' => 'application/oda',
-                'pdf' => 'application/pdf',
-                'ai' => 'application/postscript',
-                'eps' => 'application/postscript',
-                'ps' => 'application/postscript',
-                'smi' => 'application/smil',
-                'smil' => 'application/smil',
-                'wbxml' => 'application/vnd.wap.wbxml',
-                'wmlc' => 'application/vnd.wap.wmlc',
-                'wmlsc' => 'application/vnd.wap.wmlscriptc',
-                'bcpio' => 'application/x-bcpio',
-                'vcd' => 'application/x-cdlink',
-                'pgn' => 'application/x-chess-pgn',
-                'cpio' => 'application/x-cpio',
-                'csh' => 'application/x-csh',
-                'dcr' => 'application/x-director',
-                'dir' => 'application/x-director',
-                'dxr' => 'application/x-director',
-                'dvi' => 'application/x-dvi',
-                'spl' => 'application/x-futuresplash',
-                'gtar' => 'application/x-gtar',
-                'hdf' => 'application/x-hdf',
-                'js' => 'application/x-javascript',
-                'skp' => 'application/x-koan',
-                'skd' => 'application/x-koan',
-                'skt' => 'application/x-koan',
-                'skm' => 'application/x-koan',
-                'latex' => 'application/x-latex',
-                'nc' => 'application/x-netcdf',
-                'cdf' => 'application/x-netcdf',
-                'sh' => 'application/x-sh',
-                'shar' => 'application/x-shar',
-                'swf' => 'application/x-shockwave-flash',
-                'sit' => 'application/x-stuffit',
-                'sv4cpio' => 'application/x-sv4cpio',
-                'sv4crc' => 'application/x-sv4crc',
-                'tar' => 'application/x-tar',
-                'tcl' => 'application/x-tcl',
-                'tex' => 'application/x-tex',
-                'texinfo' => 'application/x-texinfo',
-                'texi' => 'application/x-texinfo',
-                't' => 'application/x-troff',
-                'tr' => 'application/x-troff',
-                'roff' => 'application/x-troff',
-                'man' => 'application/x-troff-man',
-                'me' => 'application/x-troff-me',
-                'ms' => 'application/x-troff-ms',
-                'ustar' => 'application/x-ustar',
-                'src' => 'application/x-wais-source',
-                'xhtml' => 'application/xhtml+xml',
-                'xht' => 'application/xhtml+xml',
-                'zip' => 'application/zip',
-                'au' => 'audio/basic',
-                'snd' => 'audio/basic',
-                'mid' => 'audio/midi',
-                'midi' => 'audio/midi',
-                'kar' => 'audio/midi',
-                'mpga' => 'audio/mpeg',
-                'mp2' => 'audio/mpeg',
-                'mp3' => 'audio/mpeg',
-                'aif' => 'audio/x-aiff',
-                'aiff' => 'audio/x-aiff',
-                'aifc' => 'audio/x-aiff',
-                'm3u' => 'audio/x-mpegurl',
-                'ram' => 'audio/x-pn-realaudio',
-                'rm' => 'audio/x-pn-realaudio',
-                'rpm' => 'audio/x-pn-realaudio-plugin',
-                'ra' => 'audio/x-realaudio',
-                'wav' => 'audio/x-wav',
-                'pdb' => 'chemical/x-pdb',
-                'xyz' => 'chemical/x-xyz',
-                'bmp' => 'image/bmp',
-                'gif' => 'image/gif',
-                'ief' => 'image/ief',
-                'jpeg' => 'image/jpeg',
-                'jpg' => 'image/jpeg',
-                'jpe' => 'image/jpeg',
-                'png' => 'image/png',
-                'tiff' => 'image/tiff',
-                'tif' => 'image/tif',
-                'djvu' => 'image/vnd.djvu',
-                'djv' => 'image/vnd.djvu',
-                'wbmp' => 'image/vnd.wap.wbmp',
-                'ras' => 'image/x-cmu-raster',
-                'pnm' => 'image/x-portable-anymap',
-                'pbm' => 'image/x-portable-bitmap',
-                'pgm' => 'image/x-portable-graymap',
-                'ppm' => 'image/x-portable-pixmap',
-                'rgb' => 'image/x-rgb',
-                'xbm' => 'image/x-xbitmap',
-                'xpm' => 'image/x-xpixmap',
-                'xwd' => 'image/x-windowdump',
-                'igs' => 'model/iges',
-                'iges' => 'model/iges',
-                'msh' => 'model/mesh',
-                'mesh' => 'model/mesh',
-                'silo' => 'model/mesh',
-                'wrl' => 'model/vrml',
-                'vrml' => 'model/vrml',
-                'css' => 'text/css',
-                'html' => 'text/html',
-                'htm' => 'text/html',
-                'asc' => 'text/plain',
-                'txt' => 'text/plain',
-                'rtx' => 'text/richtext',
-                'rtf' => 'text/rtf',
-                'sgml' => 'text/sgml',
-                'sgm' => 'text/sgml',
-                'tsv' => 'text/tab-seperated-values',
-                'wml' => 'text/vnd.wap.wml',
-                'wmls' => 'text/vnd.wap.wmlscript',
-                'etx' => 'text/x-setext',
-                'xml' => 'text/xml',
-                'xsl' => 'text/xml',
-                'mpeg' => 'video/mpeg',
-                'mpg' => 'video/mpeg',
-                'mpe' => 'video/mpeg',
-                'qt' => 'video/quicktime',
-                'mov' => 'video/quicktime',
-                'mxu' => 'video/vnd.mpegurl',
-                'avi' => 'video/x-msvideo',
-                'movie' => 'video/x-sgi-movie',
-                'ice' => 'x-conference-xcooltalk',
-            ];
-
-            if (isset($mimeTypes[$bName])) {
-                $mimeType = $mimeTypes[$bName];
-            } else {
-                $mimeType = 'application/octet-stream';
-            }
-        }
-
-        if (ob_get_level() && ob_get_length() > 0) {
-            ob_end_clean();
+            $mimeType = static::MIME_TYPES[$bName] ?? 'application/octet-stream';
         }
 
-        /* Set headers for download */
-        header('Content-Transfer-Encoding: binary');
-        header('Content-Type: ' . $mimeType);
-        header('Content-Length: ' . filesize($file));
-        header('Content-Disposition: attachment; filename="' . $filename . '"');
-        //prevents max execution timeout, when reading large files
-        @set_time_limit(0);
-        $fp = fopen($file, 'rb');
-
-        if ($fp && is_resource($fp)) {
-            while (!feof($fp)) {
-                echo fgets($fp, 16384);
-            }
-        }
-
-        exit;
+        return $mimeType;
     }
 
     /**
diff --git a/controllers/front/UploadController.php b/controllers/front/UploadController.php
new file mode 100644
index 0000000000000..2a79270c7333f
--- /dev/null
+++ b/controllers/front/UploadController.php
@@ -0,0 +1,80 @@
+<?php
+/**
+ * Copyright since 2007 PrestaShop SA and Contributors
+ * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.md.
+ * It is also available through the world-wide-web at this URL:
+ * https://opensource.org/licenses/OSL-3.0
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@prestashop.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
+ * versions in the future. If you wish to customize PrestaShop for your
+ * needs please refer to https://devdocs.prestashop.com/ for more information.
+ *
+ * @author    PrestaShop SA and Contributors <contact@prestashop.com>
+ * @copyright Since 2007 PrestaShop SA and Contributors
+ * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
+ */
+
+declare(strict_types=1);
+
+class UploadControllerCore extends GetFileController
+{
+    private $filename;
+
+    public function init()
+    {
+        FrontController::init();
+        if (Tools::getValue('file') !== null) {
+            $this->filename = pSQL(Tools::getValue('file'));
+        }
+
+        if (!file_exists($this->getPath()) || (!$this->isCustomization() && !$this->isEmployee())) {
+            $this->redirect_after = '404';
+            $this->redirect();
+        }
+    }
+
+    private function isEmployee(): bool
+    {
+        return !empty((new Cookie('psAdmin'))->id_employee);
+    }
+
+    private function isCustomization(): bool
+    {
+        if ($this->filename === null || !($this->context->cart instanceof Cart)) {
+            return false;
+        }
+
+        $isCustomization = Db::getInstance()->getValue('SELECT 1
+            FROM ' . _DB_PREFIX_ . 'cart c
+            INNER JOIN ' . _DB_PREFIX_ . 'customization cu ON c.id_cart = cu.id_cart
+            INNER JOIN ' . _DB_PREFIX_ . 'customized_data cd ON cd.id_customization = cu.id_customization
+            LEFT JOIN ' . _DB_PREFIX_ . 'orders o ON c.id_cart = o.id_cart
+            WHERE (c.id_customer = ' . (int) $this->context->cart->id_customer . '
+            AND c.id_guest = ' . (int) $this->context->cart->id_guest . '
+            OR o.reference = "' . pSQL(Tools::getValue('reference')) . '")
+            AND cd.type = ' . Product::CUSTOMIZE_FILE . '
+            AND (cd.value = "' . $this->filename . '" OR CONCAT(cd.value, "_small") = "' . $this->filename . '")');
+
+        return (bool) $isCustomization;
+    }
+
+    public function postProcess()
+    {
+        $this->sendFile($this->getPath(), $this->filename, false);
+    }
+
+    private function getPath(): string
+    {
+        return _PS_UPLOAD_DIR_ . $this->filename;
+    }
+}
diff --git a/src/Adapter/Image/ImageRetriever.php b/src/Adapter/Image/ImageRetriever.php
index 5ad3e5bf89e37..1e8ae330d74d7 100644
--- a/src/Adapter/Image/ImageRetriever.php
+++ b/src/Adapter/Image/ImageRetriever.php
@@ -243,8 +243,8 @@ public function getImage($object, $id_image)
      */
     public function getCustomizationImage($imageHash)
     {
-        $large_image_url = rtrim($this->link->getBaseLink(), '/') . '/upload/' . $imageHash;
-        $small_image_url = $large_image_url . '_small';
+        $large_image_url = $this->link->getPageLink('upload', null, null, ['file' => $imageHash]);
+        $small_image_url = $this->link->getPageLink('upload', null, null, ['file' => $imageHash . '_small']);
 
         $small = [
             'url' => $small_image_url,
diff --git a/src/Adapter/Presenter/Order/OrderLazyArray.php b/src/Adapter/Presenter/Order/OrderLazyArray.php
index 2958de00dafda..398c408244684 100644
--- a/src/Adapter/Presenter/Order/OrderLazyArray.php
+++ b/src/Adapter/Presenter/Order/OrderLazyArray.php
@@ -221,7 +221,7 @@ public function getProducts()
 
         $orderProducts = $this->cartPresenter->addCustomizedData($orderProducts, $cart);
 
-        return $orderProducts;
+        return $this->addOrderReferenceToCustomizationFileUrls($orderProducts);
     }
 
     /**
@@ -465,4 +465,39 @@ private function getDefaultHistory()
             'contrast' => '',
         ];
     }
+
+    private function addOrderReferenceToCustomizationFileUrls(array $products): array
+    {
+        /**
+         * @param array|string $url
+         *
+         * @return array|string
+         */
+        $addReferenceFunction = function ($imageUrl) use (&$addReferenceFunction) {
+            if (is_array($imageUrl)) {
+                foreach ($imageUrl as $key => $url) {
+                    $imageUrl[$key] = $addReferenceFunction($url);
+                }
+            } else {
+                // deconstruct the url and rebuild it with the reference query added
+                $parsedUrl = parse_url($imageUrl);
+                parse_str($parsedUrl['query'] ?? '', $parsedQuery);
+                $newQuery = http_build_query(array_merge($parsedQuery, ['reference' => $this->order->reference]));
+                $imageUrl = http_build_url(array_merge($parsedUrl, ['query' => $newQuery]));
+            }
+
+            return $imageUrl;
+        };
+        foreach ($products as &$product) {
+            foreach ($product['customizations'] as &$customization) {
+                foreach ($customization['fields'] as &$field) {
+                    if ($field['type'] === 'image') {
+                        $field['image'] = $addReferenceFunction($field['image']);
+                    }
+                }
+            }
+        }
+
+        return $products;
+    }
 }
diff --git a/upload/.htaccess b/upload/.htaccess
index 235cff7e4750c..c99ee86527a74 100644
--- a/upload/.htaccess
+++ b/upload/.htaccess
@@ -1,12 +1,12 @@
-<IfModule mod_mime.c>
-    RemoveHandler .php .phtml .php3 .php4 .php5
-    RemoveType .php .phtml .php3 .php4 .php5
-</IfModule>
-<IfModule mod_php5.c>
-    php_flag engine off
-</IfModule>
+<IfModule !mod_rewrite.c>
+  # Apache 2.2
+  <IfModule !mod_authz_core.c>
+      Order deny,allow
+      Deny from all
+  </IfModule>
 
-<IfModule mod_headers.c>
-  Header set Content-Disposition "Attachment"
-  Header set X-Content-Type-Options "nosniff"
+  # Apache 2.4
+  <IfModule mod_authz_core.c>
+      Require all denied
+  </IfModule>
 </IfModule>
