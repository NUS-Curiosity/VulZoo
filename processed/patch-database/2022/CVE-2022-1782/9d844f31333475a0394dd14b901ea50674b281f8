diff --git a/para-core/src/main/java/com/erudika/para/core/utils/Utils.java b/para-core/src/main/java/com/erudika/para/core/utils/Utils.java
index 3e030df7..6ba617dd 100644
--- a/para-core/src/main/java/com/erudika/para/core/utils/Utils.java
+++ b/para-core/src/main/java/com/erudika/para/core/utils/Utils.java
@@ -330,13 +330,13 @@ public static String markdownToHtml(String markdownString, boolean htmlTagsRende
 	 * @param template a Mustache template
 	 * @return the compiled template string
 	 */
-	public static String compileMustache(Map<String, Object> context, String template) {
+	public static String compileMustache(Map<String, Object> context, String template, boolean escapeHtml) {
 		if (context == null || StringUtils.isBlank(template)) {
 			return "";
 		}
 		Writer writer = new StringWriter();
 		try {
-			Mustache.compiler().escapeHTML(false).emptyStringIsFalse(true).compile(template).execute(context, writer);
+			Mustache.compiler().escapeHTML(escapeHtml).emptyStringIsFalse(true).compile(template).execute(context, writer);
 		} finally {
 			try {
 				writer.close();
@@ -347,6 +347,16 @@ public static String compileMustache(Map<String, Object> context, String templat
 		return writer.toString();
 	}
 
+	/**
+	 * @see #compileMustache(java.util.Map, java.lang.String, boolean)
+	 * @param context a map of fields and values
+	 * @param template a Mustache template
+	 * @return the compiled template string
+	 */
+	public static String compileMustache(Map<String, Object> context, String template) {
+		return compileMustache(context, template, false);
+	}
+
 	/**
 	 * Abbreviates a string.
 	 * @param str a string
diff --git a/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java b/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
index 0f7021aa..a9f3e236 100644
--- a/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
+++ b/para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java
@@ -17,17 +17,15 @@
  */
 package com.erudika.para.core.utils;
 
-import com.erudika.para.core.utils.Config;
-import com.erudika.para.core.utils.Utils;
-import com.erudika.para.core.annotations.Locked;
 import com.erudika.para.core.App;
 import com.erudika.para.core.ParaObject;
 import com.erudika.para.core.Sysprop;
 import com.erudika.para.core.Tag;
 import com.erudika.para.core.User;
 import com.erudika.para.core.Votable;
-import static com.erudika.para.core.utils.Utils.*;
+import com.erudika.para.core.annotations.Locked;
 import static com.erudika.para.core.utils.ParaObjectUtils.*;
+import static com.erudika.para.core.utils.Utils.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -114,6 +112,8 @@ public void testCompileMustache() {
 		Map<String, Object> map = new HashMap<>();
 		map.put("test", "string");
 		assertEquals("<html>string</html>", compileMustache(map, "<html>{{test}}</html>"));
+		map.put("test", "<b>string</b>");
+		assertEquals("<html>&lt;b&gt;string&lt;/b&gt;</html>", compileMustache(map, "<html>{{test}}</html>", true));
 	}
 
 	@Test
