diff --git a/CHANGELOG.md b/CHANGELOG.md
index 08e1c218..1254574c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,10 @@
 # Snyk Changelog
 
+## [1.1.31]
+
+### Added
+- Adds workspace trust mechanism to ensure scans are run on the trusted projects.
+
 ## [1.1.30]
 
 ### Changed
@@ -48,7 +53,7 @@
 
 ### Added
 - Organization description information in settings.
- 
+
 ### Fixed
 - Changing custom endpoint settings leads to authentication errors.
 
diff --git a/Snyk.VisualStudio.Extension.2022/Snyk.VisualStudio.Extension.2022.csproj b/Snyk.VisualStudio.Extension.2022/Snyk.VisualStudio.Extension.2022.csproj
index 30dfb99d..6fd88d38 100644
--- a/Snyk.VisualStudio.Extension.2022/Snyk.VisualStudio.Extension.2022.csproj
+++ b/Snyk.VisualStudio.Extension.2022/Snyk.VisualStudio.Extension.2022.csproj
@@ -49,6 +49,9 @@
   </PropertyGroup>
   <ItemGroup>
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="TrustDialogWindow.xaml.cs">
+      <DependentUpon>TrustDialogWindow.xaml</DependentUpon>
+    </Compile>
   </ItemGroup>
   <ItemGroup>
     <None Include="source.extension.vsixmanifest">
@@ -120,6 +123,12 @@
       <Name>Snyk.Common</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <Page Include="TrustDialogWindow.xaml">
+      <Generator>MSBuild:Compile</Generator>
+      <SubType>Designer</SubType>
+    </Page>
+  </ItemGroup>
   <Import Project="..\Snyk.VisualStudio.Extension.Shared\Snyk.VisualStudio.Extension.Shared.projitems" Label="Shared" />
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />
diff --git a/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml b/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml
new file mode 100644
index 00000000..d50ef332
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml
@@ -0,0 +1,59 @@
+﻿<ui:DialogWindow x:Class="Snyk.VisualStudio.Extension.TrustDialogWindow"
+                 x:Name="TrustWindow"
+                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+                 xmlns:toolkit="clr-namespace:Community.VisualStudio.Toolkit;assembly=Community.VisualStudio.Toolkit"
+                 xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
+                 mc:Ignorable="d"
+                 WindowStartupLocation="CenterScreen"
+                 IsCloseButtonEnabled="True"
+                 HasHelpButton="False"
+                 MinHeight="290" Height="290"
+                 MinWidth="500" Width="500"
+                 BorderBrush="{x:Static SystemColors.WindowFrameBrush}" BorderThickness="1"
+                 WindowStyle="None" ResizeMode="NoResize" AllowsTransparency="True"
+                 xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
+                 xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
+                 toolkit:Themes.UseVsTheme="True"
+                 Title="Snyk - This folder has not been trusted"
+                 MouseDown="TrustDialogWindow_OnMouseDown">
+    <DockPanel Margin="10">
+        <Button DockPanel.Dock="Top" HorizontalAlignment="Right" Click="DoNotTrustButton_OnClick" MinWidth="1" MinHeight="1" Width="35" Margin="0" Padding="0">
+            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Close}"/>
+        </Button>
+        <StackPanel HorizontalAlignment="Right" DockPanel.Dock="Bottom" Orientation="Horizontal">
+            <Button x:Name="TrustButton" Margin="5, 5" Content="Trust folder and continue" Click="TrustButton_OnClick"/>
+            <Button x:Name="DoNotTrustButton" Margin="5, 5" Content="Don't scan" Click="DoNotTrustButton_OnClick"/>
+        </StackPanel>
+        <Grid>
+            <Grid.RowDefinitions>
+                <RowDefinition Height="auto"/>
+                <RowDefinition Height="auto"/>
+            </Grid.RowDefinitions>
+            <Grid Grid.Row="0">
+                <Grid.ColumnDefinitions>
+                    <ColumnDefinition Width="*"/>
+                    <ColumnDefinition Width="5*"/>
+                </Grid.ColumnDefinitions>
+                    <imaging:CrispImage Grid.Column="0" Width="50" Moniker="{x:Static catalog:KnownMonikers.StatusSecurityWarning}"/>
+                <StackPanel VerticalAlignment="Center" Grid.Column="1" Margin="0, 0, 5, 0">
+                    <TextBlock FontSize="14">This folder has not been trusted:</TextBlock>
+                    <TextBlock FontSize="14" FontWeight="Bold" TextWrapping="Wrap" Text="{Binding ElementName=TrustWindow, Path=FolderPath}"/>
+                </StackPanel>
+            </Grid>
+            <StackPanel Grid.Row="1" Margin="5">
+                <TextBlock TextWrapping="Wrap">
+                    When scanning folder files for vulnerabilities, Snyk may automatically execute code such as invoking the package manager to get dependency information. You should only scan folders you trust.
+                </TextBlock>
+                <TextBlock>
+                    <LineBreak/>
+                    <Hyperlink NavigateUri="https://docs.snyk.io/ide-tools/visual-studio-extension/workspace-trust" RequestNavigate="Hyperlink_OnRequestNavigate">
+                        More information
+                    </Hyperlink>
+                </TextBlock>
+            </StackPanel>
+        </Grid>
+    </DockPanel>
+</ui:DialogWindow>
\ No newline at end of file
diff --git a/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml.cs b/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml.cs
new file mode 100644
index 00000000..14deefa0
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.2022/TrustDialogWindow.xaml.cs
@@ -0,0 +1,49 @@
+﻿
+namespace Snyk.VisualStudio.Extension
+{
+    using System.Diagnostics;
+    using System.Windows;
+    using System.Windows.Input;
+    using System.Windows.Navigation;
+    using Microsoft.VisualStudio.PlatformUI;
+
+    /// <summary>
+    /// Trusted dialog window for Visual Studio 2022.
+    /// </summary>
+    public partial class TrustDialogWindow : DialogWindow
+    {
+        public TrustDialogWindow(string folderPath)
+        {
+            this.FolderPath = folderPath;
+            this.InitializeComponent();
+        }
+
+        public string FolderPath { get; }
+
+        private void DoNotTrustButton_OnClick(object sender, RoutedEventArgs e)
+        {
+            this.DialogResult = false;
+            this.Close();
+        }
+
+        private void TrustButton_OnClick(object sender, RoutedEventArgs e)
+        {
+            this.DialogResult = true;
+            this.Close();
+        }
+
+        private void Hyperlink_OnRequestNavigate(object sender, RequestNavigateEventArgs e)
+        {
+            Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri));
+            e.Handled = true;
+        }
+
+        private void TrustDialogWindow_OnMouseDown(object sender, MouseButtonEventArgs e)
+        {
+            if (e.ChangedButton == MouseButton.Left)
+            {
+                this.DragMove();
+            }
+        }
+    }
+}
diff --git a/Snyk.VisualStudio.Extension.Shared/Service/ISnykServiceProvider.cs b/Snyk.VisualStudio.Extension.Shared/Service/ISnykServiceProvider.cs
index bb06b245..84a61be7 100644
--- a/Snyk.VisualStudio.Extension.Shared/Service/ISnykServiceProvider.cs
+++ b/Snyk.VisualStudio.Extension.Shared/Service/ISnykServiceProvider.cs
@@ -38,6 +38,8 @@ public interface ISnykServiceProvider
         /// </summary>
         ISolutionService SolutionService { get; }
 
+        IWorkspaceTrustService WorkspaceTrustService { get; }
+
         /// <summary>
         /// Gets Tasks service instance.
         /// </summary>
diff --git a/Snyk.VisualStudio.Extension.Shared/Service/IWorkspaceTrustService.cs b/Snyk.VisualStudio.Extension.Shared/Service/IWorkspaceTrustService.cs
new file mode 100644
index 00000000..f1474089
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.Shared/Service/IWorkspaceTrustService.cs
@@ -0,0 +1,9 @@
+﻿namespace Snyk.VisualStudio.Extension.Shared.Service
+{
+    public interface IWorkspaceTrustService
+    {
+        bool IsFolderTrusted(string absoluteFolderPath);
+
+        void AddFolderToTrusted(string absoluteFolderPath);
+    }
+}
diff --git a/Snyk.VisualStudio.Extension.Shared/Service/SnykService.cs b/Snyk.VisualStudio.Extension.Shared/Service/SnykService.cs
index 8ac6cf53..9d1f254b 100644
--- a/Snyk.VisualStudio.Extension.Shared/Service/SnykService.cs
+++ b/Snyk.VisualStudio.Extension.Shared/Service/SnykService.cs
@@ -52,6 +52,8 @@ public class SnykService : ISnykServiceProvider, ISnykService
 
         private ISentryService sentryService;
 
+        private IWorkspaceTrustService workspaceTrustService;
+
         /// <summary>
         /// Initializes a new instance of the <see cref="SnykService"/> class.
         /// </summary>
@@ -68,6 +70,11 @@ public class SnykService : ISnykServiceProvider, ISnykService
         /// </summary>
         public ISolutionService SolutionService => SnykSolutionService.Instance;
 
+        /// <summary>
+        /// Gets solution service.
+        /// </summary>
+        public IWorkspaceTrustService WorkspaceTrustService => this.workspaceTrustService;
+
         /// <summary>
         /// Gets Tasks service.
         /// </summary>
@@ -241,6 +248,7 @@ public async Task InitializeAsync(CancellationToken cancellationToken)
                 this.dte = await this.serviceProvider.GetServiceAsync(typeof(DTE)) as DTE2;
                 await SnykSolutionService.Instance.InitializeAsync(this);
                 this.tasksService = SnykTasksService.Instance;
+                this.workspaceTrustService = new WorkspaceTrustService(this.UserStorageSettingsService);
 
                 NotificationService.Initialize(this);
                 VsStatusBar.Initialize(this);
diff --git a/Snyk.VisualStudio.Extension.Shared/Service/SnykTasksService.cs b/Snyk.VisualStudio.Extension.Shared/Service/SnykTasksService.cs
index 33baac99..d77c2a45 100644
--- a/Snyk.VisualStudio.Extension.Shared/Service/SnykTasksService.cs
+++ b/Snyk.VisualStudio.Extension.Shared/Service/SnykTasksService.cs
@@ -4,7 +4,9 @@
     using System.Collections.Generic;
     using System.Threading;
     using System.Threading.Tasks;
+    using Community.VisualStudio.Toolkit;
     using Microsoft.VisualStudio.Shell;
+    using Microsoft.VisualStudio.Shell.Interop;
     using Serilog;
     using Snyk.Analytics;
     using Snyk.Code.Library.Domain.Analysis;
@@ -12,6 +14,7 @@
     using Snyk.VisualStudio.Extension.Shared.CLI;
     using Snyk.VisualStudio.Extension.Shared.CLI.Download;
     using Snyk.VisualStudio.Extension.Shared.Service.Domain;
+    using Snyk.VisualStudio.Extension.Shared.UI;
     using static Snyk.VisualStudio.Extension.Shared.CLI.Download.SnykCliDownloader;
     using Task = System.Threading.Tasks.Task;
 
@@ -198,7 +201,6 @@ public void CancelTasks()
         public async Task ScanAsync()
         {
             Logger.Information("Enter Scan method");
-
             try
             {
                 var selectedFeatures = await this.GetFeaturesSettingsAsync();
@@ -212,6 +214,13 @@ public async Task ScanAsync()
                     return;
                 }
 
+                var isFolderTrusted = await this.IsFolderTrustedAsync();
+                if (!isFolderTrusted)
+                {
+                    Logger.Information("Workspace folder was not trusted for scanning.");
+                    return;
+                }
+
                 this.serviceProvider.AnalyticsService.LogAnalysisIsTriggeredEvent(this.GetSelectedFeatures(selectedFeatures));
 
                 var ossScanTask = this.ScanOssAsync(selectedFeatures);
@@ -225,6 +234,41 @@ public async Task ScanAsync()
             }
         }
 
+        /// <summary>
+        /// Checks if opened solution folder is trusted. If not, prompts a user with trust permission.
+        /// </summary>
+        /// <returns>Folder is trusted or not.</returns>
+        public async Task<bool> IsFolderTrustedAsync()
+        {
+            var solutionFolderPath = await this.serviceProvider.SolutionService.GetSolutionFolderAsync();
+            var isFolderTrusted = this.serviceProvider.WorkspaceTrustService.IsFolderTrusted(solutionFolderPath);
+
+            if (string.IsNullOrEmpty(solutionFolderPath) || isFolderTrusted)
+            {
+                return true;
+            }
+
+            var trustDialog = new TrustDialogWindow(solutionFolderPath);
+            var trusted = trustDialog.ShowModal();
+
+            if (trusted != true)
+            {
+                return false;
+            }
+
+            try
+            {
+                this.serviceProvider.WorkspaceTrustService.AddFolderToTrusted(solutionFolderPath);
+                Logger.Information("Workspace folder was trusted: {SolutionFolderPath}", solutionFolderPath);
+                return true;
+            }
+            catch (ArgumentException e)
+            {
+                Logger.Error(e, "Failed to add folder to trusted list.");
+                throw;
+            }
+        }
+
         /// <summary>
         /// Start a CLI download task in background thread.
         /// </summary>
diff --git a/Snyk.VisualStudio.Extension.Shared/Service/WorkspaceTrustService.cs b/Snyk.VisualStudio.Extension.Shared/Service/WorkspaceTrustService.cs
new file mode 100644
index 00000000..8a4da121
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.Shared/Service/WorkspaceTrustService.cs
@@ -0,0 +1,89 @@
+﻿namespace Snyk.VisualStudio.Extension.Shared.Service
+{
+    using System;
+    using System.Collections.Generic;
+    using System.IO;
+    using System.Linq;
+    using Serilog;
+    using Snyk.Common;
+    using Snyk.VisualStudio.Extension.Shared.Settings;
+
+    public class WorkspaceTrustService : IWorkspaceTrustService
+    {
+        private static readonly ILogger Logger = LogManager.ForContext<WorkspaceTrustService>();
+
+        private readonly IUserStorageSettingsService settingsService;
+
+        public WorkspaceTrustService(IUserStorageSettingsService settingsService)
+        {
+            this.settingsService = settingsService;
+        }
+
+        public void AddFolderToTrusted(string absoluteFolderPath)
+        {
+            if (!Path.IsPathRooted(absoluteFolderPath))
+            {
+                throw new ArgumentException("Trusted folder path provided is not absolute.");
+            }
+
+            if (!Directory.Exists(absoluteFolderPath))
+            {
+                throw new ArgumentException("Trusted folder doesn't exist.");
+            }
+
+            try
+            {
+                var trustedFolders = this.settingsService.TrustedFolders;
+                trustedFolders.Add(absoluteFolderPath);
+                this.settingsService.TrustedFolders = trustedFolders;
+            }
+            catch (Exception e)
+            {
+                Logger.Error(e, "Failed to add a folder to trusted.");
+            }
+        }
+
+        public bool IsFolderTrusted(string absoluteFolderPath)
+        {
+            var trustedFolders = this.settingsService.TrustedFolders;
+
+            foreach (var trustedFolder in trustedFolders)
+            {
+                if (this.IsSubFolderOrEqual(trustedFolder, absoluteFolderPath))
+                {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+
+        /// <summary>
+        /// Verify if subfolder is rooted at parent path.
+        /// </summary>
+        /// <param name="parentPath">Parent path to check against.</param>
+        /// <param name="childPath">Subfolder path to verify.</param>
+        /// <returns>Returns true if childPath is subfolder of parentPath, or equal to it.</returns>
+        private bool IsSubFolderOrEqual(string parentPath, string childPath)
+        {
+            var parentUri = new Uri(parentPath);
+            if (new Uri(childPath).Equals(parentUri))
+            {
+                return true;
+            }
+
+            var childUri = new DirectoryInfo(childPath).Parent;
+            while (childUri != null)
+            {
+                if (new Uri(childUri.FullName).Equals(parentUri))
+                {
+                    return true;
+                }
+
+                childUri = childUri.Parent;
+            }
+
+            return false;
+        }
+    }
+}
diff --git a/Snyk.VisualStudio.Extension.Shared/Settings/IUserStorageSettingsService.cs b/Snyk.VisualStudio.Extension.Shared/Settings/IUserStorageSettingsService.cs
new file mode 100644
index 00000000..c0521abe
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.Shared/Settings/IUserStorageSettingsService.cs
@@ -0,0 +1,9 @@
+﻿namespace Snyk.VisualStudio.Extension.Shared.Settings
+{
+    using System.Collections.Generic;
+
+    public interface IUserStorageSettingsService
+    {
+        ISet<string> TrustedFolders { get; set; }
+    }
+}
diff --git a/Snyk.VisualStudio.Extension.Shared/Settings/SnykSettings.cs b/Snyk.VisualStudio.Extension.Shared/Settings/SnykSettings.cs
index 2518a246..daf2806c 100644
--- a/Snyk.VisualStudio.Extension.Shared/Settings/SnykSettings.cs
+++ b/Snyk.VisualStudio.Extension.Shared/Settings/SnykSettings.cs
@@ -61,8 +61,13 @@ public SnykSettings()
         public bool BinariesAutoUpdateEnabled { get; set; } = true;
 
         /// <summary>
-        /// Gets or sets the value of the custom CLI path
+        /// Gets or sets the value of the custom CLI path.
         /// </summary>
         public string CustomCliPath { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets an array of workspace trusted folders.
+        /// </summary>
+        public ISet<string> TrustedFolders { get; set; } = new HashSet<string>();
     }
 }
\ No newline at end of file
diff --git a/Snyk.VisualStudio.Extension.Shared/Settings/SnykUserStorageSettingsService.cs b/Snyk.VisualStudio.Extension.Shared/Settings/SnykUserStorageSettingsService.cs
index 5885dace..dd3b590c 100644
--- a/Snyk.VisualStudio.Extension.Shared/Settings/SnykUserStorageSettingsService.cs
+++ b/Snyk.VisualStudio.Extension.Shared/Settings/SnykUserStorageSettingsService.cs
@@ -1,6 +1,7 @@
 ﻿namespace Snyk.VisualStudio.Extension.Shared.Settings
 {
     using System;
+    using System.Collections.Generic;
     using System.Threading.Tasks;
     using Serilog;
     using Snyk.Common;
@@ -9,7 +10,7 @@
     /// <summary>
     /// Service for solution settings.
     /// </summary>
-    public class SnykUserStorageSettingsService
+    public class SnykUserStorageSettingsService : IUserStorageSettingsService
     {
         private static readonly ILogger Logger = LogManager.ForContext<SnykUserStorageSettingsService>();
 
@@ -51,6 +52,20 @@ public string CliCustomPath
             }
         }
 
+        /// <summary>
+        /// Gets or sets trusted folders list.
+        /// </summary>
+        public ISet<string> TrustedFolders
+        {
+            get => this.LoadSettings().TrustedFolders;
+            set
+            {
+                var settings = this.LoadSettings();
+                settings.TrustedFolders = value;
+                this.settingsLoader.Save(settings);
+            }
+        }
+
         /// <summary>
         /// Get CLI additional options string.
         /// </summary>
diff --git a/Snyk.VisualStudio.Extension.Shared/Snyk.VisualStudio.Extension.Shared.projitems b/Snyk.VisualStudio.Extension.Shared/Snyk.VisualStudio.Extension.Shared.projitems
index 6119770d..8f762477 100644
--- a/Snyk.VisualStudio.Extension.Shared/Snyk.VisualStudio.Extension.Shared.projitems
+++ b/Snyk.VisualStudio.Extension.Shared/Snyk.VisualStudio.Extension.Shared.projitems
@@ -31,13 +31,16 @@
     <Compile Include="$(MSBuildThisFileDirectory)Service\ApiEndpointResolver.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\ISentryService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\ISnykApiService.cs" />
+    <Compile Include="$(MSBuildThisFileDirectory)Service\IWorkspaceTrustService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\LocalCodeEngine.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\SentryService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\SolutionType.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\IOssService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\OssScanException.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Service\OssService.cs" />
+    <Compile Include="$(MSBuildThisFileDirectory)Service\WorkspaceTrustService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Settings\ISnykOptions.cs" />
+    <Compile Include="$(MSBuildThisFileDirectory)Settings\IUserStorageSettingsService.cs" />
     <Compile Include="$(MSBuildThisFileDirectory)Settings\SnykGeneralOptionsDialogPage.cs">
       <SubType>Component</SubType>
     </Compile>
diff --git a/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml b/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml
index 0c5fd76f..27eff58e 100644
--- a/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml
+++ b/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml
@@ -1,12 +1,12 @@
 ﻿<UserControl x:Class="Snyk.VisualStudio.Extension.Shared.UI.Toolwindow.MessagePanel"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
-             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
-             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
-             xmlns:c="clr-namespace:Snyk.VisualStudio.Extension.Shared.UI.Controls" 
+             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+             xmlns:c="clr-namespace:Snyk.VisualStudio.Extension.Shared.UI.Controls"
              xmlns:toolkit="clr-namespace:Community.VisualStudio.Toolkit;assembly=Community.VisualStudio.Toolkit"
              toolkit:Themes.UseVsTheme="True"
-             mc:Ignorable="d" 
+             mc:Ignorable="d"
              d:DesignHeight="450" d:DesignWidth="800">
     <Grid VerticalAlignment="Center">
         <Grid.Resources>
@@ -32,11 +32,11 @@
                 <Button x:Name="runScanButton" Content="Run scan" IsDefault="True" Click="RunButton_Click" HorizontalAlignment="Center" MinWidth="80"/>
             </StackPanel>
         </StackPanel>
-        
+
         <StackPanel Name="messagePanel" Visibility="Collapsed" HorizontalAlignment="Center">
             <c:TextField x:Name="message" FontWeight="Bold"/>
         </StackPanel>
-        
+
         <StackPanel Name="overviewPanel" Visibility="Collapsed" HorizontalAlignment="Center" Orientation="Horizontal">
             <Image Source="{StaticResource SnykDogLogo}" Width="48" Margin="0,-30,0,30"/>
 
@@ -48,11 +48,17 @@
                     1. Authenticate to Snyk.io
                 </TextBlock>
                 <TextBlock>
-                    2. Analyze code for issues and vulnerabilities                
+                    2. Analyze code for issues and vulnerabilities
                 </TextBlock>
                 <TextBlock>
                     3. Improve your code and upgrade dependencies
                 </TextBlock>
+                <TextBlock Margin="0,10,0,0" TextWrapping="Wrap" Width="550">
+                    When scanning project files, Snyk may automatically execute code such as invoking the package manager to get dependency information. You should only scan projects you trust.
+                    <Hyperlink NavigateUri="https://docs.snyk.io/ide-tools/visual-studio-extension/workspace-trust" RequestNavigate="Hyperlink_RequestNavigate">
+                        More info
+                    </Hyperlink>
+                </TextBlock>
                 <StackPanel HorizontalAlignment="Left" Margin="0,25,0,0">
                     <Button Name="testCodeNowButton" Click="TestCodeNow_Click" Padding="20,6,20,8">
                         <Button.Resources>
@@ -60,14 +66,14 @@
                                 <Setter Property="CornerRadius" Value="3"/>
                             </Style>
                         </Button.Resources>
-                        Test code now
+                        Trust project and scan
                     </Button>
                 </StackPanel>
                 <ProgressBar Name="authenticateSnykProgressBar" Visibility="Collapsed" IsIndeterminate="True" Height="3" Padding="0,2" Margin="0, 5, 0, 0"/>
                 <TextBlock Margin="0, 20, 0, 0" FontSize="11">
                     By connecting your account with Snyk, you agree
                 </TextBlock>
-                <TextBlock FontSize="11">                    
+                <TextBlock FontSize="11">
                     to the Snyk
                     <Hyperlink NavigateUri="https://snyk.io/policies/privacy/" RequestNavigate="Hyperlink_RequestNavigate">
                         Privacy Policy
diff --git a/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml.cs b/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml.cs
index 97e8273e..4e332ae9 100644
--- a/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml.cs
+++ b/Snyk.VisualStudio.Extension.Shared/UI/Toolwindow/MessagePanel.xaml.cs
@@ -1,13 +1,19 @@
 ﻿namespace Snyk.VisualStudio.Extension.Shared.UI.Toolwindow
 {
+    using System;
     using System.Collections.Generic;
     using System.Diagnostics;
     using System.IO;
     using System.Threading.Tasks;
     using System.Windows;
     using System.Windows.Controls;
+    using Community.VisualStudio.Toolkit;
     using Microsoft.VisualStudio.Shell;
+    using Microsoft.VisualStudio.Shell.Interop;
     using Microsoft.VisualStudio.Threading;
+    using Serilog;
+    using Serilog.Core;
+    using Snyk.Common;
     using Snyk.VisualStudio.Extension.Shared.Service;
 
     /// <summary>
@@ -15,6 +21,7 @@
     /// </summary>
     public partial class MessagePanel : UserControl
     {
+        private static readonly ILogger Logger = LogManager.ForContext<MessagePanel>();
         private readonly IList<StackPanel> panels;
 
         /// <summary>
@@ -120,6 +127,36 @@ private async void TestCodeNow_Click(object sender, RoutedEventArgs e)
             this.authenticateSnykProgressBar.Visibility = Visibility.Collapsed;
             this.testCodeNowButton.IsEnabled = true;
 
+            // Add folder to trusted
+            var solutionFolderPath = await this.ServiceProvider.SolutionService.GetSolutionFolderAsync();
+            if (!string.IsNullOrEmpty(solutionFolderPath))
+            {
+                try
+                {
+                    this.ServiceProvider.WorkspaceTrustService.AddFolderToTrusted(solutionFolderPath);
+                    Logger.Information("Workspace folder was trusted: {SolutionFolderPath}", solutionFolderPath);
+                }
+                catch (ArgumentException ex)
+                {
+                    Logger.Error(ex, "Failed to add folder to trusted list.");
+                    throw ex;
+                }
+            }
+
+            // Issue scan
+            if (authenticationSucceeded)
+            {
+                var uiShell = Microsoft.VisualStudio.Shell.ServiceProvider.GlobalProvider.GetService(typeof(SVsUIShell)) as IVsUIShell;
+                if (uiShell != null)
+                {
+                    uiShell.PostExecCommand(
+                        SnykGuids.SnykVSPackageCommandSet,
+                        SnykGuids.RunScanCommandId,
+                        0,
+                        null);
+                }
+            }
+
             var nextPanel = authenticationSucceeded ? (ToolWindowState)RunScanState.Instance : OverviewState.Instance;
             this.Context.TransitionTo(nextPanel);
         }
diff --git a/Snyk.VisualStudio.Extension.Tests/Service/WorkspaceTrustServiceTest.cs b/Snyk.VisualStudio.Extension.Tests/Service/WorkspaceTrustServiceTest.cs
new file mode 100644
index 00000000..2b13e5cc
--- /dev/null
+++ b/Snyk.VisualStudio.Extension.Tests/Service/WorkspaceTrustServiceTest.cs
@@ -0,0 +1,149 @@
+﻿namespace Snyk.VisualStudio.Extension.Tests.Service
+{
+    using System;
+    using System.Collections.Generic;
+    using System.IO;
+    using Moq;
+    using Snyk.VisualStudio.Extension.Shared.Service;
+    using Snyk.VisualStudio.Extension.Shared.Settings;
+    using Xunit;
+
+    public class WorkspaceTrustServiceTest
+    {
+        [Fact]
+        public void WorkspaceTrustServiceTest_IsFolderTrusted_NotTrusted()
+        {
+            var trustedFolders = new HashSet<string>();
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(trustedFolders);
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "C:\\Users\\Project";
+
+            Assert.False(service.IsFolderTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_IsFolderTrusted_Trusted()
+        {
+            var trustedFolders = new HashSet<string>();
+            trustedFolders.Add("C:\\Users\\Project");
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(trustedFolders);
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "C:\\Users\\Project";
+
+            Assert.True(service.IsFolderTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_IsFolderTrusted_SubfolderTrusted()
+        {
+            var trustedFolders = new HashSet<string>();
+            trustedFolders.Add("C:\\Users\\Project");
+
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(trustedFolders);
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "C:\\Users\\Project\\subfolder";
+
+            Assert.True(service.IsFolderTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_IsFolderTrusted_ParentFolderNotTrusted()
+        {
+            var trustedFolders = new HashSet<string>();
+            trustedFolders.Add("C:\\Users\\Project\\subfolder");
+
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(trustedFolders);
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "C:\\Users\\Project";
+
+            Assert.False(service.IsFolderTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_AddFolderToTrusted_NonExistingFolder()
+        {
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "C:\\Users\\Project";
+
+            Assert.Throws<ArgumentException>(() => service.AddFolderToTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_AddFolderToTrusted_RelativeFolder()
+        {
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = "\\Users\\Project";
+
+            Assert.Throws<ArgumentException>(() => service.AddFolderToTrusted(folderPath));
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_AddFolderToTrusted_ExistingFolder()
+        {
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(new HashSet<string>());
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+            var folderPath = Path.GetDirectoryName(Path.GetTempFileName());
+
+            service.AddFolderToTrusted(folderPath);
+
+            settingsServiceMock.VerifySet(s => s.TrustedFolders = new HashSet<string> { folderPath }, Times.Once);
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_AddFolderToTrusted_MultipleFolders()
+        {
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            var presentFolder = "C:\\Users\\Project";
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(new HashSet<string> { presentFolder });
+
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+
+            var newFolderPath = this.CreateTempDirectory();
+
+            service.AddFolderToTrusted(newFolderPath);
+
+            settingsServiceMock.VerifySet(s => s.TrustedFolders = new HashSet<string> { presentFolder, newFolderPath });
+        }
+
+        [Fact]
+        public void WorkspaceTrustServiceTest_AddFolderToTrusted_SameFolderTwice()
+        {
+            var settingsServiceMock = new Mock<IUserStorageSettingsService>();
+            settingsServiceMock.Setup(s => s.TrustedFolders).Returns(new HashSet<string>());
+            var service = new WorkspaceTrustService(settingsServiceMock.Object);
+
+            var folderPath1 = this.CreateTempDirectory();
+            var folderPath2 = folderPath1;
+
+            service.AddFolderToTrusted(folderPath1);
+            settingsServiceMock.VerifySet(s => s.TrustedFolders = new HashSet<string> { folderPath1 }, Times.Once);
+
+            service.AddFolderToTrusted(folderPath2);
+
+            // Must not append new entry to collection
+            settingsServiceMock.VerifySet(s => s.TrustedFolders = new HashSet<string> { folderPath1 }, Times.Exactly(2));
+        }
+
+        private string CreateTempDirectory()
+        {
+            var tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
+            Directory.CreateDirectory(tempDirectory);
+
+            return tempDirectory;
+        }
+    }
+}
diff --git a/Snyk.VisualStudio.Extension/Snyk.VisualStudio.Extension.csproj b/Snyk.VisualStudio.Extension/Snyk.VisualStudio.Extension.csproj
index 01471733..90acf93b 100644
--- a/Snyk.VisualStudio.Extension/Snyk.VisualStudio.Extension.csproj
+++ b/Snyk.VisualStudio.Extension/Snyk.VisualStudio.Extension.csproj
@@ -26,7 +26,7 @@
     <StartAction>Program</StartAction>
     <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
     <StartArguments>/rootsuffix Exp</StartArguments>
-	<DeployVsixExtensionFilesDependsOn>$(DeployVsixExtensionFilesDependsOn);SaveSettingsJsonFile</DeployVsixExtensionFilesDependsOn>
+    <DeployVsixExtensionFilesDependsOn>$(DeployVsixExtensionFilesDependsOn);SaveSettingsJsonFile</DeployVsixExtensionFilesDependsOn>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
@@ -121,9 +121,17 @@
       <Version>4.5.4</Version>
     </PackageReference>
   </ItemGroup>
-  <ItemGroup />
+  <ItemGroup>
+    <Page Include="TrustDialogWindow.xaml">
+      <Generator>MSBuild:Compile</Generator>
+      <SubType>Designer</SubType>
+    </Page>
+  </ItemGroup>
   <ItemGroup>
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="TrustDialogWindow.xaml.cs">
+      <DependentUpon>TrustDialogWindow.xaml</DependentUpon>
+    </Compile>
   </ItemGroup>
   <Import Project="..\Snyk.VisualStudio.Extension.Shared\Snyk.VisualStudio.Extension.Shared.projitems" Label="Shared" />
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
@@ -144,30 +152,17 @@
   </Target>  
   -->
   <Target Name="IncludePackageReferenceDependencies" AfterTargets="GetVsixSourceItems">
-      <ItemGroup>
-          <VSIXSourceItem Include="@(ReferencePath)" />
-      </ItemGroup>
+    <ItemGroup>
+      <VSIXSourceItem Include="@(ReferencePath)" />
+    </ItemGroup>
   </Target>
-  <Target Name="SaveSettingsJsonFile"
-          DependsOnTargets="GetVsixDeploymentPath">
-	<Message Condition="!Exists('$(VsixDeploymentPath)settings.json')"
-	  Importance="High" 
-      Text="settings.json does not exist, skipping step"/>
-    <Message Condition="Exists('$(VsixDeploymentPath)settings.json')"
-      Importance="High" 
-      Text="Saving settings.json file from $(VsixDeploymentPath)settings.json"/>
-    <Move Condition="Exists('$(VsixDeploymentPath)settings.json')"
-          SourceFiles="$(VsixDeploymentPath)settings.json"
-          DestinationFiles="$(IntermediateOutputPath)settings.json"/>
+  <Target Name="SaveSettingsJsonFile" DependsOnTargets="GetVsixDeploymentPath">
+    <Message Condition="!Exists('$(VsixDeploymentPath)settings.json')" Importance="High" Text="settings.json does not exist, skipping step" />
+    <Message Condition="Exists('$(VsixDeploymentPath)settings.json')" Importance="High" Text="Saving settings.json file from $(VsixDeploymentPath)settings.json" />
+    <Move Condition="Exists('$(VsixDeploymentPath)settings.json')" SourceFiles="$(VsixDeploymentPath)settings.json" DestinationFiles="$(IntermediateOutputPath)settings.json" />
   </Target>
-  <Target Name="AfterBuild" 
-          DependsOnTargets="GetVsixDeploymentPath">
-    <Message 
-      Condition="Exists('$(IntermediateOutputPath)settings.json')"
-      Text="Copying settings.json back to $(VsixDeploymentPath)" 
-      Importance="High"/>
-    <Move Condition="Exists('$(IntermediateOutputPath)settings.json')"
-          DestinationFiles="$(VsixDeploymentPath)settings.json"
-          SourceFiles="$(IntermediateOutputPath)settings.json"/>
+  <Target Name="AfterBuild" DependsOnTargets="GetVsixDeploymentPath">
+    <Message Condition="Exists('$(IntermediateOutputPath)settings.json')" Text="Copying settings.json back to $(VsixDeploymentPath)" Importance="High" />
+    <Move Condition="Exists('$(IntermediateOutputPath)settings.json')" DestinationFiles="$(VsixDeploymentPath)settings.json" SourceFiles="$(IntermediateOutputPath)settings.json" />
   </Target>
 </Project>
\ No newline at end of file
diff --git a/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml b/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml
new file mode 100644
index 00000000..cbc8718e
--- /dev/null
+++ b/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml
@@ -0,0 +1,59 @@
+﻿<ui:DialogWindow x:Class="Snyk.VisualStudio.Extension.TrustDialogWindow"
+                 x:Name="trustDialogWindow"
+                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+                 xmlns:toolkit="clr-namespace:Community.VisualStudio.Toolkit;assembly=Community.VisualStudio.Toolkit"
+                 xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
+                 mc:Ignorable="d"
+                 WindowStartupLocation="CenterScreen"
+                 IsCloseButtonEnabled="True"
+                 HasHelpButton="False"
+                MinHeight="290" Height="290"
+                 MinWidth="500" Width="500"
+                 BorderBrush="{x:Static SystemColors.WindowFrameBrush}" BorderThickness="1"
+                 WindowStyle="None" ResizeMode="NoResize" AllowsTransparency="True"
+                 xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
+                 xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
+                 toolkit:Themes.UseVsTheme="True"
+                 Title="Snyk - This folder has not been trusted"
+                 MouseDown="TrustDialogWindow_OnMouseDown">
+    <DockPanel Margin="10">
+        <Button DockPanel.Dock="Top" HorizontalAlignment="Right" Click="DoNotTrustButton_OnClick" MinWidth="1" MinHeight="1" Width="35" Margin="0" Padding="0">
+            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Close}"/>
+        </Button>
+        <StackPanel HorizontalAlignment="Right" DockPanel.Dock="Bottom" Orientation="Horizontal">
+            <Button x:Name="TrustButton" Margin="5, 5" Content="Trust folder and continue" Click="TrustButton_OnClick"/>
+            <Button x:Name="DoNotTrustButton" Margin="5, 5" Content="Don't scan" Click="DoNotTrustButton_OnClick"/>
+        </StackPanel>
+        <Grid>
+            <Grid.RowDefinitions>
+                <RowDefinition Height="auto"/>
+                <RowDefinition Height="auto"/>
+            </Grid.RowDefinitions>
+            <Grid Grid.Row="0">
+                <Grid.ColumnDefinitions>
+                    <ColumnDefinition Width="*"/>
+                    <ColumnDefinition Width="5*"/>
+                </Grid.ColumnDefinitions>
+                <imaging:CrispImage Grid.Column="0" Width="50" Moniker="{x:Static catalog:KnownMonikers.StatusSecurityWarning}"/>
+                <StackPanel VerticalAlignment="Center" Grid.Column="1" Margin="0, 0, 5, 0">
+                    <TextBlock FontSize="14">This folder has not been trusted:</TextBlock>
+                    <TextBlock FontSize="14" FontWeight="Bold" TextWrapping="Wrap" Text="{Binding ElementName=TrustWindow, Path=FolderPath}"/>
+                </StackPanel>
+            </Grid>
+            <StackPanel Grid.Row="1" Margin="5">
+                <TextBlock TextWrapping="Wrap">
+                    When scanning folder files for vulnerabilities, Snyk may automatically execute code such as invoking the package manager to get dependency information. You should only scan folders you trust.
+                </TextBlock>
+                <TextBlock>
+                    <LineBreak/>
+                    <Hyperlink NavigateUri="https://docs.snyk.io/ide-tools/visual-studio-extension/workspace-trust" RequestNavigate="Hyperlink_OnRequestNavigate">
+                        More information
+                    </Hyperlink>
+                </TextBlock>
+            </StackPanel>
+        </Grid>
+    </DockPanel>
+</ui:DialogWindow>
\ No newline at end of file
diff --git a/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml.cs b/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml.cs
new file mode 100644
index 00000000..56c81710
--- /dev/null
+++ b/Snyk.VisualStudio.Extension/TrustDialogWindow.xaml.cs
@@ -0,0 +1,48 @@
+﻿namespace Snyk.VisualStudio.Extension
+{
+    using System.Diagnostics;
+    using System.Windows;
+    using System.Windows.Input;
+    using System.Windows.Navigation;
+    using Microsoft.VisualStudio.PlatformUI;
+
+    /// <summary>
+    /// Trusted dialog window for Visual Studio versions less than 2022.
+    /// </summary>
+    public partial class TrustDialogWindow : DialogWindow
+    {
+        public TrustDialogWindow(string folderPath)
+        {
+            this.FolderPath = folderPath;
+            this.InitializeComponent();
+        }
+
+        public string FolderPath { get; }
+
+        private void DoNotTrustButton_OnClick(object sender, RoutedEventArgs e)
+        {
+            this.DialogResult = false;
+            this.Close();
+        }
+
+        private void TrustButton_OnClick(object sender, RoutedEventArgs e)
+        {
+            this.DialogResult = true;
+            this.Close();
+        }
+
+        private void Hyperlink_OnRequestNavigate(object sender, RequestNavigateEventArgs e)
+        {
+            Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri));
+            e.Handled = true;
+        }
+
+        private void TrustDialogWindow_OnMouseDown(object sender, MouseButtonEventArgs e)
+        {
+            if (e.ChangedButton == MouseButton.Left)
+            {
+                this.DragMove();
+            }
+        }
+    }
+}
