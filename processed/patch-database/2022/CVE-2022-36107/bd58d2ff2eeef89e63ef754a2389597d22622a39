diff --git a/typo3/sysext/core/Classes/Controller/FileDumpController.php b/typo3/sysext/core/Classes/Controller/FileDumpController.php
index 422a15e2e004..0a1d919c6fd3 100644
--- a/typo3/sysext/core/Classes/Controller/FileDumpController.php
+++ b/typo3/sysext/core/Classes/Controller/FileDumpController.php
@@ -29,8 +29,10 @@
 use TYPO3\CMS\Core\Resource\ProcessedFile;
 use TYPO3\CMS\Core\Resource\ProcessedFileRepository;
 use TYPO3\CMS\Core\Resource\ResourceFactory;
+use TYPO3\CMS\Core\Resource\ResourceInterface;
 use TYPO3\CMS\Core\Resource\Security\FileNameValidator;
 use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Core\Utility\PathUtility;
 
 /**
  * Class FileDumpController
@@ -77,7 +79,7 @@ public function dumpAction(ServerRequestInterface $request): ResponseInterface
         $event = new ModifyFileDumpEvent($file, $request);
         $event = $this->eventDispatcher->dispatch($event);
         if ($event->isPropagationStopped()) {
-            return $event->getResponse();
+            return $this->applyContentSecurityPolicy($event->getFile(), $event->getResponse());
         }
         $file = $event->getFile();
 
@@ -120,10 +122,13 @@ public function dumpAction(ServerRequestInterface $request): ResponseInterface
             $file = $file->process(ProcessedFile::CONTEXT_IMAGECROPSCALEMASK, $processingInstructions);
         }
 
-        return $file->getStorage()->streamFile(
+        return $this->applyContentSecurityPolicy(
             $file,
-            (bool)($parameters['dl'] ?? false),
-            $parameters['fn'] ?? null
+            $file->getStorage()->streamFile(
+                $file,
+                (bool)($parameters['dl'] ?? false),
+                $parameters['fn'] ?? null
+            )
         );
     }
 
@@ -230,4 +235,17 @@ protected function isFileValid(FileInterface $file): bool
             || GeneralUtility::makeInstance(FileNameValidator::class)
                 ->isValid(basename($file->getIdentifier()));
     }
+
+    /**
+     * Applies hard-coded content-security-policy (CSP) for file to be dumped.
+     */
+    protected function applyContentSecurityPolicy(ResourceInterface $file, ResponseInterface $response): ResponseInterface
+    {
+        $extension = PathUtility::pathinfo($file->getName(), PATHINFO_EXTENSION);
+        // same as in `typo3/sysext/install/Resources/Private/FolderStructureTemplateFiles/resources-root-htaccess`
+        $policy = $extension === 'pdf' || $response->getHeaderLine('content-type') === 'application/pdf'
+            ? "default-src 'self' 'unsafe-inline'; script-src 'none'; object-src 'self'; plugin-types application/pdf;"
+            : "default-src 'self'; script-src 'none'; style-src 'none'; object-src 'none';";
+        return $response->withAddedHeader('content-security-policy', $policy);
+    }
 }
