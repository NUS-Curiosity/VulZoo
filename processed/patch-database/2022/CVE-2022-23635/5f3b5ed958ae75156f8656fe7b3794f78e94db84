diff --git a/istio.deps b/istio.deps
index e6d9eb9e3c9b..7f7d7bbefe2e 100644
--- a/istio.deps
+++ b/istio.deps
@@ -4,6 +4,6 @@
     "name": "PROXY_REPO_SHA",
     "repoName": "proxy",
     "file": "",
-    "lastStableSHA": "9335502ad4a84f380d7d5e0f3ba35a088501ef02"
+    "lastStableSHA": "a971bfa7fddce41c1795fe2ce279735131c08878"
   }
 ]
diff --git a/pilot/pkg/model/context.go b/pilot/pkg/model/context.go
index f813d718cabf..11a322de8b55 100644
--- a/pilot/pkg/model/context.go
+++ b/pilot/pkg/model/context.go
@@ -348,7 +348,7 @@ func (l StringList) MarshalJSON() ([]byte, error) {
 }
 
 func (l *StringList) UnmarshalJSON(data []byte) error {
-	if len(data) == 0 || string(data) == `""` {
+	if len(data) < 2 || string(data) == `""` {
 		*l = []string{}
 	} else {
 		*l = strings.Split(string(data[1:len(data)-1]), ",")
diff --git a/pilot/pkg/model/context_test.go b/pilot/pkg/model/context_test.go
index 1b58c6f043f8..813284cabd90 100644
--- a/pilot/pkg/model/context_test.go
+++ b/pilot/pkg/model/context_test.go
@@ -145,13 +145,15 @@ func TestNodeMetadata(t *testing.T) {
 
 func TestStringList(t *testing.T) {
 	cases := []struct {
-		in     string
-		expect model.StringList
+		in          string
+		expect      model.StringList
+		noRoundTrip bool
 	}{
-		{`"a,b,c"`, []string{"a", "b", "c"}},
-		{`"a"`, []string{"a"}},
-		{`""`, []string{}},
-		{`"123,@#$#,abcdef"`, []string{"123", "@#$#", "abcdef"}},
+		{in: `"a,b,c"`, expect: []string{"a", "b", "c"}},
+		{in: `"a"`, expect: []string{"a"}},
+		{in: `""`, expect: []string{}},
+		{in: `"123,@#$#,abcdef"`, expect: []string{"123", "@#$#", "abcdef"}},
+		{in: `1`, expect: []string{}, noRoundTrip: true},
 	}
 	for _, tt := range cases {
 		t.Run(tt.in, func(t *testing.T) {
@@ -166,6 +168,9 @@ func TestStringList(t *testing.T) {
 			if err != nil {
 				t.Fatal(err)
 			}
+			if tt.noRoundTrip {
+				return
+			}
 			if !reflect.DeepEqual(string(b), tt.in) {
 				t.Fatalf("Expected %v, got %v", tt.in, string(b))
 			}
diff --git a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
index dee455982285..ed9b849d93fc 100644
--- a/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
+++ b/pilot/pkg/networking/core/v1alpha3/cluster_builder_test.go
@@ -3055,7 +3055,7 @@ func TestApplyDestinationRuleOSCACert(t *testing.T) {
 				t.Errorf("Could not parse destination rule: %v", err)
 			}
 			dr := &networking.DestinationRule{}
-			err = json.Unmarshal(byteArray, &dr)
+			err = json.Unmarshal(byteArray, dr)
 			if err != nil {
 				t.Errorf("Could not unmarshal destination rule: %v", err)
 			}
diff --git a/security/pkg/server/ca/authenticate/oidc.go b/security/pkg/server/ca/authenticate/oidc.go
index 83fed7ca076e..042e5e912fb1 100644
--- a/security/pkg/server/ca/authenticate/oidc.go
+++ b/security/pkg/server/ca/authenticate/oidc.go
@@ -92,7 +92,7 @@ func (j *JwtAuthenticator) authenticate(ctx context.Context, bearerToken string)
 		return nil, fmt.Errorf("failed to verify the JWT token (error %v)", err)
 	}
 
-	sa := &JwtPayload{}
+	sa := JwtPayload{}
 	// "aud" for trust domain, "sub" has "system:serviceaccount:$namespace:$serviceaccount".
 	// in future trust domain may use another field as a standard is defined.
 	if err := idToken.Claims(&sa); err != nil {
diff --git a/security/pkg/util/jwtutil.go b/security/pkg/util/jwtutil.go
index 7867be606881..ead258366701 100644
--- a/security/pkg/util/jwtutil.go
+++ b/security/pkg/util/jwtutil.go
@@ -112,7 +112,7 @@ func ExtractJwtAud(jwt string) ([]string, bool) {
 		return nil, false
 	}
 
-	structuredPayload := &jwtPayload{}
+	structuredPayload := jwtPayload{}
 	err = json.Unmarshal(payloadBytes, &structuredPayload)
 	if err != nil {
 		return nil, false
diff --git a/security/pkg/util/jwtutil_test.go b/security/pkg/util/jwtutil_test.go
index e990d6a1329d..07d8df8bcf1d 100644
--- a/security/pkg/util/jwtutil_test.go
+++ b/security/pkg/util/jwtutil_test.go
@@ -133,7 +133,9 @@ func Test3p(t *testing.T) {
 			t.Error("Expecting bound token, detected unbound ", s)
 		}
 	}
-	if !IsK8SUnbound(firstPartyJwt) {
-		t.Error("Expecting unbound, detected bound ", firstPartyJwt)
+	for _, s := range []string{firstPartyJwt, ".bnVsbM."} {
+		if !IsK8SUnbound(s) {
+			t.Error("Expecting unbound, detected bound ", s)
+		}
 	}
 }
diff --git a/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224 b/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224
new file mode 100644
index 000000000000..e5d3536491f0
--- /dev/null
+++ b/tests/fuzz/testdata/FuzzBNMUnmarshalJSON/4811475191988224
@@ -0,0 +1 @@
+{"INSTANCE_IPS":1}
diff --git a/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224 b/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224
new file mode 100644
index 000000000000..047f69f58227
--- /dev/null
+++ b/tests/fuzz/testdata/FuzzJwtUtil/5085913745588224
@@ -0,0 +1 @@
+.bnVsbM.
\ No newline at end of file
