diff --git a/src/jit.rs b/src/jit.rs
index 03dddde2..fa1aaac2 100644
--- a/src/jit.rs
+++ b/src/jit.rs
@@ -913,7 +913,7 @@ fn emit_muldivmod<E: UserDefinedError>(jit: &mut JitCompiler, opc: u8, src: u8,
         X86Instruction::pop(RAX).emit(jit)?;
     }
 
-    if size == OperandSize::S32 && opc & ebpf::BPF_ALU_OP_MASK == ebpf::BPF_MUL {
+    if size == OperandSize::S32 && (mul || sdiv)  {
         X86Instruction::sign_extend_i32_to_i64(dst, dst).emit(jit)?;
     }
     Ok(())
diff --git a/tests/ubpf_execution.rs b/tests/ubpf_execution.rs
index c3ee967b..55ee7506 100644
--- a/tests/ubpf_execution.rs
+++ b/tests/ubpf_execution.rs
@@ -838,6 +838,21 @@ fn test_sdiv32_imm() {
     );
 }
 
+#[test]
+fn test_sdiv32_neg_imm() {
+    test_interpreter_and_jit_asm!(
+        "
+        lddw r0, 0x10000000c
+        sdiv32 r0, -4
+        exit",
+        [],
+        (),
+        0,
+        { |_vm, res: Result| { res.unwrap() as i64 == -3 } },
+        3
+    );
+}
+
 #[test]
 fn test_sdiv32_reg() {
     test_interpreter_and_jit_asm!(
@@ -854,6 +869,22 @@ fn test_sdiv32_reg() {
     );
 }
 
+#[test]
+fn test_sdiv32_neg_reg() {
+    test_interpreter_and_jit_asm!(
+        "
+        lddw r0, 0x10000000c
+        mov r1, -4
+        sdiv32 r0, r1
+        exit",
+        [],
+        (),
+        0,
+        { |_vm, res: Result| { res.unwrap() as i64 == -0x3 } },
+        4
+    );
+}
+
 #[test]
 fn test_div64_imm() {
     test_interpreter_and_jit_asm!(
