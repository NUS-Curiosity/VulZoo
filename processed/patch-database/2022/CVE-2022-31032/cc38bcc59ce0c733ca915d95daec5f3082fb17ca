diff --git a/plugins/program_management/tests/rest/v1/ProjectResourceTest.php b/plugins/program_management/tests/rest/v1/ProjectResourceTest.php
index 2d4ce4a89f4..dec1098ad7d 100644
--- a/plugins/program_management/tests/rest/v1/ProjectResourceTest.php
+++ b/plugins/program_management/tests/rest/v1/ProjectResourceTest.php
@@ -489,7 +489,7 @@ public function testManipulateFeature(): void
         $this->updateArtifactLinks($program_increment['id'], [], $program_increment['artifact_link_id']);
 
         // US1 is linked in top backlog (linked into sprint), US2 is no longer present
-        $this->checkLinksArePresentInReleaseTopBacklog($team_id, [$user_story1['id']]);
+        $this->checkLinksArePresentInReleaseTopBacklog($release_mirror['id'], [$user_story1['id']]);
     }
 
     /**
diff --git a/site-content/fr_FR/LC_MESSAGES/tuleap-core.po b/site-content/fr_FR/LC_MESSAGES/tuleap-core.po
index 0785745fc21..0cff10dd346 100644
--- a/site-content/fr_FR/LC_MESSAGES/tuleap-core.po
+++ b/site-content/fr_FR/LC_MESSAGES/tuleap-core.po
@@ -2657,8 +2657,8 @@ msgid "Project"
 msgstr "Projet"
 
 #, php-format
-msgid "Project #%d is not active and is not a template"
-msgstr "Le project #%d n'est pas actif et n'est pas un modèle"
+msgid "Project #%d is not active."
+msgstr "Le project #%d n'est pas actif."
 
 msgid "Project (read only)"
 msgstr "Projet (lecture seule)"
@@ -3470,6 +3470,14 @@ msgstr "Tabulation"
 msgid "Template #%d is not valid"
 msgstr "Le modèle #%d n'est pas valide"
 
+#, php-format
+msgid ""
+"Template %d is not valid: you don't have the permission to the access the "
+"project."
+msgstr ""
+"Le modèle %d n'est pas valide : vous n'avez pas la permission d'accéder au "
+"projet."
+
 msgid "Template used by project"
 msgstr "Modèle utilisé par ce projet"
 
diff --git a/site-content/pt_BR/LC_MESSAGES/tuleap-core.po b/site-content/pt_BR/LC_MESSAGES/tuleap-core.po
index e02d52ea48a..ae9a4ba3496 100644
--- a/site-content/pt_BR/LC_MESSAGES/tuleap-core.po
+++ b/site-content/pt_BR/LC_MESSAGES/tuleap-core.po
@@ -2593,8 +2593,8 @@ msgid "Project"
 msgstr "Projeto"
 
 #, php-format
-msgid "Project #%d is not active and is not a template"
-msgstr "O projeto #%d não está ativo e não é um modelo"
+msgid "Project #%d is not active."
+msgstr "O projeto #%d não está ativo."
 
 msgid "Project (read only)"
 msgstr "Projeto (somente leitura)"
@@ -3385,6 +3385,12 @@ msgstr ""
 msgid "Template #%d is not valid"
 msgstr "O modelo #%d não é válido"
 
+#, php-format
+msgid ""
+"Template %d is not valid: you don't have the permission to the access the "
+"project."
+msgstr ""
+
 msgid "Template used by project"
 msgstr "Modelo utilizado pelo projeto"
 
diff --git a/src/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilder.php b/src/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilder.php
index ddd47387923..7e34e07cc8f 100644
--- a/src/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilder.php
+++ b/src/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilder.php
@@ -37,6 +37,7 @@
 use Tuleap\Project\Registration\Template\TemplateFactory;
 use Tuleap\Project\Registration\Template\TemplateFromProjectForCreation;
 use Tuleap\Project\XML\XMLFileContentRetriever;
+use URLVerification;
 use XML_RNGValidator;
 
 class ProjectCreationDataPOSTProjectBuilder
@@ -55,6 +56,7 @@ public function __construct(
         ServiceManager $service_manager,
         ProjectCreationDataServiceFromXmlInheritor $from_xml_inheritor,
         LoggerInterface $logger,
+        private URLVerification $url_verification,
     ) {
         $this->project_manager            = $project_manager;
         $this->template_factory           = $template_factory;
@@ -93,7 +95,8 @@ public function buildProjectCreationDataFromPOSTRepresentation(
                 TemplateFromProjectForCreation::fromRESTRepresentation(
                     $post_representation,
                     $user,
-                    $this->project_manager
+                    $this->project_manager,
+                    $this->url_verification
                 ),
                 $data
             );
diff --git a/src/common/Project/REST/v1/ProjectResource.class.php b/src/common/Project/REST/v1/ProjectResource.class.php
index 7ef894add7b..e5b02ccf600 100644
--- a/src/common/Project/REST/v1/ProjectResource.class.php
+++ b/src/common/Project/REST/v1/ProjectResource.class.php
@@ -282,7 +282,8 @@ protected function post(ProjectPostRepresentation $post_representation, bool $dr
                 new ProjectCreationDataServiceFromXmlInheritor(
                     ServiceManager::instance(),
                 ),
-                $this->getBackendLogger()
+                $this->getBackendLogger(),
+                $this->getURLVerification()
             );
 
             $creation_data = $creation_data_post_project_builder->buildProjectCreationDataFromPOSTRepresentation(
@@ -603,7 +604,7 @@ private function getProjectForUser($id)
         $project = $this->project_manager->getProject($id);
         $user    = $this->user_manager->getCurrentUser();
 
-        ProjectAuthorization::userCanAccessProject($user, $project, new URLVerification());
+        ProjectAuthorization::userCanAccessProject($user, $project, $this->getURLVerification());
 
         return $project;
     }
@@ -909,7 +910,7 @@ private function userCanSeeUserGroups($project_id)
     {
         $project = $this->project_manager->getProject($project_id);
         $user    = $this->user_manager->getCurrentUser();
-        ProjectAuthorization::userCanAccessProject($user, $project, new URLVerification());
+        ProjectAuthorization::userCanAccessProject($user, $project, $this->getURLVerification());
 
         return true;
     }
@@ -1434,4 +1435,9 @@ private function getAdditionalFields(Project $project): array
 
         return $project_field_representations;
     }
+
+    private function getURLVerification(): URLVerification
+    {
+        return new URLVerification();
+    }
 }
diff --git a/src/common/Project/Registration/Template/InsufficientPermissionToUseCompanyTemplateException.php b/src/common/Project/Registration/Template/InsufficientPermissionToUseCompanyTemplateException.php
new file mode 100644
index 00000000000..a1b45d1c1cf
--- /dev/null
+++ b/src/common/Project/Registration/Template/InsufficientPermissionToUseCompanyTemplateException.php
@@ -0,0 +1,37 @@
+<?php
+/**
+ * Copyright (c) Enalean, 2022-Present. All Rights Reserved.
+ *
+ * This file is a part of Tuleap.
+ *
+ * Tuleap is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Tuleap is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+namespace Tuleap\Project\Registration\Template;
+
+use Project;
+use Project_Creation_Exception;
+
+final class InsufficientPermissionToUseCompanyTemplateException extends Project_Creation_Exception implements InvalidTemplateException
+{
+    public function __construct(private Project $project)
+    {
+        parent::__construct(sprintf(_("Template %d is not valid: you don't have the permission to the access the project."), $this->project->getId()));
+    }
+
+    public function getI18NMessage(): string
+    {
+        return $this->message;
+    }
+}
diff --git a/src/common/Project/Registration/Template/ProjectTemplateNotActiveException.php b/src/common/Project/Registration/Template/ProjectTemplateNotActiveException.php
index 683870affee..30f73f0ec89 100644
--- a/src/common/Project/Registration/Template/ProjectTemplateNotActiveException.php
+++ b/src/common/Project/Registration/Template/ProjectTemplateNotActiveException.php
@@ -31,12 +31,12 @@ final class ProjectTemplateNotActiveException extends Project_Creation_Exception
 
     public function __construct(Project $project)
     {
-        parent::__construct('Project #' . $project->getID() . ' is not active and is not a template');
+        parent::__construct('Project #' . $project->getID() . ' is not active');
         $this->project = $project;
     }
 
     public function getI18NMessage(): string
     {
-        return sprintf(_('Project #%d is not active and is not a template'), $this->project->getID());
+        return sprintf(_('Project #%d is not active.'), $this->project->getID());
     }
 }
diff --git a/src/common/Project/Registration/Template/TemplateFactory.php b/src/common/Project/Registration/Template/TemplateFactory.php
index 1d1cca0215f..cd062038bbb 100644
--- a/src/common/Project/Registration/Template/TemplateFactory.php
+++ b/src/common/Project/Registration/Template/TemplateFactory.php
@@ -23,6 +23,8 @@
 
 namespace Tuleap\Project\Registration\Template;
 
+use Project;
+use Project_AccessException;
 use ProjectManager;
 use Psr\EventDispatcher\EventDispatcherInterface;
 use Tuleap\Glyph\GlyphFinder;
@@ -31,6 +33,8 @@
 use Tuleap\Project\XML\ServiceEnableForXmlImportRetriever;
 use Tuleap\Project\XML\XMLFileContentRetriever;
 use Tuleap\XML\ProjectXMLMerger;
+use URLVerification;
+use UserManager;
 
 class TemplateFactory
 {
@@ -63,14 +67,16 @@ public function __construct(
         TemplateDao $template_dao,
         ProjectManager $project_manager,
         EventDispatcherInterface $event_dispatcher,
+        private UserManager $user_manager,
+        private URLVerification $url_verification,
     ) {
         $this->template_dao    = $template_dao;
         $this->templates       = [
             AgileALMTemplate::NAME => new AgileALMTemplate($glyph_finder, $project_xml_merger, $consistency_checker),
-            ScrumTemplate::NAME => new ScrumTemplate($glyph_finder, $project_xml_merger, $consistency_checker),
-            KanbanTemplate::NAME => new KanbanTemplate($glyph_finder, $project_xml_merger, $consistency_checker),
-            IssuesTemplate::NAME => new IssuesTemplate($glyph_finder, $consistency_checker, $event_dispatcher),
-            EmptyTemplate::NAME => new EmptyTemplate($glyph_finder),
+            ScrumTemplate::NAME    => new ScrumTemplate($glyph_finder, $project_xml_merger, $consistency_checker),
+            KanbanTemplate::NAME   => new KanbanTemplate($glyph_finder, $project_xml_merger, $consistency_checker),
+            IssuesTemplate::NAME   => new IssuesTemplate($glyph_finder, $consistency_checker, $event_dispatcher),
+            EmptyTemplate::NAME    => new EmptyTemplate($glyph_finder),
         ];
         $this->project_manager = $project_manager;
         $this->glyph_finder    = $glyph_finder;
@@ -96,7 +102,9 @@ public static function build(): self
             ),
             new TemplateDao(),
             \ProjectManager::instance(),
-            $event_manager
+            $event_manager,
+            \UserManager::instance(),
+            new URLVerification()
         );
     }
 
@@ -166,7 +174,7 @@ public function getCompanyTemplateList(): array
         $project_templates = $this->project_manager->getSiteTemplates();
 
         foreach ($project_templates as $project_template) {
-            if ((int) $project_template->getGroupId() === \Project::ADMIN_PROJECT_ID) {
+            if ((int) $project_template->getGroupId() === \Project::ADMIN_PROJECT_ID || ! $this->userCanAccessTemplate($project_template)) {
                 continue;
             }
             $company_templates[] = new CompanyTemplate($project_template, $this->glyph_finder);
@@ -198,4 +206,13 @@ private static function getExternalTemplatesByName(EventDispatcherInterface $eve
 
         return $templates_by_name;
     }
+
+    private function userCanAccessTemplate(Project $project_template): bool
+    {
+        try {
+            return $this->url_verification->userCanAccessProject($this->user_manager->getCurrentUser(), $project_template);
+        } catch (Project_AccessException $exception) {
+            return false;
+        }
+    }
 }
diff --git a/src/common/Project/Registration/Template/TemplateFromProjectForCreation.php b/src/common/Project/Registration/Template/TemplateFromProjectForCreation.php
index d5e439f7d77..7ec4d269092 100644
--- a/src/common/Project/Registration/Template/TemplateFromProjectForCreation.php
+++ b/src/common/Project/Registration/Template/TemplateFromProjectForCreation.php
@@ -22,10 +22,12 @@
 
 namespace Tuleap\Project\Registration\Template;
 
+use Exception;
 use PFUser;
 use Project;
 use ProjectManager;
 use Tuleap\Project\REST\v1\ProjectPostRepresentation;
+use URLVerification;
 
 class TemplateFromProjectForCreation
 {
@@ -45,9 +47,14 @@ private function __construct(Project $project)
      * @throws ProjectIDTemplateNotProvidedException
      * @throws ProjectTemplateIDInvalidException
      * @throws ProjectTemplateNotActiveException
+     * @throws InsufficientPermissionToUseCompanyTemplateException
      */
-    private static function fromData(ProjectManager $project_manager, PFUser $user_requesting_creation, ?int $project_id): self
-    {
+    private static function fromData(
+        ProjectManager $project_manager,
+        PFUser $user_requesting_creation,
+        ?int $project_id,
+        URLVerification $url_verification,
+    ): self {
         if ($project_id === null) {
             throw new ProjectIDTemplateNotProvidedException();
         }
@@ -58,13 +65,11 @@ private static function fromData(ProjectManager $project_manager, PFUser $user_r
             throw new ProjectTemplateIDInvalidException($project_id);
         }
 
-        if (! $project->isActive() && ! $project->isTemplate()) {
+        if (! self::doesProjectStatusAllowUsageAsTemplate($project)) {
             throw new ProjectTemplateNotActiveException($project);
         }
 
-        if (! $project->isTemplate() && ! $user_requesting_creation->isAdmin($project->getID())) {
-            throw new InsufficientPermissionToUseProjectAsTemplateException($project, $user_requesting_creation);
-        }
+        self::checkIfUserHasPermissionsToUseTemplate($project, $url_verification, $user_requesting_creation);
 
         return new self($project);
     }
@@ -79,8 +84,14 @@ public static function fromRESTRepresentation(
         ProjectPostRepresentation $representation,
         PFUser $user_requesting_creation,
         ProjectManager $project_manager,
+        URLVerification $url_verification,
     ): self {
-        return self::fromData($project_manager, $user_requesting_creation, $representation->template_id);
+        return self::fromData(
+            $project_manager,
+            $user_requesting_creation,
+            $representation->template_id,
+            $url_verification
+        );
     }
 
     public static function fromGlobalProjectAdminTemplate(): self
@@ -88,6 +99,30 @@ public static function fromGlobalProjectAdminTemplate(): self
         return new self(new Project(['group_id' => Project::ADMIN_PROJECT_ID, 'status' => Project::STATUS_SYSTEM]));
     }
 
+    private static function doesProjectStatusAllowUsageAsTemplate(Project $project): bool
+    {
+        return $project->isActive() || $project->isSystem();
+    }
+
+    /**
+     * @throws InsufficientPermissionToUseCompanyTemplateException
+     * @throws InsufficientPermissionToUseProjectAsTemplateException
+     */
+    private static function checkIfUserHasPermissionsToUseTemplate(
+        Project $project,
+        URLVerification $url_verification,
+        PFUser $user_requesting_creation,
+    ): void {
+        if ($project->isTemplate()) {
+            try {
+                $url_verification->userCanAccessProject($user_requesting_creation, $project);
+            } catch (Exception $exception) {
+                throw new InsufficientPermissionToUseCompanyTemplateException($project);
+            }
+        } elseif (! $user_requesting_creation->isAdmin($project->getID())) {
+            throw new InsufficientPermissionToUseProjectAsTemplateException($project, $user_requesting_creation);
+        }
+    }
 
     public function getProject(): Project
     {
diff --git a/tests/lib/TestDataBuilder.php b/tests/lib/TestDataBuilder.php
index 290018264e1..9a5821bdfbe 100644
--- a/tests/lib/TestDataBuilder.php
+++ b/tests/lib/TestDataBuilder.php
@@ -72,6 +72,8 @@ class TestDataBuilder // phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNames
     public const PROJECT_SERVICES                         = 'project-services';
     public const PROJECT_PUBLIC_WITH_MEMBERSHIP_SHORTNAME = 'public-sync-project-member';
     public const PROJECT_FUTURE_RELEASES                  = 'current-future-releases';
+    public const PROJECT_PUBLIC_TEMPLATE                  = 'public-template';
+    public const PROJECT_PRIVATE_TEMPLATE                 = 'private-template';
 
     public const STATIC_UGROUP_1_ID    = 101;
     public const STATIC_UGROUP_1_LABEL = 'static_ugroup_1';
diff --git a/tests/rest/_fixtures/16-public-template/project.xml b/tests/rest/_fixtures/16-public-template/project.xml
new file mode 100644
index 00000000000..ae3e12fe744
--- /dev/null
+++ b/tests/rest/_fixtures/16-public-template/project.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+        unix-name="public-template" full-name="Public Template" description="For template test" access="public">
+    <long-description>A public template test project</long-description>
+    <services>
+    </services>
+</project>
diff --git a/tests/rest/_fixtures/16-public-template/user_map.csv b/tests/rest/_fixtures/16-public-template/user_map.csv
new file mode 100644
index 00000000000..ead57d37949
--- /dev/null
+++ b/tests/rest/_fixtures/16-public-template/user_map.csv
@@ -0,0 +1 @@
+name,action,comment
diff --git a/tests/rest/_fixtures/16-public-template/users.xml b/tests/rest/_fixtures/16-public-template/users.xml
new file mode 100644
index 00000000000..6e009d28330
--- /dev/null
+++ b/tests/rest/_fixtures/16-public-template/users.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<users>
+</users>
diff --git a/tests/rest/_fixtures/17-private-template/project.xml b/tests/rest/_fixtures/17-private-template/project.xml
new file mode 100644
index 00000000000..a9c1f88ee22
--- /dev/null
+++ b/tests/rest/_fixtures/17-private-template/project.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+        unix-name="private-template" full-name="Private Template" description="For template test" access="private">
+    <long-description>A private template test project</long-description>
+    <ugroups>
+        <ugroup name="project_members" description="">
+            <members>
+                <member format="username">rest_api_tester_3</member>
+                <member format="username">rest_api_tester_5</member>
+            </members>
+        </ugroup>
+        <ugroup name="project_admins" description="">
+            <members>
+                <member format="username">rest_api_tester_3</member>
+            </members>
+        </ugroup>
+    </ugroups>
+    <services>
+    </services>
+</project>
diff --git a/tests/rest/_fixtures/17-private-template/user_map.csv b/tests/rest/_fixtures/17-private-template/user_map.csv
new file mode 100644
index 00000000000..ead57d37949
--- /dev/null
+++ b/tests/rest/_fixtures/17-private-template/user_map.csv
@@ -0,0 +1 @@
+name,action,comment
diff --git a/tests/rest/_fixtures/17-private-template/users.xml b/tests/rest/_fixtures/17-private-template/users.xml
new file mode 100644
index 00000000000..4685679e3db
--- /dev/null
+++ b/tests/rest/_fixtures/17-private-template/users.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<users>
+    <user>
+        <id>104</id>
+        <username>rest_api_tester_3</username>
+        <realname><![CDATA[]]></realname>
+        <email><![CDATA[test_user_3@example.com]]></email>
+        <ldapid></ldapid>
+    </user>
+    <user>
+        <id>105</id>
+        <username>rest_api_tester_5</username>
+        <realname><![CDATA[]]></realname>
+        <email><![CDATA[test_user_5@example.com]]></email>
+        <ldapid></ldapid>
+    </user>
+</users>
diff --git a/tests/rest/bin/init_data.php b/tests/rest/bin/init_data.php
index 45ac09c444d..f9de41d5e9e 100644
--- a/tests/rest/bin/init_data.php
+++ b/tests/rest/bin/init_data.php
@@ -29,5 +29,6 @@
     ->delegateForgePermissions()
     ->deleteTracker()
     ->deleteProject()
+    ->markProjectsAsTemplate()
     ->suspendProject()
     ->createProjectField();
diff --git a/tests/rest/bin/setup.sh b/tests/rest/bin/setup.sh
index bc0d5f60719..33cb9ad0ba6 100755
--- a/tests/rest/bin/setup.sh
+++ b/tests/rest/bin/setup.sh
@@ -123,6 +123,8 @@ seed_data() {
     load_project /usr/share/tuleap/tests/rest/_fixtures/13-project-services
     load_project /usr/share/tuleap/tests/rest/_fixtures/14-public-sync-project-member
     load_project /usr/share/tuleap/tests/rest/_fixtures/15-future-releases
+    load_project /usr/share/tuleap/tests/rest/_fixtures/16-public-template
+    load_project /usr/share/tuleap/tests/rest/_fixtures/17-private-template
 
     echo "Load initial data"
     PHP="$PHP_CLI" "$PHP_CLI" /usr/share/tuleap/tests/rest/bin/init_data.php
diff --git a/tests/rest/lib/RestBase.php b/tests/rest/lib/RestBase.php
index 1c2221c595f..d79e7bd4114 100644
--- a/tests/rest/lib/RestBase.php
+++ b/tests/rest/lib/RestBase.php
@@ -45,6 +45,8 @@ class RestBase extends \Tuleap\Test\PHPUnit\TestCase // phpcs:ignore PSR1.Classe
     protected $project_public_with_membership_id;
     protected $project_future_releases_id;
     protected $project_services_id;
+    protected $project_public_template_id;
+    protected $project_private_template_id;
 
     protected $epic_tracker_id;
     protected $releases_tracker_id;
@@ -121,16 +123,26 @@ public function setUp(): void
             $this->initUserGroupsId();
         }
 
-        $this->project_private_member_id         = $this->getProjectId(REST_TestDataBuilder::PROJECT_PRIVATE_MEMBER_SHORTNAME);
+        $this->project_private_member_id         = $this->getProjectId(
+            REST_TestDataBuilder::PROJECT_PRIVATE_MEMBER_SHORTNAME
+        );
         $this->project_private_id                = $this->getProjectId(REST_TestDataBuilder::PROJECT_PRIVATE_SHORTNAME);
         $this->project_public_id                 = $this->getProjectId(REST_TestDataBuilder::PROJECT_PUBLIC_SHORTNAME);
-        $this->project_public_member_id          = $this->getProjectId(REST_TestDataBuilder::PROJECT_PUBLIC_MEMBER_SHORTNAME);
+        $this->project_public_member_id          = $this->getProjectId(
+            REST_TestDataBuilder::PROJECT_PUBLIC_MEMBER_SHORTNAME
+        );
         $this->project_pbi_id                    = $this->getProjectId(REST_TestDataBuilder::PROJECT_PBI_SHORTNAME);
         $this->project_deleted_id                = $this->getProjectId(REST_TestDataBuilder::PROJECT_DELETED_SHORTNAME);
-        $this->project_suspended_id              = $this->getProjectId(REST_TestDataBuilder::PROJECT_SUSPENDED_SHORTNAME);
-        $this->project_public_with_membership_id = $this->getProjectId(REST_TestDataBuilder::PROJECT_PUBLIC_WITH_MEMBERSHIP_SHORTNAME);
+        $this->project_suspended_id              = $this->getProjectId(
+            REST_TestDataBuilder::PROJECT_SUSPENDED_SHORTNAME
+        );
+        $this->project_public_with_membership_id = $this->getProjectId(
+            REST_TestDataBuilder::PROJECT_PUBLIC_WITH_MEMBERSHIP_SHORTNAME
+        );
         $this->project_future_releases_id        = $this->getProjectId(REST_TestDataBuilder::PROJECT_FUTURE_RELEASES);
         $this->project_services_id               = $this->getProjectId(REST_TestDataBuilder::PROJECT_SERVICES);
+        $this->project_public_template_id        = $this->getProjectId(REST_TestDataBuilder::PROJECT_PUBLIC_TEMPLATE);
+        $this->project_private_template_id       = $this->getProjectId(REST_TestDataBuilder::PROJECT_PRIVATE_TEMPLATE);
 
         $this->getTrackerIdsForProjectPrivateMember();
     }
diff --git a/tests/rest/lib/TestDataBuilder.php b/tests/rest/lib/TestDataBuilder.php
index 546ee73fcf5..9a42868d4b5 100644
--- a/tests/rest/lib/TestDataBuilder.php
+++ b/tests/rest/lib/TestDataBuilder.php
@@ -20,6 +20,7 @@
  */
 
 use Tuleap\admin\ProjectCreation\ProjectFields\ProjectFieldsDao;
+use Tuleap\admin\ProjectEdit\ProjectEditDao;
 use Tuleap\Project\Admin\ProjectDetails\ProjectDetailsDAO;
 use Tuleap\User\ForgeUserGroupPermission\RestProjectManagementPermission;
 use Tuleap\User\ForgeUserGroupPermission\RESTReadOnlyAdmin\RestReadOnlyAdminPermission;
@@ -220,6 +221,26 @@ public function deleteProject()
         return $this;
     }
 
+    public function markProjectsAsTemplate()
+    {
+        echo "Mark public-template and private-template as template";
+
+        $project_manager  = ProjectManager::instance();
+        $public_template  = $project_manager->getProjectByUnixName("public-template");
+        $private_template = $project_manager->getProjectByUnixName("private-template");
+
+        $project_edit_dao = new ProjectEditDao();
+        if ($public_template) {
+            $project_edit_dao->updateProjectStatusAndType("A", TemplateSingleton::TEMPLATE, $public_template->getID());
+        }
+
+        if ($private_template) {
+            $project_edit_dao->updateProjectStatusAndType("A", TemplateSingleton::TEMPLATE, $private_template->getID());
+        }
+
+        return $this;
+    }
+
     public function createProjectField()
     {
         $project_fields_dao  = new ProjectFieldsDao();
diff --git a/tests/rest/tests/ProjectTest.php b/tests/rest/tests/ProjectTest.php
index 1929bfb1c89..e0ee553ee41 100644
--- a/tests/rest/tests/ProjectTest.php
+++ b/tests/rest/tests/ProjectTest.php
@@ -56,11 +56,11 @@ public function testPOSTDryRunForRegularUserDisabledProjectCreation(): void
             'shortname'  => 'test9747-regular-user',
             'description' => 'Test of Request 9747 for REST API Project Creation',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
         ]);
 
         $response = $this->getResponseByName(
-            REST_TestDataBuilder::TEST_USER_2_NAME,
+            REST_TestDataBuilder::TEST_USER_5_NAME,
             $this->request_factory->createRequest(
                 'POST',
                 'projects?dry_run=true'
@@ -86,7 +86,7 @@ public function testPOSTDryRunForRegularUserWithErrors(): void
             'shortname'  => 'short_name',
             'description' => '',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
             'categories' => [
                 [
                     'category_id' => 15,
@@ -102,7 +102,7 @@ public function testPOSTDryRunForRegularUserWithErrors(): void
         ]);
 
         $response = $this->getResponseByName(
-            REST_TestDataBuilder::TEST_USER_2_NAME,
+            REST_TestDataBuilder::TEST_USER_5_NAME,
             $this->request_factory->createRequest(
                 'POST',
                 'projects?dry_run=true'
@@ -159,11 +159,11 @@ public function testPOSTDryRunForRegularUser(): void
             'shortname'  => 'test9747-regular-user',
             'description' => 'Test of Request 9747 for REST API Project Creation',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
         ]);
 
         $response = $this->getResponseByName(
-            REST_TestDataBuilder::TEST_USER_2_NAME,
+            REST_TestDataBuilder::TEST_USER_5_NAME,
             $this->request_factory->createRequest(
                 'POST',
                 'projects?dry_run=true'
@@ -182,11 +182,11 @@ public function testPOSTForRegularUser()
             'shortname'  => 'test9747-regular-user',
             'description' => 'Test of Request 9747 for REST API Project Creation',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
         ]);
 
         $response = $this->getResponseByName(
-            REST_TestDataBuilder::TEST_USER_2_NAME,
+            REST_TestDataBuilder::TEST_USER_5_NAME,
             $this->request_factory->createRequest(
                 'POST',
                 'projects'
@@ -201,8 +201,54 @@ public function testPOSTForRegularUser()
 
         $this->removeAdminFromProjectMembers(
             $create_project_id,
+            REST_TestDataBuilder::TEST_USER_5_NAME,
+        );
+    }
+
+    public function testPOSTForRegularUserWithTemplateProjectUserCantAccess()
+    {
+        $post_resource = json_encode([
+                                         'label'       => 'Test from template without access',
+                                         'shortname'   => 'template-no-access-user',
+                                         'description' => 'Test project template for REST API Project Creation',
+                                         'is_public'   => true,
+                                         'template_id' => $this->project_private_template_id,
+                                     ]);
+
+        $response = $this->getResponseByName(
             REST_TestDataBuilder::TEST_USER_2_NAME,
+            $this->request_factory->createRequest(
+                'POST',
+                'projects'
+            )->withBody(
+                $this->stream_factory->createStream($post_resource)
+            )
+        );
+
+        self::assertEquals(400, $response->getStatusCode());
+    }
+
+    public function testPOSTForRegularUserWithPrivateTemplateProjectUserCanAccess()
+    {
+        $post_resource = json_encode([
+                                         'label'       => 'Test from private template with access',
+                                         'shortname'   => 'template-private-user-access',
+                                         'description' => 'Test project template for REST API Project Creation',
+                                         'is_public'   => true,
+                                         'template_id' => $this->project_private_template_id,
+                                     ]);
+
+        $response = $this->getResponseByName(
+            REST_TestDataBuilder::TEST_USER_5_NAME,
+            $this->request_factory->createRequest(
+                'POST',
+                'projects'
+            )->withBody(
+                $this->stream_factory->createStream($post_resource)
+            )
         );
+
+        self::assertEquals(201, $response->getStatusCode());
     }
 
     /**
@@ -350,7 +396,7 @@ public function testPOSTForRestProjectManager()
             'shortname'  => 'test9748',
             'description' => 'Test of Request 9748 for REST API Project Creation',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
         ]);
 
         $response = $this->getResponseByName(
diff --git a/tests/rest/tests/ReadOnlyAdministrator/ProjectTest.php b/tests/rest/tests/ReadOnlyAdministrator/ProjectTest.php
index 6df829b525e..aa140bc2165 100644
--- a/tests/rest/tests/ReadOnlyAdministrator/ProjectTest.php
+++ b/tests/rest/tests/ReadOnlyAdministrator/ProjectTest.php
@@ -40,7 +40,7 @@ public function testPOST(): void
             'shortname'  => 'test9747-ro',
             'description' => 'Test of Request 9747 for REST API Project Creation',
             'is_public' => true,
-            'template_id' => 100,
+            'template_id' => $this->project_public_template_id,
         ]);
 
         $response = $this->getResponse(
diff --git a/tests/unit/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilderTest.php b/tests/unit/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilderTest.php
index ae90bc0900c..a79ddbce6f3 100644
--- a/tests/unit/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilderTest.php
+++ b/tests/unit/common/Project/REST/v1/ProjectCreationDataPOSTProjectBuilderTest.php
@@ -75,7 +75,8 @@ protected function setUp(): void
             $this->xml_file_content_retriever,
             $this->service_manager,
             $this->from_xml_inheritor,
-            new NullLogger()
+            new NullLogger(),
+            new \URLVerification()
         );
     }
 
diff --git a/tests/unit/common/Project/REST/v1/RestProjectCreatorTest.php b/tests/unit/common/Project/REST/v1/RestProjectCreatorTest.php
index 9905f86d6ad..6a96ed13ee6 100644
--- a/tests/unit/common/Project/REST/v1/RestProjectCreatorTest.php
+++ b/tests/unit/common/Project/REST/v1/RestProjectCreatorTest.php
@@ -40,7 +40,6 @@
 use Tuleap\Glyph\GlyphFinder;
 use Tuleap\Project\DefaultProjectVisibilityRetriever;
 use Tuleap\Project\Registration\MaxNumberOfProjectReachedForPlatformException;
-use Tuleap\Project\Registration\Template\Events\CollectCategorisedExternalTemplatesEvent;
 use Tuleap\Project\Registration\Template\ScrumTemplate;
 use Tuleap\Project\Registration\Template\TemplateDao;
 use Tuleap\Project\Registration\Template\TemplateFactory;
@@ -51,6 +50,8 @@
 use Tuleap\Project\XML\ServiceEnableForXmlImportRetriever;
 use Tuleap\Project\XML\XMLFileContentRetriever;
 use Tuleap\XML\ProjectXMLMerger;
+use URLVerification;
+use UserManager;
 
 final class RestProjectCreatorTest extends \Tuleap\Test\PHPUnit\TestCase
 {
@@ -95,7 +96,11 @@ protected function setUp(): void
         $this->event_manager  = \Mockery::mock(\EventManager::class);
         $this->retriever      = \Mockery::mock(ServiceEnableForXmlImportRetriever::class);
         $this->plugin_factory = $this->createMock(\PluginFactory::class);
-        $this->creator        = new RestProjectCreator(
+
+        $this->user_manager     = $this->createMock(UserManager::class);
+        $this->url_verification = $this->createMock(URLVerification::class);
+
+        $this->creator = new RestProjectCreator(
             $this->project_creator,
             $this->project_XML_importer,
             new TemplateFactory(
@@ -112,7 +117,8 @@ protected function setUp(): void
                 $this->template_dao,
                 M::mock(ProjectManager::class),
                 new \EventManager(),
-                new CollectCategorisedExternalTemplatesEvent()
+                $this->user_manager,
+                $this->url_verification
             )
         );
 
diff --git a/tests/unit/common/Project/Registration/Template/TemplateFactoryTest.php b/tests/unit/common/Project/Registration/Template/TemplateFactoryTest.php
index 16c004b453f..17763cfdfa6 100644
--- a/tests/unit/common/Project/Registration/Template/TemplateFactoryTest.php
+++ b/tests/unit/common/Project/Registration/Template/TemplateFactoryTest.php
@@ -24,10 +24,15 @@
 namespace Tuleap\Project\Registration\Template;
 
 use org\bovigo\vfs\vfsStream;
+use PHPUnit\Framework\MockObject\MockObject;
+use Project_AccessPrivateException;
 use Tuleap\ForgeConfigSandbox;
 use Tuleap\Glyph\GlyphFinder;
 use Tuleap\Project\XML\ConsistencyChecker;
+use Tuleap\Test\Builders\UserTestBuilder;
 use Tuleap\XML\ProjectXMLMerger;
+use URLVerification;
+use UserManager;
 
 final class TemplateFactoryTest extends \Tuleap\Test\PHPUnit\TestCase
 {
@@ -35,20 +40,34 @@ final class TemplateFactoryTest extends \Tuleap\Test\PHPUnit\TestCase
 
     private TemplateFactory $factory;
     /**
-     * @var \PHPUnit\Framework\MockObject\MockObject&ConsistencyChecker
+     * @var MockObject&ConsistencyChecker
      */
     private $consistency_checker;
     /**
-     * @var \PHPUnit\Framework\MockObject\MockObject&\ProjectManager
+     * @var MockObject&\ProjectManager
      */
     private $project_manager;
 
+    /**
+     * @var UserManager&MockObject
+     */
+    private $user_manager;
+    /**
+     * @var URLVerification&MockObject
+     */
+    private $url_verification;
+    private \PFUser $user;
+
     protected function setUp(): void
     {
         \ForgeConfig::set('codendi_cache_dir', vfsStream::setup('TemplateFactoryTest')->url());
 
+        $this->user = UserTestBuilder::aUser()->build();
+
         $this->consistency_checker = $this->createMock(ConsistencyChecker::class);
         $this->project_manager     = $this->createMock(\ProjectManager::class);
+        $this->user_manager        = $this->createMock(UserManager::class);
+        $this->url_verification    = $this->createMock(URLVerification::class);
 
         $this->factory = new TemplateFactory(
             new GlyphFinder(new \EventManager()),
@@ -57,6 +76,8 @@ protected function setUp(): void
             $this->createMock(TemplateDao::class),
             $this->project_manager,
             new \EventManager(),
+            $this->user_manager,
+            $this->url_verification
         );
     }
 
@@ -130,7 +151,7 @@ public function testItDoesntReturnTheTemplateThatIsNotAvailable(): void
         $this->factory->getTemplate(ScrumTemplate::NAME);
     }
 
-    public function testItReturnsCompanyTemplateWhenTheTemplateIdIsNot100(): void
+    public function testItReturnsCompanyTemplateWhenTheTemplateIdIsNot100AndUserCanAccess(): void
     {
         $this->consistency_checker->method('areAllServicesAvailable')->willReturn(true);
 
@@ -152,6 +173,9 @@ public function testItReturnsCompanyTemplateWhenTheTemplateIdIsNot100(): void
         $template120->method('getDescription')->willReturn("All about us");
         $template120->method('getPublicName')->willReturn("Lyudi Invalidy Company");
 
+        $this->user_manager->method('getCurrentUser')->willReturn($this->user);
+        $this->url_verification->method("userCanAccessProject")->with($this->user, $template100)->willReturn(true);
+
         $site_templates = [$template100, $template110, $template120];
         $this->project_manager->method('getSiteTemplates')->willReturn($site_templates);
 
@@ -163,4 +187,22 @@ public function testItReturnsCompanyTemplateWhenTheTemplateIdIsNot100(): void
 
         self::assertEquals($expected_company_templates, $this->factory->getCompanyTemplateList());
     }
+
+    public function testItDoesNotReturnsCompanyTemplateWhenTheUserCannotAccessIt(): void
+    {
+        $this->consistency_checker->method('areAllServicesAvailable')->willReturn(true);
+
+        $template110 = $this->createMock(\Project::class);
+        $template110->expects(self::once())->method('getGroupId')->willReturn("110");
+        $template110->method('getUnixNameLowerCase')->willReturn("hustler-company");
+        $template110->method('getDescription')->willReturn("New Jack City");
+        $template110->method('getPublicName')->willReturn("Hustler Company");
+
+        $this->project_manager->method('getSiteTemplates')->willReturn([$template110]);
+
+        $this->user_manager->method('getCurrentUser')->willReturn($this->user);
+        $this->url_verification->method("userCanAccessProject")->with($this->user, $template110)->willThrowException(new Project_AccessPrivateException());
+
+        self::assertEmpty($this->factory->getCompanyTemplateList());
+    }
 }
diff --git a/tests/unit/common/Project/Registration/Template/TemplateFromProjectForCreationTest.php b/tests/unit/common/Project/Registration/Template/TemplateFromProjectForCreationTest.php
index 35f87fa3e71..5b312713041 100644
--- a/tests/unit/common/Project/Registration/Template/TemplateFromProjectForCreationTest.php
+++ b/tests/unit/common/Project/Registration/Template/TemplateFromProjectForCreationTest.php
@@ -23,10 +23,12 @@
 namespace Tuleap\Project\Registration\Template;
 
 use PFUser;
+use PHPUnit\Framework\MockObject\Stub;
 use Project;
 use ProjectManager;
 use Tuleap\Project\REST\v1\ProjectPostRepresentation;
 use Tuleap\Test\PHPUnit\TestCase;
+use URLVerification;
 
 final class TemplateFromProjectForCreationTest extends TestCase
 {
@@ -38,11 +40,16 @@ final class TemplateFromProjectForCreationTest extends TestCase
      * @var PFUser&\PHPUnit\Framework\MockObject\MockObject
      */
     private $user;
+    /**
+     * @var URLVerification&Stub
+     */
+    private $url_verification;
 
     protected function setUp(): void
     {
-        $this->project_manager = $this->createMock(ProjectManager::class);
-        $this->user            = $this->createMock(PFUser::class);
+        $this->project_manager  = $this->createMock(ProjectManager::class);
+        $this->user             = $this->createMock(PFUser::class);
+        $this->url_verification = $this->createStub(URLVerification::class);
     }
 
     public function testGetTemplateFromProjectForCreationFromRESTRepresentation(): void
@@ -54,7 +61,8 @@ public function testGetTemplateFromProjectForCreationFromRESTRepresentation(): v
         $template_from_project_for_creation = TemplateFromProjectForCreation::fromRESTRepresentation(
             $representation,
             $this->user,
-            $this->project_manager
+            $this->project_manager,
+            $this->url_verification
         );
 
         self::assertEquals($expected_project, $template_from_project_for_creation->getProject());
@@ -65,9 +73,11 @@ private function mockForSuccessfulValidation(int $project_id): Project
         $project = $this->createMock(Project::class);
         $project->method('getID')->willReturn($project_id);
         $project->method('isError')->willReturn(false);
-        $project->method('isActive')->willReturn(false);
+        $project->method('isActive')->willReturn(true);
         $project->method('isTemplate')->willReturn(true);
 
+        $this->url_verification->method('userCanAccessProject')->willReturn(true);
+
         $this->project_manager->method('getProject')->with($project_id)->willReturn($project);
 
         return $project;
@@ -92,11 +102,12 @@ public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseA
         TemplateFromProjectForCreation::fromRESTRepresentation(
             $representation,
             $this->user,
-            $this->project_manager
+            $this->project_manager,
+            $this->url_verification
         );
     }
 
-    public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseAsTemplateIsNotActiveAndNotMarkedAsTemplate(): void
+    public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseAsTemplateIsNotActive(): void
     {
         $representation = ProjectPostRepresentation::build(124);
 
@@ -104,7 +115,7 @@ public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseA
         $project->method('getID')->willReturn($representation->template_id);
         $project->method('isError')->willReturn(false);
         $project->method('isActive')->willReturn(false);
-        $project->method('isTemplate')->willReturn(false);
+        $project->method('isSystem')->willReturn(false);
 
         $this->project_manager->method('getProject')->with($representation->template_id)->willReturn($project);
 
@@ -112,7 +123,8 @@ public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseA
         TemplateFromProjectForCreation::fromRESTRepresentation(
             $representation,
             $this->user,
-            $this->project_manager
+            $this->project_manager,
+            $this->url_verification
         );
     }
 
@@ -134,7 +146,31 @@ public function testGetTemplateFromProjectForCreationIsNotValidWhenProjectToUseI
         TemplateFromProjectForCreation::fromRESTRepresentation(
             $representation,
             $this->user,
-            $this->project_manager
+            $this->project_manager,
+            $this->url_verification
+        );
+    }
+
+    public function testGetTemplateFromProjectForCreationIsNotValidWhenTemplateProjectToUseIsActiveButTheUserCanAccessTheProject(): void
+    {
+        $representation = ProjectPostRepresentation::build(125);
+
+        $project = $this->createMock(Project::class);
+        $project->method('getID')->willReturn($representation->template_id);
+        $project->method('isError')->willReturn(false);
+        $project->method('isActive')->willReturn(true);
+        $project->method('isTemplate')->willReturn(true);
+
+        $this->url_verification->method('userCanAccessProject')->willReturn(false);
+
+        $this->project_manager->method('getProject')->with($representation->template_id)->willThrowException(new InsufficientPermissionToUseCompanyTemplateException($project));
+
+        $this->expectException(InsufficientPermissionToUseCompanyTemplateException::class);
+        TemplateFromProjectForCreation::fromRESTRepresentation(
+            $representation,
+            $this->user,
+            $this->project_manager,
+            $this->url_verification
         );
     }
 }
