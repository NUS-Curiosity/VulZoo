diff --git a/lib/server.js b/lib/server.js
index d3087ab8..a8946a35 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -454,9 +454,6 @@ class Server extends EventEmitter {
         client.maybeUpgrade(transport);
       }
     } else {
-      // transport error handling takes over
-      websocket.removeListener("error", onUpgradeError);
-
       const closeConnection = (errorCode, errorContext) =>
         abortUpgrade(socket, errorCode, errorContext);
       this.handshake(req._query.transport, req, closeConnection);
diff --git a/test/server.js b/test/server.js
index b8a60b55..c8b93620 100644
--- a/test/server.js
+++ b/test/server.js
@@ -157,6 +157,46 @@ describe("server", () => {
         }
       );
     });
+
+    it("should not throw when the client sends invalid data during the handshake (ws only)", done => {
+      listen(port => {
+        // will throw "RangeError: Invalid WebSocket frame: RSV2 and RSV3 must be clear"
+        request
+          .get(`http://localhost:${port}/engine.io/`)
+          .set("connection", "upgrade")
+          .set("upgrade", "websocket")
+          .set("Sec-WebSocket-Version", "13")
+          .set("Sec-WebSocket-Key", "DXR4dX615eRds8nRmlhqtw==")
+          .query({ transport: "websocket", EIO: 4 })
+          .send("test")
+          .end(() => {});
+
+        setTimeout(done, 50);
+      });
+    });
+
+    it("should not throw when the client sends invalid data during the handshake (upgrade)", done => {
+      listen(port => {
+        request
+          .get(`http://localhost:${port}/engine.io/`)
+          .query({ transport: "polling", EIO: 4 })
+          .end((err, res) => {
+            const sid = JSON.parse(res.text.substring(1)).sid;
+
+            request
+              .get(`http://localhost:${port}/engine.io/`)
+              .set("connection", "upgrade")
+              .set("upgrade", "websocket")
+              .set("Sec-WebSocket-Version", "13")
+              .set("Sec-WebSocket-Key", "DXR4dX615eRds8nRmlhqtw==")
+              .query({ transport: "websocket", EIO: 4, sid })
+              .send("test")
+              .end(() => {});
+
+            setTimeout(done, 50);
+          });
+      });
+    });
   });
 
   describe("handshake", () => {
