diff --git a/browser/net/ipfs_redirect_network_delegate_helper.cc b/browser/net/ipfs_redirect_network_delegate_helper.cc
index 410cc26ebe0cd..97030d75135c5 100644
--- a/browser/net/ipfs_redirect_network_delegate_helper.cc
+++ b/browser/net/ipfs_redirect_network_delegate_helper.cc
@@ -59,7 +59,11 @@ int OnBeforeURLRequest_IPFSRedirectWork(
     } else {
       ctx->blocked_by = brave::kOtherBlocked;
     }
+  } else if (has_ipfs_scheme) {
+    // Block incorrect url.
+    ctx->blocked_by = brave::kOtherBlocked;
   }
+
   return net::OK;
 }
 
diff --git a/browser/net/ipfs_redirect_network_delegate_helper_unittest.cc b/browser/net/ipfs_redirect_network_delegate_helper_unittest.cc
index b4bad3041ad5b..1ec9dfc665764 100644
--- a/browser/net/ipfs_redirect_network_delegate_helper_unittest.cc
+++ b/browser/net/ipfs_redirect_network_delegate_helper_unittest.cc
@@ -117,6 +117,61 @@ TEST_F(IPFSRedirectNetworkDelegateHelperTest,
   EXPECT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);
 }
 
+TEST_F(IPFSRedirectNetworkDelegateHelperTest,
+       LoadDisabledWhenIPFS_WhenWrongIPFSUrl) {
+  profile()->GetPrefs()->SetInteger(
+      kIPFSResolveMethod, static_cast<int>(IPFSResolveMethodTypes::IPFS_LOCAL));
+
+  // IPFS Subframe
+  {
+    GURL url("ipfs://10.10.10.1");
+    auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);
+    brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;
+    brave_request_info->browser_context = profile();
+    int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(
+        brave::ResponseCallback(), brave_request_info);
+    EXPECT_EQ(rc, net::OK);
+    ASSERT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);
+  }
+
+  // IPFS Mainframe
+  {
+    GURL url("ipfs://10.10.10.1");
+    auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);
+    brave_request_info->resource_type = blink::mojom::ResourceType::kMainFrame;
+    brave_request_info->browser_context = profile();
+    int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(
+        brave::ResponseCallback(), brave_request_info);
+    EXPECT_EQ(rc, net::OK);
+    ASSERT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);
+  }
+
+  // IPNS Subframe
+  {
+    GURL url("ipns://10.10.10.1");
+    auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);
+    brave_request_info->resource_type = blink::mojom::ResourceType::kSubFrame;
+    brave_request_info->browser_context = profile();
+    int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(
+        brave::ResponseCallback(), brave_request_info);
+    EXPECT_EQ(rc, net::OK);
+    ASSERT_EQ(brave_request_info->blocked_by, brave::kOtherBlocked);
+  }
+
+  // IPFS Mainframe
+  {
+    GURL url("ipns://10.10.10.1");
+    auto brave_request_info = std::make_shared<brave::BraveRequestInfo>(url);
+    brave_request_info->resource_type = blink::mojom::ResourceType::kMainFrame;
+    brave_request_info->browser_context = profile();
+    int rc = ipfs::OnBeforeURLRequest_IPFSRedirectWork(
+        brave::ResponseCallback(), brave_request_info);
+    EXPECT_EQ(rc, net::OK);
+    // It is correct ipns url.
+    ASSERT_EQ(brave_request_info->blocked_by, brave::kNotBlocked);
+  }
+}
+
 TEST_F(IPFSRedirectNetworkDelegateHelperTest,
        SubFrameRequestDisabledWhen_NoContext) {
   profile()->GetPrefs()->SetInteger(
