diff --git a/.github/workflows/analyse-pr.yml b/.github/workflows/analyse-pr.yml
deleted file mode 100644
index a9050241ace3..000000000000
--- a/.github/workflows/analyse-pr.yml
+++ /dev/null
@@ -1,63 +0,0 @@
-name: SonarQube analysis
-
-on:
-  push:
-    branches:
-      - master
-      - '2.3[1-9]'
-  pull_request:
-    branches:
-      - master
-      - '2.3[1-9]'
-
-jobs:
-  cleanup-runs:
-    runs-on: ubuntu-latest
-
-    steps:
-      - uses: rokroskar/workflow-run-cleanup-action@035a48f84b47e111d72cf492a513179c92cd29ed
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
-
-  sonarqube:
-    runs-on: ubuntu-latest
-
-    steps:
-      - uses: actions/checkout@v2
-        with:
-          ref: ${{ github.event.pull_request.head.sha }}
-          fetch-depth: 0
-
-      - name: Set up JDK 11
-        uses: actions/setup-java@v1
-        with:
-          java-version: 11
-
-      - name: Cache maven artifacts
-        uses: actions/cache@v2
-        with:
-          path: ~/.m2/repository
-          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
-          restore-keys: ${{ runner.os }}-maven-
-
-      - name: Analyse PR
-        env:
-          BASE_BRANCH: ${{ github.base_ref }}
-          BRANCH: ${{ github.ref }}
-          PR: ${{ github.event.number }}
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
-        if: github.event_name == 'pull_request'
-        run: |
-          mvn -f dhis-2/pom.xml clean install -Psonarqube -Pjdk11
-          mvn -f dhis-2/pom.xml sonar:sonar -Dsonar.internal.analysis.dbd=false -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }} -Dsonar.projectKey=dhis2_dhis2-core -Dsonar.coverage.jacoco.xmlReportPaths=$(find "$(pwd)" -path '*jacoco.xml' | sed 's/.*/&/' | tr '\n' ',')
-
-      - name: Analyse long-living branch
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
-        if: github.event_name != 'pull_request'
-        run: |
-          mvn -f dhis-2/pom.xml clean install -Psonarqube -Pjdk11
-          mvn -f dhis-2/pom.xml sonar:sonar -Dsonar.internal.analysis.dbd=false -Dsonar.branch.name=${GITHUB_REF#refs/heads/} -Dsonar.projectKey=dhis2_dhis2-core -Dsonar.coverage.jacoco.xmlReportPaths=$(find "$(pwd)" -path '*jacoco.xml' | sed 's/.*/&/' | tr '\n' ',')
diff --git a/.github/workflows/check-formatting.yml b/.github/workflows/check-formatting.yml
deleted file mode 100644
index adec81c9a12b..000000000000
--- a/.github/workflows/check-formatting.yml
+++ /dev/null
@@ -1,26 +0,0 @@
-name: Check formatting
-
-on: [ pull_request ]
-
-jobs:
-  check-formatting:
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v2
-      - name: Set up JDK 11
-        uses: actions/setup-java@v1
-        with:
-          java-version: 11
-
-      - name: Cache maven artifacts
-        uses: actions/cache@v2
-        with:
-          path: ~/.m2/repository
-          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
-          restore-keys: ${{ runner.os }}-maven-
-
-      - name: Check formatting in core
-        run: mvn speedy-spotless:check -Pdefault -Pjdk11 --update-snapshots -q -f ./dhis-2/pom.xml
-
-      - name: Check formatting in web
-        run: mvn speedy-spotless:check -Pdefault -Pjdk11 --update-snapshots -q -f ./dhis-2/dhis-web/pom.xml
diff --git a/.github/workflows/codeql-analysis.yml b/.github/workflows/codeql-analysis.yml
deleted file mode 100644
index 362af58e3721..000000000000
--- a/.github/workflows/codeql-analysis.yml
+++ /dev/null
@@ -1,66 +0,0 @@
-# For most projects, this workflow file will not need changing; you simply need
-# to commit it to your repository.
-#
-# You may wish to alter this file to override the set of languages analyzed,
-# or to provide custom queries or build logic.
-name: "CodeQL"
-
-on:
-  pull_request:
-    branches:
-      - master
-  schedule:
-    - cron: '0 12 * * *'
-
-jobs:
-  analyze:
-    name: Analyze
-    runs-on: ubuntu-latest
-
-    strategy:
-      fail-fast: false
-      matrix:
-        # Override automatic language detection by changing the below list
-        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
-        language: [ 'java' ]
-        # Learn more...
-        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection
-
-    steps:
-      - name: Checkout repository
-        uses: actions/checkout@v2
-        with:
-          # We must fetch at least the immediate parents so that if this is
-          # a pull request then we can checkout the head.
-          fetch-depth: 2
-
-      # If this run was triggered by a pull request event, then checkout
-      # the head of the pull request instead of the merge commit.
-      - run: git checkout HEAD^2
-        if: ${{ github.event_name == 'pull_request' }}
-
-      - name: Cache maven artifacts
-        uses: actions/cache@v2
-        with:
-          path: ~/.m2/repository
-          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
-          restore-keys: ${{ runner.os }}-maven-
-
-      - name: Setup-java
-        uses: actions/setup-java@v1
-        with:
-          java-version: 11
-
-      - name: Codeql-init
-        uses: github/codeql-action/init@v1
-        with:
-          languages: java
-          config-file: ./.github/codeql/codeql-config.yml
-
-      - name: Build core
-        run: mvn clean install -f ./dhis-2/pom.xml -Pdev -Pjdk11 -DskipTests=true -Dmaven.javadoc.skip=true -B -V
-      - name: Build web
-        run: mvn clean install -f ./dhis-2/dhis-web/pom.xml -Pdev -Pjdk11 -DskipTests=true -Dmaven.javadoc.skip=true -B -V
-
-      - name: Perform CodeQL Analysis
-        uses: github/codeql-action/analyze@v1
diff --git a/.github/workflows/run-api-tests.yml b/.github/workflows/run-api-tests.yml
deleted file mode 100644
index 10394ae4f113..000000000000
--- a/.github/workflows/run-api-tests.yml
+++ /dev/null
@@ -1,40 +0,0 @@
-name: Run api tests
-
-on:
-  pull_request:
-    types: [labeled, synchronize ]
-jobs:
-  api-test:
-    env:
-      CORE_IMAGE_NAME: "dhis2/core:local"
-      TEST_IMAGE_NAME: "dhis2/tests:local"
-    runs-on: ubuntu-latest
-    if: contains(github.event.pull_request.labels.*.name, 'run-api-tests')
-    steps:
-      - uses: actions/checkout@v2
-      - name: Set up JDK 11
-        uses: actions/setup-java@v1
-        with:
-          java-version: 11
-      - name: Build core image
-        run: |
-          bash ./dhis-2/build-dev.sh
-
-      - name: Run tests
-        run: |
-          cd dhis-2/dhis-e2e-test
-          IMAGE_NAME=$CORE_IMAGE_NAME docker-compose up -d
-          docker build -t $TEST_IMAGE_NAME .
-          IMAGE_NAME=$TEST_IMAGE_NAME docker-compose -f docker-compose.e2e.yml up --exit-code-from e2e-test
-
-      - name: Upload logs
-        if: failure()
-        run: |
-          cd dhis-2/dhis-e2e-test
-          docker-compose logs web > ~/logs.txt
-
-      - uses: actions/upload-artifact@v2
-        if: failure()
-        with:
-          name: "logs"
-          path: '~/logs.txt'
diff --git a/.github/workflows/run-tests.yml b/.github/workflows/run-tests.yml
index ddc44e0bfde9..15ba2d463677 100644
--- a/.github/workflows/run-tests.yml
+++ b/.github/workflows/run-tests.yml
@@ -1,53 +1,58 @@
 name: Test
-
-on: [ pull_request ]
-
+env:
+  # This is to make sure Maven don't timeout fetching dependencies. See: https://github.com/actions/virtual-environments/issues/1499
+  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.httpconnectionManager.ttlSeconds=125
+on:
+  push:
+    branches:
+      - master
+  pull_request:
+concurrency:
+  group: ${{ github.workflow}}-${{ github.ref }}
+  cancel-in-progress: true
 jobs:
-  cleanup-runs:
-    runs-on: ubuntu-latest
-    steps:
-      - uses: rokroskar/workflow-run-cleanup-action@035a48f84b47e111d72cf492a513179c92cd29ed
-        env:
-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
-
   unit-test:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v2
+      - uses: netroms/checkout@main
       - name: Set up JDK 11
-        uses: actions/setup-java@v1
+        uses: netroms/setup-java@main
         with:
           java-version: 11
-
-      - name: Cache maven artifacts
-        uses: actions/cache@v2
-        with:
-          path: ~/.m2/repository
-          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
-          restore-keys: ${{ runner.os }}-maven-
-
-      - name: Test core
-        run: mvn clean install -Pdefault -Pjdk11 --update-snapshots -f ./dhis-2/pom.xml
+          distribution: temurin
+          cache: maven
+      - name: Test core # NOTE: dhis-2/pom.xml needs to be installed as built artifacts are needed by dhis-web
+        run: mvn clean install --threads 2C --batch-mode --no-transfer-progress --update-snapshots -f ./dhis-2/pom.xml
+        timeout-minutes: 30
 
       - name: Test dhis-web
-        run: mvn clean install -Pdefault -Pjdk11 --update-snapshots -f ./dhis-2/dhis-web/pom.xml
+        run: mvn test --threads 2C --batch-mode --no-transfer-progress --update-snapshots -f ./dhis-2/dhis-web/pom.xml
+        timeout-minutes: 30
 
   integration-test:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v2
+      - uses: netroms/checkout@main
       - name: Set up JDK 11
-        uses: actions/setup-java@v1
+        uses: netroms/setup-java@main
         with:
           java-version: 11
+          distribution: temurin
+          cache: maven
+      - name: Run integration tests
+        run: mvn clean verify --threads 2C --batch-mode --no-transfer-progress -Pintegration -f ./dhis-2/pom.xml
+        timeout-minutes: 30
 
-      - name: Cache maven artifacts
-        uses: actions/cache@v2
+  integration-h2-test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: netroms/checkout@main
+      - name: Set up JDK 11
+        uses: netroms/setup-java@main
         with:
-          path: ~/.m2/repository
-          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
-          restore-keys: ${{ runner.os }}-maven-
-
-      - name: Run integration tests
-        run: mvn clean install -Pintegration -Pjdk11 -f ./dhis-2/pom.xml
+          java-version: 11
+          distribution: temurin
+          cache: maven
+      - name: Run integration h2 tests
+        run: mvn clean verify --threads 2C --batch-mode --no-transfer-progress -PintegrationH2 -f ./dhis-2/pom.xml
+        timeout-minutes: 30
\ No newline at end of file
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/CodeGenerator.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/CodeGenerator.java
index 38ec8f688b71..a7e531025bd6 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/CodeGenerator.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/CodeGenerator.java
@@ -93,6 +93,22 @@ public static String generateCode( int codeSize )
         return new String( randomChars );
     }
 
+    /**
+     * Generates a random token encoded in Base64
+     *
+     * @param lengthInBytes length in bytes of the token
+     * @return a Base64 encoded string of the token
+     */
+    public static String getRandomNonSecureToken( int lengthInBytes )
+    {
+        ThreadLocalRandom random = ThreadLocalRandom.current();
+        byte[] tokenBytes = new byte[lengthInBytes];
+        random.nextBytes( tokenBytes );
+
+        Base64.Encoder encoder = Base64.getUrlEncoder().withoutPadding();
+        return encoder.encodeToString( tokenBytes );
+    }
+
     /**
      * Generates a cryptographically strong random token encoded in Base64
      *
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
index 36174b0c0b71..a1fcd2b87d1b 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java
@@ -121,6 +121,7 @@ public enum ErrorCode
     E3016( "Data sharing is not enabled for this object" ),
     E3017( "Invalid user group access string: `{0}`" ),
     E3018( "Invalid user access string: `{0}`" ),
+    E3028( "User `{0}` does not have access to user role" ),
 
     /* Metadata Validation */
     E4000( "Missing required property `{0}`." ),
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceContentStore.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceContentStore.java
index 604e5be41025..5edd6c6167de 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceContentStore.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceContentStore.java
@@ -119,4 +119,14 @@ public interface FileResourceContentStore
     void copyContent( String key, OutputStream output )
         throws IOException,
         NoSuchElementException;
+
+    /**
+     * Copies the content of the resource stored under key to the byte array.
+     *
+     * @param key the key used to store a resource
+     * @return byte array of the content
+     */
+    byte[] copyContent( String key )
+        throws IOException,
+        NoSuchElementException;
 }
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceService.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceService.java
index 5d77c2f93681..5a6a732788e3 100644
--- a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceService.java
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/fileresource/FileResourceService.java
@@ -69,6 +69,18 @@ void copyFileResourceContent( FileResource fileResource, OutputStream outputStre
         throws IOException,
         NoSuchElementException;
 
+    /**
+     * Copy fileResource content to a byte array
+     *
+     * @param fileResource
+     * @return a byte array of the content
+     * @throws IOException
+     * @throws NoSuchElementException
+     */
+    byte[] copyFileResourceContent( FileResource fileResource )
+        throws IOException,
+        NoSuchElementException;
+
     boolean fileResourceExists( String uid );
 
     void updateFileResource( FileResource fileResource );
diff --git a/dhis-2/dhis-api/src/main/java/org/hisp/dhis/security/utils/CspUtils.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/security/utils/CspUtils.java
new file mode 100644
index 000000000000..c9e5c4ac309f
--- /dev/null
+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/security/utils/CspUtils.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2004-2022, University of Oslo
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * Neither the name of the HISP project nor the names of its contributors may
+ * be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.hisp.dhis.security.utils;
+
+import java.util.List;
+import java.util.regex.Pattern;
+
+import com.google.common.collect.ImmutableList;
+
+public class CspUtils
+{
+    public static final String DEFAULT_HEADER_VALUE = "script-src 'none'; ";
+
+    public static final Pattern p1 = Pattern.compile( "^.+/events/files$" );
+
+    public static final Pattern p2 = Pattern.compile( "^.+trackedEntityInstance/[a-zA-Z\\d]+/[a-zA-Z\\d]+/image$" );
+
+    public static final Pattern p3 = Pattern.compile( "^.+/dataValues/files$" );
+
+    public static final Pattern p4 = Pattern.compile(
+        "^.+messageConversations/[a-zA-Z\\d]+/[a-zA-Z\\d]+/attachments/[a-zA-Z\\d]+$" );
+
+    public static final Pattern p5 = Pattern.compile( "^.+fileResources/[a-zA-Z\\d]+/data$" );
+
+    public static final Pattern p6 = Pattern.compile( "^.+audits/files/[a-zA-Z\\d]+$" );
+
+    public static final Pattern p7 = Pattern.compile( "^.+externalFileResources/[a-zA-Z\\d]+$" );
+
+    public static final List<Pattern> DEFAULT_FILTERED_URL_PATTERNS = ImmutableList.of( p1, p2, p3, p4, p5, p6, p7 );
+}
diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/DefaultFileResourceService.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/DefaultFileResourceService.java
index af031ee2f616..ca47fc3ef9d7 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/DefaultFileResourceService.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/DefaultFileResourceService.java
@@ -223,6 +223,15 @@ public void copyFileResourceContent( FileResource fileResource, OutputStream out
         fileResourceContentStore.copyContent( fileResource.getStorageKey(), outputStream );
     }
 
+    @Override
+    @Transactional( readOnly = true )
+    public byte[] copyFileResourceContent( FileResource fileResource )
+        throws IOException,
+        NoSuchElementException
+    {
+        return fileResourceContentStore.copyContent( fileResource.getStorageKey() );
+    }
+
     @Override
     @Transactional
     public boolean fileResourceExists( String uid )
diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/JCloudsFileResourceContentStore.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/JCloudsFileResourceContentStore.java
index 69c6dc977aef..8bdfe7d5d03b 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/JCloudsFileResourceContentStore.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/fileresource/JCloudsFileResourceContentStore.java
@@ -373,14 +373,28 @@ public void copyContent( String key, OutputStream output )
             throw new NoSuchElementException( "key '" + key + "' not found." );
         }
 
-        Blob blob = getBlob( key );
-
-        try ( InputStream in = blob.getPayload().openStream() )
+        try ( InputStream in = getBlob( key ).getPayload().openStream() )
         {
             IOUtils.copy( in, output );
         }
     }
 
+    @Override
+    public byte[] copyContent( String key )
+        throws IOException,
+        NoSuchElementException
+    {
+        if ( !blobExists( key ) )
+        {
+            throw new NoSuchElementException( "key '" + key + "' not found." );
+        }
+
+        try ( InputStream in = getBlob( key ).getPayload().openStream() )
+        {
+            return IOUtils.toByteArray( in );
+        }
+    }
+
     // -------------------------------------------------------------------------
     // Supportive methods
     // -------------------------------------------------------------------------
diff --git a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/DefaultUserService.java b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/DefaultUserService.java
index 7979225ace66..66b537293927 100644
--- a/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/DefaultUserService.java
+++ b/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/DefaultUserService.java
@@ -736,7 +736,11 @@ public List<ErrorReport> validateUser( User user, User currentUser )
             .getUserAuthorityGroups().stream().map( BaseIdentifiableObject::getUid ).collect( Collectors.toList() ) );
 
         roles.forEach( ur -> {
-            if ( !currentUser.getUserCredentials().canIssueUserRole( ur, canGrantOwnUserAuthorityGroups ) )
+            if ( ur == null )
+            {
+                errors.add( new ErrorReport( UserAuthorityGroup.class, ErrorCode.E3028, user.getUsername() ) );
+            }
+            else if ( !currentUser.getUserCredentials().canIssueUserRole( ur, canGrantOwnUserAuthorityGroups ) )
             {
                 errors.add( new ErrorReport( UserAuthorityGroup.class, ErrorCode.E3003, currentUser.getUsername(),
                     ur.getName() ) );
diff --git a/dhis-2/dhis-support/dhis-support-external/src/main/java/org/hisp/dhis/external/conf/ConfigurationKey.java b/dhis-2/dhis-support/dhis-support-external/src/main/java/org/hisp/dhis/external/conf/ConfigurationKey.java
index b87b0910025a..2a12baccb8f1 100644
--- a/dhis-2/dhis-support/dhis-support-external/src/main/java/org/hisp/dhis/external/conf/ConfigurationKey.java
+++ b/dhis-2/dhis-support/dhis-support-external/src/main/java/org/hisp/dhis/external/conf/ConfigurationKey.java
@@ -32,6 +32,8 @@
 import java.util.Arrays;
 import java.util.Optional;
 
+import org.hisp.dhis.security.utils.CspUtils;
+
 /**
  * @author Lars Helge Overland
  */
@@ -151,7 +153,22 @@ public enum ConfigurationKey
     AUDIT_ENABLED( "system.audit.enabled", Constants.TRUE, false ),
     TRACKER_IMPORT_PREHEAT_CACHE_ENABLED( "tracker.import.preheat.cache.enabled", Constants.ON, false ),
     ENABLE_OAUTH2_AUTHORIZATION_SERVER( "oauth2.authorization.server.enabled", Constants.ON, false ),
-    ENABLE_JWT_OIDC_TOKEN_AUTHENTICATION( "oidc.jwt.token.authentication.enabled", Constants.OFF, false );
+    ENABLE_JWT_OIDC_TOKEN_AUTHENTICATION( "oidc.jwt.token.authentication.enabled", Constants.OFF, false ),
+
+    /**
+     * Content Security Policy feature. Enable or disable the feature.
+     */
+    CSP_ENABLED( "csp.enabled", Constants.ON, true ),
+
+    /**
+     * CSP upgrade insecure connections. Enable or disable the feature.
+     */
+    CSP_UPGRADE_INSECURE_ENABLED( "csp.upgrade.insecure.enabled", Constants.OFF, true ),
+
+    /**
+     * CSP default header value/string. Enable or disable the feature.
+     */
+    CSP_HEADER_VALUE( "csp.header.value", CspUtils.DEFAULT_HEADER_VALUE, false );
 
     private final String key;
 
diff --git a/dhis-2/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/controller/FileResourceControllerMockTest.java b/dhis-2/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/controller/FileResourceControllerMockTest.java
new file mode 100644
index 000000000000..81fc7699eb46
--- /dev/null
+++ b/dhis-2/dhis-web-api-test/src/test/java/org/hisp/dhis/webapi/controller/FileResourceControllerMockTest.java
@@ -0,0 +1,102 @@
+/*
+ * Copyright (c) 2004-2021, University of Oslo
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * Neither the name of the HISP project nor the names of its contributors may
+ * be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.hisp.dhis.webapi.controller;
+
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import java.io.IOException;
+
+import org.hisp.dhis.dxf2.webmessage.WebMessageException;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
+import org.hisp.dhis.fileresource.FileResource;
+import org.hisp.dhis.fileresource.FileResourceDomain;
+import org.hisp.dhis.fileresource.FileResourceService;
+import org.hisp.dhis.user.CurrentUserService;
+import org.hisp.dhis.webapi.utils.FileResourceUtils;
+import org.junit.Rule;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnit;
+import org.mockito.junit.MockitoRule;
+import org.springframework.mock.web.MockHttpServletResponse;
+
+public class FileResourceControllerMockTest
+{
+    private FileResourceController controller;
+
+    @Mock
+    private FileResourceService fileResourceService;
+
+    @Mock
+    private CurrentUserService currentUserService;
+
+    @Mock
+    private FileResourceUtils fileResourceUtils;
+
+    @Mock
+    private DhisConfigurationProvider dhisConfig;
+
+    @Rule
+    public MockitoRule mockitoRule = MockitoJUnit.rule();
+
+    @Test
+    public void testGetOrgUnitImage()
+        throws WebMessageException,
+        IOException
+    {
+        controller = new FileResourceController( currentUserService, fileResourceService, fileResourceUtils,
+            dhisConfig );
+        FileResource fileResource = new FileResource();
+        fileResource.setDomain( FileResourceDomain.ORG_UNIT );
+        fileResource.setUid( "id" );
+
+        when( fileResourceService.getFileResource( "id" ) ).thenReturn( fileResource );
+
+        controller.getFileResourceData( "id", new MockHttpServletResponse(), null );
+
+        verify( fileResourceService ).copyFileResourceContent( any(), any() );
+    }
+
+    @Test( expected = WebMessageException.class )
+    public void testGetDataValue()
+        throws WebMessageException,
+        IOException
+    {
+        controller = new FileResourceController( currentUserService, fileResourceService, fileResourceUtils,
+            dhisConfig );
+        FileResource fileResource = new FileResource();
+        fileResource.setDomain( FileResourceDomain.DATA_VALUE );
+        fileResource.setUid( "id" );
+
+        when( fileResourceService.getFileResource( "id" ) ).thenReturn( fileResource );
+
+        controller.getFileResourceData( "id", new MockHttpServletResponse(), null );
+    }
+}
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AuditController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AuditController.java
index f6a4410f5085..12c34092b882 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AuditController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/AuditController.java
@@ -57,6 +57,8 @@
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
 import org.hisp.dhis.dxf2.webmessage.responses.FileResourceWebMessageResponse;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.fieldfilter.FieldFilterParams;
 import org.hisp.dhis.fieldfilter.FieldFilterService;
 import org.hisp.dhis.fileresource.FileResource;
@@ -82,6 +84,7 @@
 import org.hisp.dhis.trackedentitydatavalue.TrackedEntityDataValueAuditService;
 import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;
 import org.hisp.dhis.webapi.service.ContextService;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.springframework.http.HttpHeaders;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -120,6 +123,8 @@ public class AuditController
 
     private final FileResourceService fileResourceService;
 
+    private final DhisConfigurationProvider dhisConfig;
+
     public AuditController( IdentifiableObjectManager manager, ProgramStageInstanceService programStageInstanceService,
         DataValueAuditService dataValueAuditService,
         TrackedEntityDataValueAuditService trackedEntityDataValueAuditService,
@@ -127,7 +132,8 @@ public AuditController( IdentifiableObjectManager manager, ProgramStageInstanceS
         DataApprovalAuditService dataApprovalAuditService,
         TrackedEntityInstanceAuditService trackedEntityInstanceAuditService,
         FieldFilterService fieldFilterService,
-        ContextService contextService, FileResourceService fileResourceService )
+        ContextService contextService, FileResourceService fileResourceService,
+        DhisConfigurationProvider dhisConfig )
     {
         checkNotNull( manager );
         checkNotNull( programStageInstanceService );
@@ -138,6 +144,7 @@ public AuditController( IdentifiableObjectManager manager, ProgramStageInstanceS
         checkNotNull( fieldFilterService );
         checkNotNull( contextService );
         checkNotNull( fileResourceService );
+        checkNotNull( dhisConfig );
 
         this.manager = manager;
         this.programStageInstanceService = programStageInstanceService;
@@ -149,6 +156,7 @@ public AuditController( IdentifiableObjectManager manager, ProgramStageInstanceS
         this.fieldFilterService = fieldFilterService;
         this.contextService = contextService;
         this.fileResourceService = fileResourceService;
+        this.dhisConfig = dhisConfig;
     }
 
     /**
@@ -183,6 +191,7 @@ public void getFileAudit( @PathVariable String uid, HttpServletResponse response
         response.setContentType( fileResource.getContentType() );
         response.setContentLength( new Long( fileResource.getContentLength() ).intValue() );
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
 
         try
         {
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/DocumentController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/DocumentController.java
index 46abba9a9a42..35f9f1c2fbc9 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/DocumentController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/DocumentController.java
@@ -39,12 +39,15 @@
 import org.hisp.dhis.document.Document;
 import org.hisp.dhis.document.DocumentService;
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
 import org.hisp.dhis.external.location.LocationManager;
 import org.hisp.dhis.fileresource.FileResource;
 import org.hisp.dhis.fileresource.FileResourceService;
 import org.hisp.dhis.schema.descriptors.DocumentSchemaDescriptor;
 import org.hisp.dhis.webapi.utils.ContextUtils;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpHeaders;
 import org.springframework.stereotype.Controller;
@@ -75,6 +78,9 @@ public class DocumentController
     @Autowired
     private ContextUtils contextUtils;
 
+    @Autowired
+    private DhisConfigurationProvider dhisConfig;
+
     @RequestMapping( value = "/{uid}/data", method = RequestMethod.GET )
     public void getDocumentContent( @PathVariable( "uid" ) String uid, HttpServletResponse response )
         throws Exception
@@ -97,6 +103,7 @@ else if ( document.getFileResource() != null )
             response.setContentType( fileResource.getContentType() );
             response.setContentLength( new Long( fileResource.getContentLength() ).intValue() );
             response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+            HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
 
             try
             {
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/ExternalFileResourceController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/ExternalFileResourceController.java
index b360f8f477b7..1241ce6e8b6a 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/ExternalFileResourceController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/ExternalFileResourceController.java
@@ -37,6 +37,8 @@
 import org.hisp.dhis.common.DhisApiVersion;
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.feedback.Status;
 import org.hisp.dhis.fileresource.ExternalFileResource;
 import org.hisp.dhis.fileresource.ExternalFileResourceService;
@@ -44,6 +46,7 @@
 import org.hisp.dhis.fileresource.FileResourceService;
 import org.hisp.dhis.schema.descriptors.ExternalFileResourceSchemaDescriptor;
 import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
@@ -66,6 +69,9 @@ public class ExternalFileResourceController
     @Autowired
     private FileResourceService fileResourceService;
 
+    @Autowired
+    private DhisConfigurationProvider dhisConfig;
+
     /**
      * Returns a file associated with the externalFileResource resolved from the
      * accessToken.
@@ -103,6 +109,8 @@ public void getExternalFileResource( @PathVariable String accessToken,
         response.setContentType( fileResource.getContentType() );
         response.setContentLength( new Long( fileResource.getContentLength() ).intValue() );
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
         setNoStore( response );
 
         try
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/FileResourceController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/FileResourceController.java
index 800331cdd3f0..55e364b8471f 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/FileResourceController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/FileResourceController.java
@@ -38,6 +38,8 @@
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
 import org.hisp.dhis.dxf2.webmessage.responses.FileResourceWebMessageResponse;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.feedback.Status;
 import org.hisp.dhis.fileresource.FileResource;
 import org.hisp.dhis.fileresource.FileResourceDomain;
@@ -48,6 +50,7 @@
 import org.hisp.dhis.user.User;
 import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;
 import org.hisp.dhis.webapi.utils.FileResourceUtils;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
@@ -79,6 +82,9 @@ public class FileResourceController
     @Autowired
     private FileResourceUtils fileResourceUtils;
 
+    @Autowired
+    private DhisConfigurationProvider dhisConfig;
+
     // -------------------------------------------------------------------------
     // Controller methods
     // -------------------------------------------------------------------------
@@ -127,6 +133,7 @@ public void getFileResourceData( @PathVariable String uid, HttpServletResponse r
         response.setHeader( HttpHeaders.CONTENT_LENGTH,
             String.valueOf( fileResourceService.getFileResourceContentLength( fileResource ) ) );
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
 
         try
         {
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/MessageConversationController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/MessageConversationController.java
index 2c88e9fd79f3..f60cc5450d16 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/MessageConversationController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/MessageConversationController.java
@@ -44,6 +44,7 @@
 import org.hisp.dhis.configuration.ConfigurationService;
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.fieldfilter.Defaults;
 import org.hisp.dhis.fileresource.FileResource;
 import org.hisp.dhis.fileresource.FileResourceDomain;
@@ -122,6 +123,9 @@ public class MessageConversationController
     @Autowired
     private FileResourceService fileResourceService;
 
+    @Autowired
+    private DhisConfigurationProvider dhisConfig;
+
     @Override
     protected void postProcessResponseEntity( org.hisp.dhis.message.MessageConversation entity, WebOptions options,
         Map<String, String> parameters )
@@ -940,7 +944,7 @@ public void getAttachment(
             throw new WebMessageException( WebMessageUtils.conflict( "Invalid messageattachment." ) );
         }
 
-        fileResourceUtils.configureFileResourceResponse( response, fr );
+        fileResourceUtils.configureFileResourceResponse( response, fr, dhisConfig );
     }
 
     // --------------------------------------------------------------------------
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SvgConversionController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SvgConversionController.java
index 3f9dbdd4ef81..d883af1e04cc 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SvgConversionController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SvgConversionController.java
@@ -35,6 +35,7 @@
 
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.batik.transcoder.SVGAbstractTranscoder;
 import org.apache.batik.transcoder.TranscoderException;
 import org.apache.batik.transcoder.TranscoderInput;
 import org.apache.batik.transcoder.TranscoderOutput;
@@ -94,7 +95,7 @@ private void convertToPng( String svg, OutputStream out )
         svg = replaceUnsafeSvgText( svg );
 
         PNGTranscoder transcoder = new PNGTranscoder();
-
+        transcoder.addTranscodingHint( SVGAbstractTranscoder.KEY_ALLOW_EXTERNAL_RESOURCES, false );
         transcoder.addTranscodingHint( ImageTranscoder.KEY_BACKGROUND_COLOR, Color.WHITE );
 
         TranscoderInput input = new TranscoderInput( new StringReader( svg ) );
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/datavalue/DataValueController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/datavalue/DataValueController.java
index d95be8833209..6be6a8d565bc 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/datavalue/DataValueController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/datavalue/DataValueController.java
@@ -52,6 +52,8 @@
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
 import org.hisp.dhis.dxf2.webmessage.responses.FileResourceWebMessageResponse;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.feedback.ErrorCode;
 import org.hisp.dhis.feedback.Status;
 import org.hisp.dhis.fileresource.FileResource;
@@ -67,6 +69,7 @@
 import org.hisp.dhis.user.User;
 import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;
 import org.hisp.dhis.webapi.utils.FileResourceUtils;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.hisp.dhis.webapi.webdomain.DataValueFollowUpRequest;
 import org.jclouds.rest.AuthorizationException;
 import org.springframework.http.HttpHeaders;
@@ -113,10 +116,12 @@ public class DataValueController
 
     private final FileResourceUtils fileResourceUtils;
 
+    private final DhisConfigurationProvider dhisConfig;
+
     public DataValueController( final CurrentUserService currentUserService, final DataValueService dataValueService,
         final SystemSettingManager systemSettingManager, final InputUtils inputUtils,
         final FileResourceService fileResourceService, final DataValidator dataValueValidation,
-        final FileResourceUtils fileResourceUtils )
+        final FileResourceUtils fileResourceUtils, final DhisConfigurationProvider dhisConfig )
     {
         checkNotNull( currentUserService );
         checkNotNull( dataValueService );
@@ -125,6 +130,7 @@ public DataValueController( final CurrentUserService currentUserService, final D
         checkNotNull( fileResourceService );
         checkNotNull( dataValueValidation );
         checkNotNull( fileResourceUtils );
+        checkNotNull( dhisConfig );
 
         this.currentUserService = currentUserService;
         this.dataValueService = dataValueService;
@@ -133,6 +139,7 @@ public DataValueController( final CurrentUserService currentUserService, final D
         this.fileResourceService = fileResourceService;
         this.dataValueValidation = dataValueValidation;
         this.fileResourceUtils = fileResourceUtils;
+        this.dhisConfig = dhisConfig;
     }
 
     // ---------------------------------------------------------------------
@@ -616,7 +623,10 @@ public void getDataValueFile(
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
         response.setHeader( HttpHeaders.CONTENT_LENGTH,
             String.valueOf( fileResourceService.getFileResourceContentLength( fileResource ) ) );
+
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
         setNoStore( response );
+
         try
         {
             fileResourceService.copyFileResourceContent( fileResource, response.getOutputStream() );
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/EventController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/EventController.java
index ec08d0d1a514..9d8a558af8ca 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/EventController.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/event/EventController.java
@@ -83,6 +83,8 @@
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
 import org.hisp.dhis.dxf2.webmessage.responses.FileResourceWebMessageResponse;
 import org.hisp.dhis.event.EventStatus;
+import org.hisp.dhis.external.conf.ConfigurationKey;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.fieldfilter.FieldFilterParams;
 import org.hisp.dhis.fieldfilter.FieldFilterService;
 import org.hisp.dhis.fileresource.FileResource;
@@ -114,6 +116,7 @@
 import org.hisp.dhis.webapi.service.WebMessageService;
 import org.hisp.dhis.webapi.utils.ContextUtils;
 import org.hisp.dhis.webapi.utils.FileResourceUtils;
+import org.hisp.dhis.webapi.utils.HeaderUtils;
 import org.hisp.dhis.webapi.webdomain.WebOptions;
 import org.locationtech.jts.io.ParseException;
 import org.springframework.http.HttpHeaders;
@@ -179,13 +182,15 @@ public class EventController
 
     private final ContextUtils contextUtils;
 
+    private final DhisConfigurationProvider dhisConfig;
+
     public EventController( CurrentUserService currentUserService, SchedulingManager schedulingManager,
         EventService eventService, CsvEventService csvEventService, EventRowService eventRowService,
         DataElementService dataElementService, WebMessageService webMessageService, InputUtils inputUtils,
         RenderService renderService, ProgramStageInstanceService programStageInstanceService,
         FileResourceService fileResourceService, FieldFilterService fieldFilterService, ContextService contextService,
         SchemaService schemaService, TrackedEntityInstanceService entityInstanceService, ContextUtils contextUtils,
-        RequestToSearchParamsMapper requestToSearchParamsMapper )
+        RequestToSearchParamsMapper requestToSearchParamsMapper, DhisConfigurationProvider dhisConfig )
     {
         this.currentUserService = currentUserService;
         this.schedulingManager = schedulingManager;
@@ -204,6 +209,7 @@ public EventController( CurrentUserService currentUserService, SchedulingManager
         this.entityInstanceService = entityInstanceService;
         this.contextUtils = contextUtils;
         this.requestToSearchParamsMapper = requestToSearchParamsMapper;
+        this.dhisConfig = dhisConfig;
     }
 
     private Schema schema;
@@ -796,6 +802,7 @@ public void getEventDataValueFile( @RequestParam String eventUid, @RequestParam
         response.setContentType( fileResource.getContentType() );
         response.setContentLength( new Long( fileResource.getContentLength() ).intValue() );
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
 
         try
         {
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/filter/CspFilter.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/filter/CspFilter.java
new file mode 100644
index 000000000000..21f2583c49ff
--- /dev/null
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/filter/CspFilter.java
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2004-2021, University of Oslo
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * Neither the name of the HISP project nor the names of its contributors may
+ * be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.hisp.dhis.webapi.filter;
+
+import static org.hisp.dhis.external.conf.ConfigurationKey.CSP_ENABLED;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.regex.Pattern;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpServletResponseWrapper;
+
+import lombok.extern.slf4j.Slf4j;
+
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
+import org.hisp.dhis.security.oidc.DhisOidcProviderRepository;
+import org.hisp.dhis.security.utils.CspUtils;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+/**
+ * @author Morten Svanæs <msvanaes@dhis2.org>
+ */
+@Slf4j
+public class CspFilter
+    extends OncePerRequestFilter
+{
+    public static final String CSP_REQUEST_NONCE_ATTR_NAME = "cspRequestNonce";
+
+    public static final String CONTENT_SECURITY_POLICY_HEADER_NAME = "Content-Security-Policy";
+
+    private final boolean enabled;
+
+    private final List<Pattern> filteredURLs;
+
+    public CspFilter( DhisConfigurationProvider dhisConfig,
+        DhisOidcProviderRepository dhisOidcProviderRepository )
+    {
+        this.enabled = dhisConfig.isEnabled( CSP_ENABLED );
+        this.filteredURLs = CspUtils.DEFAULT_FILTERED_URL_PATTERNS;
+    }
+
+    @Override
+    protected void doFilterInternal( HttpServletRequest req, HttpServletResponse res, FilterChain chain )
+        throws ServletException,
+        IOException
+    {
+        if ( enabled && shouldRemoveCSPHeaders( req.getRequestURL().toString() ) )
+        {
+            // Remove the CSP headers that are added in
+            // DhisWebApiWebSecurityConfig#setHttpHeaders()
+            // Unless they match our patterns.
+            chain.doFilter( req,
+                new RemoveCspHeaderResponseWrapper( res ) );
+        }
+        else
+        {
+            chain.doFilter( req, res );
+        }
+    }
+
+    // Returns false if URI matches one of the regexp patterns in the list
+    private boolean shouldRemoveCSPHeaders( String requestURI )
+    {
+        for ( Pattern pattern : filteredURLs )
+        {
+            if ( pattern.matcher( requestURI ).matches() )
+            {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public static class RemoveCspHeaderResponseWrapper extends HttpServletResponseWrapper
+    {
+        public RemoveCspHeaderResponseWrapper( HttpServletResponse res )
+        {
+            super( res );
+        }
+
+        @Override
+        public void setHeader( String name, String value )
+        {
+            if ( !name.equals( CONTENT_SECURITY_POLICY_HEADER_NAME ) )
+            {
+                super.setHeader( name, value );
+            }
+        }
+
+        @Override
+        public void addHeader( String name, String value )
+        {
+            if ( !name.equals( CONTENT_SECURITY_POLICY_HEADER_NAME ) )
+            {
+                super.addHeader( name, value );
+            }
+        }
+    }
+}
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java
index ddaf52c1ebac..9f067c6b85a9 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/security/config/DhisWebApiWebSecurityConfig.java
@@ -27,6 +27,8 @@
  */
 package org.hisp.dhis.webapi.security.config;
 
+import static org.hisp.dhis.external.conf.ConfigurationKey.CSP_ENABLED;
+
 import java.util.Arrays;
 import java.util.List;
 import java.util.Set;
@@ -45,6 +47,7 @@
 import org.hisp.dhis.security.oidc.OIDCLoginEnabledCondition;
 import org.hisp.dhis.security.spring2fa.TwoFactorAuthenticationProvider;
 import org.hisp.dhis.webapi.filter.CorsFilter;
+import org.hisp.dhis.webapi.filter.CspFilter;
 import org.hisp.dhis.webapi.filter.CustomAuthenticationFilter;
 import org.hisp.dhis.webapi.oprovider.DhisOauthAuthenticationProvider;
 import org.hisp.dhis.webapi.security.DHIS2BasicAuthenticationEntryPoint;
@@ -98,6 +101,7 @@
 import org.springframework.security.web.access.expression.WebExpressionVoter;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
+import org.springframework.security.web.header.HeaderWriterFilter;
 
 import com.google.common.collect.ImmutableList;
 
@@ -141,6 +145,9 @@ public static void setApiContextPath( String apiContextPath )
     @Conditional( value = OAuth2AuthorizationServerEnabledCondition.class )
     public class OAuth2SecurityConfig extends WebSecurityConfigurerAdapter implements AuthorizationServerConfigurer
     {
+        @Autowired
+        private DhisConfigurationProvider dhisConfig;
+
         @Autowired
         private TwoFactorAuthenticationProvider twoFactorAuthenticationProvider;
 
@@ -184,7 +191,7 @@ protected void configure( HttpSecurity http )
 
             http.apply( new AuthorizationServerAuthenticationManagerConfigurer() );
 
-            setHttpHeaders( http );
+            setHttpHeaders( http, dhisConfig );
         }
 
         private class AuthorizationServerAuthenticationManagerConfigurer
@@ -268,6 +275,9 @@ public DefaultTokenServices tokenServices()
     @Conditional( value = OIDCLoginEnabledCondition.class )
     public static class OidcSecurityConfig extends WebSecurityConfigurerAdapter
     {
+        @Autowired
+        private DhisConfigurationProvider dhisConfig;
+
         @Autowired
         private DhisOidcProviderRepository dhisOidcProviderRepository;
 
@@ -307,7 +317,7 @@ protected void configure( HttpSecurity http )
 
                 .csrf().disable();
 
-            setHttpHeaders( http );
+            setHttpHeaders( http, dhisConfig );
         }
     }
 
@@ -321,6 +331,9 @@ public static class ApiWebSecurityConfigurationAdapter extends WebSecurityConfig
         @Autowired
         private DhisConfigurationProvider dhisConfig;
 
+        @Autowired
+        private DhisOidcProviderRepository dhisOidcProviderRepository;
+
         @Autowired
         @Qualifier( "defaultTokenService" )
         private ResourceServerTokenServices tokenServices;
@@ -438,6 +451,8 @@ protected void configure( HttpSecurity http )
                 .authenticationEntryPoint( basicAuthenticationEntryPoint() )
                 .and().csrf().disable();
 
+            configureCspFilter( http, dhisConfig, dhisOidcProviderRepository );
+
             if ( dhisConfig.isEnabled( ConfigurationKey.ENABLE_OAUTH2_AUTHORIZATION_SERVER ) )
             {
                 http.exceptionHandling().accessDeniedHandler( new OAuth2AccessDeniedHandler() );
@@ -449,7 +464,14 @@ protected void configure( HttpSecurity http )
 
             configureOAuth2TokenFilter( http );
 
-            setHttpHeaders( http );
+            setHttpHeaders( http, dhisConfig );
+        }
+
+        private void configureCspFilter( HttpSecurity http, DhisConfigurationProvider dhisConfig,
+            DhisOidcProviderRepository dhisOidcProviderRepository )
+        {
+            http.addFilterBefore( new CspFilter( dhisConfig, dhisOidcProviderRepository ),
+                HeaderWriterFilter.class );
         }
 
         private void configureOAuth2TokenFilter( HttpSecurity http )
@@ -523,11 +545,12 @@ public DHIS2BasicAuthenticationEntryPoint basicAuthenticationEntryPoint()
     /**
      * Customizes various "global" security related headers.
      *
-     * @param http http config
+     * @param http http security config builder
+     * @param dhisConfig DHIS2 configuration provider
      *
      * @throws Exception
      */
-    public static void setHttpHeaders( HttpSecurity http )
+    public static void setHttpHeaders( HttpSecurity http, DhisConfigurationProvider dhisConfig )
         throws Exception
     {
         http
@@ -540,5 +563,10 @@ public static void setHttpHeaders( HttpSecurity http )
             .httpStrictTransportSecurity()
             .and()
             .frameOptions().sameOrigin();
+
+        if ( dhisConfig.isEnabled( CSP_ENABLED ) )
+        {
+            http.headers().contentSecurityPolicy( dhisConfig.getProperty( ConfigurationKey.CSP_HEADER_VALUE ) );
+        }
     }
 }
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/FileResourceUtils.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/FileResourceUtils.java
index d83117bad7b7..91d09cecb6a5 100644
--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/FileResourceUtils.java
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/FileResourceUtils.java
@@ -27,6 +27,10 @@
  */
 package org.hisp.dhis.webapi.utils;
 
+import static org.hisp.dhis.dxf2.webmessage.WebMessageUtils.conflict;
+import static org.hisp.dhis.dxf2.webmessage.WebMessageUtils.error;
+import static org.hisp.dhis.external.conf.ConfigurationKey.CSP_HEADER_VALUE;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -41,6 +45,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.hisp.dhis.dxf2.webmessage.WebMessageException;
 import org.hisp.dhis.dxf2.webmessage.WebMessageUtils;
+import org.hisp.dhis.external.conf.DhisConfigurationProvider;
 import org.hisp.dhis.fileresource.FileResource;
 import org.hisp.dhis.fileresource.FileResourceDomain;
 import org.hisp.dhis.fileresource.FileResourceService;
@@ -134,12 +139,14 @@ public static void setImageFileDimensions( FileResource fileResource, ImageFileD
         }
     }
 
-    public void configureFileResourceResponse( HttpServletResponse response, FileResource fileResource )
+    public void configureFileResourceResponse( HttpServletResponse response, FileResource fileResource,
+        DhisConfigurationProvider dhisConfig )
         throws WebMessageException
     {
         response.setContentType( fileResource.getContentType() );
         response.setContentLength( new Long( fileResource.getContentLength() ).intValue() );
         response.setHeader( HttpHeaders.CONTENT_DISPOSITION, "filename=" + fileResource.getName() );
+        HeaderUtils.setSecurityHeaders( response, dhisConfig.getProperty( CSP_HEADER_VALUE ) );
 
         try
         {
diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/HeaderUtils.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/HeaderUtils.java
new file mode 100644
index 000000000000..845471d63aa7
--- /dev/null
+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/utils/HeaderUtils.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2004-2022, University of Oslo
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ * Neither the name of the HISP project nor the names of its contributors may
+ * be used to endorse or promote products derived from this software without
+ * specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.hisp.dhis.webapi.utils;
+
+import javax.servlet.http.HttpServletResponse;
+
+public class HeaderUtils
+{
+    public static void setSecurityHeaders( HttpServletResponse response, String cspHeaders )
+    {
+        response.setHeader( "Content-Security-Policy", cspHeaders );
+        response.setHeader( "X-Content-Type-Options", "nosniff" );
+        response.setHeader( "X-Frame-Options", "SAMEORIGIN" );
+        response.setHeader( "X-XSS-Protection", "1; mode=block" );
+    }
+}
diff --git a/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/dhis-web-commons/security/login.vm b/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/dhis-web-commons/security/login.vm
index 78b32c8d8d99..9f8e27bbc3e9 100644
--- a/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/dhis-web-commons/security/login.vm
+++ b/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/dhis-web-commons/security/login.vm
@@ -7,29 +7,56 @@
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
     <link rel="shortcut icon" href="../../favicon.ico"/>
     <script type="text/javascript" src="../javascripts/jQuery/jquery.min.js"></script>
-    <script>
+    <script nonce="$cspNonce">
         $.ajaxSetup( {
-          beforeSend: function(xhr) {
-            xhr.setRequestHeader(
-                'X-Requested-With',
-                {
-                  toString: function() {
-                    return '';
-                  }
-                }
-            );
-          }
+            beforeSend: function(xhr) {
+                xhr.setRequestHeader(
+                        'X-Requested-With',
+                        {
+                            toString: function() {
+                                return '';
+                            }
+                        }
+                );
+            }
         } );
     </script>
     <script type="text/javascript" src="login.js"></script>
     <link type="text/css" rel="stylesheet" href="../css/widgets.css">
     <link type="text/css" rel="stylesheet" href="../css/login.css">
     <link type="text/css" rel="stylesheet" href="../../api/files/style/external"/>
+    <style nonce="$cspNonce">
+        .displayNoneClass {
+            display: none;
+        }
+        .borderNoneClass {
+            border: none;
+        }
+        .paddingTenClass {
+            padding-bottom: 10px;
+        }
+        .whiteRedClass {
+            color: white;
+            background-color: red;
+        }
+        .marginLeftClass {
+            margin-left: 30px;
+        }
+
+            #foreach( $provider in $oidcConfig.providers )
+            .oidc${provider.id}Class {
+                width: 269px;
+                height: 46px;
+                border: none;
+                background: url($provider.icon) no-repeat scroll $provider.iconPadding, #fff;
+            }
+            #end
+    </style>
 </head>
 
 <body class="loginPage">
-<h1 style="display:none">$!encoder.htmlEncode( ${applicationTitle} )</h1>
-<div style="display:none">DHIS 2</div>
+<h1 class="displayNoneClass">$!encoder.htmlEncode( ${applicationTitle} )</h1>
+<div class="displayNoneClass">DHIS 2</div>
 <div>
     #if ( $keyFlag )
         <img id="flagArea" src="../flags/$!{keyFlagImage}">
@@ -50,7 +77,7 @@
 <div id="loginField">
     <div id="loginArea">
         <div id="bannerArea">
-            <a href="http://www.dhis2.org"><img src="../../api/staticContent/logo_front" style="border:none"></a>
+            <a href="http://www.dhis2.org"><img src="../../api/staticContent/logo_front" class="borderNoneClass"></a>
         </div>
 
         <form id="loginForm" action="../../dhis-web-commons-security/login.action" method="post">
@@ -60,7 +87,7 @@
                 <div><input type="password" id="j_password" name="j_password" autocomplete="off" placeholder="Password"
                             required></div>
                 <div>
-                  <input type="checkbox" name="2fa" value="2fa" id="2fa"/><label id="2FaLabel">$i18n.getString('login_using_two_factor_authentication')</label>
+                    <input type="checkbox" name="2fa" value="2fa" id="2fa"/><label id="2FaLabel">$i18n.getString('login_using_two_factor_authentication')</label>
                     <input type="code" id="2fa_code" name="2fa_code"
                            placeholder="$i18n.getString('two_factor_authentication_code')" hidden readonly>
                 </div>
@@ -69,12 +96,12 @@
                 <input id="submit" class="button" type="submit" value="$i18n.getString('sign_in')">
             </div>
             #if( $keyAccountRecovery )
-                <div style="padding-bottom: 10px">
+                <div class="paddingTenClass">
                     <a id="forgotPasswordLink" href="recovery.action">$i18n.getString('forgot_password')</a>
                 </div>
             #end
             #if( $keyConfig.selfRegistrationAllowed() )
-                <div style="padding-bottom: 10px">
+                <div class="paddingTenClass">
                     <a id="createAccountLink" href="account.action">$i18n.getString('create_an_account')</a>
                 </div>
             #end
@@ -83,8 +110,7 @@
         #foreach( $provider in $oidcConfig.providers )
             <form id="oidcProvider_$provider.id" action="../../oauth2/authorization/$provider.id" method="get">
                 <div id="submitDiv">
-                    <input style="width: 269px; height:46px; border:none; background: url($provider.icon) no-repeat scroll $provider.iconPadding, #fff;"
-                           id="submit" class="button" type="submit"
+                    <input id="submit" class="button oidc${provider.id}Class" type="submit"
                            value="$i18n.getString( $provider.loginText )">
                 </div>
             </form>
@@ -101,7 +127,7 @@
             </div>
         #end
         <!--[if lte IE 8]>
-            <div id="notificationArea" style="color: white; background-color: red;">$i18n.getString(
+            <div id="notificationArea" class="whiteRedClass">$i18n.getString(
             "unsupported_browser" )</div>
             <![endif]-->
     </div>
@@ -113,7 +139,7 @@
     </div>
     <div id="rightFooterArea" class="innerFooterArea">
         <span id="applicationRightFooter">$!{keyApplicationRightFooter}</span>
-        <select id="localeSelect" onchange="login.localeChanged()" style="margin-left: 30px">
+        <select id="localeSelect" onchange="login.localeChanged()" class="marginLeftClass">
             <option value="">[ $i18n.getString( "change_language" ) ]</option>
             #foreach( $locale in $availableLocales )
                 <option value="${locale.language}">${locale.displayName}</option>
diff --git a/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/action/LoginAction.java b/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/action/LoginAction.java
index 5bd8cf54cef2..db359da892b8 100644
--- a/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/action/LoginAction.java
+++ b/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/action/LoginAction.java
@@ -27,6 +27,8 @@
  */
 package org.hisp.dhis.security.action;
 
+import static org.hisp.dhis.webapi.filter.CspFilter.CSP_REQUEST_NONCE_ATTR_NAME;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -75,6 +77,12 @@ public void setDeviceResolver( DeviceResolver deviceResolver )
     // -------------------------------------------------------------------------
     // Input & Output
     // -------------------------------------------------------------------------
+    private String cspNonce = "";
+
+    public String getCspNonce()
+    {
+        return cspNonce;
+    }
 
     private Boolean failed = false;
 
@@ -112,6 +120,8 @@ public String execute()
     {
         addRegisteredProviders();
 
+        cspNonce = (String) ServletActionContext.getRequest().getSession().getAttribute( CSP_REQUEST_NONCE_ATTR_NAME );
+
         Device device = deviceResolver.resolveDevice( ServletActionContext.getRequest() );
 
         ServletActionContext.getResponse().addHeader( "Login-Page", "true" );
diff --git a/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/DhisWebCommonsWebSecurityConfig.java b/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/DhisWebCommonsWebSecurityConfig.java
index bf17a07defe2..6acc346d3d0b 100644
--- a/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/DhisWebCommonsWebSecurityConfig.java
+++ b/dhis-2/dhis-web/dhis-web-commons/src/main/java/org/hisp/dhis/security/config/DhisWebCommonsWebSecurityConfig.java
@@ -38,11 +38,13 @@
 import org.hisp.dhis.security.MappedRedirectStrategy;
 import org.hisp.dhis.security.ldap.authentication.CustomLdapAuthenticationProvider;
 import org.hisp.dhis.security.oidc.DhisOidcLogoutSuccessHandler;
+import org.hisp.dhis.security.oidc.DhisOidcProviderRepository;
 import org.hisp.dhis.security.spring2fa.TwoFactorAuthenticationProvider;
 import org.hisp.dhis.security.spring2fa.TwoFactorWebAuthenticationDetailsSource;
 import org.hisp.dhis.security.vote.ActionAccessVoter;
 import org.hisp.dhis.security.vote.ModuleAccessVoter;
 import org.hisp.dhis.webapi.filter.CorsFilter;
+import org.hisp.dhis.webapi.filter.CspFilter;
 import org.hisp.dhis.webapi.filter.CustomAuthenticationFilter;
 import org.hisp.dhis.webapi.handler.CustomExceptionMappingAuthenticationFailureHandler;
 import org.hisp.dhis.webapi.handler.DefaultAuthenticationSuccessHandler;
@@ -72,7 +74,9 @@
 import org.springframework.security.web.access.expression.WebExpressionVoter;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
+import org.springframework.security.web.header.HeaderWriterFilter;
 import org.springframework.security.web.util.matcher.RequestMatcher;
+import org.springframework.session.web.http.DefaultCookieSerializer;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -139,7 +143,7 @@ public static class FormLoginWebSecurityConfigurerAdapter extends WebSecurityCon
         private I18nManager i18nManager;
 
         @Autowired
-        private DhisConfigurationProvider configurationProvider;
+        private DhisConfigurationProvider dhisConfig;
 
         @Autowired
         private ExternalAccessVoter externalAccessVoter;
@@ -157,6 +161,9 @@ public static class FormLoginWebSecurityConfigurerAdapter extends WebSecurityCon
         @Autowired
         private DefaultAuthenticationEventPublisher authenticationEventPublisher;
 
+        @Autowired
+        private DhisOidcProviderRepository dhisOidcProviderRepository;
+
         public void configure( AuthenticationManagerBuilder auth )
             throws Exception
         {
@@ -251,10 +258,13 @@ protected void configure( HttpSecurity http )
                 .csrf()
                 .disable()
 
+                .addFilterBefore( new CspFilter( dhisConfig, dhisOidcProviderRepository ),
+                    HeaderWriterFilter.class )
+
                 .addFilterBefore( CorsFilter.get(), BasicAuthenticationFilter.class )
                 .addFilterBefore( CustomAuthenticationFilter.get(), UsernamePasswordAuthenticationFilter.class );
 
-            setHttpHeaders( http );
+            setHttpHeaders( http, dhisConfig );
         }
 
         @Bean
@@ -270,10 +280,10 @@ public DefaultAuthenticationSuccessHandler authenticationSuccessHandler()
         {
             DefaultAuthenticationSuccessHandler successHandler = new DefaultAuthenticationSuccessHandler();
             successHandler.setRedirectStrategy( mappedRedirectStrategy() );
-            if ( configurationProvider.getProperty( ConfigurationKey.SYSTEM_SESSION_TIMEOUT ) != null )
+            if ( dhisConfig.getProperty( ConfigurationKey.SYSTEM_SESSION_TIMEOUT ) != null )
             {
                 successHandler.setSessionTimeout(
-                    Integer.parseInt( configurationProvider.getProperty( ConfigurationKey.SYSTEM_SESSION_TIMEOUT ) ) );
+                    Integer.parseInt( dhisConfig.getProperty( ConfigurationKey.SYSTEM_SESSION_TIMEOUT ) ) );
             }
 
             return successHandler;
