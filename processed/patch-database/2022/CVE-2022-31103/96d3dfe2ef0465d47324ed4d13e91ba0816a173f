diff --git a/__tests__/sanitize.test.ts b/__tests__/sanitize.test.ts
index 324ba95..09c2adc 100644
--- a/__tests__/sanitize.test.ts
+++ b/__tests__/sanitize.test.ts
@@ -295,4 +295,59 @@ b {background: red;}</style>`,
     ).toBe(`<style>a {background: red;}
 b {background: red;}</style>`);
   });
+
+  it('removes @keyframes rules from CSS', () => {
+    expect(
+      sanitize(
+        `<style>@keyframes test {
+          0% {
+              transform: rotate(0deg);
+          }
+
+          100% {
+              transform: rotate(360deg);
+          }
+        }</style>`,
+        '',
+        { noWrapper: true, preserveCssPriority: false }
+      )
+    ).toBe(`<style></style>`);
+  });
+
+  it('removes @supports rules from CSS', () => {
+    expect(
+      sanitize(
+        `<style>@supports (display: grid) {
+            div {
+              display: grid;
+            }
+          }</style>`,
+        '',
+        { noWrapper: true, preserveCssPriority: false }
+      )
+    ).toBe(`<style></style>`);
+  });
+
+  it('removes @font-face rules from CSS', () => {
+    expect(
+      sanitize(
+        `<style>@font-face {
+            font-family: "Open Sans";
+            src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2"),
+                 url("/fonts/OpenSans-Regular-webfont.woff") format("woff");
+          }</style>`,
+        '',
+        { noWrapper: true, preserveCssPriority: false }
+      )
+    ).toBe(`<style></style>`);
+  });
+
+  it('removes @import rules from CSS', () => {
+    expect(
+      sanitize(`<style>@import 'custom.css';</style>`, '', {
+        noWrapper: true,
+        preserveCssPriority: false,
+      })
+    ).toBe(`<style></style>`);
+  });
 });
diff --git a/src/index.ts b/src/index.ts
index 530a885..96ca01a 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -307,7 +307,9 @@ function sanitizeHtml(
           rewriteExternalResources
         );
         newRules.push(rule);
-      } else if ('cssRules' in rule) {
+      } else if ('cssRules' in rule && 'media' in rule) {
+        // According to https://www.caniemail.com/,
+        // out of all at-rules, Gmail only supports @media.
         const mediaRule = (rule as any) as CSSMediaRule;
         const newRulesMedia: CSSRule[] = [];
 
