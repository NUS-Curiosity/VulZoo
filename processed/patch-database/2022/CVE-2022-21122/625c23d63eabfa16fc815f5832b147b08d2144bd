diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0f58e29..cc44b0c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,8 @@
 
 ## [Unreleased][unreleased]
 
+- Prevent arbitrary js code execution
+
 ## [0.0.1][] - 2022-05-13
 
 - First simple implementation
diff --git a/lib/sheet.js b/lib/sheet.js
index 8f9cfdf..105ce96 100644
--- a/lib/sheet.js
+++ b/lib/sheet.js
@@ -2,8 +2,20 @@
 
 const metavm = require('metavm');
 
+const wrap = (target) =>
+  new Proxy(target, {
+    get: (target, prop) => {
+      if (prop === 'constructor') return null;
+      const value = target[prop];
+      if (typeof value === 'number') return value;
+      return wrap(value);
+    },
+  });
+
+const math = wrap(Math);
+
 const getValue = (target, prop) => {
-  if (prop === 'Math') return Math;
+  if (prop === 'Math') return math;
   const { expressions, data } = target;
   if (!expressions.has(prop)) return data.get(prop);
   const expression = expressions.get(prop);
diff --git a/test/unit.js b/test/unit.js
index fb0fab4..af2c47e 100644
--- a/test/unit.js
+++ b/test/unit.js
@@ -48,3 +48,19 @@ metatests.test('JavaScript Math', async (test) => {
   test.strictSame(sheet.values['I1'], Math.sin(Math.sqrt(Math.pow(100, -2))));
   test.end();
 });
+
+metatests.test('Prevent arbitrary js code execution', async (test) => {
+  const sheet = new Sheet();
+  sheet.cells['A1'] =
+    '=Math.constructor.constructor("console.log(\\"Hello, World!\\")")();';
+  try {
+    const res = sheet.values['A1'];
+    test.strictSame(res, undefined);
+  } catch (error) {
+    test.strictSame(
+      error.message,
+      `Cannot read property '${'constructor'}' of null`
+    );
+  }
+  test.end();
+});
