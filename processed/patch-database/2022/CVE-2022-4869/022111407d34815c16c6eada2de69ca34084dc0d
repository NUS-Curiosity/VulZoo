diff --git a/arta/common/middleware.py b/arta/common/middleware.py
new file mode 100644
index 0000000..86954b4
--- /dev/null
+++ b/arta/common/middleware.py
@@ -0,0 +1,20 @@
+from django.utils.deprecation import MiddlewareMixin
+
+
+class HideSensitiveMiddleware(MiddlewareMixin):
+    """
+    Hide sensitive post variables.
+
+    Django has a mechanism to hide these on a per-view basis, but this makes sure that the variables listed here are
+    hidden even on errors in middleware (i.e. before the view is ran).
+
+    In part, this is a workaround around https://code.djangoproject.com/ticket/33090, but even with that fixed, this
+    middleware adds a bit extra security for exceptions that are triggered before the view is even known.
+
+    Note that this value is overwritten once a view that has its own sensitive_post_variables specified is ran, but
+    that should be ok, the view should then know better.
+    """
+
+    def __call__(self, request):
+        request.sensitive_post_parameters = ['password']
+        return super().__call__(request)
diff --git a/arta/settings/production.py b/arta/settings/production.py
index b22df74..4601122 100644
--- a/arta/settings/production.py
+++ b/arta/settings/production.py
@@ -98,3 +98,7 @@
 # TODO: A day is probably too long already, in Django (the upcoming) 3.1 this can be
 # specified in seconds instead.
 PASSWORD_RESET_TIMEOUT_DAYS = 1
+
+# Add extra protection for passwords, partially to work around https://code.djangoproject.com/ticket/33090 but also to
+# add even a bit more protection. Must be first to maximise coverage.
+MIDDLEWARE.append(0, 'arta.common.middleware.HideSensitiveMiddleware')
