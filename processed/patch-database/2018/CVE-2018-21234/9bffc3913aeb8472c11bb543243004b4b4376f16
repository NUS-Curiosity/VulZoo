diff --git a/CHANGELOG.md b/CHANGELOG.md
index 186210faa..4b77ee175 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -24,6 +24,7 @@ All notable changes to Jodd project are documented here.
 + **mail** - added custom properties.
 + **json** - added `onValue` callback for JSON serializer.
 + **json** - added `excludeEmpty` flag for JSON serializer.
++ **json** - added `allowClass` for whitelisting class names.
 + **petite** - allow injection in the private fields of super types.
 
 
diff --git a/jodd-json/src/main/java/jodd/json/JsonParser.java b/jodd-json/src/main/java/jodd/json/JsonParser.java
index 95ff9b848..dc6d408f2 100644
--- a/jodd-json/src/main/java/jodd/json/JsonParser.java
+++ b/jodd-json/src/main/java/jodd/json/JsonParser.java
@@ -36,6 +36,7 @@
 import jodd.util.UnsafeUtil;
 
 import java.math.BigInteger;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -307,6 +308,26 @@ public JsonParser withClassMetadata(final boolean useMetadata) {
 		return this;
 	}
 
+	/**
+	 * Adds a {@link jodd.util.Wildcard wildcard} pattern for white-listing classes.
+	 * @see #setClassMetadataName(String)
+	 */
+	public JsonParser allowClass(final String classPattern) {
+		if (super.classnameWhitelist == null) {
+			super.classnameWhitelist = new ArrayList<>();
+		}
+		classnameWhitelist.add(classPattern);
+		return this;
+	}
+
+	/**
+	 * Removes the whitelist of allowed classes.
+	 * @see #setClassMetadataName(String)
+	 */
+	public JsonParser allowAllClasses() {
+		classnameWhitelist = null;
+		return this;
+	}
 
 	// ---------------------------------------------------------------- parse
 
diff --git a/jodd-json/src/main/java/jodd/json/JsonParserBase.java b/jodd-json/src/main/java/jodd/json/JsonParserBase.java
index 5f9ba42bc..0a4cccda0 100644
--- a/jodd-json/src/main/java/jodd/json/JsonParserBase.java
+++ b/jodd-json/src/main/java/jodd/json/JsonParserBase.java
@@ -55,6 +55,7 @@ public abstract class JsonParserBase {
 
 	protected Supplier<Map> mapSupplier = HASMAP_SUPPLIER;
 	protected Supplier<List> listSupplier = ARRAYLIST_SUPPLIER;
+	protected List<String> classnameWhitelist;
 
 	/**
 	 * Creates new instance of {@link jodd.json.MapToBean}.
diff --git a/jodd-json/src/main/java/jodd/json/MapToBean.java b/jodd-json/src/main/java/jodd/json/MapToBean.java
index d0472a5e4..dfd8bb2cf 100644
--- a/jodd-json/src/main/java/jodd/json/MapToBean.java
+++ b/jodd-json/src/main/java/jodd/json/MapToBean.java
@@ -32,6 +32,7 @@
 import jodd.typeconverter.TypeConverterManager;
 import jodd.util.ClassLoaderUtil;
 import jodd.util.ClassUtil;
+import jodd.util.Wildcard;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.HashMap;
@@ -69,6 +70,8 @@ public Object map2bean(final Map map, Class targetType) {
 			}
 		}
 		else {
+			checkClassName(jsonParser.classnameWhitelist, className);
+
 			try {
 				targetType = ClassLoaderUtil.loadClass(className);
 			} catch (ClassNotFoundException cnfex) {
@@ -145,6 +148,17 @@ else if (value instanceof Map) {
 		return target;
 	}
 
+	private void checkClassName(final List<String> classnameWhitelist, final String className) {
+		if (classnameWhitelist == null) {
+			return;
+		}
+		classnameWhitelist.forEach(pattern -> {
+			if (!Wildcard.equalsOrMatch(className, pattern)) {
+				throw new JsonException("Class can't be loaded as it is not whitelisted: " + className);
+			}
+		});
+	}
+
 	/**
 	 * Converts type of all list elements to match the component type.
 	 */
diff --git a/jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java b/jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
index 7eb48a16c..8301bc0e5 100644
--- a/jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
+++ b/jodd-json/src/test/java/jodd/json/JSONDeserializerTest.java
@@ -62,6 +62,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
 
@@ -709,6 +710,37 @@ void testPoint() {
 		});
 	}
 
+	@Test
+	void testPointWithException() {
+		JsonParser.Defaults.classMetadataName = "__class";
+		JsonSerializer.Defaults.classMetadataName = "__class";
+
+		JsonParsers.forEachParser(jsonParser -> {
+			jsonParser.allowClass("notAllowed");
+			final String json = new JsonSerializer().serialize(new Point2D.Float(1.0f, 2.0f));
+			assertThrows(JsonException.class, () -> {
+				jsonParser.parse(json);
+			});
+			jsonParser.allowAllClasses();
+		});
+	}
+
+	@Test
+	void testPointWithoutExceptionWhitelisted() {
+		JsonParser.Defaults.classMetadataName = "__class";
+		JsonSerializer.Defaults.classMetadataName = "__class";
+
+		JsonParsers.forEachParser(jsonParser -> {
+			jsonParser.allowClass("*.Point?D*");
+			String json = new JsonSerializer().serialize(new Point2D.Float(1.0f, 2.0f));
+			Point2D.Float point = jsonParser.parse(json);
+			assertEquals(1.0f, point.x, DELTA);
+			assertEquals(2.0f, point.y, DELTA);
+			jsonParser.allowAllClasses();
+		});
+	}
+
+
 	@Test
 	void testUnixEpoch() {
 		JsonParsers.forEachParser(jsonParser -> {
