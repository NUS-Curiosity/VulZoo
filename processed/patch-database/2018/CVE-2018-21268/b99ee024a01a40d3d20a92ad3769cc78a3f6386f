diff --git a/package.json b/package.json
index dff2abe..6e4871d 100644
--- a/package.json
+++ b/package.json
@@ -10,10 +10,9 @@
   "engines": {
     "node": ">=4.0.0"
   },
-  "dependencies": {},
   "devDependencies": {
     "code": "2.x.x",
-    "lab": "9.x.x"
+    "lab": "10.x.x"
   },
   "bugs": {
     "url": "https://github.com/jaw187/node-traceroute/issues"
diff --git a/traceroute.js b/traceroute.js
index a46a088..85c58b1 100644
--- a/traceroute.js
+++ b/traceroute.js
@@ -18,23 +18,43 @@ module.exports = internals.Traceroute = {};
 
 internals.Traceroute.trace = function (host, callback) {
 
-
     Dns.lookup(host.toUpperCase(), (err) => {
 
         if (err && Net.isIP(host) === 0) {
             return callback(new Error('Invalid host'));
         }
 
-        const command = (internals.isWin ? 'tracert -d ' : 'traceroute -q 1 -n ') + host;
-        Child.exec(command, (err, stdout, stderr) => {
+        const command = (internals.isWin ? 'tracert' : 'traceroute');
+        const args = internals.isWin ? ['-d', host] : ['-q', 1, '-n', host];
+
+        const traceroute = Child.spawn(command, args);
+
+        const hops = [];
+        let counter = 0;
+        traceroute.stdout.on('data', (data) => {
 
-            if (err) {
-                return callback(err);
+            ++counter;
+            if ((!internals.isWin && counter < 2) || (internals.isWin && counter < 5)) {
+                return null;
             }
 
-            const results = internals.parseOutput(stdout);
-            return callback(null, results);
+            const result = data.toString().replace(/\n$/,'');
+            if (!result) {
+                return null;
+            }
+
+            const hop = internals.parseHop(result);
+            hops.push(hop);
         });
+
+        traceroute.on('close', (code) => {
+
+            if (callback) {
+                return callback(null, hops);
+            }
+        });
+
+        return traceroute;
     });
 };
 
@@ -96,29 +116,3 @@ internals.parseHopNix = function (line) {
 
     return hop;
 };
-
-internals.parseOutput = function (output) {
-
-    const lines = output.split('\n');
-    const hops = [];
-
-    lines.shift();
-    lines.pop();
-
-    if (internals.isWin) {
-        for (let i = 0; i < lines.length; ++i) {
-            if (/^\s+1/.test(lines[i])) {
-                break;
-            }
-        }
-        lines.splice(0,i);
-        lines.pop();
-        lines.pop();
-    }
-
-    for (let i = 0; i < lines.length; ++i) {
-        hops.push(internals.parseHop(lines[i]));
-    }
-
-    return hops;
-};
