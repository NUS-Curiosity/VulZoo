diff --git a/ChangeLog b/ChangeLog
index dd990837e6..fcadd4b6d6 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -21,6 +21,7 @@
             Make software I2C bitrate and waveform more accurate
             Move default I2C bitrate to 100kbit/sec
             Linux: don't create a espruino.flash file if we're not writing to flash
+            Add height check for Graphics.createArrayBuffer(...vertical_byte:true) (fix #1421)
 
      1v97 : nRF52: fix NRF.on('connect',...) issue
             STM32: Fix setDeviceClockCmd error for USB.setConsole()
diff --git a/libs/graphics/jswrap_graphics.c b/libs/graphics/jswrap_graphics.c
index 04505ce43c..2704c4105e 100644
--- a/libs/graphics/jswrap_graphics.c
+++ b/libs/graphics/jswrap_graphics.c
@@ -129,8 +129,14 @@ JsVar *jswrap_graphics_createArrayBuffer(int width, int height, int bpp, JsVar *
     if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, "vertical_byte", 0))) {
       if (gfx.data.bpp==1)
         gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE);
-      else
-        jsWarn("vertical_byte only works for 1bpp ArrayBuffers\n");
+      else {
+        jsExceptionHere(JSET_ERROR, "vertical_byte only works for 1bpp ArrayBuffers\n");
+        return 0;
+      }
+      if (gfx.data.height&7) {
+        jsExceptionHere(JSET_ERROR, "height must be a multiple of 8 when using vertical_byte\n");
+        return 0;
+      }
     }
     JsVar *colorv = jsvObjectGetChild(options, "color_order", 0);
     if (colorv) {
diff --git a/libs/graphics/lcd_arraybuffer.c b/libs/graphics/lcd_arraybuffer.c
index ec933b6ce8..3a29956597 100644
--- a/libs/graphics/lcd_arraybuffer.c
+++ b/libs/graphics/lcd_arraybuffer.c
@@ -161,6 +161,7 @@ void lcdSetPixels_ArrayBuffer_flat(JsGraphics *gfx, short x, short y, short pixe
       unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;
       unsigned int existing = (unsigned int)*ptr;
       unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;
+      assert(ptr>=gfx->backendData && ptr<((char*)gfx->backendData + graphicsGetMemoryRequired(gfx)));
       *ptr = (char)((existing&~(mask<<bitIdx)) | ((col&mask)<<bitIdx));
       if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE) {
         ptr++;
