diff --git a/src/Complex.Domino.Lib/Lib/EntityFactory.cs b/src/Complex.Domino.Lib/Lib/EntityFactory.cs
index bfcd15a..60c6a68 100644
--- a/src/Complex.Domino.Lib/Lib/EntityFactory.cs
+++ b/src/Complex.Domino.Lib/Lib/EntityFactory.cs
@@ -2,6 +2,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
+using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 using System.Data;
 using System.Data.SqlClient;
@@ -11,6 +12,8 @@ namespace Complex.Domino.Lib
     public abstract class EntityFactory<T> : ContextObject
         where T : IDatabaseTableObject, new()
     {
+        private static readonly Regex OrderByRegex = new Regex(@"[a-z]+\s*(asc|desc){0,1}", RegexOptions.IgnoreCase | RegexOptions.Compiled);
+
         private string name;
         private bool? readOnly;
         private bool? hidden;
@@ -70,6 +73,12 @@ public IEnumerable<T> Find()
 
         public IEnumerable<T> Find(int max, int from, string orderBy)
         {
+            // Prevent any injection attacks
+            if (!OrderByRegex.Match(orderBy).Success)
+            {
+                Error.AccessDenied();
+            }
+
             using (var cmd = Context.CreateCommand())
             {
                 string sql = @"
diff --git a/src/Complex.Domino.Web/PageBase.cs b/src/Complex.Domino.Web/PageBase.cs
index 9705cb5..a459447 100644
--- a/src/Complex.Domino.Web/PageBase.cs
+++ b/src/Complex.Domino.Web/PageBase.cs
@@ -97,7 +97,7 @@ protected override void OnLoad(EventArgs e)
 
             if (!bypassAuthentication)
             {
-                // If the user hold a valid cookie but the session is new
+                // If the user holds a valid cookie but the session is new
                 // we need to look up user details from the database
                 if (this.User.Identity.IsAuthenticated && Session[Constants.SessionUser] == null)
                 {
