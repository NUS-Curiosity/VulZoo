diff --git a/gravityforms-dps-pxpay.php b/gravityforms-dps-pxpay.php
index 790f82c..1de89a8 100644
--- a/gravityforms-dps-pxpay.php
+++ b/gravityforms-dps-pxpay.php
@@ -3,13 +3,13 @@
 Plugin Name: Gravity Forms DPS PxPay
 Plugin URI: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/
 Description: Integrates Gravity Forms with DPS PxPay payment gateway, enabling end users to purchase goods and services through Gravity Forms.
-Version: 1.4.2
+Version: 1.4.3
 Author: WebAware
 Author URI: http://webaware.com.au/
 */
 
 /*
-copyright (c) 2013-2014 WebAware Pty Ltd (email : support@webaware.com.au)
+copyright (c) 2013-2015 WebAware Pty Ltd (email : support@webaware.com.au)
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
@@ -34,7 +34,7 @@
 define('GFDPSPXPAY_PLUGIN_NAME', basename(dirname(__FILE__)) . '/' . basename(__FILE__));
 define('GFDPSPXPAY_PLUGIN_FILE', __FILE__);
 define('GFDPSPXPAY_PLUGIN_OPTIONS', 'gfdpspxpay_plugin');
-define('GFDPSPXPAY_PLUGIN_VERSION', '1.4.2');
+define('GFDPSPXPAY_PLUGIN_VERSION', '1.4.3');
 
 // custom post types
 define('GFDPSPXPAY_TYPE_FEED', 'gfdpspxpay_feed');
diff --git a/includes/class.GFDpsPxPayAdmin.php b/includes/class.GFDpsPxPayAdmin.php
index f206933..c28e75e 100644
--- a/includes/class.GFDpsPxPayAdmin.php
+++ b/includes/class.GFDpsPxPayAdmin.php
@@ -134,7 +134,7 @@ public function checkPrerequisites() {
 	public function addPluginActionLinks($links) {
 		// add settings link, but only if GravityForms plugin is active
 		if (self::isGfActive()) {
-			$settings_link = sprintf('<a href="%s">Settings</a>', admin_url('admin.php?page=gf_settings&subview=DPS+PxPay'));
+			$settings_link = sprintf('<a href="%s">Settings</a>', esc_url(admin_url('admin.php?page=gf_settings&subview=DPS+PxPay')));
 			array_unshift($links, $settings_link);
 		}
 
@@ -146,8 +146,8 @@ public function addPluginActionLinks($links) {
 	*/
 	public static function addPluginDetailsLinks($links, $file) {
 		if ($file == GFDPSPXPAY_PLUGIN_NAME) {
-			$links[] = '<a href="http://wordpress.org/support/plugin/gravity-forms-dps-pxpay">' . __('Get help') . '</a>';
-			$links[] = '<a href="http://wordpress.org/plugins/gravity-forms-dps-pxpay/">' . __('Rating') . '</a>';
+			$links[] = '<a href="https://wordpress.org/support/plugin/gravity-forms-dps-pxpay">' . __('Get help') . '</a>';
+			$links[] = '<a href="https://wordpress.org/plugins/gravity-forms-dps-pxpay/">' . __('Rating') . '</a>';
 			$links[] = '<a href="http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/">' . __('Donate') . '</a>';
 		}
 
@@ -217,6 +217,8 @@ public function feedsAdmin() {
 	* @return array
 	*/
 	public function settingsValidate($input) {
+		$output = array();
+
 		$output['userID']			= trim($input['userID']);
 		$output['userKey']			= trim($input['userKey']);
 		$output['testID']			= trim($input['testID']);
diff --git a/includes/class.GFDpsPxPayFeedAdmin.php b/includes/class.GFDpsPxPayFeedAdmin.php
index 88e9206..a219dcc 100644
--- a/includes/class.GFDpsPxPayFeedAdmin.php
+++ b/includes/class.GFDpsPxPayFeedAdmin.php
@@ -105,8 +105,8 @@ public function actionAddMetaBoxes($post) {
 	* @param array $metabox has metabox id, title, callback, and args elements.
 	*/
 	public function metaboxList($post, $metabox) {
-		$feedsURL = 'edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED;
-		echo "<a href=\"$feedsURL\">Click to return to list</a>.\n";
+		$feedsURL = admin_url('edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED);
+		printf('<a href="%s">Click to return to list</a>', esc_url($feedsURL));
 	}
 
 	/**
@@ -267,8 +267,8 @@ public function filterPostRowActions($actions, $post) {
 
 				$delete = array_pop($actions);		// pop the end link, so that we can "insert" ours before it
 
-				$actions['entries'] = sprintf('<a href="%s" title="%s">%s</a>',
-					add_query_arg(array('page' => 'gf_entries', 'id' => $feed->FormID), admin_url('admin.php')), 'View Entries', 'Entries');
+				$url = add_query_arg(array('page' => 'gf_entries', 'id' => $feed->FormID), admin_url('admin.php'));
+				$actions['entries'] = sprintf('<a href="%s" title="%s">%s</a>', esc_url($url), 'View Entries', 'Entries');
 
 				$actions['delete'] = $delete;		// replace the end link
 			}
diff --git a/includes/class.GFDpsPxPayPayment.php b/includes/class.GFDpsPxPayPayment.php
index 73f48c6..dd23a7d 100644
--- a/includes/class.GFDpsPxPayPayment.php
+++ b/includes/class.GFDpsPxPayPayment.php
@@ -236,6 +236,8 @@ class GFDpsPxPayPaymentResponse {
 	*/
 	public $paymentURL;
 
+	protected $errorMessage;
+
 	/**
 	* load DPS PxPay response data as XML string
 	* @param string $response DPS PxPay response as a string (hopefully of XML data)
@@ -256,8 +258,31 @@ public function loadResponseXML($response) {
 				throw new Exception($errmsg);
 			}
 
-			$this->isValid = ('1' === ((string) $xml['valid']));
-			$this->paymentURL = (string) $xml->URI;
+			if ('1' === ((string) $xml['valid'])) {
+				$this->isValid = true;
+				$this->paymentURL = (string) $xml->URI;
+
+				if (empty($this->paymentURL)) {
+					$this->isValid = false;
+
+					$this->errorMessage = (string) $xml->ResponseText;
+					if (empty($this->errorMessage)) {
+						$this->errorMessage = 'no hosted page URI given';
+					}
+				}
+			}
+			else {
+				$this->isValid = false;
+				$this->errorMessage = (string) $xml->ResponseText;
+				if (empty($this->errorMessage)) {
+					// API 1.0 passed error message in URI
+					$this->errorMessage = (string) $xml->URI;
+
+					if (empty($this->errorMessage)) {
+						$this->errorMessage = 'invalid request';
+					}
+				}
+			}
 
 			// restore old libxml settings
 			libxml_disable_entity_loader($oldDisableEntityLoader);
@@ -268,12 +293,12 @@ public function loadResponseXML($response) {
 			libxml_disable_entity_loader($oldDisableEntityLoader);
 			libxml_use_internal_errors($oldUseInternalErrors);
 
-			throw new GFDpsPxPayException('Error parsing DPS PxPay generate response: ' . $e->getMessage());
+			throw new GFDpsPxPayException('Error parsing DPS PxPay request: ' . $e->getMessage());
 		}
 
-		// if response is "invalid", throw error with message given in URI field
+		// if response is "invalid", throw error with message
 		if (!$this->isValid) {
-			throw new GFDpsPxPayException('Error from DPS PxPay generate response: ' . $this->paymentURL);
+			throw new GFDpsPxPayException('Error from DPS PxPay request: ' . $this->errorMessage);
 		}
 	}
 }
diff --git a/includes/class.GFDpsPxPayPlugin.php b/includes/class.GFDpsPxPayPlugin.php
index 6a23fd7..d19cfb9 100644
--- a/includes/class.GFDpsPxPayPlugin.php
+++ b/includes/class.GFDpsPxPayPlugin.php
@@ -405,11 +405,13 @@ public function gformEntryPostSave($entry, $form) {
 			else {
 				$entry['payment_status'] = 'Failed';
 				$this->errorMessage = 'Payment Express request invalid.';
+				self::log_debug($this->errorMessage);
 			}
 		}
 		catch (GFDpsPxPayException $e) {
 			$entry['payment_status'] = 'Failed';
 			$this->errorMessage = $e->getMessage();
+			self::log_debug($this->errorMessage);
 		}
 
 		// update the entry
@@ -432,15 +434,7 @@ public function gformEntryPostSave($entry, $form) {
 	* @return mixed
 	*/
 	public function gformConfirmation($confirmation, $form, $entry, $ajax) {
-		if ($this->paymentURL) {
-			// NB: GF handles redirect via JavaScript if headers already sent, or AJAX
-			$confirmation = array('redirect' => $this->paymentURL);
-			self::log_debug('Payment Express request valid, redirecting...');
-
-			$this->paymentURL = false;
-		}
-
-		elseif ($this->errorMessage) {
+		if ($this->errorMessage) {
 			$feed = $this->getFeed($form['id']);
 			if ($feed) {
 				// create a "confirmation message" in which to display the error
@@ -454,10 +448,18 @@ public function gformConfirmation($confirmation, $form, $entry, $ajax) {
 				include GFDPSPXPAY_PLUGIN_ROOT . 'views/error-payment-failure.php';
 				$confirmation = ob_get_clean();
 			}
+		}
 
-			$this->errorMessage = false;
+		elseif ($this->paymentURL) {
+			// NB: GF handles redirect via JavaScript if headers already sent, or AJAX
+			$confirmation = array('redirect' => $this->paymentURL);
+			self::log_debug('Payment Express request valid, redirecting to: ' . $this->paymentURL);
 		}
 
+		// reset transient members
+		$this->errorMessage = false;
+		$this->paymentURL = false;
+
 		return $confirmation;
 	}
 
@@ -498,6 +500,8 @@ public function processDpsReturn() {
 					$form = GFFormsModel::get_form_meta($lead['form_id']);
 					$feed = $this->getFeed($form['id']);
 
+					do_action('gfdpspxpay_process_return_parsed', $lead, $form, $feed);
+
 					// update lead entry, with success/fail details
 					if ($response->success) {
 						$lead['payment_status']		= 'Approved';
@@ -539,7 +543,7 @@ public function processDpsReturn() {
 					// on failure, redirect to failure page if set, otherwise fall through to redirect back to confirmation page
 					if ($lead['payment_status']	== 'Failed') {
 						if ($feed->UrlFail) {
-							wp_redirect($feed->UrlFail);
+							wp_redirect(esc_url_raw($feed->UrlFail));
 							exit;
 						}
 					}
@@ -547,7 +551,8 @@ public function processDpsReturn() {
 					// redirect to Gravity Forms page, passing form and lead IDs, encoded to deter simple attacks
 					$query = "form_id={$lead['form_id']}&lead_id={$lead['id']}";
 					$query .= "&hash=" . wp_hash($query);
-					wp_redirect(add_query_arg(array(self::PXPAY_RETURN => base64_encode($query)), $lead['source_url']));
+					$redirect_url = esc_url_raw(add_query_arg(array(self::PXPAY_RETURN => base64_encode($query)), $lead['source_url']));
+					wp_redirect($redirect_url);
 					exit;
 				}
 			}
@@ -584,6 +589,8 @@ public function processFormConfirmation() {
 				$form = GFFormsModel::get_form_meta($query['form_id']);
 				$lead = GFFormsModel::get_lead($query['lead_id']);
 
+				do_action('gfdpspxpay_process_confirmation_parsed', $lead, $form);
+
 				// get confirmation page
 				if (!class_exists('GFFormDisplay')) {
 					require_once(GFCommon::get_base_path() . '/form_display.php');
diff --git a/includes/class.GFDpsPxPayResult.php b/includes/class.GFDpsPxPayResult.php
index ba54f72..d1db5a9 100644
--- a/includes/class.GFDpsPxPayResult.php
+++ b/includes/class.GFDpsPxPayResult.php
@@ -311,7 +311,7 @@ public function loadResponseXML($response) {
 			libxml_disable_entity_loader($oldDisableEntityLoader);
 			libxml_use_internal_errors($oldUseInternalErrors);
 
-			throw new GFDpsPxPayException('Error parsing DPS PxPay result request: ' . $e->getMessage());
+			throw new GFDpsPxPayException('Error parsing DPS PxPay result: ' . $e->getMessage());
 		}
 
 		// if response is "invalid", throw error with message given in statusText field
diff --git a/readme.md b/readme.md
index a1e4fbf..15e0040 100644
--- a/readme.md
+++ b/readme.md
@@ -5,7 +5,7 @@ Integrate [Gravity Forms](http://webaware.com.au/get-gravity-forms) with the DPS
 * [Home](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)
 * [GitHub](https://github.com/webaware/gravity-forms-dps-pxpay/)
 * [Readme](https://github.com/webaware/gravity-forms-dps-pxpay/blob/master/readme.txt)
-* [Download](http://wordpress.org/plugins/gravity-forms-dps-pxpay/)
-* [Documentation](http://wordpress.org/plugins/gravity-forms-dps-pxpay/faq/)
-* [Support](http://wordpress.org/support/plugin/gravity-forms-dps-pxpay)
+* [Download](https://wordpress.org/plugins/gravity-forms-dps-pxpay/)
+* [Documentation](https://wordpress.org/plugins/gravity-forms-dps-pxpay/faq/)
+* [Support](https://wordpress.org/support/plugin/gravity-forms-dps-pxpay)
 * [Donate](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)
diff --git a/readme.txt b/readme.txt
index 6b5c1f5..a6881df 100644
--- a/readme.txt
+++ b/readme.txt
@@ -6,8 +6,8 @@ Author URI: http://webaware.com.au/
 Donate link: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/
 Tags: gravityforms, gravity forms, gravity, dps, payment express, pxpay, donation, donations, payment, payment gateway, ecommerce, credit cards, new zealand, australia
 Requires at least: 3.7.1
-Tested up to: 4.2
-Stable tag: 1.4.2
+Tested up to: 4.2.1
+Stable tag: 1.4.3
 License: GPLv2 or later
 License URI: http://www.gnu.org/licenses/gpl-2.0.html
 
@@ -25,7 +25,7 @@ Gravity Forms DPS PxPay adds a credit card payment gateway for [DPS PxPay](http:
 
 = Sponsorships =
 
-* creation of this plugin was generously sponsored by [IstanbulMMV](http://profiles.wordpress.org/IstanbulMMV/profile/)
+* creation of this plugin was generously sponsored by [IstanbulMMV](https://profiles.wordpress.org/IstanbulMMV/profile/)
 
 Thanks for sponsoring new features on Gravity Forms DPS PxPay!
 
@@ -137,6 +137,14 @@ Developers can run processes on these actions (e.g. load classes required to han
 
 == Changelog ==
 
+= 1.4.3, 2015-05-01 =
+
+* fixed: error reporting when initial request fails, e.g. with API key error
+* fixed: error handling logic with redirect as confirmation
+* added: some more precautionary XSS prevention steps
+* added: action `gfdpspxpay_process_return_parsed` with `$lead`, `$form`, `$feed`
+* added: action `gfdpspxpay_process_confirmation_parsed` with `$entry`, `$form`
+
 = 1.4.2, 2014-12-23 =
 * added: hooks `gfdpspxpay_process_return` and `gfdpspxpay_process_confirmation`
 * changed: merge tags use currency of transaction for amount display
diff --git a/views/metabox-save.php b/views/metabox-save.php
index 6baccfc..2655740 100644
--- a/views/metabox-save.php
+++ b/views/metabox-save.php
@@ -14,7 +14,7 @@
 	else
 		$delete_text = __('Move to Trash');
 	?>
-	<a class="submitdelete deletion" href="<?php echo get_delete_post_link($post->ID); ?>"><?php echo $delete_text; ?></a><?php
+	<a class="submitdelete deletion" href="<?php echo esc_url(get_delete_post_link($post->ID)); ?>"><?php echo $delete_text; ?></a><?php
 } ?>
 </div>
 
diff --git a/views/requires-extensions.php b/views/requires-extensions.php
index dec6180..67d24f0 100644
--- a/views/requires-extensions.php
+++ b/views/requires-extensions.php
@@ -2,8 +2,8 @@
 <div class="error">
 	<p>Gravity Forms DPS PxPay requires these missing PHP extensions. Please contact your website host to have these extensions installed.</p>
 	<ul style="list-style-type: disc; padding-left: 2em;">
-	<?php foreach ($missing as $ext): if (!extension_loaded($ext)): ?>
-		<li><?php echo $ext; ?></li>
-	<?php endif; endforeach; ?>
+	<?php foreach ($missing as $ext): ?>
+		<li><?php echo esc_html($ext); ?></li>
+	<?php endforeach; ?>
 	</ul>
 </div>
