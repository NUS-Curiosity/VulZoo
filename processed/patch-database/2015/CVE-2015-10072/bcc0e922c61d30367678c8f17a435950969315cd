diff --git a/Gemfile b/Gemfile
index 2700e07a..5e227ab3 100644
--- a/Gemfile
+++ b/Gemfile
@@ -245,6 +245,10 @@ group :development, :test do
 
   # For parsing URLs in tests.
   gem "addressable", "~> 2.3.6"
+
+  # For caching external web requests
+  gem "vcr", "~> 2.9.3", :require => false
+  gem "webmock", "~> 1.21.0", :require => false
 end
 
 group :development do
diff --git a/Gemfile.lock b/Gemfile.lock
index a684fe5d..2db2eb43 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -122,6 +122,8 @@ GEM
       simplecov (>= 0.7)
       term-ansicolor (= 1.2.2)
       thor (= 0.18.1)
+    crack (0.4.2)
+      safe_yaml (~> 1.0.0)
     css_parser (1.3.5)
       addressable
     csv_builder (2.1.1)
@@ -475,6 +477,7 @@ GEM
       execjs (>= 0.3.0)
       json (>= 1.8.0)
     uuidtools (2.1.5)
+    vcr (2.9.3)
     virtus (1.0.4)
       axiom-types (~> 0.1)
       coercible (~> 1.0)
@@ -482,6 +485,9 @@ GEM
       equalizer (~> 0.0, >= 0.0.9)
     warden (1.2.3)
       rack (>= 1.0)
+    webmock (1.21.0)
+      addressable (>= 2.3.6)
+      crack (>= 0.3.2)
     websocket-driver (0.4.0)
     websocket-driver (0.4.0-java)
     xpath (2.0.0)
@@ -588,3 +594,5 @@ DEPENDENCIES
   turbo-sprockets-rails3 (= 0.3.13)
   uglifier (~> 2.5.0)
   uuidtools (~> 2.1.4)
+  vcr (~> 2.9.3)
+  webmock (~> 1.21.0)
diff --git a/app/assets/javascripts/admin/controllers/admin_groups/form_controller.js b/app/assets/javascripts/admin/controllers/admin_groups/form_controller.js
index fd01146c..c2dd5821 100644
--- a/app/assets/javascripts/admin/controllers/admin_groups/form_controller.js
+++ b/app/assets/javascripts/admin/controllers/admin_groups/form_controller.js
@@ -11,7 +11,7 @@ Admin.AdminGroupsFormController = Ember.ObjectController.extend(Admin.Save, {
     submit: function() {
       this.save({
         transitionToRoute: 'admin_groups',
-        message: 'Successfully saved the admin group "' + this.get('model.name') + '"',
+        message: 'Successfully saved the admin group "' + _.escape(this.get('model.name')) + '"',
       });
     },
   },
diff --git a/app/assets/javascripts/admin/controllers/admins/form_controller.js b/app/assets/javascripts/admin/controllers/admins/form_controller.js
index b0893c45..967ce81b 100644
--- a/app/assets/javascripts/admin/controllers/admins/form_controller.js
+++ b/app/assets/javascripts/admin/controllers/admins/form_controller.js
@@ -11,7 +11,7 @@ Admin.AdminsFormController = Ember.ObjectController.extend(Admin.Save, {
     submit: function() {
       this.save({
         transitionToRoute: 'admins',
-        message: 'Successfully saved the admin "' + this.get('model.username') + '"',
+        message: 'Successfully saved the admin "' + _.escape(this.get('model.username')) + '"',
       });
     },
   },
diff --git a/app/assets/javascripts/admin/controllers/api_scopes/form_controller.js b/app/assets/javascripts/admin/controllers/api_scopes/form_controller.js
index cdb8bcc8..a639adaf 100644
--- a/app/assets/javascripts/admin/controllers/api_scopes/form_controller.js
+++ b/app/assets/javascripts/admin/controllers/api_scopes/form_controller.js
@@ -3,7 +3,7 @@ Admin.ApiScopesFormController = Ember.ObjectController.extend(Admin.Save, {
     submit: function() {
       this.save({
         transitionToRoute: 'api_scopes',
-        message: 'Successfully saved the API scope "' + this.get('model.name') + '"',
+        message: 'Successfully saved the API scope "' + _.escape(this.get('model.name')) + '"',
       });
     },
   },
diff --git a/app/assets/javascripts/admin/controllers/api_users/form_controller.js b/app/assets/javascripts/admin/controllers/api_users/form_controller.js
index ac4cd524..a87ef3e8 100644
--- a/app/assets/javascripts/admin/controllers/api_users/form_controller.js
+++ b/app/assets/javascripts/admin/controllers/api_users/form_controller.js
@@ -20,9 +20,9 @@ Admin.ApiUsersFormController = Ember.ObjectController.extend(Admin.Save, {
       this.save({
         transitionToRoute: 'api_users',
         message: function(model) {
-          var message = 'Successfully saved the user "' + model.get('email') + '"';
+          var message = 'Successfully saved the user "' + _.escape(model.get('email')) + '"';
           if(model.get('apiKey')) {
-            message += '<br>API Key: <code>' + model.get('apiKey') + '</code>';
+            message += '<br>API Key: <code>' + _.escape(model.get('apiKey')) + '</code>';
           }
 
           return message;
diff --git a/app/assets/javascripts/admin/controllers/apis_form_controller.js b/app/assets/javascripts/admin/controllers/apis_form_controller.js
index 996845e4..ae646dd9 100644
--- a/app/assets/javascripts/admin/controllers/apis_form_controller.js
+++ b/app/assets/javascripts/admin/controllers/apis_form_controller.js
@@ -21,7 +21,7 @@ Admin.ApisFormController = Ember.ObjectController.extend(Admin.Save, {
     submit: function() {
       this.save({
         transitionToRoute: 'apis',
-        message: 'Successfully saved the "' + this.get('model.name') + '" API backend<br><strong>Note:</strong> Your changes are not yet live. <a href="/admin/#/config/publish">Publish Changes</a> to send your updates live.',
+        message: 'Successfully saved the "' + _.escape(this.get('model.name')) + '" API backend<br><strong>Note:</strong> Your changes are not yet live. <a href="/admin/#/config/publish">Publish Changes</a> to send your updates live.',
       });
     },
 
diff --git a/app/assets/javascripts/admin/controllers/website_backends/form_controller.js b/app/assets/javascripts/admin/controllers/website_backends/form_controller.js
index 7c639bf2..bf758a44 100644
--- a/app/assets/javascripts/admin/controllers/website_backends/form_controller.js
+++ b/app/assets/javascripts/admin/controllers/website_backends/form_controller.js
@@ -22,7 +22,7 @@ Admin.WebsiteBackendsFormController = Ember.ObjectController.extend(Admin.Save,
     submit: function() {
       this.save({
         transitionToRoute: 'website_backends',
-        message: 'Successfully saved the "' + this.get('model.frontendHost') + '" website backend<br><strong>Note:</strong> Your changes are not yet live. <a href="/admin/#/config/publish">Publish Changes</a> to send your updates live.',
+        message: 'Successfully saved the "' + _.escape(this.get('model.frontendHost')) + '" website backend<br><strong>Note:</strong> Your changes are not yet live. <a href="/admin/#/config/publish">Publish Changes</a> to send your updates live.',
       });
     },
 
diff --git a/spec/cassettes/elasticsearch_templates.yml b/spec/cassettes/elasticsearch_templates.yml
new file mode 100644
index 00000000..d56fed33
--- /dev/null
+++ b/spec/cassettes/elasticsearch_templates.yml
@@ -0,0 +1,221 @@
+---
+http_interactions:
+- request:
+    method: get
+    uri: https://raw.githubusercontent.com/NREL/api-umbrella-router/master/config/elasticsearch_templates.json
+    body:
+      encoding: US-ASCII
+      string: ''
+    headers:
+      Accept:
+      - "*/*; q=0.5, application/xml"
+      Accept-Encoding:
+      - gzip, deflate
+      User-Agent:
+      - Ruby
+  response:
+    status:
+      code: 200
+      message: OK
+    headers:
+      Date:
+      - Fri, 10 Apr 2015 17:17:38 GMT
+      Server:
+      - Apache
+      Access-Control-Allow-Origin:
+      - https://render.githubusercontent.com
+      Content-Security-Policy:
+      - default-src 'none'
+      X-Xss-Protection:
+      - 1; mode=block
+      X-Frame-Options:
+      - deny
+      X-Content-Type-Options:
+      - nosniff
+      Strict-Transport-Security:
+      - max-age=31536000
+      Etag:
+      - '"d426630bd78408d97d4ae86d0d7a7c224849d203"'
+      Content-Type:
+      - text/plain; charset=utf-8
+      Cache-Control:
+      - max-age=300
+      Content-Length:
+      - '3937'
+      Accept-Ranges:
+      - bytes
+      Via:
+      - 1.1 varnish
+      X-Served-By:
+      - cache-mia1323-MIA
+      X-Cache:
+      - MISS
+      X-Cache-Hits:
+      - '0'
+      Vary:
+      - Authorization,Accept-Encoding
+      Expires:
+      - Fri, 10 Apr 2015 17:22:38 GMT
+      Source-Age:
+      - '0'
+    body:
+      encoding: ASCII-8BIT
+      string: |
+        [
+          {
+            "id": "api-umbrella-template",
+            "template": {
+              "template": "api-umbrella",
+              "mappings": {
+                "city": {
+                  "_all": {
+                    "enabled": false
+                  },
+                  "_timestamp": {
+                    "enabled": true,
+                    "path": "updated_at"
+                  },
+                  "properties": {
+                    "country": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "region": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "city": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "location": {
+                      "type": "geo_point",
+                      "lat_lon": true
+                    }
+                  }
+                }
+              }
+            }
+          },
+          {
+            "id": "api-umbrella-log-v1-template",
+            "template": {
+              "template": "api-umbrella-logs-v1-*",
+              "settings": {
+                "index": {
+                  "number_of_shards": 3
+                },
+                "analysis": {
+                  "analyzer": {
+                    "keyword_lowercase": {
+                      "type": "custom",
+                      "tokenizer": "keyword",
+                      "filter": ["lowercase"]
+                    },
+                    "path_hierarchy_lowercase": {
+                      "type": "custom",
+                      "tokenizer": "path_hierarchy",
+                      "filter": ["lowercase"]
+                    }
+                  }
+                }
+              },
+              "mappings": {
+                "log": {
+                  "_all": {
+                    "enabled": false
+                  },
+                  "_timestamp": {
+                    "enabled": true,
+                    "path": "request_at"
+                  },
+                  "date_detection": false,
+                  "numeric_detection": false,
+                  "dynamic_templates": [
+                    {
+                      "string_template": {
+                        "match": "*",
+                        "match_mapping_type": "string",
+                        "mapping": {
+                          "type": "string",
+                          "index": "analyzed",
+                          "analyzer": "keyword_lowercase"
+                        }
+                      }
+                    }
+                  ],
+                  "properties": {
+                    "api_key": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "user_id": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "request_at": {
+                      "type": "date"
+                    },
+                    "request_ip": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "request_ip_country": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "request_ip_region": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "request_ip_city": {
+                      "type": "string",
+                      "index": "not_analyzed"
+                    },
+                    "request_path_hierarchy": {
+                      "type": "string",
+                      "analyzer": "path_hierarchy_lowercase"
+                    },
+                    "request_size": {
+                      "type": "integer"
+                    },
+                    "response_status": {
+                      "type": "short"
+                    },
+                    "response_age": {
+                      "type": "integer"
+                    },
+                    "response_content_length": {
+                      "type": "integer"
+                    },
+                    "response_size": {
+                      "type": "integer"
+                    },
+                    "response_time": {
+                      "type": "integer"
+                    },
+                    "backend_response_time": {
+                      "type": "integer"
+                    },
+                    "proxy_overhead": {
+                      "type": "integer"
+                    },
+                    "internal_response_time": {
+                      "type": "float"
+                    },
+                    "internal_gatekeeper_time": {
+                      "type": "float"
+                    },
+                    "request_ip_location": {
+                      "type": "geo_point",
+                      "lat_lon": true
+                    }
+                  }
+                }
+              }
+            }
+          }
+        ]
+    http_version: 
+  recorded_at: Fri, 10 Apr 2015 07:01:09 GMT
+recorded_with: VCR 2.9.3
diff --git a/spec/controllers/admin/stats_controller_spec.rb b/spec/controllers/admin/stats_controller_spec.rb
index eecba024..2cd86356 100644
--- a/spec/controllers/admin/stats_controller_spec.rb
+++ b/spec/controllers/admin/stats_controller_spec.rb
@@ -4,10 +4,11 @@
   login_admin
 
   before(:each) do
-    begin
-      LogItem.gateway.client.indices.delete :index => LogItem.index_name
-    rescue Elasticsearch::Transport::Transport::Errors::NotFound # rubocop:disable Lint/HandleExceptions
-    end
+    LogItem.gateway.client.delete_by_query :index => LogItem.index_name, :body => {
+      :query => {
+        :match_all => {},
+      },
+    }
   end
 
   describe "GET logs" do
diff --git a/spec/factories/api_users.rb b/spec/factories/api_users.rb
index 48068fb7..07974c58 100644
--- a/spec/factories/api_users.rb
+++ b/spec/factories/api_users.rb
@@ -13,6 +13,7 @@
     end
 
     factory :xss_api_user do
+      email 'a@"><script class="xss-test">alert("Hello first_name");</script>.com'
       first_name '"><script class="xss-test">alert("Hello first_name");</script>'
       last_name '"><script class="xss-test">alert("Hello last_name");</script>'
       use_description '"><script class="xss-test">alert("Hello use_description");</script>'
diff --git a/spec/factories/log_items.rb b/spec/factories/log_items.rb
index 04c69589..c12e5151 100644
--- a/spec/factories/log_items.rb
+++ b/spec/factories/log_items.rb
@@ -3,13 +3,14 @@
 class LogItem
   include Elasticsearch::Persistence::Model
 
-  index_name "api-umbrella-logs-2015-01"
+  index_name "api-umbrella-logs-write-2015-01"
+  document_type "log"
 
   attribute :api_key, String
-  attribute :backend_response_time, Float
+  attribute :backend_response_time, Integer
   attribute :internal_gatekeeper_time, Float
   attribute :internal_response_time, Float
-  attribute :proxy_overhead, Float
+  attribute :proxy_overhead, Integer
   attribute :request_accept_encoding, String
   attribute :request_at, Time
   attribute :request_hierarchy, Array
@@ -33,7 +34,7 @@ class LogItem
   attribute :response_server, String
   attribute :response_size, Integer
   attribute :response_status, Integer
-  attribute :response_time, Float
+  attribute :response_time, Integer
   attribute :user_email, String
   attribute :user_id, String
   attribute :user_registration_source, String
diff --git a/spec/features/admin/api_users_spec.rb b/spec/features/admin/api_users_spec.rb
index 8867a3e7..11e7ca3f 100644
--- a/spec/features/admin/api_users_spec.rb
+++ b/spec/features/admin/api_users_spec.rb
@@ -13,22 +13,32 @@
       visit "/admin/#/api_users"
 
       page.should have_content(@user.email)
-      page.should_not have_selector(".xss-test", :visible => :all)
       page.should have_content(@user.first_name)
       page.should have_content(@user.last_name)
       page.should have_content(@user.use_description)
       page.should have_content(@user.registration_source)
+      page.should_not have_selector(".xss-test", :visible => :all)
     end
 
     it "escapes html entities in the form" do
       visit "/admin/#/api_users/#{@user.id}/edit"
 
       find_field("E-mail").value.should eql(@user.email)
-      page.should_not have_selector(".xss-test", :visible => :all)
       find_field("First Name").value.should eql(@user.first_name)
       find_field("Last Name").value.should eql(@user.last_name)
       find_field("Purpose").value.should eql(@user.use_description)
       page.should have_content(@user.registration_source)
+      page.should_not have_selector(".xss-test", :visible => :all)
+    end
+
+    it "escapes html entities in flash confirmation message" do
+      visit "/admin/#/api_users/#{@user.id}/edit"
+
+      fill_in "Last Name", :with => "Doe"
+      click_button("Save")
+
+      page.should have_content("Successfully saved the user \"#{@user.email}\"")
+      page.should_not have_selector(".xss-test", :visible => :all)
     end
   end
 
diff --git a/spec/features/admin/stats_logs_spec.rb b/spec/features/admin/stats_logs_spec.rb
index 0dfe0f54..6c63f12f 100644
--- a/spec/features/admin/stats_logs_spec.rb
+++ b/spec/features/admin/stats_logs_spec.rb
@@ -1,14 +1,15 @@
 require "spec_helper"
 require "addressable/uri"
 
-describe "apis", :js => true do
+describe "analytics filter logs", :js => true do
   login_admin
 
   before(:each) do
-    begin
-      LogItem.gateway.client.indices.delete :index => LogItem.index_name
-    rescue Elasticsearch::Transport::Transport::Errors::NotFound # rubocop:disable Lint/HandleExceptions
-    end
+    LogItem.gateway.client.delete_by_query :index => LogItem.index_name, :body => {
+      :query => {
+        :match_all => {},
+      },
+    }
   end
 
   describe "xss" do
@@ -19,7 +20,6 @@
       visit "/admin/#/stats/logs/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day"
 
       page.should have_content(log.request_method)
-      page.should_not have_selector(".xss-test", :visible => :all)
       page.should have_content(log.request_accept_encoding)
       page.should have_content(log.request_ip_city)
       page.should have_content(log.request_ip_country)
@@ -27,6 +27,7 @@
       page.should have_content(log.request_user_agent)
       page.should have_content(log.response_content_type)
       page.should have_content(log.user_email)
+      page.should_not have_selector(".xss-test", :visible => :all)
     end
   end
 
diff --git a/spec/features/admin/stats_users_spec.rb b/spec/features/admin/stats_users_spec.rb
new file mode 100644
index 00000000..95ef44a8
--- /dev/null
+++ b/spec/features/admin/stats_users_spec.rb
@@ -0,0 +1,29 @@
+require "spec_helper"
+
+describe "analytics by users", :js => true do
+  login_admin
+
+  before(:each) do
+    LogItem.gateway.client.delete_by_query :index => LogItem.index_name, :body => {
+      :query => {
+        :match_all => {},
+      },
+    }
+  end
+
+  describe "xss" do
+    it "escapes html entities in the table" do
+      user = FactoryGirl.create(:xss_api_user)
+      FactoryGirl.create(:xss_log_item, :request_at => Time.parse("2015-01-16T06:06:28.816Z"), :api_key => user.api_key, :user_id => user.id, :user_email => user.email, :user_registration_source => user.registration_source)
+      LogItem.gateway.refresh_index!
+
+      visit "/admin/#/stats/users/tz=America%2FDenver&search=&start_at=2015-01-12&end_at=2015-01-18&interval=day"
+
+      page.should have_content(user.email)
+      page.should have_content(user.first_name)
+      page.should have_content(user.last_name)
+      page.should have_content(user.use_description)
+      page.should_not have_selector(".xss-test", :visible => :all)
+    end
+  end
+end
diff --git a/spec/support/elasticsearch.rb b/spec/support/elasticsearch.rb
new file mode 100644
index 00000000..5f971b75
--- /dev/null
+++ b/spec/support/elasticsearch.rb
@@ -0,0 +1,32 @@
+require "support/vcr"
+
+client = Elasticsearch::Client.new
+
+# Fetch the elasticsearch template file from the router project. Cache it with
+# VCR, but periodically re-record it to make sure we stay up-to-date.
+VCR.use_cassette("elasticsearch_templates", :re_record_interval => 1.day) do
+  templates = MultiJson.load(RestClient.get("https://raw.githubusercontent.com/NREL/api-umbrella-router/master/config/elasticsearch_templates.json"))
+  templates.each do |template|
+    client.indices.put_template({
+      :name => template["id"],
+      :body => template["template"],
+    })
+  end
+end
+
+# For simplicity sake, we're assuming our tests only deal with the 2015-01
+# index currently. First delete any existing indexes.
+%w(api-umbrella-logs-v1-2015-01 api-umbrella-logs-2015-01 api-umbrella-logs-write-2015-01).each do |index_name|
+  begin
+    client.indices.delete :index => index_name
+  rescue Elasticsearch::Transport::Transport::Errors::NotFound # rubocop:disable Lint/HandleExceptions
+  end
+end
+
+# Create the index with proper aliases setup.
+client.indices.create(:index => "api-umbrella-logs-v1-2015-01", :body => {
+  :aliases => {
+    "api-umbrella-logs-2015-01" => {},
+    "api-umbrella-logs-write-2015-01" => {},
+  },
+})
diff --git a/spec/support/vcr.rb b/spec/support/vcr.rb
new file mode 100644
index 00000000..3324ac9e
--- /dev/null
+++ b/spec/support/vcr.rb
@@ -0,0 +1,20 @@
+require "vcr"
+
+VCR.configure do |c|
+  c.cassette_library_dir = "#{::Rails.root}/spec/cassettes"
+  c.hook_into :webmock
+  c.default_cassette_options = {
+    :record => :new_episodes,
+
+    # Store gzip responses as plaintext in the YAML.
+    :decode_compressed_response => true,
+
+    # Allow the same response to be used multiple times in a single test.
+    :allow_playback_repeats => true,
+  }
+
+  # Allow localhost connections for ElasticSearch.
+  c.ignore_localhost = true
+
+  c.configure_rspec_metadata!
+end
