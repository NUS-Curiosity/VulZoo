diff --git a/docs/source/changelog.md b/docs/source/changelog.md
index cd7a6de6..b9a8ad65 100644
--- a/docs/source/changelog.md
+++ b/docs/source/changelog.md
@@ -10,6 +10,10 @@ command line for details.
 
 ## 0.12
 
+### [0.12.2] - 2020-11-30
+
+Security fix for GHSA-384w-5v3f-q499: Deprecated `c.Authenticator.whitelist` configuration was ignored instead of mapped to newer `c.Authenticator.allowed_users` when used with JupyterHub 1.2 and OAuthenticator 0.12.0-0.12.1.
+
 ### [0.12.1] - 2020-11-20
 
 #### Bugs fixed
diff --git a/oauthenticator/bitbucket.py b/oauthenticator/bitbucket.py
index a3d20600..709d0c3f 100644
--- a/oauthenticator/bitbucket.py
+++ b/oauthenticator/bitbucket.py
@@ -28,14 +28,11 @@ def _api_headers(access_token):
 
 class BitbucketOAuthenticator(OAuthenticator):
 
-    _deprecated_aliases = {
+    _deprecated_oauth_aliases = {
         "team_whitelist": ("allowed_teams", "0.12.0"),
+        **OAuthenticator._deprecated_oauth_aliases,
     }
 
-    @observe(*list(_deprecated_aliases))
-    def _deprecated_trait(self, change):
-        super()._deprecated_trait(change)
-
     login_service = "Bitbucket"
     client_id_env = 'BITBUCKET_CLIENT_ID'
     client_secret_env = 'BITBUCKET_CLIENT_SECRET'
diff --git a/oauthenticator/cilogon.py b/oauthenticator/cilogon.py
index 09c680d7..127e9ecf 100644
--- a/oauthenticator/cilogon.py
+++ b/oauthenticator/cilogon.py
@@ -44,14 +44,11 @@ def authorize_redirect(self, *args, **kwargs):
 
 
 class CILogonOAuthenticator(OAuthenticator):
-    _deprecated_aliases = {
+    _deprecated_oauth_aliases = {
         "idp_whitelist": ("allowed_idps", "0.12.0"),
+        **OAuthenticator._deprecated_oauth_aliases,
     }
 
-    @observe(*list(_deprecated_aliases))
-    def _deprecated_trait(self, change):
-        super()._deprecated_trait(change)
-
     login_service = "CILogon"
 
     client_id_env = 'CILOGON_CLIENT_ID'
diff --git a/oauthenticator/github.py b/oauthenticator/github.py
index 2697d9d3..8708329a 100644
--- a/oauthenticator/github.py
+++ b/oauthenticator/github.py
@@ -37,14 +37,11 @@ class GitHubOAuthenticator(OAuthenticator):
     # set scopes via config, e.g.
     # c.GitHubOAuthenticator.scope = ['read:org']
 
-    _deprecated_aliases = {
+    _deprecated_oauth_aliases = {
         "github_organization_whitelist": ("allowed_organizations", "0.12.0"),
+        **OAuthenticator._deprecated_oauth_aliases,
     }
 
-    @observe(*list(_deprecated_aliases))
-    def _deprecated_trait(self, change):
-        super()._deprecated_trait(change)
-
     login_service = "GitHub"
 
     github_url = Unicode("https://github.com", config=True)
diff --git a/oauthenticator/gitlab.py b/oauthenticator/gitlab.py
index 50ce2262..cf8fd44e 100644
--- a/oauthenticator/gitlab.py
+++ b/oauthenticator/gitlab.py
@@ -37,15 +37,12 @@ class GitLabOAuthenticator(OAuthenticator):
     # set scopes via config, e.g.
     # c.GitLabOAuthenticator.scope = ['read_user']
 
-    _deprecated_aliases = {
+    _deprecated_oauth_aliases = {
         "gitlab_group_whitelist": ("allowed_gitlab_groups", "0.12.0"),
-        "gitlab_project_id_whitelist": ("allowed_project_ids", "0.12.0")
+        "gitlab_project_id_whitelist": ("allowed_project_ids", "0.12.0"),
+        **OAuthenticator._deprecated_oauth_aliases,
     }
 
-    @observe(*list(_deprecated_aliases))
-    def _deprecated_trait(self, change):
-        super()._deprecated_trait(change)
-
     login_service = "GitLab"
 
     client_id_env = 'GITLAB_CLIENT_ID'
diff --git a/oauthenticator/google.py b/oauthenticator/google.py
index 4e90800d..7e3f77e5 100644
--- a/oauthenticator/google.py
+++ b/oauthenticator/google.py
@@ -30,14 +30,11 @@ def check_user_in_groups(member_groups, allowed_groups):
 
 
 class GoogleOAuthenticator(OAuthenticator, GoogleOAuth2Mixin):
-    _deprecated_aliases = {
+    _deprecated_oauth_aliases = {
         "google_group_whitelist": ("allowed_google_groups", "0.12.0"),
+        **OAuthenticator._deprecated_oauth_aliases,
     }
 
-    @observe(*list(_deprecated_aliases))
-    def _deprecated_trait(self, change):
-        super()._deprecated_trait(change)
-
     google_api_url = Unicode("https://www.googleapis.com", config=True)
 
     @default('google_api_url')
diff --git a/oauthenticator/oauth2.py b/oauthenticator/oauth2.py
index 8a8841fc..40b2087c 100644
--- a/oauthenticator/oauth2.py
+++ b/oauthenticator/oauth2.py
@@ -347,11 +347,12 @@ def get_handlers(self, app):
     async def authenticate(self, handler, data=None):
         raise NotImplementedError()
 
+    _deprecated_oauth_aliases = {}
 
-    def _deprecated_trait(self, change):
+    def _deprecated_oauth_trait(self, change):
         """observer for deprecated traits"""
         old_attr = change.name
-        new_attr, version = self._deprecated_aliases.get(old_attr)
+        new_attr, version = self._deprecated_oauth_aliases.get(old_attr)
         new_value = getattr(self, new_attr)
         if new_value != change.new:
             # only warn if different
@@ -366,3 +367,11 @@ def _deprecated_trait(self, change):
                 )
             )
             setattr(self, new_attr, change.new)
+
+    def __init__(self, **kwargs):
+        # observe deprecated config names in oauthenticator
+        if self._deprecated_oauth_aliases:
+            self.observe(
+                self._deprecated_oauth_trait, names=list(self._deprecated_oauth_aliases)
+            )
+        super().__init__(**kwargs)
diff --git a/oauthenticator/tests/test_bitbucket.py b/oauthenticator/tests/test_bitbucket.py
index fa9eebad..ea5e7a64 100644
--- a/oauthenticator/tests/test_bitbucket.py
+++ b/oauthenticator/tests/test_bitbucket.py
@@ -86,16 +86,16 @@ def list_teams(request):
 def test_deprecated_config(caplog):
     cfg = Config()
     cfg.BitbucketOAuthenticator.team_whitelist = ['red']
+    cfg.BitbucketOAuthenticator.whitelist = {"blue"}
 
     log = logging.getLogger("testlog")
     authenticator = BitbucketOAuthenticator(config=cfg, log=log)
-    assert caplog.record_tuples == [
-        (
-            log.name,
-            logging.WARNING,
-            'BitbucketOAuthenticator.team_whitelist is deprecated in BitbucketOAuthenticator 0.12.0, use '
-            'BitbucketOAuthenticator.allowed_teams instead',
-        )
-    ]
+    assert (
+        log.name,
+        logging.WARNING,
+        'BitbucketOAuthenticator.team_whitelist is deprecated in BitbucketOAuthenticator 0.12.0, use '
+        'BitbucketOAuthenticator.allowed_teams instead',
+    ) in caplog.record_tuples
 
     assert authenticator.allowed_teams == {"red"}
+    assert authenticator.allowed_users == {"blue"}
diff --git a/oauthenticator/tests/test_github.py b/oauthenticator/tests/test_github.py
index 38d854b6..a88946c3 100644
--- a/oauthenticator/tests/test_github.py
+++ b/oauthenticator/tests/test_github.py
@@ -156,16 +156,16 @@ def team_membership(request):
 def test_deprecated_config(caplog):
     cfg = Config()
     cfg.GitHubOAuthenticator.github_organization_whitelist = ["jupy"]
+    cfg.Authenticator.whitelist = {"user1"}
 
     log = logging.getLogger("testlog")
     authenticator = GitHubOAuthenticator(config=cfg, log=log)
-    assert caplog.record_tuples == [
-        (
-            log.name,
-            logging.WARNING,
-            'GitHubOAuthenticator.github_organization_whitelist is deprecated in GitHubOAuthenticator 0.12.0, use '
-            'GitHubOAuthenticator.allowed_organizations instead',
-        )
-    ]
+    assert (
+        log.name,
+        logging.WARNING,
+        'GitHubOAuthenticator.github_organization_whitelist is deprecated in GitHubOAuthenticator 0.12.0, use '
+        'GitHubOAuthenticator.allowed_organizations instead',
+    ) in caplog.record_tuples
 
     assert authenticator.allowed_organizations == {"jupy"}
+    assert authenticator.allowed_users == {"user1"}
diff --git a/oauthenticator/tests/test_gitlab.py b/oauthenticator/tests/test_gitlab.py
index fe2d3b1a..7dab5759 100644
--- a/oauthenticator/tests/test_gitlab.py
+++ b/oauthenticator/tests/test_gitlab.py
@@ -260,16 +260,16 @@ def is_member(request):
 def test_deprecated_config(caplog):
     cfg = Config()
     cfg.GitLabOAuthenticator.gitlab_group_whitelist = {'red'}
+    cfg.GitLabOAuthenticator.whitelist = {"blue"}
 
     log = logging.getLogger("testlog")
     authenticator = GitLabOAuthenticator(config=cfg, log=log)
-    assert caplog.record_tuples == [
-        (
-            log.name,
-            logging.WARNING,
-            'GitLabOAuthenticator.gitlab_group_whitelist is deprecated in GitLabOAuthenticator 0.12.0, use '
-            'GitLabOAuthenticator.allowed_gitlab_groups instead'
-        )
-    ]
+    assert (
+        log.name,
+        logging.WARNING,
+        'GitLabOAuthenticator.gitlab_group_whitelist is deprecated in GitLabOAuthenticator 0.12.0, use '
+        'GitLabOAuthenticator.allowed_gitlab_groups instead',
+    ) in caplog.record_tuples
 
     assert authenticator.allowed_gitlab_groups == {'red'}
+    assert authenticator.allowed_users == {"blue"}
diff --git a/oauthenticator/tests/test_google.py b/oauthenticator/tests/test_google.py
index 3e6d58ff..ed76406d 100644
--- a/oauthenticator/tests/test_google.py
+++ b/oauthenticator/tests/test_google.py
@@ -114,16 +114,16 @@ async def test_allowed_google_groups(google_client):
 def test_deprecated_config(caplog):
     cfg = Config()
     cfg.GoogleOAuthenticator.google_group_whitelist = {'email.com': ['group']}
+    cfg.Authenticator.whitelist = {"user1"}
 
     log = logging.getLogger("testlog")
     authenticator = GoogleOAuthenticator(config=cfg, log=log)
-    assert caplog.record_tuples == [
-        (
-            log.name,
-            logging.WARNING,
-            'GoogleOAuthenticator.google_group_whitelist is deprecated in GoogleOAuthenticator 0.12.0, use '
-            'GoogleOAuthenticator.allowed_google_groups instead',
-        )
-    ]
+    assert (
+        log.name,
+        logging.WARNING,
+        'GoogleOAuthenticator.google_group_whitelist is deprecated in GoogleOAuthenticator 0.12.0, use '
+        'GoogleOAuthenticator.allowed_google_groups instead',
+    ) in caplog.record_tuples
 
     assert authenticator.allowed_google_groups == {'email.com': ['group']}
+    assert authenticator.allowed_users == {"user1"}
