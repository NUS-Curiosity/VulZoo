diff --git a/CHANGELOG.md b/CHANGELOG.md
index 38e9021..ee2af5f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,6 +9,11 @@ Versioning].
 
 - _No changes yet_
 
+## [1.0.1] - 2020-10-24
+
+- Update Action icon.
+- Fix shell injection vulnerability.
+
 ## [1.0.0] - 2020-10-22
 
 - Run the Action to get the git tag annotation of the current tag.
diff --git a/action.yml b/action.yml
index bad74ed..0fe296c 100644
--- a/action.yml
+++ b/action.yml
@@ -16,5 +16,5 @@ runs:
   main: 'lib/index.js'
 
 branding:
-  icon: 'git-commit'
+  icon: 'tag'
   color: 'gray-dark'
diff --git a/src/main.js b/src/main.js
index 1beaaed..18522b1 100644
--- a/src/main.js
+++ b/src/main.js
@@ -1,6 +1,11 @@
 const core = require('@actions/core');
 const { exec } = require('child_process');
 
+// Based on https://stackoverflow.com/a/22827128
+function escapeShellArg(arg) {
+  return arg.replace(/'/g, `'\\''`);
+}
+
 function main() {
   try {
     let tag = process.env.GITHUB_REF;
@@ -8,13 +13,16 @@ function main() {
       tag = `refs/tags/${core.getInput('tag')}`;
     }
 
-    exec(`git for-each-ref --format='%(contents)' ${tag}`, (err, stdout) => {
-      if (err) {
-        core.setFailed(err);
-      } else {
-        core.setOutput('git-tag-annotation', stdout);
-      }
-    });
+    exec(
+      `git for-each-ref --format='%(contents)' '${escapeShellArg(tag)}'`,
+      (err, stdout) => {
+        if (err) {
+          core.setFailed(err);
+        } else {
+          core.setOutput('git-tag-annotation', stdout);
+        }
+      },
+    );
   } catch (error) {
     core.setFailed(error.message);
   }
diff --git a/test/main.test.js b/test/main.test.js
index f827455..47c3538 100644
--- a/test/main.test.js
+++ b/test/main.test.js
@@ -23,7 +23,7 @@ it.each([
   main();
 
   expect(child_process.exec).toHaveBeenCalledWith(
-    `git for-each-ref --format='%(contents)' refs/tags/${tag}`,
+    `git for-each-ref --format='%(contents)' 'refs/tags/${tag}'`,
     expect.any(Function),
   );
 });
@@ -46,7 +46,7 @@ it.each([
 
   expect(core.getInput).toHaveBeenCalledTimes(2);
   expect(child_process.exec).toHaveBeenCalledWith(
-    `git for-each-ref --format='%(contents)' refs/tags/${tag}`,
+    `git for-each-ref --format='%(contents)' 'refs/tags/${tag}'`,
     expect.any(Function),
   );
 });
@@ -89,3 +89,14 @@ it('sets an error if exec fails', () => {
   expect(core.setOutput).not.toHaveBeenCalled();
   expect(core.setFailed).toHaveBeenCalledTimes(1);
 });
+
+it('escapes malicious values from the input', () => {
+  core.getInput.mockReturnValue(`'; $(cat /etc/shadow)`);
+
+  main();
+
+  expect(child_process.exec).toHaveBeenCalledWith(
+    "git for-each-ref --format='%(contents)' 'refs/tags/'\\''; $(cat /etc/shadow)'",
+    expect.any(Function),
+  );
+});
