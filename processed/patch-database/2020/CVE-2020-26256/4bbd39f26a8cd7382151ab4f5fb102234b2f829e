diff --git a/packages/parse/__tests__/issues/issue540.spec.ts b/packages/parse/__tests__/issues/issue540.spec.ts
new file mode 100644
index 00000000..25cce918
--- /dev/null
+++ b/packages/parse/__tests__/issues/issue540.spec.ts
@@ -0,0 +1,33 @@
+import { EOL } from 'os';
+import { parseString, RowMap, RowArray } from '../../src';
+
+describe('Issue #540 - https://github.com/C2FO/fast-csv/issues/540', () => {
+    const CSV_CONTENT = [
+        ' , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , -',
+    ].join(EOL);
+
+    const expectedRows = [
+        [
+            ' , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,' +
+                ' , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,' +
+                ' , , , , , , , , , , , , , , -',
+        ],
+    ];
+
+    it('allow transforming to any object shape', () => {
+        return new Promise((res, rej) => {
+            const invalid: RowArray[] = [];
+            const rows: RowMap[] = [];
+            parseString(CSV_CONTENT, { ignoreEmpty: true, delimiter: '\t' })
+                .on('data-invalid', (row: RowArray) => invalid.push(row))
+                .on('data', (r) => rows.push(r))
+                .on('error', rej)
+                .on('end', (count: number) => {
+                    expect(rows).toEqual(expectedRows);
+                    expect(invalid).toHaveLength(0);
+                    expect(count).toBe(expectedRows.length + invalid.length);
+                    res();
+                });
+        });
+    });
+});
diff --git a/packages/parse/src/parser/Parser.ts b/packages/parse/src/parser/Parser.ts
index 6e4335da..03f0b266 100644
--- a/packages/parse/src/parser/Parser.ts
+++ b/packages/parse/src/parser/Parser.ts
@@ -4,8 +4,6 @@ import { ParserOptions } from '../ParserOptions';
 import { RowArray } from '../types';
 import { Token } from './Token';
 
-const EMPTY_ROW_REGEXP = /^\s*(?:''|"")?\s*(?:,\s*(?:''|"")?\s*)*$/;
-
 export interface ParseResult {
     line: string;
     rows: string[][];
@@ -79,7 +77,7 @@ export class Parser {
         if (row === null) {
             return false;
         }
-        if (this.parserOptions.ignoreEmpty && EMPTY_ROW_REGEXP.test(row.join(''))) {
+        if (this.parserOptions.ignoreEmpty && RowParser.isEmptyRow(row)) {
             return true;
         }
         rows.push(row);
diff --git a/packages/parse/src/parser/RowParser.ts b/packages/parse/src/parser/RowParser.ts
index b37f27ea..18af6fae 100644
--- a/packages/parse/src/parser/RowParser.ts
+++ b/packages/parse/src/parser/RowParser.ts
@@ -4,7 +4,13 @@ import { ParserOptions } from '../ParserOptions';
 import { RowArray } from '../types';
 import { MaybeToken, Token } from './Token';
 
+const EMPTY_STRING = '';
+
 export class RowParser {
+    static isEmptyRow(row: RowArray): boolean {
+        return row.join(EMPTY_STRING).replace(/\s+/g, EMPTY_STRING) === EMPTY_STRING;
+    }
+
     private readonly parserOptions: ParserOptions;
 
     private readonly columnParser: ColumnParser;
