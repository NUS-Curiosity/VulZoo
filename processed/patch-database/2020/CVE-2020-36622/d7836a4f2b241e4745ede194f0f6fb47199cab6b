diff --git a/app/res/tpl/account/changepassword.php b/app/res/tpl/account/changepassword.php
index 734dc40..0cd766d 100644
--- a/app/res/tpl/account/changepassword.php
+++ b/app/res/tpl/account/changepassword.php
@@ -21,7 +21,10 @@
         class="panel panel-<?php echo $record->getMeta('type') ?> action-changepassword"
         method="POST"
         accept-charset="utf-8"
-        enctype="multipart/form-data">        
+        enctype="multipart/form-data">
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+
         <!-- changepassword form -->
         <fieldset>
             <legend><?php echo I18n::__('account_legend_changepassword') ?></legend>
diff --git a/app/res/tpl/account/index.php b/app/res/tpl/account/index.php
index eeb83f9..8cbae71 100644
--- a/app/res/tpl/account/index.php
+++ b/app/res/tpl/account/index.php
@@ -22,6 +22,9 @@ class="panel panel-<?php echo $record->getMeta('type') ?> action-profile"
         method="POST"
         accept-charset="utf-8"
         enctype="multipart/form-data">
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+        
         <div>
             <img
         		src="<?php echo Gravatar::src($record->email, 72) ?>"
@@ -29,7 +32,7 @@ class="gravatar-account circular no-shadow"
         		width="72"
         		height="72"
         		alt="<?php echo htmlspecialchars($record->getName()) ?>" />
-        </div>     
+        </div>
         <!-- account form -->
         <fieldset>
             <legend><?php echo I18n::__('account_legend') ?></legend>
diff --git a/app/res/tpl/account/login.php b/app/res/tpl/account/login.php
index 35b5ceb..7dbbe6c 100644
--- a/app/res/tpl/account/login.php
+++ b/app/res/tpl/account/login.php
@@ -29,6 +29,9 @@ class="notification">
         class="panel login"
         method="POST"
         accept-charset="utf-8">
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+
         <div>
             <input type="hidden" name="dialog[type]" value="<?php echo $record->getMeta('type') ?>" />
             <input type="hidden" name="dialog[id]" value="<?php echo $record->getId() ?>" />
diff --git a/app/res/tpl/account/lostpassword.php b/app/res/tpl/account/lostpassword.php
index ded7f59..fd60e25 100644
--- a/app/res/tpl/account/lostpassword.php
+++ b/app/res/tpl/account/lostpassword.php
@@ -29,6 +29,9 @@ class="notification">
         class="panel lostpassword"
         method="POST"
         accept-charset="utf-8">
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+
         <fieldset>
             <legend><?php echo I18n::__('lostpassword_legend') ?></legend>
             <div
diff --git a/app/res/tpl/admin/index.php b/app/res/tpl/admin/index.php
index 766332c..4898f78 100644
--- a/app/res/tpl/admin/index.php
+++ b/app/res/tpl/admin/index.php
@@ -19,6 +19,9 @@ class="panel panel-<?php echo $record->getMeta('type') ?> action-edit"
         method="POST"
         accept-charset="utf-8"
         enctype="multipart/form-data">
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+
         <?php echo $form_details ?>
         <div class="buttons">
             <input
diff --git a/app/res/tpl/scaffold/form.php b/app/res/tpl/scaffold/form.php
index f7d1421..cb77a37 100644
--- a/app/res/tpl/scaffold/form.php
+++ b/app/res/tpl/scaffold/form.php
@@ -22,11 +22,13 @@ class="panel panel-<?php echo $record->getMeta('type') ?> action-<?php echo $cur
         method="POST"
         accept-charset="utf-8"
         enctype="multipart/form-data">
-        
+
+        <input type="hidden" name="token" value="<?php echo Model::getCSRFToken() ?>" />
+
         <!-- form details -->
         <?php echo $form_details ?>
         <!-- end of form details -->
-        
+
         <!-- Scaffold buttons -->
         <div class="buttons">
             <select name="next_action">
diff --git a/src/Controller/Account.php b/src/Controller/Account.php
index 22596df..7d7de36 100644
--- a/src/Controller/Account.php
+++ b/src/Controller/Account.php
@@ -35,22 +35,24 @@ public function index()
         session_start();
         Auth::check();
         $this->template = 'account/index';
-        
+
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             Flight::get('user')->import(Flight::request()->data->dialog);
             try {
                 R::store(Flight::get('user'));
                 Flight::get('user')->notify(I18n::__('account_edit_success'), 'success');
                 $this->redirect('/account/');
-            }
-            catch (Exception $e) {
+            } catch (Exception $e) {
                 Flight::get('user')->notify(I18n::__('account_edit_failure'), 'error');
-            }    
+            }
         }
-        
+
         $this->render();
     }
-    
+
     /**
      * Displays a page to change the password.
      *
@@ -62,8 +64,11 @@ public function changepassword()
         session_start();
         Auth::check();
         $this->template = 'account/changepassword';
-        
+
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             if (Flight::get('user')->changePassword(
                 Flight::request()->data->pw,
                 Flight::request()->data->pw_new,
@@ -73,35 +78,33 @@ public function changepassword()
                     R::store(Flight::get('user'));
                     Flight::get('user')->notify(I18n::__('account_changepassword_success'), 'success');
                     $this->redirect('/account/');
-                }
-                catch (Exception $e) {
+                } catch (Exception $e) {
                     //Whoops, what nu?
                 }
-            }
-            else {
+            } else {
                 Flight::get('user')->notify(I18n::__('account_changepassword_failure'), 'error');
-            }    
+            }
         }
-        
+
         $this->render();
     }
-    
+
     /**
      * Renders the account page.
      */
     protected function render()
     {
-	    Flight::render('shared/notification', array(), 'notification');
-	    //
+        Flight::render('shared/notification', array(), 'notification');
+        //
         Flight::render('shared/navigation/account', array(), 'navigation_account');
-		Flight::render('shared/navigation/main', array(), 'navigation_main');
+        Flight::render('shared/navigation/main', array(), 'navigation_main');
         Flight::render('shared/navigation', array(), 'navigation');
         Flight::render('account/toolbar', array(), 'toolbar');
-		Flight::render('shared/header', array(), 'header');
-		Flight::render('shared/footer', array(), 'footer');
-		Flight::render($this->template, array(
-		    'record' => Flight::get('user')
-		), 'content');
+        Flight::render('shared/header', array(), 'header');
+        Flight::render('shared/footer', array(), 'footer');
+        Flight::render($this->template, array(
+            'record' => Flight::get('user')
+        ), 'content');
         Flight::render('html5', array(
             'title' => I18n::__("account_head_title"),
             'language' => Flight::get('language')
diff --git a/src/Controller/Login.php b/src/Controller/Login.php
index d03079b..67c2195 100644
--- a/src/Controller/Login.php
+++ b/src/Controller/Login.php
@@ -33,13 +33,16 @@ class Controller_Login extends Controller
     public function index()
     {
         session_start();
-        if ( ! isset($_SESSION['login_id'])) {
+        if (! isset($_SESSION['login_id'])) {
             $_SESSION['login_id'] = 0;
         }
         $login = R::load('login', $_SESSION['login_id']);
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             try {
-                $login = R::graph( Flight::request()->data->dialog, TRUE );
+                $login = R::graph(Flight::request()->data->dialog, true);
                 if ($login->trial()) {
                     //you must trial before store because of pw reset in update
                     $_SESSION['user']['id'] = $login->user->getId();
@@ -56,7 +59,7 @@ public function index()
             }
         }
         // either no yet submitted or the credentials given failed
-        if ( Flight::request()->query->goto == '' || Flight::request()->query->goto == '/login' ) {
+        if (Flight::request()->query->goto == '' || Flight::request()->query->goto == '/login') {
             $goto = '/cms';
         } else {
             $goto = Flight::request()->query->goto;
diff --git a/src/Controller/Lostpassword.php b/src/Controller/Lostpassword.php
index 2844438..ad39e40 100644
--- a/src/Controller/Lostpassword.php
+++ b/src/Controller/Lostpassword.php
@@ -23,12 +23,12 @@ class Controller_Lostpassword extends Controller
      * @var string
      */
     public $template = 'account/lostpassword';
-    
+
     /**
      * Holds the username entered by the password seeking party.
      */
     public $uname = '';
-    
+
     /**
      * May hold a message (textile) to the user that want to re-enter a password.
      */
@@ -43,28 +43,31 @@ class Controller_Lostpassword extends Controller
     public function index()
     {
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             $this->uname = Flight::request()->data->dialog['uname'];
-            if ( ! $user = R::findOne('user', ' email = ? LIMIT 1 ', array($this->uname))) {
+            if (! $user = R::findOne('user', ' email = ? LIMIT 1 ', array($this->uname))) {
                 $this->message = I18n::__('lostpassword_user_unknown');
-            } elseif ( ! $user->requestPassword()) {
+            } elseif (! $user->requestPassword()) {
                 $this->message = I18n::__('lostpassword_email_failed');
             } else {
                 $this->redirect('login');
             }
         }
-        
+
         $this->render();
     }
-    
+
     /**
      * Renders the lostpassword page.
      */
     protected function render()
     {
-		Flight::render($this->template, array(
-		    'uname' => $this->uname,
-		    'message' => $this->message
-		), 'content');
+        Flight::render($this->template, array(
+            'uname' => $this->uname,
+            'message' => $this->message
+        ), 'content');
         Flight::render('html5', array(
             'title' => I18n::__("lostpassword_head_title"),
             'language' => Flight::get('language'),
diff --git a/src/Controller/Scaffold.php b/src/Controller/Scaffold.php
index 5c86d75..0da3bbc 100644
--- a/src/Controller/Scaffold.php
+++ b/src/Controller/Scaffold.php
@@ -488,6 +488,9 @@ public function index($layout, $page, $order, $dir)
         //$this->template = "model/{$this->type}/{$this->layout}";
         $this->template = "scaffold/{$this->layout}";
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             //clear filter?
             if (Flight::request()->data->submit == I18n::__('filter_submit_clear')) {
                 R::trash($this->filter);
@@ -559,6 +562,9 @@ public function add($layout)
             }
         }
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             $this->record = R::graph(Flight::request()->data->dialog, true);
             $this->setNextAction(Flight::request()->data->next_action);
             if ($this->doRedbeanAction()) {
@@ -605,6 +611,9 @@ public function edit($page, $order, $dir, $layout)
             $this->template = "scaffold/edit";
         }
         if (Flight::request()->method == 'POST') {
+            if (! Model::validateCSRFToken(Flight::request()->data->token)) {
+                $this->redirect("/logout");
+            }
             Permission::check(Flight::get('user'), $this->type, 'edit');//check for edit perm now
             $this->record = R::graph(Flight::request()->data->dialog, true);
             $this->setNextAction(Flight::request()->data->next_action);
diff --git a/src/Model.php b/src/Model.php
index b05ea2c..ed6c850 100644
--- a/src/Model.php
+++ b/src/Model.php
@@ -87,6 +87,39 @@ public function __construct()
     {
     }
 
+    /**
+     * Returns a "random" string to prevent CSRF.
+     *
+     * @return string
+     */
+    public static function getCSRFToken()
+    {
+        @session_start();
+        if (empty($_SESSION['csrf_tokens'])) {
+            $_SESSION['csrf_tokens'] = [];
+        }
+        $nonce = md5(uniqid(rand(), true));
+        $_SESSION['csrf_tokens'][$nonce] = true;
+        return $nonce;
+    }
+
+    /**
+     * Returns wether the CSRF token validates or not.
+     *
+     * @param string $token
+     * @return bool
+     */
+    public static function validateCSRFToken($token)
+    {
+        @session_start();
+        if (isset($_SESSION['csrf_tokens'][$token])) {
+            unset($_SESSION['csrf_tokens'][$token]);
+            error_log('Good user');
+            return true;
+        }
+        return false;
+    }
+
     /**
      * Returns an array with attributes for lists.
      *
diff --git a/src/Model/Criteria.php b/src/Model/Criteria.php
index 545f7f0..91e04cb 100644
--- a/src/Model/Criteria.php
+++ b/src/Model/Criteria.php
@@ -23,19 +23,19 @@ class Model_Criteria extends Model
      * @var array
      */
     public $map = array(
- 		'like' => '%1$s like ?',
- 		'notlike' => '%1$s not like ?',
- 		'eq' => '%1$s = ?',
- 		'neq' => '%1$s != ?',
- 		'bw' => '%1$s like ?',
- 		'ew' => '%1$s like ?',
- 		'lt' => '%1$s < ?',
- 		'gt' => '%1$s > ?',
- 	    'in' => '%1$s in (%2$s)'
- 		//'between' => __('filter_op_between'),
- 		//'istrue' => __('filter_op_istrue'),
- 		//'isfalse' => __('filter_op_isfalse')
- 	);
+        'like' => '%1$s like ?',
+        'notlike' => '%1$s not like ?',
+        'eq' => '%1$s = ?',
+        'neq' => '%1$s != ?',
+        'bw' => '%1$s like ?',
+        'ew' => '%1$s like ?',
+        'lt' => '%1$s < ?',
+        'gt' => '%1$s > ?',
+        'in' => '%1$s in (%2$s)'
+        //'between' => __('filter_op_between'),
+        //'istrue' => __('filter_op_istrue'),
+        //'isfalse' => __('filter_op_isfalse')
+    );
 
     /**
      * Holds possible search operators depending on the filter tag type.
@@ -58,120 +58,131 @@ class Model_Criteria extends Model
         'bool' => array('eq')
      );
 
-     /**
-      * Container for characters that have to be escaped for usage with SQL.
-      *
-      * @var array
-      */
-     public $pat = array('%', '_');
-
-     /**
-      * Container for escaped charaters.
-      *
-      * @var array
-      */
-     public $rep = array('\%', '\_');
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToText($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToNumber($value)
-     {
-         return (float)str_replace(',', '.', $value);
-         //return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToEmail($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToTextarea($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToIn($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToBool($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Prepares a value according to its tag and returns it.
-      *
-      * @param string the value to convert
-      * @return mixed
-      */
-     public function convertToSelect($value)
-     {
-         return $value;
-     }
-     
-     /**
-      * Returns a mysql datetime string.
-      *
-      * @param string the value to convert
-      * @return string
-      */
-     public function convertToDatetime($value)
-     {
-         return date('Y-m-d H:i:s', strtotime($value));
-     }
-     
-     /**
-      * Returns a mysql date string.
-      *
-      * @param string the value to convert
-      * @return string
-      */
-     public function convertToDate($value)
-     {
-         return date('Y-m-d', strtotime($value));
-     }
-    
+    /**
+     * Container for characters that have to be escaped for usage with SQL.
+     *
+     * @var array
+     */
+    public $pat = array('%', '_');
+
+    /**
+     * Container for escaped charaters.
+     *
+     * @var array
+     */
+    public $rep = array('\%', '\_');
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToText($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToNumber($value)
+    {
+        return (float)str_replace(',', '.', $value);
+        //return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToEmail($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToTextarea($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToIn($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToBool($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Prepares a value according to its tag and returns it.
+     *
+     * @param string the value to convert
+     * @return mixed
+     */
+    public function convertToSelect($value)
+    {
+        return $value;
+    }
+
+    /**
+     * Returns a mysql datetime string.
+     *
+     * @param string the value to convert
+     * @return string
+     */
+    public function convertToDatetime($value)
+    {
+        return date('Y-m-d H:i:s', strtotime($value));
+    }
+
+    /**
+     * Returns a mysql date string.
+     *
+     * @param string the value to convert
+     * @return string
+     */
+    public function convertToDate($value)
+    {
+        return date('Y-m-d', strtotime($value));
+    }
+
+    /**
+     * Returns a mysql time string.
+     *
+     * @param string the value to convert
+     * @return string
+     */
+    public function convertToTime($value)
+    {
+        return date('H:i:s', strtotime($value));
+    }
+
     /**
      * Returns a string to use as part of a SQL query.
      *
@@ -183,12 +194,14 @@ public function convertToDate($value)
      */
     public function makeWherePart(Model_Filter $filter)
     {
-        if ( ! isset($this->map[$this->bean->op])) throw new Exception('Filter operator has no template');
+        if (! isset($this->map[$this->bean->op])) {
+            throw new Exception('Filter operator has no template');
+        }
         $template = $this->map[$this->bean->op];
         $value = $this->mask_filter_value($filter);
         return sprintf($template, $this->bean->attribute, $value);
     }
-    
+
     /**
      * Masks the criterias value and stacks it into the filter values.
      *
@@ -199,35 +212,35 @@ public function makeWherePart(Model_Filter $filter)
     protected function mask_filter_value(Model_Filter $filter)
     {
         $add_to_filter_values = true;
-    	switch ($this->bean->op) {
-    		case 'like':
-    			$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
-    			break;
-    		case 'notlike':
-    			$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
-    			break;
-    		case 'bw':
-    			$value = str_replace($this->pat, $this->rep, $this->bean->value).'%';
-    			break;
-    		case 'ew':
-    			$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);
-    			break;
-    		case 'in':
-    		    $_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));
-    		    $ids = array_keys($this->bean->{$_sharedSubName});
-    		    $value = implode(', ', $ids);
-    		    $add_to_filter_values = false;
-    		    break;
-    		default:
-    			$value = $this->bean->value;
-    	}
-    	if ($add_to_filter_values) {
-    	    $converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));
-    	    $filter->filter_values[] = $this->$converter($value);
-    	}
-    	return $value;
+        switch ($this->bean->op) {
+            case 'like':
+                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
+                break;
+            case 'notlike':
+                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
+                break;
+            case 'bw':
+                $value = str_replace($this->pat, $this->rep, $this->bean->value).'%';
+                break;
+            case 'ew':
+                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);
+                break;
+            case 'in':
+                $_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));
+                $ids = array_keys($this->bean->{$_sharedSubName});
+                $value = implode(', ', $ids);
+                $add_to_filter_values = false;
+                break;
+            default:
+                $value = $this->bean->value;
+        }
+        if ($add_to_filter_values) {
+            $converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));
+            $filter->filter_values[] = $this->$converter($value);
+        }
+        return $value;
     }
-    
+
     /**
      * Returns array with possible operators for the given tag type.
      *
@@ -235,10 +248,12 @@ protected function mask_filter_value(Model_Filter $filter)
      */
     public function operators()
     {
-        if (isset($this->operators[$this->bean->tag])) return $this->operators[$this->bean->tag];
+        if (isset($this->operators[$this->bean->tag])) {
+            return $this->operators[$this->bean->tag];
+        }
         return array();
     }
-    
+
     /**
      * Setup validators.
      */
