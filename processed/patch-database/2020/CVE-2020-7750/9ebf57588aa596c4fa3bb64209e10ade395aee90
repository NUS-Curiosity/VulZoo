diff --git a/.travis.yml b/.travis.yml
index 85267c70..d7c9f0cb 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,10 @@ node_js:
   - 6
   - node
 env:
-  - NODE_ENV=production
+  global:
+    - NODE_ENV=production
+    - NPM_TAG=latest
+    - RELEASE_TIMESTAMP="$(date +'%Y%m%d%H%M%S')"
 sudo: false
 cache:
   directories:
@@ -21,16 +24,36 @@ jobs:
       node_js: 6
       script: npm run build
       before_deploy:
-      - VPKG=$($(npm bin)/json -f package.json version)
-      - export VERSION=${VPKG}-prerelease.$(date +%Y%m%d%H%M%S)
-      - npm --no-git-tag-version version $VERSION
-      - git config --global user.email "$(git log --pretty=format:"%ae" -n1)"
-      - git config --global user.name "$(git log --pretty=format:"%an" -n1)"
+      - >
+        if [ -z "$BEFORE_DEPLOY_RAN" ]; then
+          VPKG=$($(npm bin)/json -f package.json version)
+          export RELEASE_VERSION=${VPKG}-prerelease.${RELEASE_TIMESTAMP}
+          npm --no-git-tag-version version $RELEASE_VERSION
+          if [[ "$TRAVIS_BRANCH" == hotfix/* ]]; then # double brackets are important for matching the wildcard
+            export NPM_TAG=hotfix
+          fi
+          git config --global user.email "$(git log --pretty=format:"%ae" -n1)"
+          git config --global user.name "$(git log --pretty=format:"%an" -n1)"
+          export BEFORE_DEPLOY_RAN=true
+        fi
       deploy:
-        provider: npm
+      - provider: npm
+        on:
+          branch:
+          - master
+          - develop
+          - hotfix/*
+          condition: $TRAVIS_EVENT_TYPE != cron
         skip_cleanup: true
-        "on":
-          all_branches: true
-          condition: $RELEASE_BRANCHES =~ $TRAVIS_BRANCH
         email: $NPM_EMAIL
         api_key: $NPM_TOKEN
+        tag: $NPM_TAG
+      - provider: script
+        on:
+          branch:
+          - master
+          - develop
+          - hotfix/*
+          condition: $TRAVIS_EVENT_TYPE != cron
+        skip_cleanup: true
+        script: if npm info | grep -q $RELEASE_VERSION; then git tag $RELEASE_VERSION && git push https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git $RELEASE_VERSION; fi
diff --git a/package.json b/package.json
index bc18d4c5..6697c005 100644
--- a/package.json
+++ b/package.json
@@ -22,6 +22,7 @@
   "dependencies": {
     "base64-js": "1.2.1",
     "base64-loader": "1.0.0",
+    "dompurify": "2.1.1",
     "minilog": "3.1.0",
     "transformation-matrix": "1.15.0",
     "scratch-render-fonts": "1.0.0-prerelease.20200507182347"
diff --git a/src/playground/index.html b/src/playground/index.html
index fe3b86b2..aed0d843 100644
--- a/src/playground/index.html
+++ b/src/playground/index.html
@@ -27,6 +27,10 @@
     </p>
     <p>
         <input type="button" id="trigger-render" value="Render">
+        <label for="shouldRenderReference">
+          <input type="checkbox" id="shouldRenderReference" checked />
+          Render Reference?
+        </label>
     </p>
 
     <div class="columns">
@@ -39,6 +43,17 @@
             <span id="reference"></span>
        </div>
      </div>
+    <div class="columns">
+        <div class="column">
+            <div>Rendered Content</div>
+            <textarea id="renderedContent" wrap="off" cols="50" rows="50"></textarea>
+       </div>
+       <div class="column">
+            <div>Reference</div>
+            <span id="reference"></span>
+            <textarea id="referenceContent" wrap="off" cols="50" rows="50"></textarea>
+       </div>
+     </div>
 
     <script src="scratch-svg-renderer.js"></script>
     <script>
@@ -59,7 +74,8 @@
 
         function renderSVGString(str) {
             renderer.fromString(str);
-            renderer._draw(parseFloat(scaleSlider.value));
+            renderer._draw(parseFloat(scaleSlider.value), ()=>{});
+            renderedContent.value = renderer.toString(true);
         }
 
         function updateReferenceImage() {
@@ -92,7 +108,8 @@
 
         function renderLoadedString() {
             renderSVGString(loadedSVGString);
-            updateReferenceImage();
+            referenceContent.value = loadedSVGString;
+            shouldRenderReference.checked && updateReferenceImage();
         }
 
         function scaleSliderChanged() {
diff --git a/src/svg-renderer.js b/src/svg-renderer.js
index 28dab128..a28620a7 100644
--- a/src/svg-renderer.js
+++ b/src/svg-renderer.js
@@ -1,3 +1,4 @@
+const DOMPurify = require('dompurify');
 const inlineSvgFonts = require('./font-inliner');
 const SvgElement = require('./svg-element');
 const convertFonts = require('./font-converter');
@@ -363,19 +364,31 @@ class SvgRenderer {
         // which returns the full bounding-box of all drawn SVG
         // elements, similar to how Scratch 2.0 did measurement.
         const svgSpot = document.createElement('span');
-        // Clone the svg tag. This tag becomes unusable/undrawable in browsers
-        // once it's appended to the page, perhaps for security reasons?
-        const tempTag = this._svgTag.cloneNode(/* deep */ true);
+        // Since we're adding user-provided SVG to document.body,
+        // sanitizing is required. This should not affect bounding box calculation.
+        // outerHTML is attribute of Element (and not HTMLElement), so use it instead of
+        // calling serializer or toString()
+        // NOTE: this._svgTag remains untouched!
+        const rawValue = this._svgTag.outerHTML;
+        const sanitizedValue = DOMPurify.sanitize(rawValue, {
+            // Use SVG profile (no HTML elements)
+            USE_PROFILES: {svg: true},
+            // Remove some tags that Scratch does not use.
+            FORBID_TAGS: ['a', 'audio', 'canvas', 'video'],
+            // Allow data URI in image tags (e.g. SVGs converted from bitmap)
+            ADD_DATA_URI_TAGS: ['image']
+        });
         let bbox;
         try {
-            svgSpot.appendChild(tempTag);
+            // Insert sanitized value.
+            svgSpot.innerHTML = sanitizedValue;
             document.body.appendChild(svgSpot);
-            // Take the bounding box.
-            bbox = tempTag.getBBox();
+            // Take the bounding box. We have to get elements via svgSpot
+            // because we added it via innerHTML.
+            bbox = svgSpot.children[0].getBBox();
         } finally {
             // Always destroy the element, even if, for example, getBBox throws.
             document.body.removeChild(svgSpot);
-            svgSpot.removeChild(tempTag);
         }
 
         // Enlarge the bbox from the largest found stroke width
