diff --git a/applications/mp4box/main.c b/applications/mp4box/main.c
index 2044e180ca..d74cfb71f4 100644
--- a/applications/mp4box/main.c
+++ b/applications/mp4box/main.c
@@ -4648,12 +4648,12 @@ int mp4boxMain(int argc, char **argv)
 		/*setup dash*/
 		dasher = gf_dasher_new(szMPD, dash_profile, tmpdir, dash_scale, dash_ctx);
 		if (!dasher) {
-			return mp4box_cleanup(1);
-			return GF_OUT_OF_MEM;
+			return mp4box_cleanup(GF_OUT_OF_MEM);
 		}
 		e = gf_dasher_set_info(dasher, dash_title, cprt, dash_more_info, dash_source);
 		if (e) {
 			fprintf(stderr, "DASH Error: %s\n", gf_error_to_string(e));
+			gf_dasher_del(dasher);
 			return mp4box_cleanup(1);
 		}
 		if (dash_start_date) gf_dasher_set_start_date(dasher, dash_start_date);
@@ -4664,6 +4664,7 @@ int mp4boxMain(int argc, char **argv)
 			e = gf_dasher_add_base_url(dasher, mpd_base_urls[i]);
 			if (e) {
 				fprintf(stderr, "DASH Error: %s\n", gf_error_to_string(e));
+				gf_dasher_del(dasher);
 				return mp4box_cleanup(1);
 			}
 		}
@@ -4705,6 +4706,7 @@ int mp4boxMain(int argc, char **argv)
 		}
 		if (e) {
 			fprintf(stderr, "DASH Setup Error: %s\n", gf_error_to_string(e));
+			gf_dasher_del(dasher);
 			return mp4box_cleanup(1);
 		}
 
diff --git a/src/isomedia/isom_write.c b/src/isomedia/isom_write.c
index 7cd5dffcfa..5f1c0aced7 100644
--- a/src/isomedia/isom_write.c
+++ b/src/isomedia/isom_write.c
@@ -672,9 +672,6 @@ GF_Err gf_isom_new_mpeg4_description(GF_ISOFile *movie,
 	if (e) {
 		gf_odf_desc_del((GF_Descriptor *)new_esd);
 		return e;
-	}
-	if (new_esd->URLString) {
-
 	}
 	return e;
 }
diff --git a/src/media_tools/av_parsers.c b/src/media_tools/av_parsers.c
index cf45aefa9b..afbcbbfc5f 100644
--- a/src/media_tools/av_parsers.c
+++ b/src/media_tools/av_parsers.c
@@ -4307,7 +4307,7 @@ u32 gf_mp3_get_next_header_mem(const char *buffer, u32 size, u32 *pos)
 		if (state==3) {
 			u32 val;
 			bytes[state] = b;
-			val = GF_4CC(bytes[0], bytes[1], bytes[2], bytes[3]);
+			val = GF_4CC((u32)bytes[0], bytes[1], bytes[2], bytes[3]);
 			if (gf_mp3_frame_size(val)) {
 				*pos = dropped;
 				return val;
diff --git a/src/media_tools/media_import.c b/src/media_tools/media_import.c
index c8e48b1fe4..f45d752841 100644
--- a/src/media_tools/media_import.c
+++ b/src/media_tools/media_import.c
@@ -5437,7 +5437,7 @@ static GF_Err gf_import_avc_h264(GF_MediaImporter *import)
 			if (nal_ref_idc) {
 				sample_is_ref = GF_TRUE;
 			}
-			
+
 			if (is_islice)
 				sample_has_islice = GF_TRUE;
 
@@ -8225,7 +8225,7 @@ static GF_Err vorbis_process(ogg_audio_codec_desc *codec, char *data, u32 data_l
 				*duration = (u64)d;
 			}
 		}
-		
+
 		*block_size = 0;
 		return GF_OK;
 	}
@@ -11058,5 +11058,3 @@ GF_Err gf_media_import(GF_MediaImporter *importer)
 }
 
 #endif /*GPAC_DISABLE_MEDIA_IMPORT*/
-
-
diff --git a/src/media_tools/mpegts.c b/src/media_tools/mpegts.c
index 809e14dec8..fad51a75eb 100644
--- a/src/media_tools/mpegts.c
+++ b/src/media_tools/mpegts.c
@@ -539,7 +539,7 @@ static u32 gf_m2ts_reframe_mpeg_video(GF_M2TS_Demuxer *ts, GF_M2TS_PES *pes, Boo
 	pck.flags = 0;
 
 	while (sc_pos+4<data_len) {
-		unsigned char *start = (unsigned char*)memchr(data+sc_pos, 0, data_len-sc_pos);
+		unsigned char *start = (unsigned char*)memchr(data+sc_pos, 0, data_len-sc_pos-3);
 		if (!start) break;
 		sc_pos = (u32) (start - (unsigned char*)data);
 
@@ -1272,7 +1272,7 @@ GF_EXPORT
 Bool gf_m2ts_crc32_check(char *data, u32 len)
 {
 	u32 crc = gf_crc_32(data, len);
-	u32 crc_val = GF_4CC((u8) data[len], (u8) data[len+1], (u8) data[len+2], (u8) data[len+3]);
+	u32 crc_val = GF_4CC((u32) data[len], (u8) data[len+1], (u8) data[len+2], (u8) data[len+3]);
 	return (crc==crc_val) ? GF_TRUE : GF_FALSE;
 }
 
@@ -1445,6 +1445,11 @@ static void gf_m2ts_section_complete(GF_M2TS_Demuxer *ts, GF_M2TS_SectionFilter
 		/*parse header*/
 		data = (u8 *)sec->section;
 
+		if (sec->length < 2) {
+			GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("[MPEG-2 TS] M2TS Table parsing error, length %d is too small\n", sec->length) );
+			return;
+		}
+
 		/*look for proper table*/
 		table_id = data[0];
 
@@ -1468,6 +1473,10 @@ static void gf_m2ts_section_complete(GF_M2TS_Demuxer *ts, GF_M2TS_SectionFilter
 
 		has_syntax_indicator = (data[1] & 0x80) ? 1 : 0;
 		if (has_syntax_indicator) {
+			if (sec->length < 5) {
+				GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("[MPEG-2 TS] M2TS Table parsing error, length %d is too small\n", sec->length) );
+				return;
+			}
 			extended_table_id = (data[3]<<8) | data[4];
 		} else {
 			extended_table_id = 0;
@@ -1650,9 +1659,9 @@ static u32 gf_m2ts_get_section_length(char byte0, char byte1, char byte2)
 {
 	u32 length;
 	if (gf_m2ts_is_long_section(byte0)) {
-		length = 3 + ( ((byte1<<8) | (byte2&0xff)) & 0xfff );
+		length = 3 + ( (((u8)byte1<<8) | (byte2&0xff)) & 0xfff );
 	} else {
-		length = 3 + ( ((byte1<<8) | (byte2&0xff)) & 0x3ff );
+		length = 3 + ( (((u8)byte1<<8) | (byte2&0xff)) & 0x3ff );
 	}
 	return length;
 }
@@ -2160,6 +2169,11 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 	data = section->data;
 	data_size = section->data_size;
 
+	if (data_size < 6) {
+		GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[MPEG-2 TS] Invalid PMT header data size %d\n", data_size ) );
+		return;
+	}
+
 	pmt->program->pcr_pid = ((data[0] & 0x1f) << 8) | data[1];
 
 	info_length = ((data[2]&0xf)<<8) | data[3];
@@ -2175,16 +2189,26 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 				u32 size;
 				GF_BitStream *iod_bs;
 				iod_bs = gf_bs_new((char *)data+8, len-2, GF_BITSTREAM_READ);
-				if (pmt->program->pmt_iod) gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);
+				if (pmt->program->pmt_iod) {
+					gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);
+					pmt->program->pmt_iod = NULL;
+				}
 				e = gf_odf_parse_descriptor(iod_bs , (GF_Descriptor **) &pmt->program->pmt_iod, &size);
 				gf_bs_del(iod_bs );
+				if (pmt->program->pmt_iod && pmt->program->pmt_iod->tag != GF_ODF_IOD_TAG) {
+					GF_LOG( GF_LOG_ERROR, GF_LOG_CONTAINER, ("pmt iod has wrong tag %d\n", pmt->program->pmt_iod->tag) );
+					gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);
+					pmt->program->pmt_iod = NULL;
+				}
 				if (e==GF_OK) {
 					/*remember program number for service/program selection*/
-					if (pmt->program->pmt_iod) pmt->program->pmt_iod->ServiceID = pmt->program->number;
-					/*if empty IOD (freebox case), discard it and use dynamic declaration of object*/
-					if (!gf_list_count(pmt->program->pmt_iod->ESDescriptors)) {
-						gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);
-						pmt->program->pmt_iod = NULL;
+					if (pmt->program->pmt_iod) {
+						pmt->program->pmt_iod->ServiceID = pmt->program->number;
+						/*if empty IOD (freebox case), discard it and use dynamic declaration of object*/
+						if (!gf_list_count(pmt->program->pmt_iod->ESDescriptors)) {
+							gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);
+							pmt->program->pmt_iod = NULL;
+						}
 					}
 				}
 			} else if (tag == GF_M2TS_METADATA_POINTER_DESCRIPTOR) {
@@ -2225,7 +2249,7 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 	}
 
 	nb_hevc = nb_hevc_temp = nb_shvc = nb_shvc_temp = nb_mhvc = nb_mhvc_temp = 0;
-	while (pos<data_size) {
+	while (pos<data_size-5) {
 		GF_M2TS_PES *pes = NULL;
 		GF_M2TS_SECTION_ES *ses = NULL;
 		GF_M2TS_ES *es = NULL;
@@ -2236,6 +2260,11 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 		pid = ((data[1] & 0x1f) << 8) | data[2];
 		desc_len = ((data[3] & 0xf) << 8) | data[4];
 
+		if (desc_len > data_size-5) {
+			GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, ("[MPEG-2 TS] Invalid PMT es descriptor size for PID %d\n", pid ) );
+			break;
+		}
+
 		GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, ("stream_type :%d \n",stream_type));
 		switch (stream_type) {
 
@@ -2374,7 +2403,9 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 			if (es) {
 				switch (tag) {
 				case GF_M2TS_ISO_639_LANGUAGE_DESCRIPTOR:
-					pes->lang = GF_4CC(' ', data[2], data[3], data[4]);
+					if (pes) {
+						pes->lang = GF_4CC(' ', data[2], data[3], data[4]);
+					}
 					break;
 				case GF_M2TS_MPEG4_SL_DESCRIPTOR:
 #ifdef FORCE_DISABLE_MPEG4SL_OVER_MPEG2TS
@@ -2411,12 +2442,14 @@ static void gf_m2ts_process_pmt(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *pmt, GF
 				}
 				break;
 				case GF_M2TS_DVB_SUBTITLING_DESCRIPTOR:
-					pes->sub.language[0] = data[2];
-					pes->sub.language[1] = data[3];
-					pes->sub.language[2] = data[4];
-					pes->sub.type = data[5];
-					pes->sub.composition_page_id = (data[6]<<8) | data[7];
-					pes->sub.ancillary_page_id = (data[8]<<8) | data[9];
+					if (pes) {
+						pes->sub.language[0] = data[2];
+						pes->sub.language[1] = data[3];
+						pes->sub.language[2] = data[4];
+						pes->sub.type = data[5];
+						pes->sub.composition_page_id = (data[6]<<8) | data[7];
+						pes->sub.ancillary_page_id = (data[8]<<8) | data[9];
+					}
 
 					es->stream_type = GF_M2TS_DVB_SUBTITLE;
 					break;
@@ -2668,6 +2701,10 @@ static void gf_m2ts_process_pat(GF_M2TS_Demuxer *ts, GF_M2TS_SECTION_ES *ses, GF
 			gf_list_add(prog->streams, pmt);
 			pmt->pid = prog->pmt_pid;
 			pmt->program = prog;
+			if (ts->ess[pmt->pid]) {
+				GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("Redefinition of pmt for pid %d\n", pid));
+				gf_m2ts_es_del(ts->ess[pmt->pid], ts);
+			}
 			ts->ess[pmt->pid] = (GF_M2TS_ES *)pmt;
 			pmt->sec = gf_m2ts_section_filter_new(gf_m2ts_process_pmt, 0);
 		}
@@ -2756,8 +2793,14 @@ void gf_m2ts_pes_header(GF_M2TS_PES *pes, unsigned char *data, u32 data_size, GF
 {
 	u32 has_pts, has_dts;
 	u32 len_check;
+
 	memset(pesh, 0, sizeof(GF_M2TS_PESHeader));
 
+	if (data_size < 6) {
+		GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, ("PES Header is too small (%d < 6)\n", data_size));
+		return;
+	}
+
 	len_check = 0;
 
 	pesh->id = data[0];
@@ -3086,7 +3129,7 @@ static void gf_m2ts_get_adaptation_field(GF_M2TS_Demuxer *ts, GF_M2TS_Adaptation
 
 	af_extension = data + 1;
 	if (paf->PCR_flag == 1) {
-		u32 base = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
+		u32 base = ((u32)data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
 		u64 PCR = (u64) base;
 		paf->PCR_base = (PCR << 1) | (data[5] >> 7);
 		paf->PCR_ext = ((data[5] & 1) << 8) | data[6];
@@ -3828,7 +3871,9 @@ void gf_m2ts_demux_del(GF_M2TS_Demuxer *ts)
 
 	for (i=0; i<GF_M2TS_MAX_STREAMS; i++) {
 		//bacause of pure PCR streams, en ES might be reassigned on 2 PIDs, one for the ES and one for the PCR
-		if (ts->ess[i] && (ts->ess[i]->pid==i)) gf_m2ts_es_del(ts->ess[i], ts);
+		if (ts->ess[i] && (ts->ess[i]->pid==i)) {
+			gf_m2ts_es_del(ts->ess[i], ts);
+		}
 	}
 	if (ts->buffer) gf_free(ts->buffer);
 	while (gf_list_count(ts->programs)) {
@@ -3840,7 +3885,10 @@ void gf_m2ts_demux_del(GF_M2TS_Demuxer *ts)
 			gf_odf_desc_list_del(p->additional_ods);
 			gf_list_del(p->additional_ods);
 		}
-		if (p->pmt_iod) gf_odf_desc_del((GF_Descriptor *)p->pmt_iod);
+		if (p->pmt_iod) {
+			gf_odf_desc_del((GF_Descriptor *)p->pmt_iod);
+			p->pmt_iod = NULL;
+		}
 		gf_free(p);
 	}
 	gf_list_del(ts->programs);
diff --git a/src/odf/odf_code.c b/src/odf/odf_code.c
index ab85da9629..f1275a0599 100644
--- a/src/odf/odf_code.c
+++ b/src/odf/odf_code.c
@@ -506,7 +506,10 @@ GF_Err gf_odf_read_iod(GF_BitStream *bs, GF_InitialObjectDescriptor *iod, u32 De
 		if (e) return e;
 		if (!tmp) return GF_ODF_INVALID_DESCRIPTOR;
 		e = AddDescriptorToIOD(iod, tmp);
-		if (e) return e;
+		if (e) {
+			gf_odf_delete_descriptor(tmp);
+			return e;
+		}
 		nbBytes += tmp_size + gf_odf_size_field_size(tmp_size);
 	}
 	if (DescSize != nbBytes) return GF_ODF_INVALID_DESCRIPTOR;
@@ -1025,7 +1028,10 @@ GF_Err gf_odf_read_isom_od(GF_BitStream *bs, GF_IsomObjectDescriptor *od, u32 De
 		if (e) return e;
 		if (!tmp) return GF_ODF_INVALID_DESCRIPTOR;
 		e = AddDescriptorToIsomOD(od, tmp);
-		if (e) return e;
+		if (e) {
+			gf_odf_delete_descriptor(tmp);
+			return e;
+		}
 		nbBytes += tmpSize + gf_odf_size_field_size(tmpSize);
 	}
 	if (nbBytes != DescSize) return GF_ODF_INVALID_DESCRIPTOR;
