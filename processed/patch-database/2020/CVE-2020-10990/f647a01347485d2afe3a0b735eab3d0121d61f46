diff --git a/CHANGELOG.md b/CHANGELOG.md
index 23c4648c..08dc859e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,21 @@ All notable changes to this project will be documented in this file.
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
+---
+## Version 1.12.28, 1/8/2020
+
+### Added
+
+Rest-automation will transport X-Trace-Id from/to Http request/response, therefore extending distributed trace across systems that support the X-Trace-Id HTTP header. 
+
+### Removed
+
+N/A
+
+### Changed
+
+Updated SimpleXmlParser with XML External Entity (XXE) injection prevention.
+
 ---
 ## Version 1.12.26, 1/4/2020
 
diff --git a/README.md b/README.md
index df4332c8..6d3c4be0 100644
--- a/README.md
+++ b/README.md
@@ -240,7 +240,7 @@ You can compile the rest-example as a microservices executable like this:
 cd mercury/examples
 cd rest-example
 mvn clean package
-java -Dcloud.connector=none -jar target/rest-example-1.12.26.jar
+java -Dcloud.connector=none -jar target/rest-example-1.12.28.jar
 # this will run the rest-example without a cloud connector
 ```
 
@@ -294,20 +294,20 @@ For simplicity, we are going to use the Event Node system to emulate a cloud env
 cd mercury/connectors
 cd event-node
 mvn clean package
-java -jar target/event-node-1.12.26.jar
+java -jar target/event-node-1.12.28.jar
 # the Event Node system will run. It emulates an event stream system.
 
 # Open another terminal and go to the project root
 cd mercury/examples
 cd lambda-example
 mvn clean package
-java -Dcloud.connector=event.node -jar target/lambda-example-1.12.26.jar
+java -Dcloud.connector=event.node -jar target/lambda-example-1.12.28.jar
 # the lambda-example microservices module will run and connect to the event node
 
 # Go to the terminal that runs the rest-example earlier
 Ctrl-C to quit the rest-example application
 # Then run the rest-example again with cloud.connector set to event.node
-java -Dcloud.connector=event.node -jar target/rest-example-1.12.26.jar
+java -Dcloud.connector=event.node -jar target/rest-example-1.12.28.jar
 # without the "-Dcloud.connector" parameter override, the rest-example will run and connect to a hazelcast cluster.
 
 ```
@@ -356,7 +356,7 @@ Members {size:1, ver:1} [
 cd mercury/connectors
 cd hazelcast/hazelcast-presence
 mvn clean package
-java -jar target/hazelcast-presence-1.12.26.jar
+java -jar target/hazelcast-presence-1.12.28.jar
 # this will start the "presence monitor" that will connect to the hazelcast cluster.
 ```
 
@@ -364,11 +364,11 @@ java -jar target/hazelcast-presence-1.12.26.jar
 
 ```bash
 # go to the lambda-example project folder in one terminal
-java -Dcloud.connector=hazelcast -Dcloud.services=hazelcast.reporter -jar target/lambda-example-1.12.26.jar
+java -Dcloud.connector=hazelcast -Dcloud.services=hazelcast.reporter -jar target/lambda-example-1.12.28.jar
 # the lambda-example will connect to the hazelcast cluster and the "presence monitor"
 
 # go to the rest-example project folder in another terminal
-java -Dcloud.connector=hazelcast -Dcloud.services=hazelcast.reporter -jar target/rest-example-1.12.26.jar
+java -Dcloud.connector=hazelcast -Dcloud.services=hazelcast.reporter -jar target/rest-example-1.12.28.jar
 # the rest-example will also connect to the hazelcast cluster and the "presence monitor"
 
 ```
@@ -393,7 +393,7 @@ You may visit http://127.0.0.1:8080/info to see connection info. It may look lik
         "seq" : 123,
         "type" : "APP",
         "updated" : "2018-12-21T17:51:01Z",
-        "version" : "1.12.26"
+        "version" : "1.12.28"
       },
       "201812215ff40bbc36004637ac8cd18debf5cf95" : {
         "created" : "2018-12-21T17:11:49Z",
@@ -402,7 +402,7 @@ You may visit http://127.0.0.1:8080/info to see connection info. It may look lik
         "seq" : 117,
         "type" : "WEB",
         "updated" : "2018-12-21T17:50:55Z",
-        "version" : "1.12.26"
+        "version" : "1.12.28"
       }
     },
     "topics" : [ "201812215ff40bbc36004637ac8cd18debf5cf95", "201812213aed6381e8b543d48f3f288f64207019" ],
@@ -414,7 +414,7 @@ You may visit http://127.0.0.1:8080/info to see connection info. It may look lik
   "app" : {
     "description" : "Presence Monitor",
     "name" : "hazelcast-presence",
-    "version" : "1.12.26"
+    "version" : "1.12.28"
   },
   "memory" : {
     "allocated" : "737,673,216",
@@ -439,7 +439,7 @@ You may also check the health status of the presence monitor by visiting http://
   "status" : "UP",
   "upstream" : [ {
     "cluster" : [ "127.0.0.1:5701", "127.0.0.1:5702" ],
-    "message" : "Loopback test took 1 ms",
+    "message" : "Loopback test took 1 ms; presence-monitor connected.",
     "namespace" : "connector",
     "required" : true,
     "route" : "cloud.connector.health",
@@ -461,11 +461,11 @@ For rapid development and prototyping, we have implemented a convenient standalo
 cd mercury/connectors
 cd kafka/kafka-standalone
 mvn clean package
-java -jar target/kafka-standalone-1.12.26.jar
+java -jar target/kafka-standalone-1.12.28.jar
 # this will start a standalone kafka server with embedded zookeeper
 cd ../kafka-presence
 mvn clean package
-java -jar target/kafka-presence-1.12.26.jar
+java -jar target/kafka-presence-1.12.28.jar
 # this will start the "presence monitor" that will connect to the kafka cluster.
 ```
 
@@ -473,11 +473,11 @@ java -jar target/kafka-presence-1.12.26.jar
 
 ```bash
 # go to the lambda-example project folder in one terminal
-java -Dcloud.connector=kafka -Dcloud.services=kafka.reporter -jar target/lambda-example-1.12.26.jar
+java -Dcloud.connector=kafka -Dcloud.services=kafka.reporter -jar target/lambda-example-1.12.28.jar
 # the lambda-example will connect to the kafka server and the "presence monitor"
 
 # go to the rest-example project folder in another terminal
-java -Dcloud.connector=kafka -Dcloud.services=kafka.reporter -jar target/rest-example-1.12.26.jar
+java -Dcloud.connector=kafka -Dcloud.services=kafka.reporter -jar target/rest-example-1.12.28.jar
 # the rest-example will also connect to the kafka server and the "presence monitor"
 
 ```
diff --git a/connectors/event-node/pom.xml b/connectors/event-node/pom.xml
index 4487b1ef..2144b755 100644
--- a/connectors/event-node/pom.xml
+++ b/connectors/event-node/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>event-node</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Event Node - Platform-in-a-box</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/connectors/hazelcast/hazelcast-connector/pom.xml b/connectors/hazelcast/hazelcast-connector/pom.xml
index 3de98f50..31f9e8ff 100644
--- a/connectors/hazelcast/hazelcast-connector/pom.xml
+++ b/connectors/hazelcast/hazelcast-connector/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>hazelcast-connector</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Cloud connector for Hazelcast cluster</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>platform-core</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/com.hazelcast/hazelcast-client -->
diff --git a/connectors/hazelcast/hazelcast-presence/pom.xml b/connectors/hazelcast/hazelcast-presence/pom.xml
index fbc9506b..0cc2ca44 100644
--- a/connectors/hazelcast/hazelcast-presence/pom.xml
+++ b/connectors/hazelcast/hazelcast-presence/pom.xml
@@ -5,7 +5,7 @@
     <groupId>org.platformlambda</groupId>
     <artifactId>hazelcast-presence</artifactId>
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>hazelcast-presence-monitor</name>
 
     <properties>
@@ -28,13 +28,13 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/connectors/kafka/kafka-connector/pom.xml b/connectors/kafka/kafka-connector/pom.xml
index ac0716c2..8d66e729 100644
--- a/connectors/kafka/kafka-connector/pom.xml
+++ b/connectors/kafka/kafka-connector/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>kafka-connector</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Cloud connector for Kafka cluster</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>platform-core</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <dependency>
diff --git a/connectors/kafka/kafka-presence/pom.xml b/connectors/kafka/kafka-presence/pom.xml
index 276ac2d5..c44f448f 100644
--- a/connectors/kafka/kafka-presence/pom.xml
+++ b/connectors/kafka/kafka-presence/pom.xml
@@ -5,7 +5,7 @@
 	<groupId>org.platformlambda</groupId>
 	<artifactId>kafka-presence</artifactId>	
 	<packaging>jar</packaging>
-	<version>1.12.25</version>
+	<version>1.12.28</version>
 	<name>kafka-presence-monitor</name>
 
   	<properties>
@@ -28,13 +28,13 @@
 		<dependency>
 			<groupId>org.platformlambda</groupId>
 			<artifactId>kafka-connector</artifactId>
-			<version>1.12.25</version>
+			<version>1.12.28</version>
 		</dependency>
 
 		<dependency>
 			<groupId>org.platformlambda</groupId>
 			<artifactId>rest-spring</artifactId>
-			<version>1.12.25</version>
+			<version>1.12.28</version>
 		</dependency>
 
 		<!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/connectors/kafka/kafka-standalone/pom.xml b/connectors/kafka/kafka-standalone/pom.xml
index fd4fd4b8..07419441 100644
--- a/connectors/kafka/kafka-standalone/pom.xml
+++ b/connectors/kafka/kafka-standalone/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>kafka-standalone</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Standalone kafka system for development and testing</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>platform-core</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->
diff --git a/examples/lambda-example/pom.xml b/examples/lambda-example/pom.xml
index e384bd63..1cf6181f 100644
--- a/examples/lambda-example/pom.xml
+++ b/examples/lambda-example/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>lambda-example</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Example for simple microservices executable</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>platform-core</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- select your cloud connector (hazelcast-connector or kafka-connector).
@@ -42,12 +42,12 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>kafka-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/examples/lambda-example/src/main/java/org/platformlambda/example/MainApp.java b/examples/lambda-example/src/main/java/org/platformlambda/example/MainApp.java
index 491e0b6c..0b6a0567 100644
--- a/examples/lambda-example/src/main/java/org/platformlambda/example/MainApp.java
+++ b/examples/lambda-example/src/main/java/org/platformlambda/example/MainApp.java
@@ -23,7 +23,6 @@
 import org.platformlambda.core.models.LambdaFunction;
 import org.platformlambda.core.system.AppStarter;
 import org.platformlambda.core.system.Platform;
-import org.platformlambda.core.system.ServerPersonality;
 import org.platformlambda.services.HelloGeneric;
 import org.platformlambda.services.HelloPoJo;
 import org.slf4j.Logger;
diff --git a/examples/lambda-example/src/main/java/org/platformlambda/services/HelloGeneric.java b/examples/lambda-example/src/main/java/org/platformlambda/services/HelloGeneric.java
index fd7a483e..d1ef354d 100644
--- a/examples/lambda-example/src/main/java/org/platformlambda/services/HelloGeneric.java
+++ b/examples/lambda-example/src/main/java/org/platformlambda/services/HelloGeneric.java
@@ -33,19 +33,17 @@ public class HelloGeneric implements LambdaFunction {
 
     @Override
     public Object handleEvent(Map<String, String> headers, Object body, int instance) throws AppException, IOException {
-
         String id = headers.get("id");
         if (id == null) {
             throw new IllegalArgumentException("Missing parameter 'id'");
         }
-
         if (id.equals("1")) {
             // to set status, key-values or parametric types, we can use EventEnvelope as a result wrapper
             EventEnvelope result = new EventEnvelope();
-
             ObjectWithGenericType<SamplePoJo> genericObject = new ObjectWithGenericType<>();
             // return some place-holder values to demonstrate the PoJo can be transported over the network
-            SamplePoJo mock = new SamplePoJo(1, "Class with generic type resolved at run-time to be SamplePoJo", "200 World Blvd, Planet Earth");
+            SamplePoJo mock = new SamplePoJo(1, "Generic class with parametric type SamplePoJo",
+                                    "200 World Blvd, Planet Earth");
             // set current timestamp to indicate that the object is a new one
             mock.setDate(new Date());
             // set instance count and service origin ID to show that the object comes from a different instance
@@ -62,7 +60,6 @@ public Object handleEvent(Map<String, String> headers, Object body, int instance
         } else {
             throw new AppException(404, "Not found. Try id = 1");
         }
-
     }
 
 }
diff --git a/examples/lambda-example/src/main/java/org/platformlambda/services/HelloPoJo.java b/examples/lambda-example/src/main/java/org/platformlambda/services/HelloPoJo.java
index 4b8d3d3b..8283318a 100644
--- a/examples/lambda-example/src/main/java/org/platformlambda/services/HelloPoJo.java
+++ b/examples/lambda-example/src/main/java/org/platformlambda/services/HelloPoJo.java
@@ -34,12 +34,10 @@ public class HelloPoJo implements LambdaFunction {
 
     @Override
     public Object handleEvent(Map<String, String> headers, Object body, int instance) throws AppException, IOException {
-
         String id = headers.get("id");
         if (id == null) {
             throw new IllegalArgumentException("Missing parameter 'id'");
         }
-
         if (id.equals("1")) {
             // return some place-holder values to demonstrate the PoJo can be transported over the network
             SamplePoJo mock = new SamplePoJo(1, "Simple PoJo class", "100 World Blvd, Planet Earth");
@@ -53,7 +51,6 @@ public Object handleEvent(Map<String, String> headers, Object body, int instance
         } else {
             throw new AppException(404, "Not found. Try id = 1");
         }
-
     }
 
 }
diff --git a/examples/rest-example/pom.xml b/examples/rest-example/pom.xml
index 749cb33b..8aaf6a46 100644
--- a/examples/rest-example/pom.xml
+++ b/examples/rest-example/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>rest-example</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>REST example application</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- select your cloud connector (hazelcast-connector or kafka-connector).
@@ -42,12 +42,12 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>kafka-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/examples/rest-example/src/main/java/com/accenture/examples/rest/HelloPoJo.java b/examples/rest-example/src/main/java/com/accenture/examples/rest/HelloPoJo.java
index 04754e7c..f0a2094c 100644
--- a/examples/rest-example/src/main/java/com/accenture/examples/rest/HelloPoJo.java
+++ b/examples/rest-example/src/main/java/com/accenture/examples/rest/HelloPoJo.java
@@ -53,7 +53,6 @@ public Object getPoJo(@PathParam("id") Integer id) throws TimeoutException, AppE
                         SamplePoJo.class.getName() + ", actual: " + response.getBody().getClass().getName());
             }
         }
-
     }
 
     @GET
diff --git a/extensions/api-playground/pom.xml b/extensions/api-playground/pom.xml
index d559f9f7..f2aaa546 100644
--- a/extensions/api-playground/pom.xml
+++ b/extensions/api-playground/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>api-playground</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>API playground using OpenAPI</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/extensions/rest-automation/pom.xml b/extensions/rest-automation/pom.xml
index e2621918..fb2c0287 100644
--- a/extensions/rest-automation/pom.xml
+++ b/extensions/rest-automation/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>rest-automation</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>REST automation</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- select your cloud connector (hazelcast-connector or kafka-connector).
@@ -42,12 +42,12 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>kafka-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/MainApp.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/MainApp.java
index 881e3cf6..8bda2414 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/MainApp.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/MainApp.java
@@ -38,7 +38,6 @@
 
 import java.io.IOException;
 import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 @MainApplication
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/models/WsInfo.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/models/WsInfo.java
index f95749e1..3c53690f 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/models/WsInfo.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/models/WsInfo.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.models;
 
 public class WsInfo {
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/services/ServiceResponseHandler.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/services/ServiceResponseHandler.java
index d50d5e18..7d05801f 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/services/ServiceResponseHandler.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/services/ServiceResponseHandler.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.services;
 
 import org.platformlambda.automation.config.RoutingEntry;
@@ -30,7 +48,6 @@ public class ServiceResponseHandler implements LambdaFunction {
     private static final Logger log = LoggerFactory.getLogger(ServiceResponseHandler.class);
 
     private static final SimpleXmlWriter xmlWriter = new SimpleXmlWriter();
-    private static ConcurrentMap<String, AsyncContextHolder> contexts;
 
     private static final String HEAD = "HEAD";
     private static final String STREAM = "stream";
@@ -43,6 +60,8 @@ public class ServiceResponseHandler implements LambdaFunction {
     private static final String RESULT = "result";
     private static final String ACCEPT_ANY = "*/*";
 
+    private ConcurrentMap<String, AsyncContextHolder> contexts;
+
     public ServiceResponseHandler(ConcurrentMap<String, AsyncContextHolder> contexts) {
         this.contexts = contexts;
     }
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/HttpRelay.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/HttpRelay.java
index 8026be54..e1a40388 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/HttpRelay.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/HttpRelay.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.servlets;
 
 import com.google.api.client.http.*;
@@ -39,6 +57,7 @@ public class HttpRelay implements LambdaFunction {
     private static final SimpleXmlWriter xmlWriter = new SimpleXmlWriter();
     private static final ConcurrentMap<String, HttpRequestFactory> httpFactory = new ConcurrentHashMap<>();
 
+    private static final String X_TRACE_ID = ServiceGateway.X_TRACE_ID;
     private static final String REGULAR_FACTORY = "regular.";
     private static final String TRUST_ALL_FACTORY = "trust_all.";
     private static final String COOKIE = "cookie";
@@ -208,6 +227,12 @@ public Object handleEvent(Map<String, String> headers, Object body, int instance
                     update = true;
                 }
             }
+            // propagate X-Trace-Id when forwarding the HTTP request
+            String traceId = po.getTraceId();
+            if (traceId != null) {
+                httpHeaders.set(X_TRACE_ID, traceId);
+                update = true;
+            }
             // set cookies if any
             Map<String, String> cookies  = request.getCookies();
             StringBuilder sb = new StringBuilder();
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/ServiceGateway.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/ServiceGateway.java
index e7f29cb6..c7c01b9c 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/ServiceGateway.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/servlets/ServiceGateway.java
@@ -23,6 +23,7 @@
 import org.platformlambda.automation.models.AssignedRoute;
 import org.platformlambda.automation.models.AsyncContextHolder;
 import org.platformlambda.automation.models.CorsInfo;
+import org.platformlambda.automation.util.AsyncHttpHandler;
 import org.platformlambda.automation.util.SimpleHttpUtility;
 import org.platformlambda.core.exception.AppException;
 import org.platformlambda.core.models.AsyncHttpRequest;
@@ -38,8 +39,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.servlet.AsyncContext;
-import javax.servlet.AsyncEvent;
-import javax.servlet.AsyncListener;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.MultipartConfig;
 import javax.servlet.annotation.WebServlet;
@@ -58,6 +57,7 @@ public class ServiceGateway extends HttpServlet {
     private static final Logger log = LoggerFactory.getLogger(ServiceGateway.class);
 
     private static final SimpleXmlParser xmlReader = new SimpleXmlParser();
+    public static final String X_TRACE_ID = "X-Trace-Id";
     private static final String PROTOCOL = "x-forwarded-proto";
     private static final String HTTPS = "https";
     private static final String UTF_8 = "utf-8";
@@ -69,7 +69,6 @@ public class ServiceGateway extends HttpServlet {
     private static final String POST = "POST";
     private static final String PATCH = "PATCH";
     private static final String ACCEPT = "accept";
-    private static final String TRACE_HEADER = "X-Trace-Id";
     private static final int BUFFER_SIZE = 2048;
     // requestId -> context
     private static final ConcurrentMap<String, AsyncContextHolder> contexts = new ConcurrentHashMap<>();
@@ -239,12 +238,17 @@ private void routeRequest(String url, AssignedRoute route, HttpServletRequest re
         String tracePath = null;
         // Set trace header if needed
         if (route.info.tracing) {
-            traceId = "t" + util.getUuid();
+            /*
+             * Use X-Trace-Id from HTTP request headers if any.
+             * Otherwise, generate a unique ID.
+             */
+            String httpTrace = request.getHeader(X_TRACE_ID);
+            traceId = httpTrace == null? util.getUuid() : httpTrace;
             tracePath = method + " " + url;
             if (queryString != null) {
                 tracePath += "?" + queryString;
             }
-            response.setHeader(TRACE_HEADER, traceId);
+            response.setHeader(X_TRACE_ID, traceId);
         }
         // authentication required?
         if (route.info.authService != null) {
@@ -399,7 +403,7 @@ private void routeRequest(String url, AssignedRoute route, HttpServletRequest re
         String requestId = Utility.getInstance().getUuid();
         // create HTTP async context
         AsyncContext context = request.startAsync(request, response);
-        context.addListener(new AsyncHttpHandler(requestId));
+        context.addListener(new AsyncHttpHandler(contexts, requestId));
         // save to context map
         AsyncContextHolder holder = new AsyncContextHolder(context, route.info.timeoutSeconds * 1000);
         holder.setUrl(url).setMethod(method).setResHeaderId(route.info.responseTransformId);
@@ -427,40 +431,4 @@ private void routeRequest(String url, AssignedRoute route, HttpServletRequest re
         }
     }
 
-    private class AsyncHttpHandler implements AsyncListener {
-
-        private String id;
-
-        public AsyncHttpHandler(String id) {
-            this.id = id;
-        }
-
-        @Override
-        public void onComplete(AsyncEvent event) {
-            if (contexts.containsKey(id)) {
-                contexts.remove(id);
-                log.debug("Async HTTP Context {} completed, remaining {}", id, contexts.size());
-            }
-        }
-
-        @Override
-        public void onTimeout(AsyncEvent event) {
-            // this should not occur as we use our own async timeout handler
-            contexts.remove(id);
-        }
-
-        @Override
-        public void onError(AsyncEvent event) {
-            if (contexts.containsKey(id)) {
-                contexts.remove(id);
-                log.warn("Async HTTP Context {} exception {}", id, event.getThrowable().getMessage());
-            }
-        }
-
-        @Override
-        public void onStartAsync(AsyncEvent event) {
-            // no-op
-        }
-    }
-
 }
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncHttpHandler.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncHttpHandler.java
new file mode 100644
index 00000000..139b2459
--- /dev/null
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncHttpHandler.java
@@ -0,0 +1,66 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
+package org.platformlambda.automation.util;
+
+import org.platformlambda.automation.models.AsyncContextHolder;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.servlet.AsyncEvent;
+import javax.servlet.AsyncListener;
+import java.util.concurrent.ConcurrentMap;
+
+public class AsyncHttpHandler implements AsyncListener {
+    private static final Logger log = LoggerFactory.getLogger(AsyncHttpHandler.class);
+
+    private ConcurrentMap<String, AsyncContextHolder> contexts;
+    private String id;
+
+    public AsyncHttpHandler(ConcurrentMap<String, AsyncContextHolder> contexts, String id) {
+        this.contexts = contexts;
+        this.id = id;
+    }
+
+    @Override
+    public void onComplete(AsyncEvent event) {
+        if (contexts.containsKey(id)) {
+            contexts.remove(id);
+            log.debug("Async HTTP Context {} completed, remaining {}", id, contexts.size());
+        }
+    }
+
+    @Override
+    public void onTimeout(AsyncEvent event) {
+        // this should not occur as we use our own async timeout handler
+        contexts.remove(id);
+    }
+
+    @Override
+    public void onError(AsyncEvent event) {
+        if (contexts.containsKey(id)) {
+            contexts.remove(id);
+            log.warn("Async HTTP Context {} exception {}", id, event.getThrowable().getMessage());
+        }
+    }
+
+    @Override
+    public void onStartAsync(AsyncEvent event) {
+        // no-op
+    }
+}
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncTimeoutHandler.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncTimeoutHandler.java
index e0d6ce10..2607f5ee 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncTimeoutHandler.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/AsyncTimeoutHandler.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.util;
 
 import org.platformlambda.automation.models.AsyncContextHolder;
@@ -14,7 +32,7 @@
 public class AsyncTimeoutHandler extends Thread {
     private static final Logger log = LoggerFactory.getLogger(AsyncTimeoutHandler.class);
 
-    private static ConcurrentMap<String, AsyncContextHolder> contexts;
+    private ConcurrentMap<String, AsyncContextHolder> contexts;
     private boolean normal = true;
 
     public AsyncTimeoutHandler(ConcurrentMap<String, AsyncContextHolder> contexts) {
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/Housekeeper.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/Housekeeper.java
index 5172bd8b..a27b4938 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/Housekeeper.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/Housekeeper.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.util;
 
 import org.slf4j.Logger;
diff --git a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/SimpleHttpUtility.java b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/SimpleHttpUtility.java
index a3e6bd10..fce92ff2 100644
--- a/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/SimpleHttpUtility.java
+++ b/extensions/rest-automation/src/main/java/org/platformlambda/automation/util/SimpleHttpUtility.java
@@ -1,3 +1,21 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
 package org.platformlambda.automation.util;
 
 import org.platformlambda.automation.models.HeaderInfo;
diff --git a/extensions/websocket-notification/pom.xml b/extensions/websocket-notification/pom.xml
index 4229176c..1f5ee439 100644
--- a/extensions/websocket-notification/pom.xml
+++ b/extensions/websocket-notification/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>websocket-notification</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>WebSocket notification example</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- select your cloud connector (hazelcast-connector or kafka-connector).
@@ -42,12 +42,12 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>kafka-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/language-packs/language-connector/pom.xml b/language-packs/language-connector/pom.xml
index 4d1be198..60d38e69 100644
--- a/language-packs/language-connector/pom.xml
+++ b/language-packs/language-connector/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>language-connector</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Language Connector for Python, Nodes.js and Go</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>rest-spring</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- select your cloud connector (hazelcast-connector or kafka-connector).
@@ -42,12 +42,12 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>kafka-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>hazelcast-connector</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- https://mvnrepository.com/artifact/junit/junit -->
diff --git a/system/platform-core/pom.xml b/system/platform-core/pom.xml
index c36d14a3..ae56e1a3 100644
--- a/system/platform-core/pom.xml
+++ b/system/platform-core/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>platform-core</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>Mercury core library</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
diff --git a/system/platform-core/src/main/java/org/platformlambda/core/serializers/SimpleXmlParser.java b/system/platform-core/src/main/java/org/platformlambda/core/serializers/SimpleXmlParser.java
index c7391a84..9fab11b1 100644
--- a/system/platform-core/src/main/java/org/platformlambda/core/serializers/SimpleXmlParser.java
+++ b/system/platform-core/src/main/java/org/platformlambda/core/serializers/SimpleXmlParser.java
@@ -29,6 +29,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -37,6 +38,23 @@
 public class SimpleXmlParser {
     private static final Logger log = LoggerFactory.getLogger(SimpleXmlParser.class);
 
+    /*
+     * Acknowledgement:
+     *
+     * The solution to avoid XML external entity (XXE) injection attack was contributed by Sajeeb Lohani
+     * (github handles @prodigysml and @n33dle) on 1/6/2020.
+     *
+     * The corresponding Unit test is org.platformlambda.core.util.XmlParserFeatureTest
+     */
+    private static final String[] FEATURES_TO_ENABLE = {
+            "http://apache.org/xml/features/disallow-doctype-decl"
+    };
+    private static final String[] FEATURES_TO_DISABLE = {
+            "http://xml.org/sax/features/external-general-entities",
+            "http://xml.org/sax/features/external-parameter-entities",
+            "http://apache.org/xml/features/nonvalidating/load-external-dtd"
+    };
+
     private static final String VALUE = "value";
     private static List<String> defaultDrop = new ArrayList<>();
     private List<String> drop = new ArrayList<>();
@@ -56,7 +74,7 @@ public void setDropAttributes(List<String> attributesToIgnore) {
     }
 
     public Map<String, Object> parse(String xml) throws IOException {
-        return parse(new ByteArrayInputStream(xml.getBytes("UTF-8")));
+        return parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));
     }
 
     @SuppressWarnings("unchecked")
@@ -65,8 +83,17 @@ public Map<String, Object> parse(InputStream res) throws IOException {
 
         Document doc;
         try {
-            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
+            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+            for (String feature: FEATURES_TO_ENABLE) {
+                setFeature(dbf, feature, true);
+            }
+            for (String feature: FEATURES_TO_DISABLE) {
+                setFeature(dbf, feature, false);
+            }
+            dbf.setXIncludeAware(false);
+            dbf.setExpandEntityReferences(false);
+            DocumentBuilder dBuilder = dbf.newDocumentBuilder();
+            dBuilder.setErrorHandler(null);
             doc = dBuilder.parse(res);
             doc.getDocumentElement().normalize();
         } catch (ParserConfigurationException | SAXException e) {
@@ -107,7 +134,6 @@ public Map<String, Object> parse(InputStream res) throws IOException {
     }
 
     private void parseXML(Node node, Map<String, Object> parent, String grandParentName, Map<String, Object> grandParent) {
-
         if (node.getNodeType() == Node.TEXT_NODE) {
             String value = node.getTextContent().trim();
             if (value.length() > 0) {
@@ -183,4 +209,14 @@ private boolean canIgnore(String attributeName) {
         return !drop.isEmpty() ? drop.contains(attributeName) : SimpleXmlParser.defaultDrop.contains(attributeName);
     }
 
+    private boolean setFeature(DocumentBuilderFactory dbf, String feature, boolean enable) {
+        try {
+            dbf.setFeature(feature, enable);
+            return dbf.getFeature(feature) == enable;
+        } catch (ParserConfigurationException e) {
+            log.error("Unable to {} feature - {}", enable? "enable" : "disable", e.getMessage());
+            return false;
+        }
+    }
+
 }
diff --git a/system/platform-core/src/test/java/org/platformlambda/core/util/XmlParserFeatureTest.java b/system/platform-core/src/test/java/org/platformlambda/core/util/XmlParserFeatureTest.java
new file mode 100644
index 00000000..ab6fd5aa
--- /dev/null
+++ b/system/platform-core/src/test/java/org/platformlambda/core/util/XmlParserFeatureTest.java
@@ -0,0 +1,102 @@
+/*
+
+    Copyright 2018-2020 Accenture Technology
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+ */
+
+package org.platformlambda.core.util;
+
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+
+import static org.junit.Assert.assertTrue;
+
+public class XmlParserFeatureTest {
+    private static final Logger log = LoggerFactory.getLogger(XmlParserFeatureTest.class);
+
+    /*
+     * Acknowledgement:
+     *
+     * The solution to avoid XML external entity (XXE) injection attack was contributed by Sajeeb Lohani
+     * (prodigysml and n33dle) on 1/6/2020.
+     *
+     * This test ensures that the FEATURES_TO_ENABLE and FEATURES_TO_DISABLE are enforced.
+     */
+    private static final String[] FEATURES_TO_ENABLE = {
+            "http://apache.org/xml/features/disallow-doctype-decl"
+    };
+    private static final String[] FEATURES_TO_DISABLE = {
+            /*
+             * Features not recognized by the default DocumentBuilderFactory:
+             * http://xerces.apache.org/xerces-j/features.html#external-general-entities
+             * http://xerces.apache.org/xerces2-j/features.html#external-general-entities
+             * http://xerces.apache.org/xerces-j/features.html#external-parameter-entities
+             * http://xerces.apache.org/xerces2-j/features.html#external-parameter-entities
+             */
+            "http://xml.org/sax/features/external-general-entities",
+            "http://xml.org/sax/features/external-parameter-entities",
+            "http://apache.org/xml/features/nonvalidating/load-external-dtd"
+    };
+
+    @Test
+    public void featureTest() throws ParserConfigurationException, IOException, SAXException {
+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
+        for (String feature: FEATURES_TO_ENABLE) {
+            assertTrue(setFeature(dbf, feature, true));
+        }
+        for (String feature: FEATURES_TO_DISABLE) {
+            assertTrue(setFeature(dbf, feature, false));
+        }
+        dbf.setXIncludeAware(false);
+        dbf.setExpandEntityReferences(false);
+        /*
+         * guarantee that DOCTYPE feature is disabled
+         * XML sample from https://portswigger.net/web-security/xxe
+         */
+        String problematic = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
+                "<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]>\n" +
+                "<stockCheck><productId>&xxe;</productId></stockCheck>";
+        try {
+            DocumentBuilder dBuilder = dbf.newDocumentBuilder();
+            dBuilder.setErrorHandler(null);
+            Document doc = dBuilder.parse(new ByteArrayInputStream(problematic.getBytes(StandardCharsets.UTF_8)));
+            doc.getDocumentElement().normalize();
+        } catch (SAXParseException e) {
+            assertTrue(e.getMessage().contains("DOCTYPE is disallowed"));
+        }
+    }
+
+    private boolean setFeature(DocumentBuilderFactory dbf, String feature, boolean enable) {
+        try {
+            dbf.setFeature(feature, enable);
+            return dbf.getFeature(feature) == enable;
+        } catch (ParserConfigurationException e) {
+            log.error("Unable to {} feature - {}", enable? "enable" : "disable", e.getMessage());
+            return false;
+        }
+    }
+
+}
diff --git a/system/rest-spring/pom.xml b/system/rest-spring/pom.xml
index 058d569f..2d2d1c18 100644
--- a/system/rest-spring/pom.xml
+++ b/system/rest-spring/pom.xml
@@ -7,7 +7,7 @@
     <artifactId>rest-spring</artifactId>
 
     <packaging>jar</packaging>
-    <version>1.12.26</version>
+    <version>1.12.28</version>
     <name>REST library with Spring Boot</name>
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -29,7 +29,7 @@
         <dependency>
             <groupId>org.platformlambda</groupId>
             <artifactId>platform-core</artifactId>
-            <version>1.12.26</version>
+            <version>1.12.28</version>
         </dependency>
 
         <!-- Remove Tomcat dependency from Spring Boot so we can pick the latest one -->
