diff --git a/CHANGELOG.md b/CHANGELOG.md
index b3c6735492..2165dcb36f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,6 +4,10 @@ All notable, unreleased changes to this project will be documented in this file.
 
 ## [Unreleased]
 
+## 2.10.3
+
+- Stop storing plain text passwords in localStorage - by @dominik-zeglen
+
 ## 2.10.2
 
 - Fix fetching `quantityAvailable` field - #738 by @AlicjaSzu
diff --git a/src/@sdk/api/APIProxy.ts b/src/@sdk/api/APIProxy.ts
index 3a451b6a36..2faf3b0415 100644
--- a/src/@sdk/api/APIProxy.ts
+++ b/src/@sdk/api/APIProxy.ts
@@ -8,7 +8,12 @@ import { GraphQLError } from "graphql";
 
 import { fireSignOut, getAuthToken, setAuthToken } from "../auth";
 import { MUTATIONS } from "../mutations";
-import { TokenAuth } from "../mutations/gqlTypes/TokenAuth";
+import { PasswordChange } from "../mutations/gqlTypes/PasswordChange";
+import { SetPassword } from "../mutations/gqlTypes/SetPassword";
+import {
+  TokenAuth,
+  TokenAuth_tokenCreatte,
+} from "../mutations/gqlTypes/TokenAuth";
 import { QUERIES } from "../queries";
 import { UserDetails } from "../queries/gqlTypes/UserDetails";
 import { RequireAtLeastOne } from "../tsHelpers";
@@ -25,67 +30,70 @@ import {
   isDataEmpty,
   mergeEdges,
 } from "../utils";
+import { SetPasswordChange, SetPasswordResult, SignIn } from "./types";
 
 export class APIProxy {
-  getAttributes = this.watchQuery(QUERIES.Attributes, data => data.attributes);
+  getAttributes = this.watchQuery(
+    QUERIES.Attributes,
+    (data) => data.attributes
+  );
 
   getProductDetails = this.watchQuery(
     QUERIES.ProductDetails,
-    data => data.product
+    (data) => data.product
   );
 
-  getProductList = this.watchQuery(QUERIES.ProductList, data => data.products);
+  getProductList = this.watchQuery(
+    QUERIES.ProductList,
+    (data) => data.products
+  );
 
   getCategoryDetails = this.watchQuery(
     QUERIES.CategoryDetails,
-    data => data.category
+    (data) => data.category
   );
 
-  getOrdersByUser = this.watchQuery(QUERIES.OrdersByUser, data =>
+  getOrdersByUser = this.watchQuery(QUERIES.OrdersByUser, (data) =>
     data.me ? data.me.orders : null
   );
 
   getOrderDetails = this.watchQuery(
     QUERIES.OrderDetails,
-    data => data.orderByToken
+    (data) => data.orderByToken
   );
 
   getVariantsProducts = this.watchQuery(
     QUERIES.VariantsProducts,
-    data => data.productVariants
+    (data) => data.productVariants
   );
 
-  getShopDetails = this.watchQuery(QUERIES.GetShopDetails, data => data);
+  getShopDetails = this.watchQuery(QUERIES.GetShopDetails, (data) => data);
 
   setUserDefaultAddress = this.fireQuery(
     MUTATIONS.AddressTypeUpdate,
-    data => data!.accountSetDefaultAddress
+    (data) => data!.accountSetDefaultAddress
   );
 
   setDeleteUserAddress = this.fireQuery(
     MUTATIONS.DeleteUserAddress,
-    data => data!.accountAddressDelete
+    (data) => data!.accountAddressDelete
   );
 
   setCreateUserAddress = this.fireQuery(
     MUTATIONS.CreateUserAddress,
-    data => data!.accountAddressCreate
+    (data) => data!.accountAddressCreate
   );
 
   setUpdateuserAddress = this.fireQuery(
     MUTATIONS.UpdateUserAddress,
-    data => data!.accountAddressUpdate
+    (data) => data!.accountAddressUpdate
   );
 
   setAccountUpdate = this.fireQuery(
     MUTATIONS.AccountUpdate,
-    data => data!.accountUpdate
+    (data) => data!.accountUpdate
   );
 
-  setPasswordChange = this.fireQuery(MUTATIONS.PasswordChange, data => data);
-
-  setPassword = this.fireQuery(MUTATIONS.SetPassword, data => data);
-
   client: ApolloClient<any>;
 
   constructor(client: ApolloClient<any>) {
@@ -99,7 +107,7 @@ export class APIProxy {
     }
   ) => {
     if (this.isLoggedIn()) {
-      return this.watchQuery(QUERIES.UserDetails, data => data.me)(
+      return this.watchQuery(QUERIES.UserDetails, (data) => data.me)(
         variables,
         options
       );
@@ -116,47 +124,40 @@ export class APIProxy {
     };
   };
 
-  signIn = (
+  signIn = async (
     variables: InferOptions<MUTATIONS["TokenAuth"]>["variables"],
     options?: Omit<InferOptions<MUTATIONS["TokenAuth"]>, "variables">
-  ) =>
-    new Promise<{ data: TokenAuth["tokenCreate"] }>(async (resolve, reject) => {
-      try {
-        this.client.resetStore();
-
-        const data = await this.fireQuery(
-          MUTATIONS.TokenAuth,
-          data => data!.tokenCreate
-        )(variables, {
-          ...options,
-          update: (proxy, data) => {
-            const handledData = handleDataErrors(
-              (data: any) => data.tokenCreate,
-              data.data,
-              data.errors
-            );
-            if (!handledData.errors && handledData.data) {
-              setAuthToken(handledData.data.token);
-              if (window.PasswordCredential && variables) {
-                navigator.credentials.store(
-                  new window.PasswordCredential({
-                    id: variables.email,
-                    password: variables.password,
-                  })
-                );
-              }
-            }
-            if (options && options.update) {
-              options.update(proxy, data);
-            }
-          },
-        });
-
-        resolve(data);
-      } catch (e) {
-        reject(e);
-      }
+  ): Promise<SignIn> => {
+    await this.client.resetStore();
+    let result: {
+      data: TokenAuth_tokenCreate | null;
+    } | null = null;
+
+    result = await this.fireQuery(
+      MUTATIONS.TokenAuth,
+      (mutationData) => mutationData!.tokenCreate
+    )(variables, {
+      ...options,
+      fetchPolicy: "no-cache",
     });
+    const { data } = result;
+
+    if (data?.token && data.errors.length === 0) {
+      setAuthToken(data.token);
+      if (window.PasswordCredential && variables) {
+        navigator.credentials.store(
+          new window.PasswordCredential({
+            id: variables.email,
+            password: variables.password,
+          })
+        );
+      }
+    }
+    return {
+      data,
+      error: null,
+    };
+  };
 
   signOut = () =>
     new Promise(async (resolve, reject) => {
@@ -169,6 +170,52 @@ export class APIProxy {
       }
     });
 
+  setPassword = async (
+    variables: InferOptions<MUTATIONS["SetPassword"]>["variables"],
+    options?: Omit<InferOptions<MUTATIONS["SetPassword"]>, "variables">
+  ): Promise<SetPasswordResult> => {
+    let result: {
+      data: SetPassword | null;
+    } | null = null;
+
+    result = await this.fireQuery(MUTATIONS.SetPassword, (data) => data!)(
+      variables,
+      {
+        ...options,
+        fetchPolicy: "no-cache",
+      }
+    );
+    const { data } = result;
+
+    return {
+      data,
+      error: null,
+    };
+  };
+
+  setPasswordChange = async (
+    variables: InferOptions<MUTATIONS["PasswordChange"]>["variables"],
+    options?: Omit<InferOptions<MUTATIONS["PasswordChange"]>, "variables">
+  ): Promise<SetPasswordChange> => {
+    let result: {
+      data: PasswordChange | null;
+    } | null = null;
+
+    result = await this.fireQuery(MUTATIONS.PasswordChange, (data) => data!)(
+      variables,
+      {
+        ...options,
+        fetchPolicy: "no-cache",
+      }
+    );
+    const { data } = result;
+
+    return {
+      data,
+      error: null,
+    };
+  };
+
   attachAuthListener = (callback: (authenticated: boolean) => void) => {
     const eventHandler = () => {
       callback(this.isLoggedIn());
@@ -226,7 +273,7 @@ export class APIProxy {
       }
 
       const subscription = observable.subscribe(
-        result => {
+        (result) => {
           const { data, errors: apolloErrors } = result;
           const errorHandledData = handleDataErrors(
             mapFn,
@@ -246,7 +293,7 @@ export class APIProxy {
             }
           }
         },
-        error => {
+        (error) => {
           if (onError) {
             onError(error);
           }
@@ -281,7 +328,7 @@ export class APIProxy {
                 );
 
                 // use new result for metadata and mutate existing data
-                Object.keys(prevResultRef).forEach(key => {
+                Object.keys(prevResultRef).forEach((key) => {
                   prevResultRef[key] = newResultRef[key];
                 });
                 prevResultRef.edges = mergedEdges;
diff --git a/src/@sdk/api/types.ts b/src/@sdk/api/types.ts
index 1731703f86..cda15b5cf1 100644
--- a/src/@sdk/api/types.ts
+++ b/src/@sdk/api/types.ts
@@ -1,3 +1,8 @@
+import { ApolloError } from "apollo-client";
+import { PasswordChange } from "../mutations/gqlTypes/PasswordChange";
+import { SetPassword } from "../mutations/gqlTypes/SetPassword";
+import { TokenAuth_tokenCreate } from "../mutations/gqlTypes/TokenAuth";
+
 export interface ErrorResponse<T> {
   error?: any;
   type?: T;
@@ -15,3 +20,18 @@ export interface FunctionRunResponse<D, F> {
 
 export type PromiseQueuedResponse = Promise<FunctionQueueResponse>;
 export type PromiseRunResponse<D, F> = Promise<FunctionRunResponse<D, F>>;
+
+export type SignIn = {
+  data: TokenAuth_tokenCreate | null;
+  error: ApolloError | null;
+} | null;
+
+export type SetPasswordChange = {
+  data: PasswordChange | null;
+  error: ApolloError | null;
+} | null;
+
+export type SetPasswordResult = {
+  data: SetPassword | null;
+  error: ApolloError | null;
+} | null;
