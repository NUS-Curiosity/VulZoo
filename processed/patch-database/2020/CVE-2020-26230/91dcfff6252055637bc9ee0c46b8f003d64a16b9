diff --git a/app/src/main/java/es/gob/radarcovid/RadarCovidApplication.kt b/app/src/main/java/es/gob/radarcovid/RadarCovidApplication.kt
index f11f92c1..5c92dad2 100644
--- a/app/src/main/java/es/gob/radarcovid/RadarCovidApplication.kt
+++ b/app/src/main/java/es/gob/radarcovid/RadarCovidApplication.kt
@@ -14,6 +14,7 @@ import dagger.android.AndroidInjector
 import dagger.android.support.DaggerApplication
 import es.gob.radarcovid.common.base.broadcast.ExposureStatusChangeBroadcastReceiver
 import es.gob.radarcovid.common.di.component.DaggerApplicationComponent
+import es.gob.radarcovid.features.worker.FakeInfectionReportWorker
 import io.reactivex.rxjava3.plugins.RxJavaPlugins
 import okhttp3.CertificatePinner
 import org.dpppt.android.sdk.DP3T
@@ -46,6 +47,8 @@ class RadarCovidApplication : DaggerApplication() {
         DP3T.setCertificatePinner(certificatePinner)
         DP3T.setUserAgent(userAgent)
 
+        FakeInfectionReportWorker.start(this)
+
         registerReceiver(ExposureStatusChangeBroadcastReceiver(), DP3T.getUpdateIntentFilter())
 
     }
diff --git a/app/src/main/java/es/gob/radarcovid/common/di/module/RepositoryModule.kt b/app/src/main/java/es/gob/radarcovid/common/di/module/RepositoryModule.kt
index 97fd7277..81523de7 100644
--- a/app/src/main/java/es/gob/radarcovid/common/di/module/RepositoryModule.kt
+++ b/app/src/main/java/es/gob/radarcovid/common/di/module/RepositoryModule.kt
@@ -31,22 +31,19 @@ class RepositoryModule {
 
     @Provides
     @PerApplication
-    fun providesExposureStatusRepository(repository: ExposureStatusRepositoryImpl): ExposureStatusRepository =
+    fun providesFakeInfectionReportRepository(repository: FakeInfectionReportRepositoryImpl): FakeInfectionReportRepository =
         repository
 
     @Provides
     @PerApplication
-    fun providesDomainRepository(repository: DomainRepositoryImpl): DomainRepository = repository
+    fun providesExposureStatusRepository(repository: ExposureStatusRepositoryImpl): ExposureStatusRepository =
+        repository
 
     @Provides
     @PerApplication
     fun providesPreferencesRepository(repository: PreferencesRepositoryImpl): PreferencesRepository =
         repository
 
-    @Provides
-    @PerApplication
-    fun providesExampleRepository(repository: ExampleRepositoryImpl): ExampleRepository = repository
-
     @Provides
     @PerApplication
     fun providesApiRepository(repository: ApiRepositoryImpl): ApiRepository = repository
diff --git a/app/src/main/java/es/gob/radarcovid/common/di/module/ServicesModule.kt b/app/src/main/java/es/gob/radarcovid/common/di/module/ServicesModule.kt
index 64c8d55f..9a391c62 100644
--- a/app/src/main/java/es/gob/radarcovid/common/di/module/ServicesModule.kt
+++ b/app/src/main/java/es/gob/radarcovid/common/di/module/ServicesModule.kt
@@ -14,11 +14,16 @@ import dagger.Module
 import dagger.android.ContributesAndroidInjector
 import es.gob.radarcovid.common.base.broadcast.ExposureStatusChangeBroadcastReceiver
 import es.gob.radarcovid.common.di.scope.PerService
+import es.gob.radarcovid.features.worker.FakeInfectionReportWorker
 import es.gob.radarcovid.features.worker.HealerWorker
 
 @Module
 abstract class ServicesModule {
 
+    @PerService
+    @ContributesAndroidInjector
+    abstract fun bindsFakeInfectedReportWorker(): FakeInfectionReportWorker
+
     @PerService
     @ContributesAndroidInjector
     abstract fun bindsHealerWorker(): HealerWorker
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepositoryImpl.kt b/app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepositoryImpl.kt
deleted file mode 100644
index e5dde209..00000000
--- a/app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepositoryImpl.kt
+++ /dev/null
@@ -1,20 +0,0 @@
-/*
- * Copyright (c) 2020 Gobierno de España
- *
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at https://mozilla.org/MPL/2.0/.
- *
- * SPDX-License-Identifier: MPL-2.0
- */
-
-package es.gob.radarcovid.datamanager.repository
-
-import es.gob.radarcovid.models.domain.ExposureInfo
-import javax.inject.Inject
-
-class DomainRepositoryImpl @Inject constructor() : DomainRepository {
-
-    override var exposureInfo: ExposureInfo? = null
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepository.kt b/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepository.kt
deleted file mode 100644
index 9d24a6a4..00000000
--- a/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepository.kt
+++ /dev/null
@@ -1,19 +0,0 @@
-/*
- * Copyright (c) 2020 Gobierno de España
- *
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at https://mozilla.org/MPL/2.0/.
- *
- * SPDX-License-Identifier: MPL-2.0
- */
-
-package es.gob.radarcovid.datamanager.repository
-
-import org.funktionale.either.Either
-
-interface ExampleRepository {
-
-    fun exampleRequest(): Either<Throwable, String>
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepositoryImpl.kt b/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepositoryImpl.kt
deleted file mode 100644
index 37de69a0..00000000
--- a/app/src/main/java/es/gob/radarcovid/datamanager/repository/ExampleRepositoryImpl.kt
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * Copyright (c) 2020 Gobierno de España
- *
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at https://mozilla.org/MPL/2.0/.
- *
- * SPDX-License-Identifier: MPL-2.0
- */
-
-package es.gob.radarcovid.datamanager.repository
-
-import es.gob.radarcovid.common.base.BaseRepository
-import es.gob.radarcovid.datamanager.api.ApiInterface
-import org.funktionale.either.Either
-import javax.inject.Inject
-
-class ExampleRepositoryImpl @Inject constructor(private val apiInterface: ApiInterface) :
-    BaseRepository(), ExampleRepository {
-
-    override fun exampleRequest(): Either<Throwable, String> = callService {
-        apiInterface.test()
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepository.kt b/app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepository.kt
similarity index 70%
rename from app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepository.kt
rename to app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepository.kt
index ad3913b4..401b3d94 100644
--- a/app/src/main/java/es/gob/radarcovid/datamanager/repository/DomainRepository.kt
+++ b/app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepository.kt
@@ -10,10 +10,10 @@
 
 package es.gob.radarcovid.datamanager.repository
 
-import es.gob.radarcovid.models.domain.ExposureInfo
+import io.reactivex.rxjava3.core.Completable
 
-interface DomainRepository {
+interface FakeInfectionReportRepository {
 
-    var exposureInfo: ExposureInfo?
+    fun notifyFakeInfected(authCode: String): Completable
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepositoryImpl.kt b/app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepositoryImpl.kt
new file mode 100644
index 00000000..e789995c
--- /dev/null
+++ b/app/src/main/java/es/gob/radarcovid/datamanager/repository/FakeInfectionReportRepositoryImpl.kt
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2020 Gobierno de España
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at https://mozilla.org/MPL/2.0/.
+ *
+ * SPDX-License-Identifier: MPL-2.0
+ */
+
+package es.gob.radarcovid.datamanager.repository
+
+import android.content.Context
+import es.gob.radarcovid.BuildConfig
+import io.reactivex.rxjava3.core.Completable
+import org.dpppt.android.sdk.DP3T
+import org.dpppt.android.sdk.models.ExposeeAuthMethodAuthorization
+import javax.inject.Inject
+import javax.inject.Named
+
+class FakeInfectionReportRepositoryImpl @Inject constructor(
+    @Named("applicationContext") private val context: Context
+) : FakeInfectionReportRepository {
+
+    override fun notifyFakeInfected(authCode: String): Completable =
+        Completable.create {
+            if (BuildConfig.isMock) {
+                it.onComplete()
+            } else {
+                DP3T.sendFakeInfectedRequest(context,
+                    ExposeeAuthMethodAuthorization("Bearer $authCode"),
+                    { it.onComplete() },
+                    { it.onError(Exception("Error notifying fake infection")) }
+                )
+            }
+        }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportFakeInfectionUseCase.kt b/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportFakeInfectionUseCase.kt
new file mode 100644
index 00000000..d89e615d
--- /dev/null
+++ b/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportFakeInfectionUseCase.kt
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2020 Gobierno de España
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at https://mozilla.org/MPL/2.0/.
+ *
+ * SPDX-License-Identifier: MPL-2.0
+ */
+
+package es.gob.radarcovid.datamanager.usecase
+
+import es.gob.radarcovid.datamanager.repository.ApiRepository
+import es.gob.radarcovid.datamanager.repository.FakeInfectionReportRepository
+import es.gob.radarcovid.models.request.RequestVerifyCode
+import es.gob.radarcovid.models.response.ResponseToken
+import io.reactivex.rxjava3.core.Completable
+import io.reactivex.rxjava3.core.Observable
+import javax.inject.Inject
+
+class ReportFakeInfectionUseCase @Inject constructor(
+    private val fakeInfectionReportRepository: FakeInfectionReportRepository,
+    private val apiRepository: ApiRepository
+) {
+
+    companion object {
+
+        const val FAKE_REPORT_CODE: String = "112358132134"
+        
+    }
+
+
+    fun reportFakeInfection(): Completable =
+        getFakeVerifyToken().flatMapCompletable {
+            fakeInfectionReportRepository.notifyFakeInfected(it.token)
+        }.concatWith {
+            it.onComplete()
+        }
+
+    private fun getFakeVerifyToken(): Observable<ResponseToken> {
+        return Observable.create { emitter ->
+            val result = apiRepository.verifyCode(RequestVerifyCode(null, FAKE_REPORT_CODE))
+
+            if (result.isLeft()) {
+                emitter.onError(result.left().get())
+            } else {
+                emitter.onNext(result.right().get())
+                emitter.onComplete()
+            }
+
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportInfectedUseCase.kt b/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportInfectedUseCase.kt
index e6347fb2..b846f8da 100644
--- a/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportInfectedUseCase.kt
+++ b/app/src/main/java/es/gob/radarcovid/datamanager/usecase/ReportInfectedUseCase.kt
@@ -14,6 +14,7 @@ import es.gob.radarcovid.common.base.utils.JwtTokenUtils
 import es.gob.radarcovid.datamanager.repository.ApiRepository
 import es.gob.radarcovid.datamanager.repository.ContactTracingRepository
 import es.gob.radarcovid.datamanager.repository.PreferencesRepository
+import es.gob.radarcovid.models.exception.GenericRequestException
 import es.gob.radarcovid.models.request.RequestVerifyCode
 import es.gob.radarcovid.models.response.ResponseToken
 import io.reactivex.rxjava3.core.Completable
@@ -28,17 +29,18 @@ class ReportInfectedUseCase @Inject constructor(
     private val jwtTokenUtils: JwtTokenUtils
 ) {
 
-    fun reportInfected(reportCode: String): Completable {
-
-        return getVerifyToken(reportCode).flatMapCompletable {
-            contactTracingRepository.notifyInfected(it.token, jwtTokenUtils.getOnset(it.token))
-        }.concatWith {
-            preferencesRepository.setInfectionReportDate(Date())
-            it.onComplete()
+    fun reportInfected(reportCode: String): Completable =
+        if (reportCode == ReportFakeInfectionUseCase.FAKE_REPORT_CODE) {
+            Completable.create { it.onError(GenericRequestException()) }
+        } else {
+            getVerifyToken(reportCode).flatMapCompletable {
+                contactTracingRepository.notifyInfected(it.token, jwtTokenUtils.getOnset(it.token))
+            }.concatWith {
+                preferencesRepository.setInfectionReportDate(Date())
+                it.onComplete()
+            }
         }
 
-    }
-
     private fun getVerifyToken(reportCode: String): Observable<ResponseToken> {
         return Observable.create { emitter ->
             val result = apiRepository.verifyCode(RequestVerifyCode(null, reportCode))
diff --git a/app/src/main/java/es/gob/radarcovid/features/worker/FakeInfectionReportWorker.kt b/app/src/main/java/es/gob/radarcovid/features/worker/FakeInfectionReportWorker.kt
new file mode 100644
index 00000000..321cc1df
--- /dev/null
+++ b/app/src/main/java/es/gob/radarcovid/features/worker/FakeInfectionReportWorker.kt
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2020 Gobierno de España
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at https://mozilla.org/MPL/2.0/.
+ *
+ * SPDX-License-Identifier: MPL-2.0
+ */
+
+package es.gob.radarcovid.features.worker
+
+import android.content.Context
+import androidx.work.*
+import dagger.android.HasAndroidInjector
+import es.gob.radarcovid.datamanager.usecase.ReportFakeInfectionUseCase
+import org.dpppt.android.sdk.BuildConfig
+import org.dpppt.android.sdk.DP3T
+import java.util.concurrent.TimeUnit
+import javax.inject.Inject
+import kotlin.random.Random
+
+class FakeInfectionReportWorker(context: Context, workerParams: WorkerParameters) :
+    Worker(context, workerParams) {
+
+    init {
+        (context.applicationContext as? HasAndroidInjector)
+            ?.androidInjector()
+            ?.inject(this)
+    }
+
+    companion object {
+
+        private const val TAG = "FakeInfectionReportWorker"
+
+        fun start(context: Context) {
+            start(context, getRandomDelay(), ExistingWorkPolicy.KEEP)
+        }
+
+        private fun start(
+            context: Context,
+            delayInMinutes: Long,
+            existingWorkPolicy: ExistingWorkPolicy
+        ) {
+            val constraints = Constraints.Builder()
+                .setRequiredNetworkType(NetworkType.CONNECTED)
+                .build()
+            val work =
+                OneTimeWorkRequest
+                    .Builder(FakeInfectionReportWorker::class.java)
+                    .setInitialDelay(delayInMinutes, TimeUnit.MINUTES)
+                    .setConstraints(constraints)
+                    .build()
+            WorkManager.getInstance(context)
+                .enqueueUniqueWork(TAG, existingWorkPolicy, work)
+        }
+
+        private fun getRandomDelay(): Long = Random.nextLong(180, 360)
+
+    }
+
+    @Inject
+    lateinit var reportFakeInfectionUseCase: ReportFakeInfectionUseCase
+
+    override fun doWork(): Result {
+        if (BuildConfig.DEBUG)
+            DP3T.addWorkerStartedToHistory(applicationContext, TAG)
+        reportFakeInfectionUseCase.reportFakeInfection().subscribe()
+        start(applicationContext, getRandomDelay(), ExistingWorkPolicy.APPEND)
+        return Result.success()
+    }
+    
+}
\ No newline at end of file
