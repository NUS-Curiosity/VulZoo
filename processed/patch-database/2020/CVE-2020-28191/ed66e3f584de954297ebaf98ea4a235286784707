diff --git a/console/pom.xml b/console/pom.xml
index 2b5b4745f..3646d3718 100644
--- a/console/pom.xml
+++ b/console/pom.xml
@@ -77,5 +77,11 @@
       <version>6.0.0</version>
     </dependency>
 
+    <dependency>
+      <groupId>org.apache.commons</groupId>
+      <artifactId>commons-collections4</artifactId>
+      <version>4.4</version>
+    </dependency>
+
   </dependencies>
 </project>
diff --git a/console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java b/console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java
index bc4797701..59edd7212 100644
--- a/console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java
+++ b/console/src/main/java/org/togglz/console/handlers/edit/EditPageHandler.java
@@ -19,6 +19,7 @@
 
 import com.floreysoft.jmte.Engine;
 import org.togglz.core.util.Services;
+import org.togglz.servlet.spi.CSRFTokenValidator;
 
 public class EditPageHandler extends RequestHandlerBase {
 
@@ -37,7 +38,10 @@ public void process(RequestEvent event) throws IOException {
         FeatureManager featureManager = event.getFeatureManager();
         HttpServletRequest request = event.getRequest();
         HttpServletResponse response = event.getResponse();
-
+		if(!validateCSRFToken(event)) {
+			renderErrorPage(event);
+			return;
+		}
         // identify the feature
         Feature feature = null;
         String featureAsString = request.getParameter("f");
@@ -78,7 +82,6 @@ public void process(RequestEvent event) throws IOException {
                 response.sendRedirect("index");
 
             }
-
             // got validation errors
             else {
                 renderEditPage(event, featureModel);
@@ -88,6 +91,24 @@ public void process(RequestEvent event) throws IOException {
 
     }
 
+    private boolean validateCSRFToken(RequestEvent event) {
+    	boolean isValid = true;
+		for (CSRFTokenValidator validator : Services.get(CSRFTokenValidator.class)) {
+			if(!validator.isTokenValid(event.getRequest())){
+				isValid = false;
+				break;
+			}
+		}
+		return isValid;
+	}
+
+    private void renderErrorPage(RequestEvent event) throws IOException {
+		String template = getResourceAsString("error.html");
+		String content = new Engine().transform(template, new HashMap<>());
+		event.getResponse().setStatus(401);
+		writeResponse(event, content);
+	}
+
     private void renderEditPage(RequestEvent event, FeatureModel featureModel) throws IOException {
         List<CSRFToken> tokens = new ArrayList<>();
         for (CSRFTokenProvider provider : Services.get(CSRFTokenProvider.class)) {
@@ -96,7 +117,6 @@ private void renderEditPage(RequestEvent event, FeatureModel featureModel) throw
                 tokens.add(token);
             }
         }
-
         Map<String, Object> model = new HashMap<>();
         model.put("model", featureModel);
         model.put("tokens", tokens);
diff --git a/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenCache.java b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenCache.java
new file mode 100644
index 000000000..6d5dc78fe
--- /dev/null
+++ b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenCache.java
@@ -0,0 +1,32 @@
+package org.togglz.console.security;
+
+import java.util.HashMap;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.commons.collections4.map.PassiveExpiringMap;
+import org.togglz.servlet.spi.CSRFToken;
+
+public class TogglzCSRFTokenCache {
+
+	private static final PassiveExpiringMap<String, CSRFToken> expiringMap;
+	private static final Object lock = new Object();
+	static {
+		PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, CSRFToken>
+				expirationPolicy = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(
+				10, TimeUnit.MINUTES);
+		expiringMap = new PassiveExpiringMap<>(expirationPolicy, new HashMap<>());
+	}
+
+	public static void cacheToken(CSRFToken token) {
+		synchronized (lock) {
+			expiringMap.put(token.getValue(), token);
+		}
+	}
+
+	public static boolean isTokenInCache(CSRFToken token) {
+		synchronized (lock) {
+			return expiringMap.containsKey(token.getValue());
+		}
+	}
+	
+}
\ No newline at end of file
diff --git a/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenProvider.java b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenProvider.java
new file mode 100644
index 000000000..958a1fc24
--- /dev/null
+++ b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenProvider.java
@@ -0,0 +1,25 @@
+package org.togglz.console.security;
+
+import java.util.UUID;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.togglz.servlet.spi.CSRFToken;
+import org.togglz.servlet.spi.CSRFTokenProvider;
+
+import static org.togglz.console.security.TogglzCSRFTokenValidator.CSRF_TOKEN_NAME;
+
+public class TogglzCSRFTokenProvider implements CSRFTokenProvider {
+
+	@Override
+	public CSRFToken getToken(HttpServletRequest request) {
+		CSRFToken token;
+		if (request.getAttribute(CSRF_TOKEN_NAME) == null) {
+			token = new CSRFToken(CSRF_TOKEN_NAME, UUID.randomUUID().toString());
+			TogglzCSRFTokenCache.cacheToken(token);
+		} else {
+			token = new CSRFToken(CSRF_TOKEN_NAME, request.getAttribute(CSRF_TOKEN_NAME).toString());
+		}
+		return token;
+	}
+}
\ No newline at end of file
diff --git a/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenValidator.java b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenValidator.java
new file mode 100644
index 000000000..5b964d094
--- /dev/null
+++ b/console/src/main/java/org/togglz/console/security/TogglzCSRFTokenValidator.java
@@ -0,0 +1,22 @@
+package org.togglz.console.security;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.togglz.servlet.spi.CSRFToken;
+import org.togglz.servlet.spi.CSRFTokenValidator;
+
+public class TogglzCSRFTokenValidator implements CSRFTokenValidator {
+
+
+	public static final String CSRF_TOKEN_NAME = "togglz_csrf";
+
+	@Override
+	public boolean isTokenValid(HttpServletRequest request) {
+		String token = request.getParameter(CSRF_TOKEN_NAME);
+		if(token==null) {
+			return false;
+		} else {
+			return TogglzCSRFTokenCache.isTokenInCache(new CSRFToken(CSRF_TOKEN_NAME,token));
+		}
+	}
+}
diff --git a/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenProvider b/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenProvider
new file mode 100644
index 000000000..782a4c5dc
--- /dev/null
+++ b/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenProvider
@@ -0,0 +1 @@
+org.togglz.console.security.TogglzCSRFTokenProvider
\ No newline at end of file
diff --git a/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenValidator b/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenValidator
new file mode 100644
index 000000000..d984ff63b
--- /dev/null
+++ b/console/src/main/resources/META-INF/services/org.togglz.servlet.spi.CSRFTokenValidator
@@ -0,0 +1 @@
+org.togglz.console.security.TogglzCSRFTokenValidator
\ No newline at end of file
diff --git a/console/src/main/resources/org/togglz/console/error.html b/console/src/main/resources/org/togglz/console/error.html
new file mode 100644
index 000000000..83006afeb
--- /dev/null
+++ b/console/src/main/resources/org/togglz/console/error.html
@@ -0,0 +1,4 @@
+<div style="text-align: center;">
+    <h1>ERROR</h1>
+    <h1><small>Invalid CSRF Token, please refresh browser from the main Togglz page.</small></h1>
+</div>
\ No newline at end of file
diff --git a/console/src/main/resources/org/togglz/console/index.html b/console/src/main/resources/org/togglz/console/index.html
index b76ea351b..4d8fea621 100644
--- a/console/src/main/resources/org/togglz/console/index.html
+++ b/console/src/main/resources/org/togglz/console/index.html
@@ -67,8 +67,7 @@
                 ${end}
               </td>
               <td class="feature-actions">
-                <a class="btn btn-sm btn-default" href="edit?f=${feature.name}" title="Edit ${feature.label} feature">
-                  <span class="glyphicon glyphicon-cog text-muted"></span>
+                  <a class="btn btn-sm btn-default" href="edit?f=${feature.name}${foreach tokens token}${if token.name = "togglz_csrf"}&${token.name}=${token.value}${end}${end}" title="Edit ${feature.label} feature">                  <span class="glyphicon glyphicon-cog text-muted"></span>
                 </a>
               </td>
             </tr>
diff --git a/servlet/src/main/java/org/togglz/servlet/spi/CSRFTokenValidator.java b/servlet/src/main/java/org/togglz/servlet/spi/CSRFTokenValidator.java
new file mode 100644
index 000000000..99ff44222
--- /dev/null
+++ b/servlet/src/main/java/org/togglz/servlet/spi/CSRFTokenValidator.java
@@ -0,0 +1,9 @@
+package org.togglz.servlet.spi;
+
+import javax.servlet.http.HttpServletRequest;
+
+public interface CSRFTokenValidator {
+
+
+	boolean isTokenValid(HttpServletRequest request);
+}
