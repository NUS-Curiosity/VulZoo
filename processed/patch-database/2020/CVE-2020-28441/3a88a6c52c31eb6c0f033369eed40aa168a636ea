diff --git a/conf-cfg-ini.js b/conf-cfg-ini.js
index adbd4da..fe89449 100644
--- a/conf-cfg-ini.js
+++ b/conf-cfg-ini.js
@@ -35,6 +35,7 @@ Config.prototype.decode = function(data){
             throw new Error('expecting string but got '+typeof data);
         }
     }
+    var protectedKeys = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', '__proto__'];
     var result = {};
     var currentSection = undefined;
     var lines = data.split(this.options.lineEnding);
@@ -51,7 +52,7 @@ Config.prototype.decode = function(data){
         var newSection = line.match(sectionRegExp);
         if(newSection !== null){
             currentSection = newSection[1];
-            if(typeof result[currentSection] === 'undefined'){
+            if(typeof result[currentSection] === 'undefined' && !protectedKeys.includes(currentSection)){
                 result[currentSection] = {};
             }
             continue;
@@ -78,6 +79,9 @@ Config.prototype.decode = function(data){
         if (typeof this.options.valueIdentifier === 'string') {
             value = this.valueTrim(value, this.options.valueIdentifier);
         }
+        if (protectedKeys.includes(currentSection) || protectedKeys.includes(key)) {
+            continue;
+        }
         if(typeof currentSection === 'undefined'){
             result[key] = value;
         } else {
diff --git a/conf-cfg-ini.spec.js b/conf-cfg-ini.spec.js
index 0ea853b..af718b7 100644
--- a/conf-cfg-ini.spec.js
+++ b/conf-cfg-ini.spec.js
@@ -112,6 +112,16 @@ describe('Config', function() {
         expect(result.Section.foo).to.equal("bar");
     });
 
+    it('decode should prevent prototype pollution attacks', function () {
+        var config = new Config();
+        config.options.lineEnding = "\n";
+        config.options.assignIdentifier = ":";
+        var result = config.decode("[__proto__]\nfoo:bar\n");
+        should.not.exist(result.__proto__.foo);
+        result = config.decode("[Section]\n__proto__:bar\n");
+        expect(result.Section.__proto__).to.not.equal("bar");
+    });
+
     it('valueTrim should trim custom chars', function () {
         var config = new Config();
         expect(config.valueTrim('"Te"s"t"', '"')).to.equal('Te"s"t');
