diff --git a/src/Plugins/SmartStore.DevTools/Models/BackendExtensionModel.cs b/src/Plugins/SmartStore.DevTools/Models/BackendExtensionModel.cs
index 7de7bbe5e1..949444fe06 100644
--- a/src/Plugins/SmartStore.DevTools/Models/BackendExtensionModel.cs
+++ b/src/Plugins/SmartStore.DevTools/Models/BackendExtensionModel.cs
@@ -2,10 +2,10 @@
 
 namespace SmartStore.DevTools.Models
 {
+	[CustomModelPart]
 	public class BackendExtensionModel : ModelBase
 	{
 		public string Welcome { get; set; }
-
         public int ProductId { get; set; }
     }
 }
\ No newline at end of file
diff --git a/src/Plugins/SmartStore.GoogleMerchantCenter/Models/FeedGoogleMerchantCenterModel.cs b/src/Plugins/SmartStore.GoogleMerchantCenter/Models/FeedGoogleMerchantCenterModel.cs
index 973d44f295..530d8bea2d 100644
--- a/src/Plugins/SmartStore.GoogleMerchantCenter/Models/FeedGoogleMerchantCenterModel.cs
+++ b/src/Plugins/SmartStore.GoogleMerchantCenter/Models/FeedGoogleMerchantCenterModel.cs
@@ -19,6 +19,7 @@ public class FeedGoogleMerchantCenterModel
 		public string SearchIsTouched { get; set; }
 	}
 
+	[CustomModelPart]
 	public class GoogleProductModel : ModelBase
 	{
 		public int TotalCount { get; set; }
diff --git a/src/Presentation/SmartStore.Web.Framework/Modelling/ModelBase.cs b/src/Presentation/SmartStore.Web.Framework/Modelling/ModelBase.cs
index 68dfb6bdfb..2d81d39f80 100644
--- a/src/Presentation/SmartStore.Web.Framework/Modelling/ModelBase.cs
+++ b/src/Presentation/SmartStore.Web.Framework/Modelling/ModelBase.cs
@@ -6,7 +6,12 @@
 
 namespace SmartStore.Web.Framework.Modelling
 {
-    [Serializable]
+    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
+	public sealed class CustomModelPartAttribute : Attribute
+    {
+    }
+	
+	[Serializable]
 	public sealed class CustomPropertiesDictionary : Dictionary<string, object>
 	{
 	}
@@ -41,9 +46,8 @@ public TProperty Get<TProperty>(string key)
 			Guard.NotEmpty(key, nameof(key));
 
 			IDictionary<string, object> dict;
-			object value;
 
-			if (TryGetCustomThreadProperties(false, out dict) && dict.TryGetValue(key, out value))
+			if (TryGetCustomThreadProperties(false, out dict) && dict.TryGetValue(key, out var value))
 			{
 				return (TProperty)value;
 			}
diff --git a/src/Presentation/SmartStore.Web.Framework/Modelling/SmartModelBinder.cs b/src/Presentation/SmartStore.Web.Framework/Modelling/SmartModelBinder.cs
index fef277e4da..95e98bdc8b 100644
--- a/src/Presentation/SmartStore.Web.Framework/Modelling/SmartModelBinder.cs
+++ b/src/Presentation/SmartStore.Web.Framework/Modelling/SmartModelBinder.cs
@@ -2,6 +2,7 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Linq;
+using System.Security;
 using System.Web.Mvc;
 using SmartStore.Core.Html;
 using SmartStore.Web.Framework.Security;
@@ -82,6 +83,13 @@ private CustomPropertiesDictionary BindCustomPropertiesDictioary(ControllerConte
 					// Is Complex type
 					var modelName = key.Substring(0, key.Length - subPropertyName.Length - 1);
 					var valueType = GetValueType(keys, modelName, bindingContext.ValueProvider);
+					if (!valueType.HasAttribute<CustomModelPartAttribute>(false))
+                    {
+						throw new SecurityException("For security reasons complex types in '{0}' must be decorated with the '{1}' attribute.".FormatInvariant(
+							typeof(CustomPropertiesDictionary).AssemblyQualifiedNameWithoutVersion(), 
+							typeof(CustomModelPartAttribute).AssemblyQualifiedNameWithoutVersion()));
+                    }
+
 					valueBinder = this.Binders.GetBinder(valueType);
 					var complexBindingContext = new ModelBindingContext
 					{
