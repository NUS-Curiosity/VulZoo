diff --git a/native/ios/WatermelonDB/DatabaseDriver.swift b/native/ios/WatermelonDB/DatabaseDriver.swift
index fe00a03a0..4be8015ec 100644
--- a/native/ios/WatermelonDB/DatabaseDriver.swift
+++ b/native/ios/WatermelonDB/DatabaseDriver.swift
@@ -128,8 +128,8 @@ class DatabaseDriver {
 
     func destroyDeletedRecords(table: Database.TableName, records: [RecordId]) throws {
         // TODO: What's the behavior if record doesn't exist or isn't actually deleted?
-        let recordIds = records.map { id in "'\(id)'" }.joined(separator: ",")
-        try database.execute("delete from \(table) where id in (\(recordIds))")
+        let recordPlaceholders = records.map { _ in "?" }.joined(separator: ",")
+        try database.execute("delete from \(table) where id in (\(recordPlaceholders))", records)
     }
 
 // MARK: - LocalStorage
diff --git a/src/adapters/__tests__/commonTests.js b/src/adapters/__tests__/commonTests.js
index 69ee9c3aa..ad0c23a26 100644
--- a/src/adapters/__tests__/commonTests.js
+++ b/src/adapters/__tests__/commonTests.js
@@ -439,6 +439,31 @@ export default () => [
       expect(await adapter.find('tasks', 't2')).toBeNull()
     },
   ],
+  [
+    'destroyDeletedRecords can handle unsafe strings',
+    async adapter => {
+      const m1 = mockTaskRaw({ id: 't1', text1: 'bar1', order: 1 })
+      const m2 = mockTaskRaw({ id: 't2', text1: 'bar2', order: 2 })
+      const m3 = mockTaskRaw({ id: 't3', text1: 'bar3', order: 3 })
+      await adapter.batch([
+        ['create', 'tasks', m1],
+        ['create', 'tasks', m2],
+        ['create', 'tasks', m3],
+      ])
+      await adapter.batch([
+        ['markAsDeleted', 'tasks', m1.id],
+        ['markAsDeleted', 'tasks', m2.id],
+        ['markAsDeleted', 'tasks', m3.id],
+      ])
+
+      await adapter.destroyDeletedRecords('tasks', ['\') or 1=1 --'])
+      expectSortedEqual(await adapter.getDeletedRecords('tasks'), ['t1', 't2', 't3'])
+      expectSortedEqual(await adapter.query(taskQuery()), [])
+
+      await adapter.destroyDeletedRecords('tasks', ['\'); insert into tasks (id) values (\'t4\') --'])
+      expectSortedEqual(await adapter.query(taskQuery()), [])
+    },
+  ],
   [
     'can run mixed batches',
     async _adapter => {
