diff --git a/hphp/runtime/ext/wddx/ext_wddx.cpp b/hphp/runtime/ext/wddx/ext_wddx.cpp
index 4cf4f3802f5ce..7ab7af053312c 100644
--- a/hphp/runtime/ext/wddx/ext_wddx.cpp
+++ b/hphp/runtime/ext/wddx/ext_wddx.cpp
@@ -66,22 +66,43 @@ bool WddxPacket::serialize_value(const Variant& varVariant) {
 bool WddxPacket::recursiveAddVar(const String& varName,
                                  const Variant& varVariant,
                                  bool hasVarTag) {
+  SeenContainers seen;
+  return recursiveAddVarImpl(varName, varVariant, hasVarTag, seen);
+}
 
+bool WddxPacket::recursiveAddVarImpl(const String& varName,
+                                     const Variant& varVariant,
+                                     bool hasVarTag,
+                                     SeenContainers& seen) {
   bool isArray = varVariant.isArray();
   bool isObject = varVariant.isObject();
 
   if (isArray || isObject) {
+    Array varAsArray;
+    Object varAsObject;
+    ArrayOrObject ptr;
+    if (isArray) {
+      varAsArray = varVariant.toArray();
+      ptr = varAsArray.get();
+    }
+    if (isObject) {
+      varAsObject = varVariant.toObject();
+      varAsArray = varAsObject.toArray();
+      ptr = varAsObject.get();
+    }
+    assert(!ptr.isNull());
+    if (!seen.emplace(ptr).second) {
+      raise_warning("recursion detected");
+      return false;
+    }
+    SCOPE_EXIT { seen.erase(ptr); };
+
     if (hasVarTag) {
       m_packetString.append("<var name='");
       m_packetString.append(varName.data());
       m_packetString.append("'>");
     }
 
-    Array varAsArray;
-    Object varAsObject = varVariant.toObject();
-    if (isArray) varAsArray = varVariant.toArray();
-    if (isObject) varAsArray = varAsObject.toArray();
-
     int length = varAsArray.length();
     if (length > 0) {
       ArrayIter it = ArrayIter(varAsArray);
@@ -99,9 +120,9 @@ bool WddxPacket::recursiveAddVar(const String& varName,
         m_packetString.append("'>");
       }
       for (ArrayIter it(varAsArray); it; ++it) {
-        Variant key = it.first();
-        Variant value = it.second();
-        recursiveAddVar(key.toString(), value, isObject);
+        auto key = it.first();
+        auto const& value = it.secondRef();
+        recursiveAddVarImpl(key.toString(), value, isObject, seen);
       }
       if (isObject) {
         m_packetString.append("</struct>");
diff --git a/hphp/runtime/ext/wddx/ext_wddx.h b/hphp/runtime/ext/wddx/ext_wddx.h
index 82208e923b968..f184d90bac076 100644
--- a/hphp/runtime/ext/wddx/ext_wddx.h
+++ b/hphp/runtime/ext/wddx/ext_wddx.h
@@ -38,7 +38,7 @@ struct WddxPacket : ResourceData {
   String packet_end();
   bool serialize_value(const Variant& varVariant);
   bool recursiveAddVar(const String& varName, const Variant& varVariant,
-                       bool hasVarTag );
+                       bool hasVarTag);
 
  private:
   String getWddxEncoded(const String& varType,
@@ -52,6 +52,17 @@ struct WddxPacket : ResourceData {
                    const String& varName,
                    bool hasVarTag);
 
+  using ArrayOrObject = Either<ArrayData*,ObjectData*>;
+  struct EitherHash {
+    size_t operator()(const ArrayOrObject data) const {
+      return data.toOpaque();
+    }
+  };
+  using SeenContainers = req::hash_set<ArrayOrObject, EitherHash>;
+
+  bool recursiveAddVarImpl(const String& varName, const Variant& varVariant,
+                           bool hasVarTag, SeenContainers& seen);
+
   StringBuffer m_packetString;
   bool m_packetClosed;
   bool m_manualPacketCreation;
diff --git a/hphp/test/slow/ext_wddx/recursion.php b/hphp/test/slow/ext_wddx/recursion.php
new file mode 100644
index 0000000000000..f3f23a5f2f53e
--- /dev/null
+++ b/hphp/test/slow/ext_wddx/recursion.php
@@ -0,0 +1,7 @@
+<?php
+$s1 = wddx_serialize_value(function () {});
+var_dump($s1);
+
+$a = []; $a[] =& $a;
+$s2 = wddx_serialize_value($a);
+var_dump($s2);
diff --git a/hphp/test/slow/ext_wddx/recursion.php.expectf b/hphp/test/slow/ext_wddx/recursion.php.expectf
new file mode 100644
index 0000000000000..d9c6009b90ace
--- /dev/null
+++ b/hphp/test/slow/ext_wddx/recursion.php.expectf
@@ -0,0 +1,6 @@
+
+Warning: recursion detected in %s/recursion.php on line 2
+string(%d) "<wddxPacket version='1.0'><header/><data><struct><var name='php_class_name'><string>Closure$;%s$%s$</string></var></struct></data></wddxPacket>"
+
+Warning: recursion detected in %s/recursion.php on line 6
+string(87) "<wddxPacket version='1.0'><header/><data><array length='1'></array></data></wddxPacket>"
