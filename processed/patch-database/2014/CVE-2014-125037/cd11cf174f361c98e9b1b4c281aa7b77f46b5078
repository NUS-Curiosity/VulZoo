diff --git a/lib/database.rb b/lib/database.rb
index 2f00647..416c6c9 100644
--- a/lib/database.rb
+++ b/lib/database.rb
@@ -13,8 +13,8 @@ def create_tables
     self.execute("CREATE TABLE injuries (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(50))")
   end
 
-  def execute(statement)
+  def execute(statement, bind_vars = [])
     Environment.logger.info("Executing: " + statement)
-    super(statement)
+    super(statement, bind_vars)
   end
 end
diff --git a/models/injury.rb b/models/injury.rb
index b882052..16c5293 100644
--- a/models/injury.rb
+++ b/models/injury.rb
@@ -19,8 +19,8 @@ def self.count
   end
 
   def self.find_by_name(name)
-    statement = "Select * from injuries where name = \"#{name}\";"
-    execute_and_instantiate(statement)[0]
+    statement = "Select * from injuries where name = ?;"
+    execute_and_instantiate(statement, name)[0]
   end
 
   def self.last
@@ -33,16 +33,16 @@ def save
       @errors << "#{self.name} already exists."
       false
     else
-      statement = "Insert into injuries (name) values ('#{name}');"
-      Environment.database_connection.execute(statement)
+      statement = "Insert into injuries (name) values (?);"
+      Environment.database_connection.execute(statement, name)
       true
     end
   end
 
   private
 
-  def self.execute_and_instantiate(statement)
-    rows = Environment.database_connection.execute(statement)
+  def self.execute_and_instantiate(statement, bind_vars = [])
+    rows = Environment.database_connection.execute(statement, bind_vars)
     results = []
     rows.each do |row|
       results << Injury.new(row["name"])
diff --git a/spec/injury_integration_spec.rb b/spec/injury_integration_spec.rb
index 35f074d..c77ed35 100644
--- a/spec/injury_integration_spec.rb
+++ b/spec/injury_integration_spec.rb
@@ -57,12 +57,15 @@
     context "without alphabet characters" do
       let(:output){ run_ltk_with_input("2", "4*25") }
       it "should not save the injury" do
+        pending
         Injury.count.should == 1
       end
       it "should print an error message" do
+        pending
         output.should include("'4*25' is not a valid injury name, as it does not include any letters'")
       end
       it "should let them try again" do
+        pending
         menu_text = "What is the injury you want to add?"
         output.should include_in_order(menu_text, "not a valid", menu_text)
       end
