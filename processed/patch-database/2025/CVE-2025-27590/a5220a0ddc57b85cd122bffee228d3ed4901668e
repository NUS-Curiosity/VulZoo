diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3ab6090..ccf670a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,6 +5,12 @@ All notable changes to this project will be documented in this file.
 The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/).
 
 ## [Unreleased]
+This release fixes a security issue on the RANCID migration page.
+A non-authenticated user could gain control over the Linux user running
+oxidized-web. The RANCID migration page was already deprecated in version
+0.14.0, so it has been completely removed in this new version.
+Thank you to Jon O'Reilly and Jamie Riden from NetSPI for discovering and
+reporting this security issue!
 
 ### Added
 
@@ -12,6 +18,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/).
 - Update datatables.net to 2.2.2 and datatables.net-buttons to 3.2.2 (@robertcheramy)
 - remove the RANCID migration page (@robertchreamy)
 - dependency on oxidized 0.31  (@robertchreamy)
+- Update datatables.net to 2.2.1 and datatables.net-buttons to 3.2.1 (@robertcheramy)
 
 ### Fixed
 - #302: group name containing a '/' produced a Sinatra error (@robertcheramy)
diff --git a/lib/oxidized/web/mig.rb b/lib/oxidized/web/mig.rb
deleted file mode 100644
index 500a62c..0000000
--- a/lib/oxidized/web/mig.rb
+++ /dev/null
@@ -1,140 +0,0 @@
-module Oxidized
-  module API
-    class Mig
-      def initialize(hash_router_db, cloginrc, path_new_router)
-        @hash_router_db = hash_router_db
-        @cloginrc = cloginrc
-        @path_new_router = path_new_router
-      end
-
-      # read cloginrc and return a hash with node name, which a hash value which contains user,
-      # password, eventually enable
-      def cloginrc(clogin_file)
-        close_file = clogin_file
-        file = close_file.read
-        file = file.gsub('add', '')
-
-        hash = {}
-        file.each_line do |line|
-          # stock all device name, and password and enable if there is one
-          line = line.split
-          (0..line.length).each do |i|
-            if line[i] == 'user'
-              # add the equipment and user if not exist
-              hash[line[i + 1]] = { user: line[i + 2] } unless hash[line[i + 1]]
-            # if the equipment exist, add password and enable password
-            elsif line[i] == 'password'
-              if hash[line[i + 1]]
-                if line.length > i + 2
-                  h = hash[line[i + 1]]
-                  h[:password] = line[i + 2]
-                  h[:enable] = line[i + 3] if /\s*/.match(line[i + 3])
-                  hash[line[i + 1]] = h
-                elsif line.length == i + 2
-                  h = hash[line[i + 1]]
-                  h[:password] = line[i + 2]
-                  hash[line[i + 1]] = h
-                end
-              end
-            end
-          end
-        end
-        close_file.close
-        hash
-      end
-
-      def model_dico(model)
-        dico = { 'cisco' => 'ios', 'foundry' => 'ironware' }
-        model = model.gsub("\n", '')
-        model = dico[model] if dico[model]
-        model
-      end
-
-      # add node and group for an equipment (take a list of router.db)
-      def rancid_group(router_db_list)
-        model = {}
-        hash = cloginrc @cloginrc
-        router_db_list.each do |router_db|
-          group = router_db[:group]
-          file_close = router_db[:file]
-          file = file_close.read
-          file = file.gsub(':up', '')
-          file.gsub(' ', '')
-
-          file.each_line do |line|
-            line = line.split(':')
-            node = line[0]
-            next unless hash[node]
-
-            h = hash[node]
-            model = model_dico line[1].to_s
-            h[:model] = model
-            h[:group] = group
-          end
-          file_close.close
-        end
-        hash
-      end
-
-      # write a router.db conf, need the hash and the path of the file we whish create
-      def write_router_db(hash)
-        router_db = File.new(@path_new_router, 'w')
-        hash.each do |key, value|
-          line = key.to_s
-          line += ":#{value[:model]}"
-          line += ":#{value[:user]}"
-          line += ":#{value[:password]}"
-          line += ":#{value[:group]}"
-          line += ":#{value[:enable]}" if value[:enable]
-          router_db.puts(line)
-        end
-        router_db.close
-      end
-
-      def edit_conf_file(path_conf, router_db_path)
-        file_close = File.open(path_conf, 'r')
-        file = file_close
-        file = file.read
-        source_reached = false
-        new_file = []
-        file.each_line do |line|
-          if source_reached
-            next unless /^\w/.match(line)
-
-            source_reached = false
-          end
-          new_file.push(line)
-          next unless /source:/.match(line)
-
-          source_reached = true
-          new_file.push("  default: csv\n")
-          new_file.push("  csv:\n")
-          new_file.push("    file: #{router_db_path}\n")
-          new_file.push("    delimiter: !ruby/regexp /:/\n")
-          new_file.push("    map:\n")
-          new_file.push("      name: 0\n")
-          new_file.push("      model: 1\n")
-          new_file.push("      username: 2\n")
-          new_file.push("      password: 3\n")
-          new_file.push("      group: 4\n")
-          new_file.push("    vars_map:\n")
-          new_file.push("      enable: 5\n")
-          next
-        end
-        file_close.close
-
-        new_conf = File.new(path_conf, "w")
-        new_file.each do |line|
-          new_conf.puts(line)
-        end
-        new_conf.close
-      end
-
-      def go_rancid_migration
-        hash = rancid_group @hash_router_db
-        write_router_db hash
-        edit_conf_file "#{Dir.home}/.config/oxidized/config", @path_new_router
-      end
-    end
-  end
-end
diff --git a/lib/oxidized/web/public/scripts/oxidized.js b/lib/oxidized/web/public/scripts/oxidized.js
index b638cd1..fdec131 100644
--- a/lib/oxidized/web/public/scripts/oxidized.js
+++ b/lib/oxidized/web/public/scripts/oxidized.js
@@ -1,30 +1,3 @@
-// Add a line for a new file to upload
-var add_file_upload = function() {
-  var rancidDbDiv = $("div[id^='rancidDb']:last");
-  var num = parseInt(rancidDbDiv.prop("id").match(/\d+/g)) + 1;
-  rancidDbDiv.clone(true)
-    .prop("id", "rancidDb" + num)
-    .insertAfter(rancidDbDiv);
-  $("input[id^='file']:last")
-    .prop("id", "file" + num)
-    .prop("name", "file" + num)
-    .parents('.input-group')
-    .find(':text')
-    .val('');
-  $("input[id^='group']:last")
-    .prop("id", "group" + num)
-    .prop("name", "group" + num);
-};
-
-var onFileSelected = function() {
-  $(document).on('change', '.btn-file :file', function() {
-    var input = $(this),
-        numFiles = input.get(0).files ? input.get(0).files.length : 1,
-        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
-    input.trigger('fileSelect', [numFiles, label]);
-  });
-};
-
 var convertTime = function() {
   /* Convert UTC times to local browser times
   *  Requires that the times on the server are UTC
@@ -51,15 +24,6 @@ var convertTime = function() {
 $(function() {
   onFileSelected();
   convertTime();
-  // Add a row to the migration form
-  $("#add").click(function() {
-    add_file_upload();
-  });
-
-  // Updates textbox with filename on fileSelect event
-  $('.btn-file :file').on('fileSelect', function(e, numFiles, label) {
-    $(this).parents('.input-group').find(':text').val(label);
-  });
 
   // Reloads the nodes from a source by calling the /reload.json URI
   $('#reload').click(function() {
diff --git a/lib/oxidized/web/public/scripts/script-migration.js b/lib/oxidized/web/public/scripts/script-migration.js
deleted file mode 100644
index 1012813..0000000
--- a/lib/oxidized/web/public/scripts/script-migration.js
+++ /dev/null
@@ -1,15 +0,0 @@
-var number = 1;
-
-function add_file_upload(){
-	number++;
-	document.getElementById('number').value = number;
-	var table = document.getElementById("files");
-	var row = table.insertRow(-1);
-	var group = row.insertCell(0);
-	group.id = "file";
-	var file = row.insertCell(1);
-	file.id = "file";
-	group.innerHTML = '<input type="text" name="group' + number +'" value="default">';
-	file.innerHTML = '<input type="file" name="file' + number +'" required >';
-	
-}
diff --git a/lib/oxidized/web/views/layout.haml b/lib/oxidized/web/views/layout.haml
index 2582257..5e94ecc 100644
--- a/lib/oxidized/web/views/layout.haml
+++ b/lib/oxidized/web/views/layout.haml
@@ -20,10 +20,6 @@
               %a.nav-link{class: request.path_info == '/nodes/stats' ? 'active' : '',
                             :'aria-current' => request.path_info == '/nodes/stats' ? 'page' : 'false',
                             href: url_for('/nodes/stats')} Stats
-            %li.nav-item
-              %a.nav-link{class: request.path_info == '/migration' ? 'active' : '',
-                            :'aria-current' => request.path_info == '/migration' ? 'page' : 'false',
-                            href: url_for('/migration')} Migration
           %form.d-flex{role: 'search',
                       action: url_for('/nodes/conf_search'),
                       method: 'post'}
diff --git a/lib/oxidized/web/views/migration.haml b/lib/oxidized/web/views/migration.haml
deleted file mode 100644
index e91d2f0..0000000
--- a/lib/oxidized/web/views/migration.haml
+++ /dev/null
@@ -1,53 +0,0 @@
-.alert.alert-warning
-  The RANCID migration tool is deprecated and will be removed in a future
-  release. If you still need it
-  %b and
-  are willing to maintain it, open an issue at
-  %a{href: 'https://github.com/ytti/oxidized-web/issues'}oxidized-web issues (github)
-
-%h2
-  RANCID to Oxidized
-  %small router.db and Group Migration
-%form.form-horizontal{method: 'post', enctype: 'multipart/form-data',
-                      role: 'form'}
-  .form-group
-    %label.col-sm-3{for: 'path_new_file'}
-      Oxidized router.db Path
-    .col-sm-3
-      %input.form-control{type: 'text', name: 'path_new_file',
-                          placeholder: 'Path/to_file/here.db'}
-  .form-group
-    %label.col-sm-3{for: 'clogrinc'} .cloginrc File
-    .col-sm-3
-      .input-group
-        %input.form-control{type: 'text'}
-        %span.input-group-btn
-          %span.btn.btn-default.btn-file
-            %input{type: 'file', name: 'cloginrc'}
-            Browse
-
-  .form-group
-    .col-sm-12
-      .row
-        %label.col-sm-3.label-control RANCID router.db File
-        %label.col-sm-3.label-control Device Group
-    .col-sm-12#rancid_routerdbs
-      .row#rancidDb1
-        .col-sm-3
-          .input-group
-            %input.form-control{type: 'text'}
-            %span.input-group-btn
-              %span.btn.btn-default.btn-file
-                %input#file1{type: 'file', name: 'file1', required: ''}
-                Browse
-        .col-sm-3
-          %input.form-control#group1{type: 'text', name: 'group1',
-                                     value: 'default'}
-      .row
-        .col-sm-3
-          %button.btn.btn-default#add{type: 'button'} Add More
-
-  .form-group
-    .col-sm-12
-      %button.btn.btn-primary#upload_button{type: 'submit'} Migrate!
-
diff --git a/lib/oxidized/web/webapp.rb b/lib/oxidized/web/webapp.rb
index e001cca..219cd08 100644
--- a/lib/oxidized/web/webapp.rb
+++ b/lib/oxidized/web/webapp.rb
@@ -6,7 +6,6 @@
 # rubocop:disable Lint/RedundantRequireStatement
 require 'pp'
 # rubocop:enable Lint/RedundantRequireStatement
-require 'oxidized/web/mig'
 require 'htmlentities'
 require 'charlock_holmes'
 module Oxidized
@@ -136,30 +135,6 @@ class WebApp < Sinatra::Base
         out :node
       end
 
-      # redirect to the web page for rancid - oxidized migration
-      get '/migration' do
-        out :migration
-      end
-
-      # get the files send
-      post '/migration' do
-        number = params[:number].to_i
-        cloginrc_file = params['cloginrc'][:tempfile]
-        path_new_file = params['path_new_file']
-
-        router_db_files = []
-
-        i = 1
-        while i <= number
-          router_db_files.push({ file: params["file#{i}"][:tempfile], group: params["group#{i}"] })
-          i += 1
-        end
-
-        migration = Mig.new(router_db_files, cloginrc_file, path_new_file)
-        migration.go_rancid_migration
-        redirect url_for('//nodes')
-      end
-
       # display the versions of a node
       # URL: /node/version[.json]?node_full=<GroupName/NodeName>
       get '/node/version.?:format?' do
