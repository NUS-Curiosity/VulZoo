diff --git a/redash/query_runner/__init__.py b/redash/query_runner/__init__.py
index 66dfa6e4374..6f8ef389b18 100644
--- a/redash/query_runner/__init__.py
+++ b/redash/query_runner/__init__.py
@@ -13,7 +13,8 @@
 from redash.utils import json_loads, query_is_select_no_limit, add_limit_to_query
 from rq.timeouts import JobTimeoutException
 
-from redash.utils.requests_session import requests, requests_session
+from redash.utils.requests_session import requests_or_advocate, requests_session, UnacceptableAddressException
+
 
 logger = logging.getLogger(__name__)
 
@@ -236,12 +237,6 @@ def apply_auto_limit(self, query_text, should_apply_auto_limit):
             return query_text
 
 
-def is_private_address(url):
-    hostname = urlparse(url).hostname
-    ip_address = socket.gethostbyname(hostname)
-    return ipaddress.ip_address(text_type(ip_address)).is_private
-
-
 class BaseHTTPQueryRunner(BaseQueryRunner):
     should_annotate_query = False
     response_error = "Endpoint returned unexpected status code"
@@ -285,8 +280,6 @@ def get_auth(self):
             return None
 
     def get_response(self, url, auth=None, http_method="get", **kwargs):
-        if is_private_address(url) and settings.ENFORCE_PRIVATE_ADDRESS_BLOCK:
-            raise Exception("Can't query private addresses.")
 
         # Get authentication values if not given
         if auth is None:
@@ -307,12 +300,15 @@ def get_response(self, url, auth=None, http_method="get", **kwargs):
             if response.status_code != 200:
                 error = "{} ({}).".format(self.response_error, response.status_code)
 
-        except requests.HTTPError as exc:
+        except requests_or_advocate.HTTPError as exc:
             logger.exception(exc)
             error = "Failed to execute query. " "Return Code: {} Reason: {}".format(
                 response.status_code, response.text
             )
-        except requests.RequestException as exc:
+        except UnacceptableAddressException as exc:
+            logger.exception(exc)
+            error = "Can't query private addresses."
+        except requests_or_advocate.RequestException as exc:
             # Catch all other requests exceptions and return the error.
             logger.exception(exc)
             error = str(exc)
diff --git a/redash/query_runner/csv.py b/redash/query_runner/csv.py
index 8514868e2d5..22aa148d579 100644
--- a/redash/query_runner/csv.py
+++ b/redash/query_runner/csv.py
@@ -1,9 +1,9 @@
 import logging
 import yaml
-import requests
 import io
 
-from redash import settings
+from redash.utils.requests_session import requests_or_advocate, UnacceptableAddressException
+
 from redash.query_runner import *
 from redash.utils import json_dumps
 
@@ -52,14 +52,11 @@ def run_query(self, query, user):
             args.pop('url', None)
             ua = args['user-agent']
             args.pop('user-agent', None)
-
-            if is_private_address(path) and settings.ENFORCE_PRIVATE_ADDRESS_BLOCK:
-                raise Exception("Can't query private addresses.")
         except:
             pass
 
         try:
-            response = requests.get(url=path, headers={"User-agent": ua})
+            response = requests_or_advocate.get(url=path, headers={"User-agent": ua})
             workbook = pd.read_csv(io.BytesIO(response.content),sep=",", **args)
 
             df = workbook.copy()
@@ -88,6 +85,9 @@ def run_query(self, query, user):
         except KeyboardInterrupt:
             error = "Query cancelled by user."
             json_data = None
+        except UnacceptableAddressException:
+            error = "Can't query private addresses."
+            json_data = None
         except Exception as e:
             error = "Error reading {0}. {1}".format(path, str(e))
             json_data = None
diff --git a/redash/query_runner/excel.py b/redash/query_runner/excel.py
index a58c23ac977..792a821bcd4 100644
--- a/redash/query_runner/excel.py
+++ b/redash/query_runner/excel.py
@@ -1,8 +1,8 @@
 import logging
 import yaml
-import requests
 
-from redash import settings
+from redash.utils.requests_session import requests_or_advocate, UnacceptableAddressException
+
 from redash.query_runner import *
 from redash.utils import json_dumps
 
@@ -49,13 +49,11 @@ def run_query(self, query, user):
             ua = args['user-agent']
             args.pop('user-agent', None)
 
-            if is_private_address(path) and settings.ENFORCE_PRIVATE_ADDRESS_BLOCK:
-                raise Exception("Can't query private addresses.")
         except:
             pass
 
         try:
-            response = requests.get(url=path, headers={"User-agent": ua})
+            response = requests_or_advocate.get(url=path, headers={"User-agent": ua})
             workbook = pd.read_excel(response.content, **args)
 
             df = workbook.copy()
@@ -84,6 +82,9 @@ def run_query(self, query, user):
         except KeyboardInterrupt:
             error = "Query cancelled by user."
             json_data = None
+        except UnacceptableAddressException:
+            error = "Can't query private addresses."
+            json_data = None
         except Exception as e:
             error = "Error reading {0}. {1}".format(path, str(e))
             json_data = None
diff --git a/redash/query_runner/json_ds.py b/redash/query_runner/json_ds.py
index ed8562bcc46..a6cf42eb5ee 100644
--- a/redash/query_runner/json_ds.py
+++ b/redash/query_runner/json_ds.py
@@ -2,7 +2,9 @@
 import yaml
 import datetime
 from funcy import compact, project
-from redash import settings
+
+from redash.utils.requests_session import requests_or_advocate, UnacceptableAddressException
+
 from redash.utils import json_dumps
 from redash.query_runner import (
     BaseHTTPQueryRunner,
@@ -12,7 +14,6 @@
     TYPE_FLOAT,
     TYPE_INTEGER,
     TYPE_STRING,
-    is_private_address,
 )
 
 
@@ -163,8 +164,6 @@ def run_query(self, query, user):
         if "url" not in query:
             raise QueryParseError("Query must include 'url' option.")
 
-        if is_private_address(query["url"]) and settings.ENFORCE_PRIVATE_ADDRESS_BLOCK:
-            raise Exception("Can't query private addresses.")
 
         method = query.get("method", "get")
         request_options = project(query, ("params", "headers", "data", "auth", "json"))
diff --git a/redash/utils/requests_session.py b/redash/utils/requests_session.py
index e59731b0e6c..f38133a9a40 100644
--- a/redash/utils/requests_session.py
+++ b/redash/utils/requests_session.py
@@ -1,8 +1,14 @@
-import requests
 from redash import settings
 
+from advocate.exceptions import UnacceptableAddressException
+if settings.ENFORCE_PRIVATE_ADDRESS_BLOCK:
+    import advocate as requests_or_advocate
+else:
+    import requests as requests_or_advocate
 
-class ConfiguredSession(requests.Session):
+
+
+class ConfiguredSession(requests_or_advocate.Session):
     def request(self, *args, **kwargs):
         if not settings.REQUESTS_ALLOW_REDIRECTS:
             kwargs.update({"allow_redirects": False})
diff --git a/requirements_all_ds.txt b/requirements_all_ds.txt
index f0ad7913a13..b64ae2eae45 100644
--- a/requirements_all_ds.txt
+++ b/requirements_all_ds.txt
@@ -41,3 +41,4 @@ cmem-cmempy==21.2.3
 xlrd==2.0.1
 openpyxl==3.0.7
 firebolt-sqlalchemy
+advocate==1.0.0
\ No newline at end of file
diff --git a/tests/query_runner/test_http.py b/tests/query_runner/test_http.py
index 00ab6500c24..1eb499eaae8 100644
--- a/tests/query_runner/test_http.py
+++ b/tests/query_runner/test_http.py
@@ -1,7 +1,7 @@
 import mock
 from unittest import TestCase
 
-from redash.utils.requests_session import requests, ConfiguredSession
+from redash.utils.requests_session import requests_or_advocate, ConfiguredSession
 from redash.query_runner import BaseHTTPQueryRunner
 
 
@@ -84,7 +84,7 @@ def test_get_response_httperror_exception(self, mock_get):
         mock_response = mock.Mock()
         mock_response.status_code = 500
         mock_response.text = "Server Error"
-        http_error = requests.HTTPError()
+        http_error = requests_or_advocate.HTTPError()
         mock_response.raise_for_status.side_effect = http_error
         mock_get.return_value = mock_response
 
@@ -101,7 +101,7 @@ def test_get_response_requests_exception(self, mock_get):
         mock_response.status_code = 500
         mock_response.text = "Server Error"
         exception_message = "Some requests exception"
-        requests_exception = requests.RequestException(exception_message)
+        requests_exception = requests_or_advocate.RequestException(exception_message)
         mock_response.raise_for_status.side_effect = requests_exception
         mock_get.return_value = mock_response
 
