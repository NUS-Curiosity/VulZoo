diff --git a/src/Contracts/index.ts b/src/Contracts/index.ts
index 08e4959..c4e723d 100644
--- a/src/Contracts/index.ts
+++ b/src/Contracts/index.ts
@@ -207,7 +207,7 @@ export interface TemplateContract {
   /**
    * Escape input
    */
-  escape<T>(input: T): T
+  escape(input: any): string
 
   /**
    * Rethrow exceptions by pointing back to edge source file and line number
diff --git a/src/Template/index.ts b/src/Template/index.ts
index 52ea4cd..fbc1145 100644
--- a/src/Template/index.ts
+++ b/src/Template/index.ts
@@ -28,12 +28,8 @@ export class SafeValue {
 /**
  * Escapes a given string
  */
-export function escape<T>(input: T): T extends SafeValue ? T['value'] : T {
-  return typeof input === 'string'
-    ? string.escapeHTML(input)
-    : input instanceof SafeValue
-    ? input.value
-    : input
+export function escape(input: any): string {
+  return input instanceof SafeValue ? input.value : string.escapeHTML(String(input))
 }
 
 /**
@@ -197,7 +193,7 @@ export class Template extends Macroable implements TemplateContract {
    * Escapes the value to be HTML safe. Only strings are escaped
    * and rest all values will be returned as it is.
    */
-  public escape<T>(input: T): T extends SafeValue ? T['value'] : T {
+  public escape(input: any): string {
     return escape(input)
   }
 
diff --git a/test/template.spec.ts b/test/template.spec.ts
index ab1c064..49f92bc 100644
--- a/test/template.spec.ts
+++ b/test/template.spec.ts
@@ -140,11 +140,11 @@ test.group('Template', (group) => {
     assert.equal(template.escape('<h2> Hello world </h2>'), '&lt;h2&gt; Hello world &lt;/h2&gt;')
   })
 
-  test('do not escape values, which are not string', (assert) => {
+  test('stringify value during escape', (assert) => {
     const processor = new Processor()
     const compiler = new Compiler(loader, tags, processor, { cache: false })
     const template = new Template(compiler, {}, {}, processor)
-    assert.equal(template.escape(22), 22)
+    assert.equal(template.escape(22), '22')
   })
 
   test('do not escape values, which instance of safe value', (assert) => {
@@ -154,6 +154,27 @@ test.group('Template', (group) => {
     assert.equal(template.escape(safeValue('<h2> Hello world </h2>')), '<h2> Hello world </h2>')
   })
 
+  test('stringify array before escape', (assert) => {
+    const processor = new Processor()
+    const compiler = new Compiler(loader, tags, processor, { cache: false })
+    const template = new Template(compiler, {}, {}, processor)
+    assert.equal(template.escape(['<h2> Hello world </h2>']), '&lt;h2&gt; Hello world &lt;/h2&gt;')
+  })
+
+  test('stringify object before escape', (assert) => {
+    const processor = new Processor()
+    const compiler = new Compiler(loader, tags, processor, { cache: false })
+    const template = new Template(compiler, {}, {}, processor)
+    assert.equal(
+      template.escape({
+        toString() {
+          return '<h2> Hello world </h2>'
+        },
+      }),
+      '&lt;h2&gt; Hello world &lt;/h2&gt;'
+    )
+  })
+
   test('add macros to context', (assert) => {
     Template.macro('upper', (username) => {
       return username.toUpperCase()
