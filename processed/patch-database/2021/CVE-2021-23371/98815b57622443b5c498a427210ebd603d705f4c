diff --git a/src/locales/de/constants.ts b/src/locales/de/constants.ts
index 9eefd34c..59e00082 100644
--- a/src/locales/de/constants.ts
+++ b/src/locales/de/constants.ts
@@ -1,5 +1,5 @@
 import { OpUnitType } from "dayjs";
-import { matchAnyPattern } from "../../utils/pattern";
+import { matchAnyPattern, repeatedTimeunitPattern } from "../../utils/pattern";
 import { findMostLikelyADYear } from "../../calculation/years";
 import { TimeUnits } from "../../utils/timeunits";
 
@@ -149,14 +149,10 @@ export function parseYear(match: string): number {
 
 //-----------------------------
 
-const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s*`;
+const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
 const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
 
-const SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE = SINGLE_TIME_UNIT_PATTERN.replace(/\((?!\?)/g, "(?:");
-
-export const TIME_UNITS_PATTERN =
-    `(?:(?:about|around)\\s*)?` +
-    `${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE}\\s*(?:,?\\s*${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE})*`;
+export const TIME_UNITS_PATTERN = repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
 
 export function parseTimeUnits(timeunitText): TimeUnits {
     const fragments = {};
diff --git a/src/locales/en/constants.ts b/src/locales/en/constants.ts
index 261f54ac..0160222b 100644
--- a/src/locales/en/constants.ts
+++ b/src/locales/en/constants.ts
@@ -1,5 +1,5 @@
 import { OpUnitType } from "dayjs";
-import { matchAnyPattern } from "../../utils/pattern";
+import { matchAnyPattern, repeatedTimeunitPattern } from "../../utils/pattern";
 import { findMostLikelyADYear } from "../../calculation/years";
 import { TimeUnits } from "../../utils/timeunits";
 
@@ -223,14 +223,10 @@ export function parseYear(match: string): number {
 
 //-----------------------------
 
-const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s*`;
+const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
 const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
 
-const SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE = SINGLE_TIME_UNIT_PATTERN.replace(/\((?!\?)/g, "(?:");
-
-export const TIME_UNITS_PATTERN =
-    `(?:(?:about|around)\\s*)?` +
-    `${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE}\\s*(?:,?\\s*${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE})*`;
+export const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\s*)?`, SINGLE_TIME_UNIT_PATTERN);
 
 export function parseTimeUnits(timeunitText): TimeUnits {
     const fragments = {};
diff --git a/src/locales/fr/constants.ts b/src/locales/fr/constants.ts
index efceeb3c..65617d53 100644
--- a/src/locales/fr/constants.ts
+++ b/src/locales/fr/constants.ts
@@ -1,5 +1,5 @@
 import { OpUnitType, QUnitType } from "dayjs";
-import { matchAnyPattern } from "../../utils/pattern";
+import { matchAnyPattern, repeatedTimeunitPattern } from "../../utils/pattern";
 
 export const WEEKDAY_DICTIONARY: { [word: string]: number } = {
     "dimanche": 0,
@@ -160,12 +160,10 @@ export function parseYear(match: string): number {
 
 //-----------------------------
 
-const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s*`;
+const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
 const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
 
-const SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE = SINGLE_TIME_UNIT_PATTERN.replace(/\((?!\?)/g, "(?:");
-
-export const TIME_UNITS_PATTERN = `(?:${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE})+`;
+export const TIME_UNITS_PATTERN = repeatedTimeunitPattern("", SINGLE_TIME_UNIT_PATTERN);
 
 export function parseTimeUnits(timeunitText): { [c in OpUnitType | QUnitType]?: number } {
     const fragments = {};
diff --git a/src/locales/nl/constants.ts b/src/locales/nl/constants.ts
index c2ab08d2..889243c7 100644
--- a/src/locales/nl/constants.ts
+++ b/src/locales/nl/constants.ts
@@ -1,5 +1,5 @@
 import { OpUnitType } from "dayjs";
-import { matchAnyPattern } from "../../utils/pattern";
+import { matchAnyPattern, repeatedTimeunitPattern } from "../../utils/pattern";
 import { findMostLikelyADYear } from "../../calculation/years";
 import { TimeUnits } from "../../utils/timeunits";
 
@@ -207,14 +207,10 @@ export function parseYear(match: string): number {
 
 //-----------------------------
 
-const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s*`;
+const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
 const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
 
-const SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE = SINGLE_TIME_UNIT_PATTERN.replace(/\((?!\?)/g, "(?:");
-
-export const TIME_UNITS_PATTERN =
-    `(?:(?:binnen|in)\\s*)?` +
-    `${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE}\\s*(?:,?\\s*${SINGLE_TIME_UNIT_PATTERN_NO_CAPTURE})*`;
+export const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:binnen|in)\\s*)?`, SINGLE_TIME_UNIT_PATTERN);
 
 export function parseTimeUnits(timeunitText): TimeUnits {
     const fragments = {};
diff --git a/src/utils/pattern.ts b/src/utils/pattern.ts
index e6176092..8f087a25 100644
--- a/src/utils/pattern.ts
+++ b/src/utils/pattern.ts
@@ -1,7 +1,8 @@
 type DictionaryLike = string[] | { [word: string]: unknown } | Map<string, unknown>;
 
-export function patternWithWordBreak(regExp: RegExp): RegExp {
-    return RegExp("" + regExp.source);
+export function repeatedTimeunitPattern(prefix: string, singleTimeunitPattern: string): string {
+    const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\((?!\?)/g, "(?:");
+    return `${prefix}${singleTimeunitPatternNoCapture}\\s*(?:,?\\s{0,5}${singleTimeunitPatternNoCapture}){0,10}`;
 }
 
 export function extractTerms(dictionary: DictionaryLike): string[] {
diff --git a/test/en/en_performance.test.ts b/test/en/en_performance.test.ts
new file mode 100644
index 00000000..3dd089a0
--- /dev/null
+++ b/test/en/en_performance.test.ts
@@ -0,0 +1,27 @@
+import * as chrono from "../../src";
+import { measureMilliSec } from "../test_util";
+
+test("Test - Benchmarking against whitespace backtracking", () => {
+    const time = measureMilliSec(() => {
+        const str =
+            "BGR3                                                                                         " +
+            "                                                                                        186          " +
+            "                                      days                                                           " +
+            "                                                                                                     " +
+            "                                                                                                     " +
+            "           18                                                hours                                   " +
+            "                                                                                                     " +
+            "                                                                                                     " +
+            "                                   37                                                minutes         " +
+            "                                                                                                     " +
+            "                                                                                                     " +
+            "                                                             01                                      " +
+            "          seconds";
+
+        const results = chrono.parse(str);
+        expect(results.length).toBe(0);
+    });
+
+    console.log(time);
+    expect(time).toBeLessThan(1000);
+});
diff --git a/test/test_util.ts b/test/test_util.ts
index cbd6f4db..c85e4252 100644
--- a/test/test_util.ts
+++ b/test/test_util.ts
@@ -1,5 +1,5 @@
 import { BufferedDebugHandler } from "../src/debugging";
-import { ParsedResult, ParsingOption } from "../src";
+import { en, ParsedResult, ParsingOption } from "../src";
 
 interface ChronoLike {
     parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[];
@@ -73,6 +73,13 @@ export function testUnexpectedResult(chrono: ChronoLike, text: string, refDate?:
     }
 }
 
+export function measureMilliSec(block: () => void): number {
+    const startTime = new Date().getMilliseconds();
+    block();
+    const endTime = new Date().getMilliseconds();
+    return endTime - startTime;
+}
+
 // --------------------------------------------------
 
 declare global {
