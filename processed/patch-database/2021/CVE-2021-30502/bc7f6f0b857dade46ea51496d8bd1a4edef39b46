diff --git a/package.json b/package.json
index 10f7fbd..50bc181 100644
--- a/package.json
+++ b/package.json
@@ -144,6 +144,12 @@
                     "default": true,
                     "markdownDescription": "Whether GHCi sessions for workspaces linger after closing all associated documents.\n\nWhen enabled, the GHCi startup time is saved but takes more memory when idle. When disabled, kills GHCi after all associated files are closed, saves memory but takes time to restart. GHCi for a single file never linger."
                 },
+                "ghcSimple.trustedReplCommandConfigs": {
+                    "type": "object",
+                    "default": {},
+                    "scope": "application",
+                    "markdownDescription": "Using a `#ghcSimple.replCommand#` configuration from an untrusted workspace can pose a security risk. Whenever such a configuration occurs, you will be notified and if you choose to trust it, it will be recorded here."
+                },
                 "ghcSimple.startupCommands.all": {
                     "type": "array",
                     "items": {
diff --git a/src/bios/config.ts b/src/bios/config.ts
index 18d32c8..201e57f 100644
--- a/src/bios/config.ts
+++ b/src/bios/config.ts
@@ -89,12 +89,45 @@ async function singleConfig(cwd?: string): Promise<Configuration> {
     }
 }
 
+const alreadyShown = new Set();
+
+function handleReplCommandTrust(
+    workspaceUri: vscode.Uri,
+    replCommand: string
+): boolean {
+    if (workspaceUri.scheme !== 'file') return false;
+    const config = vscode.workspace.getConfiguration('ghcSimple', null);
+    const insp = config.inspect('trustedReplCommandConfigs').globalValue ?? {};
+    if (insp[workspaceUri.fsPath] === replCommand) {
+        return true;
+    } else {
+        if (! alreadyShown.has(workspaceUri.fsPath)) {
+            alreadyShown.add(workspaceUri.fsPath);
+            vscode.window.showWarningMessage(
+                `This workspace ${workspaceUri.fsPath} wants to run "${replCommand}" to start GHCi.\n\nAllow if you understand this and trust it.`,
+                'Allow', 'Ignore'
+            ).then((value) => {
+                alreadyShown.delete(workspaceUri.fsPath);
+                if (value == 'Allow') {
+                    const trusted = config.get('trustedReplCommandConfigs');
+                    trusted[workspaceUri.fsPath] = replCommand;
+                    config.update('trustedReplCommandConfigs', trusted, vscode.ConfigurationTarget.Global);
+                }
+            })
+        }
+        return false;
+    }
+}
+
 /** Configuration for a custom command */
 async function customConfig(
     replScope: 'workspace' | 'file',
     replCommand: string,
     workspaceUri: vscode.Uri
-): Promise<Configuration> {
+): Promise<Configuration | null> {
+    if (! handleReplCommandTrust(workspaceUri, replCommand))
+        return null;
+
     if (replCommand.indexOf('$stack_ide_targets') !== -1) {
         const sit = await getStackIdeTargets(workspaceUri);
         replCommand.replace(/\$stack_ide_targets/g, sit.join(' '));
