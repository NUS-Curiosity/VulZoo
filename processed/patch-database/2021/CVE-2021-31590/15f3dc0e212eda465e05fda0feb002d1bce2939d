diff --git a/.gitignore b/.gitignore
index efeb194f..a2a04f03 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,6 +9,10 @@ mongo-data*
 .quasar
 report-templates
 custom-generator.js
+
+# Configuration files
+config.json
+report.json
 roles.json
 app-settings.json
 
diff --git a/backend/src/app.js b/backend/src/app.js
index 67c8a373..1096338d 100644
--- a/backend/src/app.js
+++ b/backend/src/app.js
@@ -10,7 +10,7 @@ var cookieParser = require('cookie-parser')
 
 // Get configuration
 var env = process.env.NODE_ENV || 'dev';
-var config = require('./config.json')[env];
+var config = require('./config/config.json')[env];
 global.__basedir = __dirname;
 
 // Database connection
diff --git a/backend/src/lib/app-settings.json b/backend/src/config/app-settings.json
similarity index 100%
rename from backend/src/lib/app-settings.json
rename to backend/src/config/app-settings.json
diff --git a/backend/src/config.json b/backend/src/config/config.json
similarity index 85%
rename from backend/src/config.json
rename to backend/src/config/config.json
index 8da53405..50f12b5f 100644
--- a/backend/src/config.json
+++ b/backend/src/config/config.json
@@ -6,7 +6,8 @@
             "name": "pwndoc",
             "server": "mongo-pwndoc-dev",
             "port": "27017"
-        }
+        },
+        "jwtSecret": "eb942782a7f0842c51b112d37ff2993de45307831eea267a3acc012bf7550711"
     },
     "prod": {
         "port": 4242,
@@ -26,4 +27,4 @@
             "port": "27017"
         }
     }
-}
+}
\ No newline at end of file
diff --git a/backend/src/lib/report.json b/backend/src/config/report.json
similarity index 100%
rename from backend/src/lib/report.json
rename to backend/src/config/report.json
diff --git a/backend/src/lib/roles.json b/backend/src/config/roles.json
similarity index 100%
rename from backend/src/lib/roles.json
rename to backend/src/config/roles.json
diff --git a/backend/src/lib/auth.js b/backend/src/lib/auth.js
index b8aad074..eed919da 100644
--- a/backend/src/lib/auth.js
+++ b/backend/src/lib/auth.js
@@ -1,6 +1,16 @@
-// Secret for JWT tokens creation (make it dynamic for production)
-var jwtSecret = "ASy4FVjsXNLQl09LbieroWsjO5UXjvX5";
-exports.jwtSecret = jwtSecret;
+// Dynamic generation of JWT Secret if not exist (different for each environnment)
+var fs = require('fs')
+var env = process.env.NODE_ENV || 'dev'
+var config = require('../config/config.json')
+
+if (!config[env].jwtSecret) {
+    config[env].jwtSecret = require('crypto').randomBytes(32).toString('hex')
+    var configString = JSON.stringify(config, null, 4)
+    fs.writeFileSync(`${__basedir}/config/config.json`, configString)
+}
+
+var jwtSecret = config[env].jwtSecret
+exports.jwtSecret = jwtSecret
 
 /*  ROLES LOGIC
 
@@ -62,7 +72,7 @@ var builtInRoles = {
 }
 
 try {
-    var customRoles = require('./roles.json')}
+    var customRoles = require('../config/roles.json')}
 catch(error) {
     var customRoles = []
 }
diff --git a/backend/src/lib/report-generator.js b/backend/src/lib/report-generator.js
index a760b9b6..e9d7dc35 100644
--- a/backend/src/lib/report-generator.js
+++ b/backend/src/lib/report-generator.js
@@ -9,7 +9,7 @@ var utils = require('./utils');
 var html2ooxml = require('./html2ooxml');
 var _ = require('lodash');
 var Image = require('mongoose').model('Image');
-var reportConfig = require('./report.json');
+var reportConfig = require('../config/report.json');
 
 // Generate document with docxtemplater
 async function generateDoc(audit) {
@@ -19,7 +19,7 @@ async function generateDoc(audit) {
 
     var zip = new JSZip(content);
 
-    var settings = JSON.parse(fs.readFileSync(`${__basedir}/lib/app-settings.json`));
+    var settings = JSON.parse(fs.readFileSync(`${__basedir}/config/app-settings.json`));
 
     var opts = {};
     // opts.centered = true;
diff --git a/backend/src/routes/settings.js b/backend/src/routes/settings.js
index 2c531f5b..e75095be 100644
--- a/backend/src/routes/settings.js
+++ b/backend/src/routes/settings.js
@@ -12,7 +12,7 @@ module.exports = function(app) {
     // Get settings
     app.get("/api/settings", acl.hasPermission('settings:read'), function(req, res) {
         try {
-            var settings = JSON.parse(fs.readFileSync(`${__basedir}/lib/app-settings.json`))            
+            var settings = JSON.parse(fs.readFileSync(`${__basedir}/config/app-settings.json`))            
             Object.keys(defaultSettings).forEach(key => {
                 if (!(key in settings))
                     settings[key] = defaultSettings[key]
@@ -34,7 +34,7 @@ module.exports = function(app) {
         })
         var settingsString = JSON.stringify(settings, null, 4)
         try {
-            fs.writeFileSync(`${__basedir}/lib/app-settings.json`, settingsString)
+            fs.writeFileSync(`${__basedir}/config/app-settings.json`, settingsString)
             Response.Ok(res, settings)
         }
         catch(err) {
diff --git a/docker-compose.yml b/docker-compose.yml
index 41319f2f..9c9428c2 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -19,7 +19,7 @@ services:
     container_name: pwndoc-backend
     volumes:
       - ./backend/report-templates:/app/report-templates
-      - ./backend/src/lib:/app/src/lib
+      - ./backend/src/config:/app/src/config
     depends_on:
       - mongodb
     restart: always
diff --git a/docs/roles.md b/docs/roles.md
index 63b6b48d..411355a2 100644
--- a/docs/roles.md
+++ b/docs/roles.md
@@ -55,7 +55,7 @@ This role has full permissions access
 
 ## Create additional Roles
 
-Custom roles can be defined in `backend/src/lib/roles.json`
+Custom roles can be defined in `backend/src/config/roles.json`
 The format is:
 
 ```
