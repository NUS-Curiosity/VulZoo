diff --git a/lib/utils.js b/lib/utils.js
index 48572cdc..3bcd6859 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -59,8 +59,14 @@ function buildURL (source, reqBase) {
   const dest = new URL(source, reqBase)
 
   // if base is specified, source url should not override it
-  if (reqBase && !reqBase.startsWith(dest.origin)) {
-    throw new Error('source must be a relative path string')
+  if (reqBase) {
+    if (!reqBase.endsWith('/') && dest.href.length > reqBase.length) {
+      reqBase = reqBase + '/'
+    }
+
+    if (!dest.href.startsWith(reqBase)) {
+      throw new Error('source must be a relative path string')
+    }
   }
 
   return dest
diff --git a/test/build-url.js b/test/build-url.js
index f9010dc4..2eb5b3a0 100644
--- a/test/build-url.js
+++ b/test/build-url.js
@@ -21,13 +21,31 @@ test('should return same source when base is not specified', (t) => {
   t.equal(url.href, 'http://localhost/hi')
 })
 
+test('should handle lack of trailing slash in base', (t) => {
+  t.plan(3)
+  let url = buildURL('hi', 'http://localhost/hi')
+  t.equal(url.href, 'http://localhost/hi')
+
+  url = buildURL('hi/', 'http://localhost/hi')
+  t.equal(url.href, 'http://localhost/hi/')
+
+  url = buildURL('hi/more', 'http://localhost/hi')
+  t.equal(url.href, 'http://localhost/hi/more')
+})
+
 const errorInputs = [
   { source: '//10.0.0.10/hi', base: 'http://localhost' },
   { source: 'http://10.0.0.10/hi', base: 'http://localhost' },
   { source: 'https://10.0.0.10/hi', base: 'http://localhost' },
   { source: 'blah://10.0.0.10/hi', base: 'http://localhost' },
   { source: '//httpbin.org/hi', base: 'http://localhost' },
-  { source: 'urn:foo:bar', base: 'http://localhost' }
+  { source: 'urn:foo:bar', base: 'http://localhost' },
+  { source: 'http://localhost/private', base: 'http://localhost/exposed/' },
+  { source: 'http://localhost/exposed-extra', base: 'http://localhost/exposed' },
+  { source: '/private', base: 'http://localhost/exposed/' },
+  { source: '/exposed-extra', base: 'http://localhost/exposed' },
+  { source: '../private', base: 'http://localhost/exposed/' },
+  { source: 'exposed-extra', base: 'http://localhost/exposed' }
 ]
 
 test('should throw when trying to override base', (t) => {
diff --git a/test/unix-http.js b/test/unix-http.js
index a8845c46..fddeb5c9 100644
--- a/test/unix-http.js
+++ b/test/unix-http.js
@@ -13,14 +13,15 @@ if (process.platform === 'win32') {
   process.exit(0)
 }
 
+const socketPath = `${__filename}.socket`
+const upstream = `unix+http://${querystring.escape(socketPath)}/`
+
 const instance = Fastify()
-instance.register(From)
+instance.register(From, { base: upstream })
 
 t.plan(10)
 t.tearDown(instance.close.bind(instance))
 
-const socketPath = `${__filename}.socket`
-
 try {
   fs.unlinkSync(socketPath)
 } catch (_) {
@@ -37,7 +38,7 @@ const target = http.createServer((req, res) => {
 })
 
 instance.get('/', (request, reply) => {
-  reply.from(`unix+http://${querystring.escape(socketPath)}/hello`)
+  reply.from('hello')
 })
 
 t.tearDown(target.close.bind(target))
