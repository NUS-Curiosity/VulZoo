diff --git a/src/Core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php b/src/Core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php
index f0791f66603..8c7236d603b 100644
--- a/src/Core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php
+++ b/src/Core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php
@@ -185,6 +185,7 @@ private function validate(DataBag $data, Context $context): void
             $definition->add('id', new EntityExists([
                 'entity' => 'product_review',
                 'context' => $context,
+                'criteria' => $criteria,
             ]));
         } else {
             $criteria = new Criteria();
diff --git a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
index bb565951a8c..f1e33a734fc 100644
--- a/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
+++ b/src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php
@@ -12,6 +12,7 @@
 use Shopware\Core\Framework\Test\TestCaseBase\SalesChannelApiTestBehaviour;
 use Shopware\Core\Framework\Test\TestDataCollection;
 use Shopware\Core\Framework\Uuid\Uuid;
+use Symfony\Component\HttpFoundation\Response;
 
 /**
  * @group store-api
@@ -120,6 +121,39 @@ public function testValidation(): void
         static::assertEquals($response['errors'][1]['source']['pointer'], '/content');
     }
 
+    public function testCustomerValidation(): void
+    {
+        $this->login();
+
+        $this->assertReviewCount(0);
+
+        $id = Uuid::randomHex();
+
+        // Create review
+        $this->browser->request('POST', $this->getUrl(), [
+            'id' => $id,
+            'title' => 'Lorem ipsum dolor sit amet',
+            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',
+        ]);
+
+        // Re-login as another user
+        $this->login();
+
+        // Try to use the id from previous review which is not attached to this customer
+        $this->browser->request('POST', $this->getUrl(), [
+            'id' => $id,
+            'title' => 'Lorem ipsum dolor sit amet',
+            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',
+        ]);
+
+        $response = $this->browser->getResponse();
+
+        static::assertSame(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
+        $content = json_decode($response->getContent(), true);
+
+        static::assertSame('VIOLATION::ENTITY_DOES_NOT_EXISTS', $content['errors'][0]['code']);
+    }
+
     private function assertReviewCount(int $expected): void
     {
         $count = $this->getContainer()
