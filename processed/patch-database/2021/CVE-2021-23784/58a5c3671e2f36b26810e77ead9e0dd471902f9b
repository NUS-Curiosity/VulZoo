diff --git a/docs/api.md b/docs/api.md
index f39c73b..ba4c5a7 100644
--- a/docs/api.md
+++ b/docs/api.md
@@ -6,14 +6,18 @@
 
 
 ### tempura.esc(value)
-Returns: `string` or `typeof value`
+Returns: `string`
 
 #### value
 Type: `string` or `unknown`
 
 The value to be HTML-escaped. The following special characters are escaped: `"`, `&`, and `<`.
 
-> **Note:** Any non-`string` values are returned as is.
+> **Note:** Any non-`string` values are coerced to a strings!
+>  * `null` and `undefined` become `""`
+>  * `{ foo: 123 }` becomes `"[object Object]"`
+>  * `[1, 2, 3]` becomes `"1,2,3"`
+>  * `123` becomes `"123"`
 
 
 ### tempura.compile(input, options?)
diff --git a/src/$index.js b/src/$index.js
index a91d366..4062551 100644
--- a/src/$index.js
+++ b/src/$index.js
@@ -7,7 +7,7 @@ const ESCAPE = /[&"<]/g, CHARS = {
 import { gen } from './$utils';
 
 export function esc(value) {
-	if (typeof value !== 'string') return value;
+	value = (value == null) ? '' : '' + value;
 	let last=ESCAPE.lastIndex=0, tmp=0, out='';
 	while (ESCAPE.test(value)) {
 		tmp = ESCAPE.lastIndex - 1;
diff --git a/src/index.d.ts b/src/index.d.ts
index 320822a..43e2eea 100644
--- a/src/index.d.ts
+++ b/src/index.d.ts
@@ -12,7 +12,7 @@ export interface Options {
 	async?: boolean;
 }
 
-export function esc<T=unknown>(value: T): T|string;
+export function esc(value: string|unknown): string;
 export function transform(input: string, options?: Options & { format?: 'esm' | 'cjs' }): string;
 
 type CompileOptions = Options & { escape?: typeof esc };
diff --git a/test/$index.js b/test/$index.js
index 6433bc8..ca7a7db 100644
--- a/test/$index.js
+++ b/test/$index.js
@@ -263,16 +263,21 @@ esc('should be a function', () => {
 	assert.type(tempura.esc, 'function');
 });
 
-esc('should echo non-string inputs', () => {
-	// @ts-ignore
-	assert.is(tempura.esc(), undefined);
-	assert.is(tempura.esc(null), null);
-	assert.is(tempura.esc(false), false);
-	assert.is(tempura.esc(123), 123);
-	assert.is(tempura.esc(0), 0);
-
-	assert.equal(tempura.esc([1, 2, 3]), [1, 2, 3]);
-	assert.equal(tempura.esc({ foo: 1 }), { foo: 1 });
+esc('should convert non-string inputs to string', () => {
+	assert.is(tempura.esc(), '');
+	assert.is(tempura.esc(null), '');
+
+	assert.is(tempura.esc(false), 'false');
+	assert.is(tempura.esc(123), '123');
+	assert.is(tempura.esc(0), '0');
+
+	assert.equal(tempura.esc([1, 2, 3]), '1,2,3');
+	assert.equal(tempura.esc({ foo: 1 }), '[object Object]');
+});
+
+esc('should prevent xss scripting in array', () => {
+	let output = tempura.esc(['<img src=x onerror="alert(1)" />']);
+	assert.is(output, '&ltimg src=x onerror=&quot;alert(1)&quot; />');
 });
 
 esc('should return string from string input', () => {
