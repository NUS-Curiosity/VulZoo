diff --git a/packages/json-deserializer/src/JsonDeserializer.test.ts b/packages/json-deserializer/src/JsonDeserializer.test.ts
index 9481133..2748622 100644
--- a/packages/json-deserializer/src/JsonDeserializer.test.ts
+++ b/packages/json-deserializer/src/JsonDeserializer.test.ts
@@ -29,16 +29,23 @@ describe("jsonDeserializer", () => {
     },
   };
 
-  it("deserializes objects if the event has a json content-type header", async () => {
-    const event: APIGatewayProxyEvent = createEvent({
-      headers: { "Content-Type": "application/json" },
-      body: JSON.stringify(testObject),
-    });
+  describe("deserializes objects the event has a valid json content-type header:", () => {
+    it.each([
+      ["subtype is json", "application/json"],
+      ["subtype structured syntax specifier is json", "application/ld+json"],
+      ["semicolon is appended", "application/json;"],
+      ["whitespace is appended", "application/json;   "],
+    ])("%s (%p)", async (_string, mimeType: string) => {
+      const event: APIGatewayProxyEvent = createEvent({
+        headers: { "Content-Type": mimeType },
+        body: JSON.stringify(testObject),
+      });
 
-    await handlerWithMiddleware(event, createContext());
-    expect(processedEvent.bodyObject).toMatchObject(
-      JSON.parse(JSON.stringify(testObject))
-    );
+      await handlerWithMiddleware(event, createContext());
+      expect(processedEvent.bodyObject).toMatchObject(
+        JSON.parse(JSON.stringify(testObject))
+      );
+    });
   });
 
   describe("sets the request bodyObject to null if:", () => {
diff --git a/packages/json-deserializer/src/JsonDeserializer.ts b/packages/json-deserializer/src/JsonDeserializer.ts
index af98ec8..1dacc7f 100644
--- a/packages/json-deserializer/src/JsonDeserializer.ts
+++ b/packages/json-deserializer/src/JsonDeserializer.ts
@@ -1,5 +1,4 @@
 import { PromiseHandler } from "@lambda-middleware/utils";
-import debugFactory, { IDebugger } from "debug";
 import {
   APIGatewayProxyEvent,
   APIGatewayProxyResult,
@@ -8,8 +7,6 @@ import {
 import { APIGatewayProxyObjectEvent } from "./types/APIGatewayProxyObjectEvent";
 import { RequestBodyNotJsonError } from "./customErrors/RequestBodyNotJsonError";
 
-const logger: IDebugger = debugFactory("@lambda-middleware/json-serializer");
-
 export const jsonDeserializer = <E extends APIGatewayProxyEvent>() => (
   handler: PromiseHandler<APIGatewayProxyObjectEvent<E>, APIGatewayProxyResult>
 ) => async (event: E, context: Context): Promise<APIGatewayProxyResult> => {
@@ -50,6 +47,13 @@ const isJsonMimeType = (event: APIGatewayProxyEvent) => {
     return false;
   }
 
-  const mimePattern = /^application\/(.+\+)?json(;.*)?$/;
-  return mimePattern.test(contentTypeHeader);
+  const mimeParts = contentTypeHeader.split("/");
+
+  if (mimeParts.length != 2) {
+    return false;
+  }
+
+  const lastSubtypePart = mimeParts[1].toLowerCase().split("+").pop()?.trim();
+
+  return lastSubtypePart === "json" || lastSubtypePart === "json;";
 };
