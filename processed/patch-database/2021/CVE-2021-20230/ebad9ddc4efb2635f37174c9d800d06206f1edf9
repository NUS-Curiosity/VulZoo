diff --git a/COPYING.md b/COPYING.md
index 55baeb16..4725b94c 100644
--- a/COPYING.md
+++ b/COPYING.md
@@ -1,7 +1,7 @@
 # stunnel license (see COPYRIGHT.md for detailed GPL conditions)
 
 
-_Copyright (C) 1998-2019 Michal Trojnara_
+_Copyright (C) 1998-2020 Michal Trojnara_
 
 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
diff --git a/INSTALL.W32.md b/INSTALL.W32.md
index 47db46b5..ebc36bad 100644
--- a/INSTALL.W32.md
+++ b/INSTALL.W32.md
@@ -17,9 +17,9 @@
  3) Build and install OpenSSL.
       ./Configure \
         --cross-compile-prefix=x86_64-w64-mingw32- \
-        --prefix=/opt/openssl-mingw64 mingw64 shared
-      sed -i 's/^\(OPENSSLDIR=\).*/\1..\/config/' Makefile
-      sed -i 's/^\(ENGINESDIR=\).*/\1..\/engines/' Makefile
+        --prefix=/opt/openssl-mingw64 mingw64 shared enable-capieng
+      sed -i 's/"\$(OPENSSLDIR)/"..\/config/' Makefile
+      sed -i 's/"\$(ENGINESDIR)/"..\/engines/' Makefile
       make
       sudo make install
       sudo cp ms/applink.c /opt/openssl-mingw64/include/openssl/
@@ -51,9 +51,9 @@
  3) Build and install OpenSSL.
       ./Configure \
         --cross-compile-prefix=i686-w64-mingw32- \
-        --prefix=/opt/openssl-mingw mingw shared
-      sed -i 's/^\(OPENSSLDIR=\).*/\1..\/config/' Makefile
-      sed -i 's/^\(ENGINESDIR=\).*/\1..\/engines/' Makefile
+        --prefix=/opt/openssl-mingw mingw shared enable-capieng
+      sed -i 's/"\$(OPENSSLDIR)/"..\/config/' Makefile
+      sed -i 's/"\$(ENGINESDIR)/"..\/engines/' Makefile
       make
       sudo make install
       sudo cp ms/applink.c /opt/openssl-mingw/include/openssl/
diff --git a/Makefile.am b/Makefile.am
index a5bd2843..ab6e17c4 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 ACLOCAL_AMFLAGS = -I m4
 
diff --git a/Makefile.in b/Makefile.in
index a4b36a3a..3668ac8e 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 VPATH = @srcdir@
 am__is_gnu_make = { \
diff --git a/NEWS.md b/NEWS.md
index c2cb8a50..b6e48c30 100644
--- a/NEWS.md
+++ b/NEWS.md
@@ -1,6 +1,25 @@
 # stunnel change log
 
 
+### Version 5.57, 2020.10.11, urgency: HIGH
+* Security bugfixes
+  - The "redirect" option was fixed to properly
+    handle "verifyChain = yes" (thx to Rob Hoes).
+  - OpenSSL DLLs updated to version 1.1.1h.
+* New features
+  - New securityLevel configuration file option.
+  - FIPS support for RHEL-based distributions.
+  - Support for modern PostgreSQL clients (thx to Bram Geron).
+  - Windows tooltip texts updated to mention "stunnel".
+  - TLS 1.3 configuration updated for better compatibility.
+* Bugfixes
+  - Fixed a transfer() loop bug.
+  - Fixed memory leaks on configuration reloading errors.
+  - DH/ECDH initialization restored for client sections.
+  - Delay startup with systemd until network is online.
+  - bin\libssp-0.dll removed when uninstalling.
+  - A number of testing framework fixes and improvements.
+
 ### Version 5.56, 2019.11.22, urgency: HIGH
 * New features
   - Various text files converted to Markdown format.
diff --git a/build-android.sh b/build-android.sh
index d6c71867..c0a25cb4 100755
--- a/build-android.sh
+++ b/build-android.sh
@@ -1,6 +1,6 @@
 #!/bin/sh
 set -ev
-VERSION=5.56
+VERSION=5.57
 DST=stunnel-$VERSION-android
 
 # install Android NDK on Arch Linux:
diff --git a/configure b/configure
index 518f6f74..8bac19ca 100755
--- a/configure
+++ b/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for stunnel 5.56.
+# Generated by GNU Autoconf 2.69 for stunnel 5.57.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='stunnel'
 PACKAGE_TARNAME='stunnel'
-PACKAGE_VERSION='5.56'
-PACKAGE_STRING='stunnel 5.56'
+PACKAGE_VERSION='5.57'
+PACKAGE_STRING='stunnel 5.57'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1338,7 +1338,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures stunnel 5.56 to adapt to many kinds of systems.
+\`configure' configures stunnel 5.57 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1409,7 +1409,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of stunnel 5.56:";;
+     short | recursive ) echo "Configuration of stunnel 5.57:";;
    esac
   cat <<\_ACEOF
 
@@ -1528,7 +1528,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-stunnel configure 5.56
+stunnel configure 5.57
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -2134,7 +2134,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by stunnel $as_me 5.56, which was
+It was created by stunnel $as_me 5.57, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -3003,7 +3003,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='stunnel'
- VERSION='5.56'
+ VERSION='5.57'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -16902,7 +16902,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by stunnel $as_me 5.56, which was
+This file was extended by stunnel $as_me 5.57, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -16968,7 +16968,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-stunnel config.status 5.56
+stunnel config.status 5.57
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/configure.ac b/configure.ac
index c9cc6548..9c2b2b6c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,6 +1,6 @@
 # Process this file with autoconf to produce a configure script.
 
-AC_INIT([stunnel],[5.56])
+AC_INIT([stunnel],[5.57])
 AC_MSG_NOTICE([**************************************** initialization])
 AC_CONFIG_AUX_DIR(auto)
 AC_CONFIG_MACRO_DIR([m4])
diff --git a/doc/Makefile.am b/doc/Makefile.am
index fbaa5997..9ebdfa39 100644
--- a/doc/Makefile.am
+++ b/doc/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 EXTRA_DIST = stunnel.pod.in stunnel.8.in stunnel.html.in en
 EXTRA_DIST += stunnel.pl.pod.in stunnel.pl.8.in stunnel.pl.html.in pl
diff --git a/doc/Makefile.in b/doc/Makefile.in
index 44ccbb3d..04d8b710 100644
--- a/doc/Makefile.in
+++ b/doc/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 VPATH = @srcdir@
 am__is_gnu_make = { \
diff --git a/doc/stunnel.8.in b/doc/stunnel.8.in
index b76df955..b3df016f 100644
--- a/doc/stunnel.8.in
+++ b/doc/stunnel.8.in
@@ -71,7 +71,7 @@
 .\" ========================================================================
 .\"
 .IX Title "stunnel 8"
-.TH stunnel 8 "2019.06.10" "5.55" "stunnel TLS Proxy"
+.TH stunnel 8 "2020.05.14" "5.57" "stunnel TLS Proxy"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
@@ -439,6 +439,8 @@ configuration file.  Supported commands are described on the
 .Sp
 Several \fIconfig\fR lines can be used to specify multiple configuration commands.
 .Sp
+Use \fIcurves\fR option instead of enabling \fIconfig = Curves:list_curves\fR to support elliptic curves.
+.Sp
 This option requires OpenSSL 1.0.2 or later.
 .IP "\fBconnect\fR = [\s-1HOST:\s0]PORT" 4
 .IX Item "connect = [HOST:]PORT"
@@ -473,7 +475,7 @@ This file contains multiple CRLs, used with the \fIverifyChain\fR and
 .IX Item "curves = list"
 \&\s-1ECDH\s0 curves separated with ':'
 .Sp
-Only a single curve name is allowed for OpenSSL older than 1.1.0.
+Only a single curve name is allowed for OpenSSL older than 1.1.1.
 .Sp
 To get a list of supported curves use:
 .Sp
@@ -836,6 +838,37 @@ default: yes
 reconnect a connect+exec section after it was disconnected
 .Sp
 default: no
+.IP "\fBsecurityLevel\fR = \s-1LEVEL\s0" 4
+.IX Item "securityLevel = LEVEL"
+set the security level
+.Sp
+The meaning of each level is described below:
+.RS 4
+.IP "level 0" 4
+.IX Item "level 0"
+Everything is permitted.
+.IP "level 1" 4
+.IX Item "level 1"
+The security level corresponds to a minimum of 80 bits of security. Any parameters offering below 80 bits of security are excluded. As a result \s-1RSA, DSA\s0 and \s-1DH\s0 keys shorter than 1024 bits and \s-1ECC\s0 keys shorter than 160 bits are prohibited. All export cipher suites are prohibited since they all offer less than 80 bits of security. \s-1SSL\s0 version 2 is prohibited. Any cipher suite using \s-1MD5\s0 for the \s-1MAC\s0 is also prohibited.
+.IP "level 2" 4
+.IX Item "level 2"
+Security level set to 112 bits of security. As a result \s-1RSA, DSA\s0 and \s-1DH\s0 keys shorter than 2048 bits and \s-1ECC\s0 keys shorter than 224 bits are prohibited. In addition to the level 1 exclusions any cipher suite using \s-1RC4\s0 is also prohibited. \s-1SSL\s0 version 3 is also not allowed. Compression is disabled.
+.IP "level 3" 4
+.IX Item "level 3"
+Security level set to 128 bits of security. As a result \s-1RSA, DSA\s0 and \s-1DH\s0 keys shorter than 3072 bits and \s-1ECC\s0 keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. \s-1TLS\s0 versions below 1.1 are not permitted. Session tickets are disabled.
+.IP "level 4" 4
+.IX Item "level 4"
+Security level set to 192 bits of security. As a result \s-1RSA, DSA\s0 and \s-1DH\s0 keys shorter than 7680 bits and \s-1ECC\s0 keys shorter than 384 bits are prohibited. Cipher suites using \s-1SHA1\s0 for the \s-1MAC\s0 are prohibited. \s-1TLS\s0 versions below 1.2 are not permitted.
+.IP "level 5" 4
+.IX Item "level 5"
+Security level set to 256 bits of security. As a result \s-1RSA, DSA\s0 and \s-1DH\s0 keys shorter than 15360 bits and \s-1ECC\s0 keys shorter than 512 bits are prohibited.
+.IP "default: 2" 4
+.IX Item "default: 2"
+.RE
+.RS 4
+.Sp
+The \fIsecurityLevel\fR option is only available when compiled with \fBOpenSSL 1.1.0\fR and later.
+.RE
 .IP "\fBrequireCert\fR = yes | no" 4
 .IX Item "requireCert = yes | no"
 require a client certificate for \fIverifyChain\fR or \fIverifyPeer\fR
diff --git a/doc/stunnel.html.in b/doc/stunnel.html.in
index 25998bfe..ee9e5d96 100644
--- a/doc/stunnel.html.in
+++ b/doc/stunnel.html.in
@@ -528,6 +528,8 @@
 
 <p>Several <i>config</i> lines can be used to specify multiple configuration commands.</p>
 
+<p>Use <i>curves</i> option instead of enabling <i>config = Curves:list_curves</i> to support elliptic curves.</p>
+
 <p>This option requires OpenSSL 1.0.2 or later.</p>
 
 </dd>
@@ -568,7 +570,7 @@
 
 <p>ECDH curves separated with &#39;:&#39;</p>
 
-<p>Only a single curve name is allowed for OpenSSL older than 1.1.0.</p>
+<p>Only a single curve name is allowed for OpenSSL older than 1.1.1.</p>
 
 <p>To get a list of supported curves use:</p>
 
@@ -999,6 +1001,60 @@
 
 <p>default: no</p>
 
+</dd>
+<dt id="securityLevel-LEVEL"><b>securityLevel</b> = LEVEL</dt>
+<dd>
+
+<p>set the security level</p>
+
+<p>The meaning of each level is described below:</p>
+
+<dl>
+
+<dt id="level-0">level 0</dt>
+<dd>
+
+<p>Everything is permitted.</p>
+
+</dd>
+<dt id="level-1">level 1</dt>
+<dd>
+
+<p>The security level corresponds to a minimum of 80 bits of security. Any parameters offering below 80 bits of security are excluded. As a result RSA, DSA and DH keys shorter than 1024 bits and ECC keys shorter than 160 bits are prohibited. All export cipher suites are prohibited since they all offer less than 80 bits of security. SSL version 2 is prohibited. Any cipher suite using MD5 for the MAC is also prohibited.</p>
+
+</dd>
+<dt id="level-2">level 2</dt>
+<dd>
+
+<p>Security level set to 112 bits of security. As a result RSA, DSA and DH keys shorter than 2048 bits and ECC keys shorter than 224 bits are prohibited. In addition to the level 1 exclusions any cipher suite using RC4 is also prohibited. SSL version 3 is also not allowed. Compression is disabled.</p>
+
+</dd>
+<dt id="level-3">level 3</dt>
+<dd>
+
+<p>Security level set to 128 bits of security. As a result RSA, DSA and DH keys shorter than 3072 bits and ECC keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. TLS versions below 1.1 are not permitted. Session tickets are disabled.</p>
+
+</dd>
+<dt id="level-4">level 4</dt>
+<dd>
+
+<p>Security level set to 192 bits of security. As a result RSA, DSA and DH keys shorter than 7680 bits and ECC keys shorter than 384 bits are prohibited. Cipher suites using SHA1 for the MAC are prohibited. TLS versions below 1.2 are not permitted.</p>
+
+</dd>
+<dt id="level-5">level 5</dt>
+<dd>
+
+<p>Security level set to 256 bits of security. As a result RSA, DSA and DH keys shorter than 15360 bits and ECC keys shorter than 512 bits are prohibited.</p>
+
+</dd>
+<dt id="default:-2">default: 2</dt>
+<dd>
+
+</dd>
+</dl>
+
+<p>The <i>securityLevel</i> option is only available when compiled with <b>OpenSSL 1.1.0</b> and later.</p>
+
 </dd>
 <dt id="requireCert-yes-no"><b>requireCert</b> = yes | no</dt>
 <dd>
@@ -1351,31 +1407,31 @@
 
 <dl>
 
-<dt id="level-0">level 0</dt>
+<dt id="level-01">level 0</dt>
 <dd>
 
 <p>Request and ignore the peer certificate.</p>
 
 </dd>
-<dt id="level-1">level 1</dt>
+<dt id="level-11">level 1</dt>
 <dd>
 
 <p>Verify the peer certificate if present.</p>
 
 </dd>
-<dt id="level-2">level 2</dt>
+<dt id="level-21">level 2</dt>
 <dd>
 
 <p>Verify the peer certificate.</p>
 
 </dd>
-<dt id="level-3">level 3</dt>
+<dt id="level-31">level 3</dt>
 <dd>
 
 <p>Verify the peer against a locally installed certificate.</p>
 
 </dd>
-<dt id="level-4">level 4</dt>
+<dt id="level-41">level 4</dt>
 <dd>
 
 <p>Ignore the chain and only verify the peer certificate.</p>
diff --git a/doc/stunnel.pl.8.in b/doc/stunnel.pl.8.in
index e12be631..2e4f311c 100644
--- a/doc/stunnel.pl.8.in
+++ b/doc/stunnel.pl.8.in
@@ -71,7 +71,7 @@
 .\" ========================================================================
 .\"
 .IX Title "stunnel 8"
-.TH stunnel 8 "2019.06.10" "5.55" "stunnel TLS Proxy"
+.TH stunnel 8 "2020.05.14" "5.57" "stunnel TLS Proxy"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
@@ -449,6 +449,9 @@ konfiguracyjnego stunnela.  DostÄpne komendy opisane sÄ w manualu
 MoÅ¼liwe jest wyspecyfikowanie wielu opcji \fBOpenSSL\fR przez wielokrotne uÅ¼ycie
 komendy \fBconfig\fR.
 .Sp
+Zamiast wyÅÄczaÄ \fIconfig = Curves:list_curves\fR
+uÅ¼yj opcji \fIcurves\fR w celu ustawnienia krzywych eliptycznych.
+.Sp
 Opcja ta wymaga biblioteki OpenSSL w wersji 1.0.2 lub nowszej.
 .IP "\fBconnect\fR = [\s-1HOST:\s0]PORT" 4
 .IX Item "connect = [HOST:]PORT"
@@ -483,7 +486,7 @@ przez opcje \fIverifyChain\fR i \fIverifyPeer\fR.
 .IX Item "curves = lista"
 krzywe \s-1ECDH\s0 odddzielone ':'
 .Sp
-Wersje OpenSSL starsze niÅ¼ 1.1.0 pozwalajÄ na uÅ¼ycie tylko jednej krzywej.
+Wersje OpenSSL starsze niÅ¼ 1.1.1 pozwalajÄ na uÅ¼ycie tylko jednej krzywej.
 .Sp
 ListÄ dostÄpnych krzywych moÅ¼na uzyskaÄ poleceniem:
 .Sp
@@ -849,6 +852,37 @@ domyÅlnie: yes
 poÅÄcz ponownie sekcjÄ connect+exec po rozÅÄczeniu
 .Sp
 domyÅlnie: no
+.IP "\fBsecurityLevel\fR = \s-1POZIOM\s0" 4
+.IX Item "securityLevel = POZIOM"
+ustaw poziom bezpieczeÅstwa
+.Sp
+Znaczenie kaÅ¼dego poziomu opisano poniÅ¼ej:
+.RS 4
+.IP "poziom 0" 4
+.IX Item "poziom 0"
+Wszystko jest dozwolone.
+.IP "poziom 1" 4
+.IX Item "poziom 1"
+Poziom bezpieczeÅstwa zapewniajÄcy minimum 80 bitÃ³w bezpieczeÅstwa. Å»adne parametry kryptograficzne oferujÄce poziom bezpieczeÅstwa poniÅ¼ej 80 bitÃ³w nie mogÄ zostaÄ uÅ¼yte. W zwiÄzku z tym \s-1RSA, DSA\s0 oraz klucze \s-1DH\s0 krÃ³tsze niÅ¼ 1024 bity, a takÅ¼e klucze \s-1ECC\s0 krÃ³tsze niÅ¼ 160 bitÃ³w i wszystkie eksportowe zestawy szyfrÃ³w sÄ niedozwolone. UÅ¼ycie SSLv2 jest zabronione. Wszelkie listy parametrÃ³w kryptograficznych uÅ¼ywajÄce \s-1MD5\s0 do \s-1MAC\s0 sÄ zabronione.
+.IP "poziom 2" 4
+.IX Item "poziom 2"
+Poziom bezpieczeÅstwa zapewniajÄcy 112 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym \s-1RSA, DSA\s0 oraz klucze \s-1DH\s0 krÃ³tsze niÅ¼ 2048 bitÃ³w, a takÅ¼e klucze \s-1ECC\s0 krÃ³tsze niÅ¼ 224 bity sÄ niedozwolone. OprÃ³cz wyÅÄczeÅ z poziomu 1 zabronione jest takÅ¼e korzystanie z zestawÃ³w szyfrÃ³w uÅ¼ywajÄcych \s-1RC4.\s0 UÅ¼ycie SSLv3 jest zabronione. Kompresja jest wyÅÄczona.
+.IP "poziom 3" 4
+.IX Item "poziom 3"
+Poziom bezpieczeÅstwa zapewniajÄcy 128 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym \s-1RSA, DSA\s0 oraz klucze \s-1DH\s0 krÃ³tsze niÅ¼ 3072 bity, a takÅ¼e klucze \s-1ECC\s0 krÃ³tsze niÅ¼ 256 bitÃ³w sÄ niedozwolone. OprÃ³cz wyÅÄczeÅ z poziomu 2  zabronione jest takÅ¼e korzystanie z zestawÃ³w szyfrÃ³w nie zapewniajÄcych utajniania z wyprzedzeniem (forward secrecy).  Wersje \s-1TLS\s0 starsze niÅ¼ 1.1 sÄ zabronione. Bilety sesji sÄ wyÅÄczone.
+.IP "poziom 4" 4
+.IX Item "poziom 4"
+Poziom bezpieczeÅstwa zapewniajÄcy 192 bity bezpieczeÅstwa. W zwiÄzku z tym \s-1RSA, DSA\s0 oraz klucze \s-1DH\s0 krÃ³tsze niÅ¼ 7680 bitÃ³w, a takÅ¼e klucze \s-1ECC\s0 krÃ³tsze niÅ¼ 384 bity sÄ niedozwolone. Listy parametrÃ³w kryptograficznych uÅ¼ywajÄcych \s-1SHA1\s0 do \s-1MAC\s0 sÄ zabronione. Wersje \s-1TLS\s0 starsze niÅ¼ 1.2 sÄ zabronione.
+.IP "poziom 5" 4
+.IX Item "poziom 5"
+Poziom bezpieczeÅstwa zapewniajÄcy 256 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym \s-1RSA, DSA\s0 oraz klucze \s-1DH\s0 krÃ³tsze niÅ¼ 15360 bitÃ³w, a takÅ¼e klucze \s-1ECC\s0 krÃ³tsze niÅ¼ 512 bitÃ³w sÄ niedozwolone.
+.IP "domyÅlnie: 2" 4
+.IX Item "domyÅlnie: 2"
+.RE
+.RS 4
+.Sp
+Opcja \fIsecurityLevel\fR jest dostÄpna poczÄwszy od \fBOpenSSL 1.1.0\fR.
+.RE
 .IP "\fBrequireCert\fR = yes | no" 4
 .IX Item "requireCert = yes | no"
 wymagaj certyfikatu klienta dla \fIverifyChain\fR lub \fIverifyPeer\fR
diff --git a/doc/stunnel.pl.html.in b/doc/stunnel.pl.html.in
index f7a28cd0..6b63656b 100644
--- a/doc/stunnel.pl.html.in
+++ b/doc/stunnel.pl.html.in
@@ -526,6 +526,8 @@
 
 <p>Mo&#x17C;liwe jest wyspecyfikowanie wielu opcji <b>OpenSSL</b> przez wielokrotne u&#x17C;ycie komendy <b>config</b>.</p>
 
+<p>Zamiast wy&#x142;&#x105;cza&#x107; <i>config = Curves:list_curves</i> u&#x17C;yj opcji <i>curves</i> w celu ustawnienia krzywych eliptycznych.</p>
+
 <p>Opcja ta wymaga biblioteki OpenSSL w wersji 1.0.2 lub nowszej.</p>
 
 </dd>
@@ -564,7 +566,7 @@
 
 <p>krzywe ECDH odddzielone &#39;:&#39;</p>
 
-<p>Wersje OpenSSL starsze ni&#x17C; 1.1.0 pozwalaj&#x105; na u&#x17C;ycie tylko jednej krzywej.</p>
+<p>Wersje OpenSSL starsze ni&#x17C; 1.1.1 pozwalaj&#x105; na u&#x17C;ycie tylko jednej krzywej.</p>
 
 <p>List&#x119; dost&#x119;pnych krzywych mo&#x17C;na uzyska&#x107; poleceniem:</p>
 
@@ -997,6 +999,60 @@
 
 <p>domy&#x15B;lnie: no</p>
 
+</dd>
+<dt id="securityLevel-POZIOM"><b>securityLevel</b> = POZIOM</dt>
+<dd>
+
+<p>ustaw poziom bezpiecze&#x144;stwa</p>
+
+<p>Znaczenie ka&#x17C;dego poziomu opisano poni&#x17C;ej:</p>
+
+<dl>
+
+<dt id="poziom-0">poziom 0</dt>
+<dd>
+
+<p>Wszystko jest dozwolone.</p>
+
+</dd>
+<dt id="poziom-1">poziom 1</dt>
+<dd>
+
+<p>Poziom bezpiecze&#x144;stwa zapewniaj&#x105;cy minimum 80 bit&oacute;w bezpiecze&#x144;stwa. &#x17B;adne parametry kryptograficzne oferuj&#x105;ce poziom bezpiecze&#x144;stwa poni&#x17C;ej 80 bit&oacute;w nie mog&#x105; zosta&#x107; u&#x17C;yte. W zwi&#x105;zku z tym RSA, DSA oraz klucze DH kr&oacute;tsze ni&#x17C; 1024 bity, a tak&#x17C;e klucze ECC kr&oacute;tsze ni&#x17C; 160 bit&oacute;w i wszystkie eksportowe zestawy szyfr&oacute;w s&#x105; niedozwolone. U&#x17C;ycie SSLv2 jest zabronione. Wszelkie listy parametr&oacute;w kryptograficznych u&#x17C;ywaj&#x105;ce MD5 do MAC s&#x105; zabronione.</p>
+
+</dd>
+<dt id="poziom-2">poziom 2</dt>
+<dd>
+
+<p>Poziom bezpiecze&#x144;stwa zapewniaj&#x105;cy 112 bit&oacute;w bezpiecze&#x144;stwa. W zwi&#x105;zku z tym RSA, DSA oraz klucze DH kr&oacute;tsze ni&#x17C; 2048 bit&oacute;w, a tak&#x17C;e klucze ECC kr&oacute;tsze ni&#x17C; 224 bity s&#x105; niedozwolone. Opr&oacute;cz wy&#x142;&#x105;cze&#x144; z poziomu 1 zabronione jest tak&#x17C;e korzystanie z zestaw&oacute;w szyfr&oacute;w u&#x17C;ywaj&#x105;cych RC4. U&#x17C;ycie SSLv3 jest zabronione. Kompresja jest wy&#x142;&#x105;czona.</p>
+
+</dd>
+<dt id="poziom-3">poziom 3</dt>
+<dd>
+
+<p>Poziom bezpiecze&#x144;stwa zapewniaj&#x105;cy 128 bit&oacute;w bezpiecze&#x144;stwa. W zwi&#x105;zku z tym RSA, DSA oraz klucze DH kr&oacute;tsze ni&#x17C; 3072 bity, a tak&#x17C;e klucze ECC kr&oacute;tsze ni&#x17C; 256 bit&oacute;w s&#x105; niedozwolone. Opr&oacute;cz wy&#x142;&#x105;cze&#x144; z poziomu 2 zabronione jest tak&#x17C;e korzystanie z zestaw&oacute;w szyfr&oacute;w nie zapewniaj&#x105;cych utajniania z wyprzedzeniem (forward secrecy). Wersje TLS starsze ni&#x17C; 1.1 s&#x105; zabronione. Bilety sesji s&#x105; wy&#x142;&#x105;czone.</p>
+
+</dd>
+<dt id="poziom-4">poziom 4</dt>
+<dd>
+
+<p>Poziom bezpiecze&#x144;stwa zapewniaj&#x105;cy 192 bity bezpiecze&#x144;stwa. W zwi&#x105;zku z tym RSA, DSA oraz klucze DH kr&oacute;tsze ni&#x17C; 7680 bit&oacute;w, a tak&#x17C;e klucze ECC kr&oacute;tsze ni&#x17C; 384 bity s&#x105; niedozwolone. Listy parametr&oacute;w kryptograficznych u&#x17C;ywaj&#x105;cych SHA1 do MAC s&#x105; zabronione. Wersje TLS starsze ni&#x17C; 1.2 s&#x105; zabronione.</p>
+
+</dd>
+<dt id="poziom-5">poziom 5</dt>
+<dd>
+
+<p>Poziom bezpiecze&#x144;stwa zapewniaj&#x105;cy 256 bit&oacute;w bezpiecze&#x144;stwa. W zwi&#x105;zku z tym RSA, DSA oraz klucze DH kr&oacute;tsze ni&#x17C; 15360 bit&oacute;w, a tak&#x17C;e klucze ECC kr&oacute;tsze ni&#x17C; 512 bit&oacute;w s&#x105; niedozwolone.</p>
+
+</dd>
+<dt id="domylnie:-2">domy&#x15B;lnie: 2</dt>
+<dd>
+
+</dd>
+</dl>
+
+<p>Opcja <i>securityLevel</i> jest dost&#x119;pna pocz&#x105;wszy od <b>OpenSSL 1.1.0</b>.</p>
+
 </dd>
 <dt id="requireCert-yes-no"><b>requireCert</b> = yes | no</dt>
 <dd>
@@ -1349,31 +1405,31 @@
 
 <dl>
 
-<dt id="poziom-0"><i>poziom 0</i></dt>
+<dt id="poziom-01"><i>poziom 0</i></dt>
 <dd>
 
 <p>zarz&#x105;daj certyfikatu i zignoruj go</p>
 
 </dd>
-<dt id="poziom-1"><i>poziom 1</i></dt>
+<dt id="poziom-11"><i>poziom 1</i></dt>
 <dd>
 
 <p>weryfikuj, je&#x17C;eli zosta&#x142; przedstawiony</p>
 
 </dd>
-<dt id="poziom-2"><i>poziom 2</i></dt>
+<dt id="poziom-21"><i>poziom 2</i></dt>
 <dd>
 
 <p>weryfikuj z zainstalowanym certyfikatem Centrum Certyfikacji</p>
 
 </dd>
-<dt id="poziom-3"><i>poziom 3</i></dt>
+<dt id="poziom-31"><i>poziom 3</i></dt>
 <dd>
 
 <p>weryfikuj z lokalnie zainstalowanym certyfikatem drugiej strony</p>
 
 </dd>
-<dt id="poziom-4"><i>poziom 4</i></dt>
+<dt id="poziom-41"><i>poziom 4</i></dt>
 <dd>
 
 <p>weryfikuj z certyfikatem drugiej strony ignoruj&#x105;c &#x142;a&#x144;cuch CA</p>
diff --git a/doc/stunnel.pl.pod.in b/doc/stunnel.pl.pod.in
index 76a7358e..89acca56 100644
--- a/doc/stunnel.pl.pod.in
+++ b/doc/stunnel.pl.pod.in
@@ -469,6 +469,9 @@ I<SSL_CONF_cmd(3ssl)>.
 MoÅ¼liwe jest wyspecyfikowanie wielu opcji B<OpenSSL> przez wielokrotne uÅ¼ycie
 komendy B<config>.
 
+Zamiast wyÅÄczaÄ I<config = Curves:list_curves>
+uÅ¼yj opcji I<curves> w celu ustawnienia krzywych eliptycznych.
+
 Opcja ta wymaga biblioteki OpenSSL w wersji 1.0.2 lub nowszej.
 
 =item B<connect> = [HOST:]PORT
@@ -507,7 +510,7 @@ przez opcje I<verifyChain> i I<verifyPeer>.
 
 krzywe ECDH odddzielone ':'
 
-Wersje OpenSSL starsze niÅ¼ 1.1.0 pozwalajÄ na uÅ¼ycie tylko jednej krzywej.
+Wersje OpenSSL starsze niÅ¼ 1.1.1 pozwalajÄ na uÅ¼ycie tylko jednej krzywej.
 
 ListÄ dostÄpnych krzywych moÅ¼na uzyskaÄ poleceniem:
 
@@ -903,6 +906,44 @@ poÅÄcz ponownie sekcjÄ connect+exec po rozÅÄczeniu
 
 domyÅlnie: no
 
+=item B<securityLevel> = POZIOM
+
+ustaw poziom bezpieczeÅstwa
+
+Znaczenie kaÅ¼dego poziomu opisano poniÅ¼ej:
+
+=over 4
+
+=item poziom 0
+
+Wszystko jest dozwolone.
+
+=item poziom 1
+
+Poziom bezpieczeÅstwa zapewniajÄcy minimum 80 bitÃ³w bezpieczeÅstwa. Å»adne parametry kryptograficzne oferujÄce poziom bezpieczeÅstwa poniÅ¼ej 80 bitÃ³w nie mogÄ zostaÄ uÅ¼yte. W zwiÄzku z tym RSA, DSA oraz klucze DH krÃ³tsze niÅ¼ 1024 bity, a takÅ¼e klucze ECC krÃ³tsze niÅ¼ 160 bitÃ³w i wszystkie eksportowe zestawy szyfrÃ³w sÄ niedozwolone. UÅ¼ycie SSLv2 jest zabronione. Wszelkie listy parametrÃ³w kryptograficznych uÅ¼ywajÄce MD5 do MAC sÄ zabronione.
+
+=item poziom 2
+
+Poziom bezpieczeÅstwa zapewniajÄcy 112 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym RSA, DSA oraz klucze DH krÃ³tsze niÅ¼ 2048 bitÃ³w, a takÅ¼e klucze ECC krÃ³tsze niÅ¼ 224 bity sÄ niedozwolone. OprÃ³cz wyÅÄczeÅ z poziomu 1 zabronione jest takÅ¼e korzystanie z zestawÃ³w szyfrÃ³w uÅ¼ywajÄcych RC4. UÅ¼ycie SSLv3 jest zabronione. Kompresja jest wyÅÄczona.
+
+=item poziom 3
+
+Poziom bezpieczeÅstwa zapewniajÄcy 128 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym RSA, DSA oraz klucze DH krÃ³tsze niÅ¼ 3072 bity, a takÅ¼e klucze ECC krÃ³tsze niÅ¼ 256 bitÃ³w sÄ niedozwolone. OprÃ³cz wyÅÄczeÅ z poziomu 2  zabronione jest takÅ¼e korzystanie z zestawÃ³w szyfrÃ³w nie zapewniajÄcych utajniania z wyprzedzeniem (forward secrecy).  Wersje TLS starsze niÅ¼ 1.1 sÄ zabronione. Bilety sesji sÄ wyÅÄczone.
+
+=item poziom 4
+
+Poziom bezpieczeÅstwa zapewniajÄcy 192 bity bezpieczeÅstwa. W zwiÄzku z tym RSA, DSA oraz klucze DH krÃ³tsze niÅ¼ 7680 bitÃ³w, a takÅ¼e klucze ECC krÃ³tsze niÅ¼ 384 bity sÄ niedozwolone. Listy parametrÃ³w kryptograficznych uÅ¼ywajÄcych SHA1 do MAC sÄ zabronione. Wersje TLS starsze niÅ¼ 1.2 sÄ zabronione.
+
+=item poziom 5
+
+Poziom bezpieczeÅstwa zapewniajÄcy 256 bitÃ³w bezpieczeÅstwa. W zwiÄzku z tym RSA, DSA oraz klucze DH krÃ³tsze niÅ¼ 15360 bitÃ³w, a takÅ¼e klucze ECC krÃ³tsze niÅ¼ 512 bitÃ³w sÄ niedozwolone.
+
+=item domyÅlnie: 2
+
+=back
+
+Opcja I<securityLevel> jest dostÄpna poczÄwszy od B<OpenSSL 1.1.0>.
+
 =item B<requireCert> = yes | no
 
 wymagaj certyfikatu klienta dla I<verifyChain> lub I<verifyPeer>
diff --git a/doc/stunnel.pod.in b/doc/stunnel.pod.in
index 5edb6809..e9abd4f5 100644
--- a/doc/stunnel.pod.in
+++ b/doc/stunnel.pod.in
@@ -461,6 +461,8 @@ I<SSL_CONF_cmd(3ssl)> manual page.
 
 Several I<config> lines can be used to specify multiple configuration commands.
 
+Use I<curves> option instead of enabling I<config = Curves:list_curves> to support elliptic curves.
+
 This option requires OpenSSL 1.0.2 or later.
 
 =item B<connect> = [HOST:]PORT
@@ -499,7 +501,7 @@ I<verifyPeer> options.
 
 ECDH curves separated with ':'
 
-Only a single curve name is allowed for OpenSSL older than 1.1.0.
+Only a single curve name is allowed for OpenSSL older than 1.1.1.
 
 To get a list of supported curves use:
 
@@ -892,6 +894,44 @@ reconnect a connect+exec section after it was disconnected
 
 default: no
 
+=item B<securityLevel> = LEVEL
+
+set the security level
+
+The meaning of each level is described below:
+
+=over 4
+
+=item level 0
+
+Everything is permitted.
+
+=item level 1
+
+The security level corresponds to a minimum of 80 bits of security. Any parameters offering below 80 bits of security are excluded. As a result RSA, DSA and DH keys shorter than 1024 bits and ECC keys shorter than 160 bits are prohibited. All export cipher suites are prohibited since they all offer less than 80 bits of security. SSL version 2 is prohibited. Any cipher suite using MD5 for the MAC is also prohibited.
+
+=item level 2
+
+Security level set to 112 bits of security. As a result RSA, DSA and DH keys shorter than 2048 bits and ECC keys shorter than 224 bits are prohibited. In addition to the level 1 exclusions any cipher suite using RC4 is also prohibited. SSL version 3 is also not allowed. Compression is disabled.
+
+=item level 3
+
+Security level set to 128 bits of security. As a result RSA, DSA and DH keys shorter than 3072 bits and ECC keys shorter than 256 bits are prohibited. In addition to the level 2 exclusions cipher suites not offering forward secrecy are prohibited. TLS versions below 1.1 are not permitted. Session tickets are disabled.
+
+=item level 4
+
+Security level set to 192 bits of security. As a result RSA, DSA and DH keys shorter than 7680 bits and ECC keys shorter than 384 bits are prohibited. Cipher suites using SHA1 for the MAC are prohibited. TLS versions below 1.2 are not permitted.
+
+=item level 5
+
+Security level set to 256 bits of security. As a result RSA, DSA and DH keys shorter than 15360 bits and ECC keys shorter than 512 bits are prohibited.
+
+=item default: 2
+
+=back
+
+The I<securityLevel> option is only available when compiled with B<OpenSSL 1.1.0> and later.
+
 =item B<requireCert> = yes | no
 
 require a client certificate for I<verifyChain> or I<verifyPeer>
diff --git a/src/Makefile.am b/src/Makefile.am
index 4c53d12e..d30842fc 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 ###############################################################################
 # File lists                                                                  #
diff --git a/src/Makefile.in b/src/Makefile.in
index ca842b43..19bdaf77 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 ###############################################################################
 # File lists                                                                  #
diff --git a/src/client.c b/src/client.c
index 2983bb32..7825e042 100644
--- a/src/client.c
+++ b/src/client.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -56,6 +56,9 @@ NOEXPORT void local_start(CLI *);
 NOEXPORT void remote_start(CLI *);
 NOEXPORT void ssl_start(CLI *);
 NOEXPORT void session_cache_retrieve(CLI *);
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+NOEXPORT void print_tmp_key(SSL *s);
+#endif
 NOEXPORT void print_cipher(CLI *);
 NOEXPORT void transfer(CLI *);
 NOEXPORT int parse_socket_error(CLI *, const char *);
@@ -646,6 +649,42 @@ NOEXPORT void session_cache_retrieve(CLI *c) {
     CRYPTO_THREAD_unlock(stunnel_locks[LOCK_SESSION]);
 }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+NOEXPORT void print_tmp_key(SSL *s) {
+    EVP_PKEY *key;
+
+    if (!SSL_get_peer_tmp_key(s, &key)) {
+        sslerror("SSL_get_peer_tmp_key");
+        return;
+    }
+    switch (EVP_PKEY_id(key)) {
+    case EVP_PKEY_RSA:
+        s_log(LOG_INFO, "Peer temporary key: RSA, %d bits", EVP_PKEY_bits(key));
+        break;
+    case EVP_PKEY_DH:
+        s_log(LOG_INFO, "Peer temporary key: DH, %d bits", EVP_PKEY_bits(key));
+        break;
+#ifndef OPENSSL_NO_EC
+    case EVP_PKEY_EC:
+        {
+            EC_KEY *ec=EVP_PKEY_get1_EC_KEY(key);
+            int nid=EC_GROUP_get_curve_name(EC_KEY_get0_group(ec));
+            const char *cname=EC_curve_nid2nist(nid);
+            EC_KEY_free(ec);
+            if (cname == NULL)
+                cname=OBJ_nid2sn(nid);
+            s_log(LOG_INFO, "Peer temporary key: ECDH, %s, %d bits", cname, EVP_PKEY_bits(key));
+        }
+        break;
+#endif
+    default:
+        s_log(LOG_INFO, "Peer temporary key: %s, %d bits", OBJ_nid2sn(EVP_PKEY_id(key)),
+                   EVP_PKEY_bits(key));
+    }
+    EVP_PKEY_free(key);
+}
+#endif /* OpenSSL 1.1.1 or later */
+
 NOEXPORT void print_cipher(CLI *c) { /* print negotiated cipher */
     SSL_CIPHER *cipher;
 #ifndef OPENSSL_NO_COMP
@@ -664,6 +703,9 @@ NOEXPORT void print_cipher(CLI *c) { /* print negotiated cipher */
     s_log(LOG_INFO, "%s ciphersuite: %s (%d-bit encryption)",
         SSL_get_version(c->ssl), SSL_CIPHER_get_name(cipher),
         SSL_CIPHER_get_bits(cipher, NULL));
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+    print_tmp_key(c->ssl);
+#endif
 
 #ifndef OPENSSL_NO_COMP
     compression=SSL_get_current_compression(c->ssl);
@@ -683,7 +725,6 @@ NOEXPORT void transfer(CLI *c) {
     int has_pending=0, prev_has_pending;
 #endif
     int watchdog=0; /* a counter to detect an infinite loop */
-    ssize_t num;
     int err;
     /* logical channels (not file descriptors!) open for read or write */
     int sock_open_rd=1, sock_open_wr=1;
@@ -846,9 +887,9 @@ NOEXPORT void transfer(CLI *c) {
 
         /****************************** send TLS close_notify alert */
         if(shutdown_wants_read || shutdown_wants_write) {
-            num=SSL_shutdown(c->ssl); /* send close_notify alert */
+            int num=SSL_shutdown(c->ssl); /* send close_notify alert */
             if(num<0) /* -1 - not completed */
-                err=SSL_get_error(c->ssl, (int)num);
+                err=SSL_get_error(c->ssl, num);
             else /* 0 or 1 - success */
                 err=SSL_ERROR_NONE;
             switch(err) {
@@ -856,16 +897,6 @@ NOEXPORT void transfer(CLI *c) {
                 s_log(LOG_INFO, "SSL_shutdown successfully sent close_notify alert");
                 shutdown_wants_read=shutdown_wants_write=0;
                 break;
-            case SSL_ERROR_SYSCALL: /* socket error */
-                if(parse_socket_error(c, "SSL_shutdown"))
-                    break; /* a non-critical error: retry */
-                SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
-                shutdown_wants_read=shutdown_wants_write=0;
-                break;
-            case SSL_ERROR_ZERO_RETURN: /* connection closed */
-                SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
-                shutdown_wants_read=shutdown_wants_write=0;
-                break;
             case SSL_ERROR_WANT_WRITE:
                 s_log(LOG_DEBUG, "SSL_shutdown returned WANT_WRITE: retrying");
                 shutdown_wants_read=0;
@@ -879,6 +910,16 @@ NOEXPORT void transfer(CLI *c) {
             case SSL_ERROR_SSL: /* TLS error */
                 sslerror("SSL_shutdown");
                 throw_exception(c, 1);
+            case SSL_ERROR_ZERO_RETURN: /* received a close_notify alert */
+                SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
+                shutdown_wants_read=shutdown_wants_write=0;
+                break;
+            case SSL_ERROR_SYSCALL: /* socket error */
+                if(parse_socket_error(c, "SSL_shutdown"))
+                    break; /* a non-critical error: retry */
+                SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
+                shutdown_wants_read=shutdown_wants_write=0;
+                break;
             default:
                 s_log(LOG_ERR, "SSL_shutdown/SSL_get_error returned %d", err);
                 throw_exception(c, 1);
@@ -887,7 +928,7 @@ NOEXPORT void transfer(CLI *c) {
 
         /****************************** write to socket */
         if(sock_open_wr && sock_can_wr) {
-            num=writesocket(c->sock_wfd->fd, c->ssl_buff, c->ssl_ptr);
+            ssize_t num=writesocket(c->sock_wfd->fd, c->ssl_buff, c->ssl_ptr);
             switch(num) {
             case -1: /* error */
                 if(parse_socket_error(c, "writesocket"))
@@ -908,7 +949,7 @@ NOEXPORT void transfer(CLI *c) {
 
         /****************************** read from socket */
         if(sock_open_rd && sock_can_rd) {
-            num=readsocket(c->sock_rfd->fd,
+            ssize_t num=readsocket(c->sock_rfd->fd,
                 c->sock_buff+c->sock_ptr, BUFFSIZE-c->sock_ptr);
             switch(num) {
             case -1:
@@ -936,10 +977,10 @@ NOEXPORT void transfer(CLI *c) {
         /****************************** write to TLS */
         if((write_wants_read && ssl_can_rd) ||
                 (write_wants_write && ssl_can_wr)) {
+            int num=SSL_write(c->ssl, c->sock_buff, (int)(c->sock_ptr));
             write_wants_read=0;
             write_wants_write=0;
-            num=SSL_write(c->ssl, c->sock_buff, (int)(c->sock_ptr));
-            switch(err=SSL_get_error(c->ssl, (int)num)) {
+            switch(err=SSL_get_error(c->ssl, num)) {
             case SSL_ERROR_NONE:
                 if(num==0) { /* nothing was written: ignore */
                     s_log(LOG_DEBUG, "SSL_write returned 0");
@@ -964,8 +1005,13 @@ NOEXPORT void transfer(CLI *c) {
                 s_log(LOG_DEBUG,
                     "SSL_write returned WANT_X509_LOOKUP: retrying");
                 break;
+            case SSL_ERROR_SSL:
+                sslerror("SSL_write");
+                throw_exception(c, 1);
+            case SSL_ERROR_ZERO_RETURN: /* a buffered close_notify alert */
+                /* fall through */
             case SSL_ERROR_SYSCALL: /* socket error */
-                if(num && parse_socket_error(c, "SSL_write"))
+                if(parse_socket_error(c, "SSL_write") && num) /* always log the error */
                     break; /* a non-critical error: retry */
                 /* EOF -> buggy (e.g. Microsoft) peer:
                  * TLS socket closed without close_notify alert */
@@ -978,14 +1024,6 @@ NOEXPORT void transfer(CLI *c) {
                 s_log(LOG_INFO, "TLS socket closed (SSL_write)");
                 SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
                 break;
-            case SSL_ERROR_ZERO_RETURN: /* close_notify alert received */
-                s_log(LOG_INFO, "TLS closed (SSL_write)");
-                if(SSL_version(c->ssl)==SSL2_VERSION)
-                    SSL_set_shutdown(c->ssl, SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
-                break;
-            case SSL_ERROR_SSL:
-                sslerror("SSL_write");
-                throw_exception(c, 1);
             default:
                 s_log(LOG_ERR, "SSL_write/SSL_get_error returned %d", err);
                 throw_exception(c, 1);
@@ -997,10 +1035,10 @@ NOEXPORT void transfer(CLI *c) {
                 /* it may be possible to read some pending data after
                  * writesocket() above made some room in c->ssl_buff */
                 (read_wants_write && ssl_can_wr)) {
+            int num=SSL_read(c->ssl, c->ssl_buff+c->ssl_ptr, (int)(BUFFSIZE-c->ssl_ptr));
             read_wants_read=0;
             read_wants_write=0;
-            num=SSL_read(c->ssl, c->ssl_buff+c->ssl_ptr, (int)(BUFFSIZE-c->ssl_ptr));
-            switch(err=SSL_get_error(c->ssl, (int)num)) {
+            switch(err=SSL_get_error(c->ssl, num)) {
             case SSL_ERROR_NONE:
                 if(num==0) { /* nothing was read: ignore */
                     s_log(LOG_DEBUG, "SSL_read returned 0");
@@ -1023,8 +1061,17 @@ NOEXPORT void transfer(CLI *c) {
                 s_log(LOG_DEBUG,
                     "SSL_read returned WANT_X509_LOOKUP: retrying");
                 break;
+            case SSL_ERROR_SSL:
+                sslerror("SSL_read");
+                throw_exception(c, 1);
+            case SSL_ERROR_ZERO_RETURN: /* received a close_notify alert */
+                s_log(LOG_INFO, "TLS closed (SSL_read)");
+                if(SSL_version(c->ssl)==SSL2_VERSION)
+                    SSL_set_shutdown(c->ssl,
+                        SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
+                break;
             case SSL_ERROR_SYSCALL:
-                if(num && parse_socket_error(c, "SSL_read"))
+                if(parse_socket_error(c, "SSL_read") && num) /* always log the error */
                     break; /* a non-critical error: retry */
                 /* EOF -> buggy (e.g. Microsoft) peer:
                  * TLS socket closed without close_notify alert */
@@ -1038,15 +1085,6 @@ NOEXPORT void transfer(CLI *c) {
                 SSL_set_shutdown(c->ssl,
                     SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
                 break;
-            case SSL_ERROR_ZERO_RETURN: /* close_notify alert received */
-                s_log(LOG_INFO, "TLS closed (SSL_read)");
-                if(SSL_version(c->ssl)==SSL2_VERSION)
-                    SSL_set_shutdown(c->ssl,
-                        SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN);
-                break;
-            case SSL_ERROR_SSL:
-                sslerror("SSL_read");
-                throw_exception(c, 1);
             default:
                 s_log(LOG_ERR, "SSL_read/SSL_get_error returned %d", err);
                 throw_exception(c, 1);
@@ -1165,22 +1203,15 @@ NOEXPORT void transfer(CLI *c) {
         shutdown_wants_read || shutdown_wants_write);
 }
 
-#ifdef __GNUC__
-#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
-#pragma GCC diagnostic push
-#endif /* __GNUC__>=4.6 */
-#if __GNUC__ >= 7
-#pragma GCC diagnostic ignored "-Wimplicit-fallthrough"
-#endif /* __GNUC__>=7 */
-#endif /* __GNUC__ */
-
     /* returns 0 on close and 1 on non-critical errors */
 NOEXPORT int parse_socket_error(CLI *c, const char *text) {
     switch(get_last_socket_error()) {
         /* http://tangentsoft.net/wskfaq/articles/bsd-compatibility.html */
     case 0: /* close on read, or close on write on WIN32 */
+        /* fall through */
 #ifndef USE_WIN32
     case EPIPE: /* close on write on Unix */
+        /* fall through */
 #endif
     case S_ECONNABORTED:
         s_log(LOG_INFO, "%s: Socket is closed", text);
@@ -1205,8 +1236,8 @@ NOEXPORT int parse_socket_error(CLI *c, const char *text) {
             s_log(LOG_INFO, "%s: Socket is closed (exec)", text);
             return 0;
         }
-        /* fall through */
 #endif
+        /* fall through */
     default:
         sockerror(text);
         throw_exception(c, 1);
@@ -1214,12 +1245,6 @@ NOEXPORT int parse_socket_error(CLI *c, const char *text) {
     }
 }
 
-#ifdef __GNUC__
-#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
-#pragma GCC diagnostic pop
-#endif /* __GNUC__>=4.6 */
-#endif /* __GNUC__ */
-
 NOEXPORT void auth_user(CLI *c) {
 #ifndef _WIN32_WCE
     struct servent *s_ent;    /* structure for getservbyname */
diff --git a/src/common.h b/src/common.h
index 2ba28c44..929cfa71 100644
--- a/src/common.h
+++ b/src/common.h
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -42,6 +42,8 @@
 
 /**************************************** common constants */
 
+#define DEFAULT_SECURITY_LEVEL 2
+
 #define LIBWRAP_CLIENTS 5
 
 /* CPU stack size */
diff --git a/src/cron.c b/src/cron.c
index 30aa8557..e75642d2 100644
--- a/src/cron.c
+++ b/src/cron.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/ctx.c b/src/ctx.c
index 9f11da0f..63b1719e 100644
--- a/src/ctx.c
+++ b/src/ctx.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -137,7 +137,7 @@ typedef long SSL_OPTIONS_TYPE;
 #endif
 
 int context_init(SERVICE_OPTIONS *section) { /* init TLS context */
-    /* create TLS context */
+    /* create a new TLS context */
 #if OPENSSL_VERSION_NUMBER>=0x10100000L
     if(section->option.client)
         section->ctx=SSL_CTX_new(TLS_client_method());
@@ -165,13 +165,32 @@ int context_init(SERVICE_OPTIONS *section) { /* init TLS context */
         sslerror("SSL_CTX_new");
         return 1; /* FAILED */
     }
-    /* for callbacks */
+
+    /* allow callbacks to access their SERVICE_OPTIONS structure */
     if(!SSL_CTX_set_ex_data(section->ctx, index_ssl_ctx_opt, section)) {
         sslerror("SSL_CTX_set_ex_data");
         return 1; /* FAILED */
     }
     current_section=section; /* setup current section for callbacks */
 
+#if OPENSSL_VERSION_NUMBER>=0x10100000L
+    /* set the security level */
+    if(section->security_level>=0) {
+        /* set the user-specified value */
+        SSL_CTX_set_security_level(section->ctx, section->security_level);
+        s_log(LOG_INFO, "User-specified security level set: %d",
+            section->security_level);
+    } else if(SSL_CTX_get_security_level(section->ctx)<DEFAULT_SECURITY_LEVEL) {
+        /* set our default, as it is more secure than the OpenSSL default */
+        SSL_CTX_set_security_level(section->ctx, DEFAULT_SECURITY_LEVEL);
+        s_log(LOG_INFO, "stunnel default security level set: %d",
+            DEFAULT_SECURITY_LEVEL);
+    } else { /* our default is not more secure than the OpenSSL default */
+        s_log(LOG_INFO, "OpenSSL security level is used: %d",
+            SSL_CTX_get_security_level(section->ctx));
+    }
+#endif /* OpenSSL 1.1.0 or later */
+
     /* ciphers */
     if(section->cipher_list) {
         s_log(LOG_DEBUG, "Ciphers: %s", section->cipher_list);
@@ -221,7 +240,7 @@ int context_init(SERVICE_OPTIONS *section) { /* init TLS context */
     if(conf_init(section))
         return 1; /* FAILED */
 
-    /* mode */
+    /* setup mode of operation for the TLS state machine */
 #ifdef SSL_MODE_RELEASE_BUFFERS
     SSL_CTX_set_mode(section->ctx,
         SSL_MODE_ENABLE_PARTIAL_WRITE |
@@ -274,18 +293,17 @@ int context_init(SERVICE_OPTIONS *section) { /* init TLS context */
     if(verify_init(section))
         return 1; /* FAILED */
 
-    /* initialize the DH/ECDH key agreement in the server mode */
-    if(!section->option.client) {
+    /* initialize the DH/ECDH key agreement */
 #ifndef OPENSSL_NO_TLSEXT
+    if(!section->option.client)
         SSL_CTX_set_tlsext_servername_callback(section->ctx, servername_cb);
 #endif /* OPENSSL_NO_TLSEXT */
 #ifndef OPENSSL_NO_DH
-        dh_init(section); /* ignore the result (errors are not critical) */
+    dh_init(section); /* ignore the result (errors are not critical) */
 #endif /* OPENSSL_NO_DH */
 #ifndef OPENSSL_NO_ECDH
-        ecdh_init(section); /* ignore the result (errors are not critical) */
+    ecdh_init(section); /* ignore the result (errors are not critical) */
 #endif /* OPENSSL_NO_ECDH */
-    }
 
     return 0; /* OK */
 }
@@ -378,7 +396,11 @@ NOEXPORT int dh_init(SERVICE_OPTIONS *section) {
 
     section->option.dh_temp_params=0; /* disable by default */
 
-    /* check if DH is actually enabled for this section */
+    /* check if DH is needed for this section */
+    if(section->option.client) {
+        s_log(LOG_INFO, "DH initialization skipped: client section");
+        return 0; /* OK */
+    }
     ciphers=SSL_CTX_get_ciphers(section->ctx);
     if(!ciphers)
         return 1; /* ERROR (unlikely) */
@@ -395,7 +417,7 @@ NOEXPORT int dh_init(SERVICE_OPTIONS *section) {
         }
     }
     if(i==n) { /* no DH ciphers found */
-        s_log(LOG_INFO, "DH initialization not needed");
+        s_log(LOG_INFO, "DH initialization skipped: no DH ciphersuites");
         return 0; /* OK */
     }
 
@@ -1115,12 +1137,12 @@ NOEXPORT int ssl_tlsext_ticket_key_cb(SSL *ssl, unsigned char *key_name,
         return -1;
     }
     if(c->opt->ticket_key->key_len == 16)
-        cipher = EVP_aes_128_cbc();
+        cipher=EVP_aes_128_cbc();
     else /* c->opt->ticket_key->key_len == 32 */
-        cipher = EVP_aes_256_cbc();
+        cipher=EVP_aes_256_cbc();
     if(enc) { /* create new session */
         /* EVP_CIPHER_iv_length() returns 16 for either cipher EVP_aes_128_cbc() or EVP_aes_256_cbc() */
-        iv_len = EVP_CIPHER_iv_length(cipher);
+        iv_len=EVP_CIPHER_iv_length(cipher);
         if(RAND_bytes(iv, iv_len) <= 0) { /* RAND_bytes error */
             s_log(LOG_ERR, "RAND_bytes failed");
             return -1;
diff --git a/src/dhparam.c b/src/dhparam.c
index c5255b8a..4f31386a 100644
--- a/src/dhparam.c
+++ b/src/dhparam.c
@@ -5,32 +5,32 @@
 DH *get_dh2048(void)
 {
     static unsigned char dhp_2048[] = {
-        0xD5, 0x75, 0xF1, 0x23, 0xC1, 0x81, 0x4B, 0x44, 0x23, 0xBE,
-        0x97, 0x81, 0x7A, 0xDA, 0x97, 0x1F, 0x1F, 0x0D, 0xD5, 0xEC,
-        0xC5, 0x5F, 0x86, 0x42, 0x7F, 0x38, 0xA3, 0x95, 0xEE, 0xA0,
-        0x52, 0x2C, 0xB7, 0x20, 0x29, 0xC1, 0xC7, 0xE6, 0x8E, 0x6F,
-        0xE5, 0xC1, 0x0D, 0xDD, 0x8A, 0xEF, 0x8D, 0xE7, 0xA8, 0x63,
-        0xB4, 0xF7, 0x58, 0x32, 0x0E, 0x24, 0xAC, 0x30, 0x94, 0xF5,
-        0xC7, 0x02, 0x81, 0x1B, 0xC7, 0x68, 0xE5, 0x71, 0xD7, 0x1E,
-        0x3D, 0xE4, 0x2E, 0x2F, 0xC0, 0x0A, 0xED, 0x34, 0xAC, 0xC0,
-        0x1F, 0x0A, 0x56, 0xA4, 0x12, 0x02, 0xFD, 0x68, 0xD2, 0x4D,
-        0x5E, 0x0A, 0x5D, 0x78, 0xE3, 0xA0, 0x85, 0x75, 0xD2, 0xA9,
-        0xC1, 0xF2, 0xAD, 0x65, 0x11, 0xDE, 0xE8, 0x05, 0x68, 0x36,
-        0x4C, 0x92, 0x99, 0x21, 0xB9, 0x69, 0xD0, 0x6F, 0xD8, 0xA3,
-        0xEA, 0x35, 0x13, 0x93, 0xDC, 0x1B, 0x13, 0x16, 0xB2, 0x15,
-        0x8E, 0x10, 0x22, 0xCE, 0x01, 0x1F, 0x1C, 0x09, 0x86, 0xD5,
-        0xE7, 0xCB, 0xCF, 0xFA, 0xED, 0x2F, 0xE2, 0x3A, 0x65, 0x14,
-        0xC9, 0xFA, 0x70, 0x99, 0xF7, 0xE0, 0x30, 0xBF, 0x7F, 0xEA,
-        0x84, 0x14, 0x8A, 0x51, 0xC9, 0xE9, 0x85, 0x73, 0x7F, 0xA1,
-        0xB0, 0xC3, 0x33, 0x9A, 0xAB, 0x69, 0x4E, 0x75, 0xFB, 0x12,
-        0xB0, 0x9E, 0xB1, 0xD9, 0xD1, 0xB9, 0x32, 0x1D, 0xC6, 0xD9,
-        0x2C, 0xAA, 0xB0, 0xC5, 0x3E, 0x69, 0x56, 0xA2, 0xB3, 0xA2,
-        0x81, 0xCA, 0x9D, 0x77, 0xBB, 0x52, 0x44, 0xA2, 0xED, 0xE0,
-        0xF0, 0x2A, 0x81, 0x85, 0x90, 0xB6, 0x04, 0x60, 0xEB, 0x09,
-        0x72, 0x08, 0x44, 0xAF, 0x28, 0xF5, 0x15, 0x34, 0x87, 0x5C,
-        0x8A, 0xB4, 0x5B, 0x15, 0x6A, 0xAD, 0x27, 0x4E, 0xA0, 0xDE,
-        0x99, 0x22, 0xCF, 0xAB, 0x4C, 0xFD, 0x75, 0x10, 0x5D, 0xFF,
-        0xE8, 0x81, 0x50, 0xC4, 0xC0, 0x4B
+        0xCF, 0x9F, 0x3A, 0x9C, 0xC5, 0xA5, 0x89, 0x27, 0x6D, 0x2C,
+        0x2C, 0xF3, 0xA6, 0x00, 0xD2, 0x7C, 0xEA, 0xFA, 0xF2, 0x43,
+        0x4F, 0x49, 0x0A, 0xFC, 0xA6, 0xE7, 0x75, 0xCA, 0x07, 0xDC,
+        0xA5, 0xF2, 0x83, 0x4E, 0x5A, 0xA0, 0xA0, 0xF5, 0x9C, 0xFD,
+        0x02, 0xE6, 0x9E, 0xFC, 0x01, 0x59, 0xD7, 0xB6, 0xC1, 0x4E,
+        0xC0, 0xB6, 0x71, 0x49, 0xF0, 0xC7, 0xD5, 0x2F, 0x8D, 0xDF,
+        0xD3, 0xF1, 0x82, 0x82, 0x23, 0x33, 0x13, 0x93, 0xEB, 0x50,
+        0x29, 0xFD, 0x1B, 0x5A, 0x2F, 0xD5, 0x08, 0x99, 0x64, 0xE9,
+        0x7B, 0x1A, 0xDD, 0x68, 0x16, 0x08, 0xD0, 0x13, 0x82, 0xB6,
+        0x86, 0x62, 0x76, 0xAA, 0x16, 0x14, 0xCC, 0x86, 0x72, 0x26,
+        0x45, 0x8E, 0x2A, 0x82, 0x5B, 0x6F, 0xC1, 0xDF, 0xAA, 0x18,
+        0x43, 0xB8, 0xAD, 0x84, 0x52, 0xF2, 0xD9, 0x9C, 0xC0, 0x47,
+        0x52, 0x1B, 0x8E, 0x42, 0xC4, 0xD3, 0x61, 0x7B, 0x65, 0xA7,
+        0x69, 0x03, 0xB5, 0xD4, 0x6C, 0x83, 0x6A, 0x46, 0x73, 0xAF,
+        0x76, 0x77, 0x70, 0xC2, 0xD0, 0x74, 0xFE, 0x78, 0xF5, 0x75,
+        0x3B, 0xCE, 0xE2, 0xB6, 0xA0, 0x25, 0xE9, 0xE8, 0x4B, 0xA2,
+        0xF1, 0x20, 0x88, 0x13, 0x07, 0xED, 0x66, 0xBC, 0x46, 0xA1,
+        0xB3, 0x44, 0xAF, 0x2C, 0xED, 0x73, 0x75, 0x3D, 0x14, 0x6E,
+        0x43, 0x92, 0x40, 0x99, 0xB0, 0xD1, 0xBF, 0x2C, 0x4D, 0x0F,
+        0x2A, 0x63, 0xF4, 0x85, 0x7B, 0x1B, 0x0E, 0x48, 0x5A, 0x06,
+        0x02, 0xA6, 0x3D, 0x9E, 0x78, 0x05, 0xA8, 0x7C, 0xAD, 0x54,
+        0x49, 0xDE, 0x7A, 0xE6, 0x36, 0x5C, 0x50, 0xFC, 0x09, 0x81,
+        0x9E, 0x83, 0x53, 0x8C, 0x42, 0xEF, 0x12, 0x36, 0x4F, 0x22,
+        0x16, 0x2A, 0x15, 0x88, 0x83, 0xA9, 0x00, 0x66, 0x9E, 0xD1,
+        0xDC, 0x0F, 0x54, 0xC0, 0x32, 0x5C, 0x4C, 0x5E, 0xE2, 0x3D,
+        0xBC, 0x56, 0x89, 0x75, 0x28, 0xA3
     };
     static unsigned char dhg_2048[] = {
         0x02
@@ -52,4 +52,4 @@ DH *get_dh2048(void)
     return dh;
 }
 #endif /* OPENSSL_NO_DH */
-/* built for stunnel 5.56 */
+/* built for stunnel 5.57 */
diff --git a/src/env.c b/src/env.c
index 5e391767..7873d756 100644
--- a/src/env.c
+++ b/src/env.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/evc.mak b/src/evc.mak
index 19c94e1f..d60920fd 100644
--- a/src/evc.mak
+++ b/src/evc.mak
@@ -1,4 +1,4 @@
-# wce.mak for stunnel.exe by Michal Trojnara 1998-2019
+# wce.mak for stunnel.exe by Michal Trojnara 1998-2020
 # with help of Pierre Delaage <delaage.pierre@free.fr>
 # pdelaage 20140610 : added UNICODE optional FLAG, always ACTIVE on WCE because of poor ANSI support
 # pdelaage 20140610 : added _WIN32_WCE flag for RC compilation, to preprocess out "HELP" unsupported menu flag on WCE
diff --git a/src/fd.c b/src/fd.c
index 23becb85..b9f23826 100644
--- a/src/fd.c
+++ b/src/fd.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/file.c b/src/file.c
index 3f4a587c..a497218e 100644
--- a/src/file.c
+++ b/src/file.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/libwrap.c b/src/libwrap.c
index a288373c..6a7ac8bd 100644
--- a/src/libwrap.c
+++ b/src/libwrap.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/log.c b/src/log.c
index 11d0ee5b..c7f786a2 100644
--- a/src/log.c
+++ b/src/log.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -227,10 +227,7 @@ NOEXPORT void log_queue(SERVICE_OPTIONS *opt,
 void log_flush(LOG_MODE new_mode) {
     CRYPTO_THREAD_write_lock(stunnel_locks[LOCK_LOG_MODE]);
 
-    /* prevent changing LOG_MODE_CONFIGURED to LOG_MODE_ERROR
-     * once stderr file descriptor is closed */
-    if(log_mode!=LOG_MODE_CONFIGURED || new_mode!=LOG_MODE_ERROR)
-        log_mode=new_mode;
+    log_mode=new_mode;
 
     /* emit the buffered logs (unless we just started buffering) */
     if(new_mode!=LOG_MODE_BUFFER) {
diff --git a/src/mingw.mak b/src/mingw.mak
index b3078ee4..7fcbd007 100644
--- a/src/mingw.mak
+++ b/src/mingw.mak
@@ -1,4 +1,4 @@
-# Simple Makefile.w32 for stunnel.exe by Michal Trojnara 1998-2019
+# Simple Makefile.w32 for stunnel.exe by Michal Trojnara 1998-2020
 #
 # Modified by Brian Hatch  (bri@stunnel.org)
 # 20101030 pdelaage:
diff --git a/src/mingw.mk b/src/mingw.mk
index 42b8d1c5..d8d925a4 100644
--- a/src/mingw.mk
+++ b/src/mingw.mk
@@ -1,5 +1,5 @@
 ## mingw/mingw64 Makefile
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 # 32-bit Windows
 #win32_arch=win32
diff --git a/src/network.c b/src/network.c
index 0324bcfd..e3cbeb38 100644
--- a/src/network.c
+++ b/src/network.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/options.c b/src/options.c
index e63bdfbc..25c8f7bd 100644
--- a/src/options.c
+++ b/src/options.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -73,7 +73,7 @@ int scandir(const char *, struct dirent ***,
     int (*)(const struct dirent **, const struct dirent **));
 int alphasort(const struct dirent **, const struct dirent **);
 #endif
-NOEXPORT char *parse_global_option(CMD, char *, char *);
+NOEXPORT char *parse_global_option(CMD, GLOBAL_OPTIONS *, char *, char *);
 NOEXPORT char *parse_service_option(CMD, SERVICE_OPTIONS **, char *, char *);
 
 #ifndef OPENSSL_NO_TLSEXT
@@ -281,7 +281,7 @@ static char *stunnel_cipher_list=
 
 #ifndef OPENSSL_NO_TLS1_3
 static char *stunnel_ciphersuites=
-    "TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256";
+    "TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256";
 #endif /* TLS 1.3 */
 
 /**************************************** parse commandline parameters */
@@ -312,12 +312,12 @@ int options_cmdline(char *arg1, char *arg2) {
             "stunnel.conf";
         type=CONF_FILE;
     } else if(!strcasecmp(arg1, "-help")) {
-        parse_global_option(CMD_PRINT_HELP, NULL, NULL);
+        parse_global_option(CMD_PRINT_HELP, NULL, NULL, NULL);
         parse_service_option(CMD_PRINT_HELP, NULL, NULL, NULL);
         log_flush(LOG_MODE_INFO);
         return 2;
     } else if(!strcasecmp(arg1, "-version")) {
-        parse_global_option(CMD_PRINT_DEFAULTS, NULL, NULL);
+        parse_global_option(CMD_PRINT_DEFAULTS, NULL, NULL, NULL);
         parse_service_option(CMD_PRINT_DEFAULTS, NULL, NULL, NULL);
         log_flush(LOG_MODE_INFO);
         return 2;
@@ -379,11 +379,14 @@ int options_parse(CONF_TYPE type) {
 
     options_defaults();
     section=&new_service_options;
-    if(options_file(configuration_file, type, &section))
+    /* options_file() is a recursive function, so the last section of the
+     * configuration file section needs to be initialized separately */
+    if(options_file(configuration_file, type, &section) ||
+            init_section(1, &section)) {
+        s_log(LOG_ERR, "Configuration failed");
+        options_free(0); /* free the new options */
         return 1;
-    if(init_section(1, &section))
-        return 1;
-
+    }
     s_log(LOG_NOTICE, "Configuration successful");
     return 0;
 }
@@ -482,7 +485,7 @@ NOEXPORT int options_file(char *path, CONF_TYPE type,
         errstr=option_not_found;
         /* try global options first (e.g. for 'debug') */
         if(!new_service_options.next)
-            errstr=parse_global_option(CMD_SET_VALUE, config_opt, config_arg);
+            errstr=parse_global_option(CMD_SET_VALUE, &new_global_options, config_opt, config_arg);
         if(errstr==option_not_found)
             errstr=parse_service_option(CMD_SET_VALUE, section_ptr, config_opt, config_arg);
         if(errstr) {
@@ -505,7 +508,7 @@ NOEXPORT int init_section(int eof, SERVICE_OPTIONS **section_ptr) {
 
     if(*section_ptr==&new_service_options) {
         /* end of global options or inetd mode -> initialize globals */
-        errstr=parse_global_option(CMD_INITIALIZE, NULL, NULL);
+        errstr=parse_global_option(CMD_INITIALIZE, &new_global_options, NULL, NULL);
         if(errstr) {
             s_log(LOG_ERR, "Global options: %s", errstr);
             return 1;
@@ -514,11 +517,6 @@ NOEXPORT int init_section(int eof, SERVICE_OPTIONS **section_ptr) {
 
     if(*section_ptr!=&new_service_options || eof) {
         /* end service section or inetd mode -> initialize service */
-        if(*section_ptr==&new_service_options)
-            s_log(LOG_INFO, "Initializing inetd mode configuration");
-        else
-            s_log(LOG_INFO, "Initializing service [%s]",
-                (*section_ptr)->servname);
         errstr=parse_service_option(CMD_INITIALIZE, section_ptr, NULL, NULL);
         if(errstr) {
             if(*section_ptr==&new_service_options)
@@ -591,7 +589,7 @@ void options_defaults() {
     memset(&new_service_options, 0, sizeof(SERVICE_OPTIONS));
     new_service_options.next=NULL;
 
-    parse_global_option(CMD_SET_DEFAULTS, NULL, NULL);
+    parse_global_option(CMD_SET_DEFAULTS, &new_global_options, NULL, NULL);
     service=&new_service_options;
     parse_service_option(CMD_SET_DEFAULTS, &service, NULL, NULL);
 }
@@ -603,18 +601,32 @@ void options_apply() { /* apply default/validated configuration */
     CRYPTO_THREAD_write_lock(stunnel_locks[LOCK_SECTIONS]);
 
     memcpy(&global_options, &new_global_options, sizeof(GLOBAL_OPTIONS));
+    memset(&new_global_options, 0, sizeof(GLOBAL_OPTIONS));
 
     /* service_options are used for inetd mode and to enumerate services */
     for(section=new_service_options.next; section; section=section->next)
         section->section_number=num++;
     memcpy(&service_options, &new_service_options, sizeof(SERVICE_OPTIONS));
+    memset(&new_service_options, 0, sizeof(SERVICE_OPTIONS));
     number_of_sections=num;
 
     CRYPTO_THREAD_unlock(stunnel_locks[LOCK_SECTIONS]);
 }
 
-void options_free() {
-    parse_global_option(CMD_FREE, NULL, NULL);
+void options_free(int current) {
+    GLOBAL_OPTIONS *global=current?&global_options:&new_global_options;
+    SERVICE_OPTIONS *service=current?&service_options:&new_service_options;
+
+    parse_global_option(CMD_FREE, global, NULL, NULL);
+
+    CRYPTO_THREAD_write_lock(stunnel_locks[LOCK_SECTIONS]);
+    while(service) {
+        SERVICE_OPTIONS *tmp=service;
+        service=service->next;
+        tmp->next=NULL;
+        service_free(tmp);
+    }
+    CRYPTO_THREAD_unlock(stunnel_locks[LOCK_SECTIONS]);
 }
 
 void service_up_ref(SERVICE_OPTIONS *section) {
@@ -643,7 +655,7 @@ void service_free(SERVICE_OPTIONS *section) {
 
 /**************************************** global options */
 
-NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
+NOEXPORT char *parse_global_option(CMD cmd, GLOBAL_OPTIONS *options, char *opt, char *arg) {
     void *tmp;
 
     if(cmd==CMD_PRINT_DEFAULTS || cmd==CMD_PRINT_HELP) {
@@ -655,19 +667,19 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifdef HAVE_CHROOT
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.chroot_dir=NULL;
+        options->chroot_dir=NULL;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
     case CMD_FREE:
-        tmp=global_options.chroot_dir;
-        global_options.chroot_dir=NULL;
+        tmp=options->chroot_dir;
+        options->chroot_dir=NULL;
         str_free(tmp);
         break;
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "chroot"))
             break;
-        new_global_options.chroot_dir=str_dup(arg);
+        options->chroot_dir=str_dup(arg);
         return NULL; /* OK */
     case CMD_INITIALIZE:
         break;
@@ -683,7 +695,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifndef OPENSSL_NO_COMP
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.compression=COMP_NONE;
+        options->compression=COMP_NONE;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -699,9 +711,9 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
             return "Compression unsupported due to a memory leak";
 #endif /* OpenSSL version < 1.1.0 */
         if(!strcasecmp(arg, "deflate"))
-            new_global_options.compression=COMP_DEFLATE;
+            options->compression=COMP_DEFLATE;
         else if(!strcasecmp(arg, "zlib"))
-            new_global_options.compression=COMP_ZLIB;
+            options->compression=COMP_ZLIB;
         else
             return "Specified compression type is not available";
         return NULL; /* OK */
@@ -720,22 +732,22 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     switch(cmd) {
     case CMD_SET_DEFAULTS:
 #ifdef EGD_SOCKET
-        new_global_options.egd_sock=EGD_SOCKET;
+        options->egd_sock=EGD_SOCKET;
 #else
-        new_global_options.egd_sock=NULL;
+        options->egd_sock=NULL;
 #endif
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
     case CMD_FREE:
-        tmp=global_options.egd_sock;
-        global_options.egd_sock=NULL;
+        tmp=options->egd_sock;
+        options->egd_sock=NULL;
         str_free(tmp);
         break;
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "EGD"))
             break;
-        new_global_options.egd_sock=str_dup(arg);
+        options->egd_sock=str_dup(arg);
         return NULL; /* OK */
     case CMD_INITIALIZE:
         break;
@@ -834,7 +846,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     switch(cmd) {
     case CMD_SET_DEFAULTS:
 #ifdef USE_FIPS
-        new_global_options.option.fips=0;
+        options->option.fips=FIPS_mode()?1:0;
 #endif /* USE_FIPS */
         break;
     case CMD_SET_COPY: /* not used for global options */
@@ -844,21 +856,28 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "fips"))
             break;
+        if(!strcasecmp(arg, "yes")) {
 #ifdef USE_FIPS
-        if(!strcasecmp(arg, "yes"))
-            new_global_options.option.fips=1;
-        else if(!strcasecmp(arg, "no"))
-            new_global_options.option.fips=0;
-        else
-            return "The argument needs to be either 'yes' or 'no'";
+            options->option.fips=1;
 #else
-        if(strcasecmp(arg, "no"))
             return "FIPS support is not available";
 #endif /* USE_FIPS */
+        } else if(!strcasecmp(arg, "no")) {
+#ifdef USE_FIPS
+            if(FIPS_mode())
+                return "Failed to override system-wide FIPS mode";
+            options->option.fips=0;
+#endif /* USE_FIPS */
+        } else {
+            return "The argument needs to be either 'yes' or 'no'";
+        }
         return NULL; /* OK */
     case CMD_INITIALIZE:
         break;
     case CMD_PRINT_DEFAULTS:
+#ifdef USE_FIPS
+        s_log(LOG_NOTICE, "%-22s = %s", "fips", FIPS_mode()?"yes":"no");
+#endif /* USE_FIPS */
         break;
     case CMD_PRINT_HELP:
 #ifdef USE_FIPS
@@ -872,8 +891,8 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifndef USE_WIN32
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.option.foreground=0;
-        new_global_options.option.log_stderr=0;
+        options->option.foreground=0;
+        options->option.log_stderr=0;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -883,14 +902,14 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
         if(strcasecmp(opt, "foreground"))
             break;
         if(!strcasecmp(arg, "yes")) {
-            new_global_options.option.foreground=1;
-            new_global_options.option.log_stderr=1;
+            options->option.foreground=1;
+            options->option.log_stderr=1;
         } else if(!strcasecmp(arg, "quiet")) {
-            new_global_options.option.foreground=1;
-            new_global_options.option.log_stderr=0;
+            options->option.foreground=1;
+            options->option.log_stderr=0;
         } else if(!strcasecmp(arg, "no")) {
-            new_global_options.option.foreground=0;
-            new_global_options.option.log_stderr=0;
+            options->option.foreground=0;
+            options->option.log_stderr=0;
         } else
             return "The argument needs to be either 'yes', 'quiet' or 'no'";
         return NULL; /* OK */
@@ -910,7 +929,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* iconActive */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.icon[ICON_ACTIVE]=load_icon_default(ICON_ACTIVE);
+        options->icon[ICON_ACTIVE]=load_icon_default(ICON_ACTIVE);
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -920,7 +939,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "iconActive"))
             break;
-        if(!(new_global_options.icon[ICON_ACTIVE]=load_icon_file(arg)))
+        if(!(options->icon[ICON_ACTIVE]=load_icon_file(arg)))
             return "Failed to load the specified icon";
         return NULL; /* OK */
     case CMD_INITIALIZE:
@@ -935,7 +954,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* iconError */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.icon[ICON_ERROR]=load_icon_default(ICON_ERROR);
+        options->icon[ICON_ERROR]=load_icon_default(ICON_ERROR);
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -945,7 +964,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "iconError"))
             break;
-        if(!(new_global_options.icon[ICON_ERROR]=load_icon_file(arg)))
+        if(!(options->icon[ICON_ERROR]=load_icon_file(arg)))
             return "Failed to load the specified icon";
         return NULL; /* OK */
     case CMD_INITIALIZE:
@@ -960,7 +979,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* iconIdle */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.icon[ICON_IDLE]=load_icon_default(ICON_IDLE);
+        options->icon[ICON_IDLE]=load_icon_default(ICON_IDLE);
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -970,7 +989,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "iconIdle"))
             break;
-        if(!(new_global_options.icon[ICON_IDLE]=load_icon_file(arg)))
+        if(!(options->icon[ICON_IDLE]=load_icon_file(arg)))
             return "Failed to load the specified icon";
         return NULL; /* OK */
     case CMD_INITIALIZE:
@@ -987,7 +1006,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* log */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.log_file_mode=FILE_MODE_APPEND;
+        options->log_file_mode=FILE_MODE_APPEND;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -997,9 +1016,9 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
         if(strcasecmp(opt, "log"))
             break;
         if(!strcasecmp(arg, "append"))
-            new_global_options.log_file_mode=FILE_MODE_APPEND;
+            options->log_file_mode=FILE_MODE_APPEND;
         else if(!strcasecmp(arg, "overwrite"))
-            new_global_options.log_file_mode=FILE_MODE_OVERWRITE;
+            options->log_file_mode=FILE_MODE_OVERWRITE;
         else
             return "The argument needs to be either 'append' or 'overwrite'";
         return NULL; /* OK */
@@ -1016,25 +1035,25 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* output */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.output_file=NULL;
+        options->output_file=NULL;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
     case CMD_FREE:
-        tmp=global_options.output_file;
-        global_options.output_file=NULL;
+        tmp=options->output_file;
+        options->output_file=NULL;
         str_free(tmp);
         break;
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "output"))
             break;
-        new_global_options.output_file=str_dup(arg);
+        options->output_file=str_dup(arg);
         return NULL; /* OK */
     case CMD_INITIALIZE:
 #ifndef USE_WIN32
-        if(!new_global_options.option.foreground /* daemonize() used */ &&
-                new_global_options.output_file /* log file enabled */ &&
-                new_global_options.output_file[0]!='/' /* relative path */)
+        if(!options->option.foreground /* daemonize() used */ &&
+                options->output_file /* log file enabled */ &&
+                options->output_file[0]!='/' /* relative path */)
             return "Log file must include full path name";
 #endif
         break;
@@ -1049,27 +1068,27 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifndef USE_WIN32
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.pidfile=NULL; /* do not create a pid file */
+        options->pidfile=NULL; /* do not create a pid file */
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
     case CMD_FREE:
-        tmp=global_options.pidfile;
-        global_options.pidfile=NULL;
+        tmp=options->pidfile;
+        options->pidfile=NULL;
         str_free(tmp);
         break;
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "pid"))
             break;
         if(arg[0]) /* is argument not empty? */
-            new_global_options.pidfile=str_dup(arg);
+            options->pidfile=str_dup(arg);
         else
-            new_global_options.pidfile=NULL; /* empty -> do not create a pid file */
+            options->pidfile=NULL; /* empty -> do not create a pid file */
         return NULL; /* OK */
     case CMD_INITIALIZE:
-        if(!new_global_options.option.foreground /* daemonize() used */ &&
-                new_global_options.pidfile /* pid file enabled */ &&
-                new_global_options.pidfile[0]!='/' /* relative path */)
+        if(!options->option.foreground /* daemonize() used */ &&
+                options->pidfile /* pid file enabled */ &&
+                options->pidfile[0]!='/' /* relative path */)
             return "Pid file must include full path name";
         break;
     case CMD_PRINT_DEFAULTS:
@@ -1083,7 +1102,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* RNDbytes */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.random_bytes=RANDOM_BYTES;
+        options->random_bytes=RANDOM_BYTES;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -1094,7 +1113,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
             break;
         {
             char *tmp_str;
-            new_global_options.random_bytes=(long)strtol(arg, &tmp_str, 10);
+            options->random_bytes=(long)strtol(arg, &tmp_str, 10);
             if(tmp_str==arg || *tmp_str) /* not a number */
                 return "Illegal number of bytes to read from random seed files";
         }
@@ -1113,22 +1132,22 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     switch(cmd) {
     case CMD_SET_DEFAULTS:
 #ifdef RANDOM_FILE
-        new_global_options.rand_file=str_dup(RANDOM_FILE);
+        options->rand_file=str_dup(RANDOM_FILE);
 #else
-        new_global_options.rand_file=NULL;
+        options->rand_file=NULL;
 #endif
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
     case CMD_FREE:
-        tmp=global_options.rand_file;
-        global_options.rand_file=NULL;
+        tmp=options->rand_file;
+        options->rand_file=NULL;
         str_free(tmp);
         break;
     case CMD_SET_VALUE:
         if(strcasecmp(opt, "RNDfile"))
             break;
-        new_global_options.rand_file=str_dup(arg);
+        options->rand_file=str_dup(arg);
         return NULL; /* OK */
     case CMD_INITIALIZE:
         break;
@@ -1145,7 +1164,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     /* RNDoverwrite */
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.option.rand_write=1;
+        options->option.rand_write=1;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -1155,9 +1174,9 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
         if(strcasecmp(opt, "RNDoverwrite"))
             break;
         if(!strcasecmp(arg, "yes"))
-            new_global_options.option.rand_write=1;
+            options->option.rand_write=1;
         else if(!strcasecmp(arg, "no"))
-            new_global_options.option.rand_write=0;
+            options->option.rand_write=0;
         else
             return "The argument needs to be either 'yes' or 'no'";
         return NULL; /* OK */
@@ -1176,7 +1195,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifndef USE_WIN32
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.option.log_syslog=1;
+        options->option.log_syslog=1;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -1186,9 +1205,9 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
         if(strcasecmp(opt, "syslog"))
             break;
         if(!strcasecmp(arg, "yes"))
-            new_global_options.option.log_syslog=1;
+            options->option.log_syslog=1;
         else if(!strcasecmp(arg, "no"))
-            new_global_options.option.log_syslog=0;
+            options->option.log_syslog=0;
         else
             return "The argument needs to be either 'yes' or 'no'";
         return NULL; /* OK */
@@ -1207,7 +1226,7 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
 #ifdef USE_WIN32
     switch(cmd) {
     case CMD_SET_DEFAULTS:
-        new_global_options.option.taskbar=1;
+        options->option.taskbar=1;
         break;
     case CMD_SET_COPY: /* not used for global options */
         break;
@@ -1217,9 +1236,9 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
         if(strcasecmp(opt, "taskbar"))
             break;
         if(!strcasecmp(arg, "yes"))
-            new_global_options.option.taskbar=1;
+            options->option.taskbar=1;
         else if(!strcasecmp(arg, "no"))
-            new_global_options.option.taskbar=0;
+            options->option.taskbar=0;
         else
             return "The argument needs to be either 'yes' or 'no'";
         return NULL; /* OK */
@@ -1241,12 +1260,13 @@ NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
     case CMD_SET_COPY:
         break;
     case CMD_FREE:
+        memset(options, 0, sizeof(GLOBAL_OPTIONS));
         break;
     case CMD_SET_VALUE:
         return option_not_found;
     case CMD_INITIALIZE:
         /* FIPS needs to be initialized as early as possible */
-        if(ssl_configure(&new_global_options)) /* configure global TLS settings */
+        if(ssl_configure(options)) /* configure global TLS settings */
             return "Failed to initialize TLS";
     case CMD_PRINT_DEFAULTS:
         break;
@@ -1271,9 +1291,17 @@ NOEXPORT char *parse_service_option(CMD cmd, SERVICE_OPTIONS **section_ptr,
 
     if(cmd==CMD_SET_DEFAULTS || cmd==CMD_SET_COPY) {
         section->ref=1;
+        if(section==&service_options)
+            s_log(LOG_ERR, "INTERNAL ERROR: Initializing deployed section defaults");
+        else if(section==&new_service_options)
+            s_log(LOG_INFO, "Initializing inetd mode configuration");
+        else
+            s_log(LOG_INFO, "Initializing service [%s]", section->servname);
     } else if(cmd==CMD_FREE) {
-        if(section==&service_options || section==&new_service_options)
-            s_log(LOG_DEBUG, "Deallocating section defaults");
+        if(section==&service_options)
+            s_log(LOG_DEBUG, "Deallocating deployed section defaults");
+        else if(section==&new_service_options)
+            s_log(LOG_DEBUG, "Deallocating temporary section defaults");
         else
             s_log(LOG_DEBUG, "Deallocating section [%s]", section->servname);
     } else if(cmd==CMD_PRINT_DEFAULTS || cmd==CMD_PRINT_HELP) {
@@ -2835,6 +2863,39 @@ NOEXPORT char *parse_service_option(CMD cmd, SERVICE_OPTIONS **section_ptr,
         break;
     }
 
+#if OPENSSL_VERSION_NUMBER>=0x10100000L
+    /* securityLevel */
+    switch(cmd) {
+    case CMD_SET_DEFAULTS:
+        section->security_level=-1;
+        break;
+    case CMD_SET_COPY:
+        section->security_level=new_service_options.security_level;
+        break;
+    case CMD_FREE:
+        break;
+    case CMD_SET_VALUE:
+        if(strcasecmp(opt, "securityLevel"))
+            break;
+        {
+            char *tmp_str;
+            int tmp_int =(int)strtol(arg, &tmp_str, 10);
+            if(tmp_str==arg || *tmp_str || tmp_int<0 || tmp_int>5) /* not a correct number */
+                return "Illegal security level";
+            section->security_level = tmp_int;
+        }
+        return NULL; /* OK */
+    case CMD_INITIALIZE:
+        break;
+    case CMD_PRINT_DEFAULTS:
+        s_log(LOG_NOTICE, "%-22s = %d", "securityLevel", DEFAULT_SECURITY_LEVEL);
+        break;
+    case CMD_PRINT_HELP:
+        s_log(LOG_NOTICE, "%-22s = set the security level", "securityLevel");
+        break;
+    }
+#endif /* OpenSSL 1.1.0 or later */
+
 #ifndef USE_WIN32
     /* service */
     switch(cmd) {
@@ -3546,16 +3607,6 @@ NOEXPORT char *parse_service_option(CMD cmd, SERVICE_OPTIONS **section_ptr,
     case CMD_PRINT_HELP:
         s_log(LOG_NOTICE,
             "%-22s = level of peer certificate verification", "verify");
-        s_log(LOG_NOTICE,
-            "%25slevel 0 - request and ignore peer cert", "");
-        s_log(LOG_NOTICE,
-            "%25slevel 1 - only validate peer cert if present", "");
-        s_log(LOG_NOTICE,
-            "%25slevel 2 - always require a valid peer cert", "");
-        s_log(LOG_NOTICE,
-            "%25slevel 3 - verify peer with locally installed cert", "");
-        s_log(LOG_NOTICE,
-            "%25slevel 4 - ignore CA chain and only verify peer cert", "");
         break;
     }
 
@@ -3638,7 +3689,7 @@ NOEXPORT char *parse_service_option(CMD cmd, SERVICE_OPTIONS **section_ptr,
         if(section->ctx)
             SSL_CTX_free(section->ctx);
         str_free(section->servname);
-        if(section==&service_options)
+        if(section==&service_options || section==&new_service_options)
             memset(section, 0, sizeof(SERVICE_OPTIONS));
         else
             str_free(section);
diff --git a/src/os2.mak b/src/os2.mak
index d1dca738..b8255cc7 100644
--- a/src/os2.mak
+++ b/src/os2.mak
@@ -1,11 +1,11 @@
 prefix=.
 DEFS = -DPACKAGE_NAME=\"stunnel\" \
 	-DPACKAGE_TARNAME=\"stunnel\" \
-	-DPACKAGE_VERSION=\"5.56\" \
-	-DPACKAGE_STRING=\"stunnel\ 5.56\" \
+	-DPACKAGE_VERSION=\"5.57\" \
+	-DPACKAGE_STRING=\"stunnel\ 5.57\" \
 	-DPACKAGE_BUGREPORT=\"\" \
 	-DPACKAGE=\"stunnel\" \
-	-DVERSION=\"5.56\" \
+	-DVERSION=\"5.57\" \
 	-DSTDC_HEADERS=1 \
 	-DHAVE_SYS_TYPES_H=1 \
 	-DHAVE_SYS_STAT_H=1 \
diff --git a/src/protocol.c b/src/protocol.c
index ac4dfed3..ca2d2c9f 100644
--- a/src/protocol.c
+++ b/src/protocol.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -686,17 +686,31 @@ NOEXPORT char *pgsql_client(CLI *c, SERVICE_OPTIONS *opt, const PHASE phase) {
 
 NOEXPORT char *pgsql_server(CLI *c, SERVICE_OPTIONS *opt, const PHASE phase) {
     uint8_t buffer[8], ssl_ok[1]={'S'};
+    /* https://www.postgresql.org/docs/current/protocol-message-formats.html */
+    static const uint8_t gss_request[8]={0, 0, 0, 8, 0x04, 0xd2, 0x16, 0x30};
+    static const uint8_t gss_response[62]=
+        {'E', 0, 0, 0, 61, 'S', 'E', 'R', 'R', 'O', 'R', 0, 'C', 'X', 'X', '0',
+        '0', '0', 0, 'M', 'S', 'S', 'L', ' ', 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd',
+        ' ', 'b', 'u', 't', ' ', 'n', 'o', 't', ' ', 'r', 'e', 'q', 'u', 'e', 's', 't',
+        'e', 'd', ' ', 'b', 'y', ' ', 'c', 'l', 'i', 'e', 'n', 't', 0, 0};
 
     (void)opt; /* squash the unused parameter warning */
     if(phase!=PROTOCOL_EARLY)
         return NULL;
+    s_log(LOG_DEBUG, "Started server-side psql protcol negotiation");
     memset(buffer, 0, sizeof buffer);
     s_read(c, c->local_rfd.fd, buffer, sizeof buffer);
+    if(!safe_memcmp(buffer, gss_request, sizeof gss_request)) {
+        s_log(LOG_INFO, "GSSAPI encryption requested, rejecting gracefully");
+        s_write(c, c->local_wfd.fd, gss_response, sizeof gss_response);
+        throw_exception(c, 2); /* don't reset */
+    }
     if(safe_memcmp(buffer, ssl_request, sizeof ssl_request)) {
         s_log(LOG_ERR, "PostgreSQL client did not request TLS, rejecting");
         /* no way to send error on startup, so just drop the client */
         throw_exception(c, 1);
     }
+    s_log(LOG_DEBUG, "SSLRequest received");
     s_write(c, c->local_wfd.fd, ssl_ok, sizeof ssl_ok);
     return NULL;
 }
@@ -1418,7 +1432,7 @@ NOEXPORT char *base64(int encode, const char *in, int len) {
     BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
     bio=BIO_new(BIO_s_mem());
     if(!bio) {
-        str_free(b64);
+        BIO_free(b64);
         return NULL;
     }
     if(encode)
diff --git a/src/prototypes.h b/src/prototypes.h
index ebd413c7..50428f31 100644
--- a/src/prototypes.h
+++ b/src/prototypes.h
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -240,6 +240,9 @@ typedef struct service_options_struct {
     char *cert;                                             /* cert filename */
     char *key;                               /* pem (priv key/cert) filename */
     long session_size, session_timeout;
+#if OPENSSL_VERSION_NUMBER>=0x10100000L
+    int security_level;
+#endif /* OpenSSL 1.1.0 or later */
     long unsigned ssl_options_set;
 #if OPENSSL_VERSION_NUMBER>=0x009080dfL
     long unsigned ssl_options_clear;
@@ -470,8 +473,6 @@ int main_configure(char *, char *);
 void main_cleanup(void);
 int drop_privileges(int);
 void daemon_loop(void);
-void unbind_ports(void);
-int bind_ports(void);
 void signal_post(uint8_t);
 #if !defined(USE_WIN32) && !defined(USE_OS2)
 void pid_status_hang(const char *);
@@ -487,7 +488,7 @@ int options_cmdline(char *, char *);
 int options_parse(CONF_TYPE);
 void options_defaults(void);
 void options_apply(void);
-void options_free(void);
+void options_free(int);
 
 void service_up_ref(SERVICE_OPTIONS *);
 void service_free(SERVICE_OPTIONS *);
diff --git a/src/pty.c b/src/pty.c
index 6f8b5fb9..fe9c94a5 100644
--- a/src/pty.c
+++ b/src/pty.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/resolver.c b/src/resolver.c
index f996e396..c3601b74 100644
--- a/src/resolver.c
+++ b/src/resolver.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/resources.rc b/src/resources.rc
index f4264439..d264c508 100644
--- a/src/resources.rc
+++ b/src/resources.rc
@@ -19,7 +19,7 @@ BEGIN
             VALUE "FileDescription",    "stunnel - TLS offloading and load-balancing proxy"
             VALUE "FileVersion",        STUNNEL_VERSION
             VALUE "InternalName",       "stunnel"
-            VALUE "LegalCopyright",     "© by Michal Trojnara, 1998-2019"
+            VALUE "LegalCopyright",     "© by Michal Trojnara, 1998-2020"
             VALUE "OriginalFilename",   "stunnel.exe"
             VALUE "ProductName",        STUNNEL_PRODUCTNAME
             VALUE "ProductVersion",     STUNNEL_VERSION
@@ -107,7 +107,7 @@ BEGIN
     ICON            IDI_STUNNEL_MAIN, -1,                        6,  6,  20, 20
     LTEXT           "stunnel version", -1,                      30,  4,  49,  8
     LTEXT           STUNNEL_VERSION, -1,                        79,  4,  57,  8
-    LTEXT           "© by Michal Trojnara, 1998-2019", -1,      30, 12, 106,  8
+    LTEXT           "© by Michal Trojnara, 1998-2020", -1,      30, 12, 106,  8
     LTEXT           "All Rights Reserved", -1,                  30, 20, 106,  8
     LTEXT           "Licensed under the GNU GPL version 2", -1,  4, 28, 132,  8
     LTEXT           "with a special exception for OpenSSL", -1,  4, 36, 132,  8
diff --git a/src/ssl.c b/src/ssl.c
index 9eeef129..b2b63c86 100644
--- a/src/ssl.c
+++ b/src/ssl.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -39,7 +39,12 @@
 #include "prototypes.h"
 
     /* global OpenSSL initialization: compression, engine, entropy */
-#if OPENSSL_VERSION_NUMBER>=0x10100000L
+NOEXPORT void cb_new_auth(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+        int idx, long argl, void *argp);
+#if OPENSSL_VERSION_NUMBER>=0x30000000L
+NOEXPORT int cb_dup_addr(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+    void **from_d, int idx, long argl, void *argp);
+#elif OPENSSL_VERSION_NUMBER>=0x10100000L
 NOEXPORT int cb_dup_addr(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
     void *from_d, int idx, long argl, void *argp);
 #else
@@ -72,7 +77,7 @@ int ssl_init(void) { /* init TLS before parsing configuration file */
     index_ssl_ctx_opt=SSL_CTX_get_ex_new_index(0,
         "SERVICE_OPTIONS pointer", NULL, NULL, NULL);
     index_session_authenticated=SSL_SESSION_get_ex_new_index(0,
-        "session authenticated", NULL, NULL, NULL);
+        "session authenticated", cb_new_auth, NULL, NULL);
     index_session_connect_address=SSL_SESSION_get_ex_new_index(0,
         "session connect address", NULL, cb_dup_addr, cb_free_addr);
     if(index_ssl_cli<0 || index_ssl_ctx_opt<0 ||
@@ -104,17 +109,31 @@ int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g) {
     BN_free(dh->p);
     BN_free(dh->q);
     BN_free(dh->g);
-    dh->p = p;
-    dh->q = q;
-    dh->g = g;
+    dh->p=p;
+    dh->q=q;
+    dh->g=g;
     if(q)
-        dh->length = BN_num_bits(q);
+        dh->length=BN_num_bits(q);
     return 1;
 }
 #endif
 #endif
 
-#if OPENSSL_VERSION_NUMBER>=0x10100000L
+NOEXPORT void cb_new_auth(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+        int idx, long argl, void *argp) {
+    (void)parent; /* squash the unused parameter warning */
+    (void)ptr; /* squash the unused parameter warning */
+    (void)argl; /* squash the unused parameter warning */
+    s_log(LOG_DEBUG, "Initializing application specific data for %s",
+        (char *)argp);
+    if(!CRYPTO_set_ex_data(ad, idx, (void *)(-1)))
+        sslerror("CRYPTO_set_ex_data");
+}
+
+#if OPENSSL_VERSION_NUMBER>=0x30000000L
+NOEXPORT int cb_dup_addr(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+        void **from_d, int idx, long argl, void *argp) {
+#elif OPENSSL_VERSION_NUMBER>=0x10100000L
 NOEXPORT int cb_dup_addr(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
         void *from_d, int idx, long argl, void *argp) {
 #else
diff --git a/src/sthreads.c b/src/sthreads.c
index dc2cd436..d4c8214f 100644
--- a/src/sthreads.c
+++ b/src/sthreads.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/str.c b/src/str.c
index 5b6b6df2..15078d8e 100644
--- a/src/str.c
+++ b/src/str.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/stunnel.c b/src/stunnel.c
index 8121e0ca..4f459304 100644
--- a/src/stunnel.c
+++ b/src/stunnel.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -74,7 +74,9 @@ NOEXPORT void status_info(int, int, const char *);
 #endif
 NOEXPORT int accept_connection(SERVICE_OPTIONS *, unsigned);
 NOEXPORT int exec_connect_start(void);
+NOEXPORT void unbind_ports(void);
 NOEXPORT void unbind_port(SERVICE_OPTIONS *, unsigned);
+NOEXPORT int bind_ports(void);
 NOEXPORT SOCKET bind_port(SERVICE_OPTIONS *, int, unsigned);
 #ifdef HAVE_CHROOT
 NOEXPORT int change_root(void);
@@ -122,8 +124,8 @@ void main_init() { /* one-time initialization */
         fatal("TLS initialization failed");
     if(sthreads_init()) /* initialize critical sections & TLS callbacks */
         fatal("Threads initialization failed");
-    options_defaults();
-    options_apply();
+    options_defaults(); /* initialize defaults */
+    options_apply(); /* apply the defaults */
 #ifndef USE_FORK
     get_limits(); /* required by setup_fd() */
 #endif
@@ -150,31 +152,47 @@ void main_init() { /* one-time initialization */
 int main_configure(char *arg1, char *arg2) {
     int cmdline_status;
 
+    log_flush(LOG_MODE_BUFFER);
     cmdline_status=options_cmdline(arg1, arg2);
-    if(cmdline_status) /* cannot proceed */
+    if(cmdline_status) { /* cannot proceed */
+        log_flush(LOG_MODE_ERROR);
         return cmdline_status;
-    options_apply();
+    }
+    options_free(1); /* free the defaults */
+    options_apply(); /* apply the new options */
     str_canary_init(); /* needs prng initialization from options_cmdline */
     /* log_open(SINK_SYSLOG) must be called before change_root()
      * to be able to access /dev/log socket */
     log_open(SINK_SYSLOG);
-    if(bind_ports())
+    if(bind_ports()) { /* initial binding failed - restoring the defaults */
+        unbind_ports(); /* unbind the successfully bound ports */
+        options_free(1); /* free the current options */
+        options_defaults(); /* initialize defaults */
+        options_apply(); /* apply the defaults */
+        log_flush(LOG_MODE_ERROR);
         return 1;
+    }
 
 #ifdef HAVE_CHROOT
     /* change_root() must be called before drop_privileges()
      * since chroot() needs root privileges */
-    if(change_root())
+    if(change_root()) {
+        log_flush(LOG_MODE_ERROR);
         return 1;
+    }
 #endif /* HAVE_CHROOT */
 
-    if(drop_privileges(1))
+    if(drop_privileges(1)) {
+        log_flush(LOG_MODE_ERROR);
         return 1;
+    }
 
     /* log_open(SINK_OUTFILE) must be called after drop_privileges()
      * or logfile rotation won't be possible */
-    if(log_open(SINK_OUTFILE))
+    if(log_open(SINK_OUTFILE)) {
+        log_flush(LOG_MODE_ERROR);
         return 1;
+    }
 #ifndef USE_FORK
     num_clients=0; /* the first valid config */
 #endif
@@ -271,7 +289,7 @@ void main_cleanup() {
 #if 0
     str_stats(); /* main thread allocation tracking */
 #endif
-    log_flush(LOG_MODE_ERROR);
+    log_flush(LOG_MODE_BUFFER); /* no more logs */
     log_close(SINK_SYSLOG|SINK_OUTFILE);
 }
 #ifdef __GNUC__
@@ -456,23 +474,21 @@ NOEXPORT int exec_connect_start(void) {
 }
 
 /* clear fds, close old ports */
-void unbind_ports(void) {
+NOEXPORT void unbind_ports(void) {
     SERVICE_OPTIONS *opt;
 
     s_poll_init(fds, 1);
 
-    CRYPTO_THREAD_write_lock(stunnel_locks[LOCK_SECTIONS]);
-
-    opt=service_options.next;
-    service_options.next=NULL;
-    service_free(&service_options);
-
-    while(opt) {
+    for(opt=service_options.next; opt; opt=opt->next) {
         unsigned i;
+
         s_log(LOG_DEBUG, "Unbinding service [%s]", opt->servname);
+
+        /* "accept" service */
         for(i=0; i<opt->local_addr.num; ++i)
             unbind_port(opt, i);
-        /* exec+connect service */
+
+        /* "exec+connect" service */
         if(opt->exec_name && opt->connect_addr.names) {
             /* create exec+connect services             */
             /* FIXME: this is just a crude workaround   */
@@ -480,23 +496,9 @@ void unbind_ports(void) {
             /* FIXME: this won't work with FORK threads */
             opt->option.retry=0;
         }
-        /* purge session cache of the old SSL_CTX object */
-        /* this workaround won't be needed anymore after */
-        /* delayed deallocation calls SSL_CTX_free()     */
-        if(opt->ctx)
-            SSL_CTX_flush_sessions(opt->ctx,
-                (long)time(NULL)+opt->session_timeout+1);
-        s_log(LOG_DEBUG, "Service [%s] closed", opt->servname);
 
-        {
-            SERVICE_OPTIONS *garbage=opt;
-            opt=opt->next;
-            garbage->next=NULL;
-            service_free(garbage);
-        }
+        s_log(LOG_DEBUG, "Service [%s] closed", opt->servname);
     }
-
-    CRYPTO_THREAD_unlock(stunnel_locks[LOCK_SECTIONS]);
 }
 
 NOEXPORT void unbind_port(SERVICE_OPTIONS *opt, unsigned i) {
@@ -533,7 +535,7 @@ NOEXPORT void unbind_port(SERVICE_OPTIONS *opt, unsigned i) {
 }
 
 /* open new ports, update fds */
-int bind_ports(void) {
+NOEXPORT int bind_ports(void) {
     SERVICE_OPTIONS *opt;
     int listening_section;
 
@@ -830,7 +832,7 @@ NOEXPORT int signal_pipe_dispatch(void) {
 }
 
 NOEXPORT void reload_config() {
-    static int delay=10; /* 10ms */
+    static int delay=10; /* default of 10ms */
 #ifdef HAVE_CHROOT
     struct stat sb;
 #endif /* HAVE_CHROOT */
@@ -852,22 +854,23 @@ NOEXPORT void reload_config() {
         log_close(SINK_SYSLOG|SINK_OUTFILE);
     /* there is no race condition here:
      * client threads are not allowed to use global options */
-    options_free();
-    options_apply();
+    options_free(1); /* free the current options */
+    options_apply(); /* apply the new options */
     /* we hope that a sane openlog(3) implementation won't
      * attempt to reopen /dev/log if it's already open */
     log_open(SINK_SYSLOG|SINK_OUTFILE);
     log_flush(LOG_MODE_CONFIGURED);
     ui_config_reloaded();
     /* we use "|" instead of "||" to attempt initialization of both subsystems */
-    if(bind_ports() | exec_connect_start()) {
+    if(bind_ports() | exec_connect_start()) { /* failed */
+        unbind_ports();
         s_poll_sleep(delay/1000, delay%1000); /* sleep to avoid log trashing */
         signal_post(SIGNAL_RELOAD_CONFIG); /* retry */
         delay*=2;
-        if(delay > 10000) /* 10s */
+        if(delay > 10000) /* limit to 10s */
             delay=10000;
-    } else {
-        delay=10; /* 10ms */
+    } else { /* success */
+        delay=10; /* reset back to 10ms */
     }
 }
 
diff --git a/src/tls.c b/src/tls.c
index 6c92b964..abd8b2ec 100644
--- a/src/tls.c
+++ b/src/tls.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/ui_unix.c b/src/ui_unix.c
index ae6ab05c..5092124a 100644
--- a/src/ui_unix.c
+++ b/src/ui_unix.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/ui_win_cli.c b/src/ui_win_cli.c
index 6fe7a57c..76781370 100644
--- a/src/ui_win_cli.c
+++ b/src/ui_win_cli.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
diff --git a/src/ui_win_gui.c b/src/ui_win_gui.c
index 315376a7..a93e1aab 100644
--- a/src/ui_win_gui.c
+++ b/src/ui_win_gui.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -926,8 +926,6 @@ NOEXPORT unsigned __stdcall daemon_thread(void *arg) {
     while(main_configure(cmdline.config_file, NULL)) {
         if(cmdline.config_file && *cmdline.config_file=='-')
             cmdline.config_file=NULL; /* don't retry commandline switches */
-        unbind_ports(); /* in case initialization failed after bind_ports() */
-        log_flush(LOG_MODE_ERROR); /* otherwise logs are buffered */
         PostMessage(hwnd, WM_INVALID_CONFIG, 0, 0); /* display error */
         WaitForSingleObject(config_ready, INFINITE);
     }
@@ -1120,13 +1118,13 @@ NOEXPORT void tray_update(const int num) {
     nid.uCallbackMessage=WM_SYSTRAY; /* notification message */
     nid.hWnd=hwnd; /* window to receive notifications */
     if(num<0) {
-        tip=str_tprintf(TEXT("Server is down"));
+        tip=str_tprintf(TEXT("stunnel is down"));
         current_icon=ICON_ERROR;
     } else if(num>0) {
-        tip=str_tprintf(TEXT("%d active session(s)"), num);
+        tip=str_tprintf(TEXT("stunnel connections: %d"), num);
         current_icon=ICON_ACTIVE;
     } else {
-        tip=str_tprintf(TEXT("Server is idle"));
+        tip=str_tprintf(TEXT("stunnel is idle"));
         current_icon=ICON_IDLE;
     }
     _tcsncpy(nid.szTip, tip, 63);
diff --git a/src/vc.mak b/src/vc.mak
index 05b83502..f8be4837 100644
--- a/src/vc.mak
+++ b/src/vc.mak
@@ -1,4 +1,4 @@
-# vc.mak by Michal Trojnara 1998-2019
+# vc.mak by Michal Trojnara 1998-2020
 # with help of David Gillingham <dgillingham@gmail.com>
 # with help of Pierre Delaage <delaage.pierre@free.fr>
 
diff --git a/src/verify.c b/src/verify.c
index ac52b651..ee49d8b8 100644
--- a/src/verify.c
+++ b/src/verify.c
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -214,11 +214,15 @@ NOEXPORT int verify_callback(int preverify_ok, X509_STORE_CTX *callback_ctx) {
         s_log(LOG_INFO, "Certificate verification disabled");
         return 1; /* accept */
     }
-    if(verify_checks(c, preverify_ok, callback_ctx)) {
+    if(verify_checks(c, preverify_ok, callback_ctx))
+        return 1; /* accept */
+    if(c->opt->option.client || c->opt->protocol)
+        return 0; /* reject */
+    if(c->opt->redirect_addr.names) {
         SSL_SESSION *sess=SSL_get1_session(c->ssl);
         if(sess) {
-            int ok=SSL_SESSION_set_ex_data(sess, index_session_authenticated,
-                (void *)(-1));
+            int ok=SSL_SESSION_set_ex_data(sess,
+                index_session_authenticated, NULL);
             SSL_SESSION_free(sess);
             if(!ok) {
                 sslerror("SSL_SESSION_set_ex_data");
@@ -227,10 +231,6 @@ NOEXPORT int verify_callback(int preverify_ok, X509_STORE_CTX *callback_ctx) {
         }
         return 1; /* accept */
     }
-    if(c->opt->option.client || c->opt->protocol)
-        return 0; /* reject */
-    if(c->opt->redirect_addr.names)
-        return 1; /* accept */
     return 0; /* reject */
 }
 
diff --git a/src/version.h b/src/version.h
index 2b04a589..f9122d77 100644
--- a/src/version.h
+++ b/src/version.h
@@ -1,6 +1,6 @@
 /*
  *   stunnel       TLS offloading and load-balancing proxy
- *   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
+ *   Copyright (C) 1998-2020 Michal Trojnara <Michal.Trojnara@stunnel.org>
  *
  *   This program is free software; you can redistribute it and/or modify it
  *   under the terms of the GNU General Public License as published by the
@@ -65,7 +65,7 @@
 
 /* START CUSTOMIZE */
 #define VERSION_MAJOR 5
-#define VERSION_MINOR 56
+#define VERSION_MINOR 57
 /* END CUSTOMIZE */
 
 /* all the following macros are ABSOLUTELY NECESSARY to have proper string
diff --git a/tests/Makefile.am b/tests/Makefile.am
index e2d45979..cc218769 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 SUBDIRS = certs
 
diff --git a/tests/Makefile.in b/tests/Makefile.in
index 0d48baaa..9c6d4d69 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 VPATH = @srcdir@
 am__is_gnu_make = { \
   if test -z '$(MAKELEVEL)'; then \
diff --git a/tests/certs/CACert.pem b/tests/certs/CACert.pem
index 7c30cea5..ba6b857c 100644
--- a/tests/certs/CACert.pem
+++ b/tests/certs/CACert.pem
@@ -1,23 +1,23 @@
 -----BEGIN CERTIFICATE-----
-MIIDwTCCAqmgAwIBAgIUXE+sARWPLGgknSpOyFlDQSWC7DswDQYJKoZIhvcNAQEL
+MIIDwTCCAqmgAwIBAgIUPmqRLFuc5lfA6qFZBf0nrjXH75wwDQYJKoZIhvcNAQEL
 BQAwaDELMAkGA1UEBhMCUEwxGzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQ
 MA4GA1UECwwHUm9vdCBDQTELMAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNB
-QGV4YW1wbGUuY29tMB4XDTE5MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowaDEL
+QGV4YW1wbGUuY29tMB4XDTIwMDMxODExMDAzMloXDTI0MDMxODExMDAzMlowaDEL
 MAkGA1UEBhMCUEwxGzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UE
 CwwHUm9vdCBDQTELMAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1w
-bGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAubPhK1yk1SJ5
-EIJ1p2z/ujOh6BFOYeuKadoK8rUc8Yt8/tE7ah7qvHqD19szQ0fb84ZTIkhQNipp
-4BhS5Cg358C6f3tWteLiM9zq9HaTePPuK+LzhJmLJb00Go4eHnm9SujBacO7SbqM
-odySB1p7EL5HVd1YT64nIgFpYcyhYcTqhVE0e4+5Ud+irLk/rsiqmDtlrUABNc/E
-krSozoZskk0YWR1RWh7qr23AKGr2sKqxdlrkjJqgPBx2VCEW9MTZrEX6jLn1SNF3
-PuvUglPXADjjy/luFoDlKPuRpBXLsYVTx5j2Oi5hFsPPDJmqso2eFT39tJsqjGGh
-25TZJiEdtQIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBS/mA7w
-0d3k444hl5TfRCmXzsFSuzAfBgNVHSMEGDAWgBS/mA7w0d3k444hl5TfRCmXzsFS
-uzAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggEBADcEh1sUlM6AfrLC
-ITX/hrGPRPbHkLjImXNdvf5TW3gsx5meGqp74mgbT9foq4VLhcEdDzXvcRcSkpJ7
-Cfs5ZJkKNzkZgO2sJ3JPBMw143iMs05iyyQXXybjP9LJBpKD0TQ6Dl2HYiiP0pU8
-c/lDUETXL14tp42kgQ6knHByQQi9E2EhKJnXPhkC9gUe1wcaVaP3WIoKxXfrHfwT
-AsoeYVw+2CYdjyHj3XGBvZObqXKWU8zUkNbiqsntVxUg9bdQ9VFKKHw4o+yXyH6z
-aStIXWdpMiUNTHnGk315X3E3Pea/XpiL9UW/1AbX80+yKog/hqJlt33QKTyIGaA4
-ZdW+QoQ=
+bGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsb+qw97wPxX6
+OyPB5ZDGHYp8O4mjzD1EyWksqIP9ZT5Poc8RDxgeVik7RDNlmoJIwyvr9EizqXba
+Yejn47d81LGB+hrSWtYn37F+m1cSLxRwHnX59G8dfSGwnnmlBf0rCVlOU4FjJt0o
+/a8A0m7/5gj3U5Ka4trt14N3p42TtsPKDcs1aYEXKwjFIt1Sl+8QhzwV5B5yI8Q1
+SidnLoIvqMOrXmTKHyKd2zdUazvRtv1MiubQER6nzW+Uz/k3QbgikwpTyt08HMu/
+4SLh1zQkhqnYHZyYe5zYTQwp3BazaiUYGl4C2KE5tzBTRwxJzNrmNVPdM4YU8LMp
+3IN1lHj5pQIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRUkV/P
+8nw1yFzBAH4Mn2/usPVuNDAfBgNVHSMEGDAWgBRUkV/P8nw1yFzBAH4Mn2/usPVu
+NDAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggEBAFtIe/LW7mWuJt5n
+ryrcEFX3k+pudHif2m6nO+xKUskm7N3cba8YHymaa1T3l47hdiU3yjkGUfxbFb/i
+KBm10jLKP3aP1X8bo3Jo6RTpF0P44p2go0jBHxW0JsM2CvjU4Xq+V7FrNOvaI1SO
+9+tiJM1hPXt66uZgzVgdBWYLqQs+gmndHYYY2E5j56YF6mtqU/lKuHLjFUg3GpIn
+BM7KImw1ccaqOD9cIRO7k8w8NhG1KffWl8FitJnsEESZqzfofl4pY26J8VA/9+IW
+Yqo3ekLx5aXmwcaoh3OyE2zbS3mAPJ28RZn8QmI0ZSQKj9VFnFhYOiSDnJEo9lNP
+0/Cufe0=
 -----END CERTIFICATE-----
diff --git a/tests/certs/CACertCRL.pem b/tests/certs/CACertCRL.pem
index cfa945ef..f046ad94 100644
--- a/tests/certs/CACertCRL.pem
+++ b/tests/certs/CACertCRL.pem
@@ -1,13 +1,13 @@
 -----BEGIN X509 CRL-----
 MIIB7TCB1gIBATANBgkqhkiG9w0BAQsFADBoMQswCQYDVQQGEwJQTDEbMBkGA1UE
 CgwSU3R1bm5lbCBEZXZlbG9wZXJzMRAwDgYDVQQLDAdSb290IENBMQswCQYDVQQD
-DAJDQTEdMBsGCSqGSIb3DQEJARYOQ0FAZXhhbXBsZS5jb20XDTE5MTExMTIxNTgz
-MFoXDTIzMTExMTIxNTgzMFowFTATAgIQABcNMTkxMTExMjE1ODMwWqAjMCEwHwYD
-VR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQELBQADggEB
-AER7D1Mf6+ASMOULNKQ8MB0lqjWAf8XN67Ez/spAbF5B7ySaFPJOuT+90oTpccrW
-08KPZVrUkAsWSBty06jsZe8IB8YLdpkdDD59dwqIQ5CILbvx16l0nqrXqOQ3kRfT
-pfzikaOSrt7PWuHRRGnLiK88r+s1S5JqYtHAnhO4xyQzDmpyID/i5vS/3rfHCmEM
-drk4vkkUq0wRFRiq0fXECF8bgIr366oCmm09rKy4jgyDxSo81yJCRlkNFOY6zxjS
-RH7ckNLxJb77vaJGkNnaIefgQB+OML/UphzW/IcnKV03nGT6OEPUpVHeMAA365tV
-z5HRB+7G/oLzauOgrVVkjvE=
+DAJDQTEdMBsGCSqGSIb3DQEJARYOQ0FAZXhhbXBsZS5jb20XDTIwMDMxODExMDAz
+MloXDTI0MDMxODExMDAzMlowFTATAgIQABcNMjAwMzE4MTEwMDMyWqAjMCEwHwYD
+VR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQELBQADggEB
+AFcJw3Wx+CBkf139xkALFGy1o/6PkzS7V15QHyGirceefmHlNXAv00UQK6LNX4Gq
+q0JbEpyQMF5vb1/m44FjhLiVVSzpPGoq4oprTTz9VATMKhJsyzSBWD/KfxEAJnRG
+rmxS3Dw5VCLjvv8Jj4b2WHfdc7za1Z5AHzrDSNEO14AXWDvdjKkCf15ff0v2YGUw
+LH7biPE+jPKv3m5VCVZMdHsAQkJYBIE+4FwJPlSWSORmBtJ+RNxNtayrGMo/bqg7
+MzMwd4e9l0CZ/smRHss+i0/1ZwWyFI/t2hPTQextCb8DdwlANZWuecwJ0tTkKpAN
+yp2NFPEyeTj6GBg0GfkWYXs=
 -----END X509 CRL-----
diff --git a/tests/certs/Makefile.am b/tests/certs/Makefile.am
index 48246013..bcc2a350 100644
--- a/tests/certs/Makefile.am
+++ b/tests/certs/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 EXTRA_DIST = maketestcert.sh openssltest.cnf
 EXTRA_DIST += CACertCRL.pem CACert.pem
diff --git a/tests/certs/Makefile.in b/tests/certs/Makefile.in
index d7a76cc3..b99d536e 100644
--- a/tests/certs/Makefile.in
+++ b/tests/certs/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 VPATH = @srcdir@
 am__is_gnu_make = { \
   if test -z '$(MAKELEVEL)'; then \
diff --git a/tests/certs/PeerCerts.pem b/tests/certs/PeerCerts.pem
index 9a716b95..15e3fe13 100644
--- a/tests/certs/PeerCerts.pem
+++ b/tests/certs/PeerCerts.pem
@@ -1,44 +1,44 @@
 -----BEGIN CERTIFICATE-----
 MIIDoDCCAoigAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwaDELMAkGA1UEBhMCUEwx
 GzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHUm9vdCBDQTEL
-MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTE5
-MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowbzELMAkGA1UEBhMCUEwxGzAZBgNV
+MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTIw
+MDMxODExMDAzMloXDTI0MDMxODExMDAzMlowbzELMAkGA1UEBhMCUEwxGzAZBgNV
 BAoMElN0dW5uZWwgRGV2ZWxvcGVyczEPMA0GA1UECwwGY2xpZW50MQ8wDQYDVQQD
 DAZjbGllbnQxITAfBgkqhkiG9w0BCQEWEmNsaWVudEBleGFtcGxlLmNvbTCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALq/uXUhshKi4zWQw4ElNpMTvdjl
-+1hnq8xuVFmb/s5hMpZNKLm0st3tLtbiAt9RBC7yaNqRLN49AZsJpgcuagAc9U7k
-oUukal7XtnCSu62cZmhylSgZEoqeZUfIsbpbipQzIokPUfTjpW2LvCSrjAYFj2Zf
-yyadFe9deWFVzZs1OYyutMQnwzdWvsi27Syndm95y98ib8NddyP4GFjlJVdZTnoe
-fqTzvyKJYuEehh6gzuRoPAEn9zQCuUjznEa0P+gB8meFLo4ehGtmWnAByugngu0T
-w/huoVDnxVzQu2S8d/48bn4OTLX/BS4NoPc3faRW394Khi1jMhy/Y7iquu0CAwEA
-AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUXYHIEJEULLRMG3qTJJBls4L4Hd8w
-HwYDVR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQELBQAD
-ggEBABveCRNHqDZupucbNX0vgvGI3R0qBFUm3VWdTwn1OG+m8CDbcHdp1NQqY7zQ
-4+dXZctbl2wnWVW+ENJ8nBhJklN4HZxHgDwSlYzHwNrHcUYoZKGh83tG6+G6dVQF
-/4Yky5/4fOkt69pz7Z+0leZUcphJynvt4DW3nXL+FBSnlkbZDyvxQ+Zbr2jBeJ3r
-Qib+4LIBngXSRwD/utcPC1HzzVPQ0gQcybd2Z+2ReZO4DR2AvYo0IiAEwT+vHXkZ
-vzmO4YK55u9o3QZnSgA+pqOQkZJuPKpapITvkVNtM8DDqVr1tFB5h4NTff5byyGK
-5KKKrVdvkXMZun1Jr3CoI32aXp4=
+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMpo0aujxBW1c1JsAR+6YYsNMkW8
+NJ7kYWombnsiBqMEeeycPkYMLXzeBdLSbNjq8zIdxr5HVZ0ddEQG9ZJvr+msFtJj
+GDRHw0ZwoIVD2OYDMU8sKv08ZXsbue2Swp4Gu4aNOsf8Gfccq1j3BnRyAgYSPtTg
+rVlFylCHuIz1oRod3G/gp75WKqHINNEfsn6yB6ZpoAzDJEB5Aw7Orv5ABwuxV+xi
+AUWQwEbhqql7IzTsi6z258tr/EAd2UXqILITZCB7Z1+z1RAHyTSUK3NJ3nm644tB
+8u3PUVaIy/GFEVqumCaGzqVHkq947lxSQGOec+PGni9hUECG/thkQOHKmdkCAwEA
+AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUA8FQZJTMevOXlt8x0hO8XaVmxMow
+HwYDVR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQELBQAD
+ggEBAH2lhd2k0WfD5aIBCodQ6NOMJLSBxe56AnO4/jfIMtmOyr2dwKD9uHQL9vaZ
+yeZsUmthD2/KIDi9Tj8TCt3NhK9YQLGDKPVVDN/0n/5aMi+jDXkYBrAhXXILFr7k
+Xj+L2cF2EDK7ZxsHPQZG/vwn+kF3Mx7e4eEFMyaTgzK1aJjpvRUaKyiTMuykc5km
+1q1tTQ/xji1Vo/WXfRkAb3FBXRldz39TTiJYB9iRS3NC5xUCmB1y3I34yfTzqgAX
+mx46/egYIkexiJ5CxP1HIp8RfuhItoMVfheS+IKoiuYEWb03htb6nNkVV10i+VfO
+PfsR9VApCSLUIIf1uY4YCGqns98=
 -----END CERTIFICATE-----
 -----BEGIN CERTIFICATE-----
 MIIDoDCCAoigAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwaDELMAkGA1UEBhMCUEwx
 GzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHUm9vdCBDQTEL
-MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTE5
-MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowbzELMAkGA1UEBhMCUEwxGzAZBgNV
+MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTIw
+MDMxODExMDAzM1oXDTI0MDMxODExMDAzM1owbzELMAkGA1UEBhMCUEwxGzAZBgNV
 BAoMElN0dW5uZWwgRGV2ZWxvcGVyczEPMA0GA1UECwwGc2VydmVyMQ8wDQYDVQQD
 DAZzZXJ2ZXIxITAfBgkqhkiG9w0BCQEWEnNlcnZlckBleGFtcGxlLmNvbTCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKZxU5tDdyU9rl2OA+u3SKXWyLmy
-vW+f+FEmzdQwRK+AjbZrj7hNcmmtKUDhiPobT/Y1NpwqXRn37mtZEstXi/Kv5P7m
-TKWIlwRn21/o2xVFAmKg1zwlAmzBTipsoSawSV+yYLG0LgKId3jCMvYVmekH1qpN
-XgQyAt2Z4DpE3JGKnGtLUIyokkB2DfE6uCvRL+ySrzzOAoiK1yELUtF4SanBkqwt
-GKyc8JHFXZ3ZIVZnYSnTGe8OhEkaOqMVmGtPzLnxt/1bj0cEYSlCXbz6UAZfLUqx
-muDxSBqgG2CqQyh+3YYgTrQ4RIT7r0vEzop/f+4xE6kJsiVNd5dKHTxISYsCAwEA
-AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUuBZiJEaBGeaketO4ZCodNbC8OrUw
-HwYDVR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQELBQAD
-ggEBAJ+0LcsCFTzVCo2VvbiGyYxJ9JPkYXMjCd9I+5zrzBx3RYH7V/cZrbx0DVOA
-AsDJPz4GF0hoSWpCwMvtWfa5R4sGvQcfnc55ogsBZLkpQf1VVrPCQEjnWcrD5P9j
-Ej3XImPSQrxWb4jvn7fQb0uqJTX/vpHNg2I7FCkbqxcrC99GnKn0fAm18HTT4iiF
-y9LLFO7Oip8czCr3vozQZugZl10LW2M3GtOTyuCUJx1m6XQzW4U+jdtmJC6qmOiA
-POo5bPcb7y97IbM6FxPpyKWzmn19iAXM3j/SSo+GlSypXAGN+L7mu2M8m5SITmRd
-SjDkNyEZRi8WLaQB3SKzaC6iheo=
+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKtvgHJPXYNMvLa0e05TFnnc2RcL
+2sWY4q66bEdS5igjwyErUJ3gerdHy99RhMAs2em09zEJ/2JnVh6bUffWOX30YPIE
+4osSUvltHikkmzCVvYnY0t22pasKkAxTihrt64DW0HNRgooJ0heaHQt2H7VYRknz
+HCYJB9GFaoPSLmfmongyViS7SLlZhqjDoHDuE09VCUgR37AASXiu96zev4iw/PRd
+uiVoV5x6T4vw6Nu42tTQp8yeyQyxis+pU2V655c3t7GJ+xaHdpUe6dqkQ0OIpdjv
+joLjS489XLaASwLDeK0sumWYxLdPWb5gatkU3TSEzwweivAGV7jsSIRaoSMCAwEA
+AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQU3uwiKh/lnsuMHMep/SY2nFA9isgw
+HwYDVR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQELBQAD
+ggEBAGsDlfdAWYLlhQUtzKSTNEVZDXeyoGem1TFdyVez9rOI875pXWmvu+TrzhyL
+1dH3yTYSvSyl7/gr/NvsGQDADfPpL88+bfiwzOimFYmpc1DtEjItN+m+2jc/mgKP
+VmYype8pDCmtvsN+W+LeCqeJvej2SGTsVCivqVGU2kNIU2eihqg9ydHTXLYYamOc
+aGm6SQsYPuBqffrE74SlyNskrUQr3awu+aFfXSpY8Ce0QxejojxtbXd2LT/f9M4v
+87lMdtDV2c+8EvSFbN8/71STPYKVmrui7EchbRi6AX85JSyvbBZKG0yn/OtggIPV
++nttEwFYshY5MRp9oOtLaMOz2T0=
 -----END CERTIFICATE-----
diff --git a/tests/certs/client_cert.pem b/tests/certs/client_cert.pem
index 60306d3a..f7a14b1b 100644
--- a/tests/certs/client_cert.pem
+++ b/tests/certs/client_cert.pem
@@ -1,49 +1,49 @@
 -----BEGIN CERTIFICATE-----
 MIIDoDCCAoigAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwaDELMAkGA1UEBhMCUEwx
 GzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHUm9vdCBDQTEL
-MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTE5
-MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowbzELMAkGA1UEBhMCUEwxGzAZBgNV
+MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTIw
+MDMxODExMDAzMloXDTI0MDMxODExMDAzMlowbzELMAkGA1UEBhMCUEwxGzAZBgNV
 BAoMElN0dW5uZWwgRGV2ZWxvcGVyczEPMA0GA1UECwwGY2xpZW50MQ8wDQYDVQQD
 DAZjbGllbnQxITAfBgkqhkiG9w0BCQEWEmNsaWVudEBleGFtcGxlLmNvbTCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALq/uXUhshKi4zWQw4ElNpMTvdjl
-+1hnq8xuVFmb/s5hMpZNKLm0st3tLtbiAt9RBC7yaNqRLN49AZsJpgcuagAc9U7k
-oUukal7XtnCSu62cZmhylSgZEoqeZUfIsbpbipQzIokPUfTjpW2LvCSrjAYFj2Zf
-yyadFe9deWFVzZs1OYyutMQnwzdWvsi27Syndm95y98ib8NddyP4GFjlJVdZTnoe
-fqTzvyKJYuEehh6gzuRoPAEn9zQCuUjznEa0P+gB8meFLo4ehGtmWnAByugngu0T
-w/huoVDnxVzQu2S8d/48bn4OTLX/BS4NoPc3faRW394Khi1jMhy/Y7iquu0CAwEA
-AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUXYHIEJEULLRMG3qTJJBls4L4Hd8w
-HwYDVR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQELBQAD
-ggEBABveCRNHqDZupucbNX0vgvGI3R0qBFUm3VWdTwn1OG+m8CDbcHdp1NQqY7zQ
-4+dXZctbl2wnWVW+ENJ8nBhJklN4HZxHgDwSlYzHwNrHcUYoZKGh83tG6+G6dVQF
-/4Yky5/4fOkt69pz7Z+0leZUcphJynvt4DW3nXL+FBSnlkbZDyvxQ+Zbr2jBeJ3r
-Qib+4LIBngXSRwD/utcPC1HzzVPQ0gQcybd2Z+2ReZO4DR2AvYo0IiAEwT+vHXkZ
-vzmO4YK55u9o3QZnSgA+pqOQkZJuPKpapITvkVNtM8DDqVr1tFB5h4NTff5byyGK
-5KKKrVdvkXMZun1Jr3CoI32aXp4=
+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMpo0aujxBW1c1JsAR+6YYsNMkW8
+NJ7kYWombnsiBqMEeeycPkYMLXzeBdLSbNjq8zIdxr5HVZ0ddEQG9ZJvr+msFtJj
+GDRHw0ZwoIVD2OYDMU8sKv08ZXsbue2Swp4Gu4aNOsf8Gfccq1j3BnRyAgYSPtTg
+rVlFylCHuIz1oRod3G/gp75WKqHINNEfsn6yB6ZpoAzDJEB5Aw7Orv5ABwuxV+xi
+AUWQwEbhqql7IzTsi6z258tr/EAd2UXqILITZCB7Z1+z1RAHyTSUK3NJ3nm644tB
+8u3PUVaIy/GFEVqumCaGzqVHkq947lxSQGOec+PGni9hUECG/thkQOHKmdkCAwEA
+AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUA8FQZJTMevOXlt8x0hO8XaVmxMow
+HwYDVR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQELBQAD
+ggEBAH2lhd2k0WfD5aIBCodQ6NOMJLSBxe56AnO4/jfIMtmOyr2dwKD9uHQL9vaZ
+yeZsUmthD2/KIDi9Tj8TCt3NhK9YQLGDKPVVDN/0n/5aMi+jDXkYBrAhXXILFr7k
+Xj+L2cF2EDK7ZxsHPQZG/vwn+kF3Mx7e4eEFMyaTgzK1aJjpvRUaKyiTMuykc5km
+1q1tTQ/xji1Vo/WXfRkAb3FBXRldz39TTiJYB9iRS3NC5xUCmB1y3I34yfTzqgAX
+mx46/egYIkexiJ5CxP1HIp8RfuhItoMVfheS+IKoiuYEWb03htb6nNkVV10i+VfO
+PfsR9VApCSLUIIf1uY4YCGqns98=
 -----END CERTIFICATE-----
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/certs/maketestcert.sh b/tests/certs/maketestcert.sh
index 71a1aa23..3c4f8b5f 100755
--- a/tests/certs/maketestcert.sh
+++ b/tests/certs/maketestcert.sh
@@ -90,7 +90,7 @@ cat tmp/server_cert.pem >> tmp/PeerCerts.pem 2>> "maketestcert.log"
 cat demoCA/server.key >> tmp/server_cert.pem 2>> "maketestcert.log"
 
 # create a PKCS#12 file with a server certificate
-$OPENSSL pkcs12 -export -in tmp/server_cert.pem -out tmp/server_cert.p12 -passout pass: 1>&2 2>> "maketestcert.log"
+$OPENSSL pkcs12 -export -certpbe pbeWithSHA1And3-KeyTripleDES-CBC -in tmp/server_cert.pem -out tmp/server_cert.p12 -passout pass: 1>&2 2>> "maketestcert.log"
 
 # copy new files
 if [ -s tmp/stunnel.pem ] && [ -s tmp/CACert.pem ] && [ -s tmp/CACertCRL.pem ] && \
diff --git a/tests/certs/psk1.txt b/tests/certs/psk1.txt
index 7565001a..97c6f78e 100644
--- a/tests/certs/psk1.txt
+++ b/tests/certs/psk1.txt
@@ -1 +1 @@
-test1:kvix8aMfwWEdGjJslhocucTcvGCr2qWT3E1PfwpGFIe0qOmhyi
+test1:TXBWl8XpwwQxJNtCZxrNkeSTvnmft3dgTW5hhE66r8SO49PQRD
diff --git a/tests/certs/psk2.txt b/tests/certs/psk2.txt
index b07364d4..d1c71718 100644
--- a/tests/certs/psk2.txt
+++ b/tests/certs/psk2.txt
@@ -1 +1 @@
-test2:wionOV9B956yI9rFjlyq46IWps8cBqTYTmz7sW1rROGhNkWgyF
+test2:VnmD1uRfNUva0XCERkuOEtGBfB61HHbkKLK6JeqlXQL2dCi0fl
diff --git a/tests/certs/revoked_cert.pem b/tests/certs/revoked_cert.pem
index a795d811..ad245ac1 100644
--- a/tests/certs/revoked_cert.pem
+++ b/tests/certs/revoked_cert.pem
@@ -1,49 +1,49 @@
 -----BEGIN CERTIFICATE-----
 MIIDozCCAougAwIBAgICEAAwDQYJKoZIhvcNAQELBQAwaDELMAkGA1UEBhMCUEwx
 GzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHUm9vdCBDQTEL
-MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTE5
-MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowcjELMAkGA1UEBhMCUEwxGzAZBgNV
+MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTIw
+MDMxODExMDAzMloXDTI0MDMxODExMDAzMlowcjELMAkGA1UEBhMCUEwxGzAZBgNV
 BAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHcmV2b2tlZDEQMA4GA1UE
 AwwHcmV2b2tlZDEiMCAGCSqGSIb3DQEJARYTcmV2b2tlZEBleGFtcGxlLmNvbTCC
-ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAObg8POTFshvLhXt/BhxBI8G
-+yb/OeaohYdmtDtBfV4eXAubH6uewRIh4+4l3NHL5DG41hOSNueOf5WnSKVD1sYY
-XoKlqukH7o1Z2x2x6IpHXGGnmVnIgMNJfBo3wuzBugeeepytYcQqYdmDugN6TB8f
-hZUc90E1ZdER6jyJ+F31UmB1FWKpBILbsc8HZVmfEUMV0lFXRH+h7S/ncYY7WTQf
-GglBlBzkOLfENTJRBKX7RRsh8ySf9LwjuxE58wOUwqFCzcgtyicLPg3JVNqbBqvW
-+9iYDWcd3K1bD3az0quadfWDwRnMDGfMfU3Evp3nDSVB86Bru5cVPvf8UglbWiEC
-AwEAAaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUpAGy+3Vst01bjzeHY6vOJaAI
-K60wHwYDVR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQEL
-BQADggEBAELfKTDvo8X1AJrsZlkGS1QkdEbebVqMpvNO5AUnfH+DiUPUM8ejmSyL
-WnWl+/F8TJu0o2ph+Jf1zMAyXXxm3gGWE7L64BSOtrnKz8Npvlg2CyJKp8LRQ69i
-2XsHqbbzpmiwnn7y7FTHhOpVOWsg/lZfCrP82RD3HRz7Hpx1M+wyKMsFnoIphIz1
-99Hj2H6cyHdw01xMjLz6eiKzBAV1N2IPzCaX/lNkWjlJjo+CNoT2nPYsOoBrUdGO
-emu9o7jRLNqZK34roZW+ZbZGCL3lYuM1MYCkIDq8J6wyyquNNOShmk5pQBoaNtSb
-kSMBXIHQEJHJOoxXzScOGMJH69hfhVc=
+ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANG9Rl0i1K27+tQDQUP3b7R4
+LZVYl/Ps0PiLBMBGjWKed/8rnxnI4XpByxg/c11u+oeQZQ+CfFsPo5dsjAK+oicD
+hoMVbl88rA0RJBqzcl+A/Qtkj8qs4euGf9PvY1gj9V5GOWiQaTcf7hE/r4gvFBJL
+rb5gbhsxXFYI4LjhftPNi23VwSRri9mVpi3zJiilqUIi3zEg1fDuWr8tYLfCiY9h
+wqwtiiRAf+m9VRRlUj/wUoNidQx5DU7kdptYyJt6aKj01VUUZZfzFztkPMJ0qs1x
+FYikgrg15aaLojuaVgYyxn0ykimzQ1owjxcPSLE+IYUzeYOFZIUJu2WEdqVmNiEC
+AwEAAaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUYf+nYo0mL3WWh6eg1cWZKR8R
+76IwHwYDVR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQEL
+BQADggEBACEZxu6QwVIg529yheX1RRjlK78RO/YFHzOTdjaDUE3sQV6Oc8WtL8bV
+OgPm+cEjE7aWpq+ZXNyXTxdR+mmBadsa4HXuGGyloOa/eh9b5tS2uh/4mL7KT/7G
+LqCl1QEUCCfjzt58Phl4mYkGPnQ4Cc5V/sE3qBSOs+lq6lh1kWQCAZKTYr3DzpAS
+xPyTwcwiWoyM6reSOIVv7RYNep6O3kzUkly9Fl0yVlHvmGotPkuyRVbMgMTBXijm
+4wu0lMk3jw9yvwT7N+/JKvfLvM/N87BS36yALLJj0YtBNemd0pdhhK/hoELCe08y
+I9s/elTEnsV/+zJo29Kxi3mJlKIv3DI=
 -----END CERTIFICATE-----
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/certs/secrets.txt b/tests/certs/secrets.txt
index e05f33ab..69b8b354 100644
--- a/tests/certs/secrets.txt
+++ b/tests/certs/secrets.txt
@@ -1,2 +1,2 @@
-test1:kvix8aMfwWEdGjJslhocucTcvGCr2qWT3E1PfwpGFIe0qOmhyi
-test2:W42xCIe3Zbp65qEBpo3ER4EvWkHSErEn0Ps8w0ikmMHr5tHuvY
+test1:TXBWl8XpwwQxJNtCZxrNkeSTvnmft3dgTW5hhE66r8SO49PQRD
+test2:6lIJPO8ROwRvcvvvjnveiGVpqdPD7IjlquWCJfqIf7BykTHYC5
diff --git a/tests/certs/server_cert.p12 b/tests/certs/server_cert.p12
index fa33d8e8..5b2075c0 100644
Binary files a/tests/certs/server_cert.p12 and b/tests/certs/server_cert.p12 differ
diff --git a/tests/certs/server_cert.pem b/tests/certs/server_cert.pem
index eb4c1a1d..faed8d15 100644
--- a/tests/certs/server_cert.pem
+++ b/tests/certs/server_cert.pem
@@ -1,49 +1,49 @@
 -----BEGIN CERTIFICATE-----
 MIIDoDCCAoigAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwaDELMAkGA1UEBhMCUEwx
 GzAZBgNVBAoMElN0dW5uZWwgRGV2ZWxvcGVyczEQMA4GA1UECwwHUm9vdCBDQTEL
-MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTE5
-MTExMTIxNTgzMFoXDTIzMTExMTIxNTgzMFowbzELMAkGA1UEBhMCUEwxGzAZBgNV
+MAkGA1UEAwwCQ0ExHTAbBgkqhkiG9w0BCQEWDkNBQGV4YW1wbGUuY29tMB4XDTIw
+MDMxODExMDAzM1oXDTI0MDMxODExMDAzM1owbzELMAkGA1UEBhMCUEwxGzAZBgNV
 BAoMElN0dW5uZWwgRGV2ZWxvcGVyczEPMA0GA1UECwwGc2VydmVyMQ8wDQYDVQQD
 DAZzZXJ2ZXIxITAfBgkqhkiG9w0BCQEWEnNlcnZlckBleGFtcGxlLmNvbTCCASIw
-DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKZxU5tDdyU9rl2OA+u3SKXWyLmy
-vW+f+FEmzdQwRK+AjbZrj7hNcmmtKUDhiPobT/Y1NpwqXRn37mtZEstXi/Kv5P7m
-TKWIlwRn21/o2xVFAmKg1zwlAmzBTipsoSawSV+yYLG0LgKId3jCMvYVmekH1qpN
-XgQyAt2Z4DpE3JGKnGtLUIyokkB2DfE6uCvRL+ySrzzOAoiK1yELUtF4SanBkqwt
-GKyc8JHFXZ3ZIVZnYSnTGe8OhEkaOqMVmGtPzLnxt/1bj0cEYSlCXbz6UAZfLUqx
-muDxSBqgG2CqQyh+3YYgTrQ4RIT7r0vEzop/f+4xE6kJsiVNd5dKHTxISYsCAwEA
-AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQUuBZiJEaBGeaketO4ZCodNbC8OrUw
-HwYDVR0jBBgwFoAUv5gO8NHd5OOOIZeU30Qpl87BUrswDQYJKoZIhvcNAQELBQAD
-ggEBAJ+0LcsCFTzVCo2VvbiGyYxJ9JPkYXMjCd9I+5zrzBx3RYH7V/cZrbx0DVOA
-AsDJPz4GF0hoSWpCwMvtWfa5R4sGvQcfnc55ogsBZLkpQf1VVrPCQEjnWcrD5P9j
-Ej3XImPSQrxWb4jvn7fQb0uqJTX/vpHNg2I7FCkbqxcrC99GnKn0fAm18HTT4iiF
-y9LLFO7Oip8czCr3vozQZugZl10LW2M3GtOTyuCUJx1m6XQzW4U+jdtmJC6qmOiA
-POo5bPcb7y97IbM6FxPpyKWzmn19iAXM3j/SSo+GlSypXAGN+L7mu2M8m5SITmRd
-SjDkNyEZRi8WLaQB3SKzaC6iheo=
+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKtvgHJPXYNMvLa0e05TFnnc2RcL
+2sWY4q66bEdS5igjwyErUJ3gerdHy99RhMAs2em09zEJ/2JnVh6bUffWOX30YPIE
+4osSUvltHikkmzCVvYnY0t22pasKkAxTihrt64DW0HNRgooJ0heaHQt2H7VYRknz
+HCYJB9GFaoPSLmfmongyViS7SLlZhqjDoHDuE09VCUgR37AASXiu96zev4iw/PRd
+uiVoV5x6T4vw6Nu42tTQp8yeyQyxis+pU2V655c3t7GJ+xaHdpUe6dqkQ0OIpdjv
+joLjS489XLaASwLDeK0sumWYxLdPWb5gatkU3TSEzwweivAGV7jsSIRaoSMCAwEA
+AaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQU3uwiKh/lnsuMHMep/SY2nFA9isgw
+HwYDVR0jBBgwFoAUVJFfz/J8NchcwQB+DJ9v7rD1bjQwDQYJKoZIhvcNAQELBQAD
+ggEBAGsDlfdAWYLlhQUtzKSTNEVZDXeyoGem1TFdyVez9rOI875pXWmvu+TrzhyL
+1dH3yTYSvSyl7/gr/NvsGQDADfPpL88+bfiwzOimFYmpc1DtEjItN+m+2jc/mgKP
+VmYype8pDCmtvsN+W+LeCqeJvej2SGTsVCivqVGU2kNIU2eihqg9ydHTXLYYamOc
+aGm6SQsYPuBqffrE74SlyNskrUQr3awu+aFfXSpY8Ce0QxejojxtbXd2LT/f9M4v
+87lMdtDV2c+8EvSFbN8/71STPYKVmrui7EchbRi6AX85JSyvbBZKG0yn/OtggIPV
++nttEwFYshY5MRp9oOtLaMOz2T0=
 -----END CERTIFICATE-----
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
diff --git a/tests/certs/stunnel.pem b/tests/certs/stunnel.pem
index 677a590d..a58289e0 100644
--- a/tests/certs/stunnel.pem
+++ b/tests/certs/stunnel.pem
@@ -1,53 +1,53 @@
 -----BEGIN PRIVATE KEY-----
-MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqok2NvyMMKWnL
-buYxcXic/T2j1OPDbeDzSy77t0hMGjbforHpHmnAHxdYPGTkgbbiaLRZJfNEBDD2
-1H3c/YLC1cfwSc9tw1whbmmyxq1iPuNH1kE/o1kXNRVZta+oSzFGGzigD5c7Zp/F
-xytmtu+R7pMpQv1IPOx2SFzqzm3bTRBjyciG+EFX8ceyRbmNuwyGfaWD+awbxp+I
-gfChtD5Z6Kw/n6coaG4/VyxMni7GRB/MIyYmYqb/cfSQsGCq8EfvrAmUllqZ64Sl
-k63z5VyPv3uestIHKWWwPitqCioCzeOt1VAyA5UeL22QocC2YfuSnJTjQZk2ESjq
-FI41L155AgMBAAECggEASta0vR6/+G2RgTA6tiTWicRobJrK6sQejZbEHJLemsJE
-nwF0lpJIP4NjccfLWI2r8NGLiC4k7AgKkbfRHEP0PhAViUZWPAYbOm563XZWRWjf
-tno6U/cI9CzMGHSffmi8S8tUop8z7VGtcclRN9O0b4T79nTzMePGsno6hqHTfQMw
-dHAucZY43puCOQm0Lkm0Mzf+XUC1SzjfhYni2HrsfKWmzLZPSZufzl6toQVjhzNI
-EYl+4TpZFuScwB4Ox5bojsA9uLtluLEYGZ7Eu7J+ol4hIzyBDiZvosmkoEkbFjFt
-2EvGAlzQhlcqUJECo69lfW5J9ZqASIKJqyH4q+NkIQKBgQDVcc9gniVhUQNIH1WE
-FBTo8IqhUUIZ9fPj5ALxvtaXjZAjldySNiZDST3oQNXf9KhEhEJVDqb/CLN7U/Q8
-7/A/WfMg29ud34gRJ1JbUxhUva1Gw4kbdvg2CEs/3DnepPHDFBBLAmsH7RWMTA3h
-hWEVjD9gFUweVu/Zs+dy2h44uwKBgQDMp3ICJjMKTm1i9l4r/8J5ZdGD1K0A1a8D
-MPzj7sjNa1sjrmtEQb9FBVwP9xfabV8EEFxcJdRb7e3282TeWrDx8sRpY8o2UJfi
-QyDGvjvfzmUcHszD7z5jFl/dtt+nf6nKBFg8tLyBw4WahPUrmbjtCRvyb7ol2A0g
-WaBInkpcWwKBgDHtd1bgZ1oGO0BJpBVLJUD/00281juAXtZ15YJq44N757WLPpcs
-93JR1ZtYXy8N6bZtQZ7n2IRborA8iSsf7RDEl6yeARdCzG9GxWr7Wvunirq8znuQ
-Lqtk8UU03IyKBMtfDBifri2idaHlwHF6Y6VIsyJkmPOX3m8MOB2Ti/I1AoGAXiM/
-3CE6JSmCQ51UICUbjb/6KgvwMIwaXvtvuGEkWOljGPyoNtOPae5XNLjSbhUVOcdU
-1MZJ8qd1aLz4zxckgYbMNjZC080qsFd0gjcLT52fANpiElbAec/W9SOjqWad8WEi
-PXpdo8sOb89s/0tMtywTgOdH1xSUpSbVBdJaHjUCgYEAoUnR5XvNINIoG7oLDfFy
-MP4w6t0dFjbjVZ5gu4EY0Bsz03lhil50POubS4QLzw3HXLnHMCZvgDeSVLdQvIxD
-PexyOMWW9hgr0aP2U+NBu6uTGMizoKtGQcep7zypidKUrWYUmnuZ71t8ZldyisN2
-b83EIZ4I3GVpI8ZulB/pmOM=
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQConNPaL8zDOcvB
+S34MgmVCJng7EL3Z1Gj0wE6Nt+EVhLYnGJtRM8/5GibPijwaQ6i1zzwNZt50YGs/
+NKISJH+3t+mLJt2Wt3AqQYsFKIZavpY9u0V8A8ITh4XVq4Ym+XJWFKkj4L3frFph
+J5wdfO1dvts9dYATUq8ned/IKC4lfwV1eRnX3U5IwnXH/hursX6zn+1Lqshjqfo8
+P4MnLAOA2ktc7dx4i2UTydeA1TKp8NAY19SlHDfMtAI2+7mZsu/tHqm++1Pa7U36
+fsfe1kY/5CoSPMzCuC7V9rmBpFtTzCLo0u5LfL5CU56TuEpKh3Lvn5yQVpKQqpoY
+SGxxwH3NAgMBAAECggEANDedREzZVPxpJYuDlcwsH7haM7CTmwo1FtcXfLwdcNSQ
+tLriHtu05Kg8rLlas6eQb/2l02CwM8pIbGKYbpXvF65VHUsEBND6Y5u4ufg6449y
+Z9u/QRDI4dNulyVvflJyHkZ3uyy2oLZ3pu7lYhx2Rjn9G6Nv7owEwmzz6MDIycNz
+5NlWjHLeMbOdCK3hZ9TH3B8D4n3Lrk1xjJwZ7HMjw3Nf01/zNjYcbJK8MMAZGLER
+zA5/L0AqE79GzQPGC3PJDlXczAhlRnlkR2Y9Qr2RxrbH1xdRGtoq9bCqkQq07pWc
+rlhF9SoI0Iv3AYkhChKCxNfr3TN4HglRHjygNlSj4QKBgQDWmynvP73YZyaEiBGe
+E1RcIKURX3+XGiE2mjrXRugC3nKcZKbRRy0+YiPhjuwQLv0lQC6+zKHwoFWQsbzc
+cqEaGjLHUC5AHdRDtDDh8glBUAWcKzS1Yjdg+TBrwKwBUhOSh6yhOtxO6KG3Rsqp
+wHL2dNux4LZsyvVH0P/fzCKCnwKBgQDJIpfgjoTWl9LZ/K7pSpZ0MjmFoN8H9vp8
+3xirXVNwQT4rZ0cPwb+X+mmb5G+er7LanIQ2qy3GKlVuPMMdIxx5d7cr+EVxMUIT
+CyQqOfVtBL//cv/qWGOrdH4NJuuP3+KZ0JbB8nSqwHVdfl7pqAEm6z4BOXjtwAoX
+9ceCawe0EwKBgQCBCOis5umSLWtWcq4NGtg1UJePm5kO1HI174QDnqmv1+qXqFk5
+Kg/FG6MxYwsDLA2fkTjKFiYklXL9PjEtZ2sAU9JGTyqP+J+BWd2ubSYtdBz7amsV
+yIk9sHbxwvZpEN2d1B/zDX4bn/pkRZdje8hj8Z2LFW76eQoD9WF0QbxaRwKBgE/l
+ZvEzi772hjJDNnPDRiqX/NOBCLdQO0Y5FMKVitxvfjOdjdPLgcDsHuFnB5PAdUpz
+m+1faApsrIzipBrB5MC3dlKIB4WkLHwGE/KWHVCV73KYiuHbBJSJ7Lxqtm3rYEb7
+XbdjCUb+tmBSH3+vVe3QykuQOeIvQ5Mq9Xpv65pzAoGALLf2ytpoeIzOQsMM2qu9
+te0KqWVK/8hVkEfvjhx1H2EDvp/JZmssvwaOp+A2olwxaM0k8ah7/gPk2bTXaDVw
+atV5R3sRaEC9JyKLtZxePelKgSMSTN4HmFqyiYVO/RUnucGqwWK2TnwouBeHQz+/
+UqnxOJnYGMWx6w/CocCF3rM=
 -----END PRIVATE KEY-----
 -----BEGIN CERTIFICATE-----
-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
+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
-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
+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
-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
+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
 -----END CERTIFICATE-----
diff --git a/tests/make_test b/tests/make_test
index 2b08d3c5..553e8777 100755
--- a/tests/make_test
+++ b/tests/make_test
@@ -25,19 +25,22 @@ autodetection() {
       result=1
   fi
 
-  if [ -n "$(command -v netstat)" ] && ! netstat -a -n 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
+  if [ -f /mnt/c/Windows/System32/netstat.exe ] && ! /mnt/c/Windows/System32/netstat.exe -a -n 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
+    then
+      mynetstat="/mnt/c/Windows/System32/netstat.exe"
+  elif [ -n "$(command -v netstat)" ] && ! netstat -a -n 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
     then
       mynetstat="netstat"
-    elif [ -n "$(command -v ss)" ] && ! ss -a -n -l 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
-      then
-        mynetstat="ss"
-    elif [ -n "$(command -v lsof)" ] && ! lsof -i -n -P 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
-      then
-        mynetstat="lsof"
-    else # netstat / ss / lsof is required
-      printf "%s\n" "netstat / ss / lsof not found in \$PATH or some option error"
-      result=1
-   fi
+  elif [ -n "$(command -v ss)" ] && ! ss -a -n -l 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
+    then
+      mynetstat="ss"
+  elif [ -n "$(command -v lsof)" ] && ! lsof -i -n -P 2>&1 | grep -q -e "usage" -e "invalid" -e "illegal" -e "command not found"
+    then
+      mynetstat="lsof"
+  else # netstat / ss / lsof is required
+    printf "%s\n" "netstat / ss / lsof not found in \$PATH or some option error"
+    result=1
+  fi
 
   if [ -n "$(command -v stdbuf)" ]
     then
@@ -59,6 +62,11 @@ if autodetection
     cd "${result_path}"
     date > "results.log"
     ../../src/stunnel -version 2>> "results.log"
+    if [ -n "$(command -v fips-mode-setup)" ]
+      then
+        printf "\n" >> "results.log"
+        fips-mode-setup --check 1>> "results.log"
+      fi
     printf "\n%s\n" "Testing..." >> "results.log"
     head -n5 "results.log"
     if ! grep -q "solaris" "results.log"
diff --git a/tests/recipes/021_FIPS b/tests/recipes/021_FIPS
index c78b9e19..7262ed5a 100644
--- a/tests/recipes/021_FIPS
+++ b/tests/recipes/021_FIPS
@@ -24,7 +24,7 @@ start() {
 EOT
 }
 
-if grep -q "FIPS" results.log && grep -q "\-fips" results.log
+if (grep -q "FIPS" results.log && grep -q "\-fips" results.log) || grep -q "FIPS mode is enabled" results.log
   then
     test_log_for "021_FIPS" "success" "0" "$1" "$2" "$3" 2>> "stderr.log"
     exit $?
diff --git a/tests/recipes/028_redirect_chain b/tests/recipes/028_redirect_chain
new file mode 100644
index 00000000..06aea532
--- /dev/null
+++ b/tests/recipes/028_redirect_chain
@@ -0,0 +1,50 @@
+#!/bin/sh
+
+# Redirect TLS client connections on certificate-based authentication failures.
+# [client_1] -> [server_1] -> [client_2] -> [server_2]
+# The success is expected because the client presents the *wrong* certificate
+# and the client connection is redirected.
+# Checking if the verifyChain option verifies the peer certificate starting from the root CA.
+
+. $(dirname $0)/../test_library
+
+start() {
+  ../../src/stunnel -fd 0 <<EOT
+  debug = debug
+  syslog = no
+  pid = ${result_path}/stunnel.pid
+  output = ${result_path}/stunnel.log
+
+  [client_1]
+  client = yes
+  accept = 127.0.0.1:${http1}
+  connect = 127.0.0.1:${https1}
+  ;cert = ${script_path}/certs/client_cert.pem
+;wrong self signed certificate
+  cert = ${script_path}/certs/stunnel.pem
+
+  [client_2]
+  client = yes
+  accept = 127.0.0.1:${http2}
+  connect = 127.0.0.1:${https2}
+
+  [server_1]
+  accept = 127.0.0.1:${https1}
+  exec = ${script_path}/execute
+  execArgs = execute 028_redirect_chain_error
+  redirect = ${http2}
+  cert = ${script_path}/certs/server_cert.pem
+  verifyChain = yes
+  CAfile = ${script_path}/certs/CACert.pem
+
+  [server_2]
+  accept = 127.0.0.1:${https2}
+  cert = ${script_path}/certs/server_cert.pem
+  exec = ${script_path}/execute
+  execArgs = execute 028_redirect_chain
+
+EOT
+}
+
+test_log_for "028_redirect_chain" "execute" "0" "$1" "$2" "$3" 2>> "stderr.log"
+exit $?
diff --git a/tests/recipes/029_no_redirect_chain b/tests/recipes/029_no_redirect_chain
new file mode 100644
index 00000000..2c5cb061
--- /dev/null
+++ b/tests/recipes/029_no_redirect_chain
@@ -0,0 +1,49 @@
+#!/bin/sh
+
+# Do not redirect TLS client connections on certificate-based authentication success.
+# [client_1] -> [server_1]
+# The success is expected because the client presents the *correct* certificate
+# and the client connection isn't redirected.
+# Checking if the verifyChain option verifies the peer certificate starting from the root CA.
+
+. $(dirname $0)/../test_library
+
+start() {
+  ../../src/stunnel -fd 0 <<EOT
+  debug = debug
+  syslog = no
+  pid = ${result_path}/stunnel.pid
+  output = ${result_path}/stunnel.log
+
+  [client_1]
+  client = yes
+  accept = 127.0.0.1:${http1}
+  connect = 127.0.0.1:${https1}
+;correct certificate
+  cert = ${script_path}/certs/client_cert.pem
+
+  [client_2]
+  client = yes
+  accept = 127.0.0.1:${http2}
+  connect = 127.0.0.1:${https2}
+
+  [server_1]
+  accept = 127.0.0.1:${https1}
+  exec = ${script_path}/execute
+  execArgs = execute 029_no_redirect_chain
+  redirect = ${http2}
+  cert = ${script_path}/certs/server_cert.pem
+  verifyChain = yes
+  CAfile = ${script_path}/certs/CACert.pem
+
+  [server_2]
+  accept = 127.0.0.1:${https2}
+  cert = ${script_path}/certs/server_cert.pem
+  exec = ${script_path}/execute
+  execArgs = execute 029_no_redirect_chain_error
+
+EOT
+}
+
+test_log_for "029_no_redirect_chain" "execute" "0" "$1" "$2" "$3" 2>> "stderr.log"
+exit $?
diff --git a/tests/test_library b/tests/test_library
index e8f675a7..04bbe716 100755
--- a/tests/test_library
+++ b/tests/test_library
@@ -302,7 +302,7 @@ connecting_ncat() {
         then # BSD nc
               cat "nodata" | $mybuffer $opt_buf $mynetcat -l "$http_nc" -vvv > "temp.log" 2>> "stderr_nc.log" &
         else # traditional nc
-              cat "nodata" | $mybuffer $opt_buf $mynetcat -l -p "$http_nc" -vvv > "temp.log" 2>> "stderr_nc.log" &
+              cat "nodata" | $mybuffer $opt_buf $mynetcat -l -p "$http_nc" -s 127.0.0.1 -vvv > "temp.log" 2>> "stderr_nc.log" &
         fi
       pid_nc=$!
       if check_listening "$http_nc"
@@ -805,6 +805,7 @@ myglobal() {
   mybuffer="$3"
 
   case "$mynetstat" in
+    "/mnt/c/Windows/System32/netstat.exe") opt_net="-a -n";;
     "netstat") opt_net="-a -n";;
     "ss") opt_net="-a -n -l";;
     "lsof") opt_net="-i -n -P";;
diff --git a/tools/Makefile.am b/tools/Makefile.am
index 324f5fb6..31bc730d 100644
--- a/tools/Makefile.am
+++ b/tools/Makefile.am
@@ -1,5 +1,5 @@
 ## Process this file with automake to produce Makefile.in
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 EXTRA_DIST = ca.html ca.pl importCA.html importCA.sh script.sh makecert.sh
 EXTRA_DIST += openssl.cnf stunnel.nsi stunnel.license stunnel.conf
diff --git a/tools/Makefile.in b/tools/Makefile.in
index 69d2f3f9..6db48313 100644
--- a/tools/Makefile.in
+++ b/tools/Makefile.in
@@ -14,7 +14,7 @@
 
 @SET_MAKE@
 
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 VPATH = @srcdir@
 am__is_gnu_make = { \
diff --git a/tools/openssl.cnf b/tools/openssl.cnf
index 2d0e648a..75e1cc3d 100644
--- a/tools/openssl.cnf
+++ b/tools/openssl.cnf
@@ -1,5 +1,5 @@
 # OpenSSL configuration file to create a server certificate
-# by Michal Trojnara 1998-2019
+# by Michal Trojnara 1998-2020
 
 [ req ]
 # comment out the next line to protect the private key with a passphrase
diff --git a/tools/stunnel.conf-sample.in b/tools/stunnel.conf-sample.in
index b8dc8813..f46a3a71 100644
--- a/tools/stunnel.conf-sample.in
+++ b/tools/stunnel.conf-sample.in
@@ -1,4 +1,4 @@
-ï»¿; Sample stunnel configuration file for Unix by Michal Trojnara 1998-2019
+ï»¿; Sample stunnel configuration file for Unix by Michal Trojnara 1998-2020
 ; Some options used here may be inadequate for your particular configuration
 ; This sample file does *not* represent stunnel.conf defaults
 ; Please consult the manual for detailed description of available options
diff --git a/tools/stunnel.license b/tools/stunnel.license
index 96cacaae..bc9f32aa 100644
--- a/tools/stunnel.license
+++ b/tools/stunnel.license
@@ -1,4 +1,4 @@
-Copyright (C) 1998-2019 Michal Trojnara
+Copyright (C) 1998-2020 Michal Trojnara
 
 This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 
diff --git a/tools/stunnel.nsi b/tools/stunnel.nsi
index cc8b69af..f6959680 100644
--- a/tools/stunnel.nsi
+++ b/tools/stunnel.nsi
@@ -1,4 +1,4 @@
-# NSIS stunnel installer by Michal Trojnara 1998-2019
+# NSIS stunnel installer by Michal Trojnara 1998-2020
 
 !define /ifndef VERSION testing
 !define /ifndef ARCH win32
@@ -181,6 +181,7 @@ no_service_restart:
   Delete "$INSTDIR\bin\libssl-1_1-x64.dll"
   Delete "$INSTDIR\bin\libssl-1_1-x64.pdb"
   Delete "$INSTDIR\bin\vcruntime140.dll"
+  Delete "$INSTDIR\bin\libssp-0.dll"
   RMDir "$INSTDIR\bin"
 
   Delete "$INSTDIR\engines\4758cca.dll"
@@ -338,10 +339,18 @@ Section "Core Files" sectionCORE
   !if /FileExists "/usr/x86_64-w64-mingw32/bin/libssp-0.dll"
   File "/usr/x86_64-w64-mingw32/bin/libssp-0.dll"
   !else
+  !if /FileExists "/usr/lib/gcc/x86_64-w64-mingw32/10-win32/libssp-0.dll"
+  File "/usr/lib/gcc/x86_64-w64-mingw32/10-win32/libssp-0.dll"
+  !else
+  !if /FileExists "/usr/lib/gcc/x86_64-w64-mingw32/9.3-win32/libssp-0.dll"
+  File "/usr/lib/gcc/x86_64-w64-mingw32/9.3-win32/libssp-0.dll"
+  !else
   !if /FileExists "/usr/lib/gcc/x86_64-w64-mingw32/8.3-win32/libssp-0.dll"
   File "/usr/lib/gcc/x86_64-w64-mingw32/8.3-win32/libssp-0.dll"
   !endif
   !endif
+  !endif
+  !endif
   #SetOutPath "$INSTDIR"
   #ReadRegStr $0 HKLM "SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\x64" "Installed"
   #${If} $0 == 1
diff --git a/tools/stunnel.service.in b/tools/stunnel.service.in
index 64ba7faf..11f848d3 100644
--- a/tools/stunnel.service.in
+++ b/tools/stunnel.service.in
@@ -1,6 +1,6 @@
 [Unit]
 Description=TLS tunnel for network daemons
-After=syslog.target network.target
+After=syslog.target network-online.target
 
 [Service]
 ExecStart=@bindir@/stunnel
diff --git a/tools/stunnel.spec b/tools/stunnel.spec
index 6976139b..a630a5b0 100644
--- a/tools/stunnel.spec
+++ b/tools/stunnel.spec
@@ -1,5 +1,5 @@
 Name:           stunnel
-Version:        5.56
+Version:        5.57
 Release:        1%{?dist}
 Summary:        An TLS-encrypting socket wrapper
 Group:          Applications/Internet
