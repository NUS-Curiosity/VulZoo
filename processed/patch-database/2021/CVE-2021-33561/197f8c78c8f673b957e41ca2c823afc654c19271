diff --git a/sm-shop/SALESMANAGER.h2.db b/sm-shop/SALESMANAGER.h2.db
index b07a5adf1e..6f9f3c6a36 100644
Binary files a/sm-shop/SALESMANAGER.h2.db and b/sm-shop/SALESMANAGER.h2.db differ
diff --git a/sm-shop/files/store/DownlaodRepository.dat b/sm-shop/files/store/DownlaodRepository.dat
index dc081f850b..141b9309a4 100644
Binary files a/sm-shop/files/store/DownlaodRepository.dat and b/sm-shop/files/store/DownlaodRepository.dat differ
diff --git a/sm-shop/src/main/java/com/salesmanager/shop/application/config/ShopApplicationConfiguration.java b/sm-shop/src/main/java/com/salesmanager/shop/application/config/ShopApplicationConfiguration.java
index 59efd2ddda..5a2f389580 100755
--- a/sm-shop/src/main/java/com/salesmanager/shop/application/config/ShopApplicationConfiguration.java
+++ b/sm-shop/src/main/java/com/salesmanager/shop/application/config/ShopApplicationConfiguration.java
@@ -78,7 +78,7 @@ public TilesViewResolver tilesViewResolver() {
   }
   
 
-/*  @Bean
+  @Bean
   public FilterRegistrationBean<XssFilter> croseSiteFilter(){
       FilterRegistrationBean<XssFilter> registrationBean 
         = new FilterRegistrationBean<>();
@@ -87,7 +87,7 @@ public FilterRegistrationBean<XssFilter> croseSiteFilter(){
       registrationBean.addUrlPatterns("/*");
           
       return registrationBean;    
-  }*/
+  }
 
   @Override
   public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
diff --git a/sm-shop/src/main/java/com/salesmanager/shop/filter/XssFilter.java b/sm-shop/src/main/java/com/salesmanager/shop/filter/XssFilter.java
index 0d1d5dc933..042110f281 100644
--- a/sm-shop/src/main/java/com/salesmanager/shop/filter/XssFilter.java
+++ b/sm-shop/src/main/java/com/salesmanager/shop/filter/XssFilter.java
@@ -16,8 +16,8 @@
 import org.springframework.stereotype.Component;
 
 
-//@Component
-//@Order(5) //after other defined filters
+@Component
+@Order(0)
 public class XssFilter implements Filter {
 
 	 /**
@@ -30,49 +30,16 @@ public void init(FilterConfig filterConfig) throws ServletException {
 	  LOGGER.debug("(XssFilter) initialize");
 	 }
 
-/*	 @Override
-	 public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
-	   throws IOException, ServletException {
-	  XssHttpServletRequestWrapper xssRequest =
-	    new XssHttpServletRequestWrapper((HttpServletRequest) request);
-	  chain.doFilter(xssRequest, response);
-	 }*/
-	 
-
-/*	 protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
-	 		FilterChain filterChain) throws ServletException, IOException {
-
-	 	filterChain.doFilter(new XssHttpServletRequestWrapper(request) {
-
-
-	 	}, new HttpServletResponseWrapper(response));
-	 }*/
 	 
 	 @Override
 	 public void doFilter(ServletRequest srequest, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
 
-/*	 		HttpServletRequest request = (HttpServletRequest) srequest;
-	 		//final String realIp = request.getHeader(X_FORWARDED_FOR);
+	 		HttpServletRequest request = (HttpServletRequest) srequest;
+	 		filterChain.doFilter(new XssHttpServletRequestWrapper(request) {}, response);
 
-	 		//if (realIp != null) {
-	 			filterChain.doFilter(new XssHttpServletRequestWrapper(request) {
-	 				*//**
-	 				public String getRemoteAddr() {
-	 					return realIp;
-	 				}
-
-	 				public String getRemoteHost() {
-	 					return realIp;
-	 				}
-	 				**//*
-	 			}, response);
-
-	 			return;
-	 		//}
+	 }
 
-*/
 
-	 }
 
 	 @Override
 	 public void destroy() {
diff --git a/sm-shop/src/main/java/com/salesmanager/shop/filter/XssHttpServletRequestWrapper.java b/sm-shop/src/main/java/com/salesmanager/shop/filter/XssHttpServletRequestWrapper.java
index eab9823568..f339845313 100644
--- a/sm-shop/src/main/java/com/salesmanager/shop/filter/XssHttpServletRequestWrapper.java
+++ b/sm-shop/src/main/java/com/salesmanager/shop/filter/XssHttpServletRequestWrapper.java
@@ -1,5 +1,7 @@
 package com.salesmanager.shop.filter;
 
+import java.util.Enumeration;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;
 
@@ -13,18 +15,17 @@
 public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper {
 
 	public XssHttpServletRequestWrapper(HttpServletRequest request) {
-		super(request);
+		super(request);	
+		
 	}
 	
 
 	 
 	 @Override
 	    public String getHeader(String name) {
-	        //logger.info("Ineader .. parameter .......");
 	        String value = super.getHeader(name);
 	        if (value == null)
 	            return null;
-	        //logger.info("Ineader RequestWrapper ........... value ....");
 	        return cleanXSS(value);
 	    }
 	 
diff --git a/sm-shop/src/main/java/com/salesmanager/shop/store/controller/category/ShoppingCategoryController.java b/sm-shop/src/main/java/com/salesmanager/shop/store/controller/category/ShoppingCategoryController.java
index 6e1b4f284d..3a61d2f345 100755
--- a/sm-shop/src/main/java/com/salesmanager/shop/store/controller/category/ShoppingCategoryController.java
+++ b/sm-shop/src/main/java/com/salesmanager/shop/store/controller/category/ShoppingCategoryController.java
@@ -23,6 +23,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.util.HtmlUtils;
 
 import com.salesmanager.core.business.services.catalog.category.CategoryService;
 import com.salesmanager.core.business.services.catalog.product.PricingService;
@@ -112,9 +113,7 @@ public class ShoppingCategoryController {
 	 */
 	@RequestMapping("/shop/category/{friendlyUrl}.html/ref={ref}")
 	public String displayCategoryWithReference(@PathVariable final String friendlyUrl, @PathVariable final String ref, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {
-		
-		
-		
+
 		return this.displayCategory(friendlyUrl,ref,model,request,response,locale);
 	}
 	
@@ -141,7 +140,11 @@ private String displayCategory(final String friendlyUrl, final String ref, Model
 		MerchantStore store = (MerchantStore)request.getAttribute(Constants.MERCHANT_STORE);
 		
 		//set ref as request attribute
-		request.setAttribute("ref", ref);
+		String encoded = HtmlUtils.htmlEscape(ref);
+		if(!encoded.equals(ref)) {//possible xss
+			throw new Exception("Wrong input");
+		}
+		request.setAttribute("ref", encoded);
 
 		//get category
 		Category category = categoryService.getBySeUrl(store, friendlyUrl);
