diff --git a/changelog/_unreleased/2021-07-29-improve-file-download.md b/changelog/_unreleased/2021-07-29-improve-file-download.md
new file mode 100644
index 00000000000..28e059f38ac
--- /dev/null
+++ b/changelog/_unreleased/2021-07-29-improve-file-download.md
@@ -0,0 +1,9 @@
+---
+title: Improve file download
+issue: NEXT-15675
+---
+# Administration
+* Replaced method `getDownloadUrl` with `openDownload` in components:
+    - `sw-import-export-activity`
+    - `sw-import-export-activity-detail-modal`
+    - `sw-import-export-progress`
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/index.js b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/index.js
index a97039433e5..8320885f8b4 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/index.js
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/index.js
@@ -42,8 +42,17 @@ Shopware.Component.register('sw-import-export-activity-detail-modal', {
             return format.fileSize(size);
         },
 
-        getDownloadUrl(file) {
-            return this.importExport.getDownloadUrl(file.id, file.accessToken);
+        /**
+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead
+         */
+        getDownloadUrl() {
+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');
+
+            return '';
+        },
+
+        async openDownload(id) {
+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');
         },
 
         getStateLabel(state) {
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/sw-import-export-activity-detail-modal.html.twig b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/sw-import-export-activity-detail-modal.html.twig
index 9ca39966496..ebd7e4df30a 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/sw-import-export-activity-detail-modal.html.twig
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/sw-import-export-activity-detail-modal.html.twig
@@ -84,7 +84,7 @@
                 variant="ghost"
                 class="sw-import-export-activity-detail-modal__download-failed"
                 size="small"
-                :link="getDownloadUrl(logEntity.invalidRecordsLog.file)"
+                @click="openDownload(logEntity.invalidRecordsLog.file)"
             >
                 {{ $tc('sw-import-export.activity.detail.labelDownloadInvalidFile') }}
             </sw-button>
@@ -107,8 +107,8 @@
                 </template>
                 {% block sw_import_export_edit_profile_modal_invalid_records_download %}
                 <a
-                    :href="getDownloadUrl(logEntity.file)"
                     class="sw-import-export-activity-detail-modal__download"
+                    @click="openDownload(logEntity.file)"
                 >
                     {{ $tc('sw-import-export.activity.detail.labelDownloadFile') }}
                 </a>
@@ -122,7 +122,7 @@
             variant="ghost"
             class="sw-import-export-activity-detail-modal__download-button"
             size="small"
-            :link="getDownloadUrl(logEntity.file)"
+            @click="openDownload(logEntity.file)"
         >
             {{ $tc('sw-import-export.activity.detail.labelDownloadFile') }}
         </sw-button>
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/index.js b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/index.js
index 4fc956210ec..bedbfaf2f69 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/index.js
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/index.js
@@ -158,8 +158,17 @@ Shopware.Component.register('sw-import-export-activity', {
             this.selectedLog = null;
         },
 
-        getDownloadUrl(id, accessToken) {
-            return this.importExport.getDownloadUrl(id, accessToken);
+        /**
+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead
+         */
+        getDownloadUrl() {
+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');
+
+            return '';
+        },
+
+        async openDownload(id) {
+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');
         },
 
         saveSelectedProfile() {
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig
index 9cbd6694fa4..4eadd2a7c19 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig
@@ -80,9 +80,8 @@
             {% endblock %}
             {% block sw_import_export_activity_listing_actions_download_file %}
             <a
-                class="sw-import-export-activity__download-action sw-external-link"
-                :href="getDownloadUrl(item.fileId, item.file.accessToken)"
-                target="_blank"
+                class="sw-import-export-activity__download-action"
+                @click="openDownload(item.fileId)"
             >
                 <sw-context-menu-item>
                     {{ $tc('sw-import-export.activity.contextMenu.downloadFile') }}
@@ -97,9 +96,8 @@
             {% block sw_import_export_activity_listing_actions_download_invalid %}
             <template v-if="item.invalidRecordsLog">
                 <a
-                    class="sw-import-export-activity__download-action sw-external-link"
-                    :href="getDownloadUrl(item.invalidRecordsLog.fileId, item.invalidRecordsLog.file.accessToken)"
-                    target="_blank"
+                    class="sw-import-export-activity__download-action"
+                    @click="openDownload(item.invalidRecordsLog.fileId)"
                 >
                     <sw-context-menu-item>
                         {{ $tc('sw-import-export.activity.contextMenu.downloadInvalidFile') }}
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/index.js b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/index.js
index f2862dc71ff..d34dd98eae0 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/index.js
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/index.js
@@ -131,8 +131,17 @@ Shopware.Component.register('sw-import-export-progress', {
     },
 
     methods: {
-        getDownloadUrl(id, accessToken) {
-            return this.importExport.getDownloadUrl(id, accessToken);
+        /**
+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead
+         */
+        getDownloadUrl() {
+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');
+
+            return '';
+        },
+
+        async openDownload(id) {
+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');
         },
 
         onShowLog(item) {
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/sw-import-export-progress.html.twig b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/sw-import-export-progress.html.twig
index 15eb3066b01..dc0e640aff3 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/sw-import-export-progress.html.twig
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/sw-import-export-progress.html.twig
@@ -110,10 +110,7 @@
                         <sw-button variant="primary"
                                    size="small"
                                    class="sw-import-export-progress__stats-list-failure-download"
-                                   :link="getDownloadUrl(
-                                                       logEntry.invalidRecordsLog.file.id,
-                                                       logEntry.invalidRecordsLog.file.accessToken
-                                                        )">
+                                   @click="openDownload(logEntry.invalidRecordsLog.file.id)">
                             {{  $tc('sw-import-export.progress.downloadFailedLabel')  }}
                         </sw-button>
                     </template>
@@ -125,7 +122,7 @@
                 variant="primary"
                 class="sw-import-export-progress__download-action"
                 size="small"
-                :link="getDownloadUrl(logEntry.file.id, logEntry.file.accessToken)"
+                @click="openDownload(logEntry.file.id)"
             >
                 {{ $tc('sw-import-export.progress.downloadFileLabel') }}
             </sw-button>
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/service/importExport.service.js b/src/Administration/Resources/app/administration/src/module/sw-import-export/service/importExport.service.js
index 29f7871a8dc..736c57a4e80 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/service/importExport.service.js
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/service/importExport.service.js
@@ -36,12 +36,17 @@ export default class ImportExportService extends ApiService {
      * Download the export file
      *
      * @param fileId {Entity} File entity
-     * @param accessToken
      * @returns {string}
      */
-    getDownloadUrl(fileId, accessToken) {
+    async getDownloadUrl(fileId) {
+        const accessTokenResponse = await this.httpClient.post(
+            `/_action/import-export/file/prepare-download/${fileId}`,
+            {},
+            { headers: this.getBasicHeaders() },
+        );
+
         return `${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/` +
-            `file/download?fileId=${fileId}&accessToken=${accessToken}`;
+            `file/download?fileId=${fileId}&accessToken=${accessTokenResponse.data.accessToken}`;
     }
 
     /**
diff --git a/src/Administration/Resources/app/administration/src/module/sw-import-export/view/sw-import-export-view-profiles/sw-import-export-view-profiles.html.twig b/src/Administration/Resources/app/administration/src/module/sw-import-export/view/sw-import-export-view-profiles/sw-import-export-view-profiles.html.twig
index 3474749c7d6..f5fe8e3df6e 100644
--- a/src/Administration/Resources/app/administration/src/module/sw-import-export/view/sw-import-export-view-profiles/sw-import-export-view-profiles.html.twig
+++ b/src/Administration/Resources/app/administration/src/module/sw-import-export/view/sw-import-export-view-profiles/sw-import-export-view-profiles.html.twig
@@ -20,10 +20,10 @@
 
             {% block sw_import_export_view_profile_profiles_toolbar_add_new_profile %}
             <sw-button
+                v-tooltip="createTooltip"
                 class="sw-import-export-view-profiles__create-action"
                 variant="ghost"
                 :disabled="isLoading || isNotSystemLanguage"
-                v-tooltip="createTooltip"
                 size="small"
                 @click="onAddNewProfile"
             >
diff --git a/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php b/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php
index 2cb8039df4b..ced698a04e1 100644
--- a/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php
+++ b/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php
@@ -41,7 +41,7 @@ protected function defineFields(): FieldCollection
             (new DateTimeField('expire_date', 'expireDate'))->addFlags(new Required()),
             new IntField('size', 'size'),
             new OneToOneAssociationField('log', 'id', 'file_id', ImportExportLogDefinition::class, false),
-            (new StringField('access_token', 'accessToken'))->addFlags(new Required()),
+            new StringField('access_token', 'accessToken'),
         ]);
     }
 }
diff --git a/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileEntity.php b/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileEntity.php
index b258f8cf3fa..d8986054e35 100644
--- a/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileEntity.php
+++ b/src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileEntity.php
@@ -37,7 +37,7 @@ class ImportExportFileEntity extends Entity
     protected $log;
 
     /**
-     * @var string
+     * @var string|null
      */
     protected $accessToken;
 
@@ -91,12 +91,12 @@ public function setLog(ImportExportLogEntity $log): void
         $this->log = $log;
     }
 
-    public function getAccessToken(): string
+    public function getAccessToken(): ?string
     {
         return $this->accessToken;
     }
 
-    public function setAccessToken(string $accessToken): void
+    public function setAccessToken(?string $accessToken): void
     {
         $this->accessToken = $accessToken;
     }
diff --git a/src/Core/Content/ImportExport/Controller/ImportExportActionController.php b/src/Core/Content/ImportExport/Controller/ImportExportActionController.php
index 8c72edd993e..3a8fc5bbed5 100644
--- a/src/Core/Content/ImportExport/Controller/ImportExportActionController.php
+++ b/src/Core/Content/ImportExport/Controller/ImportExportActionController.php
@@ -154,6 +154,17 @@ public function process(Request $request, Context $context): JsonResponse
         return new JsonResponse(['progress' => $progress->jsonSerialize()]);
     }
 
+    /**
+     * @Since("6.4.3.1")
+     * @Route("/api/_action/import-export/file/prepare-download/{fileId}", name="api.action.import_export.file.prepare-download", methods={"POST"})
+     */
+    public function prepareDownload(string $fileId, Context $context): Response
+    {
+        $token = $this->downloadService->regenerateToken($context, $fileId);
+
+        return new JsonResponse(['accessToken' => $token]);
+    }
+
     /**
      * @Since("6.0.0.0")
      * @Route("/api/_action/import-export/file/download", name="api.action.import_export.file.download", defaults={"auth_required"=false}, methods={"GET"})
diff --git a/src/Core/Content/ImportExport/Service/DownloadService.php b/src/Core/Content/ImportExport/Service/DownloadService.php
index 30ea4643a97..d5f3bd41292 100644
--- a/src/Core/Content/ImportExport/Service/DownloadService.php
+++ b/src/Core/Content/ImportExport/Service/DownloadService.php
@@ -18,15 +18,9 @@
  */
 class DownloadService
 {
-    /**
-     * @var FilesystemInterface
-     */
-    private $filesystem;
+    private FilesystemInterface $filesystem;
 
-    /**
-     * @var EntityRepositoryInterface
-     */
-    private $fileRepository;
+    private EntityRepositoryInterface $fileRepository;
 
     public function __construct(FilesystemInterface $filesystem, EntityRepositoryInterface $fileRepository)
     {
@@ -34,21 +28,33 @@ public function __construct(FilesystemInterface $filesystem, EntityRepositoryInt
         $this->fileRepository = $fileRepository;
     }
 
-    public function regenerateToken(Context $context, string $fileId): void
+    public function regenerateToken(Context $context, string $fileId): string
     {
+        $token = ImportExportFileEntity::generateAccessToken();
+
         $this->fileRepository->update(
-            [['id' => $fileId, 'accessToken' => ImportExportFileEntity::generateAccessToken()]],
+            [['id' => $fileId, 'accessToken' => $token]],
             $context
         );
+
+        return $token;
     }
 
     public function createFileResponse(Context $context, string $fileId, string $accessToken): Response
     {
         $entity = $this->findFile($context, $fileId);
-        if ($entity->getAccessToken() !== $accessToken) {
+
+        $fileAccessToken = (string) $entity->getAccessToken();
+
+        if ($fileAccessToken === '' || $entity->getAccessToken() !== $accessToken || !$this->isModifiedRecently($entity)) {
             throw new InvalidFileAccessTokenException();
         }
 
+        $this->fileRepository->update(
+            [['id' => $fileId, 'accessToken' => null]],
+            $context
+        );
+
         $headers = [
             'Content-Disposition' => HeaderUtils::makeDisposition(
                 'attachment',
@@ -78,4 +84,15 @@ private function findFile(Context $context, string $fileId): ImportExportFileEnt
 
         return $entity;
     }
+
+    private function isModifiedRecently(ImportExportFileEntity $entity): bool
+    {
+        if ($entity->getUpdatedAt() === null) {
+            return false;
+        }
+
+        $diff = time() - $entity->getUpdatedAt()->getTimestamp();
+
+        return $diff < 300;
+    }
 }
diff --git a/src/Core/Content/ImportExport/Service/ImportExportService.php b/src/Core/Content/ImportExport/Service/ImportExportService.php
index c9e7e60ffc9..25dfb441321 100644
--- a/src/Core/Content/ImportExport/Service/ImportExportService.php
+++ b/src/Core/Content/ImportExport/Service/ImportExportService.php
@@ -219,7 +219,7 @@ private function storeFile(Context $context, \DateTimeInterface $expireDate, ?st
             'path' => $path,
             'size' => $this->filesystem->getSize($path),
             'expireDate' => $expireDate,
-            'accessToken' => ImportExportFileEntity::generateAccessToken(),
+            'accessToken' => null,
         ];
 
         $this->fileRepository->create([$fileData], $context);
diff --git a/src/Core/Content/Test/ImportExport/Service/DownloadServiceTest.php b/src/Core/Content/Test/ImportExport/Service/DownloadServiceTest.php
index 002860605a9..0440ec7d789 100644
--- a/src/Core/Content/Test/ImportExport/Service/DownloadServiceTest.php
+++ b/src/Core/Content/Test/ImportExport/Service/DownloadServiceTest.php
@@ -2,8 +2,11 @@
 
 namespace Shopware\Core\Content\Test\ImportExport\Service;
 
+use Doctrine\DBAL\Connection;
 use PHPUnit\Framework\TestCase;
+use Shopware\Core\Content\ImportExport\Exception\InvalidFileAccessTokenException;
 use Shopware\Core\Content\ImportExport\Service\DownloadService;
+use Shopware\Core\Defaults;
 use Shopware\Core\Framework\Context;
 use Shopware\Core\Framework\Test\TestCaseBase\IntegrationTestBehaviour;
 use Shopware\Core\Framework\Uuid\Uuid;
@@ -24,18 +27,82 @@ public function testUtf8Filename(): void
             'originalName' => $asciiName . ' öäüß',
             'path' => 'test.csv',
             'expireDate' => new \DateTime(),
-            'accessToken' => 'token',
         ];
         $filesystem->put($fileData['path'], $fileData['originalName']);
         $context = Context::createDefaultContext();
         $fileRepository->create([$fileData], $context);
 
         $downloadService = new DownloadService($filesystem, $fileRepository);
+        $accessToken = $downloadService->regenerateToken($context, $fileData['id']);
 
-        $response = $downloadService->createFileResponse($context, $fileData['id'], 'token');
+        $response = $downloadService->createFileResponse($context, $fileData['id'], $accessToken);
         static::assertStringContainsString($asciiName, $response->headers->get('Content-Disposition'));
 
         $response->sendContent();
         $this->expectOutputString($fileData['originalName']);
     }
+
+    public function testDownloadWithInvalidAccessToken(): void
+    {
+        $filesystem = $this->getContainer()->get('shopware.filesystem.private');
+        $fileRepository = $this->getContainer()->get('import_export_file.repository');
+
+        $asciiName = 'Name with non-ascii chars';
+
+        $fileData = [
+            'id' => Uuid::randomHex(),
+            'originalName' => $asciiName . ' öäüß',
+            'path' => 'test.csv',
+            'expireDate' => new \DateTime(),
+            'accessToken' => 'token',
+        ];
+        $filesystem->put($fileData['path'], $fileData['originalName']);
+        $context = Context::createDefaultContext();
+        $fileRepository->create([$fileData], $context);
+
+        $downloadService = new DownloadService($filesystem, $fileRepository);
+
+        static::expectException(InvalidFileAccessTokenException::class);
+
+        $downloadService->createFileResponse($context, $fileData['id'], 'token');
+    }
+
+    public function testDownloadWithExpiredAccessToken(): void
+    {
+        $filesystem = $this->getContainer()->get('shopware.filesystem.private');
+        $fileRepository = $this->getContainer()->get('import_export_file.repository');
+
+        $asciiName = 'Name with non-ascii chars';
+
+        $fileData = [
+            'id' => Uuid::randomHex(),
+            'originalName' => $asciiName . ' öäüß',
+            'path' => 'test.csv',
+            'expireDate' => new \DateTime(),
+            'accessToken' => 'token',
+        ];
+        $filesystem->put($fileData['path'], $fileData['originalName']);
+        $context = Context::createDefaultContext();
+        $fileRepository->create([$fileData], $context);
+
+        $downloadService = new DownloadService($filesystem, $fileRepository);
+
+        $validToken = $downloadService->regenerateToken($context, $fileData['id']);
+
+        // Expire it
+        $connection = $this->getContainer()->get(Connection::class);
+        $connection->update(
+            'import_export_file',
+            [
+                'updated_at' => date(Defaults::STORAGE_DATE_TIME_FORMAT, strtotime('-6minutes')),
+            ],
+            [
+                'id' => Uuid::fromHexToBytes($fileData['id']),
+            ]
+        );
+
+        static::expectException(InvalidFileAccessTokenException::class);
+
+        $downloadService->createFileResponse($context, $fileData['id'], $validToken);
+    }
 }
diff --git a/src/Core/Migration/Migration1627540693MakeAccessTokenNullable.php b/src/Core/Migration/Migration1627540693MakeAccessTokenNullable.php
new file mode 100644
index 00000000000..c7a8e8b7bfa
--- /dev/null
+++ b/src/Core/Migration/Migration1627540693MakeAccessTokenNullable.php
@@ -0,0 +1,10 @@
+<?php declare(strict_types=1);
+
+namespace Shopware\Core\Migration;
+
+/**
+ * @deprecated tag:v6.5.0 - Will be deleted. Migrations are now namespaced by major version
+ */
+class Migration1627540693MakeAccessTokenNullable extends \Shopware\Core\Migration\V6_4\Migration1627540693MakeAccessTokenNullable
+{
+}
diff --git a/src/Core/Migration/Test/Migration1627540693MakeAccessTokenNullableTest.php b/src/Core/Migration/Test/Migration1627540693MakeAccessTokenNullableTest.php
new file mode 100644
index 00000000000..9fdb3d7d283
--- /dev/null
+++ b/src/Core/Migration/Test/Migration1627540693MakeAccessTokenNullableTest.php
@@ -0,0 +1,37 @@
+<?php declare(strict_types=1);
+
+namespace Shopware\Core\Migration\Test;
+
+use Doctrine\DBAL\Connection;
+use PHPUnit\Framework\TestCase;
+use Shopware\Core\Framework\Test\TestCaseBase\KernelTestBehaviour;
+use Shopware\Core\Migration\V6_4\Migration1627540693MakeAccessTokenNullable;
+
+class Migration1627540693MakeAccessTokenNullableTest extends TestCase
+{
+    use KernelTestBehaviour;
+
+    public function testMigrate(): void
+    {
+        $connection = $this->getContainer()->get(Connection::class);
+
+        // Make it not nullable
+        $connection->executeStatement('ALTER TABLE `import_export_file` CHANGE `access_token` `access_token` varchar(255) COLLATE \'utf8mb4_unicode_ci\' NOT NULL AFTER `created_at`;');
+
+        $m = new Migration1627540693MakeAccessTokenNullable();
+        $m->update($connection);
+
+        $columns = $connection->getSchemaManager()->listTableColumns('import_export_file');
+
+        $foundColumn = false;
+        foreach ($columns as $column) {
+            if ($column->getName() === 'access_token') {
+                $foundColumn = true;
+
+                static::assertFalse($column->getNotnull());
+            }
+        }
+
+        static::assertTrue($foundColumn, 'Could not find column access_token');
+    }
+}
diff --git a/src/Core/Migration/V6_4/Migration1627540693MakeAccessTokenNullable.php b/src/Core/Migration/V6_4/Migration1627540693MakeAccessTokenNullable.php
new file mode 100644
index 00000000000..1900a339512
--- /dev/null
+++ b/src/Core/Migration/V6_4/Migration1627540693MakeAccessTokenNullable.php
@@ -0,0 +1,23 @@
+<?php declare(strict_types=1);
+
+namespace Shopware\Core\Migration\V6_4;
+
+use Doctrine\DBAL\Connection;
+use Shopware\Core\Framework\Migration\MigrationStep;
+
+class Migration1627540693MakeAccessTokenNullable extends MigrationStep
+{
+    public function getCreationTimestamp(): int
+    {
+        return 1627540693;
+    }
+
+    public function update(Connection $connection): void
+    {
+        $connection->executeStatement('ALTER TABLE `import_export_file` CHANGE `access_token` `access_token` varchar(255) COLLATE \'utf8mb4_unicode_ci\' NULL AFTER `created_at`;');
+    }
+
+    public function updateDestructive(Connection $connection): void
+    {
+    }
+}
