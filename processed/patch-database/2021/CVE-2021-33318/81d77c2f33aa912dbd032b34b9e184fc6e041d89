diff --git a/IpMatcher/IpMatcher.csproj b/IpMatcher/IpMatcher.csproj
index fe4d14a..2dbb5d9 100644
--- a/IpMatcher/IpMatcher.csproj
+++ b/IpMatcher/IpMatcher.csproj
@@ -3,7 +3,7 @@
   <PropertyGroup>
     <TargetFrameworks>netstandard2.0;netstandard2.1;netcoreapp3.1;net452;net5.0</TargetFrameworks>
     <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
-    <Version>1.0.4.1</Version>
+    <Version>1.0.4.2</Version>
     <Authors>Joel Christner</Authors>
     <Description>Library for maintaining a match list of IP addresses and networks and comparing inputs to see if a match exists.</Description>
     <Copyright>(c)2021 Joel Christner</Copyright>
@@ -11,13 +11,17 @@
     <RepositoryUrl>https://github.com/jchristn/ipmatcher</RepositoryUrl>
     <RepositoryType>Github</RepositoryType>
     <PackageLicenseUrl></PackageLicenseUrl>
-    <PackageReleaseNotes>XML documentation</PackageReleaseNotes>
+    <PackageReleaseNotes>Fix for SICK-2021-060</PackageReleaseNotes>
     <PackageTags>ip address match netmask network mask subnet cidr</PackageTags>
     <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2.0|AnyCPU'">
-    <DocumentationFile>C:\Code\Misc\IpMatcher\IpMatcher\IpMatcher.xml</DocumentationFile>
+    <DocumentationFile>IpMatcher.xml</DocumentationFile>
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard2.0|AnyCPU'">
+    <DocumentationFile>IpMatcher.xml</DocumentationFile>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/IpMatcher/IpMatcher.xml b/IpMatcher/IpMatcher.xml
index 736135f..64163d2 100644
--- a/IpMatcher/IpMatcher.xml
+++ b/IpMatcher/IpMatcher.xml
@@ -9,6 +9,11 @@
             IP address matcher.
             </summary>
         </member>
+        <member name="F:IpMatcher.Matcher.Logger">
+            <summary>
+            Method to invoke to send log messages.
+            </summary>
+        </member>
         <member name="M:IpMatcher.Matcher.#ctor">
             <summary>
             Instantiate the IP address matcher.
@@ -42,5 +47,11 @@
             <param name="ip">The IP address, i.e. 192.168.1.34.</param>
             <returns>True if a match is found.</returns>
         </member>
+        <member name="M:IpMatcher.Matcher.All">
+            <summary>
+            Retrieve all stored addresses.
+            </summary>
+            <returns></returns>
+        </member>
     </members>
 </doc>
diff --git a/IpMatcher/Matcher.cs b/IpMatcher/Matcher.cs
index 4f07034..e33d145 100644
--- a/IpMatcher/Matcher.cs
+++ b/IpMatcher/Matcher.cs
@@ -59,6 +59,9 @@ public void Add(string ip, string netmask)
             if (String.IsNullOrEmpty(ip)) throw new ArgumentNullException(nameof(ip));
             if (String.IsNullOrEmpty(netmask)) throw new ArgumentNullException(nameof(netmask));
 
+            ip = IPAddress.Parse(ip).ToString();
+            netmask = IPAddress.Parse(netmask).ToString();
+
             string baseAddress = GetBaseIpAddress(ip, netmask);
             IPAddress parsed = IPAddress.Parse(baseAddress);
             if (Exists(baseAddress, netmask)) return;
@@ -83,6 +86,9 @@ public bool Exists(string ip, string netmask)
             if (String.IsNullOrEmpty(ip)) throw new ArgumentNullException(nameof(ip));
             if (String.IsNullOrEmpty(netmask)) throw new ArgumentNullException(nameof(netmask));
 
+            ip = IPAddress.Parse(ip).ToString();
+            netmask = IPAddress.Parse(netmask).ToString();
+
             lock (_CacheLock)
             {
                 if (_Cache.ContainsKey(ip))
@@ -116,6 +122,8 @@ public void Remove(string ip)
         {
             if (String.IsNullOrEmpty(ip)) throw new ArgumentNullException(nameof(ip));
 
+            ip = IPAddress.Parse(ip).ToString();
+
             lock (_CacheLock)
             {
                 _Cache = _Cache.Where(d => !d.Key.Equals(ip)).ToDictionary(d => d.Key, d => d.Value);
@@ -140,6 +148,8 @@ public bool MatchExists(string ip)
         {
             if (String.IsNullOrEmpty(ip)) throw new ArgumentNullException(nameof(ip));
 
+            ip = IPAddress.Parse(ip).ToString();
+
             IPAddress parsed = IPAddress.Parse(ip);
 
             lock (_CacheLock)
