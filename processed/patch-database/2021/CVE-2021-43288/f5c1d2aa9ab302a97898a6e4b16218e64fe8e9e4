diff --git a/common/build.gradle b/common/build.gradle
index 9a5e1c8f1ca..a3f736e2306 100644
--- a/common/build.gradle
+++ b/common/build.gradle
@@ -26,6 +26,7 @@ dependencies {
   api project.deps.dom4j
   api project.deps.apacheHttpMime
   api project.deps.commonsCollections4
+  api project.deps.commonsText
   api project.deps.springTx
   implementation project.deps.jodaTime
   annotationProcessor project.deps.lombok
diff --git a/common/src/main/java/com/thoughtworks/go/domain/DirectoryEntries.java b/common/src/main/java/com/thoughtworks/go/domain/DirectoryEntries.java
index d366be99ce1..708af16db19 100644
--- a/common/src/main/java/com/thoughtworks/go/domain/DirectoryEntries.java
+++ b/common/src/main/java/com/thoughtworks/go/domain/DirectoryEntries.java
@@ -33,7 +33,7 @@ public class DirectoryEntries extends ArrayList<DirectoryEntry> implements HtmlR
     @Override
     public void render(HtmlRenderer renderer) {
         if (isArtifactsDeleted || isEmpty()) {
-            HtmlElement element = p().content("Artifacts for this job instance are unavailable as they may have been <a href='" +
+            HtmlElement element = p().unsafecontent("Artifacts for this job instance are unavailable as they may have been <a href='" +
                     CurrentGoCDVersion.docsUrl("configuration/delete_artifacts.html") +
                     "' target='blank'>purged by Go</a> or deleted externally. "
                     + "Re-run the stage or job to generate them again.");
diff --git a/common/src/main/java/com/thoughtworks/go/domain/FileDirectoryEntry.java b/common/src/main/java/com/thoughtworks/go/domain/FileDirectoryEntry.java
index 93ff06a187d..54ed5d96525 100644
--- a/common/src/main/java/com/thoughtworks/go/domain/FileDirectoryEntry.java
+++ b/common/src/main/java/com/thoughtworks/go/domain/FileDirectoryEntry.java
@@ -30,7 +30,7 @@ protected HtmlRenderable htmlBody() {
         return HtmlElement.li().content(
             HtmlElement.span(HtmlAttribute.cssClass("artifact")).content(
                 HtmlElement.a(HtmlAttribute.href(getUrl()))
-                        .content(getFileName())
+                        .safecontent(getFileName())
             )
         );
 
diff --git a/common/src/main/java/com/thoughtworks/go/domain/FolderDirectoryEntry.java b/common/src/main/java/com/thoughtworks/go/domain/FolderDirectoryEntry.java
index ac1dc30e7d5..7fffa35d80a 100644
--- a/common/src/main/java/com/thoughtworks/go/domain/FolderDirectoryEntry.java
+++ b/common/src/main/java/com/thoughtworks/go/domain/FolderDirectoryEntry.java
@@ -41,7 +41,7 @@ protected HtmlRenderable htmlBody() {
                 HtmlElement.div(cssClass("dir-container")).content(
                     HtmlElement.span(cssClass("directory")).content(
                         HtmlElement.a(onclick("BuildDetail.tree_navigator(this)"))
-                                .content(getFileName())
+                                .safecontent(getFileName())
                     )
                 ),
                 HtmlElement.div(cssClass("subdir-container"), style("display:none"))
diff --git a/common/src/main/java/com/thoughtworks/go/server/presentation/html/HtmlElement.java b/common/src/main/java/com/thoughtworks/go/server/presentation/html/HtmlElement.java
index 876d00982c0..d55fb633732 100644
--- a/common/src/main/java/com/thoughtworks/go/server/presentation/html/HtmlElement.java
+++ b/common/src/main/java/com/thoughtworks/go/server/presentation/html/HtmlElement.java
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import com.thoughtworks.go.server.presentation.models.HtmlRenderer;
+import org.apache.commons.text.StringEscapeUtils;
 
 public class HtmlElement implements HtmlRenderable {
     public static HtmlElement div(HtmlAttribute... attributes) { return new HtmlElement("div", attributes); }
@@ -37,10 +38,14 @@ private HtmlElement(String elementName, HtmlAttribute... attributes) {
         this.attributes = attributes;
     }
 
-    public HtmlElement content(String body) {
+    public HtmlElement unsafecontent(String body) {
         return content(new TextElement(body));
     }
 
+    public HtmlElement safecontent(String body) {
+        return content(new TextElement(StringEscapeUtils.escapeHtml4(body)));
+    }
+
     public HtmlElement content(HtmlRenderable... elements) {
         for (HtmlRenderable element : elements) {
             addToBody(element);
@@ -80,5 +85,4 @@ public void render(HtmlRenderer renderer) {
             renderer.append("</" + elementName + ">\n");
         }
     }
-
 }
diff --git a/common/src/test/java/com/thoughtworks/go/domain/FileDirectoryEntryTest.java b/common/src/test/java/com/thoughtworks/go/domain/FileDirectoryEntryTest.java
new file mode 100644
index 00000000000..81ab892eee6
--- /dev/null
+++ b/common/src/test/java/com/thoughtworks/go/domain/FileDirectoryEntryTest.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2021 ThoughtWorks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.thoughtworks.go.domain;
+
+import com.thoughtworks.go.server.presentation.models.HtmlRenderer;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class FileDirectoryEntryTest {
+    @Test
+    void shouldEscapeFilename() {
+        FileDirectoryEntry entry = new FileDirectoryEntry("<div>Hello</div>", "https://www.example.com");
+        HtmlRenderer renderer = new HtmlRenderer("");
+        entry.htmlBody().render(renderer);
+
+        assertTrue(renderer.asString().contains("&lt;div&gt;Hello&lt;/div&gt;"));
+        assertFalse(renderer.asString().contains("<div>Hello</div>"));
+    }
+}
\ No newline at end of file
diff --git a/common/src/test/java/com/thoughtworks/go/domain/FolderDirectoryEntryTest.java b/common/src/test/java/com/thoughtworks/go/domain/FolderDirectoryEntryTest.java
index f109e01c6ee..f11e40a7c7b 100644
--- a/common/src/test/java/com/thoughtworks/go/domain/FolderDirectoryEntryTest.java
+++ b/common/src/test/java/com/thoughtworks/go/domain/FolderDirectoryEntryTest.java
@@ -15,10 +15,11 @@
  */
 package com.thoughtworks.go.domain;
 
+import com.thoughtworks.go.server.presentation.models.HtmlRenderer;
 import org.junit.jupiter.api.Test;
 
-import static org.hamcrest.Matchers.hasItem;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
 
 public class FolderDirectoryEntryTest {
     @Test
@@ -28,4 +29,16 @@ public void shouldAddFile() throws Exception {
         entry.addFile("file", "path");
         assertThat(subDirectory, hasItem(new FileDirectoryEntry("file", "path")));
     }
+
+    @Test
+    public void shouldEscapeFolderName() throws Exception {
+        DirectoryEntries subDirectory = new DirectoryEntries();
+        FolderDirectoryEntry entry = new FolderDirectoryEntry("<div>Hello</div>", "url", subDirectory);
+
+        HtmlRenderer renderer = new HtmlRenderer("");
+        entry.htmlBody().render(renderer);
+
+        assertThat(renderer.asString(), containsString("&lt;div&gt;Hello&lt;/div&gt;"));
+        assertThat(renderer.asString(), not(containsString("<div>Hello</div>")));
+    }
 }
diff --git a/common/src/test/java/com/thoughtworks/go/server/presentation/html/HtmlElementTest.java b/common/src/test/java/com/thoughtworks/go/server/presentation/html/HtmlElementTest.java
new file mode 100644
index 00000000000..c3f5bbe8627
--- /dev/null
+++ b/common/src/test/java/com/thoughtworks/go/server/presentation/html/HtmlElementTest.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2021 ThoughtWorks, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.thoughtworks.go.server.presentation.html;
+
+import com.thoughtworks.go.server.presentation.models.HtmlRenderer;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class HtmlElementTest {
+    @Test
+    void shouldEscapeContent() {
+        HtmlElement element = HtmlElement.span().safecontent("<div>Hello</div>");
+        HtmlRenderer renderer = new HtmlRenderer("");
+
+        element.render(renderer);
+
+        assertEquals("<span>\n&lt;div&gt;Hello&lt;/div&gt;\n</span>\n", renderer.asString());
+    }
+}
\ No newline at end of file
diff --git a/dependencies.gradle b/dependencies.gradle
index ddfd55f57e0..eba22e67b7d 100644
--- a/dependencies.gradle
+++ b/dependencies.gradle
@@ -48,6 +48,7 @@ final Map<String, String> libraries = [
   commonsLang         : 'commons-lang:commons-lang:2.6',
   commonsLang3        : 'org.apache.commons:commons-lang3:3.12.0',
   commonsPool         : 'org.apache.commons:commons-pool2:2.11.1',
+  commonsText         : 'org.apache.commons:commons-text:1.8',
   dbunit              : 'org.dbunit:dbunit:2.7.2',
   dom4j               : 'dom4j:dom4j:1.6.1',
   ehcache             : 'net.sf.ehcache:ehcache:2.10.9.2',
@@ -131,6 +132,7 @@ final Map<String, String> v = [
   commonsLang         : versionOf(libraries.commonsLang),
   commonsLang3        : versionOf(libraries.commonsLang3),
   commonsPool         : versionOf(libraries.commonsPool),
+  commonsText         : versionOf(libraries.commonsText),
   dom4j               : versionOf(libraries.dom4j),
   ehcache             : versionOf(libraries.ehcache),
   felix               : versionOf(libraries.felix),
diff --git a/server/build.gradle b/server/build.gradle
index 19d86780a88..a9ff14709cf 100644
--- a/server/build.gradle
+++ b/server/build.gradle
@@ -817,6 +817,7 @@ task verifyWar(type: VerifyJarTask) {
         "commons-io-${project.versions.commonsIO}.jar",
         "commons-lang-${project.versions.commonsLang}.jar",
         "commons-lang3-${project.versions.commonsLang3}.jar",
+        "commons-text-${project.versions.commonsText}.jar",
         "commons-pool2-${project.versions.commonsPool}.jar",
         "config-api-${project.version}.jar",
         "config-server-${project.version}.jar",
