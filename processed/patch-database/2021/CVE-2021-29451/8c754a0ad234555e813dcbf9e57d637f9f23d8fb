diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1b6acf06fb..befeadadae 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -13,8 +13,9 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).
 - Security.groovy can now have user beans injected with @Autowired.
 
 ### Fixed
-- Backwards compatibility: revert `T extends Serializable` in CRUD actions, introduced in v5.2.0. [#428](https://github.com/ManyDesigns/Portofino/issues/428)
+- Important security vulnerability that may have allowed access with forged tokens.
 - Authentication token refresh after expiration. [#430](https://github.com/ManyDesigns/Portofino/issues/430)
+- Backwards compatibility: revert `T extends Serializable` in CRUD actions, introduced in v5.2.0. [#428](https://github.com/ManyDesigns/Portofino/issues/428)
 
 ## [5.2.0] â€“ 2020-11-30
 
diff --git a/dispatcher/src/main/java/com/manydesigns/portofino/dispatcher/security/jwt/JWTRealm.java b/dispatcher/src/main/java/com/manydesigns/portofino/dispatcher/security/jwt/JWTRealm.java
index 7fd45e3b29..c51a6d6b2e 100644
--- a/dispatcher/src/main/java/com/manydesigns/portofino/dispatcher/security/jwt/JWTRealm.java
+++ b/dispatcher/src/main/java/com/manydesigns/portofino/dispatcher/security/jwt/JWTRealm.java
@@ -1,9 +1,7 @@
 package com.manydesigns.portofino.dispatcher.security.jwt;
 
 import com.manydesigns.portofino.dispatcher.security.RolesPermission;
-import io.jsonwebtoken.Jwt;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.*;
 import io.jsonwebtoken.io.Decoders;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.shiro.authc.AuthenticationException;
@@ -53,9 +51,9 @@ protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)
         String secret = getSecret();
         Key key = new SecretKeySpec(Decoders.BASE64.decode(secret), getSignatureAlgorithm().getJcaName());
         
-        Jwt jwt = Jwts.parser().
+        Jws<Claims> jwt = Jwts.parser().
                 setSigningKey(key).
-                parse((String) token.getPrincipal());
+                parseClaimsJws((String) token.getPrincipal());
         Map<String, Serializable> principal = getPrincipal(jwt);
         return new SimpleAuthenticationInfo(principal, ((String) token.getCredentials()).toCharArray(), getName());
     }
@@ -64,7 +62,7 @@ protected SignatureAlgorithm getSignatureAlgorithm() {
         return SignatureAlgorithm.HS512;
     }
 
-    protected Map<String, Serializable> getPrincipal(Jwt jwt) {
+    protected Map<String, Serializable> getPrincipal(Jws<Claims> jwt) {
         Map<String, Serializable> principal = new HashMap<>();
         principal.put("jwt", (Serializable) jwt.getBody());
         return principal;
diff --git a/portofino-core/src/main/java/com/manydesigns/portofino/shiro/AbstractPortofinoRealm.java b/portofino-core/src/main/java/com/manydesigns/portofino/shiro/AbstractPortofinoRealm.java
index 923cca3d56..0bd777a53a 100644
--- a/portofino-core/src/main/java/com/manydesigns/portofino/shiro/AbstractPortofinoRealm.java
+++ b/portofino-core/src/main/java/com/manydesigns/portofino/shiro/AbstractPortofinoRealm.java
@@ -24,10 +24,7 @@
 import com.manydesigns.elements.reflection.JavaClassAccessor;
 import com.manydesigns.portofino.code.CodeBase;
 import com.manydesigns.portofino.security.SecurityLogic;
-import io.jsonwebtoken.Jwt;
-import io.jsonwebtoken.JwtException;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.*;
 import io.jsonwebtoken.io.Decoders;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.shiro.authc.AuthenticationException;
@@ -100,9 +97,9 @@ public boolean supports(AuthenticationToken token) {
 
     public AuthenticationInfo loadAuthenticationInfo(JSONWebToken token) {
         Key key = getJWTKey();
-        Jwt jwt;
+        Jws<Claims> jwt;
         try {
-            jwt = Jwts.parser().setSigningKey(key).parse(token.getPrincipal());
+            jwt = Jwts.parser().setSigningKey(key).parseClaimsJws(token.getPrincipal());
         } catch (JwtException e) {
             throw new AuthenticationException(e);
         }
@@ -111,8 +108,8 @@ public AuthenticationInfo loadAuthenticationInfo(JSONWebToken token) {
         return new SimpleAuthenticationInfo(principal, credentials, getName());
     }
 
-    protected Object extractPrincipalFromWebToken(Jwt jwt) {
-        Map body = (Map) jwt.getBody();
+    protected Object extractPrincipalFromWebToken(Jws<Claims> jwt) {
+        Map<String, Object> body = jwt.getBody();
         String base64Principal = (String) body.get("serialized-principal");
         byte[] serializedPrincipal = Base64.decode(base64Principal);
         Object principal;
