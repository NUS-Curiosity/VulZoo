diff --git a/src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java b/src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java
index c166727..a3e985e 100644
--- a/src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java
+++ b/src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java
@@ -18,7 +18,6 @@
 public class AdminLoginController extends HttpServlet {
 	private static final long serialVersionUID = 1L;
 	AdminDao adminDao = new AdminDaoImpl();
-	SHA256 sha = new SHA256();
 
 	protected void doGet(HttpServletRequest request, HttpServletResponse response)
 			throws ServletException, IOException {
@@ -36,7 +35,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 
 		// to get values from the login page
 		String userName = request.getParameter("aname");
-		String password = sha.getSHA(request.getParameter("pass"));
+		String password = request.getParameter("pass");
 		// String password = request.getParameter("pass");
 		String rememberMe = request.getParameter("remember-me");
 
@@ -72,4 +71,4 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 			rd.include(request, response);
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/bijay/onlinevotingsystem/controller/SHA256.java b/src/com/bijay/onlinevotingsystem/controller/SHA256.java
index 48cab56..66fe987 100644
--- a/src/com/bijay/onlinevotingsystem/controller/SHA256.java
+++ b/src/com/bijay/onlinevotingsystem/controller/SHA256.java
@@ -1,32 +1,21 @@
 package com.bijay.onlinevotingsystem.controller;
 
-import java.math.BigInteger;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.util.Base64;
 
 public class SHA256 {
+	private static final String SSHA_PREFIX = "{SSHA}";
+	private static final int SSHA_256_LENGTH = 32; // SHA-256 is 32 bytes long
+	private static final int SALT_LENGTH = 16; // Use a 16 byte salt
 
 	public String getSHA(String password) {
-
 		try {
-			// Static getInstance method is called with hashing SHA
-			MessageDigest md = MessageDigest.getInstance("SHA-256");
-
-			// digest() method called
-			// to calculate message digest of an input
-			// and return array of byte
-			byte[] messageDigest = md.digest(password.getBytes());
-
-			// Convert byte array into signum representation
-			BigInteger no = new BigInteger(1, messageDigest);
-
-			// Convert message digest into hex value
-			String hashPass = no.toString(16);
-
-			while (hashPass.length() < 32) {
-				hashPass = "0" + hashPass;
-			}
-			return hashPass;
+			byte[] salt = getSalt();
+			String cipher = getCipher(password, salt);
+			
+			return cipher;
 
 			// For specifying wrong message digest algorithms
 		} catch (NoSuchAlgorithmException e) {
@@ -34,4 +23,54 @@ public String getSHA(String password) {
 			return null;
 		}
 	}
+
+	public static boolean validatePassword(String password, String cipherText) {
+		boolean isValid = false;
+		try {
+			String cipher = cipherText.substring(SSHA_PREFIX.length());
+		
+			byte[] cipherBytes = Base64.getDecoder().decode(cipher.getBytes());
+			byte[] salt = new byte[SALT_LENGTH];
+			System.arraycopy(cipherBytes, SSHA_256_LENGTH, salt, 0, SALT_LENGTH);
+
+			String result = getCipher(password, salt);
+			//Compare the newly hashed password taking the same salt with the input hash
+			isValid = result.equals(cipherText);
+		} catch (NoSuchAlgorithmException e) {
+			e.printStackTrace();
+		}
+		return isValid;
+	}
+	
+	private static byte[] getSalt() throws NoSuchAlgorithmException {
+		SecureRandom random = new SecureRandom();
+		byte[] salt = new byte[SALT_LENGTH];
+		random.nextBytes(salt);
+		return salt;
+	}
+
+	private static String getCipher(String password, byte[] salt) throws NoSuchAlgorithmException {
+		// Static getInstance method is called with hashing SHA
+		MessageDigest md = MessageDigest.getInstance("SHA-256");
+		md.update(salt);
+	
+		byte[] passBytes = password.getBytes();
+		byte[] allBytes = new byte[passBytes.length + SALT_LENGTH];
+		System.arraycopy(passBytes, 0, allBytes, 0, passBytes.length);
+		System.arraycopy(salt, 0, allBytes, passBytes.length, SALT_LENGTH);
+	
+			
+		byte[] cipherBytes = new byte[SSHA_256_LENGTH + SALT_LENGTH];
+			
+		// digest() method called
+		// to calculate message digest of an input
+		// and return array of byte
+		byte[] messageDigest = md.digest(allBytes);
+	
+		System.arraycopy(messageDigest, 0, cipherBytes, 0, SSHA_256_LENGTH);
+		System.arraycopy(salt, 0, cipherBytes, SSHA_256_LENGTH, SALT_LENGTH);
+		
+		String result = SSHA_PREFIX + Base64.getEncoder().encodeToString(cipherBytes);
+		return result;
+	}
 }
diff --git a/src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java b/src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java
index 0db1c9f..400e130 100644
--- a/src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java
+++ b/src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java
@@ -21,7 +21,6 @@
 public class VoterLoginController extends HttpServlet {
 	private static final long serialVersionUID = 1L;
 	VoterDao voterDao = new VoterDaoImpl();
-	SHA256 sha = new SHA256();
 
 	private String host;
 	private String port;
@@ -76,7 +75,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 		otp = r.nextInt(max - min) + min;
 
 		String userName = request.getParameter("uname");
-		String password = sha.getSHA(request.getParameter("pass"));
+		String password = request.getParameter("pass");
 		String vemail = request.getParameter("vmail");
 
 		String recipient = vemail;
@@ -119,4 +118,4 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 			 */
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java b/src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java
index a5747cb..15f23b9 100644
--- a/src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java
+++ b/src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java
@@ -6,6 +6,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.crypto.Cipher;
+
+import com.bijay.onlinevotingsystem.controller.SHA256;
 import com.bijay.onlinevotingsystem.dto.Admin;
 import com.bijay.onlinevotingsystem.util.DbUtil;
 
@@ -98,14 +101,14 @@ public void updateAdminInfo(Admin admin) {
 	@Override
 	public boolean loginValidate(String userName, String password) {
 
-		String sql = "select * from admin_table where admin_name=? and password=?";
+		String sql = "select * from admin_table where admin_name=?";
 		try {
 			ps=DbUtil.getConnection().prepareStatement(sql);
 			ps.setString(1, userName);
-			ps.setString(2,password);
 			ResultSet rs =ps.executeQuery();
 			if (rs.next()) {
-				return true;
+				String cipherText = rs.getString("password");
+				return SHA256.validatePassword(password, cipherText);
 			}
 		} catch (SQLException | ClassNotFoundException e) {
 			e.printStackTrace();
diff --git a/src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java b/src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java
index 985e4f5..02ca13f 100644
--- a/src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java
+++ b/src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java
@@ -7,6 +7,7 @@
 import java.util.List;
 import java.sql.Date;
 
+import com.bijay.onlinevotingsystem.controller.SHA256;
 import com.bijay.onlinevotingsystem.dto.Voter;
 import com.bijay.onlinevotingsystem.util.DbUtil;
 
@@ -80,15 +81,15 @@ public void deleteVoterInfo(int id) {
 
 	@Override
 	public boolean loginValidate(String userName, String password, String email) {
-		String sql = "select * from voter_table where voter_name=? and password=? and email=?";
+		String sql = "select * from voter_table where voter_name=? and email=?";
 		try {
 			ps = DbUtil.getConnection().prepareStatement(sql);
 			ps.setString(1, userName);
-			ps.setString(2, password);
-			ps.setString(3, email);
+			ps.setString(2, email);
 			ResultSet rs = ps.executeQuery();
 			if (rs.next()) {
-				return true;
+				String cipherText = rs.getString("password");
+				return SHA256.validatePassword(password, cipherText);
 			}
 		} catch (ClassNotFoundException | SQLException e) {
 			e.printStackTrace();
