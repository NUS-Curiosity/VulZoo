diff --git a/src/main/java/org/olat/core/util/PathUtils.java b/src/main/java/org/olat/core/util/PathUtils.java
index 6de5e5aeff3..75a6b117fb0 100644
--- a/src/main/java/org/olat/core/util/PathUtils.java
+++ b/src/main/java/org/olat/core/util/PathUtils.java
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.FileSystems;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.FileVisitor;
 import java.nio.file.Files;
@@ -32,9 +33,11 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.EnumSet;
 import java.util.ServiceConfigurationError;
 
 import org.apache.commons.io.IOUtils;
+import org.olat.core.logging.OLATRuntimeException;
 
 /**
  * 
@@ -62,7 +65,8 @@ public static boolean copyFileToDir(Path source, File targetDir, String path) th
 	}
 	
 	/**
-	 * Use the closeSubsequentFS method to close the file system.
+	 * Use the closeSubsequentFS method to close the file system. The method doesn't
+	 * follow sym. links and its depth is limited.
 	 * 
 	 * @param file The file to visit
 	 * @param filename The filename
@@ -90,14 +94,14 @@ public static Path visit(File file, String filename, FileVisitor<Path> visitor)
 			fPath = file.toPath();
 		}
 		if(fPath != null) {
-		    Files.walkFileTree(fPath, visitor);
+		    Files.walkFileTree(fPath, EnumSet.noneOf(FileVisitOption.class), 32, visitor);
 		}
 		return fPath;
 	}
 	
 	public static void closeSubsequentFS(Path path) {
 		if(path != null && FileSystems.getDefault() != path.getFileSystem()) {
-			IOUtils.closeQuietly(path.getFileSystem());
+			IOUtils.closeQuietly(path.getFileSystem(), null);
 		}
 	}
 	
@@ -125,6 +129,10 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
 	    throws IOException {
 			Path relativeFile = source.relativize(file);
 	        final Path destFile = Paths.get(destDir.toString(), relativeFile.toString());
+	        Path normalizedPath = destFile.normalize();
+			if(!normalizedPath.startsWith(destDir)) {
+				throw new OLATRuntimeException("Invalid ZIP");
+			}
 	        if(filter.matches(file)) {
 	        	Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
 	        }
diff --git a/src/main/java/org/olat/fileresource/types/FileResource.java b/src/main/java/org/olat/fileresource/types/FileResource.java
index dcd6535fb42..bbd9aeb9dea 100644
--- a/src/main/java/org/olat/fileresource/types/FileResource.java
+++ b/src/main/java/org/olat/fileresource/types/FileResource.java
@@ -30,6 +30,7 @@
 import java.nio.charset.Charset;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -37,13 +38,14 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.nio.file.spi.FileSystemProvider;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import org.olat.core.id.OLATResourceable;
 import org.apache.logging.log4j.Logger;
+import org.olat.core.id.OLATResourceable;
 import org.olat.core.logging.Tracing;
 import org.olat.core.util.CodeHelper;
 import org.olat.core.util.PathUtils;
@@ -193,7 +195,7 @@ private static boolean isEncodingOk(File file, String encoding) {
 	protected static  RootSearcher searchRootDirectory(Path fPath)
 	throws IOException {
 		RootSearcher rootSearcher = new RootSearcher();
-		Files.walkFileTree(fPath, rootSearcher);
+		Files.walkFileTree(fPath, EnumSet.noneOf(FileVisitOption.class), 16, rootSearcher);
 		return rootSearcher;
 	}
 	
@@ -209,7 +211,7 @@ public static boolean copyResource(File file, String filename, File targetDirect
 			}
 			
 			Path destDir = targetDirectory.toPath();
-			Files.walkFileTree(path, new CopyVisitor(path, destDir, filter));
+			Files.walkFileTree(path, EnumSet.noneOf(FileVisitOption.class), 24, new CopyVisitor(path, destDir, filter));
 			PathUtils.closeSubsequentFS(path);
 			return true;
 		} catch (IOException e) {
diff --git a/src/main/java/org/olat/fileresource/types/ImsCPFileResource.java b/src/main/java/org/olat/fileresource/types/ImsCPFileResource.java
index 5cdfc6d6ead..b05f51d1069 100644
--- a/src/main/java/org/olat/fileresource/types/ImsCPFileResource.java
+++ b/src/main/java/org/olat/fileresource/types/ImsCPFileResource.java
@@ -27,11 +27,13 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -75,7 +77,7 @@ public static ResourceEvaluation evaluate(File file, String filename) {
 				Path manifestPath = fPath.resolve(realManifestPath);
 				
 				RootSearcher rootSearcher = new RootSearcher();
-				Files.walkFileTree(fPath, rootSearcher);
+				Files.walkFileTree(fPath, EnumSet.noneOf(FileVisitOption.class), 16, rootSearcher);
 				if(rootSearcher.foundRoot()) {
 					manifestPath = rootSearcher.getRoot().resolve(IMS_MANIFEST);
 				} else {
diff --git a/src/main/java/org/olat/fileresource/types/ImsQTI21Resource.java b/src/main/java/org/olat/fileresource/types/ImsQTI21Resource.java
index 4ad28dfe642..4ebc23c55a3 100644
--- a/src/main/java/org/olat/fileresource/types/ImsQTI21Resource.java
+++ b/src/main/java/org/olat/fileresource/types/ImsQTI21Resource.java
@@ -29,11 +29,13 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URI;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.EnumSet;
 
 import org.apache.logging.log4j.Logger;
 import org.olat.core.logging.Tracing;
@@ -79,7 +81,7 @@ public static ResourceEvaluation evaluate(File file, String filename) {
 				Path manifestPath = fPath.resolve(realManifestPath);
 				
 				RootSearcher rootSearcher = new RootSearcher();
-				Files.walkFileTree(fPath, rootSearcher);
+				Files.walkFileTree(fPath, EnumSet.noneOf(FileVisitOption.class), 16, rootSearcher);
 				if(rootSearcher.foundRoot()) {
 					manifestPath = rootSearcher.getRoot().resolve(IMS_MANIFEST);
 				} else {
diff --git a/src/main/java/org/olat/fileresource/types/ScormCPFileResource.java b/src/main/java/org/olat/fileresource/types/ScormCPFileResource.java
index 0a05e43a3fc..c346d095f57 100644
--- a/src/main/java/org/olat/fileresource/types/ScormCPFileResource.java
+++ b/src/main/java/org/olat/fileresource/types/ScormCPFileResource.java
@@ -27,11 +27,13 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -79,7 +81,7 @@ public static ResourceEvaluation evaluate(File file, String filename) {
 				Path manifestPath = fPath.resolve(realManifestPath);
 				
 				RootSearcher rootSearcher = new RootSearcher();
-				Files.walkFileTree(fPath, rootSearcher);
+				Files.walkFileTree(fPath, EnumSet.noneOf(FileVisitOption.class), 16, rootSearcher);
 				if(rootSearcher.foundRoot()) {
 					manifestPath = rootSearcher.getRoot().resolve(IMS_MANIFEST);
 				} else {
diff --git a/src/main/java/org/olat/modules/wiki/WikiManager.java b/src/main/java/org/olat/modules/wiki/WikiManager.java
index 4473c5b2481..6ceab36d594 100644
--- a/src/main/java/org/olat/modules/wiki/WikiManager.java
+++ b/src/main/java/org/olat/modules/wiki/WikiManager.java
@@ -30,6 +30,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -37,6 +38,7 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
@@ -162,7 +164,7 @@ public boolean importWiki(File file, String filename, File targetDirectory) {
 			}
 			
 			Path destDir = targetDirectory.toPath();
-			Files.walkFileTree(path, new ImportVisitor(destDir));
+			Files.walkFileTree(path, EnumSet.noneOf(FileVisitOption.class), 16, new ImportVisitor(destDir));
 			PathUtils.closeSubsequentFS(path);
 			return true;
 		} catch (IOException e) {
@@ -299,26 +301,32 @@ public ImportVisitor(Path destDir) throws IOException {
 		public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
 	    throws IOException {
 			String filename = file.getFileName().toString();
-			Path normalizedPath = file.normalize();
-			if(!normalizedPath.startsWith(destDir)) {
-				throw new IOException("Invalid ZIP");
-			}
-			
+
 	        if(filename.endsWith(WikiManager.WIKI_PROPERTIES_SUFFIX)) {
 	        	String f = convertAlternativeFilename(file.toString());
 	        	final Path destFile = Paths.get(wikiDir.toString(), f);
+	        	checkDestinationFile(destFile);
 	        	resetAndCopyProperties(file, destFile);
 	        } else if (filename.endsWith(WIKI_FILE_SUFFIX)) {
 	        	String f = convertAlternativeFilename(file.toString());
 	        	final Path destFile = Paths.get(wikiDir.toString(), f);
+	        	checkDestinationFile(destFile);
 	        	Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
 			} else if (!filename.contains(WIKI_FILE_SUFFIX + "-")
 					&& !filename.contains(WIKI_PROPERTIES_SUFFIX + "-")) {
 				final Path destFile = Paths.get(mediaDir.toString(), file.toString());
+				checkDestinationFile(destFile);
 				Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
 			}
 	        return FileVisitResult.CONTINUE;
 		}
+		
+		private void checkDestinationFile(Path destFile) throws IOException {
+			Path normalizedPath = destFile.normalize();
+			if(!normalizedPath.startsWith(destDir)) {
+				throw new OLATRuntimeException("Invalid ZIP");
+			}
+		}
 	 
 		@Override
 		public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
diff --git a/src/test/java/org/olat/modules/ims/cp/ImsCPHandlerTest.java b/src/test/java/org/olat/modules/ims/cp/ImsCPHandlerTest.java
new file mode 100644
index 00000000000..1a7b0dc0aa6
--- /dev/null
+++ b/src/test/java/org/olat/modules/ims/cp/ImsCPHandlerTest.java
@@ -0,0 +1,61 @@
+package org.olat.modules.ims.cp;
+
+import java.io.File;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.util.Locale;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.olat.core.id.Identity;
+import org.olat.core.logging.OLATRuntimeException;
+import org.olat.fileresource.FileResourceManager;
+import org.olat.fileresource.types.ImsCPFileResource;
+import org.olat.repository.RepositoryEntry;
+import org.olat.repository.handlers.RepositoryHandler;
+import org.olat.repository.handlers.RepositoryHandlerFactory;
+import org.olat.test.JunitTestHelper;
+import org.olat.test.OlatTestCase;
+import org.springframework.beans.factory.annotation.Autowired;
+
+/**
+ * 
+ * Initial date: 22 juin 2021<br>
+ * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com
+ *
+ */
+public class ImsCPHandlerTest extends OlatTestCase {
+	
+	@Autowired
+	private RepositoryHandlerFactory handlerFactory;
+	
+	@Test
+	public void importImsCP() throws URISyntaxException {
+		Identity author = JunitTestHelper.createAndPersistIdentityAsRndAuthor("ims-cp-1");
+		URL imsCpUrl = ImsCPHandlerTest.class.getResource("imscp.zip");
+		File imsCpFile = new File(imsCpUrl.toURI());
+		
+		RepositoryHandler cpHandler = handlerFactory.getRepositoryHandler(ImsCPFileResource.TYPE_NAME);	
+		RepositoryEntry entry = cpHandler.importResource(author, null, "IMS CP", null, false, null, Locale.ENGLISH, imsCpFile, imsCpFile.getName());
+		Assert.assertNotNull(entry);
+		
+		File cpRoot = FileResourceManager.getInstance().unzipFileResource(entry.getOlatResource());
+		File image = new File(cpRoot, "IMG_1482.jpg");
+		Assert.assertTrue(image.exists());
+		File manifestXml = new File(cpRoot, "imsmanifest.xml");
+		Assert.assertTrue(manifestXml.exists());
+		File page = new File(cpRoot, "new.html");
+		Assert.assertTrue(page.exists());
+	}
+	
+	@Test(expected=OLATRuntimeException.class)
+	public void importImsCPSlide() throws URISyntaxException {
+		Identity author = JunitTestHelper.createAndPersistIdentityAsRndAuthor("ims-cp-1");
+		URL imsCpUrl = ImsCPHandlerTest.class.getResource("imscp_alt.zip");
+		File imsCpFile = new File(imsCpUrl.toURI());
+		
+		RepositoryHandler cpHandler = handlerFactory.getRepositoryHandler(ImsCPFileResource.TYPE_NAME);	
+		cpHandler.importResource(author, null, "IMS CP", null, false, null, Locale.ENGLISH, imsCpFile, imsCpFile.getName());
+	}
+
+}
diff --git a/src/test/java/org/olat/modules/ims/cp/imscp.zip b/src/test/java/org/olat/modules/ims/cp/imscp.zip
new file mode 100644
index 00000000000..cb61d9c03ee
Binary files /dev/null and b/src/test/java/org/olat/modules/ims/cp/imscp.zip differ
diff --git a/src/test/java/org/olat/modules/ims/cp/imscp_alt.zip b/src/test/java/org/olat/modules/ims/cp/imscp_alt.zip
new file mode 100644
index 00000000000..2130d886471
Binary files /dev/null and b/src/test/java/org/olat/modules/ims/cp/imscp_alt.zip differ
diff --git a/src/test/java/org/olat/modules/wiki/WikiManagerTest.java b/src/test/java/org/olat/modules/wiki/WikiManagerTest.java
new file mode 100644
index 00000000000..e26b29a6ae0
--- /dev/null
+++ b/src/test/java/org/olat/modules/wiki/WikiManagerTest.java
@@ -0,0 +1,62 @@
+package org.olat.modules.wiki;
+
+import java.io.File;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.olat.core.logging.OLATRuntimeException;
+import org.olat.core.util.CodeHelper;
+import org.olat.core.util.FileUtils;
+import org.olat.core.util.WebappHelper;
+import org.olat.test.OlatTestCase;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.wildfly.common.Assert;
+
+/**
+ * 
+ * Initial date: 22 juin 2021<br>
+ * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com
+ *
+ */
+public class WikiManagerTest extends OlatTestCase {
+	
+	@Autowired
+	private WikiManager wikiManager;
+	
+	private File tmpWikiDir;
+	
+	@Before
+	public void createTmpDir() {
+		tmpWikiDir = new File(WebappHelper.getTmpDir(), "wiki" + CodeHelper.getForeverUniqueID());
+	}
+	
+	@After
+	public void deleteTmpDir() {
+		FileUtils.deleteDirsAndFiles(tmpWikiDir, true, true);
+	}
+	
+	@Test
+	public void importWiki() throws URISyntaxException {
+		URL wikiUrl = WikiManagerTest.class.getResource("wiki.zip");
+		File wikiFile = new File(wikiUrl.toURI());
+		wikiManager.importWiki(wikiFile, null, tmpWikiDir);
+		
+		File image = new File(tmpWikiDir, "media/IMG_1482.jpg");
+		Assert.assertTrue(image.exists());
+		File imageMetadata = new File(tmpWikiDir, "media/IMG_1482.jpg.metadata");
+		Assert.assertTrue(imageMetadata.exists());
+		File indexPage = new File(tmpWikiDir, "wiki/SW5kZXg=.wp");
+		Assert.assertTrue(indexPage.exists());
+	}
+	
+	@Test(expected=OLATRuntimeException.class)
+	public void importWikiSlide() throws URISyntaxException {
+		URL wikiUrl = WikiManagerTest.class.getResource("wiki_alt.zip");
+		File wikiFile = new File(wikiUrl.toURI());
+		wikiManager.importWiki(wikiFile, null, tmpWikiDir);
+	}
+
+}
diff --git a/src/test/java/org/olat/modules/wiki/wiki.zip b/src/test/java/org/olat/modules/wiki/wiki.zip
new file mode 100644
index 00000000000..5868472c8eb
Binary files /dev/null and b/src/test/java/org/olat/modules/wiki/wiki.zip differ
diff --git a/src/test/java/org/olat/modules/wiki/wiki_alt.zip b/src/test/java/org/olat/modules/wiki/wiki_alt.zip
new file mode 100644
index 00000000000..8ba22243a37
Binary files /dev/null and b/src/test/java/org/olat/modules/wiki/wiki_alt.zip differ
diff --git a/src/test/java/org/olat/test/AllTestsJunit4.java b/src/test/java/org/olat/test/AllTestsJunit4.java
index 383c7ef7e28..2698fbfbfc3 100644
--- a/src/test/java/org/olat/test/AllTestsJunit4.java
+++ b/src/test/java/org/olat/test/AllTestsJunit4.java
@@ -236,6 +236,7 @@
 	org.olat.modules.iq.IQManagerTest.class,
 	org.olat.modules.fo.ForumManagerTest.class,//fail
 	org.olat.modules.wiki.WikiUnitTest.class,
+	org.olat.modules.wiki.WikiManagerTest.class,
 	org.olat.modules.wiki.versioning.diff.CookbookDiffTest.class,
 	org.olat.modules.wiki.gui.components.wikiToHtml.FilterUtilTest.class,
 	org.olat.modules.coach.manager.CoachingDAOTest.class,
@@ -359,6 +360,7 @@
 	org.olat.course.nodes.projectbroker.ProjectBrokerManagerTest.class,
 	org.olat.core.commons.persistence.DBTest.class,
 	org.olat.modules.ims.cp.CPManagerTest.class,
+	org.olat.modules.ims.cp.ImsCPHandlerTest.class,
 	org.olat.modules.ims.qti.fileresource.FileResourceValidatorTest.class,
 	org.olat.ims.qti.QTIResultManagerTest.class,
 	org.olat.ims.qti.qpool.QTIImportProcessorTest.class,
