diff --git a/src/main/java/org/olat/core/util/ZipUtil.java b/src/main/java/org/olat/core/util/ZipUtil.java
index c04a98aef04..e08bbd730aa 100644
--- a/src/main/java/org/olat/core/util/ZipUtil.java
+++ b/src/main/java/org/olat/core/util/ZipUtil.java
@@ -37,6 +37,7 @@
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.ArrayList;
@@ -188,20 +189,24 @@ public static boolean unzip(VFSLeaf zipLeaf, VFSContainer targetDir, Identity id
 	private static boolean unzip(InputStream in, VFSContainer targetDir, Identity identity, boolean versioning) {
 		
 		VFSRepositoryService vfsRepositoryService = CoreSpringFactory.getImpl(VFSRepositoryService.class);
-		
+
 		try(ZipInputStream oZip = new ZipInputStream(in)) {
 			// unzip files
 			ZipEntry oEntr = oZip.getNextEntry();
 			while (oEntr != null) {
-				if (oEntr.getName() != null && !oEntr.getName().startsWith(DIR_NAME__MACOSX)) {
+				String name = oEntr.getName();
+				if(!targetDir.isInPath(name)) {
+					throw new IOException("Invalip ZIP");
+				}
+
+				if (name != null && !name.startsWith(DIR_NAME__MACOSX)) {
 					if (oEntr.isDirectory()) {
 						// skip MacOSX specific metadata directory
 						// create directories
-						getAllSubdirs(targetDir, oEntr.getName(), identity, true);
+						getAllSubdirs(targetDir, name, identity, true);
 					} else {
 						// create file
 						VFSContainer createIn = targetDir;
-						String name = oEntr.getName();
 						// check if entry has directories which did not show up as
 						// directories above
 						int dirSepIndex = name.lastIndexOf('/');
@@ -317,7 +322,7 @@ private static boolean unzipNonStrict(InputStream in, VFSContainer targetDir, Id
 			VFSRepositoryService vfsRepositoryService = CoreSpringFactory.getImpl(VFSRepositoryService.class);
 			
 			// unzip files
-			net.sf.jazzlib.ZipEntry oEntr = oZip.getNextEntry();
+			net.sf.jazzlib.ZipEntry oEntr = oZip.getNextEntry();//TODO zip
 			
 			VFSLeaf lastLeaf = null;
 			while (oEntr != null) {
@@ -455,7 +460,7 @@ public static List<String> checkLockedFileBeforeUnzipNonStrict(VFSLeaf zipLeaf,
 						// skip MacOSX specific metadata directory
 						// directories aren't locked
 						oZip.closeEntry();
-						oEntr = oZip.getNextEntry();
+						oEntr = oZip.getNextEntry();//TODO zip
 						continue;
 					} else {
 						// search file
@@ -847,9 +852,17 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO
 	 * @param outdir, path to output directory, relative to cwd or absolute
 	 */
 	private static void xxunzip(InputStream is, String outdir) throws IOException {
+		final Path outPath = Paths.get(outdir);
+		
 		try(ZipInputStream zis = new ZipInputStream (new BufferedInputStream(is))) {
 			ZipEntry entry;
 			while ((entry = zis.getNextEntry()) != null) {
+				Path filePath = Paths.get(outdir, entry.getName());
+				Path normalizedPath = filePath.normalize();
+				if(!normalizedPath.startsWith(outPath)) {
+					throw new IOException("Invalid ZIP");
+				}
+				
 				File of = new File(outdir, entry.getName());
 				if (entry.isDirectory()) {
 					of.mkdirs();
diff --git a/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java b/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
index 085e878ef1c..9504e412fa0 100644
--- a/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
+++ b/src/main/java/org/olat/core/util/vfs/LocalFolderImpl.java
@@ -335,6 +335,14 @@ public VFSItem resolve(String path) {
 		return resolved;
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		Path bFile = getBasefile().toPath();
+		Path filePath = bFile.resolve(path);
+		Path normalizedPath = filePath.normalize();
+		return normalizedPath.startsWith(bFile);
+	}
+
 	@Override
 	public String getRelPath() {
 		Path bFile = getBasefile().toPath();
diff --git a/src/main/java/org/olat/core/util/vfs/MergeSource.java b/src/main/java/org/olat/core/util/vfs/MergeSource.java
index 6bfc7b4def6..17600068fce 100644
--- a/src/main/java/org/olat/core/util/vfs/MergeSource.java
+++ b/src/main/java/org/olat/core/util/vfs/MergeSource.java
@@ -202,6 +202,11 @@ public VFSLeaf createChildLeaf(String name) {
 		return rootWriteContainer.createChildLeaf(name);
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return rootWriteContainer.isInPath(path);
+	}
+
 	@Override
 	public VFSStatus copyFrom(VFSItem source) {
 		if (canWrite() != VFSConstants.YES) {
diff --git a/src/main/java/org/olat/core/util/vfs/NamedContainerImpl.java b/src/main/java/org/olat/core/util/vfs/NamedContainerImpl.java
index 036ed3e4b22..93a4e814db7 100644
--- a/src/main/java/org/olat/core/util/vfs/NamedContainerImpl.java
+++ b/src/main/java/org/olat/core/util/vfs/NamedContainerImpl.java
@@ -121,6 +121,11 @@ public String getRelPath() {
 		return getDelegate().getRelPath();
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return getDelegate().isInPath(path);
+	}
+
 	@Override
 	public VFSStatus delete() {
 		return getDelegate().delete();
diff --git a/src/main/java/org/olat/core/util/vfs/VFSContainer.java b/src/main/java/org/olat/core/util/vfs/VFSContainer.java
index c1ddfb66575..6a91206b9b0 100644
--- a/src/main/java/org/olat/core/util/vfs/VFSContainer.java
+++ b/src/main/java/org/olat/core/util/vfs/VFSContainer.java
@@ -86,6 +86,13 @@ public interface VFSContainer extends VFSItem {
 	 */
 	public VFSLeaf createChildLeaf(String name);
 	
+	/**
+	 * 
+	 * @param path
+	 * @return
+	 */
+	public boolean isInPath(String path);
+	
 	/**
 	 * Set a default filter that will be applied to this container getItems method
 	 * 
diff --git a/src/main/java/org/olat/core/util/vfs/VirtualContainer.java b/src/main/java/org/olat/core/util/vfs/VirtualContainer.java
index 53e338f9ce4..44f499b93b6 100644
--- a/src/main/java/org/olat/core/util/vfs/VirtualContainer.java
+++ b/src/main/java/org/olat/core/util/vfs/VirtualContainer.java
@@ -105,6 +105,11 @@ public String getRelPath() {
 		return null;
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return false;
+	}
+
 	@Override
 	public VFSItem resolve(String path) {
 		if(path != null && path.length() > 1 && path.startsWith("/")) {
diff --git a/src/main/java/org/olat/course/assessment/bulk/DataStepForm.java b/src/main/java/org/olat/course/assessment/bulk/DataStepForm.java
index 98209eb667e..33664e17fe4 100644
--- a/src/main/java/org/olat/course/assessment/bulk/DataStepForm.java
+++ b/src/main/java/org/olat/course/assessment/bulk/DataStepForm.java
@@ -366,7 +366,7 @@ private void processReturnFiles(VFSLeaf target, List<BulkAssessmentRow> rows) {
 			try(InputStream is = target.getInputStream();
 					ZipInputStream zis = new ZipInputStream(is)) {
 				byte[] b = new byte[FileUtils.BSIZE];
-				while ((entry = zis.getNextEntry()) != null) {
+				while ((entry = zis.getNextEntry()) != null) {//TODO zip
 					if(!entry.isDirectory()) {
 						while (zis.read(b) > 0) {
 							//continue
diff --git a/src/main/java/org/olat/ims/cp/ui/VFSCPContainer.java b/src/main/java/org/olat/ims/cp/ui/VFSCPContainer.java
index faad708dde7..8a387ad7d81 100644
--- a/src/main/java/org/olat/ims/cp/ui/VFSCPContainer.java
+++ b/src/main/java/org/olat/ims/cp/ui/VFSCPContainer.java
@@ -96,6 +96,11 @@ public VFSItem resolve(String path) {
 	public String getRelPath() {
 		return null;
 	}
+	
+	@Override
+	public boolean isInPath(String path) {
+		return false;
+	}
 
 	@Override
 	public List<VFSItem> getItems() {
diff --git a/src/main/java/org/olat/ims/cp/ui/VFSCPNamedContainerItem.java b/src/main/java/org/olat/ims/cp/ui/VFSCPNamedContainerItem.java
index 2ebeb4d0495..9da2cdf8ace 100644
--- a/src/main/java/org/olat/ims/cp/ui/VFSCPNamedContainerItem.java
+++ b/src/main/java/org/olat/ims/cp/ui/VFSCPNamedContainerItem.java
@@ -71,6 +71,11 @@ public List<VFSItem> getItems(VFSItemFilter filter) {
 		return getItems();
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return false;
+	}
+
 	@Override
 	public VFSStatus copyFrom(VFSItem source) {
 		return VFSConstants.NO;
diff --git a/src/main/java/org/olat/ims/cp/ui/VFSMediaFilesContainer.java b/src/main/java/org/olat/ims/cp/ui/VFSMediaFilesContainer.java
index 298da4ab63c..2718f8f6750 100644
--- a/src/main/java/org/olat/ims/cp/ui/VFSMediaFilesContainer.java
+++ b/src/main/java/org/olat/ims/cp/ui/VFSMediaFilesContainer.java
@@ -85,6 +85,11 @@ public String getRelPath() {
 		return rootContainer.getRelPath();
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return rootContainer.isInPath(path);
+	}
+
 	@Override
 	public VFSContainer getParentContainer() {
 		return null;
diff --git a/src/main/java/org/olat/ims/cp/ui/VFSRootCPContainer.java b/src/main/java/org/olat/ims/cp/ui/VFSRootCPContainer.java
index 8d846846ca4..c03fa08bb2a 100644
--- a/src/main/java/org/olat/ims/cp/ui/VFSRootCPContainer.java
+++ b/src/main/java/org/olat/ims/cp/ui/VFSRootCPContainer.java
@@ -112,6 +112,11 @@ public String getRelPath() {
 		return rootContainer.getRelPath();
 	}
 
+	@Override
+	public boolean isInPath(String path) {
+		return rootContainer.isInPath(path);
+	}
+
 	@Override
 	public VFSItem resolve(String path) {
 		// 1) try to resolve directly from root (HTML editor instance)
diff --git a/src/main/java/org/olat/ims/qti21/pool/QTI21ImportProcessor.java b/src/main/java/org/olat/ims/qti21/pool/QTI21ImportProcessor.java
index 16e008a2baa..5138f8a29d2 100644
--- a/src/main/java/org/olat/ims/qti21/pool/QTI21ImportProcessor.java
+++ b/src/main/java/org/olat/ims/qti21/pool/QTI21ImportProcessor.java
@@ -161,6 +161,11 @@ private QuestionItem processResource(ResourceType resource, Path imsmanifestPath
 			if(Files.notExists(assessmentItemPath)) {
 				return null;
 			}
+			
+			Path normalizedPath = assessmentItemPath.normalize();
+			if(!normalizedPath.startsWith(parentPath)) {
+				throw new IOException("Invalid Item");
+			}
 	
 			String dir = qpoolFileStorage.generateDir();
 			//storage
@@ -213,6 +218,10 @@ private QuestionItem processResource(ResourceType resource, Path imsmanifestPath
 			for(String material:materials) {
 				if(material.indexOf("://") < 0) {// material can be an external URL
 					Path materialFile = assessmentItemPath.getParent().resolve(material);
+					Path normalizedMaterialPath = materialFile.normalize();
+					if(!normalizedMaterialPath.startsWith(parentPath)) {
+						throw new IOException("Invalid Item");
+					}
 					PathUtils.copyFileToDir(materialFile, outputFile.getParentFile(), material);
 				}
 			}
diff --git a/src/main/java/org/olat/ims/qti21/repository/handlers/CopyAndConvertVisitor.java b/src/main/java/org/olat/ims/qti21/repository/handlers/CopyAndConvertVisitor.java
index 7e837f6d0fd..0aec03bd9c0 100644
--- a/src/main/java/org/olat/ims/qti21/repository/handlers/CopyAndConvertVisitor.java
+++ b/src/main/java/org/olat/ims/qti21/repository/handlers/CopyAndConvertVisitor.java
@@ -115,8 +115,10 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
 			if(filename.startsWith(".")) {
 				//ignore
 			} else if(filename.endsWith("xml") && !filename.equals("imsmanifest.xml")) {
+				checkPath(destFile);
 				convertXmlFile(file, destFile);
 			} else {
+				checkPath(destFile);
 				Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
 			}
 		}
@@ -127,13 +129,22 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
 	public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
 	throws IOException {
 		Path relativeDir = source.relativize(dir);
-        final Path dirToCreate = Paths.get(destDir.toString(), relativeDir.toString());
+		final Path dirToCreate = Paths.get(destDir.toString(), relativeDir.toString());
+		checkPath(dirToCreate);
+       
         if(!dirToCreate.toFile().exists()) {
         	Files.createDirectory(dirToCreate);
         }
         return FileVisitResult.CONTINUE;
 	}
 	
+	private void checkPath(Path file) throws IOException {
+		Path normalizedPath = file.normalize();
+		if(!normalizedPath.startsWith(destDir)) {
+			throw new IOException("Invalid ZIP");
+		}
+	}
+	
 	/**
 	 * Convert the XML files, assessmentItem or assessmentTest
 	 * 
diff --git a/src/main/java/org/olat/modules/wiki/WikiManager.java b/src/main/java/org/olat/modules/wiki/WikiManager.java
index 208a0129550..4473c5b2481 100644
--- a/src/main/java/org/olat/modules/wiki/WikiManager.java
+++ b/src/main/java/org/olat/modules/wiki/WikiManager.java
@@ -298,15 +298,20 @@ public ImportVisitor(Path destDir) throws IOException {
 		@Override
 		public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
 	    throws IOException {
-	        String filename = file.getFileName().toString();
+			String filename = file.getFileName().toString();
+			Path normalizedPath = file.normalize();
+			if(!normalizedPath.startsWith(destDir)) {
+				throw new IOException("Invalid ZIP");
+			}
+			
 	        if(filename.endsWith(WikiManager.WIKI_PROPERTIES_SUFFIX)) {
-	        		String f = convertAlternativeFilename(file.toString());
-	        		final Path destFile = Paths.get(wikiDir.toString(), f);
-	        		resetAndCopyProperties(file, destFile);
+	        	String f = convertAlternativeFilename(file.toString());
+	        	final Path destFile = Paths.get(wikiDir.toString(), f);
+	        	resetAndCopyProperties(file, destFile);
 	        } else if (filename.endsWith(WIKI_FILE_SUFFIX)) {
-        			String f = convertAlternativeFilename(file.toString());
-	        		final Path destFile = Paths.get(wikiDir.toString(), f);
-				Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
+	        	String f = convertAlternativeFilename(file.toString());
+	        	final Path destFile = Paths.get(wikiDir.toString(), f);
+	        	Files.copy(file, destFile, StandardCopyOption.REPLACE_EXISTING);
 			} else if (!filename.contains(WIKI_FILE_SUFFIX + "-")
 					&& !filename.contains(WIKI_PROPERTIES_SUFFIX + "-")) {
 				final Path destFile = Paths.get(mediaDir.toString(), file.toString());
diff --git a/src/test/java/org/olat/core/util/Slide.zip b/src/test/java/org/olat/core/util/Slide.zip
new file mode 100644
index 00000000000..e72f0026688
Binary files /dev/null and b/src/test/java/org/olat/core/util/Slide.zip differ
diff --git a/src/test/java/org/olat/core/util/ZipUtilTest.java b/src/test/java/org/olat/core/util/ZipUtilTest.java
new file mode 100644
index 00000000000..6d82928af48
--- /dev/null
+++ b/src/test/java/org/olat/core/util/ZipUtilTest.java
@@ -0,0 +1,76 @@
+/**
+ * <a href="http://www.openolat.org">
+ * OpenOLAT - Online Learning and Training</a><br>
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License"); <br>
+ * you may not use this file except in compliance with the License.<br>
+ * You may obtain a copy of the License at the
+ * <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache homepage</a>
+ * <p>
+ * Unless required by applicable law or agreed to in writing,<br>
+ * software distributed under the License is distributed on an "AS IS" BASIS, <br>
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>
+ * See the License for the specific language governing permissions and <br>
+ * limitations under the License.
+ * <p>
+ * Initial code contributed and copyrighted by<br>
+ * frentix GmbH, http://www.frentix.com
+ * <p>
+ */
+package org.olat.core.util;
+
+import java.io.File;
+import java.net.URL;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.olat.core.commons.modules.bc.FolderConfig;
+import org.olat.core.id.Identity;
+import org.olat.core.util.vfs.VFSContainer;
+import org.olat.core.util.vfs.VFSItem;
+import org.olat.core.util.vfs.VFSLeaf;
+import org.olat.core.util.vfs.VFSManager;
+import org.olat.core.util.vfs.callbacks.FullAccessCallback;
+import org.olat.test.OlatTestCase;
+import org.olat.test.VFSJavaIOFile;
+
+/**
+ * 
+ * Initial date: 21 juin 2021<br>
+ * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com
+ *
+ */
+public class ZipUtilTest extends OlatTestCase {
+
+	@Test
+	public void unzipFileToDir() throws Exception {
+		File tmpFolder = new File(WebappHelper.getTmpDir(), "zip" + CodeHelper.getRAMUniqueID());
+		URL url = ZipUtilTest.class.getResource("Slide.zip");
+		File zipFile = new File(url.toURI());
+		
+		File unzipDir = new File(tmpFolder, "unzip1");
+		unzipDir.mkdirs();
+		
+		boolean success = ZipUtil.unzip(zipFile, unzipDir);
+		Assert.assertFalse(success);
+		File img = new File(tmpFolder, "IMG_1489.png");
+		Assert.assertFalse(img.exists());
+		FileUtils.deleteDirsAndFiles(tmpFolder, true, true);
+	}
+	
+	@Test
+	public void unzipLeafToContainer() throws Exception {
+		URL url = ZipUtilTest.class.getResource("Slide.zip");
+		VFSLeaf zipLeaf = new VFSJavaIOFile(url.toURI());
+		VFSContainer tmpDir = VFSManager.olatRootContainer(FolderConfig.getRelativeTmpDir());
+		tmpDir.setLocalSecurityCallback(new FullAccessCallback());
+		VFSContainer targetDir = tmpDir.createChildContainer("zip" + CodeHelper.getForeverUniqueID());
+		boolean success = ZipUtil.unzip(zipLeaf, targetDir, (Identity)null, false);
+		
+		VFSItem img = tmpDir.resolve("IMG_1489.png");
+		Assert.assertNull(img);
+		Assert.assertFalse(success);
+		
+		targetDir.deleteSilently();
+	}
+}
diff --git a/src/test/java/org/olat/test/AllTestsJunit4.java b/src/test/java/org/olat/test/AllTestsJunit4.java
index 12bd35915af..031601a9372 100644
--- a/src/test/java/org/olat/test/AllTestsJunit4.java
+++ b/src/test/java/org/olat/test/AllTestsJunit4.java
@@ -73,6 +73,7 @@
 	org.olat.core.util.SimpleHtmlParserTest.class,
 	org.olat.core.util.IPUtilsTest.class,
 	org.olat.core.util.IPUtilsValidRangeTest.class,
+	org.olat.core.util.ZipUtilTest.class,
 	org.olat.core.util.ZipUtilConcatTest.class,
 	org.olat.core.util.mail.EmailAddressValidatorTest.class,
 	org.olat.core.util.mail.manager.MailManagerTest.class,
