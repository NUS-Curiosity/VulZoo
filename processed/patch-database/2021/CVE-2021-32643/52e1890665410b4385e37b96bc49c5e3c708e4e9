diff --git a/core/src/main/scala/org/http4s/StaticFile.scala b/core/src/main/scala/org/http4s/StaticFile.scala
index b0cf2607266..26f35ea3de0 100644
--- a/core/src/main/scala/org/http4s/StaticFile.scala
+++ b/core/src/main/scala/org/http4s/StaticFile.scala
@@ -80,7 +80,7 @@ object StaticFile {
     val fileUrl = url.getFile()
     val file = new File(fileUrl)
     OptionT.apply(F.defer {
-      if (file.isDirectory())
+      if (url.getProtocol === "file" && file.isDirectory)
         F.pure(None)
       else {
         val urlConn = url.openConnection
diff --git a/tests/src/test/scala/org/http4s/StaticFileSuite.scala b/tests/src/test/scala/org/http4s/StaticFileSuite.scala
index 579577ae72a..4b1c9ceecd1 100644
--- a/tests/src/test/scala/org/http4s/StaticFileSuite.scala
+++ b/tests/src/test/scala/org/http4s/StaticFileSuite.scala
@@ -277,7 +277,7 @@ class StaticFileSuite extends Http4sSuite {
     len.assertEquals(Some(24005L))
   }
 
-  test("return none from a URL that is a directory") {
+  test("return none from a file URL that is a directory") {
     // val url = getClass.getResource("/foo")
     StaticFile
       .fromURL[IO](getClass.getResource("/foo"), testBlocker)
@@ -285,6 +285,20 @@ class StaticFileSuite extends Http4sSuite {
       .assertEquals(None)
   }
 
+  test("not return none from an HTTP URL whose path is a directory") {
+    // We need a universal directory that also exists as a resource on
+    // a server.  Creating a temp directory would be better, but then
+    // we need an HTTP server that responds to a wildcard path.
+    //
+    // Or we can be lazy and just use `/`.
+    assume(new File("/").isDirectory, "/ is not a directory")
+    StaticFile
+      .fromURL[IO](new URL("https://github.com//"), testBlocker)
+      .value
+      .map(_.fold(Status.NotFound)(_.status))
+      .assertEquals(Status.Ok)
+  }
+
   test("return none from a URL that points to a resource that does not exist") {
     StaticFile
       .fromURL[IO](new URL("https://github.com/http4s/http4s/fooz"), testBlocker)
