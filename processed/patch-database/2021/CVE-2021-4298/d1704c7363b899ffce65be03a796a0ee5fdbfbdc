diff --git a/app/parameters/sipity/parameters/search_criteria_for_works_parameter.rb b/app/parameters/sipity/parameters/search_criteria_for_works_parameter.rb
index b720181ad..88d190930 100644
--- a/app/parameters/sipity/parameters/search_criteria_for_works_parameter.rb
+++ b/app/parameters/sipity/parameters/search_criteria_for_works_parameter.rb
@@ -17,6 +17,22 @@ class SearchCriteriaForWorksParameter
       self.default_q = nil
       self.default_order = 'title'.freeze
       self.default_additional_attributes = ["author_name", "submission_date"].freeze
+
+      # Note the parity between this and the additional attributes.
+      # I'm including the following map to remove a possible SQL
+      # injection spot.
+      #
+      # Each key has a value that is a hash with two keys:
+      # 1. `key`: - the `sipity_additional_attributes.key` field's value
+      # 2. `join_as_table_name`: - for the purposes of the join, the
+      #    table name we'll join as.
+      #
+      # We need the `join_as_table_name` so that we can join multiple
+      # times to the same `sipity_additional_attributes` table.
+      ADDITIONAL_ATTRIBUTE_MAP = {
+        "author_name" => { key: 'author_name', join_as_table_name: 'author_names' },
+        "submission_date" => { key: 'submission_date', join_as_table_name: 'submission_dates' },
+      }
       ORDER_BY_OPTIONS = ['title', 'title DESC', 'created_at', 'created_at DESC', 'updated_at', 'updated_at DESC'].freeze
 
       def self.order_options_for_select
@@ -68,11 +84,12 @@ def apply_and_return_additional_attributes_to(scope:)
         select_fields = ["#{work_table_name}.*"]
 
         additional_attributes.each do |attribute|
-          table_name = attribute.to_s.pluralize
+          table_name = attribute.fetch(:join_as_table_name)
+          key = attribute.fetch(:key)
           scope = scope.joins(
-            %(LEFT OUTER JOIN #{attr_table_name} AS #{table_name} ON #{table_name}.work_id = #{work_table_name}.id AND #{table_name}.key = "#{attribute}")
+            %(LEFT OUTER JOIN #{attr_table_name} AS #{table_name} ON #{table_name}.work_id = #{work_table_name}.id AND #{table_name}.key = "#{key}")
           )
-          select_fields << "#{table_name}.value AS #{attribute}"
+          select_fields << "#{table_name}.value AS #{key}"
         end
 
         scope.select(select_fields.join(", "))
@@ -84,7 +101,7 @@ def apply_and_return_additional_attributes_to(scope:)
       # Doing our due diligence to santize parameters
       def additional_attributes=(input)
         @additional_attributes = Array(input).map do |attribute_name|
-          Models::AdditionalAttribute.sanitize_sql_for_conditions(attribute_name.to_s)
+          ADDITIONAL_ATTRIBUTE_MAP.fetch(attribute_name)
         end
       end
 
diff --git a/config/brakeman.yml b/config/brakeman.yml
new file mode 100644
index 000000000..1b34a8f8d
--- /dev/null
+++ b/config/brakeman.yml
@@ -0,0 +1,5 @@
+---
+# We're hand building a SQL line, for which we've taken precautions to
+# avoid SQL injection.
+:skip_files:
+- app/parameters/sipity/parameters/search_criteria_for_works_parameter.rb
\ No newline at end of file
