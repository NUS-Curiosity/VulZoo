Document Title:
===============
Wireless Drive v1.1.0 iOS - Multiple Web Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1229


Release Date:
=============
2014-03-19


Vulnerability Laboratory ID (VL-ID):
====================================
1229


Common Vulnerability Scoring System:
====================================
6.8


Product & Service Introduction:
===============================
Why carry a physical USB drive around wherever you go, cluttering up your key ring? Instead, this simple, convenient app converts your
iOS device into a wireless hard drive that works over WiFi! Simple. Powerful. Convenient. Wireless Drive: One of those apps you`ll end
up using all the time! Features:

- Transfer files without limitation
- Support files in any format and size
- Use WiFi or iTunes File Sharing to transfer files between your iOS device and computer
- Perfect app for transporting large collections of video
- Use it to transfer work documents from office to home, simple and easily

(Copy of the Homepage: https://itunes.apple.com/de/app/wireless-drive-transfer-share/id569832333 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple web vulnerabilities in the official OnDemandWorld Wireless Drive v1.1.0 mobile web-application.


Vulnerability Disclosure Timeline:
==================================
2014-03-19:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
OnDemandWorld
Product: Wireless Drive - Transfer & Share Files over WiFi 1.1.0


Exploitation Technique:
=======================
Remote


Severity Level:
===============
High


Technical Details & Description:
================================
1.1
A local file include web vulnerability has been discovered in the official OnDemandWorld Wireless Drive v1.1.0 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific path
commands to compromise the web-application or mobile device.

The web vulnerability is located in the `filename` value of the `Upload file` module. Remote attackers are able to inject own files with malicious
`filename` value in the upload POST method request to compromise the mobile web-application. The attack vector is persistent and the request
method is POST. The local file/path include execution occcurs in the main file dir list. The security risk of the local file include web vulnerability
is estimated as high(+) with a cvss (common vulnerability scoring system) count of 6.7(+)|(-)6.8.

Exploitation of the local file include web vulnerability requires no user interaction but a privileged web-application user account with low user auth.
Successful exploitation of the local file include web vulnerability results in mobile application or connected device component compromise.

Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] Upload file

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Upload > Menu File Dir List (http://localhost:4096)



1.2
A local command/path injection web vulnerabilities has been discovered in the official OnDemandWorld Wireless Drive v1.1.0 iOS mobile web-application.
A command inject vulnerability allows attackers to inject local commands via vulnerable system values to compromise the apple mobile iOS application.

The vulnerability is located in the vulnerable `[foldername]` value of the wifi file dir list module. Local attackers are able to inject own malicious
system specific commands or path value requests in the vulnerable foldername value. The injection requires a active sync with the wifi app stored folders.
The execution of the local command inject via foldername value on sync occurs in the file dir index list of the main upload path. The security risk of
the local command/path inject vulnerability is estimated as high(-) with a cvss (common vulnerability scoring system) count of 5.6(+)|(-)5.7.

Exploitation of the command/path inject vulnerability requires a low privileged iOS device account with restricted access and no user interaction.
Successful exploitation of the vulnerability results in unauthorized execution of system specific commands and unauthorized path value requests to
compromise the mobile iOS application or the connected device components.

Request Method(s):
				[+] Sync

Vulnerable Parameter(s):
				[+] foldername (path value)

Affected Module(s):
				[+] Index- File Dir Listing
				[+] Sub Folder/Category - File Dir Listing


Proof of Concept (PoC):
=======================
1.1
The local file include web vulnerability can be exploited by remote attackers without user interaction and with low privileged web-interface account.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Upload File > filename [Sub Dir]

<tr><td rowspan="3"><img src="Blank.jpg" height="50px" align="middle" width="50px"></td>
<td><a href="5FCAF1DE-6D23-463B-ABE0-FFB0191DF038/A77E7236-BFEA-4C38-97B4-00CC483C3D04.
?filename=<../[LOCAL FILE INCLUDE VULNERABILITY!]>" alt="<../[LOCAL FILE INCLUDE VULNERABILITY!]>"><strong><../[LOCAL FILE INCLUDE VULNERABILITY!]"></strong></a></td></tr>
<tr><td>     0.5 KB</td></tr><tr><td> 2014-03-19 11:55:51</td></tr><tr><td rowspan="3"><img src="PNG.jpg" align="middle" width="50px" height="50px"/></td>
<td><a href="5FCAF1DE-6D23-463B-ABE0-FFB0191DF038/48123658-2770-400F-9D04-31EBF5142634.png?filename=1.png" alt="1.png"><strong>1.png</strong></a></td></tr>
<tr><td>     0.5 KB</td></tr><tr><td> 2014-03-19 11:53:05</td></tr><tr><td rowspan="3"><img src="JPG.jpg" align="middle" width="50px" height="50px"/></td>
<td><a href="5FCAF1DE-6D23-463B-ABE0-FFB0191DF038/C3C427D4-7B42-49A3-9A68-D7B4881CAB2C.jpg?filename=Sample.jpg" alt="Sample.jpg"><strong>Sample.jpg</strong></a></td></tr>
<tr><td>   175.2 KB</td></tr><tr><td> 2013-02-23 18:48:42</td></tr></table>
</p><form action="" method="post" enctype="multipart/form-data" accept-charset="utf-8" name="form1" id="form1"><label>Upload file:  <input type="file"
name="upload1" id="upload1" /></label><label><input type="submit" name="button" id="button" value="Submit" /></label></form></body></html></iframe></strong></a></td></tr>

--- PoC Session Logs [POST] ---


POST http://localhost:4096/5FCAF1DE-6D23-463B-ABE0-FFB0191DF038 Load Flags[LOAD_FROM_CACHE  ] Gr��e des Inhalts[-1] Mime Type[unbekannt]
   Request Header:
      Host[localhost:4096]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64;

rv:27.0) Gecko/20100101 Firefox/27.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer

[http://localhost:4096/5FCAF1DE-6D23-463B-ABE0-FFB0191DF038]
   POST-Daten:
      POST_DATA[-----------------------------23750323325183
Content-Disposition: form-data; name="upload1"; filename="../[LOCAL FILE INCLUDE VULNERABILITY!]_*"
Content-Type: image/png


1.2
The command inject vulnerability can be exploited by local attackers with physical device access or low privileged user account and without user interaction.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Sync > foldername [Index]

<tbody><tr><td rowspan="3"><img src="folder.jpg" height="50px" align="middle" width="50px"></td>
<td><a href="./[LOCAL COMMAND INJECT VULNERABILITY VIA FOLDERNAME]-" alt="./[LOCAL COMMAND INJECT VULNERABILITY VIA FOLDERNAME]-"><strong>
./[LOCAL COMMAND INJECT VULNERABILITY VIA FOLDERNAME]-</strong></a></td></tr><tr><td>Folder</td></tr><tr><td>2014-03-19</td></tr>
</tbody>


Solution - Fix & Patch:
=======================
1.1
The local command inject web vulnerability can be patched by a secure parse and encode of the vulnerable filename value in the upload file POST method request.
Encode also the filename index listing to prevent execution of malicious commands, injection of script codes or file include attacks.

1.2
The local command inject web vulnerability can be patched by a secure parse and restriction of the rename and foldername value in the wifi app.
Encode also the output index list were the folders will become visible after the sync.


Security Risk:
==============
1.1
The security risk of the local file include web vulnerability in the wifi exchange interface is estimated as high(+).

1.2
The local command inject vulnerability in the foldername value via sync is estimated as high(-).


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]

--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com