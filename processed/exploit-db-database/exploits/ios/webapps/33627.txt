Document Title:
===============
NG WifiTransfer Pro 1.1 - File Include Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1260


Release Date:
=============
2014-04-28


Vulnerability Laboratory ID (VL-ID):
====================================
1260


Common Vulnerability Scoring System:
====================================
6.5


Product & Service Introduction:
===============================
The easiest way to transfer files between iPhones or with computers! WifiTransfer enables fast wireless file transfer between
iPhones or with computers with a simple scan. WifiTransfer enables simple and ultra fast file transfer between iPhones over
Wi-Fi networks. Without any additional setup, just a QRCode scan will do. The target iPhone doesn`t have to install WifiTransfer.
An iPhone with an ARBITRARY scanner will do. (However, with WifiTransfer installed on the target iPhone, you will have better
control on the transfer process.)  In addition to transfer files between iPhone/iPad, you can also remotely manage files on your
iPhone right from your desktop computer. Supported browsers: Safari, Chrome, FireFox, Internet Explorer.

(Copy of the Homepage: https://itunes.apple.com/us/app/wifitransfer-pro-instant-file/id802094784 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the official Notable Group WifiTransfer Pro v1.1 iOS mobile web-application.


Vulnerability Disclosure Timeline:
==================================
2014-04-28:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
Notable Group
Product: WifiTransfer Pro - iOS Mobile Application 1.1


Exploitation Technique:
=======================
Local


Severity Level:
===============
High


Technical Details & Description:
================================
A local file include web vulnerability has been discovered in the official Notable Group WifiTransfer Pro v1.1 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific path
commands to compromise the mobile web-application.

The web vulnerability is located in the `filename` value of the `upload` module. Remote attackers are able to inject own files with malicious
`filename` values in the `upload` POST method request to compromise the mobile web-application. The local file/path include execution occcurs
in the `WifiTransfer File Management` listing context. The attacker is able to inject the local file include request by usage of the
`wifi interface` or by a local privileged application user account via `file sync`(app).

Remote attackers are also able to exploit the filename validation issue in combination with persistent injected script codes to execute different
local malicious attacks requests. The attack vector is on the application-side of the wifi service and the request method to inject is POST. The security
risk of the local file include web vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 6.5.

Exploitation of the local file include web vulnerability requires no user interaction but a privileged web-application user account with low user auth.
Successful exploitation of the local file include web vulnerability results in mobile application or connected device component compromise.

Request Method(s):
				[+] [POST] - Remote
				[+] [SYNC] - Local

Vulnerable Module(s):
				[+] WifiTransfer File Management (UI)

Vulnerable Function(s):
				[+] Upload

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:8080/)


Proof of Concept (PoC):
=======================
The local file include web vulnerability can be exploited by attackers without privileged application user account and low user interaction.
For security demonstration or to reproduce the file include web vulnerability follow the provided information and steps below to continue.

Manual steps to reproduce the vulnerability ...

1. Install the vulnerable wifi ios software app (https://itunes.apple.com/us/app/wifitransfer-pro-instant-file/id802094784)
2. Start the server and activate the localhost wifi server
3. Open the wifi interface in a browser or console > http://localhost:8080/
4. The the directory button to choose a file for a upload
5. Activate a session tamper to capture the request information to intercept
6. Click the upload button and inject your own path/file request inside of the filename value
7. Open the interface in the browser and the execution occurs in the file dir item listing context
8. Successful reproduce of the security vulnerability via wifi user interface!

Note: The inject is also possible via sync

1. Add a file in the device app interface
2. Inject the path request as payload in combination with script code and save
3. Activate the localhost wifi interface (web-server)
4. Open the interface in the browser and the execution occurs in the file dir item listing context
5. Successful reproduce of the security vulnerability via app sync!


PoC:
<table class="table table-hover" cellpadding="0" cellspacing="0" border="0">
                    <thead>
                        <tr><th>Name</th><th class="del">Action</th></tr>
                    </thead>
                    <tbody id="filelist">
                    <tr><td><a href="/files/%3C./-[LOCAL FILE INCLUDE VULNERABILITY!].png" class="file"><img src="img/image.png" style="vertical-align:middle;"><span><./-[LOCAL FILE INCLUDE VULNERABILITY!].png.png</span></a></td><td class='del'><div><a href='/files/%3C./-[LOCAL FILE INCLUDE VULNERABILITY!].png' class='btn btn-info btn-sm'>Download</a><form action='/files/%3C./-[LOCAL FILE INCLUDE VULNERABILITY!].png' method='post'><input name='_method' value='delete' type='hidden'/><input name="commit" type="submit" value="   Delete   " class='btn btn-danger btn-sm' /></div></td></tr></tbody></table></iframe></span></a></td></tr></tbody>
                </table>



--- PoC Session Logs [POST] ---
Status: 302[Found]
POST http://localhost:8080/files Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[67] Mime Type[text/html]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/]
      Connection[keep-alive]
   POST-Daten:
      POST_DATA[-----------------------------2128355697111
Content-Disposition: form-data; name="newfile"; filename="./-[LOCAL FILE INCLUDE VULNERABILITY!].png"
Content-Type: image/png


Reference(s):
http://localhost:8080/
http://localhost:8080/files


Solution - Fix & Patch:
=======================
The vulnerability can be patched by a secure parse and encode of the vulnerable filename input value in the upload POST method request.
Filter and encode also the name value output in the wifi interface file dir listing.
Setup a restriction of the filename input and disallow data names with special chars.


Security Risk:
==============
The security risk of the local file include web vulnerability in the wifi interface is estimated as high.


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - LariX4 (research@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]

--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com