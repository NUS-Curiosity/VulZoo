Document Title:
===============
PhotoWIFI Lite v1.0 iOS - Multiple Web Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1239


Release Date:
=============
2014-03-27


Vulnerability Laboratory ID (VL-ID):
====================================
1239


Common Vulnerability Scoring System:
====================================
6.7


Product & Service Introduction:
===============================
Share photos and files through WIFI. This app will let you transfer images easily in both directions, iPhone-to-Mac and Mac-to-iPhone.
This app runs on iPhone, iPad and iPod, and you can share with a Mac or a PC as well. Photo Uploading to Facebook is also possible.

(Copy of the Homepage: https://itunes.apple.com/us/app/wifi-photos-files-transfer/id436339474 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the official PhotoWIFI Lite or WIFI Photo and Files Transfer v1.0 iOS mobile web-application.


Vulnerability Disclosure Timeline:
==================================
2014-03-27:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
TapCoder
Product: PhotoWIFI Lite & PRO - iOS Mobile Web Application 1.0


Exploitation Technique:
=======================
Remote


Severity Level:
===============
High


Technical Details & Description:
================================
1.1
A local file include web vulnerability has been discovered in the official PhotoWIFI Lite or WIFI Photo and Files Transfer v1.0 iOS mobile web-application.
A file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific path commands
to compromise the web-application or mobile device.

The local vulnerability is located in the `filename` value of the `Upload File` module. Remote attackers are able to inject own files with
malicious `filename` value in the upload POST method request to compromise the mobile web-application. The attack vector is persistent and
the request method to inject is POST. The local file/path include execution occcurs in the index file dir listing. The security risk of the
local file include web vulnerability is estimated as high(+) with a cvss (common vulnerability scoring system) count of 6.4(+)|(-)6.5.

Exploitation of the local file include web vulnerability requires no user interaction but a privileged web-application user account with low user
auth. Successful exploitation of the local file include web vulnerability results in mobile application or connected device component compromise.


Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] Upload File > Submit

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File Dir List (http://localhost:85***/)



1.2
An arbitrary file upload web vulnerability has been discovered in the official PhotoWIFI Lite or WIFI Photo and Files Transfer v1.0 iOS mobile web-application.
The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server or system validation.

The vulnerability is located in the `Upload File` > submit module. Remote attackers are able to upload a php or js web-shells by renaming
the file with multiple extensions to bypass the file restriction mechanism. The attacker uploads for example a web-shell with the following name
and extension `ptest.jpg.html.php.js.aspx.jpg`. After the upload the attacker needs to open the file with the path value in the web application.
He deletes the .jpg file extension and can access the application with elevated executable access rights. To access the file with elevated
executable access rights the attacker needs to implement the local raw upload path of the application. The security risk of the arbitrary file
upload web vulnerability is estimated as high(+) with a cvss (common vulnerability scoring system) count of 6.6(+)|(-)6.7.

Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privileged application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.

Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] Upload File > Submit

Vulnerable Parameter(s):
				[+] filename (multiple extensions)

Affected Module(s):
				[+] Index File Dir List (http://localhost:85***/)



1.3
A local command/path injection web vulnerability has been discovered in the official PhotoWIFI Lite or WIFI Photo and Files Transfer v1.0 iOS mobile web-application.
The vulnerability allows to inject local commands via vulnerable system values to compromise the apple mobile iOS application.

The vulnerability is located in the vulnerable `devicename` value of the wireless transfer app index header location module.
Local attackers with physical device access are able to manipulate the iOS `devicename` to compromise the affected header
location context in the file dir index list. The execution of the injected command/path request occurs in the all wifi
interface sites with implemented devicename in the header location. The request method to inject system specific commands via
the vulnerable devicename value is a local sync via (apple - ios) device.The security risk of the command/path inject
vulnerability is estimated as high(-) with a cvss (common vulnerability scoring system) count of 6.6(-).

Exploitation of the command/path inject vulnerability requires a local low privileged iOS device account with restricted access
and no direct user interaction. Successful exploitation of the vulnerability results unauthorized execution of system specific
commands or unauthorized path requests.

Request Method(s):
				[+] [SYNC]

Vulnerable Parameter(s):
				[+] devicename

Affected Module(s):
				[+] Header Location - Index File Dir List (http://localhost:85***/)


Proof of Concept (PoC):
=======================
1.1
The local file include web vulnerability can be exploited by local attackers with low user interaction and with low privileged web-interface account.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Index File Dir Listing < filename
<p>Pick an image on iPhone (or iPad) and click: <a href="">Refresh</a><br></p><table border="0" cellpadding="5"
cellspacing="0"><tbody><tr bgcolor="#999999"><td><a href="<./[LOCAL FILE INCLUDE VULNERABILITY!]">.png"><./[LOCAL FILE INCLUDE VULNERABILITY!]">.png</a></td>

--- PoC Session Logs [POST] ---
Status: 200[OK]
POST http://localhost:52789/ Load Flags[VALIDATE_ALWAYS LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[unknown] Mime Type[unknown]
   Request Header:
      Host[localhost:52789]
      User-Agent

[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip,

deflate]
      Referer[http://localhost:52789/]
   POST-Daten:
      POST_DATA[-----------------------------55143247013257
Content-Disposition: form-data; name="file"; filename="./[LOCAL FILE INCLUDE VULNERABILITY!]".png"
Content-Type: image/png


1.2
The arbitrary file upload web vulnerability can be exploited by local attackers without user interaction or privileged application user account.
For security demonstration or to reproduce the file upload web vulnerability follow the provided information and steps below to continue.

PoC: Index File Dir Listing < filename
<p>Pick an image on iPhone (or iPad) and click: <a href="">Refresh</a><br></p><table border="0" cellpadding="5"
cellspacing="0"><tbody><tr bgcolor="#999999"><td><a href="test.jpg.html.php.asp.html.jpg[ARBITRARY FILE UPLOAD VULNERABILITY!]">
test.jpg.html.php.asp.html.jpg.png[ARBITRARY FILE UPLOAD VULNERABILITY!]</a></td>

--- PoC Session Logs [POST] ---
Status: 200[OK]
POST http://localhost:52789/ Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[1009] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:52789]
      User-Agent

[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip,

deflate]
      Referer[http://localhost:52789/]
      Connection[keep-alive]
   POST-Daten:
      POST_DATA[-----------------------------65831034010479
Content-Disposition: form-data; name="file"; filename="test.jpg.html.php.asp.html.jpg[ARBITRARY FILE UPLOAD VULNERABILITY!]"
Content-Type: image/jpeg


1.3
The command inject web vulnerability can be exploited by local attackers with low user interaction and low privileged web-application user account.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Index File Dir Listing > Header Location > Devicename
<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Files from IPhone 360*�337[COMMAND INJECTION VULNERABILITY VIA DEVICENAME!]</title><style>html
{background-color:#eeeeee} body { background-color:#FFFFFF; font-family:Tahoma,Arial,Helvetica,sans-serif; font-size:18x; margin-left:5%;
margin-right:5%; border:3px groove #006600; padding:15px; } </style></head><body><h1>Files from IPhone 360*�337[COMMAND INJECTION VULNERABILITY VIA DEVICENAME!]</h1>


Security Risk:
==============
1.1
The security risk of the local file include web vulnerability is estimated as high.

1.2
The security risk of the arbitrary file upload web vulnerability is estimated as high.

1.3
The security risk of the local command inject web vulnerability via sync is estimated as medium(+)|(-)high.


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]



--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com