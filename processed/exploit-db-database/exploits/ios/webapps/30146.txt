Document Title:
===============
Print n Share v5.5 iOS - Multiple Web Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1154


Release Date:
=============
2013-12-06


Vulnerability Laboratory ID (VL-ID):
====================================
1154


Common Vulnerability Scoring System:
====================================
9.2


Product & Service Introduction:
===============================
Print directly to the widest range of network or WiFi printers, without a computer or AirPrint! Alternatively print
via your Mac/PC to ALL printers including USB & Bluetooth printers. Print... documents cloud files,web pages,emails,
attachments, photos, contacts, calendars, clipboard items, convert to PDF and much more - to ANY PRINTER!

(Copy of the Homepage: https://itunes.apple.com/en/app/print-n-share-der-all-in-one/id301656026


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple web vulnerabilities in the Print n Share v5.5 mobile application for apple iOS.


Vulnerability Disclosure Timeline:
==================================
2013-12-01:    Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
EuroSmartz Ltd
Product: Print n Share 5.5


Exploitation Technique:
=======================
Remote


Severity Level:
===============
Critical


Technical Details & Description:
================================
1.1
A local file/path include web vulnerability has been discovered in the official Print n Share v5.5 mobile application for apple iOS.
The file include vulnerability allows remote attackers to include (upload) local file or path requests to compromise the application or service.

The remote file include web vulnerability is located in the import file module in the filename value. Remote attackers can inject own files or
path requests by adding regular text files (add). It is also possible to use the `rename` or `import` function to inject. The file include and
path request execute occurs in the main file dir index or subcategory listing of the mobile application. The security risk of the local file
include web vulnerability is estimated as high(+) with a cvss (common vulnerability scoring system) count of 8.4(+).

Exploitation of the local file include web vulnerability requires no user interaction or privileged web-application user account with password.
Successful exploitation of the vulnerability results in unauthorized local file uploads and path requests to compromise the device or mobile app.

Request Method(s):
				[+] [POST]

Vulnerable Inputs(s):
				[+] Neue Text Datei (New Text File)
				[+] Umbenennen File (Rename File)

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:8080)



1.2
An arbitrary file upload web vulnerability has been discovered in the official Print n Share v5.5 mobile application for apple iOS.
The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server or system validation.

The vulnerability is located in the import file module. Remote attackers are able to upload a php or js web-shells by renaming the file with
multiple extensions to bypass the file restriction mechanism. The attacker uploads for example a web-shell with the following name and extension
`image.jpg.gif.js.php.jpg`. After the upload the attacker needs to open the file in the web application. He deletes the .jpg & . gif file
extension and can access the application with elevated access rights. The security risk of the arbitrary file upload web vulnerability is
estimated as high with a cvss (common vulnerability scoring system) count of 7.8(+).

Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.


Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] File Import

Vulnerable Inputs(s):
				[+] Importieren - File > Sync

Vulnerable Parameter(s):
				[+] filename (multiple extensions)

Affected Module(s):
				[+] File Path Listing (http://localhost:8080)



1.3
A persistent input validation web vulnerability has been discovered in the official Print n Share v5.5 mobile application for apple iOS.
The (persistent) vulnerability allows remote attacker to inject own malicious script code on the application-side of the mobile application.

The persistent input validation vulnerability is located in the Ordername (foldername) value of the print n share mobile web-application.
The exploitation can be done by usage of the local standard iOS pictures or video (default) app. Attackers rename the local device photo
or video foldername.The persistent execute occurs in the listed folder of the web-server interface (http://localhost:8080). Remote attackers
can also change the foldername by usage of the application to exploit (inject) via POST method own script code with persistent attack vector.
The vulnerable input are the `Ordername`(folder name), `Neuer Order` (new folder) and `Order Umbenennen` (folder rename). The security risk
of the persistent input validation web vulnerability is estimated as medium(+) with a cvss (common vulnerability scoring system) count of 4.5(+).

Exploitation of the persistent input validation web vulnerability requires no privileged mobile application user account but low or medium
user interaction. Successful exploitation of the persistent vulnerability results in persistent session hijacking (customers) attacks, account
steal via persistent web attacks, persistent phishing or persistent manipulation of vulnerable module context.

Request Method(s):
				[+] [POST]

Vulnerable Input(s):
				[+] Ordnername - (Foldername)
				[+] Neuer Ordner - (New Folder)
				[+] Ordner Umbenennen - (Rename Folder)

Vulnerable Parameter(s):
				[+] foldername - (path)

Affected Module(s):
				[+] File Dir List


Proof of Concept (PoC):
=======================
1.1
The file include web vulnerability can be exploited by remote attackers without user interaction and also without privileged
web-application user account. For security demonstration or to reproduce the vulnerability follow the steps and information below.

PoC:
http://localhost:8080/[LOCAL FILE INCLUDE WEB VULNERABILITY!]">X>"<<>"</[LOCAL FILE INCLUDE WEB VULNERABILITY!]">.php


PoC Source: Local File Include Vulnerability - Filename

<html><head>
<title>/</title>
<meta http-equiv="CONTENT-TYPE" content="text/html; charset=UTF-8">
</head>
<body>
<h2>?/</h2><br><a href="/Clip-Archiv/">Clip-Archiv/</a>
<br>X<a href="/[LOCAL FILE INCLUDE WEB VULNERABILITY!]">X>"<<>"</[LOCAL FILE INCLUDE WEB VULNERABILITY!]">.php</a>
<br><a href="/[LOCAL FILE INCLUDE WEB VULNERABILITY!]">[LOCAL FILE INCLUDE WEB VULNERABILITY!].txt</a>
</body>
<html>
</iframe></a></body></html>

Reference(s):
http://localhost:8080/



1.2
The arbitrary file upload vulnerability can be exploited by remote attackers without user interaction and also without privileged
web-application user account. For security demonstration or to reproduce the vulnerability follow the steps and information below.


PoC:
http://localhost:8080/[file to path]">X>"<<>"</[ARBITRARY FILE UPLOAD WEB VULNERABILITY!]">.jpg.gif..html.js.php.gif.jpg


PoC Source: Arbitrary File Upload Vulnerability - Filename

<html><head>
<title>/</title>
<meta http-equiv="CONTENT-TYPE" content="text/html; charset=UTF-8">
</head>
<body>
<h2>?/</h2><br><a href="/Clip-Archiv/">Clip-Archiv/</a>
<br>X<a href="/[file]">X>"<<>"</[ARBITRARY FILE UPLOAD WEB VULNERABILITY!]">.jpg.gif..html.js.php.gif.jpg</a>
<br><a href="/[file]">[ARBITRARY FILE UPLOAD WEB VULNERABILITY!].jpg.gif..html.js.php.gif.jpg</a>
</body>
<html>
</iframe></a></body></html>

Reference(s):
http://localhost:8080/



1.3
The persistent input validation vulnerability can be exploited by remote attackers without privileged web-application user account
and with low user interaction. For security demonstration or to reproduce the vulnerability follow the steps and information below.

PoC:
http://localhost:8080/%3E%22%3C%3C%3E%22%3C[PERSISTENT INJECTED SCRIPT CODE!]%3E/">


PoC Source: Persistent Input Validation Vulnerability - Ordnername (Foldername)

<body>
<h2>ï»¿/</h2><br><a href="http://localhost:8080/Clip-Archiv/">Clip-Archiv/</a>
<br><a href="http://localhost:8080/%3E%22%3C%3C%3E%22%3C[PERSISTENT INJECTED SCRIPT CODE!]%3E/">>"
<<>"<[PERSISTENT INJECTED SCRIPT CODE!]">/</a>
<br><a href="/Schnellstart.txt">Schnellstart.txt</a>


Reference(s):
http://localhost:8080/



Solution - Fix & Patch:
=======================
1.1
The file include web vulnerability can be patched by a secure encode and parse of the filename and the connected path value.

1.2
to fix the arbitrary file upload vulnerability it is required to restrict with a filter mechanism the filename extensions.
Disallow multiple extensions and setup and own exception-handling to prevent arbitrary file uploads and restricted file upload bypass.

1.3
To patch the persistent input validation web vulnerability parse and encode the `Ordername` (foldername) input values
in the import, add and rename function.
Filter and encode also the vulnerable output section of the malicious injected test values.


Security Risk:
==============
1.1
The security risk of the local file include web vulnerability is estimated as critical with a cvss (common vulnerability scoring system) count of 8.4(+).

1.2
The security risk of the arbitrary file upload and upload restriction bypass vulnerability is estimated as high(+) with a cvss (common vulnerability scoring system) count of 7.8(+).

1.3
The security risk of the persistent input validation web vulnerability is estimated as medium(+) with a cvss (common vulnerability scoring system) count of 4.5(+).


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright ï¿½ 2013 | Vulnerability Laboratory [Evolution Security]


--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com