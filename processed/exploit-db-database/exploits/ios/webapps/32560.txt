Document Title:
===============
ePhone Disk v1.0.2 iOS - Multiple Web Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1230


Release Date:
=============
2014-03-25


Vulnerability Laboratory ID (VL-ID):
====================================
1230


Common Vulnerability Scoring System:
====================================
6.9


Product & Service Introduction:
===============================
ePhone Disk is lightweight file manager that lets you download, organize, transfer, offline read your files.
It provides the most advanced WiFi sharing features in market.

SHARE FILES VIA WIFI
- Access iPhone like a USB drive from computer, simply use Drag and Drop to manage files
- Discover nearby devices, and discoverable by others
- Single tap to connect to nearby devices
- Accessible from any WebDav client

( Copy of the Homepage: https://itunes.apple.com/us/app/ephone-disk-download-share/id621895613 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the official Easiermobile Inc - ePhone Disk v1.0.2 iOS mobile web-application.


Vulnerability Disclosure Timeline:
==================================
2014-03-25:	Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
Easiermobile Inc
Product: ePhone Disk iOS - Download, Share Files via WiFi 1.0.2


Exploitation Technique:
=======================
Local


Severity Level:
===============
High


Technical Details & Description:
================================
1.1
A local file include web vulnerability has been discovered in the official Easiermobile Inc - ePhone Disk v1.0.2 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific path
commands to compromise the web-application or mobile device.

The web vulnerability is located in the `filename` value of the `Upload file` module. Remote attackers are able to inject own files with malicious
`filename` value in the upload POST method request to compromise the mobile web-application. The attack vector is persistent and the request
method is POST. The local file/path include execution occcurs in the main file dir list. The security risk of the local file include web vulnerability
is estimated as high(+) with a cvss (common vulnerability scoring system) count of 6.8(+)|(-)6.9.

Exploitation of the local file include web vulnerability requires no user interaction but a privileged web-application user account with low user auth.
Successful exploitation of the local file include web vulnerability results in mobile application or connected device component compromise.

Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] Upload File

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Upload File > Index File Dir List (http://localhost:8080)



1.2
A local command/path injection web vulnerabilities has been discovered in the official Easiermobile Inc - ePhone Disk v1.0.2 iOS mobile web-application.
A command inject vulnerability allows attackers to inject local commands via vulnerable system values to compromise the apple mobile iOS application.

The vulnerability is located in the vulnerable `foldername` value of the wifi file dir list module. Local attackers are able to inject own malicious
system specific commands or path value requests in the vulnerable foldername value. The injection requires a active sync with the wifi app stored folders.
The execution of the local command inject bug via foldername value on sync occurs in the file dir index list of the main upload path. The security risk of
the local command/path inject vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 6.3(+)|(-)6.4.

Exploitation of the command/path inject vulnerability requires a low privileged iOS device account with restricted access and no user interaction.
Successful exploitation of the vulnerability results in unauthorized execution of system specific commands and unauthorized path value requests to
compromise the mobile iOS application or the connected device components.

Request Method(s):
				[+] Sync [POST]

Vulnerable Parameter(s):
				[+] foldername (path value)

Affected Module(s):
				[+] ./[iPhone]/Sub Category x - File Dir Listing



1.3
A remote denial of service web vulnerability has been discovered in the official Easiermobile Inc - ePhone Disk v1.0.2 iOS mobile web-application.
A denial of service vulnerability allows remote attackers to block, freeze or crash the affected or vulnerable mobile online-service application.

The vulnerability is located in the vulnerable `[download]` value of the downloads module. Local attackers are able to include tags as download
path value via GET method request. The application responds with an unhandled exception and the result is a permanent online-service and
application crash. The security risk of the remote denial of service web vulnerability is estimated as low(+) with a cvss (common vulnerability
scoring system) count of 1.8(+)|(-)1.9.

Exploitation of the denial of service web vulnerability requires no privileged iOS device account but  low user interaction (allow|accept).
Successful exploitation of the DoS vulnerability results in unauthorized execution of system specific commands and unauthorized path value
requests to compromise the mobile iOS application or the connected device components.

Request Method(s):
				[+] [GET]

Vulnerable Parameter(s):
				[+] ?download


Proof of Concept (PoC):
=======================
1.1
The local file include web vulnerability can be exploited by local attackers with low user interaction and with low privileged web-interface account.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Upload File > Name > [Index File Dir List]

<table xmlns="http://www.w3.org/1999/xhtml"><thead><th class="icon"/><th class="name">Name</th><th class="modifieddate">Date Modified</th>
<th class="size">Size</th><th/></thead><tbody><tr><td class="icon"><a href=".."><img src="/static/backToParent_icon.png"/></a></td>
<td class="name"><a href="..">Parent Directory</a></td><td class="modifieddate"/><td class="size"/><td/></tr><tr><td class="icon">
<a href="/iPhone/Downloads/./[LOCAL FILE INCLUDE VULNERABILITY!].png">
<img src="/iPhone/Downloads/./[LOCAL FILE INCLUDE VULNERABILITY!].png?thumbnail=1"/></a></td>
<td class="name"><a href="/iPhone/Downloads/./[LOCAL FILE INCLUDE VULNERABILITY!].png">./[LOCAL FILE INCLUDE VULNERABILITY!].png</a></td>
<td class="modifieddate">2014-03-19 14:09</td><td class="size">538 bytes</td>
<td class="download"><a href="/iPhone/Downloads/./[LOCAL FILE INCLUDE VULNERABILITY!].png?download=1">
download</a></td></tr></tbody></table>


--- PoC Sesion Logs [POST] ---
Status: 200[OK]
POST http://localhost:8080/iPhone/Downloads?upload=1 Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[0] Mime Type[text/plain]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/iPhone/Downloads]
      Connection[keep-alive]
   POST-Daten:
      POST_DATA[-----------------------------57142047116429
Content-Disposition: form-data; name="file"; filename="./[LOCAL FILE INCLUDE VULNERABILITY!].png"
Content-Type: image/png



1.2
The command inject web vulnerability can be exploited by local attackers with low user interaction and low privileged web-application user account.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Foldername > Name > [Index File Dir List]

<table xmlns="http://www.w3.org/1999/xhtml"><thead><th class="icon"></th><th class="name">Name</th>
<th class="modifieddate">Date Modified</th><th class="size">Size</th><th/></thead><tbody><tr><td class="icon">
<a><img src="/static/GenericFolderIcon.png"/></a></td><td class="name"><a href="/iPhone/[LOCAL COMMAND INJECTION VULNERABILITY!]>
[LOCAL COMMAND INJECTION VULNERABILITY!]">iPhone/[LOCAL COMMAND INJECTION VULNERABILITY!]</a></td><td class="modifieddate">2014-03-19 14:11</td>
<td class="size">--
</td><td class="download"/></tr></tbody></table>



1.3
The denial of service web vulnerability can be exploited by remote attackers with low user interaction (allow|accept).
For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.

PoC:
http://localhost:8080/iPhone/Downloads/[FileName].*?download=[REMOTE DENIAL OF SERVICE VULNERABILITY!]

Note: After the accept of the device owner the application permanent crashes.
A encode problem returns with an error which results in a crash via memory corruption.


Solution - Fix & Patch:
=======================
1.1
The first vulnerability can be patched by a secure parse of the filename value in the upload file module POST method request.
Encode also the output file dir index list with the vulnerable filename output value to prevent injection of malicious context.

1.2
The first vulnerability can be patched by a secure parse of the folder name value in the app sync module POST method request.
Encode also the output file dir index list with the vulnerable folder name output value to prevent injection of malicious context.

1.3
Restrict the download value to integer and allocate the memory. Implement an own little exception-handling to prevent remote denial of service attacks.


Security Risk:
==============
1.1
The security risk of the local file include vulnerability is estimated as critical.

1.2
The security risk of the local command inject vulnerability via phone foldername sync is estimated as high.

1.3
The security risk of the remote denial of service vulnerability is estimated as low(+).


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - LariX4 (research@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]



--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com