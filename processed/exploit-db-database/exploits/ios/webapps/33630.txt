Document Title:
===============
TigerCom My Assistant v1.1 iOS - File Include Vulnerability


References (Source):
====================
http://www.vulnerability-lab.com/get_content.php?id=1268


Release Date:
=============
2014-05-23


Vulnerability Laboratory ID (VL-ID):
====================================
1268


Common Vulnerability Scoring System:
====================================
6.9


Product & Service Introduction:
===============================
Folder manager, Convenient transmission, Document browsing, Compression & Decompression, Password-protected.

- Support multi-level directory management
- Add new folder
- Open camera, store photos and recording video
- Photos and video high fidelity storage
- Import photos and videos from album
- Export photos and videos to your album
- Copy, paste, delete, Email attachments
- Support multiple files operation
- Support sorting by name and type
- Icon shows file type

Convenient transmission:
- Wifi Transmission, you can share files between iphone, ipad and computer
- Current open folder sharing, better protect your privacy
- USB transfer and share files via Itunes

Document browsing:
- Txt document browsing and editing (txt)
- PDF document browsing (pdf)
- Word browsing (doc, docx)
- Excel browsing (xls, xlsx)
- PowerPoint browsing (ppt, pptx)
- Picture browsing (png, jpg, jpeg, jpe)
- Video player (mov, mp4, m4v, mpv, 3pg)
- Audio player (mp3, wav, aif)

Safty:
- Intelligent encryption, protect the folder
- Password-protected switch

( Copy of the Homepage: https://itunes.apple.com/en/app/my-assistant-free/id626680229 )


Abstract Advisory Information:
==============================
The Vulnerability Laboratory Research Team discovered a local file include web vulnerability in the official TigerCom My Assistant v1.1 iOS mobile web-application.


Vulnerability Disclosure Timeline:
==================================
2014-05-23: Public Disclosure (Vulnerability Laboratory)


Discovery Status:
=================
Published


Affected Product(s):
====================
TigerCom
Product: My Assistant Free 1.1


Exploitation Technique:
=======================
Local


Severity Level:
===============
High


Technical Details & Description:
================================
A local file include web vulnerability has been discovered in the official TigerCom My Assistant v1.1 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system specific
path commands to compromise the mobile web-application.

The web vulnerability is located in the `filename` value of the `UPLOAD_FILE_TO_FOLDER` (uploadfile) module. Remote attackers are able
to inject own files with malicious `filename` values in the `upload` POST method request to compromise the mobile web-application. The local
file/path include execution occcurs in the index file/folder list context in the vulnerable name/path value. The attacker is able to inject
the local file include request by usage of the available `wifi interface`.

Remote attackers are also able to exploit the filename validation issue in combination with persistent injected script codes to execute
different local malicious attacks requests. The attack vector is on the application-side of the wifi service and the request method to
inject is POST.

The security risk of the local file include web vulnerability is estimated as high with a cvss (common vulnerability scoring system)
count of 7.0. Exploitation of the local file include web vulnerability requires no privileged web-application user account but low
user interaction. Successful exploitation of the local file include web vulnerability results in mobile application or connected
device component compromise.


Request Method(s):
				[+] [POST]

Vulnerable Service(s):
				[+] WiFi Sharing

Vulnerable Module(s):
				[+] UPLOAD_FILE_TO_FOLDER

Vulnerable File(s):
				[+] uploadfile

Vulnerable Parameter(s):
				[+] filename

Affected Module(s):
				[+] Index File/Folder Dir Listing (http://localhost:8080/)


Proof of Concept (PoC):
=======================
The local file/path include web vulnerability can be exploited by local network attackers with low user interaction. For security demonstration or
to reproduce the vulnerability follow the provided information and steps below to continue.

PoC: UPLOAD FILE TO FOLDER
<tbody><tr style="background:#fff;"><td colspan="2" align="left">Current Folder: Document</td></tr><tr style="background:#fff;">
<td colspan="2" align="right"><a href="/UPLOAD_FILE_TO_FOLDER">Uploading files</a>  </td></tr><tr><td colspan="2">
<a href="68-2.png" target="_blank"> 68-2.png </a></td></tr><tr><td colspan="2">
<a href="%20./../[LOCAL FILE/PATH INCLUDE WEB VULNERABILITY!].filetype" target="_blank"> %20./../[LOCAL FILE/PATH INCLUDE WEB VULNERABILITY!].filetype </a></td></tr>
<tr><td colspan="2"><a href="night-city-pictures-24.jpg" target="_blank"> night-city-pictures-24.jpg </a></td></tr>
</table></div></body>
</html></iframe></a></td></tr></tbody>



--- PoC Session Logs [POST] ---
Status: 200[OK]
 POST http://localhost:8080/uploadfile Load Flags[LOAD_DOCUMENT_URI  LOAD_INITIAL_DOCUMENT_URI  ] Gr��e des Inhalts[-1] Mime Type[application/x-unknown-content-type]
   Request Header:
      Host[localhost:8080]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de,en-US;q=0.7,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      Referer[http://localhost:8080/UPLOAD_FILE_TO_FOLDER]
      Connection[keep-alive]
   POST-Daten:
      POST_DATA[-----------------------------189051727528435
Content-Disposition: form-data; name="upload1"; filename="<%20./../[LOCAL FILE/PATH INCLUDE WEB VULNERABILITY!].filetype"
Content-Type: image/x


Reference(s):
http://localhost:8080/uploadfile
http://localhost:8080/UPLOAD_FILE_TO_FOLDER


Solution - Fix & Patch:
=======================
The vulnerability can be patched by a secure restriction and parse of the vulnerable filename value in the multi upload module.
Restrict the input name value and encode the name output value in the index listing module to prevent further local file include attacks.
Do not forget to disallow multiple file extensions which could result in the bypass or the filetype validation.


Security Risk:
==============
The security risk of the local file include web vulnerability in the upload to file index module is estimated as high.


Credits & Authors:
==================
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]


Disclaimer & Information:
=========================
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either
expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers
are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even
if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation
of liability for consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break
any vendor licenses, policies, deface websites, hack into databases or trade with fraud/stolen material.

Domains:    www.vulnerability-lab.com   	- www.vuln-lab.com			       		- www.evolution-sec.com
Contact:    admin@vulnerability-lab.com 	- research@vulnerability-lab.com 	       		- admin@evolution-sec.com
Section:    dev.vulnerability-db.com	 	- forum.vulnerability-db.com 		       		- magazine.vulnerability-db.com
Social:	    twitter.com/#!/vuln_lab 		- facebook.com/VulnerabilityLab 	       		- youtube.com/user/vulnerability0lab
Feeds:	    vulnerability-lab.com/rss/rss.php	- vulnerability-lab.com/rss/rss_upcoming.php   		- vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  	- vulnerability-lab.com/list-of-bug-bounty-programs.php	- vulnerability-lab.com/register/

Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact
(admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.

				Copyright � 2014 | Vulnerability Laboratory [Evolution Security]



--
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com