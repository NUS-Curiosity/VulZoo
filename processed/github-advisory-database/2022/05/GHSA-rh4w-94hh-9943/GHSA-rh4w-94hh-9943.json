{
  "schema_version": "1.4.0",
  "id": "GHSA-rh4w-94hh-9943",
  "modified": "2023-06-13T17:24:13Z",
  "published": "2022-05-24T17:37:49Z",
  "aliases": [
    "CVE-2020-35905"
  ],
  "summary": "MutexGuard::map can cause a data race in safe code",
  "details": "Affected versions of the crate had a Send/Sync implementation for MappedMutexGuard that only considered variance on T, while MappedMutexGuard dereferenced to U.\n\nThis could of led to data races in safe Rust code when a closure used in MutexGuard::map() returns U that is unrelated to T.\n\nThe issue was fixed by fixing Send and Sync implementations, and by adding a PhantomData<&'a mut U> marker to the MappedMutexGuard type to tell the compiler that the guard is over U too.",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "futures-util"
      },
      "ecosystem_specific": {
        "affected_functions": [
          "futures_util::lock::MutexGuard::map"
        ]
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0.3.2"
            },
            {
              "fixed": "0.3.7"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-35905"
    },
    {
      "type": "WEB",
      "url": "https://github.com/rust-lang/futures-rs/issues/2239"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/rust-lang/futures-rs"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0059.html"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-362"
    ],
    "severity": "MODERATE",
    "github_reviewed": true,
    "github_reviewed_at": "2022-06-16T23:55:12Z",
    "nvd_published_at": "2020-12-31T09:15:00Z"
  }
}