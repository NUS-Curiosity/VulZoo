{
  "schema_version": "1.4.0",
  "id": "GHSA-29qp-crvh-w22m",
  "modified": "2025-02-06T17:31:23Z",
  "published": "2025-01-29T19:19:11Z",
  "withdrawn": "2025-02-06T17:31:23Z",
  "aliases": [],
  "summary": "Withdrawn Advisory: github.com/hashicorp/yamux's DefaultConfig has dangerous defaults causing hung Read",
  "details": "## Withdrawn Advisory\nThis advisory has been withdrawn because further research determined that `github.com/hashicorp/yamux` was not vulnerable to denial of service in the manner described. This link is maintained to preserve external references.\n\n## Original Description\nThe default values for Session.config.KeepAliveInterval and Session.config.ConnectionWriteTimeout of 30s and 10s create the possibility for timed out writes that most aren't handling in their readers.\n\nCalls to Stream.Read on one side of a connection will hang until the underlying Session is closed if the corresponding Stream.Write call on the other side it's waiting for returns with ErrConnectionWriteTimeout. This happens in the case of network congestion between the two sides.\n\nIf you keep Session.sendCh full (fixed capacity of 64) for ConnectionWriteTimeout, but for less than the KeepAliveInterval + ConnectionWriteTimeout (which would kill the Session), Stream.Write will return ErrConnectionWriteTimeout. The state of the underlying Session or Stream is not modified. When this happens, the other side's Stream.Read call that's waiting for that write will never return because there's no timeout for this edge-case.\n\nSince no keep alive timed out, you can continue to use the Session once the network congestion is resolved, but that Stream.Read call will only return when the Session closes or the response shows up. Since the write call on the other side timed out the call to Stream.Read will never return.\n\nAny conditions that cause network writes to stall for 10-30 seconds can trigger this Denial of Service- extremely high CPU contention on either side of the connection, BGP reconvergence, etc. To resolve the Denial of Service issue, you have to re-establish the connections, which will usually require a hard restart of the service on either end of the connection.",
  "severity": [
    {
      "type": "CVSS_V4",
      "score": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N/E:U"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "Go",
        "name": "github.com/hashicorp/yamux"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0.1.0"
            },
            {
              "last_affected": "0.1.2"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/golang/vulndb/issues/3408"
    },
    {
      "type": "WEB",
      "url": "https://github.com/golang/vulndb/issues/3453"
    },
    {
      "type": "WEB",
      "url": "https://github.com/hashicorp/yamux/issues/142"
    },
    {
      "type": "WEB",
      "url": "https://github.com/hashicorp/yamux/pull/143"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/hashicorp/yamux"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-770"
    ],
    "severity": "MODERATE",
    "github_reviewed": true,
    "github_reviewed_at": "2025-01-29T19:19:11Z",
    "nvd_published_at": null
  }
}