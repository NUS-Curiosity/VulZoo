{
  "schema_version": "1.4.0",
  "id": "GHSA-4hjg-cx88-g9f9",
  "modified": "2023-06-13T18:10:45Z",
  "published": "2021-08-25T20:49:58Z",
  "aliases": [
    "CVE-2020-35915"
  ],
  "summary": "Data races in futures-intrusive",
  "details": "GenericMutexGuard<T> was given the Sync auto trait as long as T is Send due to its contained members. However, since the guard is supposed to represent an acquired lock and allows concurrent access to the underlying data from different threads, it should only be Sync when the underlying data is.\n\nThis is a soundness issue and allows data races, potentially leading to crashes and segfaults from safe Rust code.\n\nThe flaw was corrected by adding a T: Send + Sync bound for GenericMutexGuard's Sync trait.",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "futures-intrusive"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.4.0"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-35915"
    },
    {
      "type": "WEB",
      "url": "https://github.com/Matthias247/futures-intrusive/issues/53"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/Matthias247/futures-intrusive"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0072.html"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-362"
    ],
    "severity": "MODERATE",
    "github_reviewed": true,
    "github_reviewed_at": "2021-08-19T20:49:04Z",
    "nvd_published_at": null
  }
}