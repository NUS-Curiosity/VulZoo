{
  "schema_version": "1.4.0",
  "id": "GHSA-jrh5-vhr9-qh7q",
  "modified": "2024-11-13T18:58:32Z",
  "published": "2024-11-13T14:12:36Z",
  "aliases": [
    "CVE-2024-52291"
  ],
  "summary": "Local File System Validation Bypass Leading to File Overwrite, Sensitive File Access, and Potential Code Execution",
  "details": "### Summary\nA vulnerability in CraftCMS allows an attacker to bypass local file system validation by utilizing a double `file://` scheme (e.g., `file://file:////`). This enables the attacker to specify sensitive folders as the file system, leading to potential file overwriting through malicious uploads, unauthorized access to sensitive files, and, under certain conditions, remote code execution (RCE) via Server-Side Template Injection (SSTI) payloads.\n\nNote that this will only work if you have an authenticated administrator account with [allowAdminChanges enabled](https://craftcms.com/docs/5.x/reference/config/general.html#allowadminchanges).\n\nhttps://craftcms.com/knowledge-base/securing-craft#set-allowAdminChanges-to-false-in-production\n\n### Details\nThe issue lies in line 57 of `cms/src/helpers/FileHelper.php`, it only removes `file://` on the most left. It is trivial to bypass this sanitization by adding 2 `file://`, e.g. `file://file:////`.\n```php\n    public static function normalizePath($path, $ds = DIRECTORY_SEPARATOR): string\n    {\n        // Remove any file protocol wrappers\n        $path = StringHelper::removeLeft($path, 'file://');\n\n        // Is this a UNC network share path?\n        $isUnc = (str_starts_with($path, '//') || str_starts_with($path, '\\\\\\\\'));\n\n        // Normalize the path\n        $path = parent::normalizePath($path, $ds);\n\n        // If it is UNC, add those slashes back in front\n        if ($isUnc) {\n            $path = $ds . $ds . ltrim($path, $ds);\n        }\n\n        return $path;\n    }\n```\n\n### PoC\n1. Sign in with an admin account and navigate to `Settings â†’ Assets`, then create a new volume.\n2. n the Asset Filesystem section, create a new file system and set the Base Path to `file://file:////vendor`.\nWithout the prefix, the selection fails.\n ![alt text](https://winslow1984.com/uploads/images/gallery/2024-09/1.png)\nWith the double `file://` prefix, the selection succeeds.\n ![alt text](https://winslow1984.com/uploads/images/gallery/2024-09/2.png)\n3. Access Assets from the left navigation bar, then upload a file into this volume.\n ![alt text](https://winslow1984.com/uploads/images/gallery/2024-09/3.png)\n4. The file is successfully uploaded and stored in the sensitive folder specified (e.g., `/vendor`).\n ![alt text](https://winslow1984.com/uploads/images/gallery/2024-09/4.png)\n5. SSTI payloads can be uploaded to `/templates` folder, though full code execution was not achieved during testing, some payloads were still successful, leading to sensitive information disclosure, among other potential impacts.\n ![alt text](https://winslow1984.com/uploads/images/gallery/2024-09/7306f23f208e8e8dff48d65a0dc02dc.png)\n\n### Impact\nAttackers who compromise an admin account(The admin user is not equal to the server owner) can exploit this flaw to assign sensitive folders as the base path of the filesystem. For instance, if the path `/templates` is specified (e.g., `file://file:////var/www/html/templates`), the attacker could upload SSTI payloads. While CraftCMS includes strict SSTI input sanitization, RCE may still be possible if the attacker can craft a valid payload, as seen in similar vulnerabilities (e.g., [GHSA-44wr-rmwq-3phw](https://github.com/advisories/GHSA-44wr-rmwq-3phw)).\n\nAdditionally, attackers can upload tampered files to overwrite critical web application files. By enabling public URLs for files in the specified filesystem, they can also retrieve sensitive files (e.g., configuration files from the local file system).\n\nAlthough the vulnerability is exploitable only in the authenticated users, configuration with `ALLOW_ADMIN_CHANGES=true`, there is still a potential security threat.\n\n",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H"
    },
    {
      "type": "CVSS_V4",
      "score": "CVSS:4.0/AV:N/AC:L/AT:P/PR:H/UI:A/VC:H/VI:H/VA:H/SC:H/SI:H/SA:H/E:P"
    }
  ],
  "affected": [
    {
      "package": {
        "ecosystem": "Packagist",
        "name": "craftcms/cms"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "5.0.0-RC1"
            },
            {
              "fixed": "5.4.6"
            }
          ]
        }
      ],
      "database_specific": {
        "last_known_affected_version_range": "<= 5.4.5.1"
      }
    },
    {
      "package": {
        "ecosystem": "Packagist",
        "name": "craftcms/cms"
      },
      "ranges": [
        {
          "type": "ECOSYSTEM",
          "events": [
            {
              "introduced": "4.0.0-RC1"
            },
            {
              "fixed": "4.12.5"
            }
          ]
        }
      ],
      "database_specific": {
        "last_known_affected_version_range": "<= 4.12.4.1"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/craftcms/cms/security/advisories/GHSA-jrh5-vhr9-qh7q"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-52291"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/craftcms/cms"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-22"
    ],
    "severity": "HIGH",
    "github_reviewed": true,
    "github_reviewed_at": "2024-11-13T14:12:36Z",
    "nvd_published_at": "2024-11-13T17:15:12Z"
  }
}